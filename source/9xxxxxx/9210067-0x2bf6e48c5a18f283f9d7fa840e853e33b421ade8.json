{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract PauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Initializable, Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        PauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/storage/EthicHubStorageInterface.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n/**\r\n * Interface for the eternal storage.\r\n * Thanks RocketPool!\r\n * https://github.com/rocket-pool/rocketpool/blob/master/contracts/interface/RocketStorageInterface.sol\r\n */\r\ncontract EthicHubStorageInterface {\r\n\r\n    //modifier for access in sets and deletes\r\n    modifier onlyEthicHubContracts() {_;}\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n}\r\n\r\n// File: contracts/EthicHubBase.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\ncontract EthicHubBase is Initializable {\r\n\r\n    uint8 public version;\r\n\r\n    EthicHubStorageInterface public ethicHubStorage;\r\n\r\n    function initialize(address _ethicHubStorage, uint8 _version) public initializer {\r\n        require(address(_ethicHubStorage) != address(0), \"Storage address cannot be zero address\");\r\n        ethicHubStorage = EthicHubStorageInterface(_ethicHubStorage);\r\n        version = _version;\r\n    }\r\n}\r\n\r\n// File: contracts/lending/EthicHubLending.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EthicHubLending is Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum LendingState {\r\n        Uninitialized,\r\n        AcceptingContributions,\r\n        ExchangingToFiat,\r\n        AwaitingReturn,\r\n        ProjectNotFunded,\r\n        ContributionReturned,\r\n        Default\r\n    }\r\n\r\n    uint8 public version;\r\n    EthicHubStorageInterface public ethicHubStorage;\r\n\r\n    IERC20 public stableCoin;\r\n\r\n    mapping(address => Investor) public investors;\r\n\r\n    uint256 public investorCount;\r\n    uint256 public reclaimedContributions;\r\n    uint256 public fundingStartTime; // Start time of contribution period in UNIX time\r\n    uint256 public fundingEndTime; // End time of contribution period in UNIX time\r\n    uint256 public totalContributed;\r\n\r\n    bool public capReached;\r\n\r\n    LendingState public state;\r\n\r\n    uint256 public annualInterest;\r\n    uint256 public totalLendingAmount;\r\n    uint256 public lendingDays;\r\n    uint256 public borrowerReturnDays;\r\n    uint256 public initialStableCoinPerFiatRate;\r\n    uint256 public totalLendingFiatAmount;\r\n\r\n    address public borrower;\r\n    address public localNode;\r\n    address public ethicHubTeam;\r\n\r\n    address public depositManager;\r\n\r\n    uint256 public borrowerReturnStableCoinPerFiatRate;\r\n    uint256 public ethichubFee;\r\n    uint256 public localNodeFee;\r\n\r\n    // Interest rate is using base uint 100 and 100% 10000, this means 1% is 100\r\n    // this guarantee we can have a 2 decimal presicion in our calculation\r\n    uint256 public constant interestBaseUint = 100;\r\n    uint256 public constant interestBasePercent = 10000;\r\n\r\n    bool public localNodeFeeReclaimed;\r\n    bool public ethicHubTeamFeeReclaimed;\r\n\r\n    uint256 public returnedAmount;\r\n\r\n    struct Investor {\r\n        uint256 amount;\r\n        bool isCompensated;\r\n    }\r\n\r\n    // Events\r\n    event CapReached(uint endTime);\r\n    event Contribution(uint totalContributed, address indexed investor, uint amount, uint investorsCount);\r\n    event Compensated(address indexed contributor, uint amount);\r\n    event StateChange(uint state);\r\n    event InitalRateSet(uint rate);\r\n    event ReturnRateSet(uint rate);\r\n    event ReturnAmount(address indexed borrower, uint amount);\r\n    event BorrowerChanged(address indexed newBorrower);\r\n    event InvestorChanged(address indexed oldInvestor, address indexed newInvestor);\r\n    event Reclaim(address indexed target, uint256 amount);\r\n\r\n    modifier checkIfArbiter() {\r\n        address arbiter = ethicHubStorage.getAddress(keccak256(abi.encodePacked(\"arbiter\", this)));\r\n        require(arbiter == msg.sender, \"Sender not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrLocalNode() {\r\n        require(localNode == msg.sender || owner() == msg.sender,\"Sender not authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _fundingStartTime,\r\n        uint256 _fundingEndTime,\r\n        uint256 _annualInterest,\r\n        uint256 _totalLendingAmount,\r\n        uint256 _lendingDays,\r\n        uint256 _ethichubFee,\r\n        uint256 _localNodeFee,\r\n        address _borrower,\r\n        address _localNode,\r\n        address _ethicHubTeam,\r\n        address _depositManager,\r\n        address _ethicHubStorage,\r\n        address _stableCoin\r\n        ) public {\r\n        require(address(_ethicHubStorage) != address(0), \"Storage address cannot be zero address\");\r\n\r\n        ethicHubStorage = EthicHubStorageInterface(_ethicHubStorage);\r\n        version = 8;\r\n\r\n        require(_fundingEndTime > fundingStartTime, \"fundingEndTime should be later than fundingStartTime\");\r\n        require(_borrower != address(0), \"No borrower set\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"representative\", _borrower))), \"Borrower not registered representative\");\r\n        require(_localNode != address(0), \"No Local Node set\");\r\n        require(_ethicHubTeam != address(0), \"No EthicHub Team set\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"localNode\", _localNode))), \"Local Node is not registered\");\r\n        require(_totalLendingAmount > 0, \"_totalLendingAmount must be > 0\");\r\n        require(_lendingDays > 0, \"_lendingDays must be > 0\");\r\n        require(_annualInterest > 0 && _annualInterest < 100, \"_annualInterest must be between 0 and 100\");\r\n\r\n        reclaimedContributions = 0;\r\n        borrowerReturnDays = 0;\r\n\r\n        fundingStartTime = _fundingStartTime;\r\n        fundingEndTime = _fundingEndTime;\r\n        annualInterest = _annualInterest;\r\n        totalLendingAmount = _totalLendingAmount;\r\n        lendingDays = _lendingDays;\r\n        ethichubFee = _ethichubFee;\r\n        localNodeFee = _localNodeFee;\r\n\r\n        borrower = _borrower;\r\n        localNode = _localNode;\r\n        ethicHubTeam = _ethicHubTeam;\r\n\r\n        depositManager = _depositManager;\r\n\r\n        stableCoin = IERC20(_stableCoin);\r\n\r\n        state = LendingState.Uninitialized;\r\n\r\n        Ownable.initialize(msg.sender);\r\n        Pausable.initialize(msg.sender);\r\n    }\r\n\r\n    function saveInitialParametersToStorage(\r\n        uint256 _maxDelayDays,\r\n        uint256 _communityMembers,\r\n        address _community\r\n        ) external onlyOwnerOrLocalNode {\r\n        require(_maxDelayDays != 0, \"_maxDelayDays must be > 0\");\r\n        require(state == LendingState.Uninitialized, \"State must be Uninitialized\");\r\n        require(_communityMembers > 0, \"_communityMembers must be > 0\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"community\", _community))), \"Community is not registered\");\r\n\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.maxDelayDays\", this)), _maxDelayDays);\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"lending.community\", this)), _community);\r\n        ethicHubStorage.setAddress(keccak256(abi.encodePacked(\"lending.localNode\", this)), localNode);\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.communityMembers\", this)), _communityMembers);\r\n\r\n        changeState(LendingState.AcceptingContributions);\r\n    }\r\n\r\n    function setBorrower(address _borrower) external checkIfArbiter {\r\n        require(_borrower != address(0), \"No borrower set\");\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"representative\", _borrower))), \"Borrower not registered representative\");\r\n\r\n        borrower = _borrower;\r\n\r\n        emit BorrowerChanged(borrower);\r\n    }\r\n\r\n    function changeInvestorAddress(address oldInvestor, address newInvestor) external checkIfArbiter {\r\n        require(newInvestor != address(0));\r\n        require(ethicHubStorage.getBool(keccak256(abi.encodePacked(\"user\", \"investor\", newInvestor))));\r\n        require(investors[oldInvestor].amount != 0, \"OldInvestor should have invested in this project\");\r\n        require(\r\n            investors[newInvestor].amount == 0,\r\n            \"newInvestor should not have invested anything\"\r\n        );\r\n\r\n        investors[newInvestor].amount = investors[oldInvestor].amount;\r\n        investors[newInvestor].isCompensated = investors[oldInvestor].isCompensated;\r\n\r\n        delete investors[oldInvestor];\r\n\r\n        emit InvestorChanged(oldInvestor, newInvestor);\r\n    }\r\n\r\n    function deposit(address contributor, uint256 amount) external {\r\n        require(\r\n            msg.sender == depositManager,\r\n            \"Caller is not a deposit manager\"\r\n        );\r\n        require(\r\n            state == LendingState.AcceptingContributions ||\r\n            state == LendingState.AwaitingReturn,\r\n            \"Can't contribute in this state\"\r\n        );\r\n\r\n        if(state == LendingState.AcceptingContributions) {\r\n            contributeWithAddress(contributor, amount);\r\n        } else {\r\n            require(contributor == borrower, \"In state AwaitingReturn only borrower can contribute\");\r\n            returnBorrowed(amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * After the contribution period ends unsuccesfully, this method enables the contributor\r\n     *  to retrieve their contribution\r\n     */\r\n    function declareProjectNotFunded() external onlyOwnerOrLocalNode {\r\n        require(totalContributed < totalLendingAmount);\r\n        require(state == LendingState.AcceptingContributions);\r\n        require(now > fundingEndTime);\r\n\r\n        changeState(LendingState.ProjectNotFunded);\r\n    }\r\n\r\n    function declareProjectDefault() external onlyOwnerOrLocalNode {\r\n        require(state == LendingState.AwaitingReturn);\r\n        uint maxDelayDays = getMaxDelayDays();\r\n        require(getDelayDays(now) >= maxDelayDays);\r\n\r\n        ethicHubStorage.setUint(keccak256(abi.encodePacked(\"lending.delayDays\", this)), maxDelayDays);\r\n\r\n        changeState(LendingState.Default);\r\n    }\r\n\r\n    function setborrowerReturnStableCoinPerFiatRate(uint256 _borrowerReturnStableCoinPerFiatRate) external onlyOwnerOrLocalNode {\r\n        require(state == LendingState.AwaitingReturn, \"State is not AwaitingReturn\");\r\n\r\n        borrowerReturnStableCoinPerFiatRate = _borrowerReturnStableCoinPerFiatRate;\r\n\r\n        emit ReturnRateSet(borrowerReturnStableCoinPerFiatRate);\r\n    }\r\n\r\n    /**\r\n    * Marks the initial exchange period as over (the ETH collected amount has been exchanged for local Fiat currency)\r\n    * Sets the local currency to return, on the basis of which the interest will be calculated\r\n    * @param _initialStableCoinPerFiatRate the rate with 2 decimals. i.e. 444.22 is 44422 , 1245.00 is 124500\r\n    */\r\n    function finishInitialExchangingPeriod(uint256 _initialStableCoinPerFiatRate) external onlyOwnerOrLocalNode {\r\n        require(capReached == true, \"Cap not reached\");\r\n        require(state == LendingState.ExchangingToFiat, \"State is not ExchangingToFiat\");\r\n\r\n        initialStableCoinPerFiatRate = _initialStableCoinPerFiatRate;\r\n        totalLendingFiatAmount = totalLendingAmount.mul(initialStableCoinPerFiatRate);\r\n\r\n        emit InitalRateSet(initialStableCoinPerFiatRate);\r\n\r\n        changeState(LendingState.AwaitingReturn);\r\n    }\r\n\r\n    /**\r\n     * Method to reclaim contribution after project is declared default (% of partial funds)\r\n     * @param  beneficiary the contributor\r\n     *\r\n     */\r\n    function reclaimContributionDefault(address beneficiary) external {\r\n        require(state == LendingState.Default);\r\n        require(!investors[beneficiary].isCompensated);\r\n\r\n        // contribution = contribution * partial_funds / total_funds\r\n        uint256 contribution = checkInvestorReturns(beneficiary);\r\n\r\n        require(contribution > 0);\r\n\r\n        investors[beneficiary].isCompensated = true;\r\n        reclaimedContributions = reclaimedContributions.add(1);\r\n\r\n        doReclaim(beneficiary, contribution);\r\n    }\r\n\r\n    /**\r\n     * Method to reclaim contribution after a project is declared as not funded\r\n     * @param  beneficiary the contributor\r\n     *\r\n     */\r\n    function reclaimContribution(address beneficiary) external {\r\n        require(state == LendingState.ProjectNotFunded, \"State is not ProjectNotFunded\");\r\n        require(!investors[beneficiary].isCompensated, \"Contribution already reclaimed\");\r\n        uint256 contribution = investors[beneficiary].amount;\r\n        require(contribution > 0, \"Contribution is 0\");\r\n\r\n        investors[beneficiary].isCompensated = true;\r\n        reclaimedContributions = reclaimedContributions.add(1);\r\n\r\n        doReclaim(beneficiary, contribution);\r\n    }\r\n\r\n    function reclaimContributionWithInterest(address beneficiary) external {\r\n        require(state == LendingState.ContributionReturned, \"State is not ContributionReturned\");\r\n        require(!investors[beneficiary].isCompensated, \"Lender already compensated\");\r\n        uint256 contribution = checkInvestorReturns(beneficiary);\r\n        require(contribution > 0, \"Contribution is 0\");\r\n\r\n        investors[beneficiary].isCompensated = true;\r\n        reclaimedContributions = reclaimedContributions.add(1);\r\n\r\n        doReclaim(beneficiary, contribution);\r\n    }\r\n\r\n    function reclaimLocalNodeFee() external {\r\n        require(state == LendingState.ContributionReturned, \"State is not ContributionReturned\");\r\n        require(localNodeFeeReclaimed == false, \"Local Node's fee already reclaimed\");\r\n        uint256 fee = totalLendingFiatAmount.mul(localNodeFee).mul(interestBaseUint).div(interestBasePercent).div(borrowerReturnStableCoinPerFiatRate);\r\n        require(fee > 0, \"Local Node's team fee is 0\");\r\n\r\n        localNodeFeeReclaimed = true;\r\n\r\n        doReclaim(localNode, fee);\r\n    }\r\n\r\n    function reclaimEthicHubTeamFee() external {\r\n        require(state == LendingState.ContributionReturned, \"State is not ContributionReturned\");\r\n        require(ethicHubTeamFeeReclaimed == false, \"EthicHub team's fee already reclaimed\");\r\n        uint256 fee = totalLendingFiatAmount.mul(ethichubFee).mul(interestBaseUint).div(interestBasePercent).div(borrowerReturnStableCoinPerFiatRate);\r\n        require(fee > 0, \"EthicHub's team fee is 0\");\r\n\r\n        ethicHubTeamFeeReclaimed = true;\r\n\r\n        doReclaim(ethicHubTeam, fee);\r\n    }\r\n\r\n    function reclaimLeftover() external checkIfArbiter {\r\n        require(state == LendingState.ContributionReturned || state == LendingState.Default, \"State is not ContributionReturned or Default\");\r\n        require(localNodeFeeReclaimed, \"Local Node fee is not reclaimed\");\r\n        require(ethicHubTeamFeeReclaimed, \"Team fee is not reclaimed\");\r\n        require(investorCount == reclaimedContributions, \"Not all investors have reclaimed their share\");\r\n\r\n        doReclaim(ethicHubTeam, stableCoin.balanceOf(address(this)));\r\n    }\r\n\r\n    function doReclaim(address target, uint256 amount) internal {\r\n        uint256 contractBalance = stableCoin.balanceOf(address(this));\r\n        uint256 reclaimAmount = (contractBalance < amount) ? contractBalance : amount;\r\n\r\n        require(stableCoin.transfer(target, reclaimAmount), \"transfer stable token method failed\");\r\n\r\n        emit Reclaim(target, reclaimAmount);\r\n    }\r\n\r\n    function returnBorrowed(uint256 amount) internal {\r\n        require(state == LendingState.AwaitingReturn, \"State is not AwaitingReturn\");\r\n        require(borrowerReturnStableCoinPerFiatRate > 0, \"Second exchange rate not set\");\r\n\r\n        bool projectRepayed = false;\r\n        uint excessRepayment = 0;\r\n        uint newReturnedAmount = 0;\r\n\r\n        emit ReturnAmount(borrower, amount);\r\n\r\n        (newReturnedAmount, projectRepayed, excessRepayment) = calculatePaymentGoal(borrowerReturnAmount(), returnedAmount, amount);\r\n\r\n        returnedAmount = newReturnedAmount;\r\n\r\n        if (projectRepayed == true) {\r\n            borrowerReturnDays = getDaysPassedBetweenDates(fundingEndTime, now);\r\n            changeState(LendingState.ContributionReturned);\r\n        }\r\n\r\n        if (excessRepayment > 0) {\r\n            require(stableCoin.transfer(borrower, excessRepayment), \"transfer stable token method failed\");\r\n        }\r\n    }\r\n\r\n    // @notice Function to participate in contribution period\r\n    //  Amounts from the same address should be added up\r\n    //  If cap is reached, end time should be modified\r\n    //  Funds should be transferred into multisig wallet\r\n    // @param contributor Address\r\n    function contributeWithAddress(address contributor, uint256 amount) internal whenNotPaused {\r\n        require(state == LendingState.AcceptingContributions, \"state is not AcceptingContributions\");\r\n        require(isContribPeriodRunning(), \"can't contribute outside contribution period\");\r\n\r\n        uint oldTotalContributed = totalContributed;\r\n        uint newTotalContributed = 0;\r\n        uint excessContribAmount = 0;\r\n\r\n        (newTotalContributed, capReached, excessContribAmount) = calculatePaymentGoal(totalLendingAmount, oldTotalContributed, amount);\r\n\r\n        totalContributed = newTotalContributed;\r\n\r\n        if (capReached) {\r\n            fundingEndTime = now;\r\n            emit CapReached(fundingEndTime);\r\n        }\r\n\r\n        if (investors[contributor].amount == 0) {\r\n            investorCount = investorCount.add(1);\r\n        }\r\n\r\n        if (excessContribAmount > 0) {\r\n            require(stableCoin.transfer(contributor, excessContribAmount), \"transfer stable token method failed\");\r\n            investors[contributor].amount = investors[contributor].amount.add(amount).sub(excessContribAmount);\r\n            emit Contribution(newTotalContributed, contributor, amount.sub(excessContribAmount), investorCount);\r\n        } else {\r\n            investors[contributor].amount = investors[contributor].amount.add(amount);\r\n            emit Contribution(newTotalContributed, contributor, amount, investorCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates if a target value is reached after increment, and by how much it was surpassed.\r\n     * @param goal the target to achieve\r\n     * @param oldTotal the total so far after the increment\r\n     * @param contribValue the increment\r\n     * @return (the incremented count, not bigger than max), (goal has been reached), (excess to return)\r\n     */\r\n    function calculatePaymentGoal(uint goal, uint oldTotal, uint contribValue) internal pure returns(uint, bool, uint) {\r\n        uint newTotal = oldTotal.add(contribValue);\r\n        bool goalReached = false;\r\n        uint excess = 0;\r\n        if (newTotal >= goal && oldTotal < goal) {\r\n            goalReached = true;\r\n            excess = newTotal.sub(goal);\r\n            contribValue = contribValue.sub(excess);\r\n            newTotal = goal;\r\n        }\r\n        return (newTotal, goalReached, excess);\r\n    }\r\n\r\n    function sendFundsToBorrower() external onlyOwnerOrLocalNode {\r\n        // Waiting for Exchange\r\n        require(state == LendingState.AcceptingContributions, \"State has to be AcceptingContributions\");\r\n        require(capReached, \"Cap is not reached\");\r\n\r\n        changeState(LendingState.ExchangingToFiat);\r\n\r\n        stableCoin.transfer(borrower, totalContributed);\r\n    }\r\n\r\n    /**\r\n    * Calculates days passed after defaulting\r\n    * @param date timestamp to calculate days\r\n    * @return day number\r\n    */\r\n    function getDelayDays(uint date) public view returns(uint) {\r\n        uint lendingDaysSeconds = lendingDays * 1 days;\r\n        uint defaultTime = fundingEndTime.add(lendingDaysSeconds);\r\n\r\n        if (date < defaultTime) {\r\n            return 0;\r\n        } else {\r\n            return getDaysPassedBetweenDates(defaultTime, date);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Calculates days passed between two dates in seconds\r\n    * @param firstDate timestamp\r\n    * @param lastDate timestamp\r\n    * @return days passed\r\n    */\r\n    function getDaysPassedBetweenDates(uint firstDate, uint lastDate) public pure returns(uint) {\r\n        require(firstDate <= lastDate, \"lastDate must be bigger than firstDate\");\r\n        return lastDate.sub(firstDate).div(60).div(60).div(24);\r\n    }\r\n\r\n    // lendingInterestRate with 2 decimal\r\n    // 15 * (lending days)/ 365 + 4% local node fee + 3% LendingDev fee\r\n    function lendingInterestRatePercentage() public view returns(uint256){\r\n        return annualInterest.mul(interestBaseUint)\r\n            // current days\r\n            .mul(getDaysPassedBetweenDates(fundingEndTime, now)).div(365)\r\n            .add(localNodeFee.mul(interestBaseUint))\r\n            .add(ethichubFee.mul(interestBaseUint))\r\n            .add(interestBasePercent);\r\n    }\r\n\r\n    // lendingInterestRate with 2 decimal\r\n    function investorInterest() public view returns(uint256){\r\n        return annualInterest.mul(interestBaseUint).mul(borrowerReturnDays).div(365).add(interestBasePercent);\r\n    }\r\n\r\n    function borrowerReturnFiatAmount() public view returns(uint256) {\r\n        return totalLendingFiatAmount.mul(lendingInterestRatePercentage()).div(interestBasePercent);\r\n    }\r\n\r\n    function borrowerReturnAmount() public view returns(uint256) {\r\n        return borrowerReturnFiatAmount().div(borrowerReturnStableCoinPerFiatRate);\r\n    }\r\n\r\n    function isContribPeriodRunning() public view returns(bool) {\r\n        return fundingStartTime <= now && fundingEndTime > now && !capReached;\r\n    }\r\n\r\n    function checkInvestorContribution(address investor) public view returns(uint256){\r\n        return investors[investor].amount;\r\n    }\r\n\r\n    function checkInvestorReturns(address investor) public view returns(uint256) {\r\n        uint256 investorAmount = 0;\r\n        if (state == LendingState.ContributionReturned) {\r\n            investorAmount = investors[investor].amount;\r\n            return investorAmount.mul(initialStableCoinPerFiatRate).mul(investorInterest()).div(borrowerReturnStableCoinPerFiatRate).div(interestBasePercent);\r\n        } else if (state == LendingState.Default){\r\n            investorAmount = investors[investor].amount;\r\n            // contribution = contribution * partial_funds / total_funds\r\n            return investorAmount.mul(returnedAmount).div(totalLendingAmount);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getMaxDelayDays() public view returns(uint256){\r\n        return ethicHubStorage.getUint(keccak256(abi.encodePacked(\"lending.maxDelayDays\", this)));\r\n    }\r\n\r\n    function getUserContributionReclaimStatus(address userAddress) public view returns(bool isCompensated){\r\n        return investors[userAddress].isCompensated;\r\n    }\r\n\r\n    function changeState(LendingState newState) internal {\r\n        state = newState;\r\n        emit StateChange(uint(newState));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_annualInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethichubFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_localNodeFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_localNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethicHubTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethicHubStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBorrower\",\"type\":\"address\"}],\"name\":\"BorrowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"CapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compensated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalContributed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investorsCount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"InitalRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldInvestor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInvestor\",\"type\":\"address\"}],\"name\":\"InvestorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reclaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ReturnRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"annualInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnFiatAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerReturnStableCoinPerFiatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldInvestor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newInvestor\",\"type\":\"address\"}],\"name\":\"changeInvestorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"checkInvestorContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"checkInvestorReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"declareProjectDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"declareProjectNotFunded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubStorage\",\"outputs\":[{\"internalType\":\"contract EthicHubStorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubTeamFeeReclaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethichubFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialStableCoinPerFiatRate\",\"type\":\"uint256\"}],\"name\":\"finishInitialExchangingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDate\",\"type\":\"uint256\"}],\"name\":\"getDaysPassedBetweenDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getDelayDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxDelayDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserContributionReclaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCompensated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialStableCoinPerFiatRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestBasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestBaseUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompensated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContribPeriodRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingInterestRatePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localNodeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"localNodeFeeReclaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContributionDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"reclaimContributionWithInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEthicHubTeamFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimLeftover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimLocalNodeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimedContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDelayDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_communityMembers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_community\",\"type\":\"address\"}],\"name\":\"saveInitialParametersToStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendFundsToBorrower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"setBorrower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowerReturnStableCoinPerFiatRate\",\"type\":\"uint256\"}],\"name\":\"setborrowerReturnStableCoinPerFiatRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum EthicHubLending.LendingState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLendingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLendingFiatAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EthicHubLending","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005e0fc068000000000000000000000000000000000000000000000000000000005e372a40000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000f7531b2e8a2481b2970000000000000000000000000000000000000000000000000000000000000049000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000007d0be650deb74e580127eba32b88f7d48eed6ade000000000000000000000000de7c8c613c68fc9ff1ab7abe6ba3ea7613d1e0920000000000000000000000005fab5fc785db86fae12aa8812932beeb970cf9c8000000000000000000000000ae0c1645f27386c74511e9d5c96733f1965f56b60000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","Library":"","LicenseType":"None","SwarmSource":"bzzr://c3238eca63efcfafd2da8741f648f26d7dfb18d60482a7cf05bcea839377c38e"}]}