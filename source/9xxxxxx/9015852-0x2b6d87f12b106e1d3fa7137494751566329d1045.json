{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Module {\r\n    function init(BaseWallet _wallet) external;\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n    function recoverToken(address _token) external;\r\n}\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n    address public implementation;\r\n    address public owner;\r\n    mapping (address => bool) public authorised;\r\n    mapping (bytes4 => address) public enabled;\r\n    uint public modules;\r\n    function init(address _owner, address[] calldata _modules) external;\r\n    function authoriseModule(address _module, bool _value) external;\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n    function setOwner(address _newOwner) external;\r\n    function invoke(address _target, uint _value, bytes calldata _data) external returns (bytes memory _result);\r\n    function() external payable;\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules. \r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n    function deregisterModule(address _module) external;\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n    function deregisterUpgrader(address _upgrader) external;\r\n    function recoverToken(address _token) external;\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\ncontract TokenPriceProvider {\r\n    mapping(address => uint256) public cachedPrices;\r\n    function getEtherValue(uint256 _amount, address _token) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title GuardianStorage\r\n * @dev Contract storing the state of wallets related to guardians and lock.\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n * @author Olivier Van Den Biggelaar - <olivier@argent.xyz>\r\n */\r\ncontract GuardianStorage {\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function guardianCount(BaseWallet _wallet) external view returns (uint256);\r\n    function getGuardians(BaseWallet _wallet) external view returns (address[] memory);\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n    function setLock(BaseWallet _wallet, uint256 _releaseAfter) external;\r\n    function isLocked(BaseWallet _wallet) external view returns (bool);\r\n    function getLock(BaseWallet _wallet) external view returns (uint256);\r\n    function getLocker(BaseWallet _wallet) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title TransferStorage\r\n * @dev Contract storing the state of wallets related to transfers (limit and whitelist).\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract TransferStorage {\r\n    function setWhitelist(BaseWallet _wallet, address _target, uint256 _value) external;\r\n    function getWhitelist(BaseWallet _wallet, address _target) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns ceil(a / b).\r\n    */\r\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        if(a % b == 0) {\r\n            return c;\r\n        }\r\n        else {\r\n            return c + 1;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseModule\r\n * @dev Basic module that contains some methods common to all modules.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract BaseModule is Module {\r\n\r\n    // Empty calldata\r\n    bytes constant internal EMPTY_BYTES = \"\";\r\n\r\n    // The adddress of the module registry.\r\n    ModuleRegistry internal registry;\r\n    // The address of the Guardian storage\r\n    GuardianStorage internal guardianStorage;\r\n\r\n    /**\r\n     * @dev Throws if the wallet is locked.\r\n     */\r\n    modifier onlyWhenUnlocked(BaseWallet _wallet) {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(!guardianStorage.isLocked(_wallet), \"BM: wallet must be unlocked\");\r\n        _;\r\n    }\r\n\r\n    event ModuleCreated(bytes32 name);\r\n    event ModuleInitialised(address wallet);\r\n\r\n    constructor(ModuleRegistry _registry, GuardianStorage _guardianStorage, bytes32 _name) public {\r\n        registry = _registry;\r\n        guardianStorage = _guardianStorage;\r\n        emit ModuleCreated(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the target wallet of the call.\r\n     */\r\n    modifier onlyWallet(BaseWallet _wallet) {\r\n        require(msg.sender == address(_wallet), \"BM: caller must be wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\r\n     */\r\n    modifier onlyWalletOwner(BaseWallet _wallet) {\r\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \"BM: must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet.\r\n     */\r\n    modifier strictOnlyWalletOwner(BaseWallet _wallet) {\r\n        require(isOwner(_wallet, msg.sender), \"BM: msg.sender must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) public onlyWallet(_wallet) {\r\n        emit ModuleInitialised(address(_wallet));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\r\n    * module by mistake and transfer them to the Module Registry. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(address(registry), total);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to check if an address is the owner of a target wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _addr The address.\r\n     */\r\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\r\n        return _wallet.owner() == _addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to invoke a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _to The target address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     */\r\n    function invokeWallet(address _wallet, address _to, uint256 _value, bytes memory _data) internal returns (bytes memory _res) {\r\n        bool success;\r\n        // solium-disable-next-line security/no-call-value\r\n        (success, _res) = _wallet.call(abi.encodeWithSignature(\"invoke(address,uint256,bytes)\", _to, _value, _data));\r\n        if(success && _res.length > 0) { //_res is empty if _wallet is an \"old\" BaseWallet that can't return output values\r\n            (_res) = abi.decode(_res, (bytes));\r\n        } else if (_res.length > 0) {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        } else if(!success) {\r\n            revert(\"BM: wallet invoke reverted\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title RelayerModule\r\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract RelayerModule is BaseModule {\r\n\r\n    uint256 constant internal BLOCKBOUND = 10000;\r\n\r\n    mapping (address => RelayerConfig) public relayer;\r\n\r\n    struct RelayerConfig {\r\n        uint256 nonce;\r\n        mapping (bytes32 => bool) executedTx;\r\n    }\r\n\r\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\r\n\r\n    /**\r\n     * @dev Throws if the call did not go through the execute() method.\r\n     */\r\n    modifier onlyExecute {\r\n        require(msg.sender == address(this), \"RM: must be called via execute()\");\r\n        _;\r\n    }\r\n\r\n    /* ***************** Abstract method ************************* */\r\n\r\n    /**\r\n    * @dev Gets the number of valid signatures that must be provided to execute a\r\n    * specific relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @return The number of required signatures.\r\n    */\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256);\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST throw if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    */\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool);\r\n\r\n    /* ************************************************************ */\r\n\r\n    /**\r\n    * @dev Executes a relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function execute(\r\n        BaseWallet _wallet,\r\n        bytes calldata _data,\r\n        uint256 _nonce,\r\n        bytes calldata _signatures,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint startGas = gasleft();\r\n        bytes32 signHash = getSignHash(address(this), address(_wallet), 0, _data, _nonce, _gasPrice, _gasLimit);\r\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\r\n        require(verifyData(address(_wallet), _data), \"RM: the wallet authorized is different then the target of the relayed data\");\r\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\r\n        if((requiredSignatures * 65) == _signatures.length) {\r\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\r\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\r\n                    // solium-disable-next-line security/no-call-value\r\n                    (success,) = address(this).call(_data);\r\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\r\n                }\r\n            }\r\n        }\r\n        emit TransactionExecuted(address(_wallet), success, signHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current nonce for a wallet.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\r\n        return relayer[address(_wallet)].nonce;\r\n    }\r\n\r\n    /**\r\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\r\n    * @param _from The starting address for the relayed transaction (should be the module)\r\n    * @param _to The destination address for the relayed transaction (should be the wallet)\r\n    * @param _value The value for the relayed transaction\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function getSignHash(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        uint256 _nonce,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the relayed transaction is unique.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    * @param _signHash The signed hash of the transaction\r\n    */\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        if(relayer[address(_wallet)].executedTx[_signHash] == true) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].executedTx[_signHash] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that a nonce has the correct format and is valid.\r\n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    */\r\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\r\n        if(_nonce <= relayer[address(_wallet)].nonce) {\r\n            return false;\r\n        }\r\n        uint256 nonceBlock = (_nonce & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128;\r\n        if(nonceBlock > block.number + BLOCKBOUND) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].nonce = _nonce;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\r\n    * @param _signedHash The signed hash\r\n    * @param _signatures The concatenated signatures.\r\n    * @param _index The index of the signature to recover.\r\n    */\r\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\r\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\r\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\r\n        }\r\n        require(v == 27 || v == 28);\r\n        return ecrecover(_signedHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n    * @dev Refunds the gas used to the Relayer. \r\n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures. \r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The gas used.\r\n    * @param _gasPrice The gas price for the refund.\r\n    * @param _gasLimit The gas limit for the refund.\r\n    * @param _signatures The number of signatures used in the call.\r\n    * @param _relayer The address of the Relayer.\r\n    */\r\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\r\n        uint256 amount = 29292 + _gasUsed; // 21000 (transaction) + 7620 (execution of refund) + 672 to log the event + _gasUsed\r\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\r\n        if(_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {\r\n            if(_gasPrice > tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            }\r\n            else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            invokeWallet(address(_wallet), _relayer, amount, EMPTY_BYTES);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns false if the refund is expected to fail.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The expected gas used.\r\n    * @param _gasPrice The expected gas price for the refund.\r\n    */\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if(_gasPrice > 0\r\n            && _signatures > 1\r\n            && (address(_wallet).balance < _gasUsed * _gasPrice || _wallet.authorised(address(this)) == false)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\r\n    * as the wallet passed as the input of the execute() method. \r\n    @return false if the addresses are different.\r\n    */\r\n    function verifyData(address _wallet, bytes memory _data) private pure returns (bool) {\r\n        require(_data.length >= 36, \"RM: Invalid dataWallet\");\r\n        address dataWallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\r\n            dataWallet := mload(add(_data, 0x24))\r\n        }\r\n        return dataWallet == _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Parses the data to extract the method signature.\r\n    */\r\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\r\n        require(_data.length >= 4, \"RM: Invalid functionPrefix\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            prefix := mload(add(_data, 0x20))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title OnlyOwnerModule\r\n * @dev Module that extends BaseModule and RelayerModule for modules where the execute() method\r\n * must be called with one signature frm the owner.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract OnlyOwnerModule is BaseModule, RelayerModule {\r\n\r\n    // bytes4 private constant IS_ONLY_OWNER_MODULE = bytes4(keccak256(\"isOnlyOwnerModule()\"));\r\n\r\n   /**\r\n    * @dev Returns a constant that indicates that the module is an OnlyOwnerModule.\r\n    * @return The constant bytes4(keccak256(\"isOnlyOwnerModule()\"))\r\n    */\r\n    function isOnlyOwnerModule() external pure returns (bytes4) {\r\n        // return IS_ONLY_OWNER_MODULE;\r\n        return this.isOnlyOwnerModule.selector;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * Unlike its overrided parent, this method can be called via the RelayerModule's execute()\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external onlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    // Overrides to use the incremental nonce and save some gas\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 /* _signHash */) internal returns (bool) {\r\n        return checkAndUpdateNonce(_wallet, _nonce);\r\n    }\r\n\r\n    function validateSignatures(\r\n        BaseWallet _wallet,\r\n        bytes memory /* _data */,\r\n        bytes32 _signHash,\r\n        bytes memory _signatures\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address signer = recoverSigner(_signHash, _signatures, 0);\r\n        return isOwner(_wallet, signer); // \"OOM: signer must be owner\"\r\n    }\r\n\r\n    function getRequiredSignatures(BaseWallet /* _wallet */, bytes memory /* _data */) internal view returns (uint256) {\r\n        return 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title LimitManager\r\n * @dev Module to manage a daily spending limit\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract LimitManager is BaseModule {\r\n\r\n    // large limit when the limit can be considered disabled\r\n    uint128 constant private LIMIT_DISABLED = uint128(-1); // 3.40282366920938463463374607431768211455e+38\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct LimitManagerConfig {\r\n        // The daily limit\r\n        Limit limit;\r\n        // The current usage\r\n        DailySpent dailySpent;\r\n    }\r\n\r\n    struct Limit {\r\n        // the current limit\r\n        uint128 current;\r\n        // the pending limit if any\r\n        uint128 pending;\r\n        // when the pending limit becomes the current limit\r\n        uint64 changeAfter;\r\n    }\r\n\r\n    struct DailySpent {\r\n        // The amount already spent during the current period\r\n        uint128 alreadySpent;\r\n        // The end of the current period\r\n        uint64 periodEnd;\r\n    }\r\n\r\n    // wallet specific storage\r\n    mapping (address => LimitManagerConfig) internal limits;\r\n    // The default limit\r\n    uint256 public defaultLimit;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event LimitChanged(address indexed wallet, uint indexed newLimit, uint64 indexed startAfter);\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(uint256 _defaultLimit) public {\r\n        defaultLimit = _defaultLimit;\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by setting the limit to the default value.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function init(BaseWallet _wallet) public onlyWallet(_wallet) {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        if(limit.current == 0 && limit.changeAfter == 0) {\r\n            limit.current = uint128(defaultLimit);\r\n        }\r\n    }\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n     * @dev Changes the daily limit.\r\n     * The limit is expressed in ETH and the change is pending for the security period.\r\n     * @param _wallet The target wallet.\r\n     * @param _newLimit The new limit.\r\n     * @param _securityPeriod The security period.\r\n     */\r\n    function changeLimit(BaseWallet _wallet, uint256 _newLimit, uint256 _securityPeriod) internal {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        // solium-disable-next-line security/no-block-members\r\n        uint128 current = (limit.changeAfter > 0 && limit.changeAfter < now) ? limit.pending : limit.current;\r\n        limit.current = current;\r\n        limit.pending = uint128(_newLimit);\r\n        // solium-disable-next-line security/no-block-members\r\n        limit.changeAfter = uint64(now.add(_securityPeriod));\r\n        // solium-disable-next-line security/no-block-members\r\n        emit LimitChanged(address(_wallet), _newLimit, uint64(now.add(_securityPeriod)));\r\n    }\r\n\r\n     /**\r\n     * @dev Disable the daily limit.\r\n     * The change is pending for the security period.\r\n     * @param _wallet The target wallet.\r\n     * @param _securityPeriod The security period.\r\n     */\r\n    function disableLimit(BaseWallet _wallet, uint256 _securityPeriod) internal {\r\n        changeLimit(_wallet, LIMIT_DISABLED, _securityPeriod);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current daily limit for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @return the current limit expressed in ETH.\r\n    */\r\n    function getCurrentLimit(BaseWallet _wallet) public view returns (uint256 _currentLimit) {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        _currentLimit = uint256(currentLimit(limit.current, limit.pending, limit.changeAfter));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the daily limit is disabled for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @return true if the daily limit is disabled, false otherwise.\r\n    */\r\n    function isLimitDisabled(BaseWallet _wallet) public view returns (bool _limitDisabled) {\r\n        uint256 currentLimit = getCurrentLimit(_wallet);\r\n        _limitDisabled = currentLimit == LIMIT_DISABLED;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets a pending limit for a wallet if any.\r\n    * @param _wallet The target wallet.\r\n    * @return the pending limit (in ETH) and the time at chich it will become effective.\r\n    */\r\n    function getPendingLimit(BaseWallet _wallet) external view returns (uint256 _pendingLimit, uint64 _changeAfter) {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        // solium-disable-next-line security/no-block-members\r\n        return ((now < limit.changeAfter)? (uint256(limit.pending), limit.changeAfter) : (0,0));\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the amount of tokens that has not yet been spent during the current period.\r\n    * @param _wallet The target wallet.\r\n    * @return the amount of tokens (in ETH) that has not been spent yet and the end of the period.\r\n    */\r\n    function getDailyUnspent(BaseWallet _wallet) external view returns (uint256 _unspent, uint64 _periodEnd) {\r\n        uint256 limit = getCurrentLimit(_wallet);\r\n        DailySpent storage expense = limits[address(_wallet)].dailySpent;\r\n        // solium-disable-next-line security/no-block-members\r\n        if(now > expense.periodEnd) {\r\n            _unspent = limit;\r\n            // solium-disable-next-line security/no-block-members\r\n            _periodEnd = uint64(now + 24 hours);\r\n        }\r\n        else {\r\n            _periodEnd = expense.periodEnd;\r\n            if(expense.alreadySpent < limit) {\r\n                _unspent = limit - expense.alreadySpent;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to check if a transfer is within the limit.\r\n    * If yes the daily unspent for the current period is updated.\r\n    * @param _wallet The target wallet.\r\n    * @param _amount The amount for the transfer\r\n    */\r\n    function checkAndUpdateDailySpent(BaseWallet _wallet, uint _amount) internal returns (bool) {\r\n        if(_amount == 0) return true;\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        uint128 current = currentLimit(limit.current, limit.pending, limit.changeAfter);\r\n        if(isWithinDailyLimit(_wallet, current, _amount)) {\r\n            updateDailySpent(_wallet, current, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to update the daily spent for the current period.\r\n    * @param _wallet The target wallet.\r\n    * @param _limit The current limit for the wallet.\r\n    * @param _amount The amount to add to the daily spent.\r\n    */\r\n    function updateDailySpent(BaseWallet _wallet, uint128 _limit, uint _amount) internal {\r\n        if(_limit != LIMIT_DISABLED) {\r\n            DailySpent storage expense = limits[address(_wallet)].dailySpent;\r\n            // solium-disable-next-line security/no-block-members\r\n            if (expense.periodEnd < now) {\r\n                // solium-disable-next-line security/no-block-members\r\n                expense.periodEnd = uint64(now + 24 hours);\r\n                expense.alreadySpent = uint128(_amount);\r\n            }\r\n            else {\r\n                expense.alreadySpent += uint128(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if a transfer amount is withing the daily limit for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _limit The current limit for the wallet.\r\n    * @param _amount The transfer amount.\r\n    * @return true if the transfer amount is withing the daily limit.\r\n    */\r\n    function isWithinDailyLimit(BaseWallet _wallet, uint _limit, uint _amount) internal view returns (bool)  {\r\n        if(_limit == LIMIT_DISABLED) {\r\n            return true;\r\n        }\r\n        DailySpent storage expense = limits[address(_wallet)].dailySpent;\r\n        // solium-disable-next-line security/no-block-members\r\n        if (expense.periodEnd < now) {\r\n            return (_amount <= _limit);\r\n        } else {\r\n            return (expense.alreadySpent + _amount <= _limit && expense.alreadySpent + _amount >= expense.alreadySpent);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to get the current limit from a Limit struct.\r\n    * @param _current The value of the current parameter\r\n    * @param _pending The value of the pending parameter\r\n    * @param _changeAfter The value of the changeAfter parameter\r\n    */\r\n    function currentLimit(uint128 _current, uint128 _pending, uint64 _changeAfter) internal view returns (uint128) {\r\n        // solium-disable-next-line security/no-block-members\r\n        if(_changeAfter > 0 && _changeAfter < now) {\r\n            return _pending;\r\n        }\r\n        return _current;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title BaseTransfer\r\n * @dev Module containing internal methods to execute or approve transfers\r\n * @author Olivier VDB - <olivier@argent.xyz>\r\n */\r\ncontract BaseTransfer is BaseModule {\r\n\r\n    // Mock token address for ETH\r\n    address constant internal ETH_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event Transfer(address indexed wallet, address indexed token, uint256 indexed amount, address to, bytes data);\r\n    event Approved(address indexed wallet, address indexed token, uint256 amount, address spender);\r\n    event CalledContract(address indexed wallet, address indexed to, uint256 amount, bytes data);\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n    * @dev Helper method to transfer ETH or ERC20 for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The ERC20 address.\r\n    * @param _to The recipient.\r\n    * @param _value The amount of ETH to transfer\r\n    * @param _data The data to *log* with the transfer.\r\n    */\r\n    function doTransfer(BaseWallet _wallet, address _token, address _to, uint256 _value, bytes memory _data) internal {\r\n        if(_token == ETH_TOKEN) {\r\n            invokeWallet(address(_wallet), _to, _value, EMPTY_BYTES);\r\n        }\r\n        else {\r\n            bytes memory methodData = abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value);\r\n            invokeWallet(address(_wallet), _token, 0, methodData);\r\n        }\r\n        emit Transfer(address(_wallet), _token, _value, _to, _data);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to approve spending the ERC20 of a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The ERC20 address.\r\n    * @param _spender The spender address.\r\n    * @param _value The amount of token to transfer.\r\n    */\r\n    function doApproveToken(BaseWallet _wallet, address _token, address _spender, uint256 _value) internal {\r\n        bytes memory methodData = abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _value);\r\n        invokeWallet(address(_wallet), _token, 0, methodData);\r\n        emit Approved(address(_wallet), _token, _value, _spender);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to call an external contract.\r\n    * @param _wallet The target wallet.\r\n    * @param _contract The contract address.\r\n    * @param _value The ETH value to transfer.\r\n    * @param _data The method data.\r\n    */\r\n    function doCallContract(BaseWallet _wallet, address _contract, uint256 _value, bytes memory _data) internal {\r\n        invokeWallet(address(_wallet), _contract, _value, _data);\r\n        emit CalledContract(address(_wallet), _contract, _value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title TransferManager\r\n * @dev Module to transfer and approve tokens (ETH or ERC20) or data (contract call) based on a security context (daily limit, whitelist, etc).\r\n * This module is the V2 of TokenTransfer.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract TransferManager is BaseModule, RelayerModule, OnlyOwnerModule, BaseTransfer, LimitManager {\r\n\r\n    bytes32 constant NAME = \"TransferManager\";\r\n\r\n    bytes4 private constant ERC721_ISVALIDSIGNATURE_BYTES = bytes4(keccak256(\"isValidSignature(bytes,bytes)\"));\r\n    bytes4 private constant ERC721_ISVALIDSIGNATURE_BYTES32 = bytes4(keccak256(\"isValidSignature(bytes32,bytes)\"));\r\n\r\n    enum ActionType { Transfer }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct TokenManagerConfig {\r\n        // Mapping between pending action hash and their timestamp\r\n        mapping (bytes32 => uint256) pendingActions;\r\n    }\r\n\r\n    // wallet specific storage\r\n    mapping (address => TokenManagerConfig) internal configs;\r\n\r\n    // The security period\r\n    uint256 public securityPeriod;\r\n    // The execution window\r\n    uint256 public securityWindow;\r\n    // The Token storage\r\n    TransferStorage public transferStorage;\r\n    // The Token price provider\r\n    TokenPriceProvider public priceProvider;\r\n    // The previous limit manager needed to migrate the limits\r\n    LimitManager public oldLimitManager;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event AddedToWhitelist(address indexed wallet, address indexed target, uint64 whitelistAfter);\r\n    event RemovedFromWhitelist(address indexed wallet, address indexed target);\r\n    event PendingTransferCreated(address indexed wallet, bytes32 indexed id, uint256 indexed executeAfter,\r\n        address token, address to, uint256 amount, bytes data);\r\n    event PendingTransferExecuted(address indexed wallet, bytes32 indexed id);\r\n    event PendingTransferCanceled(address indexed wallet, bytes32 indexed id);\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(\r\n        ModuleRegistry _registry,\r\n        TransferStorage _transferStorage,\r\n        GuardianStorage _guardianStorage,\r\n        address _priceProvider,\r\n        uint256 _securityPeriod,\r\n        uint256 _securityWindow,\r\n        uint256 _defaultLimit,\r\n        LimitManager _oldLimitManager\r\n    )\r\n        BaseModule(_registry, _guardianStorage, NAME)\r\n        LimitManager(_defaultLimit)\r\n        public\r\n    {\r\n        transferStorage = _transferStorage;\r\n        priceProvider = TokenPriceProvider(_priceProvider);\r\n        securityPeriod = _securityPeriod;\r\n        securityWindow = _securityWindow;\r\n        oldLimitManager = _oldLimitManager;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by setting up the isValidSignature (EIP 1271)\r\n     * static call redirection from the wallet to the module and copying all the parameters\r\n     * of the daily limit from the previous implementation of the LimitManager module.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function init(BaseWallet _wallet) public onlyWallet(_wallet) {\r\n\r\n        // setup static calls\r\n        _wallet.enableStaticCall(address(this), ERC721_ISVALIDSIGNATURE_BYTES);\r\n        _wallet.enableStaticCall(address(this), ERC721_ISVALIDSIGNATURE_BYTES32);\r\n\r\n        // setup default limit for new deployment\r\n        if(address(oldLimitManager) == address(0)) {\r\n            super.init(_wallet);\r\n            return;\r\n        }\r\n        // get limit from previous LimitManager\r\n        uint256 current = oldLimitManager.getCurrentLimit(_wallet);\r\n        (uint256 pending, uint64 changeAfter) = oldLimitManager.getPendingLimit(_wallet);\r\n        // setup default limit for new wallets\r\n        if(current == 0 && changeAfter == 0) {\r\n            super.init(_wallet);\r\n            return;\r\n        }\r\n        // migrate existing limit for existing wallets\r\n        if(current == pending) {\r\n            limits[address(_wallet)].limit.current = uint128(current);\r\n        }\r\n        else {\r\n            limits[address(_wallet)].limit = Limit(uint128(current), uint128(pending), changeAfter);\r\n        }\r\n        // migrate daily pending if we are within a rolling period\r\n        (uint256 unspent, uint64 periodEnd) = oldLimitManager.getDailyUnspent(_wallet);\r\n        // solium-disable-next-line security/no-block-members\r\n        if(periodEnd > now) {\r\n            limits[address(_wallet)].dailySpent = DailySpent(uint128(current.sub(unspent)), periodEnd);\r\n        }\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /**\r\n    * @dev lets the owner transfer tokens (ETH or ERC20) from a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The address of the token to transfer.\r\n    * @param _to The destination address\r\n    * @param _amount The amoutn of token to transfer\r\n    * @param _data The data for the transaction\r\n    */\r\n    function transferToken(\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        if(isWhitelisted(_wallet, _to)) {\r\n            // transfer to whitelist\r\n            doTransfer(_wallet, _token, _to, _amount, _data);\r\n        }\r\n        else {\r\n            uint256 etherAmount = (_token == ETH_TOKEN) ? _amount : priceProvider.getEtherValue(_amount, _token);\r\n            if (checkAndUpdateDailySpent(_wallet, etherAmount)) {\r\n                // transfer under the limit\r\n                doTransfer(_wallet, _token, _to, _amount, _data);\r\n            }\r\n            else {\r\n                // transfer above the limit\r\n                (bytes32 id, uint256 executeAfter) = addPendingAction(ActionType.Transfer, _wallet, _token, _to, _amount, _data);\r\n                emit PendingTransferCreated(address(_wallet), id, executeAfter, _token, _to, _amount, _data);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner approve an allowance of ERC20 tokens for a spender (dApp).\r\n    * @param _wallet The target wallet.\r\n    * @param _token The address of the token to transfer.\r\n    * @param _spender The address of the spender\r\n    * @param _amount The amount of tokens to approve\r\n    */\r\n    function approveToken(\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        if(isWhitelisted(_wallet, _spender)) {\r\n            // approve to whitelist\r\n            doApproveToken(_wallet, _token, _spender, _amount);\r\n        }\r\n        else {\r\n            // get current alowance\r\n            uint256 currentAllowance = ERC20(_token).allowance(address(_wallet), _spender);\r\n            if(_amount <= currentAllowance) {\r\n                // approve if we reduce the allowance\r\n                doApproveToken(_wallet, _token, _spender, _amount);\r\n            }\r\n            else {\r\n                // check if delta is under the limit\r\n                uint delta = _amount - currentAllowance;\r\n                uint256 deltaInEth = priceProvider.getEtherValue(delta, _token);\r\n                require(checkAndUpdateDailySpent(_wallet, deltaInEth), \"TM: Approve above daily limit\");\r\n                // approve if under the limit\r\n                doApproveToken(_wallet, _token, _spender, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner call a contract.\r\n    * @param _wallet The target wallet.\r\n    * @param _contract The address of the contract.\r\n    * @param _value The amount of ETH to transfer as part of call\r\n    * @param _data The encoded method data\r\n    */\r\n    function callContract(\r\n        BaseWallet _wallet,\r\n        address _contract,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        // Make sure we don't call a module, the wallet itself, or a supported ERC20\r\n        authoriseContractCall(_wallet, _contract);\r\n\r\n        if(isWhitelisted(_wallet, _contract)) {\r\n            // call to whitelist\r\n            doCallContract(_wallet, _contract, _value, _data);\r\n        }\r\n        else {\r\n            require(checkAndUpdateDailySpent(_wallet, _value), \"TM: Call contract above daily limit\");\r\n            // call under the limit\r\n            doCallContract(_wallet, _contract, _value, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner do an ERC20 approve followed by a call to a contract.\r\n    * We assume that the contract will pull the tokens and does not require ETH.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The token to approve.\r\n    * @param _contract The address of the contract.\r\n    * @param _amount The amount of ERC20 tokens to approve.\r\n    * @param _data The encoded method data\r\n    */\r\n    function approveTokenAndCallContract(\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        address _contract,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        // Make sure we don't call a module, the wallet itself, or a supported ERC20\r\n        authoriseContractCall(_wallet, _contract);\r\n\r\n        if(isWhitelisted(_wallet, _contract)) {\r\n            doApproveToken(_wallet, _token, _contract, _amount);\r\n            doCallContract(_wallet, _contract, 0, _data);\r\n        }\r\n        else {\r\n            // get current alowance\r\n            uint256 currentAllowance = ERC20(_token).allowance(address(_wallet), _contract);\r\n            if(_amount <= currentAllowance) {\r\n                // no need to approve more\r\n                doCallContract(_wallet, _contract, 0, _data);\r\n            }\r\n            else {\r\n                // check if delta is under the limit\r\n                uint delta = _amount - currentAllowance;\r\n                uint256 deltaInEth = priceProvider.getEtherValue(delta, _token);\r\n                require(checkAndUpdateDailySpent(_wallet, deltaInEth), \"TM: Approve above daily limit\");\r\n                // approve if under the limit\r\n                doApproveToken(_wallet, _token, _contract, _amount);\r\n                doCallContract(_wallet, _contract, 0, _data);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Adds an address to the whitelist of a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _target The address to add.\r\n     */\r\n    function addToWhitelist(\r\n        BaseWallet _wallet,\r\n        address _target\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(!isWhitelisted(_wallet, _target), \"TT: target already whitelisted\");\r\n        // solium-disable-next-line security/no-block-members\r\n        uint256 whitelistAfter = now.add(securityPeriod);\r\n        transferStorage.setWhitelist(_wallet, _target, whitelistAfter);\r\n        emit AddedToWhitelist(address(_wallet), _target, uint64(whitelistAfter));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an address from the whitelist of a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _target The address to remove.\r\n     */\r\n    function removeFromWhitelist(\r\n        BaseWallet _wallet,\r\n        address _target\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(isWhitelisted(_wallet, _target), \"TT: target not whitelisted\");\r\n        transferStorage.setWhitelist(_wallet, _target, 0);\r\n        emit RemovedFromWhitelist(address(_wallet), _target);\r\n    }\r\n\r\n    /**\r\n    * @dev Executes a pending transfer for a wallet.\r\n    * The method can be called by anyone to enable orchestration.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The token of the pending transfer.\r\n    * @param _to The destination address of the pending transfer.\r\n    * @param _amount The amount of token to transfer of the pending transfer.\r\n    * @param _data The data associated to the pending transfer.\r\n    * @param _block The block at which the pending transfer was created.\r\n    */\r\n    function executePendingTransfer(\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        address _to,\r\n        uint _amount,\r\n        bytes calldata _data,\r\n        uint _block\r\n    )\r\n        external\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        bytes32 id = keccak256(abi.encodePacked(ActionType.Transfer, _token, _to, _amount, _data, _block));\r\n        uint executeAfter = configs[address(_wallet)].pendingActions[id];\r\n        require(executeAfter > 0, \"TT: unknown pending transfer\");\r\n        uint executeBefore = executeAfter.add(securityWindow);\r\n        // solium-disable-next-line security/no-block-members\r\n        require(executeAfter <= now && now <= executeBefore, \"TT: transfer outside of the execution window\");\r\n        delete configs[address(_wallet)].pendingActions[id];\r\n        doTransfer(_wallet, _token, _to, _amount, _data);\r\n        emit PendingTransferExecuted(address(_wallet), id);\r\n    }\r\n\r\n    function cancelPendingTransfer(\r\n        BaseWallet _wallet,\r\n        bytes32 _id\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(configs[address(_wallet)].pendingActions[_id] > 0, \"TT: unknown pending action\");\r\n        delete configs[address(_wallet)].pendingActions[_id];\r\n        emit PendingTransferCanceled(address(_wallet), _id);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner of a wallet change its daily limit.\r\n     * The limit is expressed in ETH. Changes to the limit take 24 hours.\r\n     * @param _wallet The target wallet.\r\n     * @param _newLimit The new limit.\r\n     */\r\n    function changeLimit(BaseWallet _wallet, uint256 _newLimit) external onlyWalletOwner(_wallet) onlyWhenUnlocked(_wallet) {\r\n        changeLimit(_wallet, _newLimit, securityPeriod);\r\n    }\r\n\r\n    /**\r\n     * @dev Convenience method to disable the limit\r\n     * The limit is disabled by setting it to an arbitrary large value.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function disableLimit(BaseWallet _wallet) external onlyWalletOwner(_wallet) onlyWhenUnlocked(_wallet) {\r\n        disableLimit(_wallet, securityPeriod);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if an address is whitelisted for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _target The address.\r\n    * @return true if the address is whitelisted.\r\n    */\r\n    function isWhitelisted(BaseWallet _wallet, address _target) public view returns (bool _isWhitelisted) {\r\n        uint whitelistAfter = transferStorage.getWhitelist(_wallet, _target);\r\n        // solium-disable-next-line security/no-block-members\r\n        return whitelistAfter > 0 && whitelistAfter < now;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the info of a pending transfer for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _id The pending transfer ID.\r\n    * @return the epoch time at which the pending transfer can be executed.\r\n    */\r\n    function getPendingTransfer(BaseWallet _wallet, bytes32 _id) external view returns (uint64 _executeAfter) {\r\n        _executeAfter = uint64(configs[address(_wallet)].pendingActions[_id]);\r\n    }\r\n\r\n    /**\r\n    * @dev Implementation of EIP 1271.\r\n    * Should return whether the signature provided is valid for the provided data.\r\n    * @param _data Arbitrary length data signed on the behalf of address(this)\r\n    * @param _signature Signature byte array associated with _data\r\n    */\r\n    function isValidSignature(bytes calldata _data, bytes calldata _signature) external view returns (bytes4) {\r\n        bytes32 msgHash = keccak256(abi.encodePacked(_data));\r\n        isValidSignature(msgHash, _signature);\r\n        return ERC721_ISVALIDSIGNATURE_BYTES;\r\n    }\r\n\r\n    /**\r\n    * @dev Implementation of EIP 1271.\r\n    * Should return whether the signature provided is valid for the provided data.\r\n    * @param _msgHash Hash of a message signed on the behalf of address(this)\r\n    * @param _signature Signature byte array associated with _msgHash\r\n    */\r\n    function isValidSignature(bytes32 _msgHash, bytes memory _signature) public view returns (bytes4) {\r\n        require(_signature.length == 65, \"TM: invalid signature length\");\r\n        address signer = recoverSigner(_msgHash, _signature, 0);\r\n        require(isOwner(BaseWallet(msg.sender), signer), \"TM: Invalid signer\");\r\n        return ERC721_ISVALIDSIGNATURE_BYTES32;\r\n    }\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n     * @dev Creates a new pending action for a wallet.\r\n     * @param _action The target action.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The target token for the action.\r\n     * @param _to The recipient of the action.\r\n     * @param _amount The amount of token associated to the action.\r\n     * @param _data The data associated to the action.\r\n     * @return the identifier for the new pending action and the time when the action can be executed\r\n     */\r\n    function addPendingAction(\r\n        ActionType _action,\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        address _to,\r\n        uint _amount,\r\n        bytes memory _data\r\n    )\r\n        internal\r\n        returns (bytes32 id, uint256 executeAfter)\r\n    {\r\n        id = keccak256(abi.encodePacked(_action, _token, _to, _amount, _data, block.number));\r\n        require(configs[address(_wallet)].pendingActions[id] == 0, \"TM: duplicate pending action\");\r\n        // solium-disable-next-line security/no-block-members\r\n        executeAfter = now.add(securityPeriod);\r\n        configs[address(_wallet)].pendingActions[id] = executeAfter;\r\n    }\r\n\r\n    /**\r\n    * @dev Make sure a contract call is not trying to call a module, the wallet itself, or a supported ERC20.\r\n    * @param _wallet The target wallet.\r\n    * @param _contract The address of the contract.\r\n     */\r\n    function authoriseContractCall(BaseWallet _wallet, address _contract) internal view {\r\n        require(\r\n            _contract != address(_wallet) && // not the wallet itself\r\n            !_wallet.authorised(_contract) && // not an authorised module\r\n            (priceProvider.cachedPrices(_contract) == 0 || isLimitDisabled(_wallet)), // not an ERC20 listed in the provider (or limit disabled)\r\n            \"TM: Forbidden contract\");\r\n    }\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    // Overrides refund to add the refund in the daily limit.\r\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\r\n        // 21000 (transaction) + 7620 (execution of refund) + 7324 (execution of updateDailySpent) + 672 to log the event + _gasUsed\r\n        uint256 amount = 36616 + _gasUsed;\r\n        if(_gasPrice > 0 && _signatures > 0 && amount <= _gasLimit) {\r\n            if(_gasPrice > tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            }\r\n            else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            checkAndUpdateDailySpent(_wallet, amount);\r\n            invokeWallet(address(_wallet), _relayer, amount, EMPTY_BYTES);\r\n        }\r\n    }\r\n\r\n    // Overrides verifyRefund to add the refund in the daily limit.\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if(_gasPrice > 0 && _signatures > 0 && (\r\n            address(_wallet).balance < _gasUsed * _gasPrice ||\r\n            isWithinDailyLimit(_wallet, getCurrentLimit(_wallet), _gasUsed * _gasPrice) == false ||\r\n            _wallet.authorised(address(this)) == false\r\n        ))\r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"securityWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveTokenAndCallContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getCurrentLimit\",\"outputs\":[{\"name\":\"_currentLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"executePendingTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getDailyUnspent\",\"outputs\":[{\"name\":\"_unspent\",\"type\":\"uint256\"},{\"name\":\"_periodEnd\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldLimitManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getPendingLimit\",\"outputs\":[{\"name\":\"_pendingLimit\",\"type\":\"uint256\"},{\"name\":\"_changeAfter\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"disableLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatures\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"changeLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancelPendingTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOnlyOwnerModule\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getPendingTransfer\",\"outputs\":[{\"name\":\"_executeAfter\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isLimitDisabled\",\"outputs\":[{\"name\":\"_limitDisabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"callContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_transferStorage\",\"type\":\"address\"},{\"name\":\"_guardianStorage\",\"type\":\"address\"},{\"name\":\"_priceProvider\",\"type\":\"address\"},{\"name\":\"_securityPeriod\",\"type\":\"uint256\"},{\"name\":\"_securityWindow\",\"type\":\"uint256\"},{\"name\":\"_defaultLimit\",\"type\":\"uint256\"},{\"name\":\"_oldLimitManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistAfter\",\"type\":\"uint64\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"executeAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"PendingTransferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PendingTransferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PendingTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startAfter\",\"type\":\"uint64\"}],\"name\":\"LimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CalledContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ModuleInitialised\",\"type\":\"event\"}]","ContractName":"TransferManager","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db0105000000000000000000000000391f0e86da951c03b1183c60b195090671adea8800000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f000000000000000000000000e8a76d2f37fe50b6a95d27fb92291fe0b57407d30000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000a8c00000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000df6767a7715381867738cf211290f61697ecd938","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://d4581618ef509331176c22d93961eaece70c220f5a286e8b1b3885e6273b83e6"}]}