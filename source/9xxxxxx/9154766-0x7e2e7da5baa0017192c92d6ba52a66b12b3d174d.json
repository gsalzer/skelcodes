{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-12-12\r\n*/\r\n\r\n//test contract concept\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\n\r\n\r\ninterface IKyberNetworkProxy {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) external payable returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n    // ERC20 Token Smart Contract\r\n    contract PegToken {\r\n        \r\n        string public constant name = \"Synthetic Alibaba Equity Tokens\";\r\n        string public constant symbol = \"BABA\";\r\n        uint8 public constant decimals = 3;\r\n        uint public _totalSupply = 0;\r\n        //rate will change\r\n        uint256 public RATE = 0;\r\n        bool public isMinting = true;\r\n        bool public isExchangeListed = false;\r\n        OrFeedInterface orfeed= OrFeedInterface(0x73f5022bec0e01c0859634b0c7186301c5464b46);\r\n        \r\n        using SafeMath for uint256;\r\n        address public owner;\r\n        \r\n         // Functions with this modifier can only be executed by the owner\r\n         modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n             _;\r\n         }\r\n     \r\n        // Balances for each account\r\n        mapping(address => uint256) balances;\r\n        // Owner of account approves the transfer of an amount to another account\r\n        mapping(address => mapping(address=>uint256)) allowed;\r\n        \r\n        mapping(address => uint256) daiCanLBurnToNow;\r\n        mapping(address => uint256) daiAsCollateralInitial;\r\n        mapping(address => uint256) canUnCollateralizeWhen;\r\n        mapping(address => uint256 [4]) positions;\r\n        IKyberNetworkProxy kyberProxy;\r\n        ERC20 eth;\r\n        ERC20 dai;\r\n         address kyberProxyAddress;\r\n         uint256 totalInPositions =0;\r\n         uint256 totalInCollateralizerClaimPool = 0;\r\n             \r\n        // Its a payable function works as a token factory.\r\n        function () payable{\r\n            createTokens();\r\n        }\r\n\r\n        // Constructor\r\n        constructor() public payable {\r\n            owner = msg.sender; \r\n            balances[owner] = _totalSupply;\r\n            kyberProxyAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n            \r\n              kyberProxy = IKyberNetworkProxy(kyberProxyAddress);\r\n            eth = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n              dai = ERC20(0x6b175474e89094c44da98b954eedeac495271d0f);\r\n              \r\n             \r\n        }\r\n\r\n       \r\n\r\n\r\n        // This function creates Tokens  \r\n         function createTokens() payable {\r\n            if(isMinting == true){\r\n                require(msg.value > 0);\r\n                RATE = getETH2TokenRate();\r\n                uint256 tokens = msg.value.div(1000000000000000).mul(RATE).div(1000000);\r\n                uint256 amountSubFromCollateral = tokens.div(3);\r\n                uint256 tokens2Issue = tokens.sub(amountSubFromCollateral);\r\n                \r\n                _totalSupply = _totalSupply.add(tokens2Issue);\r\n                balances[msg.sender] = balances[msg.sender].add(tokens2Issue);\r\n                Transfer(this, msg.sender, tokens2Issue);\r\n                convertForCollateral(msg.value);\r\n            }\r\n            else{\r\n                throw;\r\n            }\r\n        }\r\n\r\n        function convertForCollateral(uint256 amount) internal returns (bool){\r\n           \r\n            require(daiCanLBurnToNow[msg.sender] == 0x0, \"Only one collateralization per account\");\r\n            bytes memory PERM_HINT = \"PERM\";\r\n             \r\n             \r\n              uint daiAmount = kyberProxy.tradeWithHint.value(amount)(eth, amount, dai, this, 8000000000000000000000000000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000004, PERM_HINT);\r\n                uint256 daiCollateral = daiAmount.div(3);\r\n                uint256 daiCanBurnTo  = daiAmount.sub(daiCollateral);\r\n                daiCanLBurnToNow[msg.sender].add(daiCanBurnTo);\r\n                daiAsCollateralInitial[msg.sender].add(daiCollateral);\r\n                canUnCollateralizeWhen[msg.sender] = block.timestamp.add(30 days);\r\n               \r\n                \r\n                \r\n        }\r\n        \r\n        function burnTokens(uint256 amount){\r\n             require(balances[msg.sender] >= amount, \"You dont have any tokens\");\r\n             _totalSupply = _totalSupply.sub(amount);\r\n              balances[msg.sender] = balances[msg.sender].sub(amount);\r\n            \r\n             uint256 amountDaiSend = orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1).mul(amount).div(100);\r\n              \r\n             require(dai.transfer(msg.sender, amountDaiSend));\r\n             \r\n        }\r\n        function burnAllTokens(){\r\n             require(balances[msg.sender] >= amount, \"You dont have any tokens\");\r\n             uint256 amount = balances[msg.sender];\r\n             _totalSupply = _totalSupply.sub(amount);\r\n              balances[msg.sender] = balances[msg.sender].sub(amount);\r\n            \r\n             uint256 amountDaiSend = orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1).mul(amount).div(100);\r\n              \r\n             require(dai.transfer(msg.sender, amountDaiSend));\r\n        }\r\n        \r\n        function buyLong (uint256 multiple) payable returns(bool){\r\n            require(positions[msg.sender][1]== 0, \"You already have a position. Use another account\");\r\n            uint256 initialAmount = msg.value;\r\n            require(msg.value > 1000000, \"Not enough for a trade\");\r\n             bytes memory PERM_HINT = \"PERM\";\r\n             \r\n             uint daiAmount = kyberProxy.tradeWithHint.value(initialAmount)(eth, initialAmount, dai, this, 8000000000000000000000000000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000004, PERM_HINT);\r\n            require(daiAmount > 0, \"Not enough money to create a position\");\r\n            uint256 assetPrice = orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1);\r\n            positions[msg.sender] = [1, daiAmount, multiple, assetPrice];\r\n            return true;\r\n        }\r\n        \r\n        function sellShort(uint256 multiple) payable returns(bool){\r\n            require(positions[msg.sender][1]== 0, \"You already have a position. Use another account\");\r\n            uint256 initialAmount = msg.value;\r\n            require(msg.value > 1000000, \"Not enough for a trade\");\r\n             bytes memory PERM_HINT = \"PERM\";\r\n             \r\n             uint daiAmount = kyberProxy.tradeWithHint.value(initialAmount)(eth, initialAmount, dai, this, 8000000000000000000000000000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000004, PERM_HINT);\r\n            require(daiAmount > 0, \"Not enough money to create a position\");\r\n            uint256 assetPrice = orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1);\r\n            positions[msg.sender] = [0, daiAmount, multiple, assetPrice];\r\n            return true;\r\n        }\r\n        \r\n        function closePosition() returns(bool){\r\n            require(positions[msg.sender][1]!= 0, \"You dont have a position. Create one before you close it\");\r\n            \r\n            uint256 currentPrice= orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1);\r\n            uint256 boughtPrice = positions[msg.sender][3];\r\n            uint256 percentageGain;\r\n            uint amountExtraToSend;\r\n            uint amountToSend;\r\n            uint256 counterAmount;\r\n            \r\n            //for short\r\n            if(positions[msg.sender][0] ==0){\r\n                \r\n                \r\n                //made money\r\n               if(currentPrice <= boughtPrice){\r\n                   \r\n                    amountExtraToSend = getPNL(msg.sender, currentPrice, boughtPrice, positions[msg.sender][0]);\r\n                    amountToSend = positions[msg.sender][1].add(amountExtraToSend);\r\n                    \r\n                   dai.transfer(msg.sender, amountToSend);\r\n                   \r\n                    positions[msg.sender] = [0,0,0,0];\r\n                   return true;\r\n               } \r\n               //lost money\r\n               else{\r\n                     amountExtraToSend = getPNL(msg.sender, currentPrice, boughtPrice, positions[msg.sender][0]);\r\n                     \r\n                      totalInCollateralizerClaimPool = totalInCollateralizerClaimPool.add(amountExtraToSend);\r\n                       if(positions[msg.sender][1] > amountExtraToSend){\r\n                           \r\n                             amountToSend = positions[msg.sender][1].sub(amountExtraToSend);\r\n                  \r\n                   dai.transfer(msg.sender, amountToSend);\r\n                       }\r\n                       \r\n                       \r\n                      \r\n                   positions[msg.sender] = [0,0,0,0];\r\n                   return true;\r\n               }\r\n            }\r\n            \r\n            //for longs\r\n            else{\r\n                //made money\r\n                if(currentPrice >= boughtPrice){\r\n                     amountExtraToSend = getPNL(msg.sender, currentPrice, boughtPrice, positions[msg.sender][0]);\r\n                    amountToSend = positions[msg.sender][1].add(amountExtraToSend);\r\n               \r\n                   dai.transfer(msg.sender, amountToSend);\r\n                    positions[msg.sender] = [0,0,0,0];\r\n                   return true;\r\n               } \r\n               //lost money\r\n               else{\r\n                     amountExtraToSend = getPNL(msg.sender, currentPrice, boughtPrice, positions[msg.sender][0]);\r\n                     totalInCollateralizerClaimPool = totalInCollateralizerClaimPool.add(amountExtraToSend);\r\n                     \r\n                    if(positions[msg.sender][1] > amountExtraToSend){\r\n                        amountToSend = positions[msg.sender][1].sub(amountExtraToSend);\r\n                       \r\n                       dai.transfer(msg.sender, amountToSend);\r\n                    }\r\n                    positions[msg.sender] = [0,0,0,0];\r\n                   return true;\r\n               }\r\n            }\r\n            \r\n           \r\n            \r\n        }\r\n        \r\n        \r\n        function getPNL(address userAddress, uint256 currentPrice, uint256 boughtPrice, uint256 side) constant returns(uint256){\r\n            \r\n             uint256 percentageGain;\r\n            uint256 amountExtraToSend;\r\n                \r\n            if(side == 0){\r\n                //mad money\r\n                if(currentPrice <= boughtPrice){\r\n                 percentageGain = boughtPrice.mul(1000000).div(currentPrice.mul(1000));\r\n                amountExtraToSend = positions[userAddress][1].mul(percentageGain).div(1000).mul(positions[userAddress][2]);\r\n                }\r\n                 //lost money\r\n               else{\r\n                   percentageGain = currentPrice.mul(1000000).div(boughtPrice.mul(1000));\r\n                amountExtraToSend = positions[userAddress][1].mul(percentageGain).div(1000).mul(positions[userAddress][2]);\r\n                  \r\n               }\r\n            }\r\n            \r\n            else{\r\n                 //made money\r\n                if(currentPrice >= boughtPrice){\r\n                   percentageGain = currentPrice.mul(1000000).div(boughtPrice.mul(1000));\r\n                    amountExtraToSend = positions[msg.sender][1].mul(percentageGain).div(1000).mul(positions[msg.sender][2]);\r\n                }\r\n               //lost money\r\n               else{\r\n                   percentageGain = boughtPrice.mul(1000000).div(currentPrice.mul(1000));\r\n                    amountExtraToSend = positions[msg.sender][1].mul(percentageGain).div(1000).mul(positions[msg.sender][2]);\r\n                   \r\n                   \r\n                   \r\n                  \r\n               }\r\n            }\r\n            \r\n            return amountExtraToSend;\r\n        }\r\n        \r\n        function getCollateral(uint256 amount) returns (bool){\r\n            require(canUnCollateralizeWhen[msg.sender] !=0, \"You dont have any collateral\");\r\n             require(canUnCollateralizeWhen[msg.sender] < block.timestamp, \"You need to wait until timestamp is reached. 30 days from adding collateral \");\r\n             \r\n             require(dai.transfer(msg.sender, amount));\r\n             \r\n             daiAsCollateralInitial[msg.sender].sub(amount);\r\n             \r\n        }\r\n        \r\n\r\n        function getETH2TokenRate() constant returns(uint256){\r\n            \r\n            uint256 equityRate = orfeed.getExchangeRate(\"BABA\", \"USD\", \"PROVIDER1\", 1);\r\n            uint256 dolToEthRate = orfeed.getExchangeRate(\"DAI\", \"ETH\", \"DEFAULT\", equityRate);\r\n            uint256 base = 100000000;\r\n            uint256 rate = base.div(dolToEthRate);\r\n            return rate;\r\n        }\r\n        \r\n        \r\n        function endCrowdsale() onlyOwner {\r\n            isMinting = false;\r\n        }\r\n        \r\n        function totalSupply() constant returns(uint256){\r\n            return _totalSupply;\r\n        }\r\n        // What is the balance of a particular account?\r\n        function balanceOf(address _owner) constant returns(uint256){\r\n            return balances[_owner];\r\n        }\r\n        \r\n        function balanceOfPositions(address _owner) constant returns(uint256[4] thePositions){\r\n            return positions[_owner];\r\n        }\r\n        \r\n        function getClaimPoolTotal () constant returns(uint256){\r\n            return totalInCollateralizerClaimPool;\r\n        }\r\n\r\n         // Transfer the balance from owner's account to another account   \r\n        function transfer(address _to, uint256 _value)  returns(bool) {\r\n            require(balances[msg.sender] >= _value && _value > 0 );\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        \r\n    // Send _value amount of tokens from address _from to address _to\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\r\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) returns(bool){\r\n        allowed[msg.sender][_spender] = _value; \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function testingGetDaiBack() onlyOwner{\r\n        uint daiBalance = dai.balanceOf(this);\r\n        dai.transfer(msg.sender, daiBalance);\r\n        \r\n    }\r\n    \r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) constant returns(uint256){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Error(string message);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETH2TokenRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"testingGetDaiBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"boughtPrice\",\"type\":\"uint256\"},{\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"getPNL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"multiple\",\"type\":\"uint256\"}],\"name\":\"buyLong\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isExchangeListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"multiple\",\"type\":\"uint256\"}],\"name\":\"sellShort\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClaimPoolTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfPositions\",\"outputs\":[{\"name\":\"thePositions\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closePosition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"}]","ContractName":"PegToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://07eff72ff4987133e10f6f638032b034dd10840d830758d14857901a4eb309ba"}]}