{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16; // optimization runs: 200\r\n\r\n\r\ninterface IDaiBackstopSyndicate {\r\n  event AuctionEntered(uint256 auctionId, uint256 mkrAsk, uint256 daiBid);\r\n  event AuctionFinalized(uint256 auctionId);\r\n\r\n  enum Status {\r\n    ACCEPTING_DEPOSITS,\r\n    ACTIVATED,\r\n    DEACTIVATED\r\n  }\r\n\r\n  // Anyone can deposit Dai up until the auctions have started at 1:1\r\n  function enlist(uint256 daiAmount) external returns (uint256 backstopTokensMinted);\r\n\r\n  // Anyone can withdraw at any point as long as Dai is not locked in auctions\r\n  function defect(uint256 backstopTokenAmount) external returns (uint256 daiRedeemed, uint256 mkrRedeemed);\r\n\r\n  // Anyone can enter an auction for the syndicate, bidding Dai in return for MKR\r\n  function enterAuction(uint256 auctionId) external;\r\n\r\n  // Anyone can finalize an auction, returning the Dai or MKR to the syndicate\r\n  function finalizeAuction(uint256 auctionId) external;\r\n\r\n  // An owner can halt all new deposits and auctions (but not withdrawals or ongoing auctions)\r\n  function ceaseFire() external;\r\n  \r\n  /// Return total amount of DAI that is currently held by Syndicate\r\n  function getDaiBalance() external view returns (uint256 combinedDaiInVat);\r\n\r\n  /// Return total amount of DAI that is currently being used in auctions\r\n  function getDaiBalanceForAuctions() external view returns (uint256 daiInVatForAuctions);\r\n\r\n  /// Return total amount of DAI that is *not* currently being used in auctions\r\n  function getAvailableDaiBalance() external view returns (uint256 daiInVat);\r\n\r\n  /// Return total amount of MKR that is currently held by Syndicate\r\n  function getMKRBalance() external view returns (uint256 mkr);\r\n\r\n  /// Do a \"dry-run\" of a withdrawal of some amount of tokens\r\n  function getDefectAmount(\r\n    uint256 backstopTokenAmount\r\n  ) external view returns (\r\n    uint256 daiRedeemed, uint256 mkrRedeemed, bool redeemable\r\n  );\r\n\r\n  // Determine if the contract is accepting deposits (0), active (1), or deactivated (2).\r\n  function getStatus() external view returns (Status status);\r\n\r\n  // Return all auctions that the syndicate is currently participating in.\r\n  function getActiveAuctions() external view returns (uint256[] memory activeAuctions);\r\n}\r\n\r\n\r\ninterface IJoin {\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n\r\ninterface IVat {\r\n    function dai(address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function move(address, address, uint256) external;\r\n}\r\n\r\n\r\ninterface IFlopper {\r\n    // --- Auth ---\r\n    // caller authorization (1 = authorized, 0 = not authorized)\r\n    function wards(address) external view returns (uint256);\r\n    // authorize caller\r\n    function rely(address usr) external;\r\n    // deauthorize caller\r\n    function deny(address usr) external;\r\n\r\n    // Bid objects\r\n    function bids(uint256) external view returns (\r\n        uint256 bid,\r\n        uint256 lot,\r\n        address guy,\r\n        uint48 tic,\r\n        uint48 end\r\n    );\r\n\r\n    // DAI contract address\r\n    function vat() external view returns (address);\r\n    // MKR contract address\r\n    function gem() external view returns (address);\r\n\r\n    // num decimals (constant)\r\n    function ONE() external pure returns (uint256);\r\n\r\n    // minimum bid increase (config - 5% initial)\r\n    function beg() external view returns (uint256);\r\n    // initial lot increase (config - 50% initial)\r\n    function pad() external view returns (uint256);\r\n    // bid lifetime (config - 3 hours initial)\r\n    function ttl() external view returns (uint48);\r\n    // total auction length (config - 2 days initial)\r\n    function tau() external view returns (uint48);\r\n\r\n    // number of auctions\r\n    function kicks() external view returns (uint256);\r\n    // status of the auction (1 = active, 0 = disabled)\r\n    function live() external view returns (uint256);\r\n    // user who shut down flopper mechanism and paid off last bid\r\n    function vow() external view returns (address);\r\n\r\n    // --- Events ---\r\n    event Kick(uint256 id, uint256 lot, uint256 bid, address indexed gal);\r\n\r\n    // --- Admin ---\r\n    function file(bytes32 what, uint256 data) external;\r\n\r\n    // --- Auction ---\r\n\r\n    // create an auction \r\n    // access control: authed\r\n    // state machine: after auction expired\r\n    // gal - recipient of the dai\r\n    // lot - amount of mkr to mint\r\n    // bid - amount of dai to pay\r\n    // id - id of the auction\r\n    function kick(address gal, uint256 lot, uint256 bid) external returns (uint256 id);\r\n\r\n    // extend the auction and increase minimum maker amount minted\r\n    // access control: not-authed\r\n    // state machine: after auction expiry, before first bid\r\n    // id - id of the auction\r\n    function tick(uint256 id) external;\r\n\r\n    // bid up auction and refund locked up dai to previous bidder\r\n    // access control: not-authed\r\n    // state machine: before auction expired\r\n    // id - id of the auction\r\n    // lot - amount of mkr to mint\r\n    // bid - amount of dai to pay\r\n    function dent(uint256 id, uint256 lot, uint256 bid) external;\r\n\r\n    // finalize auction\r\n    // access control: not-authed\r\n    // state machine: after auction expired\r\n    // id - id of the auction\r\n    function deal(uint256 id) external;\r\n\r\n    // --- Shutdown ---\r\n\r\n    // shutdown flopper mechanism\r\n    // access control: authed\r\n    // state machine: anytime\r\n    function cage() external;\r\n\r\n    // get cancelled bid back\r\n    // access control: authed\r\n    // state machine: after shutdown\r\n    function yank(uint256 id) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n\r\ncontract SimpleFlopper {\r\n\r\n  // A \"flopper\" is a contract for auctioning off MKR in exchange for Dai.\r\n  IFlopper internal constant _auction = IFlopper(\r\n    0x4D95A049d5B0b7d32058cd3F2163015747522e99\r\n  );\r\n\r\n  // Getters //\r\n\r\n  /// @notice Get the status of the flopper contract\r\n  /// @return bool status true if auction contract is enabled\r\n  function isEnabled() public view returns (bool status) {\r\n    return (_auction.live() == 1) ? true : false;\r\n  }\r\n\r\n  /// @notice Get the id of the latest auction\r\n  /// @return auctionID uint256 id\r\n  function getTotalNumberOfAuctions() public view returns (uint256 auctionID) {\r\n    return _auction.kicks();\r\n  }\r\n\r\n  /// @notice Get the address of the auction contract (Flopper)\r\n  /// @return Auction address\r\n  function getFlopperAddress() public pure returns (address flopper) {\r\n    return address(_auction);\r\n  }\r\n\r\n  /// @notice Get the flopper contract config\r\n  /// @return bidIncrement uint256 minimum bid increment as percentage (initial = 1.05E18)\r\n  /// @return repriceIncrement uint256 reprice increment as percentage (initial = 1.50E18)\r\n  /// @return bidDuration uint256 duration of a bid in seconds (initial = 3 hours)\r\n  /// @return auctionDuration uint256 initial duration of an auction in seconds (initial = 2 days)\r\n  function getAuctionInformation() public view returns (\r\n    uint256 bidIncrement,\r\n    uint256 repriceIncrement,\r\n    uint256 bidDuration,\r\n    uint256 auctionDuration\r\n  ) {\r\n    return (_auction.beg(), _auction.pad(), _auction.ttl(), _auction.tau());\r\n  }\r\n\r\n  /// @notice Get the winning bid for an auction\r\n  /// @return amountDAI uint256 amount of DAI to be burned\r\n  /// @return amountMKR uint256 amount of MKR to be minted\r\n  /// @return bidder address account who placed bid\r\n  /// @return bidDeadline uint48 deadline of bid\r\n  /// @return auctionDeadline uint48 deadline of auction\r\n  function getCurrentBid(uint256 auctionID) public view returns (\r\n    uint256 amountDAI,\r\n    uint256 amountMKR,\r\n    address bidder,\r\n    uint48 bidDeadline,\r\n    uint48 auctionDeadline\r\n  ) {\r\n    return _auction.bids(auctionID);\r\n  }\r\n\r\n  // Setters //\r\n\r\n  /// @notice Extend and reprice expired auction with no bid\r\n  /// @dev state machine: after auction expiry, before first bid\r\n  /// @param auctionID uint256 id of the auction\r\n  function _reprice(uint256 auctionID) internal {\r\n    _auction.tick(auctionID);\r\n  }\r\n\r\n  /// @notice Add bid to a live auction, if first bid this transfers DAI to vat\r\n  /// @dev state machine: before auction expired\r\n  /// @param auctionID uint256 id of the auction\r\n  function _bid(uint256 auctionID, uint256 amountMKR, uint256 amountDAI) internal {\r\n    _auction.dent(auctionID, amountMKR, amountDAI);\r\n  }\r\n\r\n  /// @notice Finalize an auction with a winning bid and release maker\r\n  /// @dev state machine: after auction expired\r\n  /// @param auctionID uint256 id of the auction\r\n  function _finalize(uint256 auctionID) internal {\r\n    _auction.deal(auctionID);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n *\r\n * In order to transfer ownership, a recipient must be specified, at which point\r\n * the specified recipient can call `acceptOwnership` and take ownership.\r\n */\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Adapted from OpenZeppelin's address version of the same, written by Alberto Cuesta Cañada:\r\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5dfe7215a9156465d550030eadc08770503b2b2f/\r\n *   contracts/utils/EnumerableSet.sol\r\n */\r\nlibrary EnumerableSet {\r\n\r\n  struct AuctionIDSet {\r\n    // Position of the value in the `values` array, plus 1 because index 0\r\n    // means a value is not in the set.\r\n    mapping (uint256 => uint256) index;\r\n    uint256[] values;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   * Returns false if the value was already in the set.\r\n   */\r\n  function add(AuctionIDSet storage set, uint256 value)\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!contains(set, value)) {\r\n      set.values.push(value);\r\n      // The element is stored at length-1, but we add 1 to all indexes\r\n      // and use 0 as a sentinel value\r\n      set.index[value] = set.values.length;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   * Returns false if the value was not present in the set.\r\n   */\r\n  function remove(AuctionIDSet storage set, uint256 value)\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (contains(set, value)){\r\n      uint256 toDeleteIndex = set.index[value] - 1;\r\n      uint256 lastIndex = set.values.length - 1;\r\n\r\n      // If the element we're deleting is the last one, we can just remove it without doing a swap\r\n      if (lastIndex != toDeleteIndex) {\r\n        uint256 lastValue = set.values[lastIndex];\r\n\r\n        // Move the last value to the index where the deleted value is\r\n        set.values[toDeleteIndex] = lastValue;\r\n        // Update the index for the moved value\r\n        set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n      }\r\n\r\n      // Delete the index entry for the deleted value\r\n      delete set.index[value];\r\n\r\n      // Delete the old entry for the moved value\r\n      set.values.pop();\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function contains(AuctionIDSet storage set, uint256 value)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return set.index[value] != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an array with all values in the set. O(N).\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   * WARNING: This function may run out of gas on large sets: use {length} and\r\n   * {get} instead in these cases.\r\n   */\r\n  function enumerate(AuctionIDSet storage set)\r\n    internal\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256[] memory output = new uint256[](set.values.length);\r\n    for (uint256 i; i < set.values.length; i++){\r\n      output[i] = set.values[i];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of elements on the set. O(1).\r\n   */\r\n  function length(AuctionIDSet storage set)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return set.values.length;\r\n  }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n  * Note that there are no guarantees on the ordering of values inside the\r\n  * array, and it may change when more values are added or removed.\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `index` must be strictly less than {length}.\r\n  */\r\n  function get(AuctionIDSet storage set, uint256 index)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return set.values[index];\r\n  }\r\n}\r\n\r\n\r\n/// @notice See https://github.com/backstop-syndicate/dai-backstop-syndicate\r\ncontract DaiBackstopSyndicateV3 is\r\n  IDaiBackstopSyndicate,\r\n  SimpleFlopper,\r\n  TwoStepOwnable,\r\n  ERC20\r\n{\r\n  using SafeMath for uint256;\r\n  using EnumerableSet for EnumerableSet.AuctionIDSet;\r\n\r\n  // Track the status of the Syndicate.\r\n  Status internal _status;\r\n\r\n  // Track each active auction as an enumerable set.\r\n  EnumerableSet.AuctionIDSet internal _activeAuctions;\r\n\r\n  IERC20 internal constant _DAI = IERC20(\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n  );\r\n\r\n  IERC20 internal constant _MKR = IERC20(\r\n    0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2\r\n  );\r\n\r\n  IJoin internal constant _DAI_JOIN = IJoin(\r\n    0x9759A6Ac90977b93B58547b4A71c78317f391A28\r\n  );\r\n\r\n  IVat internal constant _VAT = IVat(\r\n    0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B\r\n  );\r\n\r\n  constructor() public {\r\n    // Begin in the \"accepting deposits\" state.\r\n    _status = Status.ACCEPTING_DEPOSITS;\r\n \r\n    // Enable \"dai-join\" to take vatDai in order mint ERC20 Dai.\r\n    _VAT.hope(address(_DAI_JOIN));\r\n\r\n    // Enable creation of \"vat dai\" by approving dai-join.\r\n    _DAI.approve(address(_DAI_JOIN), uint256(-1));\r\n\r\n    // Enable entry into auctions by approving the \"flopper\".\r\n    _VAT.hope(SimpleFlopper.getFlopperAddress());\r\n  }\r\n\r\n  /// @notice User deposits DAI in the BackStop Syndicate and receives Syndicate shares\r\n  /// @param daiAmount Amount of DAI to deposit\r\n  /// @return Amount of Backstop Syndicate shares participant receives\r\n  function enlist(\r\n    uint256 daiAmount\r\n  ) external notWhenDeactivated returns (uint256 backstopTokensMinted) {\r\n    require(daiAmount > 0, \"DaiBackstopSyndicate/enlist: No Dai amount supplied.\");  \r\n      \r\n    require(\r\n      _status == Status.ACCEPTING_DEPOSITS,\r\n      \"DaiBackstopSyndicate/enlist: Cannot deposit once the first auction bid has been made.\"\r\n    );\r\n\r\n    require(\r\n      _DAI.transferFrom(msg.sender, address(this), daiAmount),\r\n      \"DaiBackstopSyndicate/enlist: Could not transfer Dai amount from caller.\"\r\n    );\r\n\r\n    // Place the supplied Dai into the central Maker ledger for use in auctions.\r\n    _DAI_JOIN.join(address(this), daiAmount);\r\n\r\n    // Mint tokens 1:1 to the caller in exchange for the supplied Dai.\r\n    backstopTokensMinted = daiAmount;\r\n    _mint(msg.sender, backstopTokensMinted);\r\n  }\r\n\r\n  /// @notice User withdraws DAI and MKR from BackStop Syndicate based on Syndicate shares owned\r\n  /// @param backstopTokenAmount Amount of shares to burn\r\n  /// @return daiRedeemed: Amount of DAI withdrawn\r\n  /// @return mkrRedeemed: Amount of MKR withdrawn\r\n  function defect(\r\n    uint256 backstopTokenAmount\r\n  ) external returns (uint256 daiRedeemed, uint256 mkrRedeemed) {\r\n    require(\r\n      backstopTokenAmount > 0, \"DaiBackstopSyndicate/defect: No token amount supplied.\"\r\n    );\r\n      \r\n    // Determine the % ownership. (scaled up by 1e18)\r\n    uint256 shareFloat = (backstopTokenAmount.mul(1e18)).div(totalSupply());\r\n\r\n    // Burn the tokens.\r\n    _burn(msg.sender, backstopTokenAmount);\r\n\r\n    // Determine the Dai currently being used to bid in auctions.\r\n    uint256 vatDaiLockedInAuctions = _getActiveAuctionVatDaiTotal();\r\n\r\n    // Determine the Dai currently locked up on behalf of this contract.\r\n    uint256 vatDaiBalance = _VAT.dai(address(this));\r\n\r\n    // Combine Dai locked in auctions with the balance on the contract.\r\n    uint256 combinedVatDai = vatDaiLockedInAuctions.add(vatDaiBalance);\r\n\r\n    // Determine the Maker currently held by the contract.\r\n    uint256 makerBalance = _MKR.balanceOf(address(this));\r\n\r\n    // Determine the amount of Dai and MKR to redeem based on the share.\r\n    uint256 vatDaiRedeemed = combinedVatDai.mul(shareFloat) / 1e18;\r\n    mkrRedeemed = makerBalance.mul(shareFloat) / 1e18;\r\n\r\n    // daiRedeemed is the e18 version of vatDaiRedeemed (e45).\r\n    // Needed for dai ERC20 token, otherwise keep decimals of vatDai.\r\n    daiRedeemed = vatDaiRedeemed / 1e27;\r\n\r\n    // Ensure that something is returned in exchange for burned tokens.\r\n    require(\r\n      mkrRedeemed != 0 || daiRedeemed != 0,\r\n      \"DaiBackstopSyndicate/defect: Nothing returned after burning tokens.\"\r\n    );\r\n\r\n    // Ensure that sufficient Dai liquidity is currently available to withdraw.\r\n    require(\r\n      vatDaiRedeemed <= vatDaiBalance,\r\n      \"DaiBackstopSyndicate/defect: Insufficient Dai (in use in auctions)\"\r\n    );\r\n\r\n    // Redeem the Dai and MKR, giving user vatDai if global settlement, otherwise, tokens\r\n    if (vatDaiRedeemed > 0) {\r\n      if (SimpleFlopper.isEnabled()) {\r\n        _DAI_JOIN.exit(msg.sender, daiRedeemed);\r\n      } else {\r\n        _VAT.move(address(this), msg.sender, vatDaiRedeemed);\r\n      }\r\n    }\r\n\r\n    if (mkrRedeemed > 0) {\r\n      require(\r\n        _MKR.transfer(msg.sender, mkrRedeemed),\r\n        \"DaiBackstopSyndicate/defect: MKR redemption failed.\"\r\n      );      \r\n    }\r\n  }\r\n\r\n  /// @notice Triggers syndicate participation in an auction, bidding 50k DAI for 500 MKR\r\n  /// @param auctionId ID of the auction to participate in\r\n  function enterAuction(uint256 auctionId) external notWhenDeactivated {\r\n    require(\r\n      !_activeAuctions.contains(auctionId),\r\n      \"DaiBackstopSyndicate/enterAuction: Auction already active.\"\r\n    );\r\n\r\n    // dai has 45 decimal places\r\n    (uint256 amountDai, , , , ) = SimpleFlopper.getCurrentBid(auctionId);\r\n\r\n    // lot needs to have 18 decimal places, and we're expecting 1 mkr == 100 dai\r\n    uint256 expectedLot = (amountDai / 1e27) / 100;\r\n\r\n    // Place the bid, reverting on failure.\r\n    SimpleFlopper._bid(auctionId, expectedLot, amountDai);\r\n\r\n    // Prevent further deposits.\r\n    if (_status != Status.ACTIVATED) {\r\n      _status = Status.ACTIVATED;\r\n    }\r\n\r\n    // Register auction if successful participation.\r\n    _activeAuctions.add(auctionId);\r\n\r\n    // Emit an event to signal that the auction was entered.\r\n    emit AuctionEntered(auctionId, expectedLot, amountDai);\r\n  }\r\n\r\n  // Anyone can finalize an auction if it's ready\r\n  function finalizeAuction(uint256 auctionId) external {\r\n    require(\r\n      _activeAuctions.contains(auctionId),\r\n      \"DaiBackstopSyndicate/finalizeAuction: Auction already finalized\"\r\n    );\r\n\r\n    // If auction was finalized, end should be 0x0.\r\n    (,, address bidder,, uint48 end) = SimpleFlopper.getCurrentBid(auctionId);\r\n\r\n    // If auction isn't closed, we try to close it ourselves\r\n    if (end != 0) {\r\n      // If we are the winning bidder, we finalize the auction\r\n      // Otherwise we got outbid and we withdraw DAI\r\n      if (bidder == address(this)) {\r\n        SimpleFlopper._finalize(auctionId);\r\n      }\r\n    }\r\n\r\n    // Remove the auction from the set of active auctions.\r\n    _activeAuctions.remove(auctionId);\r\n\r\n    // Emit an event to signal that the auction was finalized.\r\n    emit AuctionFinalized(auctionId);\r\n  }\r\n\r\n  /// @notice The owner can pause new deposits and auctions. Existing auctions\r\n  /// and withdrawals will be unaffected.\r\n  function ceaseFire() external onlyOwner {\r\n    _status = Status.DEACTIVATED;\r\n  }\r\n\r\n  function getStatus() external view returns (Status status) {\r\n    status = _status;\r\n  }\r\n\r\n  function getActiveAuctions() external view returns (\r\n    uint256[] memory activeAuctions\r\n  ) {\r\n    activeAuctions = _activeAuctions.enumerate();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() external view returns (string memory) {\r\n    return \"Dai Backstop Syndicate v3-100\";\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return \"DBSv3-100\";\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei.\r\n   *\r\n   * > Note that this information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * `IERC20.balanceOf` and `IERC20.transfer`.\r\n   */\r\n  function decimals() external view returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /// @notice Return total amount of DAI that is currently held by Syndicate\r\n  function getDaiBalance() external view returns (uint256 combinedDaiInVat) {\r\n    // Determine the Dai currently being used to bid in auctions.\r\n    uint256 vatDaiLockedInAuctions = _getActiveAuctionVatDaiTotal();\r\n\r\n    // Determine the Dai currently locked up on behalf of this contract.\r\n    uint256 vatDaiBalance = _VAT.dai(address(this));\r\n\r\n    // Combine Dai locked in auctions with the balance on the contract.\r\n    combinedDaiInVat = vatDaiLockedInAuctions.add(vatDaiBalance) / 1e27;\r\n  }\r\n\r\n  /// @notice Return total amount of DAI that is currently being used in auctions\r\n  function getDaiBalanceForAuctions() external view returns (uint256 daiInVatForAuctions) {\r\n    // Determine the Dai currently locked up in auctions.\r\n    daiInVatForAuctions = _getActiveAuctionVatDaiTotal() / 1e27;\r\n  }\r\n\r\n  /// @notice Return total amount of DAI that is currently withdrawable\r\n  function getAvailableDaiBalance() external view returns (uint256 daiInVat) {\r\n    // Determine the Dai currently locked up on behalf of this contract.\r\n    daiInVat = _VAT.dai(address(this)) / 1e27;\r\n  }\r\n\r\n  /// @notice Return total amount of MKR that is currently in this contract.\r\n  function getMKRBalance() external view returns (uint256 mkr) {\r\n    // Determine the MKR currently in this contract.\r\n    mkr = _MKR.balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice Dry-run of DAI and MKR withdrawal based on Syndicate shares owned\r\n  /// @param backstopTokenAmount Amount of shares to burn\r\n  /// @return daiRedeemed: Amount of DAI withdrawn\r\n  /// @return mkrRedeemed: Amount of MKR withdrawn\r\n  /// @return redeemable: Whether there's enough Dai not in auctions to withdraw\r\n  function getDefectAmount(\r\n    uint256 backstopTokenAmount\r\n  ) external view returns (\r\n    uint256 daiRedeemed, uint256 mkrRedeemed, bool redeemable\r\n  ) {\r\n    if (backstopTokenAmount == 0) {\r\n      return (0, 0, false);\r\n    }\r\n\r\n    if (backstopTokenAmount > totalSupply()) {\r\n      revert(\"Supplied token amount is greater than total supply.\");\r\n    }\r\n\r\n    // Determine the % ownership. (scaled up by 1e18)\r\n    uint256 shareFloat = (backstopTokenAmount.mul(1e18)).div(totalSupply());\r\n\r\n    // Determine the Dai currently being used to bid in auctions.\r\n    uint256 vatDaiLockedInAuctions = _getActiveAuctionVatDaiTotal();\r\n\r\n    // Determine the Dai currently locked up on behalf of this contract.\r\n    uint256 vatDaiBalance = _VAT.dai(address(this));\r\n\r\n    // Combine Dai locked in auctions with the balance on the contract.\r\n    uint256 combinedVatDai = vatDaiLockedInAuctions.add(vatDaiBalance);\r\n\r\n    // Determine the Maker currently held by the contract.\r\n    uint256 makerBalance = _MKR.balanceOf(address(this));\r\n\r\n    // Determine the amount of Dai and MKR to redeem based on the share.\r\n    uint256 vatDaiRedeemed = combinedVatDai.mul(shareFloat) / 1e18;\r\n    mkrRedeemed = makerBalance.mul(shareFloat) / 1e18;\r\n\r\n    // daiRedeemed is the e18 version of vatDaiRedeemed (e45).\r\n    // Needed for dai ERC20 token, otherwise keep decimals of vatDai.\r\n    daiRedeemed = vatDaiRedeemed / 1e27;\r\n\r\n    // Check that sufficient Dai liquidity is currently available to withdraw.\r\n    redeemable = (vatDaiRedeemed <= vatDaiBalance);\r\n  }\r\n\r\n  function _getActiveAuctionVatDaiTotal() internal view returns (uint256 vatDai) {\r\n    vatDai = 0;\r\n    uint256[] memory activeAuctions = _activeAuctions.enumerate();\r\n\r\n    uint256 auctionVatDai;\r\n    address bidder;\r\n    for (uint256 i = 0; i < activeAuctions.length; i++) {\r\n      // Dai bid size is returned from getCurrentBid with 45 decimals\r\n      (auctionVatDai,, bidder,,) = SimpleFlopper.getCurrentBid(activeAuctions[i]);\r\n      if (bidder == address(this)) {\r\n        // we are keeping the 45 decimals in case we need to return vatDai\r\n        vatDai = vatDai.add(auctionVatDai);\r\n      }\r\n    }\r\n  }\r\n\r\n  modifier notWhenDeactivated() {\r\n    require(\r\n      _status != Status.DEACTIVATED,\r\n      \"DaiBackstopSyndicate/notWhenDeactivated: Syndicate is deactivated, please withdraw.\"\r\n    );\r\n    _;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mkrAsk\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiBid\",\"type\":\"uint256\"}],\"name\":\"AuctionEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ceaseFire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"backstopTokenAmount\",\"type\":\"uint256\"}],\"name\":\"defect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mkrRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"enlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"backstopTokensMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"enterAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalizeAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"activeAuctions\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repriceIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableDaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiInVat\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"}],\"name\":\"getCurrentBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMKR\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"bidDeadline\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"auctionDeadline\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"combinedDaiInVat\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaiBalanceForAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiInVatForAuctions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"backstopTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getDefectAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mkrRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFlopperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"flopper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMKRBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mkr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum IDaiBackstopSyndicate.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNumberOfAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaiBackstopSyndicateV3","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3b3d1ab0970420054eea88565f5c47c41e3cecbfdd2677b72dc1de24decde3f5"}]}