{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string memory roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string memory roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string memory roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string memory roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string memory roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title RBACWithAdmin\r\n * @author Matt Condon (@Shrugs)\r\n * @dev It's recommended that you define constants in the contract,\r\n * @dev like ROLE_ADMIN below, to avoid typos.\r\n */\r\ncontract RBACWithAdmin is RBAC { // , DESTROYER {\r\n  /**\r\n   * A constant role name for indicating admins.\r\n   */\r\n  string public constant ROLE_ADMIN = \"admin\";\r\n  string public constant ROLE_PAUSE_ADMIN = \"pauseAdmin\";\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n  modifier onlyPauseAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_PAUSE_ADMIN);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev constructor. Sets msg.sender as admin by default\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n    addRole(msg.sender, ROLE_PAUSE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminAddRole(address addr, string memory roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    addRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminRemoveRole(address addr, string memory roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    removeRole(addr, roleName);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n  bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n  modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is RBACWithAdmin {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyPauseAdmin whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyPauseAdmin whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract DragonsETH {\r\n    struct Dragon {\r\n        uint256 gen1;\r\n        uint8 stage; // 0 - Dead, 1 - Egg, 2 - Young Dragon \r\n        uint8 currentAction; // 0 - free, 1 - fight place, 0xFF - Necropolis,  2 - random fight,\r\n                             // 3 - breed market, 4 - breed auction, 5 - random breed, 6 - market place ...\r\n        uint240 gen2;\r\n        uint256 nextBlock2Action;\r\n    }\r\n\r\n    Dragon[] public dragons;\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function setCurrentAction(uint256 _dragonID, uint8 _currentAction) external;\r\n}\r\n\r\ncontract FixMarketPlace is Pausable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    DragonsETH public mainContract;\r\n    address payable wallet;\r\n    uint256 public ownersPercent = 50; // eq 5%\r\n    mapping(uint256 => address payable) public dragonsOwner;\r\n    mapping(uint256 => uint256) public dragonPrices;\r\n    mapping(uint256 => uint256) public dragonsListIndex;\r\n    mapping(address => uint256) public ownerDragonsCount;\r\n    mapping(uint256 => uint256) public dragonsLikes;\r\n    uint256[] public dragonsList;\r\n    \r\n    event SoldOut(address indexed _from, address indexed _to, uint256 _tokenId, uint256 _price);\r\n    event ForSale(address indexed _from, uint256 _tokenId, uint256 _price);\r\n    event SaleCancel(address indexed _from, uint256 _tokenId, uint256 _price);\r\n    \r\n    constructor(address payable _wallet, address _mainContract) public {\r\n        wallet = _wallet;\r\n        mainContract = DragonsETH(_mainContract);\r\n    }\r\n    function add2MarketPlace(address payable _dragonOwner, uint256 _dragonID, uint256 _dragonPrice, uint256 /*_endBlockNumber*/) \r\n        external\r\n        whenNotPaused\r\n        returns (bool) \r\n    {\r\n        require(msg.sender == address(mainContract), \"Only the main contract can add dragons!\");\r\n        dragonsOwner[_dragonID] = _dragonOwner;\r\n        ownerDragonsCount[_dragonOwner]++;\r\n        dragonPrices[_dragonID] = _dragonPrice;\r\n        dragonsListIndex[_dragonID] = dragonsList.length;\r\n        dragonsList.push(_dragonID);\r\n        mainContract.setCurrentAction(_dragonID, 6);\r\n        emit ForSale(_dragonOwner, _dragonID, _dragonPrice);\r\n        return true;\r\n    }\r\n    \r\n    function delFromFixMarketPlace(uint256 _dragonID) external {\r\n        require(msg.sender == dragonsOwner[_dragonID], \"Only owners can do it!\");\r\n        mainContract.transferFrom(address(this), dragonsOwner[_dragonID], _dragonID);\r\n        emit SaleCancel(dragonsOwner[_dragonID], _dragonID, dragonPrices[_dragonID]);\r\n        _delItem(_dragonID);\r\n    }\r\n    function buyDragon(uint256 _dragonID) external payable nonReentrant whenNotPaused {\r\n        uint256 _dragonCommisions = dragonPrices[_dragonID].mul(ownersPercent).div(1000);\r\n        require(msg.value >= dragonPrices[_dragonID].add(_dragonCommisions), \"Not enough Ether!\");\r\n        uint256 valueToReturn = msg.value.sub(dragonPrices[_dragonID]).sub(_dragonCommisions);\r\n        if (valueToReturn != 0) {\r\n            msg.sender.transfer(valueToReturn);\r\n        }\r\n    \r\n        mainContract.safeTransferFrom(address(this), msg.sender, _dragonID);\r\n        wallet.transfer(_dragonCommisions);\r\n        dragonsOwner[_dragonID].transfer(msg.value - valueToReturn - _dragonCommisions);\r\n        emit SoldOut(dragonsOwner[_dragonID], msg.sender, _dragonID, msg.value - valueToReturn - _dragonCommisions);\r\n        _delItem(_dragonID);\r\n    }\r\n    function likeDragon(uint256 _dragonID) external whenNotPaused {\r\n        dragonsLikes[_dragonID]++;\r\n    }\r\n    function totalDragonsToSale() external view returns(uint256) {\r\n        return dragonsList.length;\r\n    }\r\n    function getAllDragonsSale() external view returns(uint256[] memory) {\r\n        return dragonsList;\r\n    }\r\n    function getSlicedDragonsSale(uint256 _firstIndex, uint256 _aboveLastIndex) external view returns(uint256[] memory) {\r\n        require(_firstIndex < dragonsList.length, \"The first index greater than totalDragonsToSale!\");\r\n        uint256 lastIndex = _aboveLastIndex;\r\n        if (_aboveLastIndex > dragonsList.length) lastIndex = dragonsList.length;\r\n        require(_firstIndex <= lastIndex, \"The first index greater than last!\");\r\n        uint256 resultCount = lastIndex - _firstIndex;\r\n        if (resultCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](resultCount);\r\n            uint256 _dragonIndex;\r\n            uint256 _resultIndex = 0;\r\n\r\n            for (_dragonIndex = _firstIndex; _dragonIndex < lastIndex; _dragonIndex++) {\r\n                result[_resultIndex] = dragonsList[_dragonIndex];\r\n                _resultIndex++;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    function getOwnedDragonToSale(address _owner) external view returns(uint256[] memory) {\r\n        uint256 countResaultDragons = ownerDragonsCount[_owner];\r\n        if (countResaultDragons == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](countResaultDragons);\r\n            uint256 _dragonIndex;\r\n            uint256 _resultIndex = 0;\r\n\r\n            for (_dragonIndex = 0; _dragonIndex < dragonsList.length; _dragonIndex++) {\r\n                uint256 _dragonID = dragonsList[_dragonIndex];\r\n                if (dragonsOwner[_dragonID] == _owner) {\r\n                    result[_resultIndex] = _dragonID;\r\n                    _resultIndex++;\r\n                    if (_resultIndex == countResaultDragons) break;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n    function getFewDragons(uint256[] calldata _dragonIDs) external view returns(uint256[] memory) {\r\n        uint256 dragonCount = _dragonIDs.length;\r\n        if (dragonCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](dragonCount * 4);\r\n            uint256 resultIndex = 0;\r\n\r\n            for (uint256 dragonIndex = 0; dragonIndex < dragonCount; dragonIndex++) {\r\n                uint256 dragonID = _dragonIDs[dragonIndex];\r\n                result[resultIndex++] = dragonID;\r\n                uint8 tmp;\r\n                (,tmp,,,) = mainContract.dragons(dragonID);\r\n                result[resultIndex++] = uint256(tmp);\r\n                result[resultIndex++] = uint256(dragonsOwner[dragonID]);\r\n                result[resultIndex++] = dragonPrices[dragonID];\r\n                \r\n            }\r\n\r\n            return result; \r\n        }\r\n    }\r\n     function _delItem(uint256 _dragonID) private {\r\n        require(dragonsOwner[_dragonID] != address(0), \"An attempt to remove an unregistered dragon!\");\r\n        mainContract.setCurrentAction(_dragonID, 0);\r\n        ownerDragonsCount[dragonsOwner[_dragonID]]--;\r\n        delete(dragonsOwner[_dragonID]);\r\n        delete(dragonPrices[_dragonID]);\r\n        delete(dragonsLikes[_dragonID]);\r\n        if (dragonsList.length - 1 != dragonsListIndex[_dragonID]) {\r\n            dragonsList[dragonsListIndex[_dragonID]] = dragonsList[dragonsList.length - 1];\r\n            dragonsListIndex[dragonsList[dragonsList.length - 1]] = dragonsListIndex[_dragonID];\r\n        }\r\n        dragonsList.length--;\r\n        delete(dragonsListIndex[_dragonID]);\r\n    }\r\n    function clearMarket(uint256[] calldata _dragonIDs) external onlyAdmin whenPaused {\r\n        uint256 dragonCount = _dragonIDs.length;\r\n        if (dragonCount > 0) {\r\n            for (uint256 dragonIndex = 0; dragonIndex < dragonCount; dragonIndex++) {\r\n                uint256 dragonID = _dragonIDs[dragonIndex];\r\n                mainContract.transferFrom(address(this), dragonsOwner[dragonID], dragonID);\r\n                _delItem(dragonID);\r\n            }\r\n        }\r\n    }\r\n    function changeWallet(address payable _wallet) external onlyAdmin {\r\n        wallet = _wallet;\r\n    }\r\n    function changeOwnersPercent(uint256 _ownersPercent) external onlyAdmin {\r\n        ownersPercent = _ownersPercent;\r\n    }\r\n    function withdrawAllEther() external onlyAdmin {\r\n        require(wallet != address(0), \"Withdraw address can't be zero!\");\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SaleCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SoldOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_PAUSE_ADMIN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dragonOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dragonID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dragonPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"add2MarketPlace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminAddRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"adminRemoveRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"buyDragon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownersPercent\",\"type\":\"uint256\"}],\"name\":\"changeOwnersPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_dragonIDs\",\"type\":\"uint256[]\"}],\"name\":\"clearMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"delFromFixMarketPlace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonsLikes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonsList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonsListIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragonsOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDragonsSale\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_dragonIDs\",\"type\":\"uint256[]\"}],\"name\":\"getFewDragons\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedDragonToSale\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_firstIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aboveLastIndex\",\"type\":\"uint256\"}],\"name\":\"getSlicedDragonsSale\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dragonID\",\"type\":\"uint256\"}],\"name\":\"likeDragon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"internalType\":\"contract DragonsETH\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerDragonsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownersPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDragonsToSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FixMarketPlace","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0d50ae97443aa9615d87129feb9681417e92f4100000000000000000000000034887b4e8fe85b20ae9012d071412afe702c9409","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3eed54ddc375209f1c7480227d06dac0122e5e77408ea2f55b1bce974206be69"}]}