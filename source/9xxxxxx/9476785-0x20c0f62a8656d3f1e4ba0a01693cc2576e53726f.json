{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() public view returns(uint);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract Kyber {\r\n    function getExpectedRate(address src, address dest, uint srcQty)\r\n        public view returns (uint expectedRate, uint slippageRate);\r\n\r\n    function trade(address src, uint srcAmount, address dst, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId)\r\n        public payable returns(uint);\r\n}\r\n\r\ncontract AdminRole {\r\n\r\n    mapping (address => bool) adminGroup;\r\n    address payable owner;\r\n\r\n    constructor () public {\r\n        adminGroup[msg.sender] = true;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(\r\n            isAdmin(msg.sender),\r\n            \"The caller is not Admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            owner == msg.sender,\r\n            \"The caller is not Owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function addAdmin(address addr) external onlyAdmin {\r\n        adminGroup[addr] = true;\r\n    }\r\n    function delAdmin(address addr) external onlyAdmin {\r\n        adminGroup[addr] = false;\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns(bool) {\r\n        return adminGroup[addr];\r\n    }\r\n\r\n    function kill() external onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract Withdrawable is AdminRole {\r\n    /*\r\n     * External Function to withdraw founds -> Gas or Tokens\r\n     */\r\n    function withdrawTo (address payable dst, uint founds, address token) external onlyAdmin {\r\n        if (token == address(0))\r\n            require (address(this).balance >= founds);\r\n        else {\r\n            ERC20 erc20 = ERC20(token);\r\n            require (erc20.balanceOf(address(this)) >= founds);\r\n        }\r\n        sendFounds(dst,founds, token);\r\n    }\r\n\r\n    /*\r\n     * Function to send founds -> Gas or Tokens\r\n     */\r\n    function sendFounds(address payable dst, uint amount, address token) internal returns(bool) {\r\n        ERC20 erc20;\r\n        if (token == address(0))\r\n            require(address(dst).send(amount), \"Impossible send founds\");\r\n        else {\r\n            erc20 = ERC20(token);\r\n            require(erc20.transfer(dst, amount), \"Impossible send founds\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract KyberProxy is Withdrawable {\r\n    string public name = \"Kyber\";\r\n    Kyber proxy;\r\n\r\n    constructor () public {\r\n        /**\r\n         * Mainnnet\r\n         */\r\n        proxy = Kyber(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n\r\n    }\r\n\r\n\r\n    function getSwapQuantity(address src, address dst, uint256 srcQty) public view returns(uint256) {\r\n        uint256 rate = getSwapRate(src,dst,srcQty);\r\n        ERC20 srcToken = ERC20(src);\r\n        uint256 ret;\r\n\r\n        ret = (srcQty * (10**(18-srcToken.decimals())) * rate) / (10 ** 18);\r\n        return ret;\r\n    }\r\n\r\n    function getSwapRate(address src, address dst, uint256 srcQty) public view returns(uint256) {\r\n        uint256 rate;\r\n\r\n        (rate,) = proxy.getExpectedRate(src,dst,srcQty);\r\n        return rate;\r\n    }\r\n\r\n    function executeSwap(address srcToken, uint256 srcQty, address dstToken, address dstAddress) public returns(bool) {\r\n        uint256 rate;\r\n        uint256 bought;\r\n        ERC20 token = ERC20(srcToken);\r\n\r\n        rate = getSwapRate(srcToken,dstToken,srcQty);\r\n\r\n        require(token.transferFrom(msg.sender, address(this), srcQty), \"Unable to transferFrom()\");\r\n\r\n        // Set the spender's token allowance to tokenQty\r\n        require(token.approve(address(proxy), srcQty), \"Unable to appove()\");\r\n\r\n        bought = proxy.trade(\r\n            srcToken,\r\n            srcQty,\r\n            dstToken,\r\n            dstAddress,\r\n            0x8000000000000000000000000000000000000000000000000000000000000000,\r\n            rate,\r\n            address(0)\r\n        );\r\n\r\n        require(bought != 0, \"Unable to exchange tokens\");\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"delAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"}],\"name\":\"executeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getSwapQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"founds\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KyberProxy","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://42c1090a4139b7c81e0c7e65c636e070a5dd6f188ef6df1952308ca2c504430f"}]}