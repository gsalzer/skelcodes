{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract TokenFallThrough {\r\n    address payable private _owner;\r\n    \r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function withdraw() public {\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return string(\"NTFY\");\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 0;\r\n    }\r\n\r\n    function name() public view returns(string memory) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(address()) }\r\n        uint256 nameSize = size - 86;\r\n        bytes memory bName = new bytes(nameSize);\r\n        assembly { extcodecopy(address(), add(bName, 0x20), 86, nameSize) }\r\n        return string(bName);\r\n    }\r\n    \r\n    function allowance(address, address) external pure returns (uint256) {\r\n        return 0;\r\n    }\r\n    \r\n    function totalSupply() external pure returns (uint256) {\r\n        return 1;\r\n    }\r\n    \r\n    function balanceOf(address) external pure returns (uint256) {\r\n        return 1;\r\n    }\r\n    \r\n    function transfer(address, uint256) external returns (bool success) {\r\n        address a;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            extcodecopy(address(), ptr, 66, 32)\r\n            a := shr(0x60, mload(ptr))\r\n        }\r\n        if (a == msg.sender) {\r\n            assembly { success := call(gas(), address(), 0, 0, 0, 0, 0) }\r\n        } else {\r\n            success = false;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenFallThrough","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://fcf5189a6e4a8f079f19c9f4cd60a33b5cb9bf7ee3fa681627a7626ab609e1cf"}]}