{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.12;\n\ncontract AbstractSweeper {\n    function sweep(address token, uint amount) returns (bool);\n\n    function () { throw; }\n\n    BitslerController controller;\n\n    function AbstractSweeper(address _controller) {\n        controller = BitslerController(_controller);\n    }\n\n    modifier canSweep() {\n        if (msg.sender != controller.authorizedCaller() && msg.sender != controller.owner() && msg.sender != controller.dev()) throw;\n        if (controller.halted()) throw;\n        _;\n    }\n}\n\ncontract Token {\n    function balanceOf(address a) returns (uint) {\n        (a);\n        return 0;\n    }\n\n    function transfer(address a, uint val) returns (bool) {\n        (a);\n        (val);\n        return false;\n    }\n}\n\ncontract DefaultSweeper is AbstractSweeper {\n    function DefaultSweeper(address controller)\n             AbstractSweeper(controller) {}\n\n    function sweep(address _token, uint _amount)\n    canSweep\n    returns (bool) {\n        bool success = false;\n        address destination = controller.destination();\n\n        if (_token != address(0)) {\n            Token token = Token(_token);\n            uint amount = _amount;\n            if (amount > token.balanceOf(this)) {\n                return false;\n            }\n            token.transfer(destination, amount);\n            success = true;\n        }\n        else {\n            uint amountInWei = _amount;\n            if (amountInWei > this.balance) {\n                return false;\n            }\n\n            success = destination.send(amountInWei);\n        }\n\n        if (success) {\n            controller.logSweep(this, destination, _token, _amount);\n        }\n        return success;\n    }\n}\n\ncontract UserWallet {\n    AbstractSweeperList sweeperList;\n    function UserWallet(address _sweeperlist) {\n        sweeperList = AbstractSweeperList(_sweeperlist);\n    }\n\n    function () public payable { }\n\n    function tokenFallback(address _from, uint _value, bytes _data) {\n        (_from);\n        (_value);\n        (_data);\n     }\n\n    function sweep(address _token, uint _amount)\n    returns (bool) {\n        (_amount);\n        return sweeperList.sweeperOf(_token).delegatecall(msg.data);\n    }\n}\n\ncontract AbstractSweeperList {\n    function sweeperOf(address _token) returns (address);\n}\n\ncontract BitslerController is AbstractSweeperList {\n    address public owner;\n    address public authorizedCaller;\n    address public dev = 0x4c1C78a66a3F5C0E4D1DacAeE0608816FCA0C461;\n    address public destination;\n\n    bool public halted;\n\n    event LogNewWallet(address receiver);\n    event LogSweep(address indexed from, address indexed to, address indexed token, uint amount);\n    \n    modifier onlyOwner() {\n        if (msg.sender != owner) throw; \n        _;\n    }\n\n    modifier onlyAdmins() {\n        if (msg.sender != authorizedCaller && msg.sender != owner && msg.sender != dev) throw; \n        _;\n    }\n\n    function BitslerController() \n    {\n        owner = msg.sender;\n        destination = msg.sender;\n        authorizedCaller = msg.sender;\n    }\n\n    function changeAuthorizedCaller(address _newCaller) onlyOwner {\n        authorizedCaller = _newCaller;\n    }\n\n    function changeDestination(address _dest) onlyOwner {\n        destination = _dest;\n    }\n\n    function changeOwner(address _owner) onlyOwner {\n        owner = _owner;\n    }\n\n    function makeWallet() onlyAdmins returns (address wallet)  {\n        wallet = address(new UserWallet(this));\n        LogNewWallet(wallet);\n    }\n\n    function halt() onlyAdmins {\n        halted = true;\n    }\n\n    function start() onlyOwner {\n        halted = false;\n    }\n\n    address public defaultSweeper = address(new DefaultSweeper(this));\n    mapping (address => address) sweepers;\n\n    function addSweeper(address _token, address _sweeper) onlyOwner {\n        sweepers[_token] = _sweeper;\n    }\n\n    function sweeperOf(address _token) returns (address) {\n        address sweeper = sweepers[_token];\n        if (sweeper == 0) sweeper = defaultSweeper;\n        return sweeper;\n    }\n\n    function logSweep(address from, address to, address token, uint amount) {\n        LogSweep(from, to, token, amount);\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newCaller\",\"type\":\"address\"}],\"name\":\"changeAuthorizedCaller\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logSweep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweeperOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"changeDestination\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultSweeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_sweeper\",\"type\":\"address\"}],\"name\":\"addSweeper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedCaller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeWallet\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogNewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSweep\",\"type\":\"event\"}]","ContractName":"BitslerController","CompilerVersion":"v0.4.12+commit.194ff033","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}