{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\n    function swapTokenToToken(address _src, address _dest, uint _amount) external payable returns(uint);\n\n    function getExpectedRate(address src, address dest, uint srcQty) external view\n        returns (uint expectedRate);\n}\n\ncontract SaverLogger {\n    event Repay(uint indexed cdpId, address indexed owner, uint collateralAmount, uint daiAmount);\n    event Boost(uint indexed cdpId, address indexed owner, uint daiAmount, uint collateralAmount);\n\n    function LogRepay(uint _cdpId, address _owner, uint _collateralAmount, uint _daiAmount) public {\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\n    }\n\n    function LogBoost(uint _cdpId, address _owner, uint _daiAmount, uint _collateralAmount) public {\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\n    }\n}\n\ncontract Discount {\n\n    address public owner;\n    mapping (address => CustomServiceFee) public serviceFees;\n\n    uint constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({\n            active: true,\n            amount: _fee\n        });\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({\n            active: false,\n            amount: 0\n        });\n    }\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract Spotter {\n    struct Ilk {\n        PipInterface pip;\n        uint256 mat;\n    }\n\n    mapping (bytes32 => Ilk) public ilks;\n\n    uint256 public par;\n\n}\n\ncontract Jug {\n    struct Ilk {\n        uint256 duty;\n        uint256  rho;\n    }\n\n    mapping (bytes32 => Ilk) public ilks;\n\n    function drip(bytes32) public returns (uint);\n}\n\ncontract Vat {\n\n    struct Urn {\n        uint256 ink;   // Locked Collateral  [wad]\n        uint256 art;   // Normalised Debt    [wad]\n    }\n\n    struct Ilk {\n        uint256 Art;   // Total Normalised Debt     [wad]\n        uint256 rate;  // Accumulated Rates         [ray]\n        uint256 spot;  // Price with Safety Margin  [ray]\n        uint256 line;  // Debt Ceiling              [rad]\n        uint256 dust;  // Urn Debt Floor            [rad]\n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n\n    function can(address, address) public view returns (uint);\n    function dai(address) public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) public;\n    function hope(address) public;\n    function move(address, address, uint) public;\n}\n\ncontract Gem {\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n    function allowance(address, address) public returns (uint);\n}\n\ncontract DaiJoin {\n    function vat() public returns (Vat);\n    function dai() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract SaverExchangeInterface {\n    function getBestPrice(uint _amount, address _srcToken, address _destToken, uint _exchangeType) public view returns (address, uint);\n}\n\ncontract ConstantAddressesExchange {\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x862F3dcF1104b8a9468fBb8B843C37C31B41eF09;\n\n    // new MCD contracts\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\n\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\n\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\n\n    // Our contracts\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n}\n\ncontract ExchangeHelper is ConstantAddressesExchange {\n\n    /// @notice Swaps 2 tokens on the Saver Exchange\n    /// @dev ETH is sent with Weth address\n    /// @param _data [amount, minPrice, exchangeType, 0xPrice]\n    /// @param _src Token address of the source token\n    /// @param _dest Token address of the destination token\n    /// @param _exchangeAddress Address of 0x exchange that should be called\n    /// @param _callData data to call 0x exchange with\n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\n        address wrapper;\n        uint price;\n        // [tokensReturned, tokensLeft]\n        uint[2] memory tokens;\n        bool success;\n\n        // tokensLeft is equal to amount at the beginning\n        tokens[1] = _data[0];\n\n        _src = wethToKyberEth(_src);\n        _dest = wethToKyberEth(_dest);\n\n        // use this to avoid stack too deep error\n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\n\n        // if _data[2] == 4 use 0x if possible\n        if (_data[2] == 4) {\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\n            }\n\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance);\n\n            // if specifically 4, then require it to be successfull\n            require(success && tokens[0] > 0, \"0x transaction failed\");\n        }\n\n        // no 0x\n        // if (_data[2] == 5) {\n        //     (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\n\n        //     require(price > _data[1], \"Slippage hit onchain price\");\n\n        //     if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n        //         uint tRet;\n        //         (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\n        //         tokens[0] += tRet;\n        //     } else {\n        //         ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\n\n        //         if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\n        //         } else {\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\n        //         }\n        //     }      \n\n        //     return tokens[0]; \n        // } \n\n        if (tokens[0] == 0) {\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], orderAddresses[1], orderAddresses[2], _data[2]);\n\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\n\n            // handle 0x exchange, if equal price, try 0x to use less gas\n            if (_data[3] >= price) {\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\n                }\n\n                // when selling eth its possible that some eth isn't sold and it is returned back\n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance);\n            }\n\n            // if there are more tokens left, try to sell them on other exchanges\n            if (tokens[1] > 0) {\n                // as it stands today, this can happend only when selling ETH \n                if (tokens[1] != _data[0]) {\n                    (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\n                }\n\n                require(price > _data[1], \"Slippage hit onchain price\");\n\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n                    uint tRet;\n                    (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\n                    tokens[0] += tRet;\n                } else {\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\n\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\n                    } else {\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\n                    }\n                }\n            }\n        }\n\n        return tokens[0];\n    }\n\n    // @notice Takes order from 0x and returns bool indicating if it is successful\n    // @param _addresses [exchange, src, dst]\n    // @param _data Data to send with call\n    // @param _value Value to send with call\n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value) private returns(bool, uint, uint) {\n        bool success;\n\n        (success, ) = _addresses[0].call.value(_value)(_data);\n\n        uint tokensLeft = _value;\n        uint tokensReturned = 0;\n        if (success){\n            // check how many tokens left from _src\n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\n                tokensLeft = address(this).balance;\n            } else {\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\n            }\n\n            // check how many tokens are returned\n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\n                tokensReturned = address(this).balance;\n            } else {\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\n            }\n        }\n\n        return (success, tokensReturned, tokensLeft);\n    }\n\n    /// @notice Converts WETH -> Kybers Eth address\n    /// @param _src Input address\n    function wethToKyberEth(address _src) internal pure returns (address) {\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\n    }\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function div(uint x, uint y) internal pure returns (uint z) {\n        return x / y;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache;  // global cache for contracts\n\n    constructor(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    function() external payable {\n    }\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        returns (address target, bytes32 response)\n    {\n        target = cache.read(_code);\n        if (target == address(0)) {\n            // deploy contract & store its address in cache\n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes memory _data)\n        public\n        auth\n        note\n        payable\n        returns (bytes32 response)\n    {\n        require(_target != address(0));\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\n            response := mload(0)      // load delegatecall output\n            switch iszero(succeeded)\n            case 1 {\n                // throw if delegatecall failed\n                revert(0, 0)\n            }\n        }\n    }\n\n    //set new cache\n    function setCache(address _cacheAddr)\n        public\n        payable\n        auth\n        note\n        returns (bool)\n    {\n        require(_cacheAddr != address(0));        // invalid cache address\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\n        return true;\n    }\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n            case 1 {\n                // throw if contract failed to deploy\n                revert(0, 0)\n            }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\ncontract Manager {\n    function last(address) public returns (uint);\n    function cdpCan(address, uint, address) public view returns (uint);\n    function ilks(uint) public view returns (bytes32);\n    function owns(uint) public view returns (address);\n    function urns(uint) public view returns (address);\n    function vat() public view returns (address);\n    function open(bytes32, address) public returns (uint);\n    function give(uint, address) public;\n    function cdpAllow(uint, address, uint) public;\n    function urnAllow(address, uint) public;\n    function frob(uint, int, int) public;\n    function flux(uint, address, uint) public;\n    function move(uint, address, uint) public;\n    function exit(address, uint, address, uint) public;\n    function quit(uint, address) public;\n    function enter(address, uint) public;\n    function shift(uint, uint) public;\n}\n\ncontract Join {\n    bytes32 public ilk;\n\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract SaverProxyHelper is DSMath {\n\n    /// @notice Returns a normalized debt _amount based on the current rate\n    /// @param _amount Amount of dai to be normalized\n    /// @param _rate Current rate of the stability fee\n    /// @param _daiVatBalance Balance od Dai in the Vat for that CDP\n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\n        if (_daiVatBalance < mul(_amount, RAY)) {\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\n        }\n    }\n\n    /// @notice Converts a number to Rad percision\n    /// @param _wad The input number in wad percision\n    function toRad(uint _wad) internal pure returns (uint) {\n        return mul(_wad, 10 ** 27);\n    }\n\n    /// @notice Converts a number to 18 decimal percision\n    /// @param _joinAddr Join address of the collateral\n    /// @param _amount Number to be converted\n    function convertTo18(address _joinAddr, uint256 _amount) internal returns (uint256) {\n        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\n    }\n\n    /// @notice Converts a uint to int and checks if positive\n    /// @param _x Number to be converted\n    function toPositiveInt(uint _x) internal pure returns (int y) {\n        y = int(_x);\n        require(y >= 0, \"int-overflow\");\n    }\n\n    /// @notice Gets Dai amount in Vat which can be added to Cdp\n    /// @param _vat Address of Vat contract\n    /// @param _urn Urn of the Cdp\n    /// @param _ilk Ilk of the Cdp\n    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\n        uint dai = Vat(_vat).dai(_urn);\n\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n\n        amount = toPositiveInt(dai / rate);\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\n    }\n\n    /// @notice Gets the whole debt of the CDP\n    /// @param _vat Address of Vat contract\n    /// @param _usr Address of the Dai holder\n    /// @param _urn Urn of the Cdp\n    /// @param _ilk Ilk of the Cdp\n    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n        uint dai = Vat(_vat).dai(_usr);\n\n        uint rad = sub(mul(art, rate), dai);\n        daiAmount = rad / RAY;\n\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\n    }\n\n    /// @notice Gets the token address from the Join contract\n    /// @param _joinAddr Address of the Join contract\n    function getCollateralAddr(address _joinAddr) internal returns (address) {\n        return address(Join(_joinAddr).gem());\n    }\n\n    /// @notice Gets CDP info (collateral, debt)\n    /// @param _manager Manager contract\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\n        address vat = _manager.vat();\n        address urn = _manager.urns(_cdpId);\n\n        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\n        (,uint rate,,,) = Vat(vat).ilks(_ilk);\n\n        return (collateral, rmul(debt, rate));\n    }\n\n    /// @notice Address that owns the DSProxy that owns the CDP\n    /// @param _manager Manager contract\n    /// @param _cdpId Id of the CDP\n    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\n        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\n\n        return proxy.owner();\n    }\n}\n\ncontract MCDSaverProxy is SaverProxyHelper, ExchangeHelper {\n\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\n    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\n\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\n    Vat public constant vat = Vat(VAT_ADDRESS);\n    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\n\n    /// @notice Checks if the collateral amount is increased after boost\n    /// @param _cdpId The Id of the CDP\n    modifier boostCheck(uint _cdpId) {\n        bytes32 ilk = manager.ilks(_cdpId);\n        address urn = manager.urns(_cdpId);\n\n        (uint collateralBefore, ) = vat.urns(ilk, urn);\n\n        _;\n\n        (uint collateralAfter, ) = vat.urns(ilk, urn);\n\n        require(collateralAfter > collateralBefore);\n    }\n\n    /// @notice Checks if ratio is increased after repay\n    /// @param _cdpId The Id of the CDP\n    modifier repayCheck(uint _cdpId) {\n        bytes32 ilk = manager.ilks(_cdpId);\n\n        uint beforeRatio = getRatio(_cdpId, ilk);\n\n        _;\n\n        uint afterRatio = getRatio(_cdpId, ilk);\n\n        require(afterRatio > beforeRatio || afterRatio == 0);\n    }\n\n    /// @notice Repay - draws collateral, converts to Dai and repays the debt\n    /// @dev Must be called by the DSProxy contract that owns the CDP\n    /// @param _data Uint array [cdpId, amount, minPrice, exchangeType, gasCost, 0xPrice]\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _exchangeAddress Address of 0x exchange that should be called\n    /// @param _callData data to call 0x exchange with\n    function repay(\n        // cdpId, amount, minPrice, exchangeType, gasCost, 0xPrice\n        uint[6] memory _data,\n        address _joinAddr,\n        address _exchangeAddress,\n        bytes memory _callData\n    ) public payable repayCheck(_data[0]) {\n\n        address owner = getOwner(manager, _data[0]);\n        bytes32 ilk = manager.ilks(_data[0]);\n\n        // uint collDrawn;\n        // uint daiAmount;\n        // uint daiAfterFee;\n        uint[3] memory temp;\n\n        temp[0] = drawCollateral(_data[0], ilk, _joinAddr, _data[1]);\n\n                                // collDrawn, minPrice, exchangeType, 0xPrice\n        uint[4] memory swapData = [temp[0], _data[2], _data[3], _data[5]];\n        temp[1] = swap(swapData, getCollateralAddr(_joinAddr), DAI_ADDRESS, _exchangeAddress, _callData);\n        temp[2] = sub(temp[1], getFee(temp[1], _data[4], owner));\n\n        paybackDebt(_data[0], ilk, temp[2], owner);\n\n        SaverLogger(LOGGER_ADDRESS).LogRepay(_data[0], owner, temp[0], temp[1]);\n    }\n\n    /// @notice Boost - draws Dai, converts to collateral and adds to CDP\n    /// @dev Must be called by the DSProxy contract that owns the CDP\n    /// @param _data Uint array [cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice]\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _exchangeAddress Address of 0x exchange that should be called\n    /// @param _callData data to call 0x exchange with\n    function boost(\n        // cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice\n        uint[6] memory _data,\n        address _joinAddr,\n        address _exchangeAddress,\n        bytes memory _callData\n    ) public payable boostCheck(_data[0]) {\n        address owner = getOwner(manager, _data[0]);\n        bytes32 ilk = manager.ilks(_data[0]);\n\n        // uint daiDrawn;\n        // uint daiAfterFee;\n        // uint collateralAmount;\n        uint[3] memory temp;\n\n        temp[0] = drawDai(_data[0], ilk, _data[1]);\n        temp[1] = sub(temp[0], getFee(temp[0], _data[4], owner));\n                                // daiAfterFee, minPrice, exchangeType, 0xPrice\n        uint[4] memory swapData = [temp[1], _data[2], _data[3], _data[5]];\n        temp[2] = swap(swapData, DAI_ADDRESS, getCollateralAddr(_joinAddr), _exchangeAddress, _callData);\n\n        addCollateral(_data[0], _joinAddr, temp[2]);\n\n        SaverLogger(LOGGER_ADDRESS).LogBoost(_data[0], owner, temp[0], temp[2]);\n    }\n\n    /// @notice Draws Dai from the CDP\n    /// @dev If _daiAmount is bigger than max available we'll draw max\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _daiAmount Amount of Dai to draw\n    function drawDai(uint _cdpId, bytes32 _ilk, uint _daiAmount) internal returns (uint) {\n        uint rate = Jug(JUG_ADDRESS).drip(_ilk);\n        uint daiVatBalance = vat.dai(manager.urns(_cdpId));\n\n        uint maxAmount = getMaxDebt(_cdpId, _ilk);\n\n        if (_daiAmount >= maxAmount) {\n            _daiAmount = sub(maxAmount, 1);\n        }\n\n        manager.frob(_cdpId, int(0), normalizeDrawAmount(_daiAmount, rate, daiVatBalance));\n        manager.move(_cdpId, address(this), toRad(_daiAmount));\n\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\n            vat.hope(DAI_JOIN_ADDRESS);\n        }\n\n        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\n\n        return _daiAmount;\n    }\n\n    /// @notice Adds collateral to the CDP\n    /// @param _cdpId Id of the CDP\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _amount Amount of collateral to add\n    function addCollateral(uint _cdpId, address _joinAddr, uint _amount) internal {\n        int convertAmount = 0;\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().deposit.value(_amount)();\n            convertAmount = toPositiveInt(_amount);\n        } else {\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\n        }\n\n        Join(_joinAddr).gem().approve(_joinAddr, _amount);\n        Join(_joinAddr).join(address(this), _amount);\n\n        vat.frob(\n            manager.ilks(_cdpId),\n            manager.urns(_cdpId),\n            address(this),\n            address(this),\n            convertAmount,\n            0\n        );\n\n    }\n\n    /// @notice Draws collateral and returns it to DSProxy\n    /// @dev If _amount is bigger than max available we'll draw max\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _joinAddr Address of the join contract for the CDP collateral\n    /// @param _amount Amount of collateral to draw\n    function drawCollateral(uint _cdpId, bytes32 _ilk, address _joinAddr, uint _amount) internal returns (uint) {\n        uint maxCollateral = getMaxCollateral(_cdpId, _ilk);\n\n        if (_amount >= maxCollateral) {\n            _amount = sub(maxCollateral, 1);\n        }\n\n        manager.frob(_cdpId, -toPositiveInt(_amount), 0);\n        manager.flux(_cdpId, address(this), _amount);\n\n        Join(_joinAddr).exit(address(this), _amount);\n\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\n            Join(_joinAddr).gem().withdraw(_amount); // Weth -> Eth\n        }\n\n        return _amount;\n    }\n\n    /// @notice Paybacks Dai debt\n    /// @dev If the _daiAmount is bigger than the whole debt, returns extra Dai\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @param _daiAmount Amount of Dai to payback\n    /// @param _owner Address that owns the DSProxy that owns the CDP\n    function paybackDebt(uint _cdpId, bytes32 _ilk, uint _daiAmount, address _owner) internal {\n        address urn = manager.urns(_cdpId);\n\n        uint wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\n\n        if (_daiAmount > wholeDebt) {\n            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\n            _daiAmount = wholeDebt;\n        }\n\n        daiJoin.dai().approve(DAI_JOIN_ADDRESS, _daiAmount);\n        daiJoin.join(urn, _daiAmount);\n\n        manager.frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\n    }\n\n    /// @notice Calculates the fee amount\n    /// @param _amount Dai amount that is converted\n    /// @param _gasCost Used for Monitor, estimated gas cost of tx\n    /// @param _owner The address that controlls the DSProxy that owns the CDP\n    function getFee(uint _amount, uint _gasCost, address _owner) internal returns (uint feeAmount) {\n        uint fee = SERVICE_FEE;\n\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_owner)) {\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_owner);\n        }\n\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\n\n        if (_gasCost != 0) {\n            uint ethDaiPrice = getPrice(ETH_ILK);\n            _gasCost = rmul(_gasCost, ethDaiPrice);\n\n            feeAmount = add(feeAmount, _gasCost);\n        }\n\n        // fee can't go over 20% of the whole amount\n        if (feeAmount > (_amount / 5)) {\n            feeAmount = _amount / 5;\n        }\n\n        ERC20(DAI_ADDRESS).transfer(WALLET_ID, feeAmount);\n    }\n\n    /// @notice Gets the maximum amount of collateral available to draw\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @dev Substracts 10 wei to aviod rounding error later on\n    function getMaxCollateral(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice(_ilk);\n\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\n\n        return sub(sub(collateral, (div(mul(mat, debt), price))), 10);\n    }\n\n    /// @notice Gets the maximum amount of debt available to generate\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    /// @dev Substracts 10 wei to aviod rounding error later on\n    function getMaxDebt(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice(_ilk);\n\n        (, uint mat) = spotter.ilks(_ilk);\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        return sub(sub(div(mul(collateral, price), mat), debt), 10);\n    }\n\n    /// @notice Gets a price of the asset\n    /// @param _ilk Ilk of the CDP\n    function getPrice(bytes32 _ilk) public view returns (uint) {\n        (, uint mat) = spotter.ilks(_ilk);\n        (,,uint spot,,) = vat.ilks(_ilk);\n\n        return rmul(rmul(spot, spotter.par()), mat);\n    }\n\n    /// @notice Gets CDP ratio\n    /// @param _cdpId Id of the CDP\n    /// @param _ilk Ilk of the CDP\n    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint) {\n        uint price = getPrice( _ilk);\n\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\n\n        if (debt == 0) return 0;\n\n        return rdiv(wmul(collateral, price), debt);\n    }\n\n    /// @notice Gets CDP info (collateral, debt, price, ilk)\n    /// @param _cdpId Id of the CDP\n    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk) {\n        address urn = manager.urns(_cdpId);\n        ilk = manager.ilks(_cdpId);\n\n        (collateral, debt) = vat.urns(ilk, urn);\n        (,uint rate,,,) = vat.ilks(ilk);\n\n        debt = rmul(debt, rate);\n        price = getPrice(ilk);\n    }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ILK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"name\":\"_joinAddr\",\"type\":\"address\"},{\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"boost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"name\":\"_joinAddr\",\"type\":\"address\"},{\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getCdpDetailedInfo\",\"outputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ilk\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MCDSaverProxy","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}