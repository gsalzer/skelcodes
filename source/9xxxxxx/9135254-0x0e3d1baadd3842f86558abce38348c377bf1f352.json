{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n  function balanceOf(address) public view returns (uint);\r\n  function decimals() public view returns (uint);\r\n}\r\n\r\ncontract ERC20Utilities {\r\n  /* Fallback function, don't accept any ETH */\r\n  function() public payable {\r\n    revert(\"ERC20Utilities does not accept payments\");\r\n}\r\n\r\n  function tokenDecimals(address token) public view returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n  \r\n    // is it a contract and does it implement decimals ?\r\n    if (tokenCode > 0 && token.call(bytes4(0x8ee573ac), \"0x0000000000000000000000000000000000000000\")) {\r\n        return Token(token).decimals();      \r\n    } else {\r\n        if (token != address(0x0)) {\r\n            return 0; // ERC20 marks \"decimals\" as optional, so if there's none, return 0 as pow(10,0) is 1\r\n                      // so it at least makes no harm to anything\r\n        } else {\r\n            return 18; // ETH has a hardcoded decimals == 18\r\n        }\r\n    }\r\n}\r\n\r\n  function batchTokenDecimals(address[] tokens) external view returns (uint[]) {\r\n    uint[] memory tokenDecimalsRes = new uint[](tokens.length);\r\n    \r\n    for (uint j = 0; j < tokens.length; j++) {\r\n      uint addrIdx = j;\r\n      tokenDecimalsRes[addrIdx] = tokenDecimals(tokens[j]);\r\n    }  \r\n\r\n    return tokenDecimalsRes;\r\n  }\r\n\r\n  function tokenBalance(address user, address token) public view returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n  \r\n    // is it a contract and does it implement balanceOf \r\n    if (tokenCode > 0 && token.call(bytes4(0x70a08231), user)) {  \r\n        return Token(token).balanceOf(user);      \r\n    } else {\r\n        if (token == address(0x0)) {\r\n            return user.balance;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n  }\r\n  \r\n  function batchTokenBalances(address[] users, address[] tokens) external view returns (uint[]) {\r\n    uint[] memory addrBalances = new uint[](tokens.length * users.length);\r\n    \r\n    for(uint i = 0; i < users.length; i++) {\r\n      for (uint j = 0; j < tokens.length; j++) {\r\n        uint addrIdx = j + tokens.length * i;\r\n        addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);\r\n      }  \r\n    }\r\n  \r\n    return addrBalances;\r\n  }    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchTokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ERC20Utilities","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://14d21e2aa515c255f1868a3b6bc7be4817b73ea5cc6461078fffc40b0bfd7e78"}]}