{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint256 amount) public  returns (bool);\r\n    function burn(uint256 amount) public returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract EgorasVault is Ownable{\r\naddress private egorasEUSDAddress;\r\naddress private egorasCoinddress;\r\nuint    private price;\r\naddress private messenger;\r\n\r\n\r\nusing SafeMath for uint256;\r\n\r\nconstructor(address _egorasEUSDAddress, address _egorasCoinddress, uint _initialPrice) public{\r\n   egorasEUSDAddress = _egorasEUSDAddress;\r\n   egorasCoinddress = _egorasCoinddress;\r\n   price = _initialPrice;\r\n}\r\n\r\nevent generated(address _generator, uint _amount, uint _amountGenerated, string ticker);\r\nevent priceChanged(address initiator, uint _from, uint _to);\r\nevent messengerChanged(address _from, address _to);\r\nmodifier onlyMessenger() {\r\n        require(msg.sender == messenger, \"caller is not a messenger\");\r\n        _;\r\n}\r\n\r\n\r\nfunction generateEgorasEUSD(uint256 _amountOfEgorasCoin) public {\r\nIERC20 egorasEUSD = IERC20(egorasEUSDAddress);\r\nIERC20 egorasCoin = IERC20(egorasCoinddress);\r\nuint amountToGenerate = price.mul(_amountOfEgorasCoin);\r\nrequire(egorasCoin.allowance(msg.sender, address(this)) >= _amountOfEgorasCoin, \"Fail to tranfer fund\");\r\nrequire(egorasCoin.transferFrom(msg.sender, address(this), _amountOfEgorasCoin), \"Fail to tranfer fund\");\r\nrequire(egorasEUSD.mint(msg.sender, amountToGenerate.div(10 ** 18)), \"Fail to generate fund\");\r\nemit generated(msg.sender, _amountOfEgorasCoin, amountToGenerate.div(10 ** 18), \"EGR\");\r\n}\r\n\r\nfunction generateEgorasCoin(uint256 _amountOfEgorasEUSD) public{\r\n    IERC20 egorasEUSD = IERC20(egorasEUSDAddress);\r\n    IERC20 egorasCoin = IERC20(egorasCoinddress);\r\n    uint amountToGenerate = _amountOfEgorasEUSD.div(price).mul(10 ** 18);\r\n    require(egorasEUSD.allowance(msg.sender, address(this)) >= _amountOfEgorasEUSD, \"Fail to tranfer fund #1\");\r\n    require(egorasCoin.balanceOf(address(this)) >= amountToGenerate, \"Insufficient vault balance\");\r\n    require(egorasCoin.transfer(msg.sender, amountToGenerate), \"Fail to generate fund #4\");\r\n    require(egorasEUSD.transferFrom(msg.sender, address(this), _amountOfEgorasEUSD), \"Fail to burn fund #5\");\r\n    emit generated(msg.sender, _amountOfEgorasEUSD, amountToGenerate, \"EUSD\");\r\n        \r\n   \r\n}\r\n\r\n\r\nfunction updatePrice(uint256 _price) public onlyMessenger{\r\n    uint256 currentprice = price;\r\n    price = _price;\r\n    emit priceChanged(msg.sender, currentprice, _price);\r\n}\r\n\r\nfunction setMessenger(address _messenger) public onlyOwner{\r\n    address currentMessenger = messenger;\r\n    messenger = _messenger;\r\n    emit messengerChanged(currentMessenger, _messenger);\r\n}\r\n\r\nfunction emptyVault() public onlyOwner{\r\n    IERC20 egorasCoin = IERC20(egorasCoinddress);\r\n    require(egorasCoin.transfer(owner(), egorasCoin.balanceOf(address(this))), \"Fail to empty vault\");\r\n}\r\n\r\nfunction burnVault() public onlyOwner{\r\n    IERC20 egorasEUSD = IERC20(egorasEUSDAddress);\r\n    require(egorasEUSD.burn(egorasEUSD.balanceOf(address(this))), \"Fail to empty vault\");\r\n}\r\n\r\nfunction getPrice() public view returns (uint256 _price) {\r\n   return price;\r\n}\r\n     function setEgorasEusd(address _egorasEUSDAddress) public onlyOwner{\r\n     egorasEUSDAddress = _egorasEUSDAddress;\r\n    }\r\n\r\n     function setEgorasCoin(address _egorasCoinddress) public onlyOwner{\r\n     egorasCoinddress = _egorasCoinddress;\r\n    }\r\n\r\n    function getCoinAddresses() public view returns (address _egorasCoinddress, address _egorasEUSDAddress) {\r\n        return(egorasCoinddress, egorasEUSDAddress);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_egorasEUSDAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_egorasCoinddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_generator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountGenerated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"generated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"messengerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"priceChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfEgorasEUSD\",\"type\":\"uint256\"}],\"name\":\"generateEgorasCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfEgorasCoin\",\"type\":\"uint256\"}],\"name\":\"generateEgorasEUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_egorasCoinddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_egorasEUSDAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_egorasCoinddress\",\"type\":\"address\"}],\"name\":\"setEgorasCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_egorasEUSDAddress\",\"type\":\"address\"}],\"name\":\"setEgorasEusd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messenger\",\"type\":\"address\"}],\"name\":\"setMessenger\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EgorasVault","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a90c43e0d6c92b8e6171a829beb38be28a0ad07300000000000000000000000073cee8348b9bdd48c64e13452b8a6fbc81630573000000000000000000000000000000000000000000000000000069f4c51dc800","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3c8dbd6c1144f2c45fc23d5d8459370d609211573fb309a71708412b0a19f942"}]}