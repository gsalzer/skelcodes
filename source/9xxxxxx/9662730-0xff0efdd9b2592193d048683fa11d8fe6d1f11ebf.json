{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\ntelegram: @gida\r\nhashtag: #gida_corp\r\n*/\r\npragma solidity ^0.5.7;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public manager;\r\n  address public introducer;\r\n  address public ownerWallet1;\r\n  address public ownerWallet2;\r\n  address public ownerWallet3;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    manager = msg.sender;\r\n    ownerWallet1 = 0x42910288DcD576aE8574D611575Dfe35D9fA2Aa2;\r\n    ownerWallet2 = 0xc40A767980fe384BBc367A8A0EeFF2BCC871A6c9;\r\n    ownerWallet3 = 0x7c734D78a247A5eE3f9A64cE061DB270A7cFeF37;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"only for owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrManager() {\r\n     require((msg.sender == owner)||(msg.sender == manager), \"only for owner or manager\");\r\n      _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    owner = newOwner;\r\n  }\r\n\r\n  function setManager(address _manager) public onlyOwnerOrManager {\r\n      manager = _manager;\r\n  }\r\n}\r\n\r\ncontract Gida is Ownable {\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event consoleEvent(uint _msg);\r\n    event recoverPasswordEvent(address indexed _user, uint _time);\r\n    event paymentRejectedEvent(string _message, address indexed _user);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getIntroducerMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time, uint amount);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time, uint amount);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time, uint amount);\r\n    //------------------------------\r\n\r\n    mapping (uint => uint) public LEVEL_PRICE;\r\n    uint REFERRER_1_LEVEL_LIMIT = 3;\r\n    uint RECOVER_PASSWORD = 0.01 ether;\r\n    uint PERIOD_LENGTH = 90 days;\r\n\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        uint introducerID;\r\n        address[] referral;\r\n        mapping (uint => uint) levelExpired;\r\n    }\r\n\r\n    mapping (address => UserStruct) public users;\r\n    mapping (uint => address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n\r\n\r\n\r\n    constructor() public {\r\n\r\n        LEVEL_PRICE[1] =  0.12 ether;\r\n\t\tLEVEL_PRICE[2] =  0.3 ether;\r\n\t\tLEVEL_PRICE[3] =  1 ether;\r\n\t\tLEVEL_PRICE[4] =  3 ether;\r\n\t\tLEVEL_PRICE[5] =  10 ether;\r\n\t\tLEVEL_PRICE[6] =  4 ether;\r\n\t\tLEVEL_PRICE[7] =  11 ether;\r\n\t\tLEVEL_PRICE[8] =  30 ether;\r\n\t\tLEVEL_PRICE[9] =  90 ether;\r\n\t\tLEVEL_PRICE[10] = 300 ether;\r\n\t\t\r\n        UserStruct memory userStruct1;\r\n        UserStruct memory userStruct2;\r\n        UserStruct memory userStruct3;\r\n        currUserID++;\r\n\r\n        userStruct1 = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            introducerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet1] = userStruct1;\r\n        userList[currUserID] = ownerWallet1;\r\n\r\n        users[ownerWallet1].levelExpired[1] = 77777777777;\r\n        users[ownerWallet1].levelExpired[2] = 77777777777;\r\n        users[ownerWallet1].levelExpired[3] = 77777777777;\r\n        users[ownerWallet1].levelExpired[4] = 77777777777;\r\n        users[ownerWallet1].levelExpired[5] = 77777777777;\r\n        users[ownerWallet1].levelExpired[6] = 77777777777;\r\n        users[ownerWallet1].levelExpired[7] = 77777777777;\r\n        users[ownerWallet1].levelExpired[8] = 77777777777;\r\n        users[ownerWallet1].levelExpired[9] = 77777777777;\r\n        users[ownerWallet1].levelExpired[10] = 77777777777;\r\n\t\t\r\n        currUserID++;\r\n\r\n        userStruct2 = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            introducerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet2] = userStruct2;\r\n        userList[currUserID] = ownerWallet2;\r\n\r\n        users[ownerWallet2].levelExpired[1] = 77777777777;\r\n        users[ownerWallet2].levelExpired[2] = 77777777777;\r\n        users[ownerWallet2].levelExpired[3] = 77777777777;\r\n        users[ownerWallet2].levelExpired[4] = 77777777777;\r\n        users[ownerWallet2].levelExpired[5] = 77777777777;\r\n        users[ownerWallet2].levelExpired[6] = 77777777777;\r\n        users[ownerWallet2].levelExpired[7] = 77777777777;\r\n        users[ownerWallet2].levelExpired[8] = 77777777777;\r\n        users[ownerWallet2].levelExpired[9] = 77777777777;\r\n        users[ownerWallet2].levelExpired[10] = 77777777777;\r\n\t\t\r\n\t\tcurrUserID++;\r\n\r\n        userStruct3 = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : 0,\r\n            introducerID : 0,\r\n            referral : new address[](0)\r\n        });\r\n        users[ownerWallet3] = userStruct3;\r\n        userList[currUserID] = ownerWallet3;\r\n\r\n        users[ownerWallet3].levelExpired[1] = 77777777777;\r\n        users[ownerWallet3].levelExpired[2] = 77777777777;\r\n        users[ownerWallet3].levelExpired[3] = 77777777777;\r\n        users[ownerWallet3].levelExpired[4] = 77777777777;\r\n        users[ownerWallet3].levelExpired[5] = 77777777777;\r\n        users[ownerWallet3].levelExpired[6] = 77777777777;\r\n        users[ownerWallet3].levelExpired[7] = 77777777777;\r\n        users[ownerWallet3].levelExpired[8] = 77777777777;\r\n        users[ownerWallet3].levelExpired[9] = 77777777777;\r\n        users[ownerWallet3].levelExpired[10] = 77777777777;\r\n    }\r\n\r\n    function () external payable {\r\n\r\n        uint level;\r\n        uint passwordRecovery = 0;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]){\r\n            level = 1;\r\n        }else if(msg.value == LEVEL_PRICE[2]){\r\n            level = 2;\r\n        }else if(msg.value == LEVEL_PRICE[3]){\r\n            level = 3;\r\n        }else if(msg.value == LEVEL_PRICE[4]){\r\n            level = 4;\r\n        }else if(msg.value == LEVEL_PRICE[5]){\r\n            level = 5;\r\n        }else if(msg.value == LEVEL_PRICE[6]){\r\n            level = 6;\r\n        }else if(msg.value == LEVEL_PRICE[7]){\r\n            level = 7;\r\n        }else if(msg.value == LEVEL_PRICE[8]){\r\n            level = 8;\r\n        }else if(msg.value == LEVEL_PRICE[9]){\r\n            level = 9;\r\n        }else if(msg.value == LEVEL_PRICE[10]){\r\n            level = 10;\r\n        }else if(msg.value == RECOVER_PASSWORD){\r\n            passwordRecovery = 1;\r\n        }else {\r\n\t\t\temit paymentRejectedEvent('Incorrect Value send', msg.sender);\r\n            revert('Incorrect Value send');\r\n        }\r\n\r\n        if(users[msg.sender].isExist){\r\n\t\t\tif(passwordRecovery==1){\r\n\t\t\t\temit recoverPasswordEvent(msg.sender, now);\r\n\t\t\t}else{\r\n\t\t\t\tbuyLevel(level);\r\n\t\t\t}\r\n        } else if(level == 1) {\r\n\t\t\tif(passwordRecovery==0){\r\n\t\t\t\t\r\n\t\t\t\tuint refId = 0;\r\n\t\t\t\taddress referrer = bytesToAddress(msg.data);\r\n\t\t\r\n\t\t\t\tif (users[referrer].isExist){\r\n\t\t\t\t\trefId = users[referrer].id;\r\n\t\t\t\t} else {\r\n\t\t\t\t\temit paymentRejectedEvent('Incorrect referrer', msg.sender);\r\n\t\t\t\t\trevert('Incorrect referrer');\r\n\t\t\t\t}\r\n\t\t\t\tregUser(refId);\r\n\t\t\t}else{\r\n\t\t\t\temit paymentRejectedEvent('User does not exist to recover password.', msg.sender);\r\n\t\t\t\trevert('User does not exist to recover password.');\r\n\t\t\t}\r\n        } else {\r\n\t\t\temit paymentRejectedEvent('Please buy first level for 0.12 ETH', msg.sender);\r\n            revert('Please buy first level for 0.12 ETH');\r\n        }\r\n    }\r\n\r\n    function regUser(uint _introducerID) public payable {\r\n\t    uint _referrerID;\r\n        require(!users[msg.sender].isExist, 'User exist');\r\n\r\n        require(_introducerID > 0 && _introducerID <= currUserID, 'Incorrect referrer Id');\r\n\r\n        require(msg.value==LEVEL_PRICE[1], 'Incorrect Value');\r\n\r\n\t\t/* Default will be introducer, if 3 limit not reached */\r\n\t\t_referrerID = _introducerID;\r\n        if(users[userList[_introducerID]].referral.length >= REFERRER_1_LEVEL_LIMIT)\r\n        {\r\n            _referrerID = users[findFreeReferrer(userList[_introducerID])].id;\r\n        }\r\n\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist : true,\r\n            id : currUserID,\r\n            referrerID : _referrerID,\r\n            introducerID : _introducerID,\r\n            referral : new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;\r\n        users[msg.sender].levelExpired[2] = 0;\r\n        users[msg.sender].levelExpired[3] = 0;\r\n        users[msg.sender].levelExpired[4] = 0;\r\n        users[msg.sender].levelExpired[5] = 0;\r\n        users[msg.sender].levelExpired[6] = 0;\r\n        users[msg.sender].levelExpired[7] = 0;\r\n        users[msg.sender].levelExpired[8] = 0;\r\n        users[msg.sender].levelExpired[9] = 0;\r\n        users[msg.sender].levelExpired[10] = 0;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, 'User not exist');\r\n\r\n        require( _level>0 && _level<=10, 'Incorrect level');\r\n\r\n        if(_level == 1){\r\n            require(msg.value==LEVEL_PRICE[1], 'Incorrect Value');\r\n            users[msg.sender].levelExpired[1] += PERIOD_LENGTH;\r\n        } else {\r\n            require(msg.value==LEVEL_PRICE[_level], 'Incorrect Value');\r\n\r\n            for(uint l =_level-1; l>0; l-- ){\r\n                require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');\r\n            }\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0){\r\n                users[msg.sender].levelExpired[_level] = now + PERIOD_LENGTH;\r\n            } else {\r\n                users[msg.sender].levelExpired[_level] += PERIOD_LENGTH;\r\n            }\r\n        }\r\n        payForLevel(_level, msg.sender);\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n        if(_level == 1 || _level == 6){\r\n            referer = userList[users[_user].referrerID];\r\n        } else if(_level == 2 || _level == 7){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        } else if(_level == 3 || _level == 8){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        } else if(_level == 4 || _level == 9){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        } else if(_level == 5 || _level == 10){\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer = userList[users[referer4].referrerID];\r\n        }\r\n\t\t\r\n\t\tintroducer = userList[users[msg.sender].introducerID];\r\n\t\t\r\n\t\t/* Split amount and send comission to admins */\r\n\t\tuint level;\r\n\t\tuint introducerlevel;\r\n\t\tuint firstAdminPart;\r\n\t\tuint finalToAdmin;\r\n\t\tuint introducerPart;\r\n\t\tuint refererPart;\r\n\t\tbool result;\r\n\t\t\r\n\t\tlevel\t=\t_level;\r\n\t\t\r\n\t\tif(_level==1){\r\n\t\t\tintroducerPart \t\t\t=\t0.02 ether; /* introducer will get 0.02*/\r\n\t\t\trefererPart \t\t\t=\t0.1 ether; /* remaining 0.1 will go to referer*/\r\n\t\t\t\r\n\t\t}else{\r\n\t\t\tfirstAdminPart \t\t\t=\t(msg.value * 3)/100; /* 3% will go to admin*/\r\n\t\t\tintroducerPart \t\t\t=\t(msg.value * 15)/100; /* introducer will get 15%*/\r\n\t\t\trefererPart \t\t\t=\tmsg.value - (firstAdminPart + introducerPart); /* remaining 82% will go to referer*/\r\n\t\t}\r\n\t\t\r\n\t\tintroducerlevel\t=\t0;\r\n\t\t\r\n\t\tfor(uint l = _level; l <= 10; l++ ){\r\n\t\t\tif(users[introducer].levelExpired[l] >= now){\r\n\t\t\t\tintroducerlevel\t=\tl;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        if(!users[referer].isExist){\r\n\t\t\tfinalToAdmin\t=\tmsg.value;\r\n\t\t\tif(users[introducer].isExist && _level>1){\r\n\t\t\t\t\r\n\t\t\t\tif(introducerlevel >= _level){\r\n\t\t\t\t\tif(userList[1] != introducer && userList[2] != introducer){\r\n\t\t\t\t\t\tresult = address(uint160(introducer)).send(introducerPart);\r\n\t\t\t\t\t\tfinalToAdmin\t=\tfinalToAdmin-introducerPart;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfirstAdminPart\t=\tfirstAdminPart+introducerPart;\r\n\t\t\t\t}\r\n\t\t\t\ttransferToAdmin3(firstAdminPart, msg.sender, level);\r\n\t\t\t\tfinalToAdmin\t=\tfinalToAdmin-firstAdminPart;\r\n\t\t\t}\r\n\t\t\t/* If referer not exist then transfer amount to admins */\r\n\t\t\ttransferToAdmins(finalToAdmin, msg.sender, level);\r\n        }else{\r\n\t\t\t\r\n\t\t\t/* Admins are referer */\r\n\t\t\tif(userList[1]==referer || userList[2]==referer ){\r\n\t\t\t\tfinalToAdmin\t=\tmsg.value;\r\n\t\t\t\tif(users[introducer].isExist && _level>1){\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(introducerlevel >= _level){\r\n\t\t\t\t\t\tif(userList[1] != introducer && userList[2] != introducer){\r\n\t\t\t\t\t\t\tresult = address(uint160(introducer)).send(introducerPart);\r\n\t\t\t\t\t\t\tfinalToAdmin\t=\tfinalToAdmin-introducerPart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tfirstAdminPart\t=\tfirstAdminPart+introducerPart;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttransferToAdmin3(firstAdminPart, msg.sender, level);\r\n\t\t\t\t\tfinalToAdmin\t=\tfinalToAdmin-firstAdminPart;\r\n\t\t\t\t}\r\n\t\t\t\t/* If referer not exist then transfer amount to admins */\r\n\t\t\t\ttransferToAdmins(finalToAdmin, msg.sender, level);\r\n\t\t\t}else{\r\n\t\t\t\t\r\n\t\t\t\tif(users[referer].levelExpired[level] >= now ){\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(level>1){\r\n\t\t\t\t\t\tif(introducerlevel >= level){\r\n\t\t\t\t\t\t\tresult = address(uint160(introducer)).send(introducerPart);\r\n\t\t\t\t\t\t\temit getIntroducerMoneyForLevelEvent(introducer, msg.sender, level, now, introducerPart);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tfirstAdminPart\t=\tfirstAdminPart+introducerPart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult = address(uint160(referer)).send(refererPart);\r\n\t\t\t\t\t\ttransferToAdmin3(firstAdminPart, msg.sender, level);\r\n\t\t\t\t\t\temit getMoneyForLevelEvent(referer, msg.sender, level, now, refererPart);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tresult \t\t= \taddress(uint160(introducer)).send(introducerPart);\r\n\t\t\t\t\t\temit getIntroducerMoneyForLevelEvent(introducer, msg.sender, level, now, introducerPart);\r\n\t\t\t\t\t\tresult \t\t= \taddress(uint160(referer)).send(refererPart);\r\n\t\t\t\t\t\temit getMoneyForLevelEvent(referer, msg.sender, level, now, refererPart);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\temit lostMoneyForLevelEvent(referer, msg.sender, level, now, refererPart);\r\n\t\t\t\t\tpayForLevel(level,referer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\r\n\tfunction transferToAdmins(uint amount, address _sender, uint _level) public payable returns(bool) {\r\n\t\t\r\n\t\tuint firstPart;\r\n\t\tuint secondPart;\r\n\t\t\r\n\t\tfirstPart \t=\t(amount*70)/100; /* 70% will go to first admin*/\r\n\t\tsecondPart =\tamount-firstPart; /* remaining 30% will go to second admin*/\r\n\t\ttransferToAdmin1(firstPart, _sender, _level);\r\n\t\ttransferToAdmin2(secondPart, _sender, _level);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction transferToAdmin1(uint amount, address _sender, uint _level) public payable returns(bool) {\r\n\t\taddress admin1;\r\n\t\tbool result1;\r\n\t\tadmin1 = userList[1];\r\n\t\tresult1 = address(uint160(admin1)).send(amount);\r\n\t\temit getMoneyForLevelEvent(admin1, _sender, _level, now, amount);\r\n\t\treturn result1;\r\n\t}\r\n\t\r\n\tfunction transferToAdmin2(uint amount, address _sender, uint _level) public payable returns(bool) {\r\n\t\taddress admin2;\r\n\t\tbool result2;\r\n\t\tadmin2 = userList[2];\r\n\t\tresult2 = address(uint160(admin2)).send(amount);\r\n\t\temit getMoneyForLevelEvent(admin2, _sender, _level, now, amount);\r\n\t\treturn result2;\r\n\t}\r\n\t\r\n\tfunction transferToAdmin3(uint amount, address _sender, uint _level) public payable returns(bool) {\r\n\t\taddress admin2;\r\n\t\tbool result2;\r\n\t\tadmin2 = userList[3];\r\n\t\tresult2 = address(uint160(admin2)).send(amount);\r\n\t\temit getMoneyForLevelEvent(admin2, _sender, _level, now, amount);\r\n\t\treturn result2;\r\n\t}\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length < REFERRER_1_LEVEL_LIMIT){\r\n            return _user;\r\n        }\r\n\r\n        address[] memory referrals = new address[](363);\r\n        referrals[0] = users[_user].referral[0]; \r\n        referrals[1] = users[_user].referral[1];\r\n        referrals[2] = users[_user].referral[2];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i =0; i<363;i++){\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT){\r\n                if(i<120){\r\n                    referrals[(i+1)*3] = users[referrals[i]].referral[0];\r\n                    referrals[(i+1)*3+1] = users[referrals[i]].referral[1];\r\n                    referrals[(i+1)*3+2] = users[referrals[i]].referral[2];\r\n                }\r\n            }else{\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, 'No Free Referrer');\r\n        return freeReferrer;\r\n\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n    function bytesToAddress(bytes memory bys) private pure returns (address  addr ) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"transferToAdmin2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_introducerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"transferToAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"isExist\",\"type\":\"bool\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"introducerID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"transferToAdmin1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"transferToAdmin3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"introducer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_msg\",\"type\":\"uint256\"}],\"name\":\"consoleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"recoverPasswordEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_message\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"paymentRejectedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"buyLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"prolongateLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getIntroducerMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getMoneyForLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lostMoneyForLevelEvent\",\"type\":\"event\"}]","ContractName":"Gida","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0652816413bceb24a5758ca7a5b8ee0deebdef262b8945f0e045eb3deb19b7c5"}]}