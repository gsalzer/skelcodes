{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interfaces/IBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) external view returns (bool);\r\n    function requiredSignatures() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ValidatorStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ValidatorStorage {\r\n    bytes32 internal constant VALIDATOR_CONTRACT = 0x5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe; // keccak256(abi.encodePacked(\"validatorContract\"))\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Validatable is EternalStorage, ValidatorStorage {\r\n    function validatorContract() public view returns (IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[VALIDATOR_CONTRACT]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function requiredSignatures() public view returns (uint256) {\r\n        return validatorContract().requiredSignatures();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\nlibrary Message {\r\n    // function uintToString(uint256 inputValue) internal pure returns (string) {\r\n    //     // figure out the length of the resulting string\r\n    //     uint256 length = 0;\r\n    //     uint256 currentValue = inputValue;\r\n    //     do {\r\n    //         length++;\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     // allocate enough memory\r\n    //     bytes memory result = new bytes(length);\r\n    //     // construct the string backwards\r\n    //     uint256 i = length - 1;\r\n    //     currentValue = inputValue;\r\n    //     do {\r\n    //         result[i--] = byte(48 + currentValue % 10);\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     return string(result);\r\n    // }\r\n\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 104: 20 bytes :: address - contract address to prevent double spending\r\n\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 bytes (most of them zeros) followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns (address recipient, uint256 amount, bytes32 txHash, address contractAddress)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := mload(add(message, 20))\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n            contractAddress := mload(add(message, 104))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns (bool) {\r\n        return _msg.length == requiredMessageLength();\r\n    }\r\n\r\n    function requiredMessageLength() internal pure returns (uint256) {\r\n        return 104;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message, bool isAMBMessage)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        return ecrecover(hashMessage(message, isAMBMessage), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message, bool isAMBMessage) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        if (isAMBMessage) {\r\n            return keccak256(abi.encodePacked(prefix, uintToString(message.length), message));\r\n        } else {\r\n            string memory msgLength = \"104\";\r\n            return keccak256(abi.encodePacked(prefix, msgLength, message));\r\n        }\r\n    }\r\n\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IBridgeValidators _validatorContract,\r\n        bool isAMBMessage\r\n    ) internal view {\r\n        require(isAMBMessage || (!isAMBMessage && isMessageValid(_message)));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        // It is not necessary to check that arrays have the same length since it will be handled\r\n        // during attempt to access to the corresponding elements in the loop and the call will be reverted.\r\n        // It will save gas for the rational validators actions and still be safe enough from security point of view\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message, isAMBMessage);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            require(!addressArrayContains(encounteredAddresses, recoveredAddress));\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        bytes _signatures,\r\n        IBridgeValidators _validatorContract,\r\n        bool isAMBMessage\r\n    ) internal view {\r\n        require(isAMBMessage || (!isAMBMessage && isMessageValid(_message)));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        uint8 amount;\r\n        assembly {\r\n            amount := mload(add(_signatures, 1))\r\n        }\r\n        require(amount >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message, isAMBMessage);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            uint8 v;\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint256 posr = 33 + amount + 32 * i;\r\n            uint256 poss = posr + 32 * amount;\r\n            assembly {\r\n                v := mload(add(_signatures, add(2, i)))\r\n                r := mload(add(_signatures, posr))\r\n                s := mload(add(_signatures, poss))\r\n            }\r\n\r\n            address recoveredAddress = ecrecover(hash, v, r, s);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            require(!addressArrayContains(encounteredAddresses, recoveredAddress));\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function uintToString(uint256 i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint256 j = i;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = bytes1(48 + (i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicTokenBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract BasicTokenBridge is EternalStorage, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event DailyLimitChanged(uint256 newLimit);\r\n    event ExecutionDailyLimitChanged(uint256 newLimit);\r\n\r\n    bytes32 internal constant MIN_PER_TX = 0xbbb088c505d18e049d114c7c91f11724e69c55ad6c5397e2b929e68b41fa05d1; // keccak256(abi.encodePacked(\"minPerTx\"))\r\n    bytes32 internal constant MAX_PER_TX = 0x0f8803acad17c63ee38bf2de71e1888bc7a079a6f73658e274b08018bea4e29c; // keccak256(abi.encodePacked(\"maxPerTx\"))\r\n    bytes32 internal constant DAILY_LIMIT = 0x4a6a899679f26b73530d8cf1001e83b6f7702e04b6fdb98f3c62dc7e47e041a5; // keccak256(abi.encodePacked(\"dailyLimit\"))\r\n    bytes32 internal constant EXECUTION_MAX_PER_TX = 0xc0ed44c192c86d1cc1ba51340b032c2766b4a2b0041031de13c46dd7104888d5; // keccak256(abi.encodePacked(\"executionMaxPerTx\"))\r\n    bytes32 internal constant EXECUTION_DAILY_LIMIT = 0x21dbcab260e413c20dc13c28b7db95e2b423d1135f42bb8b7d5214a92270d237; // keccak256(abi.encodePacked(\"executionDailyLimit\"))\r\n    bytes32 internal constant DECIMAL_SHIFT = 0x1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee5; // keccak256(abi.encodePacked(\"decimalShift\"))\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\r\n    }\r\n\r\n    function totalExecutedPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))];\r\n    }\r\n\r\n    function dailyLimit() public view returns (uint256) {\r\n        return uintStorage[DAILY_LIMIT];\r\n    }\r\n\r\n    function executionDailyLimit() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_DAILY_LIMIT];\r\n    }\r\n\r\n    function maxPerTx() public view returns (uint256) {\r\n        return uintStorage[MAX_PER_TX];\r\n    }\r\n\r\n    function executionMaxPerTx() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_MAX_PER_TX];\r\n    }\r\n\r\n    function minPerTx() public view returns (uint256) {\r\n        return uintStorage[MIN_PER_TX];\r\n    }\r\n\r\n    function decimalShift() public view returns (uint256) {\r\n        return uintStorage[DECIMAL_SHIFT];\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function withinExecutionLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\r\n        return executionDailyLimit() >= nextLimit && _amount <= executionMaxPerTx();\r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint256) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return now / 1 days;\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function setTotalExecutedPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function setDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > maxPerTx() || _dailyLimit == 0);\r\n        uintStorage[DAILY_LIMIT] = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > executionMaxPerTx() || _dailyLimit == 0);\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _dailyLimit;\r\n        emit ExecutionDailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < executionDailyLimit());\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < dailyLimit());\r\n        uintStorage[MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx < dailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[MIN_PER_TX] = _minPerTx;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/MessageRelay.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract MessageRelay is EternalStorage {\r\n    function relayedMessages(bytes32 _txHash) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))];\r\n    }\r\n\r\n    function setRelayedMessages(bytes32 _txHash, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))] = _status;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Upgradeable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Upgradeable {\r\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfUpgradeabilityOwner() {\r\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/InitializableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract InitializableBridge is Initializable {\r\n    bytes32 internal constant DEPLOYED_AT_BLOCK = 0xb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b0; // keccak256(abi.encodePacked(\"deployedAtBlock\"))\r\n\r\n    function deployedAtBlock() external view returns (uint256) {\r\n        return uintStorage[DEPLOYED_AT_BLOCK];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Claimable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract Claimable {\r\n    bytes4 internal constant TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n\r\n    modifier validAddress(address _to) {\r\n        require(_to != address(0));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function claimValues(address _token, address _to) internal {\r\n        if (_token == address(0)) {\r\n            claimNativeCoins(_to);\r\n        } else {\r\n            claimErc20Tokens(_token, _to);\r\n        }\r\n    }\r\n\r\n    function claimNativeCoins(address _to) internal {\r\n        uint256 value = address(this).balance;\r\n        if (!_to.send(value)) {\r\n            (new Sacrifice).value(value)(_to);\r\n        }\r\n    }\r\n\r\n    function claimErc20Tokens(address _token, address _to) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        safeTransfer(_token, _to, balance);\r\n    }\r\n\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        bytes memory returnData;\r\n        bool returnDataResult;\r\n        bytes memory callData = abi.encodeWithSelector(TRANSFER, _to, _value);\r\n        assembly {\r\n            let result := call(gas, _token, 0x0, add(callData, 0x20), mload(callData), 0, 32)\r\n            returnData := mload(0)\r\n            returnDataResult := mload(0)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n\r\n        // Return data is optional\r\n        if (returnData.length > 0) {\r\n            require(returnDataResult);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/VersionableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract VersionableBridge {\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (2, 5, 0);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function getBridgeMode() external pure returns (bytes4);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicBridge is InitializableBridge, Validatable, Ownable, Upgradeable, Claimable, VersionableBridge {\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n\r\n    bytes32 internal constant GAS_PRICE = 0x55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b; // keccak256(abi.encodePacked(\"gasPrice\"))\r\n    bytes32 internal constant REQUIRED_BLOCK_CONFIRMATIONS = 0x916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071; // keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))\r\n\r\n    function setGasPrice(uint256 _gasPrice) external onlyOwner {\r\n        require(_gasPrice > 0);\r\n        uintStorage[GAS_PRICE] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() external view returns (uint256) {\r\n        return uintStorage[GAS_PRICE];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) external onlyOwner {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[REQUIRED_BLOCK_CONFIRMATIONS] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() external view returns (uint256) {\r\n        return uintStorage[REQUIRED_BLOCK_CONFIRMATIONS];\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyIfUpgradeabilityOwner validAddress(_to) {\r\n        claimValues(_token, _to);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicForeignBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicForeignBridge is EternalStorage, Validatable, BasicBridge, BasicTokenBridge, MessageRelay {\r\n    /// triggered when relay of deposit from HomeBridge is complete\r\n    event RelayedMessage(address recipient, uint256 value, bytes32 transactionHash);\r\n    event UserRequestForAffirmation(address recipient, uint256 value);\r\n\r\n    function executeSignatures(uint8[] vs, bytes32[] rs, bytes32[] ss, bytes message) external {\r\n        Message.hasEnoughValidSignatures(message, vs, rs, ss, validatorContract(), false);\r\n        address recipient;\r\n        uint256 amount;\r\n        bytes32 txHash;\r\n        address contractAddress;\r\n        (recipient, amount, txHash, contractAddress) = Message.parseMessage(message);\r\n        if (withinExecutionLimit(amount)) {\r\n            require(contractAddress == address(this));\r\n            require(!relayedMessages(txHash));\r\n            setRelayedMessages(txHash, true);\r\n            require(onExecuteMessage(recipient, amount, txHash));\r\n            emit RelayedMessage(recipient, amount, txHash);\r\n        } else {\r\n            onFailedMessage(recipient, amount, txHash);\r\n        }\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function onExecuteMessage(address, uint256, bytes32) internal returns (bool);\r\n\r\n    /* solcov ignore next */\r\n    function onFailedMessage(address, uint256, bytes32) internal;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ERC20Bridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ERC20Bridge is BasicForeignBridge {\r\n    bytes32 internal constant ERC20_TOKEN = 0x15d63b18dbc21bf4438b7972d80076747e1d93c4f87552fe498c90cbde51665e; // keccak256(abi.encodePacked(\"erc20token\"))\r\n\r\n    function erc20token() public view returns (ERC20) {\r\n        return ERC20(addressStorage[ERC20_TOKEN]);\r\n    }\r\n\r\n    function setErc20token(address _token) internal {\r\n        require(AddressUtils.isContract(_token));\r\n        addressStorage[ERC20_TOKEN] = _token;\r\n    }\r\n\r\n    function _relayTokens(address _sender, address _receiver, uint256 _amount) internal {\r\n        require(_receiver != address(0));\r\n        require(_receiver != address(this));\r\n        require(_amount > 0);\r\n        require(withinLimit(_amount));\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_amount));\r\n\r\n        erc20token().transferFrom(_sender, address(this), _amount);\r\n        emit UserRequestForAffirmation(_receiver, _amount);\r\n    }\r\n\r\n    function relayTokens(address _from, address _receiver, uint256 _amount) external {\r\n        require(_from == msg.sender || _from == _receiver);\r\n        _relayTokens(_from, _receiver, _amount);\r\n    }\r\n\r\n    function relayTokens(address _receiver, uint256 _amount) external {\r\n        _relayTokens(msg.sender, _receiver, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/OtherSideBridgeStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract OtherSideBridgeStorage is EternalStorage {\r\n    bytes32 internal constant BRIDGE_CONTRACT = 0x71483949fe7a14d16644d63320f24d10cf1d60abecc30cc677a340e82b699dd2; // keccak256(abi.encodePacked(\"bridgeOnOtherSide\"))\r\n\r\n    function _setBridgeContractOnOtherSide(address _bridgeContract) internal {\r\n        addressStorage[BRIDGE_CONTRACT] = _bridgeContract;\r\n    }\r\n\r\n    function bridgeContractOnOtherSide() internal view returns (address) {\r\n        return addressStorage[BRIDGE_CONTRACT];\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IScdMcdMigration.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IScdMcdMigration {\r\n    function swapSaiToDai(uint256 wad) external;\r\n    function daiJoin() external returns (address);\r\n}\r\n\r\ninterface IDaiAdapter {\r\n    function dai() public returns (address);\r\n}\r\n\r\ninterface ISaiTop {\r\n    function caged() public returns (uint256);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/erc20_to_native/ForeignBridgeErcToNative.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract ForeignBridgeErcToNative is BasicForeignBridge, ERC20Bridge, OtherSideBridgeStorage {\r\n    event TokensSwapped(address indexed from, address indexed to, uint256 value);\r\n\r\n    bytes32 internal constant MIN_HDTOKEN_BALANCE = 0x48649cf195feb695632309f41e61252b09f537943654bde13eb7bb1bca06964e; // keccak256(abi.encodePacked(\"minHDTokenBalance\"))\r\n    bytes4 internal constant SWAP_TOKENS = 0x73d00224; // swapTokens()\r\n\r\n    function initialize(\r\n        address _validatorContract,\r\n        address _erc20token,\r\n        uint256 _requiredBlockConfirmations,\r\n        uint256 _gasPrice,\r\n        uint256[] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = _dailyLimit, 1 = _maxPerTx, 2 = _minPerTx ]\r\n        uint256[] _homeDailyLimitHomeMaxPerTxArray, //[ 0 = _homeDailyLimit, 1 = _homeMaxPerTx ]\r\n        address _owner,\r\n        uint256 _decimalShift,\r\n        address _bridgeOnOtherSide\r\n    ) external returns (bool) {\r\n        require(!isInitialized());\r\n        require(AddressUtils.isContract(_validatorContract));\r\n        require(_requiredBlockConfirmations != 0);\r\n        require(_gasPrice > 0);\r\n        require(\r\n            _dailyLimitMaxPerTxMinPerTxArray[2] > 0 && // _minPerTx > 0\r\n                _dailyLimitMaxPerTxMinPerTxArray[1] > _dailyLimitMaxPerTxMinPerTxArray[2] && // _maxPerTx > _minPerTx\r\n                _dailyLimitMaxPerTxMinPerTxArray[0] > _dailyLimitMaxPerTxMinPerTxArray[1] // _dailyLimit > _maxPerTx\r\n        );\r\n        require(_homeDailyLimitHomeMaxPerTxArray[1] < _homeDailyLimitHomeMaxPerTxArray[0]); // _homeMaxPerTx < _homeDailyLimit\r\n        require(_owner != address(0));\r\n        require(_bridgeOnOtherSide != address(0));\r\n\r\n        addressStorage[VALIDATOR_CONTRACT] = _validatorContract;\r\n        setErc20token(_erc20token);\r\n        uintStorage[DEPLOYED_AT_BLOCK] = block.number;\r\n        uintStorage[REQUIRED_BLOCK_CONFIRMATIONS] = _requiredBlockConfirmations;\r\n        uintStorage[GAS_PRICE] = _gasPrice;\r\n        uintStorage[DAILY_LIMIT] = _dailyLimitMaxPerTxMinPerTxArray[0];\r\n        uintStorage[MAX_PER_TX] = _dailyLimitMaxPerTxMinPerTxArray[1];\r\n        uintStorage[MIN_PER_TX] = _dailyLimitMaxPerTxMinPerTxArray[2];\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _homeDailyLimitHomeMaxPerTxArray[0];\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _homeDailyLimitHomeMaxPerTxArray[1];\r\n        uintStorage[DECIMAL_SHIFT] = _decimalShift;\r\n        setOwner(_owner);\r\n        _setBridgeContractOnOtherSide(_bridgeOnOtherSide);\r\n        setInitialize();\r\n\r\n        emit RequiredBlockConfirmationChanged(_requiredBlockConfirmations);\r\n        emit GasPriceChanged(_gasPrice);\r\n        emit DailyLimitChanged(_dailyLimitMaxPerTxMinPerTxArray[0]);\r\n        emit ExecutionDailyLimitChanged(_homeDailyLimitHomeMaxPerTxArray[0]);\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeMode() external pure returns (bytes4 _data) {\r\n        return 0x18762d46; // bytes4(keccak256(abi.encodePacked(\"erc-to-native-core\")))\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public {\r\n        require(_token != address(erc20token()));\r\n        if (_token == address(halfDuplexErc20token())) {\r\n            // SCD is not claimable if the bridge accepts deposits of this token\r\n            // solhint-disable-next-line not-rely-on-time\r\n            require(!isTokenSwapAllowed(now));\r\n        }\r\n        super.claimTokens(_token, _to);\r\n    }\r\n\r\n    function onExecuteMessage(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        bytes32 /*_txHash*/\r\n    ) internal returns (bool) {\r\n        setTotalExecutedPerDay(getCurrentDay(), totalExecutedPerDay(getCurrentDay()).add(_amount));\r\n        uint256 amount = _amount.div(10**decimalShift());\r\n        bool res = erc20token().transfer(_recipient, amount);\r\n\r\n        if (tokenBalance(halfDuplexErc20token()) > 0) {\r\n            address(this).call(abi.encodeWithSelector(SWAP_TOKENS));\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function onFailedMessage(address, uint256, bytes32) internal {\r\n        revert();\r\n    }\r\n\r\n    function _relayTokens(address _sender, address _receiver, uint256 _amount) internal {\r\n        require(_receiver != bridgeContractOnOtherSide());\r\n        super._relayTokens(_sender, _receiver, _amount);\r\n    }\r\n\r\n    function migrateToMCD() external {\r\n        bytes32 storageAddress = 0x3378953eb16363e06fd9ea9701d36ed7285d206d9de7df55b778462d74596a89; // keccak256(abi.encodePacked(\"migrationToMcdCompleted\"))\r\n        require(!boolStorage[storageAddress]);\r\n\r\n        address mcdContract = IDaiAdapter(migrationContract().daiJoin()).dai();\r\n        setErc20token(mcdContract);\r\n\r\n        uintStorage[MIN_HDTOKEN_BALANCE] = 10 ether;\r\n\r\n        swapTokens();\r\n\r\n        boolStorage[storageAddress] = true;\r\n    }\r\n\r\n    function saiTopContract() internal pure returns (ISaiTop) {\r\n        return ISaiTop(0x9b0ccf7C8994E19F39b2B4CF708e0A7DF65fA8a3);\r\n    }\r\n\r\n    function isTokenSwapAllowed(uint256 _ts) public view returns (bool) {\r\n        uint256 esTs = saiTopContract().caged();\r\n        if (esTs > 0 && _ts > esTs) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function halfDuplexErc20token() public pure returns (ERC20) {\r\n        return ERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n    }\r\n\r\n    function setMinHDTokenBalance(uint256 _minBalance) external onlyOwner {\r\n        uintStorage[MIN_HDTOKEN_BALANCE] = _minBalance;\r\n    }\r\n\r\n    function minHDTokenBalance() public view returns (uint256) {\r\n        return uintStorage[MIN_HDTOKEN_BALANCE];\r\n    }\r\n\r\n    function isHDTokenBalanceAboveMinBalance() public view returns (bool) {\r\n        if (tokenBalance(halfDuplexErc20token()) > minHDTokenBalance()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function tokenBalance(ERC20 _token) internal view returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    function migrationContract() internal pure returns (IScdMcdMigration) {\r\n        return IScdMcdMigration(0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849);\r\n    }\r\n\r\n    function swapTokens() public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(isTokenSwapAllowed(now));\r\n\r\n        IScdMcdMigration mcdMigrationContract = migrationContract();\r\n        ERC20 hdToken = halfDuplexErc20token();\r\n        ERC20 fdToken = erc20token();\r\n\r\n        uint256 curHDTokenBalance = tokenBalance(hdToken);\r\n        require(curHDTokenBalance > 0);\r\n\r\n        uint256 curFDTokenBalance = tokenBalance(fdToken);\r\n\r\n        require(hdToken.approve(mcdMigrationContract, curHDTokenBalance));\r\n        mcdMigrationContract.swapSaiToDai(curHDTokenBalance);\r\n\r\n        require(tokenBalance(fdToken).sub(curFDTokenBalance) == curHDTokenBalance);\r\n\r\n        emit TokensSwapped(hdToken, fdToken, curHDTokenBalance);\r\n    }\r\n\r\n    function relayTokens(address _from, address _receiver, uint256 _amount, address _token) external {\r\n        require(_from == msg.sender || _from == _receiver);\r\n        _relayTokens(_from, _receiver, _amount, _token);\r\n    }\r\n\r\n    function relayTokens(address _receiver, uint256 _amount, address _token) external {\r\n        _relayTokens(msg.sender, _receiver, _amount, _token);\r\n    }\r\n\r\n    function _relayTokens(address _sender, address _receiver, uint256 _amount, address _token) internal {\r\n        require(_receiver != bridgeContractOnOtherSide());\r\n        require(_receiver != address(0));\r\n        require(_receiver != address(this));\r\n        require(_amount > 0);\r\n        require(withinLimit(_amount));\r\n\r\n        ERC20 tokenToOperate = ERC20(_token);\r\n        ERC20 hdToken = halfDuplexErc20token();\r\n        ERC20 fdToken = erc20token();\r\n\r\n        if (tokenToOperate == ERC20(0x0)) {\r\n            tokenToOperate = fdToken;\r\n        }\r\n\r\n        require(tokenToOperate == fdToken || tokenToOperate == hdToken);\r\n\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_amount));\r\n\r\n        tokenToOperate.transferFrom(_sender, address(this), _amount);\r\n        emit UserRequestForAffirmation(_receiver, _amount);\r\n\r\n        if (tokenToOperate == hdToken) {\r\n            swapTokens();\r\n        }\r\n    }\r\n\r\n    function upgradeToV250() public {\r\n        bytes32 upgradeStorage = 0x221181d03d3c423368b412861518cd98276a115f4c2d9594ab6697d90fc99c19; // keccak256(abi.encodePacked('isUpgradedToV250'))\r\n        require(!boolStorage[upgradeStorage]);\r\n        uintStorage[DAILY_LIMIT] = 100000 ether;\r\n        emit DailyLimitChanged(100000 ether);\r\n        uintStorage[MIN_PER_TX] = 5000000000000000;\r\n        _setBridgeContractOnOtherSide(0x7301CFA0e1756B71869E93d4e4Dca5c7d0eb0AA6);\r\n        boolStorage[upgradeStorage] = true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateToMCD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"relayedMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"executeSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHDTokenBalanceAboveMinBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setExecutionDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHDTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgradeToV250\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"isTokenSwapAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinHDTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinExecutionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfDuplexErc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_erc20token\",\"type\":\"address\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_dailyLimitMaxPerTxMinPerTxArray\",\"type\":\"uint256[]\"},{\"name\":\"_homeDailyLimitHomeMaxPerTxArray\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_decimalShift\",\"type\":\"uint256\"},{\"name\":\"_bridgeOnOtherSide\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalShift\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setExecutionMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UserRequestForAffirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExecutionDailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForeignBridgeErcToNative","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://db6dd7c16e8ca6c236ca6fcb8e51fc6e4d212c2fc30449aadced3a7a66709ddf"}]}