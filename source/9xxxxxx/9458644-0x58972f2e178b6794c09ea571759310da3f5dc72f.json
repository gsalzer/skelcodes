{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n \r\n/*\r\n* Poo poo doo doo\r\n* Doo doo lovers of the world, my slimes\r\n* =====================================================\r\n*\r\n* Team boo boo doo doo gaga\r\n*/\r\n \r\ncontract Hourglass {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n   \r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n   \r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n   \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingHex,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n   \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 hexEarned\r\n    );\r\n   \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 hexReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n   \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 hexWithdrawn\r\n    );\r\n   \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n   \r\n   \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Hextest\";\r\n    string public symbol = \"TSTCN\";\r\n    uint8 constant public decimals = 8;\r\n    uint8 constant internal dividendFee_ = 10;\r\n    uint256 constant internal tokenPriceInitial_ = 1e6; // 0.01 hex\r\n    uint256 constant internal tokenPriceIncremental_ = 1e5; //0.001 hex\r\n    uint256 constant internal magnitude = 2**64;\r\n   \r\n    // proof of stake (defaults at 100 tokens)\r\n    //110k\r\n    uint256 public stakingRequirement = 110e12;\r\n   \r\n    address constant public HEXTokenAddress = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\r\n   \r\n   \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n   \r\n    // administrator list (see above on what they can do)\r\n    mapping(address => bool) public administrators;\r\n \r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    constructor()\r\n        public\r\n    {\r\n        // add administrators here\r\n        administrators[0xAA7A7C2DECB180f68F11E975e6D92B5Dc06083A6] = true;\r\n        administrators[0x53e1eB6a53d9354d43155f76861C5a2AC80ef361] = true;\r\n    }\r\n   \r\n     \r\n    /**\r\n     * Converts all incoming Hex to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(uint256 hexValue, address _referredBy)\r\n        public\r\n        returns(uint256)\r\n    {\r\n        HexContract(HEXTokenAddress).transferFrom(msg.sender, address(this), hexValue);\r\n        purchaseTokens(hexValue, _referredBy);\r\n    }\r\n   \r\n    /**\r\n     * Fallback function to handle Hex that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    fallback () external {\r\n \r\n        revert();\r\n \r\n    }\r\n   \r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n       \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n       \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n       \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, address(0));\r\n       \r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n   \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n       \r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n \r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n       \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n       \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n       \r\n        // lambo delivery service\r\n        HexContract(HEXTokenAddress).transfer(_customerAddress, _dividends);\r\n       \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n   \r\n    /**\r\n     * Liquifies tokens to Hex.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _hex = tokensToHex_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_hex, dividendFee_);\r\n        uint256 _taxedHex = SafeMath.sub(_hex, _dividends);\r\n       \r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n       \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedHex * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;      \r\n       \r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n       \r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedHex);\r\n    }\r\n   \r\n   \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n       \r\n        // make sure we have the requested tokens\r\n        // ( we dont want whale premines )\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n       \r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n       \r\n        // liquify 10% of the tokens that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToHex_(_tokenFee);\r\n \r\n        // burn the fee tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n \r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n       \r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n       \r\n        // disperse dividends among holders\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n       \r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n       \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n   \r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n   \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string memory _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n   \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string memory _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n \r\n   \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Hex stored in the contract\r\n     * Example: totalHexBalance()\r\n     */\r\n    function totalHexBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return balanceOf(address(this));\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256 tokenSupply)\r\n    {\r\n        tokenSupply=tokenSupply_;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(bool _includeReferralBonus)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n   \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n   \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _hex = tokensToHex_(1e8);\r\n            uint256 _dividends = SafeMath.div(_hex, dividendFee_  );\r\n            uint256 _taxedHex = SafeMath.sub(_hex, _dividends);\r\n            return _taxedHex;\r\n        }\r\n    }\r\n   \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _hex = tokensToHex_(1e8);\r\n            uint256 _dividends = SafeMath.div(_hex, dividendFee_  );\r\n            uint256 _taxedHex = SafeMath.add(_hex, _dividends);\r\n            return _taxedHex;\r\n        }\r\n    }\r\n   \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _hexToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_hexToSpend, dividendFee_);\r\n        uint256 _taxedHex = SafeMath.sub(_hexToSpend, _dividends);\r\n        uint256 _amountOfTokens = hexToTokens_(_taxedHex);\r\n       \r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateHexReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _hex = tokensToHex_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_hex, dividendFee_);\r\n        uint256 _taxedHex = SafeMath.sub(_hex, _dividends);\r\n        return _taxedHex;\r\n    }\r\n   \r\n   \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingHex, address _referredBy)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingHex, dividendFee_);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedHex = SafeMath.sub(_incomingHex, _undividedDividends);\r\n        uint256 _amountOfTokens = hexToTokens_(_taxedHex);\r\n        uint256 _fee = _dividends * magnitude;\r\n \r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n       \r\n        // is the user referred by a masternode?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n \r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n           \r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n       \r\n        // we can't give people infinite Hex\r\n        if(tokenSupply_ > 0){\r\n           \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n           \r\n            // calculate the amount of tokens the customer receives over his purchase\r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n       \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n       \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n       \r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n       \r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingHex, _amountOfTokens, _referredBy);\r\n       \r\n        return _amountOfTokens;\r\n    }\r\n \r\n    /**\r\n     * Calculate Token price based on an amount of incoming Hex\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function hexToTokens_(uint256 _hex)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e8;\r\n        uint256 _tokensReceived =\r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e8)*(_hex * 1e8))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n \r\n        return _tokensReceived;\r\n    }\r\n   \r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToHex_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n \r\n        uint256 tokens_ = (_tokens + 1e8);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e8);\r\n        uint256 _hexReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e8))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e8)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e8))/2\r\n            )\r\n        /1e8);\r\n        return _hexReceived;\r\n    }\r\n   \r\n   \r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n \r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n \r\ninterface HexContract {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingHex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"HEXTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hexValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateHexReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hexToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHexBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Hourglass","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://d8aa10d8460180ee903b0fffa18de7c627961dec22de4aabc49205d6ff5b10be"}]}