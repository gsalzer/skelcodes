{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.13 <0.6.0;\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\r\n}\r\n\r\ncontract EthereumRush {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    address payable public fundsWallet;\r\n    uint256 public maximumTarget;\r\n    uint256 public lastBlock;\r\n    uint256 public rewardTimes;\r\n    uint256 public genesisReward;\r\n    uint256 public premined;\r\n    uint256 public nRewarMod;\r\n    uint256 public nWtime;\r\n    uint256 public totalReceived;\r\n\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) public {\r\n        initialSupply = 23592240  * 10 ** uint256(decimals);\r\n        tokenName = \"Ethereum Rush\";\r\n        tokenSymbol = \"ETR\";\r\n        lastBlock = 1;\r\n        nRewarMod = 7200; \r\n        nWtime = 7889231; //three months\r\n        genesisReward = (2**14)* (10**uint256(decimals));\r\n        maximumTarget = 100  * 10 ** uint256(decimals);\r\n        fundsWallet = msg.sender;\r\n        premined = 1000000 * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = premined/2;\r\n        balanceOf[address(this)] = initialSupply + (premined/2);\r\n        totalSupply =  initialSupply + premined;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        totalReceived = 0;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function uintToString(uint256 v) internal pure returns(string memory str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(uint8(48 + remainder));\r\n        }\r\n        bytes memory s = new bytes(i + 1);\r\n        for (uint j = 0; j <= i; j++) {\r\n            s[j] = reversed[i - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n\r\n    function append(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a,\"-\",b));\r\n    }\r\n\r\n\r\n\r\n\r\n    function getblockhash() public view returns (uint256) {\r\n            return uint256(blockhash(block.number-1));\r\n    }\r\n\r\n    function getspesificblockhash(uint256 _blocknumber) public view returns(uint256, uint256){\r\n        uint256 crew = uint256(blockhash(_blocknumber)) % nRewarMod;\r\n        return (crew, block.number-1);\r\n    }\r\n\r\n\r\n\r\n\r\n    function checkRewardStatus() public view returns (uint256, uint256) {\r\n        uint256 crew = uint256(blockhash(block.number-1)) % nRewarMod;\r\n        return (crew, block.number-1);\r\n    }\r\n\r\n\r\n\r\n\r\n    struct sdetails {\r\n      uint256 _stocktime;\r\n      uint256 _stockamount;\r\n    }\r\n\r\n\r\n    address[] totalminers;\r\n\r\n    mapping (address => sdetails) nStockDetails;\r\n    struct rewarddetails {\r\n        uint256 _artyr;\r\n        bool _didGetReward;\r\n    }\r\n    mapping (string => rewarddetails) nRewardDetails;\r\n\r\n    struct nBlockDetails {\r\n        uint256 _bTime;\r\n        uint256 _tInvest;\r\n    }\r\n    mapping (uint256 => nBlockDetails) bBlockIteration;\r\n\r\n\r\n  struct activeMiners {\r\n      address bUser;\r\n  }\r\n\r\n  mapping(uint256 => activeMiners[]) aMiners;\r\n\r\n\r\n    function numberofminer() view public returns (uint256) {\r\n        return totalminers.length;\r\n    }\r\n\r\n\r\n    function nAddrHash() view public returns (uint256) {\r\n        return uint256(msg.sender) % 10000000000;\r\n    }\r\n\r\n     function getmaximumAverage() public view returns(uint){\r\n         if(numberofminer() == 0){\r\n             return maximumTarget;\r\n         } else {\r\n             return maximumTarget / numberofminer();\r\n         }\r\n\r\n    }\r\n\r\n\r\n    function nMixAddrandBlock()  private view returns(string memory) {\r\n         return append(uintToString(nAddrHash()),uintToString(lastBlock));\r\n    }\r\n\r\n    function becameaminer(uint256 mineamount) public returns (uint256) {\r\n      uint256 realMineAmount = mineamount * 10 ** uint256(decimals);\r\n      require(realMineAmount > getmaximumAverage() / 100); //Minimum maximum targes one percents neccessary.\r\n      require(realMineAmount > 1 * 10 ** uint256(decimals)); //minimum 1 coin require\r\n      require(nStockDetails[msg.sender]._stocktime == 0);\r\n      maximumTarget +=  realMineAmount;\r\n      nStockDetails[msg.sender]._stocktime = now;\r\n      nStockDetails[msg.sender]._stockamount = realMineAmount;\r\n      totalminers.push(msg.sender);\r\n      _transfer(msg.sender, address(this), realMineAmount);\r\n      return 200;\r\n   }\r\n\r\n\r\n   function checkAddrMinerStatus(address _addr) view public returns(bool){\r\n    if(nStockDetails[_addr]._stocktime == 0){\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n   }\r\n   \r\n   function checkAddrMinerAmount(address _addr) view public returns(uint256){\r\n    if(nStockDetails[_addr]._stocktime == 0){\r\n        return 0;\r\n    } else {\r\n        return nStockDetails[_addr]._stockamount;\r\n    }\r\n   }\r\n   \r\n   \r\n\r\n\r\n\r\n\r\n   function signfordailyreward(uint256 _bnumber) public returns (uint256)  {\r\n       require(checkAddrMinerStatus(msg.sender) == true);\r\n       require((block.number-1) - _bnumber  <= 100);\r\n       require(uint256(blockhash(_bnumber)) % nRewarMod == 1);\r\n       \r\n        if(bBlockIteration[lastBlock]._bTime + 1800 < now){\r\n           lastBlock += 1;\r\n           bBlockIteration[lastBlock]._bTime = now;\r\n       }\r\n       \r\n       require(nRewardDetails[nMixAddrandBlock()]._artyr == 0); \r\n       bBlockIteration[lastBlock]._tInvest += nStockDetails[msg.sender]._stockamount;\r\n       nRewardDetails[nMixAddrandBlock()]._artyr = now;\r\n       nRewardDetails[nMixAddrandBlock()]._didGetReward = false;\r\n       aMiners[lastBlock].push(activeMiners(msg.sender));\r\n\r\n\r\n       return 200;\r\n\r\n   }\r\n\r\n   function getactiveminersnumber() view public returns(uint256) {\r\n        return aMiners[lastBlock].length; //that function for information.\r\n   }\r\n\r\n\r\n   function getDailyReward(uint256 _bnumber) public returns(uint256) {\r\n       require(checkAddrMinerStatus(msg.sender) == true);\r\n       require((block.number-1) - _bnumber  >= 100);\r\n       require(nRewardDetails[nMixAddrandBlock()]._didGetReward == false);\r\n       uint256 totalRA = genesisReward / 2 ** (lastBlock/730);\r\n       uint256 usersReward = (totalRA * (nStockDetails[msg.sender]._stockamount * 100) / bBlockIteration[lastBlock]._tInvest) /  100;\r\n       nRewardDetails[nMixAddrandBlock()]._didGetReward = true;\r\n       _transfer(address(this), msg.sender, usersReward);\r\n       return usersReward;\r\n   }\r\n\r\n\r\n\r\n   function getyourcoinsbackafterthreemonths() public returns(uint256) {\r\n       require(nStockDetails[msg.sender]._stocktime + nWtime < now  );\r\n       nStockDetails[msg.sender]._stocktime = 0;\r\n       _transfer(address(this),msg.sender,nStockDetails[msg.sender]._stockamount);\r\n       return nStockDetails[msg.sender]._stockamount;\r\n   }\r\n\r\n   struct memoIncDetails {\r\n       uint256 _receiveTime;\r\n       uint256 _receiveAmount;\r\n       address _senderAddr;\r\n       string _senderMemo;\r\n   }\r\n\r\n   mapping(string => memoIncDetails[]) textPurchases;\r\n\r\n\r\n\r\n   function nMixForeignAddrandBlock(address _addr)  public view returns(string memory) {\r\n         return append(uintToString(uint256(_addr) % 10000000000),uintToString(lastBlock));\r\n    }\r\n\r\n\r\n  function sendtokenwithmemo(uint256 _amount, address _to, string memory _memo)  public returns(uint256) {\r\n      textPurchases[nMixForeignAddrandBlock(_to)].push(memoIncDetails(now, _amount, msg.sender, _memo));\r\n      _transfer(msg.sender, _to, _amount);\r\n      return 200;\r\n  }\r\n\r\n\r\n   function checkmemopurchases(address _addr, uint256 _index) view public returns(uint256,\r\n   uint256,\r\n   string memory,\r\n   address) {\r\n\r\n       uint256 rTime = textPurchases[nMixForeignAddrandBlock(_addr)][_index]._receiveTime;\r\n       uint256 rAmount = textPurchases[nMixForeignAddrandBlock(_addr)][_index]._receiveAmount;\r\n       string memory sMemo = textPurchases[nMixForeignAddrandBlock(_addr)][_index]._senderMemo;\r\n       address sAddr = textPurchases[nMixForeignAddrandBlock(_addr)][_index]._senderAddr;\r\n       if(textPurchases[nMixForeignAddrandBlock(_addr)][_index]._receiveTime == 0){\r\n            return (0, 0,\"0\", _addr);\r\n       }else {\r\n            return (rTime, rAmount,sMemo, sAddr);\r\n       }\r\n   }\r\n\r\n   function getmemotextcountforaddr(address _addr) view public returns(uint256) {\r\n       return  textPurchases[nMixForeignAddrandBlock(_addr)].length;\r\n   }\r\n   \r\n    function() payable external {\r\n      if(totalReceived < premined/2) {\r\n        require(balanceOf[fundsWallet] >= msg.value * 375);\r\n        _transfer(fundsWallet, msg.sender, msg.value * 375);\r\n        totalReceived += msg.value * 375;\r\n        fundsWallet.transfer(msg.value);\r\n      } else {\r\n        assert(false);\r\n      }\r\n\r\n    }\r\n\r\n   //end of the contract\r\n }","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mineamount\",\"type\":\"uint256\"}],\"name\":\"becameaminer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkAddrMinerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkAddrMinerStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkRewardStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkmemopurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"genesisReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnumber\",\"type\":\"uint256\"}],\"name\":\"getDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getactiveminersnumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getblockhash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getmaximumAverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getmemotextcountforaddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocknumber\",\"type\":\"uint256\"}],\"name\":\"getspesificblockhash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getyourcoinsbackafterthreemonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nAddrHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"nMixForeignAddrandBlock\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nRewarMod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nWtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberofminer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"premined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"sendtokenwithmemo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnumber\",\"type\":\"uint256\"}],\"name\":\"signfordailyreward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthereumRush","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000017a6a46fab8bfd5bc00000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000d457468657265756d20527573680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554520000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://8c7966f03c8640a71f1d46102da97e37676195f9d221c7fbf28b4b2feaa0fc45"}]}