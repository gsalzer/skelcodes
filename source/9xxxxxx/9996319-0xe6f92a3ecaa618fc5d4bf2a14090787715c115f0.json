{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\n\n\ninterface TokenInterface {\n    function approve(address, uint) external;\n    function transfer(address, uint) external;\n    function transferFrom(address, address, uint) external;\n    function deposit() external payable;\n    function withdraw(uint) external;\n    function balanceOf(address) external view returns (uint);\n    function decimals() external view returns (uint);\n}\n\ninterface MemoryInterface {\n    function getUint(uint id) external returns (uint num);\n    function setUint(uint id, uint val) external;\n}\n\ninterface EventInterface {\n    function emitEvent(uint connectorType, uint connectorID, bytes32 eventCode, bytes calldata eventData) external;\n}\n\ncontract Stores {\n\n    /**\n     * @dev Return ethereum address\n     */\n    function getEthAddr() internal pure returns (address) {\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\n    }\n\n    /**\n     * @dev Return memory variable address\n     */\n    function getMemoryAddr() internal pure returns (address) {\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\n    }\n\n    /**\n     * @dev Return InstaEvent Address.\n     */\n    function getEventAddr() internal pure returns (address) {\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\n    }\n\n    /**\n     * @dev Get Uint value from InstaMemory Contract.\n     */\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\n    }\n\n    /**\n     * @dev Set Uint value in InstaMemory Contract.\n     */\n    function setUint(uint setId, uint val) internal {\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\n    }\n\n    /**\n     * @dev emit event on event contract\n     */\n    function emitEvent(bytes32 eventCode, bytes memory eventData) internal {\n        (uint model, uint id) = connectorID();\n        EventInterface(getEventAddr()).emitEvent(model, id, eventCode, eventData);\n    }\n\n    /**\n     * @dev Connector Details - needs to be changed before deployment\n     */\n    function connectorID() public pure returns(uint model, uint id) {\n        (model, id) = (0, 0);\n    }\n\n}\n\ncontract DSMath {\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n}\n\ninterface KyberInterface {\n    function trade(\n        address src,\n        uint srcAmount,\n        address dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId\n    ) external payable returns (uint);\n\n    function getExpectedRate(\n        address src,\n        address dest,\n        uint srcQty\n    ) external view returns (uint, uint);\n}\n\ncontract KyberHelpers is DSMath, Stores  {\n    /**\n     * @dev Get Kyber Proxy Address\n     */\n    function getAddressKyber() public pure returns (address) {\n        return 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    }\n\n    /**\n     * @dev Get Admin Address\n     */\n    function getAddressAdmin() public pure returns (address) {\n        return 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\n    }\n\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = (_amt / 10 ** (18 - _dec));\n    }\n\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n        amt = mul(_amt, 10 ** (18 - _dec));\n    }\n\n    function getDecimal(address token) internal view returns (uint decimal) {\n        decimal = token == getEthAddr() ? 18 : TokenInterface(token).decimals();\n    }\n\n    function kyberTrade(\n        KyberInterface kyber,\n        address sellAddr,\n        address buyAddr,\n        uint sellAmt,\n        uint unitAmt,\n        uint ethAmt\n    ) internal returns (uint expectedAmt, uint _buyAmt){\n        (expectedAmt, ) = kyber.getExpectedRate(sellAddr, buyAddr, sellAmt);\n        require(expectedAmt >= unitAmt, \"Too much slippage\");\n\n        _buyAmt = kyber.trade.value(ethAmt)(\n            sellAddr,\n            sellAmt,\n            buyAddr,\n            address(this),\n            uint(-1),\n            unitAmt,\n            getAddressAdmin()\n        );\n    }\n}\n\ncontract KyberResolver is KyberHelpers {\n    event LogSell(\n        address indexed buyToken,\n        address indexed sellToken,\n        uint256 buyAmt,\n        uint256 sellAmt,\n        uint256 getId,\n        uint256 setId\n    );\n\n\n    function sell(\n        address buyAddr,\n        address sellAddr,\n        uint sellAmt,\n        uint unitAmt,\n        uint getId,\n        uint setId\n    ) external payable\n    {\n        uint _sellAmt = sellAmt;\n        uint ethAmt;\n        if (sellAddr == getEthAddr()) {\n            _sellAmt = _sellAmt == uint(-1) ? address(this).balance : _sellAmt;\n            ethAmt = _sellAmt;\n        } else {\n            TokenInterface sellContract = TokenInterface(sellAddr);\n            _sellAmt = _sellAmt == uint(-1) ? sellContract.balanceOf(address(this)) : _sellAmt;\n            sellContract.approve(getAddressKyber(), _sellAmt);\n        }\n\n        KyberInterface kyberContract = KyberInterface(getAddressKyber());\n\n        (uint expectedAmt, uint _buyAmt) = kyberTrade(\n            kyberContract,\n            sellAddr,\n            buyAddr,\n            _sellAmt,\n            unitAmt,\n            ethAmt\n        );\n\n        emit LogSell(buyAddr, sellAddr, _buyAmt, _sellAmt, 0, expectedAmt);\n    }\n}\n\ncontract InstaKyber is KyberResolver {\n    string public name = \"Kyber-v1\";\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"model\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressKyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"InstaKyber","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}