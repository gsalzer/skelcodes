{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\n/**\r\n * @title UpgradeBeaconProxyV1Prototype\r\n * @author 0age\r\n * @notice This contract delegates all logic, including initialization, to an\r\n * implementation contract specified by a hard-coded \"upgrade beacon\" contract.\r\n * Note that this implementation can be reduced in size by stripping out the\r\n * metadata hash, or even more significantly by using a minimal upgrade beacon\r\n * proxy implemented using raw EVM opcodes.\r\n */\r\ncontract UpgradeBeaconProxyV1Prototype {\r\n  // Set upgrade beacon address as a constant (i.e. not in contract storage).\r\n  address private constant _UPGRADE_BEACON = address(\r\n    0x5BF07ceDF1296B1C11966832c3e75895ad6E1E2a\r\n  );\r\n\r\n  /**\r\n   * @notice In the constructor, perform initialization via delegatecall to the\r\n   * implementation set on the upgrade beacon, supplying initialization calldata\r\n   * as a constructor argument. The deployment will revert and pass along the\r\n   * revert reason in the event that this initialization delegatecall reverts.\r\n   * @param initializationCalldata Calldata to supply when performing the\r\n   * initialization delegatecall.\r\n   */\r\n  constructor(bytes memory initializationCalldata) public payable {\r\n    // Delegatecall into the implementation, supplying initialization calldata.\r\n    (bool ok, ) = _implementation().delegatecall(initializationCalldata);\r\n\r\n    // Revert and include revert data if delegatecall to implementation reverts.\r\n    if (!ok) {\r\n      assembly {\r\n        returndatacopy(0, 0, returndatasize)\r\n        revert(0, returndatasize)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice In the fallback, delegate execution to the implementation set on\r\n   * the upgrade beacon.\r\n   */\r\n  function () external payable {\r\n    // Delegate execution to implementation contract provided by upgrade beacon.\r\n    _delegate(_implementation());\r\n  }\r\n\r\n  /**\r\n   * @notice Private view function to get the current implementation from the\r\n   * upgrade beacon. This is accomplished via a staticcall to the beacon with no\r\n   * data, and the beacon will return an abi-encoded implementation address.\r\n   * @return implementation Address of the implementation.\r\n   */\r\n  function _implementation() private view returns (address implementation) {\r\n    // Get the current implementation address from the upgrade beacon.\r\n    (bool ok, bytes memory returnData) = _UPGRADE_BEACON.staticcall(\"\");\r\n\r\n    // Revert and pass along revert message if call to upgrade beacon reverts.\r\n    require(ok, string(returnData));\r\n\r\n    // Set the implementation to the address returned from the upgrade beacon.\r\n    implementation = abi.decode(returnData, (address));\r\n  }\r\n\r\n  /**\r\n   * @notice Private function that delegates execution to an implementation\r\n   * contract. This is a low level function that doesn't return to its internal\r\n   * call site. It will return whatever is returned by the implementation to the\r\n   * external caller, reverting and returning the revert data if implementation\r\n   * reverts.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) private {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Delegatecall to the implementation, supplying calldata and gas.\r\n      // Out and outsize are set to zero - instead, use the return buffer.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data from the return buffer.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // Delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationCalldata\",\"type\":\"bytes\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UpgradeBeaconProxyV1Prototype","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000024c4d66de80000000000000000000000007e4a8391c728fed9069b2962699ab416628b19fa00000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://9f5f4bb15f78a6da6b0bd3fce291668cae090aaa37ce60064f8145186cdf3456"}]}