{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-01-13\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ncontract IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n@notice contract for staking\r\n */\r\ncontract ApologiaStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    /**\r\n    @notice Vote struct */\r\n    struct Vote {\r\n        uint256 tokenAmount;\r\n        address voter;\r\n        uint8 personalityVoted;\r\n        uint256[] txsTimeToken;\r\n        uint256[] stakesToken;\r\n        // uint256 stakesCount;\r\n        uint256 unstakedTimestamp;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping(address => Vote) private votes;                // mapping from voter to Vote struct\r\n    address[] public voters;\r\n    mapping(uint8 => uint256) public stakesByPersonality;\r\n    uint8 public winnerPersonality;\r\n\r\n    uint256 public totalStakesCount;             // total count of stakes\r\n    uint256 public totalStakedAmountToken;\r\n\r\n    uint256 public stakeTimeStart;\r\n    uint256 public stakeTimeStop;\r\n\r\n    uint256 public minimumStakingAmountToken;\r\n\r\n    bool public contractState;\r\n\r\n    event ContractInitialized(\r\n        uint stakeTimeStart,\r\n        uint stakeTimeStop\r\n    );\r\n\r\n    constructor(\r\n        address _token,\r\n        uint _minStakingAmountToken\r\n    )public {\r\n        token = IERC20(_token);\r\n        setMinimumStakingAmountToken(_minStakingAmountToken);\r\n    }\r\n\r\n    function init(\r\n        uint startTime,\r\n        uint stopTime\r\n    )\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            !contractState,\r\n            \"contract is already initialized\"\r\n        );\r\n\r\n        require(\r\n            startTime > now,\r\n            \"start time cannot be set in the past\"\r\n        );\r\n\r\n        require(\r\n            stopTime > startTime,\r\n            \"stop time should be greater than stop time\"\r\n        );\r\n\r\n        stakeTimeStart = startTime;\r\n        stakeTimeStop = stopTime;\r\n\r\n        contractState = true;\r\n\r\n        emit ContractInitialized(\r\n            stakeTimeStart,\r\n            stakeTimeStop\r\n        );\r\n    }\r\n\r\n    function setMinimumStakingAmountToken(uint _amount)\r\n    public\r\n    onlyOwner {\r\n        minimumStakingAmountToken = _amount;\r\n    }\r\n\r\n    event Staked(address user, uint256 amountToken);\r\n\r\n    function stake(uint8 personality, uint tokensAmount)\r\n    public\r\n    payable {\r\n        require(\r\n            contractState == true\r\n        && now <= stakeTimeStop\r\n        && now >= stakeTimeStart,\r\n            \"cannot stake\"\r\n        );\r\n\r\n        require(\r\n            personality == 1\r\n            || personality == 2,\r\n            \"personality can be either 1 or 2\"\r\n        );\r\n\r\n        Vote storage _vote = votes[msg.sender];\r\n\r\n        if (_vote.tokenAmount > 0) {\r\n            require(\r\n                _vote.personalityVoted == personality,\r\n                \"You cannot raise stake on a different personality\"\r\n            );\r\n        }\r\n\r\n        if (_vote.tokenAmount == 0) {\r\n            addVoter(msg.sender);\r\n            // create a new stake entity\r\n            uint256[] memory txs = new uint256[](0);\r\n            uint256[] memory stx = new uint256[](0);\r\n\r\n            Vote memory newVote = Vote(\r\n                0,\r\n                msg.sender,\r\n                0,\r\n                txs,\r\n                stx,\r\n                0,\r\n                false\r\n            );\r\n\r\n            votes[msg.sender] = newVote;\r\n            votes[msg.sender].personalityVoted = personality;\r\n        }\r\n\r\n        require(\r\n            tokensAmount >= minimumStakingAmountToken,\r\n            \"tokens must be greater than or equal to minimumStakingAmount\"\r\n        );\r\n\r\n        _vote.tokenAmount = _vote.tokenAmount.add(tokensAmount);\r\n        _vote.stakesToken.push(tokensAmount);\r\n        _vote.txsTimeToken.push(now);\r\n        stakesByPersonality[personality] = stakesByPersonality[personality].add(tokensAmount);\r\n\r\n\r\n        bool success = token.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokensAmount\r\n        );\r\n\r\n        require(\r\n            success,\r\n            \"failed in transferFrom of stakeTokens\"\r\n        );\r\n\r\n\r\n        totalStakedAmountToken = totalStakedAmountToken.add(tokensAmount);\r\n\r\n        emit Staked(msg.sender, tokensAmount);\r\n\r\n    }\r\n\r\n    function sendTokens(\r\n        address[] memory _addresses,\r\n        uint[] memory _amounts\r\n    )\r\n    public\r\n    onlyOwner\r\n    returns (bool) {\r\n        require(\r\n            _addresses.length == _amounts.length,\r\n            \"addresses and amounts do not match\"\r\n        );\r\n\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            require(\r\n                token.transfer(\r\n                    _addresses[i],\r\n                    _amounts[i]\r\n                ),\r\n                \"token transfer failed\"\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n      @notice fired when tokens are unstaked by the voter\r\n       */\r\n    event TokensUnstaked(\r\n        address voter,\r\n        uint256 amountToken\r\n    );\r\n\r\n    /**\r\n    @notice this is function is called by the voter to unstake tokens\r\n     */\r\n    function unstake() public {\r\n        require(\r\n            contractState == true\r\n        && now >= stakeTimeStart,\r\n            \"cannot unstake\"\r\n        );\r\n\r\n        Vote storage _vote = votes[msg.sender];\r\n\r\n        require(\r\n            _vote.txsTimeToken.length > 0,\r\n            \"No stake found by the user\"\r\n        );\r\n\r\n        require(\r\n            !_vote.withdrawn,\r\n            \"Stake is already withdrawn\"\r\n        );\r\n\r\n        require(\r\n            winnerPersonality != 0,\r\n            \"winner personality has not been selected\"\r\n        );\r\n\r\n        require(\r\n            _vote.personalityVoted == winnerPersonality,\r\n            \"selected personality is the winner\"\r\n        );\r\n\r\n        uint256 withdrawAmountToken = _vote.tokenAmount;\r\n        uint256 ratio = withdrawAmountToken.mul(1000).div(stakesByPersonality[winnerPersonality]);\r\n        uint256 withdrawBonus = winnerPersonality == 1\r\n        ? stakesByPersonality[2].mul(ratio).div(1000)\r\n        : stakesByPersonality[1].mul(ratio).div(1000);\r\n\r\n        uint256 totalWithdrawnAmount = withdrawAmountToken.add(withdrawBonus);\r\n\r\n        _vote.withdrawn = true;\r\n        _vote.unstakedTimestamp = now;\r\n\r\n        bool success = token.transfer(\r\n            msg.sender,\r\n            totalWithdrawnAmount\r\n        );\r\n\r\n        require(\r\n            success,\r\n            \"transfer failed in withdraw\"\r\n        );\r\n\r\n\r\n        emit TokensUnstaked(\r\n            msg.sender,\r\n            totalWithdrawnAmount\r\n        );\r\n    }\r\n\r\n    function selectWinner(uint8 winner)\r\n    public\r\n    onlyOwner {\r\n        require(\r\n            winner == 1\r\n            || winner == 2,\r\n            \"winner can be 1 or 2\"\r\n        );\r\n\r\n        require(\r\n            winnerPersonality == 0,\r\n            \"winner is already selected\"\r\n        );\r\n\r\n        winnerPersonality = winner;\r\n    }\r\n\r\n    function getStakeInfo(address _voter)\r\n    public\r\n    view\r\n    returns (\r\n        uint256 amountToken,\r\n        uint8 personality,\r\n        uint256[] memory txsTimeToken,\r\n        uint256[] memory stakesToken,\r\n        uint256 unstakedTimestamp,\r\n        bool withdrawn\r\n    ) {\r\n        Vote memory vote = votes[_voter];\r\n\r\n        amountToken = vote.tokenAmount;\r\n        personality = vote.personalityVoted;\r\n        withdrawn = vote.withdrawn;\r\n        unstakedTimestamp = vote.unstakedTimestamp;\r\n        txsTimeToken = vote.txsTimeToken;\r\n        stakesToken = vote.stakesToken;\r\n    }\r\n\r\n    function getAllVoters()\r\n    public\r\n    view\r\n    returns (address[] memory allVoters) {\r\n        allVoters = voters;\r\n    }\r\n\r\n    function getTokenStakeAmountByPersonalityId(uint personalityId)\r\n    public\r\n    view\r\n    returns (uint256 amount) {\r\n        for (uint i = 0; i < voters.length; i++) {\r\n            Vote memory v = votes[voters[i]];\r\n            if (v.personalityVoted == personalityId) {\r\n                amount = amount.add(v.tokenAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContractActive()\r\n    public\r\n    view\r\n    returns (bool) {\r\n        return now >= stakeTimeStart && now <= stakeTimeStop;\r\n    }\r\n\r\n    function isVoter(address _address)\r\n    internal\r\n    view\r\n    returns (bool, uint256)\r\n    {\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            if (_address == voters[i]) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function addVoter(address _voter)\r\n    internal\r\n    {\r\n        (bool _isVoter,) = isVoter(_voter);\r\n        if (!_isVoter) {\r\n            voters.push(_voter);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalStakedAmountToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakesByPersonality\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerPersonality\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVoters\",\"outputs\":[{\"name\":\"allVoters\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"personalityId\",\"type\":\"uint256\"}],\"name\":\"getTokenStakeAmountByPersonalityId\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakingAmountToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"name\":\"amountToken\",\"type\":\"uint256\"},{\"name\":\"personality\",\"type\":\"uint8\"},{\"name\":\"txsTimeToken\",\"type\":\"uint256[]\"},{\"name\":\"stakesToken\",\"type\":\"uint256[]\"},{\"name\":\"unstakedTimestamp\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumStakingAmountToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeTimeStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"personality\",\"type\":\"uint8\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winner\",\"type\":\"uint8\"}],\"name\":\"selectWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeTimeStop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_minStakingAmountToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeTimeStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakeTimeStop\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ApologiaStaking","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000444fb48856adba02edb16582f89e82b210cfb4160000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"None","SwarmSource":"bzzr://8d95dedacf0c4d17152bb95e267b3a94150e1927e16d2adeda4ba64c6e981ba1"}]}