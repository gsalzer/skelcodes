{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2017-12-14\r\n*/\r\n\r\npragma solidity 0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n  contract ERC20 {\r\n  function totalSupply()public view returns (uint total_Supply);\r\n  function balanceOf(address _owner)public view returns (uint256 balance);\r\n  function allowance(address _owner, address _spender)public view returns (uint remaining);\r\n  function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);\r\n  function approve(address _spender, uint _amount)public returns (bool ok);\r\n  function transfer(address _to, uint _amount)public returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\r\n}\r\n\r\n\r\ncontract WEBVUA is ERC20\r\n{ using SafeMath for uint256;\r\n\r\n   string public constant symbol = \"WVB\";\r\n   string public constant name = \"WEBVUA.COM\";\r\n   uint8 public constant decimals = 18;\r\n   uint256 _totalSupply = (5000000000) * (10 **18); //5 billion total supply\r\n      \r\n     // Owner of this contract\r\n    address public owner;\r\n    bool stopped = true;\r\n    // total ether received in the contract\r\n    uint256 public eth_received;\r\n    // ico startdate\r\n    uint256 startdate;\r\n    //ico enddate;\r\n    uint256 enddate;\r\n  \r\n     // Balances for each account\r\n     mapping(address => uint256) balances;\r\n  \r\n     // Owner of account approves the transfer of an amount to another account\r\n     mapping(address => mapping (address => uint256)) allowed;\r\n \r\n      enum Stages {\r\n        NOTSTARTED,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n    \r\n    Stages public stage;\r\n    uint256 received;\r\n    uint256 refund;\r\n    bool ico_ended = false;\r\n\r\n// Functions with this modifier can only be executed by the owner\r\n     modifier onlyOwner() {\r\n         require (msg.sender == owner);\r\n          _;\r\n     }\r\n     \r\n    modifier atStage(Stages _stage) {\r\n        require(stage == _stage);\r\n        _;\r\n    }\r\n  \r\n     // Constructor\r\n     function AdBank() public {\r\n         owner = msg.sender;\r\n         balances[owner] = _totalSupply;\r\n         stage = Stages.NOTSTARTED;\r\n         Transfer(0, owner, balances[owner]);\r\n     }\r\n     \r\n     \r\n     function () public payable atStage(Stages.ICO)\r\n    {\r\n       \r\n        require(received < 44000 ether);\r\n        require(!ico_ended && !stopped && now <= enddate);\r\n        received = (eth_received).add(msg.value);\r\n        if (received > 44000 ether){\r\n        refund = received.sub(44000 ether);\r\n        msg.sender.transfer(refund);\r\n        eth_received = 44000 ether;\r\n        }\r\n        else {\r\n            eth_received = (eth_received).add(msg.value);\r\n        }\r\n        \r\n    }\r\n   \r\n    function StartICO() external onlyOwner atStage(Stages.NOTSTARTED) \r\n    {\r\n        stage = Stages.ICO;\r\n        stopped = false;\r\n        startdate = now;\r\n        enddate = now.add(39 days);\r\n    }\r\n    \r\n    function EmergencyStop() external onlyOwner atStage(Stages.ICO)\r\n    {\r\n        stopped = true;\r\n        stage = Stages.PAUSED;\r\n    }\r\n    \r\n    function ResumeEmergencyStop() external onlyOwner atStage(Stages.PAUSED)\r\n    {\r\n        stopped = false;\r\n        stage = Stages.ICO;\r\n    }\r\n    \r\n     function end_ICO() external onlyOwner atStage(Stages.ICO)\r\n     {\r\n         require(now > enddate);\r\n         ico_ended = true;\r\n         stage = Stages.ENDED;\r\n     }\r\n  \r\n   function drain() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    // what is the total supply of the ech tokens\r\n     function totalSupply() public view returns (uint256 total_Supply) {\r\n         total_Supply = _totalSupply;\r\n     }\r\n  \r\n     // What is the balance of a particular account?\r\n     function balanceOf(address _owner)public view returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n  \r\n     // Transfer the balance from owner's account to another account\r\n     function transfer(address _to, uint256 _amount)public returns (bool ok) {\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        Transfer(msg.sender, _to, _amount);\r\n             return true;\r\n         }\r\n  \r\n     // Send _value amount of tokens from address _from to address _to\r\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n     // fees in sub-currencies; the command should fail unless the _from account has\r\n     // deliberately authorized the sender of the message via some mechanism; we propose\r\n     // these standardized APIs for approval:\r\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool ok) {\r\n     require( _to != 0x0);\r\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n     balances[_from] = (balances[_from]).sub(_amount);\r\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n     balances[_to] = (balances[_to]).add(_amount);\r\n     Transfer(_from, _to, _amount);\r\n     return true;\r\n         }\r\n \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount)public returns (bool ok) {\r\n         require( _spender != 0x0);\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n         require( _owner != 0x0 && _spender !=0x0);\r\n         return allowed[_owner][_spender];\r\n   }\r\n   \r\n   //In case the ownership needs to be transferred\r\n\tfunction transferOwnership(address newOwner)public onlyOwner\r\n\t{\r\n\t    require( newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"AdBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"EmergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResumeEmergencyStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_received\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WEBVUA","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://e0fd960fa7bbb6f5edd423260d590c89b45d4b187e54028d5f396b2de20134fa"}]}