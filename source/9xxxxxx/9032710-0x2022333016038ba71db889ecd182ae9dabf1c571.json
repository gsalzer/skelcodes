{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    using SafeMath for *;\r\n    uint ethWei = 1 ether;\r\n\r\n    address public owner;\r\n    address public manager;\r\n    address public ownerWallet;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n        ownerWallet = 0xC28a057CA181e6fa84bbC22F5f0372B3B13A500f;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only for owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require((msg.sender == owner)||(msg.sender == manager), \"only for owner or manager\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwnerOrManager {\r\n        manager = _manager;\r\n    }\r\n}\r\n\r\ncontract SRulesUtils {\r\n\r\n    uint256 ethWei = 1 ether;\r\n\r\n    function strCompare(string memory _str, string memory str) internal pure returns (bool) {\r\n        \r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function divider(uint numerator, uint denominator, uint precision) internal pure returns(uint) {\r\n        return numerator*(uint(10)**uint(precision))/denominator;\r\n    }\r\n}\r\n\r\ncontract SRules is SRulesUtils,Ownable {\r\n\r\n    event reEntryEvent(uint _clientID,address indexed _client,address _referrer, uint256 _amount, uint256 _time,uint _portfolioId);\r\n    event rebateReport(uint[] clientReport,uint[] rebateBonusReport,uint[] bvReport, uint prevRebatePercent);\r\n    event goldmineReport(uint[] fromClient,uint[] clientAry,uint[] fromLvl,uint[] bonusPercentAry,uint[] bvAmtAry,uint[] payAmtAry);\r\n    event rankingReport(uint[] clientAry, uint[] fromClient, uint[] bonusPercentAry);\r\n    event updateReentryEvent(address indexed _client, uint256 _amount, uint256 _time,uint _portfolioId);\r\n    event payoutReport(uint wallet, address[] addrAry,uint256[] payoutArray);\r\n    struct Client {\r\n        bool isExist;\r\n        uint id;\r\n        address addr;\r\n        uint referrerID;\r\n        string status;\r\n        uint256 createdOn;\r\n        string inviteCode;\r\n    }\r\n\r\n    mapping (address => Client) public clients;\r\n    mapping (uint => address) private clientList;\r\n    uint private currClientID = 10000;\r\n    uint private ownerID = 0;\r\n\r\n    mapping(string => address) private codeMapping;\r\n\r\n    struct TreeSponsor {\r\n        uint clientID;\r\n        uint uplineID;\r\n        uint level;\r\n    }\r\n    mapping (uint => TreeSponsor) public treeSponsors;\r\n    mapping (uint => uint[] ) public sponsorDownlines;\r\n\r\n    struct Portfolio {\r\n        uint id;\r\n        uint clientID;\r\n        uint256 amount;\r\n        uint256 bonusValue;\r\n        uint256 withdrawAmt;\r\n        // uint referenceNo;\r\n        // uint trnxHash;\r\n        string status;\r\n        uint256 createdOn;\r\n        uint256 updatedOn;\r\n    }\r\n    mapping (uint => Portfolio) public portfolios;\r\n    mapping (uint => uint[]) private clientPortfolios;\r\n    mapping (uint => uint256) public clientBV;\r\n    mapping (uint => uint256) public cacheClientBV;\r\n    mapping (uint => uint256) public rebate2Client;\r\n\r\n    uint private clientBonusCount = 0;\r\n    uint private portfolioID = 0;\r\n    uint256 private minReentryValue = 1 * ethWei;\r\n    uint256 private maxReentryValue = 500 * ethWei;\r\n\r\n\r\n    struct WalletDetail {\r\n        uint percentage;\r\n        address payable toWallet;\r\n    }\r\n    mapping (uint => WalletDetail) public walletDetails;\r\n    uint private walletDetailsCount = 0;\r\n    mapping (uint => uint256) public poolBalance;\r\n    address payable defaultGasAddr = 0x0B6593C16CecC4407FE9f4727ceE367327EF4779;\r\n\r\n    struct WithdrawalDetail {\r\n        uint minDay;\r\n        uint charges;\r\n    }\r\n    mapping (uint => WithdrawalDetail) public withdrawalDetails;\r\n\r\n    struct RebateSetting{\r\n        uint max;\r\n        uint min;\r\n        uint percent;\r\n    }\r\n    mapping (uint => RebateSetting) public rebateSettings;\r\n    uint private rebateSettingsCount = 0;\r\n    uint public rebateDisplay = 0.33 * 100;\r\n\r\n    uint private prevRebatePercent = 0;\r\n    uint public defaultRebatePercent = 0.33 * 100;\r\n    uint public defaultRebateDays = 21;\r\n    uint public rebateDays = 1;\r\n    uint public lowestRebateFlag = 0;\r\n\r\n    mapping (uint => uint) public clientGoldmine;\r\n    mapping (uint => uint) public goldmineSettingsPer;\r\n    mapping (uint => uint) public goldmineDownlineSet;\r\n\r\n    uint private maxGoldmineLevel = 50;\r\n\r\n    uint256 public totalSales = 0;\r\n    uint256 public totalPayout = 0;\r\n\r\n    uint256 public cacheTotalSales = 0;\r\n    uint256 public cacheTotalPayout = 0;\r\n\r\n    modifier isHuman() {\r\n        require(msg.sender == tx.origin, \"sorry humans only - FOR REAL THIS TIME\");\r\n        _;\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    constructor() public {\r\n\r\n        /*prize*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 70 * 100,\r\n            toWallet : address(0)\r\n        });\r\n        \r\n        /*airDrop*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 2 * 100,\r\n            toWallet : address(0)\r\n        });\r\n        \r\n        /*recycle*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 5 * 100,\r\n            toWallet : address(0)\r\n        });\r\n        \r\n        /*gas*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 1 * 100,\r\n            toWallet : defaultGasAddr\r\n        });\r\n        \r\n        /*develop*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 3.5 * 100,\r\n            toWallet : 0x40568dfb53726E3341dE75E04310C570B183D614\r\n        });\r\n        \r\n        /*eco*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 15 * 100,\r\n            toWallet : 0x5076E5a092FDB2d456787bfa870390a72Ae51BF9\r\n        });\r\n\r\n        /*market*/\r\n        walletDetailsCount++;\r\n        walletDetails[walletDetailsCount] = WalletDetail({\r\n            percentage : 3.5 * 100,\r\n            toWallet : 0x05649CDE4c22f77b73Df306CA7057951c3cC0e21\r\n        });\r\n\r\n        /*withdrawal rate*/\r\n        //below 30days\r\n        withdrawalDetails[1] = WithdrawalDetail({\r\n            minDay : 0,\r\n            charges : 5 * 100\r\n        });\r\n\r\n        //more 30days\r\n        withdrawalDetails[2] = WithdrawalDetail({\r\n            minDay : 30,\r\n            charges : 1 * 100\r\n        });\r\n\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 69.99 * 100,\r\n            min : 61.34 * 100,\r\n            percent : 0.1 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 61.33 * 100,\r\n            min : 59.23 * 100,\r\n            percent : 0.2 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 59.22 * 100,\r\n            min : 57.11 * 100,\r\n            percent : 0.3 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 57.1 * 100,\r\n            min : 55 * 100,\r\n            percent : 0.4 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 54.99 * 100,\r\n            min : 52.88 * 100,\r\n            percent : 0.5 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 52.87 * 100,\r\n            min : 50.77 * 100,\r\n            percent : 0.6 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 50.76 * 100,\r\n            min : 48.65 * 100,\r\n            percent : 0.7 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 48.64 * 100,\r\n            min : 46.54 * 100,\r\n            percent : 0.8 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 46.53 * 100,\r\n            min : 44.42 * 100,\r\n            percent : 0.9 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 44.41 * 100,\r\n            min : 42.31 * 100,\r\n            percent : 1.0 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 42.3 * 100,\r\n            min : 40.19 * 100,\r\n            percent : 1.1 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 40.18 * 100,\r\n            min : 38.08 * 100,\r\n            percent : 1.2 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 38.07 * 100,\r\n            min : 35.96 * 100,\r\n            percent : 1.3 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 35.95 * 100,\r\n            min : 33.85 * 100,\r\n            percent : 1.4 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 33.84 * 100,\r\n            min : 31.73 * 100,\r\n            percent : 1.5 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 31.72 * 100,\r\n            min : 29.62 * 100,\r\n            percent : 1.6 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 29.61 * 100,\r\n            min : 27.5 * 100,\r\n            percent : 1.7 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 27.49 * 100,\r\n            min : 25.39 * 100,\r\n            percent : 1.8 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 25.38 * 100,\r\n            min : 23.27 * 100,\r\n            percent : 1.9 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 23.26 * 100,\r\n            min : 21.16 * 100,\r\n            percent : 2.0 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 21.15 * 100,\r\n            min : 19.04 * 100,\r\n            percent : 2.1 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 19.03 * 100,\r\n            min : 16.93 * 100,\r\n            percent : 2.2 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 16.92 * 100,\r\n            min : 14.81 * 100,\r\n            percent : 2.3 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 14.8 * 100,\r\n            min : 12.7 * 100,\r\n            percent : 2.4 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 12.69 * 100,\r\n            min : 10.58 * 100,\r\n            percent : 2.5 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 10.57 * 100,\r\n            min : 5.3 * 100,\r\n            percent : 2.6 * 100\r\n            });\r\n\r\n        rebateSettingsCount++;\r\n        rebateSettings[rebateSettingsCount] = RebateSetting({\r\n            max : 5.29 * 100,\r\n            min : 0 * 100,\r\n            percent : 2.7 * 100\r\n            });\r\n\r\n        goldmineSettingsPer[0] = 0;\r\n        goldmineDownlineSet[0] = 0;\r\n        goldmineSettingsPer[1] = 100 * 100;\r\n        goldmineDownlineSet[1] = 1;\r\n        goldmineSettingsPer[2] = 50 * 100;\r\n        goldmineDownlineSet[2] = 2;\r\n        goldmineSettingsPer[3] = 5 * 100;\r\n        goldmineDownlineSet[3] = 3;\r\n\r\n\r\n        Client memory client;\r\n        currClientID++;\r\n\r\n        client = Client({\r\n            isExist : true,\r\n            id : currClientID,\r\n            addr : ownerWallet,\r\n            referrerID : 0,\r\n            status : \"Active\",\r\n            createdOn : now,\r\n            inviteCode : \"\"\r\n            // downlines : new address[](0)\r\n        });\r\n        clients[ownerWallet] = client;\r\n        clientList[currClientID] = ownerWallet;\r\n        ownerID = currClientID;\r\n        TreeSponsor memory sponsor;\r\n        sponsor = TreeSponsor({\r\n            clientID : currClientID,\r\n            uplineID : 0,\r\n            level : 0\r\n        });\r\n        treeSponsors[currClientID] = sponsor;\r\n\r\n        for(uint i = 1; i <= walletDetailsCount;i++){\r\n            if(walletDetails[i].toWallet == address(0)){\r\n                poolBalance[i] = 0;\r\n            }\r\n        }\r\n\r\n        poolBalance[4] = 0;\r\n    }\r\n\r\n    function regMember(address _refAddr) private{\r\n        require(!clients[msg.sender].isExist, 'User exist');\r\n        require(clients[_refAddr].isExist, 'Invalid upline address');\r\n        require(strCompare(clients[_refAddr].status,\"Active\"), 'Invalid upline address');\r\n\r\n        uint sponsorID = clients[_refAddr].id;\r\n\r\n        Client memory client;\r\n        currClientID++;\r\n\r\n        client = Client({\r\n            isExist : true,\r\n            id : currClientID,\r\n            addr : msg.sender,\r\n            referrerID : sponsorID,\r\n            status : \"Pending\",\r\n            createdOn : now,\r\n            inviteCode : \"\"\r\n        });\r\n        \r\n        clients[msg.sender] = client;\r\n        clientList[currClientID] = msg.sender;\r\n\r\n        //insert tree\r\n        TreeSponsor memory sponsor;\r\n        sponsor = TreeSponsor({\r\n            clientID : currClientID,\r\n            uplineID : sponsorID,\r\n            level : treeSponsors[sponsorID].level +1\r\n        });\r\n        treeSponsors[currClientID] = sponsor;\r\n        sponsorDownlines[sponsorID].push(currClientID);\r\n        clientBV[currClientID] = 0;\r\n    }\r\n\r\n    function reEntry() public payable isHuman{\r\n        reEntry('');\r\n    }\r\n\r\n    function reEntry (string memory _inviteCode) public payable isHuman{\r\n        require(msg.value >= minReentryValue, \"The amount is less than minimum reentry amount\");\r\n        address refAddr;\r\n        if(clients[msg.sender].isExist == false){\r\n            require(!strCompare(_inviteCode, \"\"), \"invalid invite code\");\r\n            require(getInviteCode(_inviteCode), \"Invite code not exist\");\r\n            refAddr = codeMapping[_inviteCode];\r\n            require(refAddr != msg.sender, \"Invite Code can't be self\");\r\n            regMember(refAddr);\r\n        }\r\n        \r\n        uint clientID = clients[msg.sender].id;\r\n        require((msg.value + clientBV[clientID]) <= maxReentryValue, \"The amount is more than maximum reentry amount\");\r\n        Portfolio memory portfolio;\r\n\r\n        portfolioID ++;\r\n\r\n        portfolio = Portfolio({\r\n            id : portfolioID,\r\n            clientID : clientID,\r\n            amount : msg.value,\r\n            bonusValue : msg.value,\r\n            withdrawAmt : 0,\r\n            status : \"Pending\",\r\n            createdOn : now,\r\n            updatedOn : now\r\n            });\r\n\r\n        portfolios[portfolioID] = portfolio;\r\n        clientPortfolios[clientID].push(portfolioID);\r\n        \r\n        emit reEntryEvent(clientID, msg.sender, refAddr, msg.value, now,portfolioID);\r\n    }\r\n\r\n    function updateReentryStatus(address _client, uint256 _amount, uint _portfolio,string calldata _inviteCode) external payable onlyOwnerOrManager{\r\n\r\n        require(clients[_client].isExist, 'Invalid Member');\r\n        uint clientID = clients[_client].id;\r\n\r\n        require(strCompare(portfolios[_portfolio].status,\"Pending\"), 'Portfolio is not in pending status');\r\n        require(portfolios[_portfolio].amount == _amount , 'The amount is not match with portfolio amount');\r\n        require(portfolios[_portfolio].clientID == clientID, 'The portfolio is not belong to this member');\r\n        \r\n        if(strCompare(clients[_client].status,\"Pending\") == true){\r\n            clients[_client].status = \"Active\";\r\n            clients[_client].inviteCode = _inviteCode;\r\n            \r\n            codeMapping[_inviteCode] = _client;\r\n        }\r\n\r\n        portfolios[_portfolio].status = \"Active\";\r\n        portfolios[_portfolio].updatedOn = now;\r\n\r\n        clientBV[clientID] = clientBV[clientID].add(_amount);\r\n        distSales(_amount);\r\n\r\n        totalSales = totalSales.add(_amount);\r\n        // percentageDisplay();\r\n\r\n        emit updateReentryEvent(_client, _amount, now,portfolioID);\r\n    }\r\n\r\n    function distSales (uint256 _amount) private {\r\n        for(uint i = 1; i <= walletDetailsCount;i++){\r\n            uint256 transferAmount = 0;\r\n            transferAmount = _amount.mul(walletDetails[i].percentage).div(10000);\r\n            if(transferAmount > 0){\r\n                if(walletDetails[i].toWallet == address(0)){\r\n                    poolBalance[i] = poolBalance[i].add(transferAmount);\r\n                }else if(walletDetails[i].toWallet == defaultGasAddr){\r\n                    walletDetails[i].toWallet.transfer(transferAmount);\r\n\r\n                    poolBalance[i] = defaultGasAddr.balance;\r\n\r\n                }else{\r\n                    walletDetails[i].toWallet.transfer(transferAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    function percentageDisplay() private {\r\n        uint bonusPercent = 0;\r\n\r\n        if(rebateDays <= defaultRebateDays){\r\n        // for 21 days\r\n            bonusPercent = defaultRebatePercent;\r\n        }else{\r\n            uint overall = divider(totalPayout,cacheTotalSales, 4);\r\n            uint count = 1;\r\n            while(count <= rebateSettingsCount){\r\n                if(overall >= rebateSettings[count].min){\r\n                    bonusPercent = rebateSettings[count].percent;\r\n                    break;\r\n                }\r\n\r\n                count++;\r\n            }\r\n        }\r\n        rebateDisplay = bonusPercent;\r\n    }\r\n\r\n    /*function checkContractBalance() public view returns (uint){\r\n        return address(this).balance;\r\n    }*/\r\n\r\n    function getTodayBonus() external onlyOwnerOrManager returns (string memory) {\r\n\r\n        cacheTotalSales = totalSales;\r\n        cacheTotalPayout = totalPayout;\r\n\r\n        uint bonusPercent = 0;\r\n        // if(rebateDays <= defaultRebateDays){\r\n        //     // for 21 days\r\n        //     bonusPercent = defaultRebatePercent;\r\n        // }else{\r\n        //     uint overall = divider(calcPayout,calcSales, 4);\r\n        //     uint count = 1;\r\n        //     while(count <= rebateSettingsCount){\r\n        //         if(overall >= rebateSettings[count].min){\r\n        //             bonusPercent = rebateSettings[count].percent;\r\n        //             break;\r\n        //         }\r\n\r\n        //         count++;\r\n        //     }\r\n        // }\r\n        bonusPercent = rebateDisplay;\r\n\r\n        rebateDays++;\r\n\r\n        if(bonusPercent == rebateSettings[1].percent){\r\n            lowestRebateFlag ++;\r\n        }else{\r\n            lowestRebateFlag = 0;\r\n        }\r\n        prevRebatePercent = bonusPercent;\r\n\r\n\r\n        return(\"successful\");\r\n    }\r\n\r\n    function clientCache (uint start, uint end, uint[] calldata clientIDAry, uint[] calldata bonusValueAry) external onlyOwnerOrManager returns (string memory) {\r\n        clientBonusCount = 0;\r\n        uint i = 0;\r\n        uint bonusValue = 0;\r\n        for(uint clientID = start; clientID <= end;clientID++){\r\n            if(clientIDAry[i] == clientID){\r\n                bonusValue = bonusValueAry[i];\r\n                i++;\r\n            }else{\r\n                bonusValue = 0;\r\n            }\r\n\r\n            cacheClientBV[clientID] = bonusValue;\r\n            rebate2Client[clientID] = 0;\r\n            clientBonusCount++;\r\n        }\r\n\r\n        return(\"successful\");\r\n    }\r\n\r\n    function rebate (uint start, uint end) external onlyOwnerOrManager{\r\n        require(clientBonusCount > 0, 'No bonus to count');\r\n\r\n        uint[] memory rebateBonusReport= new uint[](100);\r\n        uint[] memory bvReport= new uint[](100);\r\n        uint[] memory clientReport = new uint[](100);\r\n\r\n        uint j = 0;\r\n        for(uint i = start; i <= end;i++){\r\n\r\n            uint bvAmt = 0;\r\n            uint payAmt = 0;\r\n\r\n            bvAmt = cacheClientBV[i];\r\n            if(bvAmt < minReentryValue) continue;\r\n\r\n            payAmt = bvAmt.mul(prevRebatePercent).div(10000);\r\n            if(payAmt > 0){\r\n                rebate2Client[i] = payAmt;\r\n\r\n                clientReport[j] = i;\r\n                bvReport[j] = bvAmt;\r\n                rebateBonusReport[j] = payAmt;\r\n                j++;\r\n            }\r\n        }\r\n        \r\n        emit rebateReport(clientReport,rebateBonusReport,bvReport,prevRebatePercent);\r\n    }\r\n\r\n    function getGoldmineRank(uint start, uint end) external onlyOwnerOrManager returns (string memory){\r\n\r\n        for(uint i = start; i <= end;i++){\r\n            uint downlineCounts = 0;\r\n\r\n            for(uint j = 0; j < sponsorDownlines[i].length;j++){\r\n                if(cacheClientBV[sponsorDownlines[i][j]] >= minReentryValue){\r\n                    downlineCounts += 1;\r\n                }\r\n            }\r\n            // downlineCounts = sponsorDownlines[i].length;\r\n            if(downlineCounts > 3 ){\r\n                downlineCounts = 3;\r\n            }\r\n\r\n            if(cacheClientBV[i] >= maxReentryValue){\r\n                downlineCounts = 3;\r\n            }else if(cacheClientBV[i] < minReentryValue){\r\n                downlineCounts = 0;\r\n            }\r\n\r\n            clientGoldmine[i] = goldmineDownlineSet[downlineCounts];\r\n        }\r\n        return (\"successful\");\r\n    }\r\n\r\n\r\n\r\n    function goldmine(uint start, uint end) external onlyOwnerOrManager{\r\n\r\n        uint[] memory fromClient = new uint[](250);\r\n        uint[] memory clientAry = new uint[](250);\r\n        uint[] memory bvAmtAry = new uint[](250);\r\n        uint[] memory payAmtAry = new uint[](250);\r\n        uint[] memory bonusPercentAry = new uint[](250);\r\n        uint[] memory fromLvl = new uint[](250);\r\n\r\n        uint k = 0;\r\n\r\n        for(uint clientID = start ; clientID <= end;clientID++){\r\n\r\n            if(rebate2Client[clientID] <= 0 ) continue;\r\n\r\n            uint targetID = clientID;\r\n            uint lvl = 1;\r\n\r\n            while(lvl <= maxGoldmineLevel){\r\n                uint payAmt = 0;\r\n                uint bonusPercent = 0;\r\n                uint frmLvl = lvl;\r\n                uint uplineID = treeSponsors[targetID].uplineID;\r\n                if(uplineID == 10001){\r\n                    break;\r\n                }\r\n                \r\n                targetID = uplineID;\r\n\r\n                if(lvl <= clientGoldmine[uplineID]){\r\n                    bonusPercent = goldmineSettingsPer[lvl];\r\n                }else if(lvl > 3 && clientGoldmine[uplineID] == 3){\r\n                    uint perLvl = 3;\r\n                    bonusPercent = goldmineSettingsPer[perLvl];\r\n                }else{\r\n                    bonusPercent = 0;\r\n                }\r\n                \r\n                lvl++;\r\n\r\n                if(bonusPercent <= 0){\r\n                    continue;\r\n                }\r\n                \r\n                payAmt = rebate2Client[clientID].mul(bonusPercent).div(10000);\r\n\r\n                if(payAmt > 0 ){\r\n                    fromClient[k] = clientID;\r\n                    clientAry[k] = targetID;\r\n                    fromLvl[k] = frmLvl;\r\n                    bonusPercentAry[k] = bonusPercent;\r\n                    bvAmtAry[k] = rebate2Client[clientID];\r\n                    payAmtAry[k] = payAmt;\r\n                    k++;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit goldmineReport(fromClient,clientAry,fromLvl,bonusPercentAry,bvAmtAry,payAmtAry);\r\n    }\r\n\r\n    function payPoolAmount(uint _wallet, address[] calldata _addrAry, uint[] calldata _amountAry) external payable onlyOwnerOrManager {\r\n        //for prize pool,airDrop,recycle\r\n        require (_wallet > 0,\"Invalid Wallet\");\r\n        require (poolBalance[_wallet] > 0,\"Insufficent Pool Balance\");\r\n        require (_amountAry.length > 0,\"Empty Amount\");\r\n\r\n        uint256[] memory payoutArray = new uint256[](_addrAry.length);\r\n\r\n        for(uint i = 0; i < _addrAry.length; i++){\r\n            payoutArray[i] = 0;\r\n\r\n            if(!strCompare(clients[_addrAry[i]].status, \"Active\")){\r\n                continue;\r\n            }\r\n\r\n            uint payAmt = _amountAry[i];\r\n\r\n            if(poolBalance[_wallet] < _amountAry[i]){\r\n                payAmt = poolBalance[_wallet];\r\n            }\r\n\r\n            if (poolBalance[_wallet] >= payAmt){\r\n                address payable userAddr = address(uint160(_addrAry[i]));\r\n                poolBalance[_wallet] = poolBalance[_wallet].sub(payAmt);\r\n                \r\n                if(_wallet == 1){\r\n                    totalPayout = totalPayout.add(payAmt);\r\n                    cacheTotalPayout = cacheTotalPayout.add(payAmt);\r\n                }\r\n                \r\n                userAddr.transfer(payAmt);\r\n                payoutArray[i] = payAmt;\r\n            }\r\n        }\r\n\r\n        percentageDisplay();\r\n\r\n        emit payoutReport(_wallet,_addrAry,payoutArray);\r\n    }\r\n\r\n    function withdrawal(uint portfolio) public payable isHuman{\r\n\r\n        require (clients[msg.sender].isExist,\"Invalid Member\");\r\n        require (strCompare(portfolios[portfolio].status, \"Active\"),\"This portfolio is not active portfolio.\");\r\n        uint clientID = clients[msg.sender].id;\r\n        require (portfolios[portfolio].clientID == clientID,\"Invalid Portfolio\");\r\n        \r\n        uint256 portAmt = portfolios[portfolio].bonusValue;\r\n        uint chargesPercent = 0;\r\n        if(now - portfolios[portfolio].updatedOn <= 30 days){\r\n            chargesPercent = withdrawalDetails[1].charges;\r\n        }else{\r\n            chargesPercent = withdrawalDetails[2].charges;\r\n        }\r\n\r\n        uint256 adminCharges = portAmt.mul(chargesPercent).div(10000);\r\n\r\n        uint256 withdrawalAmount = portAmt.sub(adminCharges);\r\n\r\n        require (clientBV[clientID] >= withdrawalAmount,\"Withdrawal Amount is bigger than BV Amount.\");\r\n        require (clientBV[clientID] >= portAmt,\"Portfolio Amount is bigger than BV Amount.\");\r\n        \r\n        if(withdrawalAmount > poolBalance[1]){\r\n            withdrawalAmount = poolBalance[1];\r\n        }\r\n\r\n        require (poolBalance[1] >= withdrawalAmount,\"Insufficent Pool Balance. Cannot Withdrawal.\");\r\n\r\n        // if (poolBalance[1] >= portAmt && poolBalance[1] + portAmt >= poolBalance[1] && poolBalance[1] - portAmt <= poolBalance[1]){\r\n            portfolios[portfolio].status = \"Terminated\";\r\n            portfolios[portfolio].withdrawAmt = withdrawalAmount;\r\n\r\n            portfolios[portfolio].updatedOn = now;\r\n\r\n            clientBV[clientID] = clientBV[clientID].sub(portAmt);\r\n            poolBalance[1] = poolBalance[1].sub(withdrawalAmount);\r\n            \r\n            totalPayout = totalPayout.add(withdrawalAmount);\r\n            // percentageDisplay();\r\n\r\n            msg.sender.transfer(withdrawalAmount);\r\n        // }\r\n    }\r\n\r\n    function airDrop(address[] calldata _topFund,address[] calldata _topSponsor) external view returns (uint256,uint256){\r\n        uint topFundLength = _topFund.length;\r\n        uint topSponsorLength = _topSponsor.length;\r\n\r\n        //airDrop \r\n        uint256 bonusAmount = poolBalance[2].div(2);\r\n\r\n        //for top fund\r\n        uint256 bonusTopFund = bonusAmount.div(topFundLength);\r\n        uint256 bonusTopSponsor = bonusAmount.div(topSponsorLength);\r\n\r\n        return (bonusTopFund,bonusTopSponsor);\r\n    }\r\n\r\n    function ranking(uint[] calldata _clientIDAry, uint[] calldata _uplinesAry, uint[] calldata _rankAry, uint[] calldata _uplineNum) external{\r\n        //override\r\n        uint[] memory clientAry = new uint[](50);\r\n        uint[] memory fromClient = new uint[](50);\r\n        uint[] memory bonusPercentAry = new uint[](50);\r\n\r\n        uint j = 0;\r\n\r\n        for(uint client = 0; client < _clientIDAry.length; client++){\r\n            uint downlinePercentage = 0;\r\n            \r\n            for(uint uplines = j; uplines < _uplineNum[client]; uplines++){\r\n                uint curPercentage = _rankAry[uplines];\r\n                if(curPercentage < downlinePercentage) {\r\n                    curPercentage = downlinePercentage;\r\n                }\r\n    \r\n                fromClient[j] = _clientIDAry[client];\r\n                clientAry[j] = _uplinesAry[uplines];\r\n                bonusPercentAry[j] = curPercentage.sub(downlinePercentage);\r\n    \r\n                downlinePercentage = curPercentage;\r\n                j++;\r\n            }\r\n        }\r\n        emit rankingReport(clientAry, fromClient, bonusPercentAry);\r\n    }\r\n\r\n    function checkReset() public view returns (string memory) {\r\n        if(lowestRebateFlag >= 5){\r\n            return \"Reset\";\r\n        }else if(poolBalance[1] <= 0){\r\n            return \"Reset\";\r\n        }\r\n        return \"Nothing happen\";\r\n    }\r\n    \r\n    function reset() external payable onlyOwnerOrManager{\r\n        string memory resettable=checkReset();\r\n        require(strCompare(resettable,\"Reset\"), 'Cannot Reset'); \r\n        \r\n        rebateDays = 1;\r\n        prevRebatePercent = defaultRebatePercent;\r\n        rebateDisplay = defaultRebatePercent;\r\n        totalSales = 0;\r\n        totalPayout = 0;\r\n        cacheTotalSales = 0;\r\n        cacheTotalPayout = 0;\r\n\r\n        for(uint clientID = 10002; clientID <= currClientID;clientID++){\r\n            clientBV[clientID] = 0;\r\n        }\r\n\r\n        for(uint portfolioId = 1; portfolioId <= portfolioID; portfolioId++){\r\n            if(!strCompare(portfolios[portfolioId].status,\"Active\")){\r\n                continue;\r\n            }\r\n            portfolios[portfolioId].status = \"Flushed\";\r\n            portfolios[portfolioId].updatedOn = now;\r\n        }\r\n\r\n        if(poolBalance[1] > 0){\r\n            //prize got money transfer to eco[6]\r\n            walletDetails[6].toWallet.transfer(poolBalance[1]);\r\n            poolBalance[1] = poolBalance[1].sub(poolBalance[1]);\r\n        }\r\n\r\n        if(poolBalance[2] > 0){\r\n            //airdrop got money transfer to eco[6]\r\n            walletDetails[6].toWallet.transfer(poolBalance[2]);\r\n            poolBalance[2] = poolBalance[2].sub(poolBalance[2]);\r\n        }\r\n    }\r\n\r\n    function payRecyclePool(uint[] calldata _addrAry, uint[] calldata _percentAry) external payable onlyOwnerOrManager{\r\n        if(poolBalance[3] > 0){\r\n\r\n            uint256 poolAmt = poolBalance[3];\r\n            //send to last 10 accounts that have invest\r\n            for(uint i = 0; i < _addrAry.length; i++){\r\n                address payable userAddr = address(uint160(_addrAry[i]));\r\n                if(_percentAry[i] > 0){\r\n                    uint payAmt = poolAmt.mul(_percentAry[i]).div(10000);\r\n                    if(poolBalance[3] >= payAmt){\r\n                        userAddr.transfer(payAmt);\r\n                        poolBalance[3] = poolBalance[3].sub(payAmt);\r\n                    }\r\n                }\r\n            }  \r\n        }\r\n    }\r\n\r\n    function getInviteCode(string memory _inviteCode) public view returns (bool) {\r\n        address addr = codeMapping[_inviteCode];\r\n        return uint(addr) != 0;\r\n    }\r\n\r\n    function updateInviteCode (address _clientAddress, string calldata _inviteCode) external onlyOwnerOrManager{\r\n        require(clients[_clientAddress].isExist, 'Invalid member');\r\n        clients[_clientAddress].inviteCode = _inviteCode;\r\n        codeMapping[_inviteCode] = _clientAddress;\r\n    }\r\n\r\n    function clearPool (uint _wallet, uint _toWallet) external payable onlyOwnerOrManager{\r\n        require (_wallet > 0,\"Invalid Wallet\");\r\n        require (_toWallet > 0,\"Invalid To Wallet\");\r\n        require (poolBalance[_wallet] > 0,\"Insufficent Pool Balance\");        \r\n        if(poolBalance[_wallet] > 0){\r\n            walletDetails[_toWallet].toWallet.transfer(poolBalance[_wallet]);\r\n            poolBalance[_wallet] = poolBalance[_wallet].sub(poolBalance[_wallet]);\r\n        }\r\n    }\r\n\r\n    function updateWallet(uint _wallet, address payable _updateAddress) external onlyOwnerOrManager{\r\n        require (_wallet > 3,\"Invalid Wallet\");\r\n        require (walletDetails[_wallet].toWallet != address(0),\"Invalid Wallet\");\r\n        require (_updateAddress != address(0),\"Invalid Wallet Address\");\r\n\r\n        walletDetails[_wallet].toWallet = _updateAddress;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_topFund\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_topSponsor\",\"type\":\"address[]\"}],\"name\":\"airDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clientAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_inviteCode\",\"type\":\"string\"}],\"name\":\"updateInviteCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cacheClientBV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"goldmineDownlineSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"portfolios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedOn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_clientIDAry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_uplinesAry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rankAry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_uplineNum\",\"type\":\"uint256[]\"}],\"name\":\"ranking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowestRebateFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rebateSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_portfolio\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_inviteCode\",\"type\":\"string\"}],\"name\":\"updateReentryStatus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reEntry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"clientIDAry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonusValueAry\",\"type\":\"uint256[]\"}],\"name\":\"clientCache\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clientGoldmine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"goldmineSettingsPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"treeSponsors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"clientID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uplineID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createdOn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"inviteCode\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultRebateDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTodayBonus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addrAry\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountAry\",\"type\":\"uint256[]\"}],\"name\":\"payPoolAmount\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebateDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"portfolio\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_inviteCode\",\"type\":\"string\"}],\"name\":\"reEntry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultRebatePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rebate2Client\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toWallet\",\"type\":\"uint256\"}],\"name\":\"clearPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkReset\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sponsorDownlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cacheTotalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_addrAry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentAry\",\"type\":\"uint256[]\"}],\"name\":\"payRecyclePool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getGoldmineRank\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wallet\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_updateAddress\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_inviteCode\",\"type\":\"string\"}],\"name\":\"getInviteCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clientBV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"rebate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebateDisplay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"toWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cacheTotalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charges\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"goldmine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_clientID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_portfolioId\",\"type\":\"uint256\"}],\"name\":\"reEntryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"clientReport\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rebateBonusReport\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bvReport\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevRebatePercent\",\"type\":\"uint256\"}],\"name\":\"rebateReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fromClient\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"clientAry\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fromLvl\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bonusPercentAry\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bvAmtAry\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payAmtAry\",\"type\":\"uint256[]\"}],\"name\":\"goldmineReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"clientAry\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fromClient\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bonusPercentAry\",\"type\":\"uint256[]\"}],\"name\":\"rankingReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_portfolioId\",\"type\":\"uint256\"}],\"name\":\"updateReentryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addrAry\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"payoutArray\",\"type\":\"uint256[]\"}],\"name\":\"payoutReport\",\"type\":\"event\"}]","ContractName":"SRules","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://101231dbbe582a2f44afb0523e6543055103b7835288a9adff03ccc315ab2b73"}]}