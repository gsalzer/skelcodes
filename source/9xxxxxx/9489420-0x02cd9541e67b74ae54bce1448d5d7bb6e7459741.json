{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\r\n */\r\ncontract OpenZeppelinUpgradesOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Adds new owner approval to the Ownable implementation.\r\n */\r\ncontract UAXCoinOwnable is OpenZeppelinUpgradesOwnable {\r\n    address private _newOwner;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the new owner.\r\n     */\r\n    function newOwner() public view returns (address) {\r\n        return _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender == _newOwner, \"Ownable: caller is not a new owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev New owner should approve ownership to avoid transfering to an invalid address.\r\n     */\r\n    function acceptOwnership() public onlyNewOwner {\r\n        super._transferOwnership(_newOwner);\r\n        _newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Token accounts contract.\r\n */\r\ncontract UAXCoinAccounts is UAXCoinOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _nonces;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    UAXCoinController private _ctrl;\r\n\r\n    mapping (address => bool) private _whitelist;\r\n    mapping (address => bool) private _frozen;\r\n\r\n    /**\r\n     * @dev Indicates that some accounts may be frozen\r\n     */\r\n    bool private _hasFrozenAccounts;\r\n\r\n    /**\r\n     * @dev Number of frozen accounts\r\n     */\r\n    uint16 private _frozenCount;\r\n\r\n    /**\r\n     * @dev Initial values\r\n     */\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier for methods that should be called only from the controller contract\r\n     */\r\n    modifier onlyController {\r\n        require(msg.sender == address(_ctrl), \"Ownable: not a controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Move tokens from one address to another\r\n     */\r\n    function transfer(address from, address to, uint256 value ) external onlyController {\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Move tokens from one address to two other addresses (e.g. send with fee collection)\r\n     */\r\n    function transferToTwo(address from, address to1, address to2, uint256 value1, uint256 value2) external onlyController {\r\n        uint256 value = value1.add(value2);\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to1] = _balances[to1].add(value1);\r\n        _balances[to2] = _balances[to2].add(value2);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to balance and totalSupply\r\n     */\r\n    function addBalanceAndTotalSupply(address owner, uint256 value) external onlyController {\r\n        _balances[owner] = _balances[owner].add(value);\r\n        _totalSupply = _totalSupply.add(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to balance and totalSupply\r\n     */\r\n    function subBalanceAndTotalSupply(address owner, uint256 value) external onlyController {\r\n        _balances[owner] = _balances[owner].sub(value);\r\n        _totalSupply = _totalSupply.sub(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Set allowance value\r\n     */\r\n    function setAllowance(address owner, address spender, uint256 allowance) external onlyController {\r\n        _allowances[owner][spender] = allowance;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets account as whitelisted one\r\n     */\r\n    function addToWhitelist(address account) external onlyController {\r\n        _whitelist[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets account as not-whitelisted one\r\n     */\r\n    function removeFromWhiteList(address account) external onlyController {\r\n        _whitelist[account] = false;\r\n    }\r\n\r\n    function nonce(address account) external onlyController view returns (uint256) {\r\n        return _nonces[account];\r\n    }\r\n\r\n    function setNonce(address account, uint256 _nonce) external onlyController {\r\n        _nonces[account] = _nonce;\r\n    }\r\n    /**\r\n     * @dev Returns true for frozen accounts\r\n     */\r\n    function isFrozen(address account) external view onlyController returns(bool) {\r\n        return _frozen[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if any of given accounts are frozen\r\n     */\r\n    function anyFrozen(address account1, address account2) external view onlyController returns(bool) {\r\n        return _frozen[account1] || _frozen[account2];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new controller contract address\r\n     */\r\n    function setController(UAXCoinController ctrl) public onlyOwner {\r\n        _ctrl = ctrl;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view onlyController returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view onlyController returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view onlyController returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true for whitelisted accounts\r\n     */\r\n    function isWhitelisted(address account) public view onlyController returns(bool) {\r\n        return _whitelist[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true for whitelisted accounts\r\n     */\r\n    function bothWhitelisted(address account1, address account2) public view onlyController returns(bool) {\r\n        return _whitelist[account1] && _whitelist[account2];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets account as frozen one\r\n     */\r\n    function freeze(address account) public onlyController {\r\n        if (!_frozen[account]) {\r\n            _frozenCount++;\r\n            _frozen[account] = true;\r\n            _hasFrozenAccounts = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets account as unfrozen one\r\n     */\r\n    function unfreeze(address account) public onlyController {\r\n        if (_frozen[account]) {\r\n            _frozenCount--;\r\n            _frozen[account] = false;\r\n            _hasFrozenAccounts = (_frozenCount > 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if there were frozen accounts\r\n     */\r\n    function hasFrozen() public view returns(bool) {\r\n        return _hasFrozenAccounts;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Upgradeable coin controller contract.\r\n */\r\ncontract UAXCoinController is IERC20, UAXCoinOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    UAXCoinAccounts private _accounts;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n    * @dev Whitelisted account only mode\r\n    */\r\n    bool private _useWhiteList;\r\n\r\n    /**\r\n     * @dev Contract has frozen accounts\r\n     */\r\n    bool private _hasFrozenAccounts;\r\n\r\n    /**\r\n     * @dev Emitted when the freeze is triggered for a specific account.\r\n     */\r\n    event AccountFreeze(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the unfreeze is triggered for a specific account.\r\n     */\r\n    event AccountUnfreeze(address account);\r\n\r\n    /**\r\n     * @dev Sets initial data\r\n     */\r\n    function initialize() public onlyOwner {\r\n        _name = 'UAX';\r\n        _symbol = 'UAX';\r\n        _decimals = 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new token name.\r\n     */\r\n    function setName(string memory newName) public onlyOwner {\r\n        _name = newName;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new token symbol.\r\n     */\r\n    function setSymbol(string memory newSymbol) public onlyOwner {\r\n        _symbol = newSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Accounts contract\r\n     */\r\n    function setAccounts(UAXCoinAccounts accounts) public onlyOwner {\r\n        _accounts = accounts;\r\n        _hasFrozenAccounts = accounts.hasFrozen();\r\n    }\r\n\r\n    /**\r\n     * @dev totalSupply proxy\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _accounts.totalSupply();\r\n    }\r\n\r\n    /**\r\n     * @dev balanceOf proxy\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _accounts.balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev allowance proxy\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _accounts.allowance(owner, spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whitelisted accounts only mode state\r\n     */\r\n    function isWhitelistedModeActive() public view returns (bool) {\r\n        return _useWhiteList;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or resets mode when only whitelisted accounts are allowed\r\n     */\r\n    function allowWhitelistedAccountsOnly(bool value) public onlyOwner {\r\n        _useWhiteList = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Freeze account\r\n     */\r\n    function freeze(address account) public onlyOwner {\r\n        _accounts.freeze(account);\r\n        _hasFrozenAccounts = true;\r\n        emit AccountFreeze(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze account\r\n     */\r\n    function unfreeze(address account) public onlyOwner {\r\n        _accounts.unfreeze(account);\r\n        _hasFrozenAccounts = _accounts.hasFrozen();\r\n        emit AccountUnfreeze(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Marks address as whitelisted\r\n     */\r\n    function addToWhitelist(address account) public onlyOwner {\r\n        _accounts.addToWhitelist(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Clears address whitelisted flag\r\n     */\r\n    function removeFromWhiteList(address account) public onlyOwner {\r\n        _accounts.removeFromWhiteList(account);\r\n    }\r\n\r\n    function setNonce(address _address, uint256 _nonce) private {\r\n        _accounts.setNonce(_address, _nonce);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer\r\n     */\r\n    function transfer(address to, uint256 value) public returns(bool) {\r\n        if (_useWhiteList) {\r\n            require(_accounts.bothWhitelisted(msg.sender, to), \"Unknown account\");\r\n        }\r\n        if (_hasFrozenAccounts) {\r\n            require(!_accounts.anyFrozen(msg.sender, to), \"Frozen account\");\r\n        }\r\n        \r\n        _transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 approve implementation\r\n     */\r\n    function approve(address spender, uint256 value) public returns(bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 transferFrom implementation\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns(bool) {\r\n        if (_useWhiteList) {\r\n            require(_accounts.bothWhitelisted(from, to), \"Unknown account\");\r\n        }\r\n        if (_hasFrozenAccounts) {\r\n            require(!_accounts.anyFrozen(from, to), \"Frozen account\");\r\n        }\r\n        uint256 allowanceValue = _accounts.allowance(from, msg.sender);\r\n        allowanceValue = allowanceValue.sub(value);\r\n        _approve(from, msg.sender, allowanceValue);\r\n\r\n        _transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     */\r\n    function increaseAllowance(address spender, uint256 value) public returns (bool) {\r\n        uint256 allowanceValue = _accounts.allowance(msg.sender, spender);\r\n        allowanceValue = allowanceValue.add(value);\r\n        _approve(msg.sender, spender, allowanceValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 value)  public returns (bool) {\r\n        uint256 allowanceValue = _accounts.allowance(msg.sender, spender);\r\n        allowanceValue = allowanceValue.sub(value);\r\n        _approve(msg.sender, spender, allowanceValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Issue tokens to an account\r\n     */\r\n    function issue(uint256 value) public onlyOwner {\r\n        _accounts.addBalanceAndTotalSupply(msg.sender, value);\r\n        emit Transfer(address(0x0), msg.sender, value);\r\n    }\r\n\r\n    function delegatedTransfer(\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        if (_useWhiteList) {\r\n            require(_accounts.isWhitelisted(_to), \"Unknown account\");\r\n        }\r\n        if (_hasFrozenAccounts) {\r\n            require(!_accounts.isFrozen(_to), \"Frozen account\");\r\n        }\r\n\r\n        address _from = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    address(this), msg.sender, _to, _value, _fee, _nonce\r\n                )\r\n            ),\r\n            _v, _r, _s\r\n        );\r\n\r\n        if (_useWhiteList) {\r\n            require(_accounts.isWhitelisted(_from), \"Unknown account\");\r\n        }\r\n        if (_hasFrozenAccounts) {\r\n            require(!_accounts.isFrozen(_from), \"Frozen account\");\r\n        }\r\n        require(_nonce == nonce(_from), \"Invalid nonce\");\r\n        require(_fee.add(_value) <= balanceOf(_from), \"Invalid balance\");\r\n        require(\r\n            _to != address(0),\r\n            \"ERC20: delegated transfer to the zero address\"\r\n        );\r\n\r\n        setNonce(_from, _nonce.add(1));\r\n\r\n        _accounts.transferToTwo(_from, _to, msg.sender, _value, _fee);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(_from, msg.sender, _fee);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function delegatedMultiTransfer(\r\n        address[] memory _to_arr,\r\n        uint256[] memory _value_arr,\r\n        uint256[] memory _fee_arr,\r\n        uint256[] memory _nonce_arr,\r\n        uint8[] memory _v_arr,\r\n        bytes32[] memory _r_arr,\r\n        bytes32[] memory _s_arr\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(\r\n            _to_arr.length == _value_arr.length &&\r\n            _to_arr.length == _fee_arr.length &&\r\n            _to_arr.length == _nonce_arr.length &&\r\n            _to_arr.length == _v_arr.length &&\r\n            _to_arr.length == _r_arr.length &&\r\n            _to_arr.length == _s_arr.length,\r\n            'Incorrect input length'\r\n        );\r\n\r\n        for (uint i = 0; i < _to_arr.length; i++) {\r\n            delegatedTransfer(\r\n                _to_arr[i],\r\n                _value_arr[i],\r\n                _fee_arr[i],\r\n                _nonce_arr[i],\r\n                _v_arr[i],\r\n                _r_arr[i],\r\n                _s_arr[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function nonce(address _address) public view returns (uint256) {\r\n        return _accounts.nonce(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens from an account\r\n     */\r\n    function burn(uint256 value) public onlyOwner {\r\n        _accounts.subBalanceAndTotalSupply(msg.sender, value);\r\n        emit Transfer(msg.sender, address(0x0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev ERC20 transfer implementation\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _accounts.transfer(from, to, value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _accounts.setAllowance(owner, spender, value);\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"allowWhitelistedAccountsOnly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to_arr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value_arr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fee_arr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nonce_arr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v_arr\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r_arr\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s_arr\",\"type\":\"bytes32[]\"}],\"name\":\"delegatedMultiTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegatedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhitelistedModeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract UAXCoinAccounts\",\"name\":\"accounts\",\"type\":\"address\"}],\"name\":\"setAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UAXCoinController","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://fc3af43e2763b20577215582a9ac7ce1932a7143e90a978b2c5288bbf06baadd"}]}