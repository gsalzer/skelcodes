{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/Ownable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Claimable.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/iface/IDelayedTransaction.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title IDelayedTransaction\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract IDelayedTransaction\r\n{\r\n    event TransactionDelayed(\r\n        uint    id,\r\n        uint    timestamp,\r\n        address to,\r\n        uint    value,\r\n        bytes   data,\r\n        uint    delay\r\n    );\r\n\r\n    event TransactionCancelled(\r\n        uint    id,\r\n        uint    timestamp,\r\n        address to,\r\n        uint    value,\r\n        bytes   data\r\n    );\r\n\r\n    event TransactionExecuted(\r\n        uint    timestamp,\r\n        address to,\r\n        uint    value,\r\n        bytes   data\r\n    );\r\n\r\n    event PendingTransactionExecuted(\r\n        uint    id,\r\n        uint    timestamp,\r\n        address to,\r\n        uint    value,\r\n        bytes   data\r\n    );\r\n\r\n    struct Transaction\r\n    {\r\n        uint    id;\r\n        uint    timestamp;\r\n        address to;\r\n        uint    value;\r\n        bytes   data;\r\n    }\r\n\r\n    struct DelayedFunction\r\n    {\r\n        address to;\r\n        bytes4  functionSelector;\r\n        uint    delay;\r\n    }\r\n\r\n    // The maximum amount of time (in seconds) a pending transaction can be executed\r\n    // (so the amount of time than can pass after the mandatory function specific delay).\r\n    // If the transaction hasn't been executed before then it can be cancelled so it is removed\r\n    // from the pending transaction list.\r\n    uint public timeToLive;\r\n\r\n    // Active list of delayed functions (delay > 0)\r\n    DelayedFunction[] public delayedFunctions;\r\n\r\n    // Active list of pending transactions\r\n    Transaction[] public pendingTransactions;\r\n\r\n    /// @dev Executes a pending transaction.\r\n    /// @param to The contract address to call\r\n    /// @param data The call data\r\n    function transact(\r\n        address to,\r\n        bytes   calldata data\r\n        )\r\n        external\r\n        payable;\r\n\r\n    /// @dev Executes a pending transaction.\r\n    /// @param transactionId The id of the pending transaction.\r\n    function executeTransaction(\r\n        uint transactionId\r\n        )\r\n        external;\r\n\r\n    /// @dev Cancels a pending transaction.\r\n    /// @param transactionId The id of the pending transaction.\r\n    function cancelTransaction(\r\n        uint transactionId\r\n        )\r\n        external;\r\n\r\n    /// @dev Cancels all pending transactions.\r\n    function cancelAllTransactions()\r\n        external;\r\n\r\n    /// @dev Gets the delay for the given function\r\n    /// @param functionSelector The function selector.\r\n    /// @return The delay of the function.\r\n    function getFunctionDelay(\r\n        address to,\r\n        bytes4  functionSelector\r\n        )\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Gets the number of pending transactions.\r\n    /// @return The number of pending transactions.\r\n    function getNumPendingTransactions()\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    /// @dev Gets the number of functions that have a delay.\r\n    /// @return The number of delayed functions.\r\n    function getNumDelayedFunctions()\r\n        external\r\n        view\r\n        returns (uint);\r\n}\r\n\r\n// File: contracts/lib/AddressUtil.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for addresses\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary AddressUtil\r\n{\r\n    using AddressUtil for *;\r\n\r\n    function isContract(\r\n        address addr\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint32 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return (size > 0);\r\n    }\r\n\r\n    function toPayable(\r\n        address addr\r\n        )\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(addr));\r\n    }\r\n\r\n    // Works like address.send but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETH(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n        address payable recipient = to.toPayable();\r\n        /* solium-disable-next-line */\r\n        (success, ) = recipient.call.value(amount).gas(gasLimit)(\"\");\r\n    }\r\n\r\n    // Works like address.transfer but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETHAndVerify(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        success = to.sendETH(amount, gasLimit);\r\n        require(success, \"TRANSFER_FAILURE\");\r\n    }\r\n}\r\n\r\n// File: contracts/lib/BytesUtil.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for bytes\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary BytesUtil\r\n{\r\n    function bytesToBytes32(\r\n        bytes memory b,\r\n        uint  offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return bytes32(bytesToUintX(b, offset, 32));\r\n    }\r\n\r\n    function bytesToUint(\r\n        bytes memory b,\r\n        uint  offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        return bytesToUintX(b, offset, 32);\r\n    }\r\n\r\n    function bytesToAddress(\r\n        bytes memory b,\r\n        uint  offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        return address(bytesToUintX(b, offset, 20) & 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function bytesToUint16(\r\n        bytes memory b,\r\n        uint  offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint16)\r\n    {\r\n        return uint16(bytesToUintX(b, offset, 2) & 0xFFFF);\r\n    }\r\n\r\n    function bytesToBytes4(\r\n        bytes memory b,\r\n        uint  offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (bytes4 data)\r\n    {\r\n        return bytes4(bytesToBytesX(b, offset, 4) & 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000);\r\n    }\r\n\r\n    function bytesToBytesX(\r\n        bytes memory b,\r\n        uint  offset,\r\n        uint  numBytes\r\n        )\r\n        private\r\n        pure\r\n        returns (bytes32 data)\r\n    {\r\n        require(b.length >= offset + numBytes, \"INVALID_SIZE\");\r\n        assembly {\r\n            data := mload(add(b, add(32, offset)))\r\n        }\r\n    }\r\n\r\n    function bytesToUintX(\r\n        bytes memory b,\r\n        uint  offset,\r\n        uint  numBytes\r\n        )\r\n        private\r\n        pure\r\n        returns (uint data)\r\n    {\r\n        require(b.length >= offset + numBytes, \"INVALID_SIZE\");\r\n        assembly {\r\n            data := mload(add(add(b, numBytes), offset))\r\n        }\r\n    }\r\n\r\n    function subBytes(\r\n        bytes memory b,\r\n        uint  offset\r\n        )\r\n        internal\r\n        pure\r\n        returns (bytes memory data)\r\n    {\r\n        require(b.length >= offset + 32, \"INVALID_SIZE\");\r\n        assembly {\r\n            data := add(add(b, 32), offset)\r\n        }\r\n    }\r\n\r\n    function fastSHA256(\r\n        bytes memory data\r\n        )\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        bytes32[] memory result = new bytes32[](1);\r\n        bool success;\r\n        assembly {\r\n             let ptr := add(data, 32)\r\n             success := staticcall(sub(gas, 2000), 2, ptr, mload(data), add(result, 32), 32)\r\n        }\r\n        require(success, \"SHA256_FAILED\");\r\n        return result[0];\r\n    }\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function decodeFloat(\r\n        uint f\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint value)\r\n    {\r\n        uint numBitsMantissa = 23;\r\n        uint exponent = f >> numBitsMantissa;\r\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\r\n        value = mantissa * (10 ** exponent);\r\n    }\r\n}\r\n\r\n// File: contracts/impl/DelayedTransaction.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title DelayedOwner\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Base class for an Owner contract where certain functions have\r\n///      a mandatory delay for security purposes.\r\ncontract DelayedTransaction is IDelayedTransaction\r\n{\r\n    using AddressUtil for address payable;\r\n    using BytesUtil   for bytes;\r\n    using MathUint    for uint;\r\n\r\n    // Map from address and function to the functions's location+1 in the `delayedFunctions` array.\r\n    mapping (address => mapping (bytes4 => uint)) private delayedFunctionMap;\r\n\r\n    // Map from transaction ID to the transaction's location+1 in the `pendingTransactions` array.\r\n    mapping (uint => uint) private pendingTransactionMap;\r\n\r\n    // Used to generate a unique identifier for a delayed transaction\r\n    uint private totalNumDelayedTransactions = 0;\r\n\r\n    modifier onlyAuthorized\r\n    {\r\n        require(isAuthorizedForTransactions(msg.sender), \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint    _timeToLive\r\n        )\r\n        public\r\n    {\r\n        timeToLive = _timeToLive;\r\n    }\r\n\r\n    // If the function that is called has no delay the function is called immediately,\r\n    // otherwise the function call is stored on-chain and can be executed later using\r\n    // `executeTransaction` when the necessary time has passed.\r\n    function transact(\r\n        address to,\r\n        bytes   calldata data\r\n        )\r\n        external\r\n        payable\r\n        onlyAuthorized\r\n    {\r\n        transactInternal(to, msg.value, data);\r\n    }\r\n\r\n    function executeTransaction(\r\n        uint transactionId\r\n        )\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        Transaction memory transaction = getTransaction(transactionId);\r\n\r\n        // Make sure the delay is respected\r\n        bytes4 functionSelector = transaction.data.bytesToBytes4(0);\r\n        uint delay = getFunctionDelay(transaction.to, functionSelector);\r\n        require(now >= transaction.timestamp.add(delay), \"TOO_EARLY\");\r\n        require(now <= transaction.timestamp.add(delay).add(timeToLive), \"TOO_LATE\");\r\n\r\n        // Remove the transaction\r\n        removeTransaction(transaction.id);\r\n\r\n        // Exectute the transaction\r\n        (bool success, bytes memory returnData) = exectuteTransaction(transaction);\r\n\r\n        emit PendingTransactionExecuted(\r\n            transaction.id,\r\n            transaction.timestamp,\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data\r\n        );\r\n\r\n        // Return the same data the original transaction would\r\n        // (this will return the data even though this function doesn't have a return value in solidity)\r\n        assembly {\r\n            switch success\r\n            case 0 { revert(add(returnData, 32), mload(returnData)) }\r\n            default { return(add(returnData, 32), mload(returnData)) }\r\n        }\r\n    }\r\n\r\n    function cancelTransaction(\r\n        uint transactionId\r\n        )\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        cancelTransactionInternal(transactionId);\r\n    }\r\n\r\n    function cancelAllTransactions()\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        // First cache all transactions ids of the transactions we will remove\r\n        uint[] memory transactionIds = new uint[](pendingTransactions.length);\r\n        for(uint i = 0; i < pendingTransactions.length; i++) {\r\n            transactionIds[i] = pendingTransactions[i].id;\r\n        }\r\n        // Now remove all delayed transactions\r\n        for(uint i = 0; i < transactionIds.length; i++) {\r\n            cancelTransactionInternal(transactionIds[i]);\r\n        }\r\n    }\r\n\r\n    function getFunctionDelay(\r\n        address to,\r\n        bytes4  functionSelector\r\n        )\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint pos = delayedFunctionMap[to][functionSelector];\r\n        if (pos == 0) {\r\n            return 0;\r\n        } else {\r\n            return delayedFunctions[pos - 1].delay;\r\n        }\r\n    }\r\n\r\n    function getNumPendingTransactions()\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return pendingTransactions.length;\r\n    }\r\n\r\n    function getNumDelayedFunctions()\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return delayedFunctions.length;\r\n    }\r\n\r\n    // == Internal Functions ==\r\n\r\n    function transactInternal(\r\n        address to,\r\n        uint    value,\r\n        bytes   memory data\r\n        )\r\n        internal\r\n    {\r\n        Transaction memory transaction = Transaction(\r\n            totalNumDelayedTransactions,\r\n            now,\r\n            to,\r\n            value,\r\n            data\r\n        );\r\n\r\n        bytes4 functionSelector = transaction.data.bytesToBytes4(0);\r\n        uint delay = getFunctionDelay(transaction.to, functionSelector);\r\n        if (delay == 0) {\r\n            (bool success, bytes memory returnData) = exectuteTransaction(transaction);\r\n            emit TransactionExecuted(\r\n                transaction.timestamp,\r\n                transaction.to,\r\n                transaction.value,\r\n                transaction.data\r\n            );\r\n            // Return the same data the original transaction would\r\n            // (this will return the data even though this function doesn't have a return value in solidity)\r\n            assembly {\r\n                switch success\r\n                case 0 { revert(add(returnData, 32), mload(returnData)) }\r\n                default { return(add(returnData, 32), mload(returnData)) }\r\n            }\r\n        } else {\r\n            pendingTransactions.push(transaction);\r\n            pendingTransactionMap[transaction.id] = pendingTransactions.length;\r\n            emit TransactionDelayed(\r\n                transaction.id,\r\n                transaction.timestamp,\r\n                transaction.to,\r\n                transaction.value,\r\n                transaction.data,\r\n                delay\r\n            );\r\n            totalNumDelayedTransactions++;\r\n        }\r\n    }\r\n\r\n    function setFunctionDelay(\r\n        address to,\r\n        bytes4  functionSelector,\r\n        uint    delay\r\n        )\r\n        internal\r\n    {\r\n        // Check if the function already has a delay\r\n        uint pos = delayedFunctionMap[to][functionSelector];\r\n        if (pos > 0) {\r\n            if (delay > 0) {\r\n                // Just update the delay\r\n                delayedFunctions[pos - 1].delay = delay;\r\n            } else {\r\n                // Remove the delayed function\r\n                uint size = delayedFunctions.length;\r\n                if (pos != size) {\r\n                    DelayedFunction memory lastOne = delayedFunctions[size - 1];\r\n                    delayedFunctions[pos - 1] = lastOne;\r\n                    delayedFunctionMap[lastOne.to][lastOne.functionSelector] = pos;\r\n                }\r\n                delayedFunctions.length -= 1;\r\n                delete delayedFunctionMap[to][functionSelector];\r\n            }\r\n        } else if (delay > 0) {\r\n            // Add the new delayed function\r\n            DelayedFunction memory delayedFunction = DelayedFunction(\r\n                to,\r\n                functionSelector,\r\n                delay\r\n            );\r\n            delayedFunctions.push(delayedFunction);\r\n            delayedFunctionMap[to][functionSelector] = delayedFunctions.length;\r\n        }\r\n    }\r\n\r\n    function exectuteTransaction(\r\n        Transaction memory transaction\r\n        )\r\n        internal\r\n        returns (bool success, bytes memory returnData)\r\n    {\r\n        // solium-disable-next-line security/no-call-value\r\n        (success, returnData) = transaction.to.call.value(transaction.value)(transaction.data);\r\n    }\r\n\r\n    function cancelTransactionInternal(\r\n        uint transactionId\r\n        )\r\n        internal\r\n    {\r\n        Transaction memory transaction = getTransaction(transactionId);\r\n\r\n        // Remove the transaction\r\n        removeTransaction(transaction.id);\r\n\r\n        emit TransactionCancelled(\r\n            transaction.id,\r\n            transaction.timestamp,\r\n            transaction.to,\r\n            transaction.value,\r\n            transaction.data\r\n        );\r\n\r\n        // Return the transaction value (if there is any)\r\n        uint value = transaction.value;\r\n        if (value > 0) {\r\n            msg.sender.sendETHAndVerify(value, gasleft());\r\n        }\r\n    }\r\n\r\n    function getTransaction(\r\n        uint transactionId\r\n        )\r\n        internal\r\n        view\r\n        returns (Transaction storage transaction)\r\n    {\r\n        uint pos = pendingTransactionMap[transactionId];\r\n        require(pos != 0, \"TRANSACTION_NOT_FOUND\");\r\n        transaction = pendingTransactions[pos - 1];\r\n    }\r\n\r\n    function removeTransaction(\r\n        uint transactionId\r\n        )\r\n        internal\r\n    {\r\n        uint pos = pendingTransactionMap[transactionId];\r\n        require(pos != 0, \"TRANSACTION_NOT_FOUND\");\r\n\r\n        uint size = pendingTransactions.length;\r\n        if (pos != size) {\r\n            Transaction memory lastOne = pendingTransactions[size - 1];\r\n            pendingTransactions[pos - 1] = lastOne;\r\n            pendingTransactionMap[lastOne.id] = pos;\r\n        }\r\n\r\n        pendingTransactions.length -= 1;\r\n        delete pendingTransactionMap[transactionId];\r\n    }\r\n\r\n    function isAuthorizedForTransactions(address sender)\r\n        internal\r\n        view\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/impl/owners/DelayedOwner.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/// @title  DelayedOwner\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract DelayedOwner is DelayedTransaction, Claimable\r\n{\r\n    address public defaultContract;\r\n\r\n    constructor(\r\n        address _defaultContract,\r\n        uint    _timeToLive\r\n        )\r\n        DelayedTransaction(_timeToLive)\r\n        public\r\n    {\r\n        defaultContract = _defaultContract;\r\n    }\r\n\r\n    function()\r\n        external\r\n        payable\r\n    {\r\n        // Don't do anything if msg.sender isn't the owner (e.g. when receiving ETH)\r\n        if (msg.sender != owner) {\r\n            return;\r\n        }\r\n        transactInternal(defaultContract, msg.value, msg.data);\r\n    }\r\n\r\n    function isAuthorizedForTransactions(address sender)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return sender == owner;\r\n    }\r\n\r\n    function setFunctionDelay(\r\n        bytes4  functionSelector,\r\n        uint    delay\r\n        )\r\n        internal\r\n    {\r\n        setFunctionDelay(defaultContract, functionSelector, delay);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ReentrancyGuard.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ReentrancyGuard\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Exposes a modifier that guards a function against reentrancy\r\n///      Changing the value of the same storage value multiple times in a transaction\r\n///      is cheap (starting from Istanbul) so there is no need to minimize\r\n///      the number of times the value is changed\r\ncontract ReentrancyGuard\r\n{\r\n    //The default value must be 0 in order to work behind a proxy.\r\n    uint private _guardValue;\r\n\r\n    // Use this modifier on a function to prevent reentrancy\r\n    modifier nonReentrant()\r\n    {\r\n        // Check if the guard value has its original value\r\n        require(_guardValue == 0, \"REENTRANCY\");\r\n\r\n        // Set the value to something else\r\n        _guardValue = 1;\r\n\r\n        // Function body\r\n        _;\r\n\r\n        // Set the value back\r\n        _guardValue = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/iface/ILoopring.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/// @title ILoopring\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ILoopring is Claimable, ReentrancyGuard\r\n{\r\n    string  constant public version = \"\"; // must override this\r\n\r\n    uint    public exchangeCreationCostLRC;\r\n    address public universalRegistry;\r\n    address public lrcAddress;\r\n\r\n    event ExchangeInitialized(\r\n        uint    indexed exchangeId,\r\n        address indexed exchangeAddress,\r\n        address indexed owner,\r\n        address         operator,\r\n        bool            onchainDataAvailability\r\n    );\r\n\r\n    /// @dev Initializes and registers an exchange.\r\n    ///      This function should only be callable by the UniversalRegistry contract.\r\n    ///      Also note that this function can only be called once per exchange instance.\r\n    /// @param  exchangeAddress The address of the exchange to initialize and register.\r\n    /// @param  exchangeId The unique exchange id.\r\n    /// @param  owner The owner of the exchange.\r\n    /// @param  operator The operator of the exchange.\r\n    /// @param  onchainDataAvailability True if \"Data Availability\" is turned on for this\r\n    ///         exchange. Note that this value can not be changed once the exchange is initialized.\r\n    /// @return exchangeId The id of the exchange.\r\n    function initializeExchange(\r\n        address exchangeAddress,\r\n        uint    exchangeId,\r\n        address owner,\r\n        address payable operator,\r\n        bool    onchainDataAvailability\r\n        )\r\n        external;\r\n}\r\n\r\n// File: contracts/iface/ILoopringV3.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/// @title ILoopringV3\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ILoopringV3 is ILoopring\r\n{\r\n    // == Events ==\r\n\r\n    event ExchangeStakeDeposited(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ExchangeStakeWithdrawn(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ExchangeStakeBurned(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ProtocolFeeStakeDeposited(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event ProtocolFeeStakeWithdrawn(\r\n        uint    indexed exchangeId,\r\n        uint            amount\r\n    );\r\n\r\n    event SettingsUpdated(\r\n        uint            time\r\n    );\r\n\r\n    // == Public Variables ==\r\n    struct Exchange\r\n    {\r\n        address exchangeAddress;\r\n        uint    exchangeStake;\r\n        uint    protocolFeeStake;\r\n    }\r\n\r\n    mapping (uint => Exchange) internal exchanges;\r\n\r\n    string  constant public version = \"3.0\";\r\n\r\n    address public wethAddress;\r\n    uint    public totalStake;\r\n    address public blockVerifierAddress;\r\n    address public downtimeCostCalculator;\r\n    uint    public maxWithdrawalFee;\r\n    uint    public withdrawalFineLRC;\r\n    uint    public tokenRegistrationFeeLRCBase;\r\n    uint    public tokenRegistrationFeeLRCDelta;\r\n    uint    public minExchangeStakeWithDataAvailability;\r\n    uint    public minExchangeStakeWithoutDataAvailability;\r\n    uint    public revertFineLRC;\r\n    uint8   public minProtocolTakerFeeBips;\r\n    uint8   public maxProtocolTakerFeeBips;\r\n    uint8   public minProtocolMakerFeeBips;\r\n    uint8   public maxProtocolMakerFeeBips;\r\n    uint    public targetProtocolTakerFeeStake;\r\n    uint    public targetProtocolMakerFeeStake;\r\n\r\n    address payable public protocolFeeVault;\r\n\r\n    // == Public Functions ==\r\n    /// @dev Updates the global exchange settings.\r\n    ///      This function can only be called by the owner of this contract.\r\n    ///\r\n    ///      Warning: these new values will be used by existing and\r\n    ///      new Loopring exchanges.\r\n    function updateSettings(\r\n        address payable _protocolFeeVault,   // address(0) not allowed\r\n        address _blockVerifierAddress,       // address(0) not allowed\r\n        address _downtimeCostCalculator,     // address(0) allowed\r\n        uint    _exchangeCreationCostLRC,\r\n        uint    _maxWithdrawalFee,\r\n        uint    _tokenRegistrationFeeLRCBase,\r\n        uint    _tokenRegistrationFeeLRCDelta,\r\n        uint    _minExchangeStakeWithDataAvailability,\r\n        uint    _minExchangeStakeWithoutDataAvailability,\r\n        uint    _revertFineLRC,\r\n        uint    _withdrawalFineLRC\r\n        )\r\n        external;\r\n\r\n    /// @dev Updates the global protocol fee settings.\r\n    ///      This function can only be called by the owner of this contract.\r\n    ///\r\n    ///      Warning: these new values will be used by existing and\r\n    ///      new Loopring exchanges.\r\n    function updateProtocolFeeSettings(\r\n        uint8 _minProtocolTakerFeeBips,\r\n        uint8 _maxProtocolTakerFeeBips,\r\n        uint8 _minProtocolMakerFeeBips,\r\n        uint8 _maxProtocolMakerFeeBips,\r\n        uint  _targetProtocolTakerFeeStake,\r\n        uint  _targetProtocolMakerFeeStake\r\n        )\r\n        external;\r\n\r\n    /// @dev Returns whether the Exchange has staked enough to commit blocks\r\n    ///      Exchanges with on-chain data-availaiblity need to stake at least\r\n    ///      minExchangeStakeWithDataAvailability, exchanges without\r\n    ///      data-availability need to stake at least\r\n    ///      minExchangeStakeWithoutDataAvailability.\r\n    /// @param exchangeId The id of the exchange\r\n    /// @param onchainDataAvailability True if the exchange has on-chain\r\n    ///        data-availability, else false\r\n    /// @return True if the exchange has staked enough, else false\r\n    function canExchangeCommitBlocks(\r\n        uint exchangeId,\r\n        bool onchainDataAvailability\r\n        )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @dev Gets the amount of staked LRC for an exchange.\r\n    /// @param exchangeId The id of the exchange\r\n    /// @return stakedLRC The amount of LRC\r\n    function getExchangeStake(\r\n        uint exchangeId\r\n        )\r\n        public\r\n        view\r\n        returns (uint stakedLRC);\r\n\r\n    /// @dev Burns a certain amount of staked LRC for a specific exchange.\r\n    ///      This function is meant to be called only from exchange contracts.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @return burnedLRC The amount of LRC burned. If the amount is greater than\r\n    ///         the staked amount, all staked LRC will be burned.\r\n    function burnExchangeStake(\r\n        uint exchangeId,\r\n        uint amount\r\n        )\r\n        external\r\n        returns (uint burnedLRC);\r\n\r\n    /// @dev Stakes more LRC for an exchange.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  amountLRC The amount of LRC to stake\r\n    /// @return stakedLRC The total amount of LRC staked for the exchange\r\n    function depositExchangeStake(\r\n        uint exchangeId,\r\n        uint amountLRC\r\n        )\r\n        external\r\n        returns (uint stakedLRC);\r\n\r\n    /// @dev Withdraws a certain amount of staked LRC for an exchange to the given address.\r\n    ///      This function is meant to be called only from within exchange contracts.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  recipient The address to receive LRC\r\n    /// @param  requestedAmount The amount of LRC to withdraw\r\n    /// @return stakedLRC The amount of LRC withdrawn\r\n    function withdrawExchangeStake(\r\n        uint    exchangeId,\r\n        address recipient,\r\n        uint    requestedAmount\r\n        )\r\n        external\r\n        returns (uint amount);\r\n\r\n    /// @dev Stakes more LRC for an exchange.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  amountLRC The amount of LRC to stake\r\n    /// @return stakedLRC The total amount of LRC staked for the exchange\r\n    function depositProtocolFeeStake(\r\n        uint exchangeId,\r\n        uint amountLRC\r\n        )\r\n        external\r\n        returns (uint stakedLRC);\r\n\r\n    /// @dev Withdraws a certain amount of staked LRC for an exchange to the given address.\r\n    ///      This function is meant to be called only from within exchange contracts.\r\n    /// @param  exchangeId The id of the exchange\r\n    /// @param  recipient The address to receive LRC\r\n    /// @param  amount The amount of LRC to withdraw\r\n    function withdrawProtocolFeeStake(\r\n        uint    exchangeId,\r\n        address recipient,\r\n        uint    amount\r\n        )\r\n        external;\r\n\r\n    /// @dev Gets the protocol fee values for an exchange.\r\n    /// @param exchangeId The id of the exchange\r\n    /// @param onchainDataAvailability True if the exchange has on-chain\r\n    ///        data-availability, else false\r\n    /// @return takerFeeBips The protocol taker fee\r\n    /// @return makerFeeBips The protocol maker fee\r\n    function getProtocolFeeValues(\r\n        uint exchangeId,\r\n        bool onchainDataAvailability\r\n        )\r\n        external\r\n        view\r\n        returns (\r\n            uint8 takerFeeBips,\r\n            uint8 makerFeeBips\r\n        );\r\n\r\n    /// @dev Returns the exchange's protocol fee stake.\r\n    /// @param  exchangeId The exchange's id.\r\n    /// @return protocolFeeStake The exchange's protocol fee stake.\r\n    function getProtocolFeeStake(\r\n        uint exchangeId\r\n        )\r\n        external\r\n        view\r\n        returns (uint protocolFeeStake);\r\n}\r\n\r\n// File: contracts/iface/ITokenPriceProvider.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n/// @title ITokenPriceProvider\r\n/// @author Brecht Devos  - <brcht@loopring.org>\r\ncontract ITokenPriceProvider\r\n{\r\n    /// @dev Converts USD to LRC\r\n    /// @param usd The amount of USD (10**18 == 1 USD)\r\n    /// @return The amount of LRC\r\n    function usd2lrc(uint usd)\r\n        external\r\n        view\r\n        returns (uint);\r\n}\r\n\r\n// File: contracts/impl/owners/LoopringV3Owner.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/// @title LoopringV3Owner\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract LoopringV3Owner is DelayedOwner\r\n{\r\n    ILoopringV3 public loopringV3;\r\n    ITokenPriceProvider public provider;\r\n\r\n    struct Costs\r\n    {\r\n        uint minExchangeStakeDA;\r\n        uint minExchangeStakeWDA;\r\n        uint revertFine;\r\n    }\r\n\r\n    Costs public USD;\r\n\r\n    event LRCValuesUpdated(\r\n        uint minExchangeStakeWithDataAvailabilityLRC,\r\n        uint minExchangeStakeWithoutDataAvailabilityLRC,\r\n        uint revertFineLRC\r\n    );\r\n\r\n    constructor(\r\n        ILoopringV3                _loopringV3,\r\n        ITokenPriceProvider        _provider,\r\n        uint                       _minExchangeStakeWithDataAvailabilityUSD,\r\n        uint                       _minExchangeStakeWithoutDataAvailabilityUSD,\r\n        uint                       _revertFineUSD\r\n        )\r\n        DelayedOwner(address(_loopringV3), 3 days)\r\n        public\r\n    {\r\n        loopringV3 = _loopringV3;\r\n        provider = _provider;\r\n        USD.minExchangeStakeDA = _minExchangeStakeWithDataAvailabilityUSD;\r\n        USD.minExchangeStakeWDA = _minExchangeStakeWithoutDataAvailabilityUSD;\r\n        USD.revertFine = _revertFineUSD;\r\n\r\n        setFunctionDelay(loopringV3.transferOwnership.selector, 7 days);\r\n        setFunctionDelay(loopringV3.updateSettings.selector, 7 days);\r\n        setFunctionDelay(loopringV3.updateProtocolFeeSettings.selector, 7 days);\r\n    }\r\n\r\n    /// @dev Updates the costs on the Loopring contract in LRC using the USD values provided.\r\n    ///      Can be called by anyone.\r\n    function updateValuesInLRC()\r\n        external\r\n    {\r\n        // Get the current costs in LRC\r\n        Costs memory lrcCosts = Costs(\r\n            provider.usd2lrc(USD.minExchangeStakeDA),\r\n            provider.usd2lrc(USD.minExchangeStakeWDA),\r\n            provider.usd2lrc(USD.revertFine)\r\n        );\r\n\r\n        // Set the new LRC values on the protocol contract immediately\r\n        loopringV3.updateSettings(\r\n            loopringV3.protocolFeeVault(),\r\n            loopringV3.blockVerifierAddress(),\r\n            loopringV3.downtimeCostCalculator(),\r\n            loopringV3.exchangeCreationCostLRC(),\r\n            loopringV3.maxWithdrawalFee(),\r\n            loopringV3.tokenRegistrationFeeLRCBase(),\r\n            loopringV3.tokenRegistrationFeeLRCDelta(),\r\n            lrcCosts.minExchangeStakeDA,\r\n            lrcCosts.minExchangeStakeWDA,\r\n            lrcCosts.revertFine,\r\n            loopringV3.withdrawalFineLRC()\r\n        );\r\n\r\n        emit LRCValuesUpdated(\r\n            lrcCosts.minExchangeStakeDA,\r\n            lrcCosts.minExchangeStakeWDA,\r\n            lrcCosts.revertFine\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILoopringV3\",\"name\":\"_loopringV3\",\"type\":\"address\"},{\"internalType\":\"contract ITokenPriceProvider\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeStakeWithDataAvailabilityUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeStakeWithoutDataAvailabilityUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revertFineUSD\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExchangeStakeWithDataAvailabilityLRC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExchangeStakeWithoutDataAvailabilityLRC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revertFineLRC\",\"type\":\"uint256\"}],\"name\":\"LRCValuesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"PendingTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"TransactionDelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minExchangeStakeDA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minExchangeStakeWDA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revertFine\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelAllTransactions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"cancelTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delayedFunctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"getFunctionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumDelayedFunctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumPendingTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loopringV3\",\"outputs\":[{\"internalType\":\"contract ILoopringV3\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"contract ITokenPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeToLive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transact\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateValuesInLRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoopringV3Owner","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008745074248634f37327ee748137c8b31238002c7000000000000000000000000388110217e4d194d501bb52c3ab28dc709eb450d0000000000000000000000000000000000000000000002a5a058fc295ed0000000000000000000000000000000000000000000000000054b40b1f852bda00000000000000000000000000000000000000000000000000006c6b935b8bbd40000","Library":"","LicenseType":"None","SwarmSource":"bzzr://aae56f03ad22e4babc17d9a34858f9f78060b9b3a6a18fffa934cc02854a2e3a"}]}