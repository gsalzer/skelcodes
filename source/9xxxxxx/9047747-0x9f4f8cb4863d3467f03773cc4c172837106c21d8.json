{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.11 <0.7.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n     \r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\nlibrary ECDSA {\r\n\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n}\r\ncontract Ownable {\r\n    address  private  _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Signable is Ownable{\r\n    using Roles for Roles.Role;\r\n\r\n    event SignerAdded(address indexed account);\r\n    event SignerRemoved(address indexed account);\r\n    \r\n    Roles.Role private _signers;\r\n \r\n    constructor ()  internal {\r\n        addSigner(msg.sender);\r\n    }\r\n    function isSigner(address account) public view returns (bool) {\r\n        return _signers.has(account);\r\n    }\r\n    \r\n    function addSigner(address account) public onlyOwner {\r\n        _addSigner(account);\r\n    }\r\n\r\n    function renounceSigner() public onlyOwner {\r\n        _removeSigner(msg.sender);\r\n    }\r\n\r\n    function _addSigner(address account) internal {\r\n        _signers.add(account);\r\n        emit SignerAdded(account);\r\n    }\r\n\r\n    function _removeSigner(address account) internal {\r\n        _signers.remove(account);\r\n        emit SignerRemoved(account);\r\n    }\r\n}\r\ncontract Management is Ownable{\r\n    using Roles for Roles.Role;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n    \r\n    Roles.Role private _managers;\r\n    \r\n    enum State { Active,Locked}\r\n    \r\n    State public state;\r\n    \r\n    modifier inState(State _state) {\r\n        require(state == _state,\"Invalid state\");\r\n        _;\r\n    }\r\n\r\n    constructor ()  internal {\r\n        addManager(msg.sender);\r\n    }\r\n    \r\n    function setState(State _state) \r\n        public\r\n        onlyManager\r\n    {\r\n        state = _state;\r\n    }\r\n    \r\n    modifier onlyManager()  {\r\n        require(isManager(msg.sender), \"Management: caller is not the manager\");\r\n        _;\r\n    }\r\n    function isManager(address account) public view returns (bool) {\r\n        return _managers.has(account);\r\n    }\r\n    function addManager(address account) public onlyOwner {\r\n        _addManager(account);\r\n    }\r\n\r\n    function renounceManager() public onlyOwner {\r\n        _removeManager(msg.sender);\r\n    }\r\n\r\n    function _addManager(address account) internal {\r\n        _managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    function _removeManager(address account) internal {\r\n        _managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n    \r\n}\r\n\r\ncontract ECDSAMock is Signable {\r\n    using ECDSA for bytes32;\r\n    \r\n    function recover(bytes32 hash, bytes memory signature) \r\n        public \r\n        pure \r\n        returns (address) \r\n    {\r\n        return hash.recover(signature);\r\n    }\r\n\r\n    function isValidSigner(address _user,address _feerecipient,uint256 _amount,uint256 _fee,uint256 _signblock,uint256 _valid,bytes memory signature) \r\n        public \r\n        view \r\n        returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(abi.encodePacked(_user,_feerecipient,_amount,_fee,_signblock,_valid));\r\n        //bytes memory data = abi.encodePacked(msg.sender,_v);\r\n        address signaddress = recover(hash,signature);\r\n        return isSigner(signaddress);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FundToken {\r\n    TokenCreator public creater;\r\n    IERC20 private _usdtAddress;\r\n    struct User {\r\n        uint64 id;\r\n        uint64 referrerId;\r\n        address payable[] referrals;\r\n        mapping(uint8 => uint64) levelExpired;\r\n    }\r\n    uint8 public constant REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint64 public constant PERIOD_LENGTH = 1 days;\r\n    bool public onlyAmbassadors = true;\r\n    address payable public ownerWallet;\r\n    uint64 public lastUserId;\r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint => uint8) public priceLevel;\r\n    mapping(address => User) public users;\r\n    mapping(uint64 => address payable) public userList;    \r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    uint256 constant internal magnitude = 2**64;\r\n    event Registration(address indexed user, address referrer);\r\n    event LevelBought(address indexed user, uint8 level);\r\n    event GetMoneyForLevel(address indexed user, address indexed referral, uint8 level);\r\n    event SendMoneyError(address indexed user, address indexed referral, uint8 level);\r\n    event LostMoneyForLevel(address indexed user, address indexed referral, uint8 level);    \r\n    event onWithdraw(address indexed customerAddress,uint256 ethereumWithdrawn);\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    constructor(IERC20 usdt)   \r\n        public \r\n    {\r\n        creater = TokenCreator(msg.sender);\r\n        _usdtAddress = usdt;\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.approve.selector,msg.sender, 2**256-1));\r\n    }\r\n    \r\n    function getCreater() \r\n        public \r\n        view \r\n        returns(address )\r\n    {\r\n        return address(creater);\r\n    }\r\n    \r\n    function payForLevel(uint8 level, address user) private {\r\n        address payable referrer;\r\n\r\n        if (level%2 == 0) {\r\n            referrer = userList[users[userList[users[user].referrerId]].referrerId];\r\n        } else {\r\n            referrer = userList[users[user].referrerId];\r\n        }\r\n\r\n        if(users[referrer].id == 0) {\r\n            referrer = userList[1];\r\n        } \r\n\r\n        if(users[referrer].levelExpired[level] >= now) {\r\n            if (referrer.send(levelPrice[level])) {\r\n                emit GetMoneyForLevel(referrer, msg.sender, level);\r\n            } else {\r\n                emit SendMoneyError(referrer, msg.sender, level);\r\n            }\r\n        } else {\r\n            emit LostMoneyForLevel(referrer, msg.sender, level);\r\n\r\n            payForLevel(level, referrer);\r\n        }\r\n    }   \r\n    function regUser(uint64 referrerId) public  {\r\n        require(users[msg.sender].id == 0, 'User exist');\r\n        require(referrerId > 0 && referrerId <= lastUserId, 'Incorrect referrer Id');\r\n        \r\n        if(users[userList[referrerId]].referrals.length >= REFERRER_1_LEVEL_LIMIT) {\r\n            address freeReferrer = findFreeReferrer(userList[referrerId]);\r\n            referrerId = users[freeReferrer].id;\r\n        }\r\n            \r\n        lastUserId++;\r\n\r\n        users[msg.sender] = User({\r\n            id: lastUserId,\r\n            referrerId: referrerId,\r\n            referrals: new address payable[](0) \r\n        });\r\n        \r\n        userList[lastUserId] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = uint64(now + PERIOD_LENGTH);\r\n\r\n        users[userList[referrerId]].referrals.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit Registration(msg.sender, userList[referrerId]);\r\n    }\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referrals.length < REFERRER_1_LEVEL_LIMIT) \r\n            return _user;\r\n\r\n        address[] memory referrals = new address[](256);\r\n        address[] memory referralsBuf = new address[](256);\r\n\r\n        referrals[0] = users[_user].referrals[0];\r\n        referrals[1] = users[_user].referrals[1];\r\n\r\n        uint32 j = 2;\r\n        \r\n        while(true) {\r\n            for(uint32 i = 0; i < j; i++) {\r\n                if(users[referrals[i]].referrals.length < 1) {\r\n                    return referrals[i];\r\n                }\r\n            }\r\n            \r\n            for(uint32 i = 0; i < j; i++) {\r\n                if (users[referrals[i]].referrals.length < REFERRER_1_LEVEL_LIMIT) {\r\n                    return referrals[i];\r\n                }\r\n            }\r\n\r\n            for(uint32 i = 0; i < j; i++) {\r\n                referralsBuf[i] = users[referrals[i]].referrals[0];\r\n                referralsBuf[j+i] = users[referrals[i]].referrals[1];\r\n            }\r\n\r\n            j = j*2;\r\n\r\n            for(uint32 i = 0; i < j; i++) {\r\n                referrals[i] = referralsBuf[i];\r\n            }\r\n        }\r\n    }\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n    }\r\n    function myDividends(bool _includeReferralBonus) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) \r\n        private \r\n    {\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ninterface BETGAME {\r\n    function bet(uint256 amount,address beter,uint8 color,uint256 _round,uint256 orderid) external returns (bool);\r\n}\r\n\r\ncontract TokenCreator is ECDSAMock ,Management{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    uint256 public round;\r\n    mapping(uint256 => uint256) public id;\r\n\r\n    \r\n    IERC20 private _usdtAddress;\r\n    mapping(address => bool) private _games;\r\n    mapping(bytes10 => address)  public referrals;\r\n\r\n    \r\n    struct userModel {\r\n        address fundaddress;\r\n        bytes10 referral;\r\n        bytes10 referrerCode;\r\n    }\r\n    \r\n    struct userInverstModel {\r\n        uint256 totalinverstmoney;\r\n        uint256 totalinverstcount;\r\n        uint256 balance;\r\n        uint256 freeze;\r\n        uint256 candraw;\r\n        uint256 lastinversttime;\r\n        uint256 lastwithDrawtime;\r\n        bool luckRewardRecived;\r\n        uint256 luckRewardAmount;\r\n    }\r\n    \r\n\r\n    mapping(address => mapping(uint256 => userInverstModel)) public userinverstinfo;\r\n\r\n    mapping(address => userModel) public userinfo;\r\n    struct inverstModel {\r\n        uint256 lowest;\r\n        uint256 highest;\r\n        uint256 interval;\r\n        uint256 basics;\r\n    }\r\n    \r\n    struct drawithDrawModel {\r\n        uint256 lowest;\r\n        uint256 highest;\r\n        uint256 interval;\r\n    }\r\n    drawithDrawModel public withDrawinfo;\r\n    \r\n    inverstModel public inverstinfo;\r\n    mapping(bytes => bool) public signatures;\r\n    \r\n\r\n    modifier nonReentrant() {\r\n        id[round] += 1;\r\n        uint256 localCounter = id[round];\r\n        _;\r\n        require(localCounter == id[round], \"ReentrancyGuard: reentrant call\");\r\n    }\r\n    \r\n    event Inverst(address indexed user,uint256  indexed amount,uint256 indexed round) ;\r\n    event CreateFund(address indexed user,address indexed fund);\r\n    event WithDraw(address indexed user,uint256 indexed amount,bytes indexed  signature);\r\n    event DrawLuckReward(address indexed user,uint256 indexed amount ,uint256 indexed round);\r\n    event BatchLuckRewards(address[] indexed lucks,uint256 indexed amount,uint256  indexed indexed round);\r\n    event AllocationFunds(address indexed from,address indexed to,uint256 indexed amount);\r\n    \r\n    constructor() \r\n        public\r\n    {\r\n        _usdtAddress = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        round = 1;\r\n        inverstinfo.lowest = 100 *10 ** 6;\r\n        inverstinfo.highest = 5000 *10 ** 6;\r\n        inverstinfo.basics = 100 * 10 ** 6;\r\n        inverstinfo.interval = 1 days;\r\n        withDrawinfo.lowest = 100 *10 ** 6;\r\n        withDrawinfo.highest = 5000 *10 ** 6;\r\n        withDrawinfo.interval = 1 days;\r\n        userinfo[msg.sender].fundaddress = address(this);\r\n        userinfo[msg.sender].referral = \"king\";\r\n        userinfo[msg.sender].referrerCode = \"king\";\r\n        referrals[\"king\"] = msg.sender;\r\n    }\r\n \r\n    function reboot() \r\n        public \r\n        onlyManager \r\n    {\r\n        round = round.add(1);\r\n    }\r\n    function InverstSet(uint256 lowest,uint256 highest,uint256 interval,uint256 _basics) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(highest>lowest && highest>0);\r\n        inverstinfo.lowest = lowest;\r\n        inverstinfo.highest = highest;\r\n        inverstinfo.interval = interval;\r\n        inverstinfo.basics = _basics;\r\n    }\r\n    function setWithDrawInfo(uint256 lowest,uint256 highest,uint256 interval) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(lowest>= lowest  ,\"Invalid withdraw range\");\r\n        withDrawinfo.lowest = lowest;\r\n        withDrawinfo.highest = highest;\r\n        withDrawinfo.interval = interval;\r\n    }\r\n    function USDTSet(IERC20 _usdt) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(Address.isContract(address(_usdt)),\"Invalid address\");\r\n        _usdtAddress = _usdt;\r\n    }\r\n    function gameAdd(BETGAME _game) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(Address.isContract(address(_game)),\"Invalid address\");\r\n        _games[address(_game)] = true;\r\n    }\r\n    \r\n    function createToken(address registrant,bytes10  referrer,bytes10  referrerCode)\r\n        private\r\n        inState(State.Active)\r\n        returns(bool)\r\n    {\r\n        require(referrals[referrerCode] == address(0));\r\n        userModel storage user = userinfo[registrant];\r\n        require(referrals[referrer] != address(0) && user.fundaddress == address(0),\"User already exists or recommendation code is invalid\");\r\n        FundToken fund = new FundToken(_usdtAddress);\r\n        user.fundaddress = address(fund);\r\n        user.referral = referrer;\r\n        user.referrerCode = referrerCode;\r\n        referrals[referrerCode] = registrant;\r\n        emit CreateFund(registrant,address(fund));\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function inverst(uint256 amount,bytes10  referrer,bytes10  referrerCode) \r\n        public \r\n        inState(State.Active)\r\n        nonReentrant \r\n        returns(bool)\r\n    {\r\n        userModel storage userfund = userinfo[msg.sender];\r\n        if(userfund.fundaddress == address(0)){\r\n            createToken(msg.sender,referrer,referrerCode);\r\n        }\r\n        userInverstModel storage user = userinverstinfo[msg.sender][round];\r\n        uint256 inversttime = now;\r\n        require(amount >= inverstinfo.lowest && amount <= inverstinfo.highest && amount.mod(inverstinfo.basics)==0,\"Invalid investment amount\");\r\n        require(inversttime.sub(inverstinfo.interval) >= user.lastinversttime,\"Invalid investment time\");\r\n \r\n        user.freeze = user.freeze.add(amount);\r\n        user.totalinverstcount = user.totalinverstcount.add(1);\r\n        user.totalinverstmoney = user.totalinverstmoney.add(amount);\r\n        user.balance = user.balance.add(amount);\r\n        user.lastinversttime = inversttime;\r\n  \r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,msg.sender, userfund.fundaddress, amount));\r\n        emit Inverst(msg.sender,amount,round);\r\n        return true;\r\n    }\r\n    \r\n    function withDraw(address feerecipient,uint256 amount,uint256 fee,uint256 signblock,uint256 valid,bytes memory signature) \r\n        public \r\n        inState(State.Active)\r\n    {\r\n        require(!signatures[signature],\"Duplicate signature\");\r\n        require(amount >= fee,'Invalid withdraw fee');\r\n        userInverstModel storage user = userinverstinfo[msg.sender][round];\r\n        userModel storage userfund = userinfo[msg.sender];\r\n        require(userfund.fundaddress != address(0) &&_usdtAddress.balanceOf(userfund.fundaddress) >= amount,\"Invalid user Or Insufficient balance\");\r\n        \r\n        require(amount >=withDrawinfo.lowest && amount <= withDrawinfo.highest,\"Invalid withdraw amount\");\r\n        require(user.lastwithDrawtime.add(withDrawinfo.interval) <= now,\"Invalid withdraw time\");\r\n        require(user.candraw >= amount,\"Insufficient  withdrawal balance\");\r\n\r\n        require(onlyValidSignature(feerecipient,amount,fee,signblock,valid,signature),\"Invalid signature\");\r\n        user.lastwithDrawtime = now;\r\n        user.candraw = user.candraw.sub(amount);\r\n        user.balance = user.balance.sub(amount);\r\n\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,userfund.fundaddress, msg.sender, amount.sub(fee)));\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,userfund.fundaddress, feerecipient, fee));\r\n        signatures[signature] = true;\r\n        emit WithDraw(msg.sender,amount,signature);\r\n    }\r\n    \r\n    function allocationFundsIn(uint256 amount,address source, address destination)  \r\n        public \r\n        onlyManager\r\n        returns(bool)\r\n    {\r\n        userInverstModel storage souruser = userinverstinfo[source][round];\r\n        userInverstModel storage destuser = userinverstinfo[destination][round];\r\n        \r\n        userModel storage sourceuserfund = userinfo[source];\r\n        userModel storage destinationuserfund = userinfo[destination];\r\n        \r\n        require(souruser.freeze >= amount && amount >0,\"Invalid allocation of amount\");\r\n        require(sourceuserfund.fundaddress != address(0) && destinationuserfund.fundaddress != address(0),\"Invalid allocation user\");\r\n        \r\n        require(_usdtAddress.balanceOf(sourceuserfund.fundaddress) >= amount,\"Insufficient balance\");\r\n      \r\n        souruser.freeze = souruser.freeze.sub(amount);\r\n        souruser.balance = souruser.balance.sub(amount);\r\n        \r\n        destuser.candraw =destuser.candraw.add(amount);\r\n        destuser.balance = destuser.balance.add(amount);\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,sourceuserfund.fundaddress, destinationuserfund.fundaddress, amount));\r\n        emit AllocationFunds(source,destination,amount);\r\n        return true;\r\n    }\r\n    \r\n    function feewithDraw(uint256 amount,address luckuser,address sysuser) \r\n        public \r\n        onlyManager\r\n        returns(bool)\r\n    {\r\n        userInverstModel storage user = userinverstinfo[luckuser][round];\r\n        userModel storage userfund = userinfo[luckuser];\r\n        require(amount >0 && _usdtAddress.balanceOf(userfund.fundaddress) >= amount,\"Invalid fee amount\");\r\n        user.freeze = user.freeze.sub(amount);\r\n        user.balance = user.balance.sub(amount);\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,userfund.fundaddress, sysuser, amount));\r\n        return true;\r\n    }\r\n    \r\n    function managerWithDraw(address sender, address recipient, uint256 amount) \r\n        public \r\n        onlyManager \r\n        returns(bool)\r\n    {\r\n        userModel storage user = userinfo[sender];\r\n        require(_usdtAddress.balanceOf(user.fundaddress) >= amount,\"Insufficient balance\");\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,user.fundaddress, recipient, amount));\r\n        return true;\r\n    }\r\n    \r\n    function adminWithDraw(address recipient,uint256 amount)\r\n        public\r\n        onlyManager\r\n        returns(bool)\r\n    {\r\n        require(_usdtAddress.balanceOf(address(this)) >= amount,\"Insufficient balance\");\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transfer.selector,recipient, amount));\r\n        return true;\r\n    }\r\n    \r\n    function luckReward(uint256 amount,address luckuser,uint256 _round) \r\n        public  \r\n        onlyManager \r\n        returns(bool)\r\n    {\r\n        require(round == _round ,\"Invalid round\");\r\n        userInverstModel storage user = userinverstinfo[luckuser][round];\r\n        require(!user.luckRewardRecived && amount >0 && _usdtAddress.balanceOf(address(this))>= amount,\"Insufficient balance Or User already received the award\");\r\n\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transfer.selector,luckuser, amount));\r\n        user.luckRewardRecived = true;\r\n        user.luckRewardAmount = amount;\r\n\r\n        emit DrawLuckReward(luckuser,amount,round);\r\n        return true;\r\n    }\r\n    \r\n    function batchluckRewards(address[] memory lucks, uint256 amount,uint256 _round) \r\n        public  \r\n        onlyManager \r\n        returns(bool)\r\n    {\r\n        require(round == _round ,\"Invalid round\");\r\n        require(lucks.length.mul(amount) <= _usdtAddress.balanceOf(address(this)),\"Insufficient contract balance\");\r\n        for(uint i=0;i<lucks.length;i++){\r\n            userInverstModel storage user = userinverstinfo[lucks[i]][round];\r\n            require(!user.luckRewardRecived,\"User already received the award\");\r\n            callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transfer.selector,lucks[i], amount));\r\n            user.luckRewardRecived = true;\r\n            user.luckRewardAmount = amount;\r\n        }\r\n        emit BatchLuckRewards(lucks,amount,round);\r\n        return true;\r\n    }\r\n    \r\n    function bet(BETGAME _g,uint256 _round,uint256 _id,uint256 _amount,uint8 _color) \r\n        public\r\n        inState(State.Active)\r\n        returns(bool)\r\n    {\r\n        require(_games[address(_g)],\"Invalid game\");\r\n        callOptionalReturn(_usdtAddress, abi.encodeWithSelector(_usdtAddress.transferFrom.selector,msg.sender, address(_g), _amount));\r\n        require(_g.bet(_amount,msg.sender,_color,_round,_id),\"Bet Failed\");\r\n        return true;\r\n    }\r\n    \r\n    function  onlyValidSignature(address feerecipient,uint256 amount,uint256 fee ,uint256 signblock ,uint256 valid,bytes memory signature) \r\n        public \r\n        view \r\n        returns(bool)\r\n    {\r\n        require(block.number <= signblock.add(valid),\"Invalid block\");\r\n        require(isValidSigner(msg.sender,feerecipient,amount,fee,signblock,valid,signature),\"Invalid signature\");\r\n        return true;\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) \r\n        private \r\n    {\r\n        require(address(_usdtAddress).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"luckuser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"luckReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"managerWithDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inverstinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basics\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basics\",\"type\":\"uint256\"}],\"name\":\"InverstSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withDrawinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BETGAME\",\"name\":\"_g\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_color\",\"type\":\"uint8\"}],\"name\":\"bet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum Management.State\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userinverstinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalinverstmoney\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalinverstcount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"candraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastinversttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastwithDrawtime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"luckRewardRecived\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"luckRewardAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"USDTSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"luckuser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sysuser\",\"type\":\"address\"}],\"name\":\"feewithDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lucks\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"batchluckRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userinfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundaddress\",\"type\":\"address\"},{\"internalType\":\"bytes10\",\"name\":\"referral\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"referrerCode\",\"type\":\"bytes10\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reboot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"feerecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"onlyValidSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract BETGAME\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"gameAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes10\",\"name\":\"\",\"type\":\"bytes10\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Management.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes10\",\"name\":\"referrer\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"referrerCode\",\"type\":\"bytes10\"}],\"name\":\"inverst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"feerecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setWithDrawInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"allocationFundsIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feerecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Inverst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"CreateFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"DrawLuckReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"lucks\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BatchLuckRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllocationFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenCreator","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://22ce21403f9b371d71da8b82d7d061ec6c14aeddd4472ec67d1bf439347f7dd8"}]}