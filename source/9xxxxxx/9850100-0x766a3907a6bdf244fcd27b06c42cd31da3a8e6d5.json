{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    *\r\n    * _Available since v2.4.0._\r\n    */\r\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    require(b <= a, errorMessage);\r\n    uint c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint a, uint b) internal pure returns (uint) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    *\r\n    * _Available since v2.4.0._\r\n    */\r\n  function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint a, uint b) internal pure returns (uint) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts with custom message when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    *\r\n    * _Available since v2.4.0._\r\n    */\r\n  function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @title iStakingContract\r\n// @dev The interface for cross-contract calls to the Staking contract\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract iStakingContract {\r\n\r\n  //function balanceOf(address _owner) public view returns (uint);\r\n  function getGameAccountStake(uint _game, address _account) external view returns(uint);\r\n  function updateStake(uint _game, address _account, uint _stakeAmount) external;\r\n  function fundStakePool(uint _amount, uint _startWeek, uint _numberOfWeeks) external;\r\n}\r\n\r\n\r\n\r\n// @title iGameContract\r\n// @dev The interface for cross-contract calls to the Game contract\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract iGameContract {\r\n  function isAdminForGame(uint _game, address account) external view returns(bool);\r\n\r\n  // List of all games tracked by the Game contract\r\n  uint[] public games;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// @title MasterAccess\r\n// @dev MasterAccess contract for controlling access to Staking contract functions\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract StakingAccess {\r\n  using SafeMath for uint;\r\n\r\n  event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n\r\n  // Reference to the address of the Game Data contract\r\n  iGameContract public gameContract;\r\n\r\n  // Reference to the address of the ERC20 contract\r\n  iERC20 public erc20Contract;\r\n\r\n  // The Owner can perform all admin tasks, including setting the recovered account.\r\n  address public owner;\r\n\r\n  // The Recovery account can change the Owner account.\r\n  address public recoveryAddress;\r\n\r\n\r\n  // @dev The original `owner` of the contract is the contract creator.\r\n  // @dev Internal constructor to ensure this contract can't be deployed alone\r\n  constructor()\r\n    internal\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to game admin accounts\r\n  modifier onlyGameAdmin(uint _game) {\r\n    require(gameContract.isAdminForGame(_game, msg.sender), \"caller must be game admin\");\r\n    _;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to the Owner account\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"sender must be owner\");\r\n    _;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to the Recovery account\r\n  modifier onlyRecovery() {\r\n    require(msg.sender == recoveryAddress, \"sender must be recovery\");\r\n    _;\r\n  }\r\n\r\n  // @dev Access control modifier to limit access to the Recovery account\r\n  modifier onlyERC20Contract() {\r\n    require(msg.sender == address(erc20Contract), \"Can only be called from the ERC20 contract\");\r\n    _;\r\n  }\r\n  \r\n  // @dev Assigns a new address to act as the Owner.\r\n  // @notice Can only be called by the recovery account\r\n  // @param _newOwner The address of the new Owner\r\n  function setOwner(address _newOwner)\r\n    external\r\n    onlyRecovery\r\n  {\r\n    require(_newOwner != address(0), \"new owner must be a non-zero address\");\r\n    require(_newOwner != recoveryAddress, \"new owner can't be the recovery address\");\r\n\r\n    owner = _newOwner;\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n  }\r\n\r\n  // @dev Assigns a new address to act as the Recovery address.\r\n  // @notice Can only be called by the Owner account\r\n  // @param _newRecovery The address of the new Recovery account\r\n  function setRecovery(address _newRecovery)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_newRecovery != address(0), \"new owner must be a non-zero address\");\r\n    require(_newRecovery != owner, \"new recovery can't be the owner address\");\r\n\r\n    recoveryAddress = _newRecovery;\r\n  }\r\n}\r\n\r\n\r\n\r\n// @title ERC20 Staking manager imlpementation\r\n// @dev Utility contract that manages staking Tokens on games\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract StakingBase is StakingAccess, iStakingContract {\r\n  using SafeMath for uint;\r\n\r\n  uint public constant WEEK_ZERO_START = 1538352000; // 10/1/2018 @ 00:00:00\r\n  uint public constant SECONDS_PER_WEEK = 604800;\r\n\r\n  // Emitted whenever a user or game takes a payout from the system\r\n  event Payout(address indexed staker, uint indexed game, uint amount, uint endWeek);\r\n\r\n  // Emitted whenever a user's stake is increased or decreased.\r\n  event ChangeStake(\r\n    uint week, uint indexed game, address indexed staker, uint prevStake, uint newStake,\r\n    uint accountStake, uint gameStake, uint totalStake\r\n  );\r\n\r\n  // @dev Tracks current stake levels for all accounts and games.\r\n  //   Tracks separately for accounts by game, accounts, games, and the total stake on the system\r\n  // Mapping(Game => Mapping(Account => Stake))\r\n  mapping(uint => mapping(address => uint)) public gameAccountStaked;\r\n  // Mapping(Account => Stake)\r\n  mapping(address => uint) public accountStaked;\r\n  // Mapping(Game => Stake)\r\n  mapping(uint => uint) public gameStaked;\r\n  // Stake\r\n  uint public totalStaked;\r\n\r\n  // @dev Tracks stakes by week for accounts and games. Each is updated when a user changes their stake.\r\n  //   These can be zero if they haven't been updated during the current week, so \"zero\"\r\n  //     just means \"look at the week before\", as no stakes have been changed.\r\n  //   When setting a stake to zero, the system records a \"1\". This is safe, because it's stored\r\n  //     with 18 significant digits, and the calculation\r\n  // Mapping(Week => Mapping(Game => Mapping(Account => Stake)))\r\n  mapping(uint => mapping(uint => mapping(address => uint))) public weekGameAccountStakes;\r\n  // Mapping(Week => Mapping(Account => Stake))\r\n  mapping(uint => mapping(address => uint)) public weekAccountStakes;\r\n  // Mapping(Week => Mapping(Game => Stake))\r\n  mapping(uint => mapping(uint => uint)) public weekGameStakes;\r\n  // Mapping(Week => Stake)\r\n  mapping(uint => uint) public weekTotalStakes;\r\n\r\n  // The last week that an account took a payout. Used for calculating the remaining payout for the account\r\n  mapping(address => uint) public lastPayoutWeekByAccount;\r\n  // The last week that a game took a payout. Used for calculating the remaining payout for the game\r\n  mapping(uint => uint) public lastPayoutWeekByGame;\r\n\r\n  // @dev Internal constructor to ensure this contract can't be deployed alone\r\n  constructor()\r\n    internal\r\n  {\r\n    weekTotalStakes[getCurrentWeek() - 1] = 1;\r\n  }\r\n\r\n  // @dev Internal function to ncrease stake on a game by an amount.\r\n  // @param _game - the game to increase stake on\r\n  // @param _account - the account to increase stake on\r\n  // @param _increase - The increase must be non-zero, and less than\r\n  //   or equal to the _account's available staking balance\r\n  function _increaseStake(uint _game, address _account, uint _increase)\r\n    internal\r\n  returns(uint newStake) {\r\n    require(_increase > 0, \"Must be a non-zero change\");\r\n\r\n    uint prevStake = gameAccountStaked[_game][_account];\r\n    newStake = prevStake.add(_increase);\r\n    uint gameStake = gameStaked[_game].add(_increase);\r\n    uint accountStake = accountStaked[_account].add(_increase);\r\n    uint totalStake = totalStaked.add(_increase);\r\n\r\n    _storeStakes(_game, _account, prevStake, newStake, gameStake, accountStake, totalStake);\r\n  }\r\n\r\n  // @dev Internal function to decrease stake on a game by an amount.\r\n  // @param _game - the game to decrease stake on\r\n  // @param _account - the account to decrease\r\n  // @param _decrease - The decrease must be non-zero, and less than\r\n  //   or equal to the _account's stake on the game\r\n  function _decreaseStake(uint _game, address _account, uint _decrease)\r\n    internal\r\n  returns(uint newStake) {\r\n    require(_decrease > 0, \"Must be a non-zero change\");\r\n\r\n    uint prevStake = gameAccountStaked[_game][_account];\r\n    newStake = prevStake.sub(_decrease);\r\n    uint gameStake = gameStaked[_game].sub(_decrease);\r\n    uint accountStake = accountStaked[_account].sub(_decrease);\r\n    uint totalStake = totalStaked.sub(_decrease);\r\n\r\n    _storeStakes(_game, _account, prevStake, newStake, gameStake, accountStake, totalStake);\r\n  }\r\n\r\n  // @dev Internal function to calculate the game, account, and total stakes on a stake change\r\n  // @param _game - the game to be staked on\r\n  // @param _staker - the account doing the staking\r\n  // @param _prevStake - the previous stake of the staker on that game\r\n  // @param _newStake - the newly updated stake of the staker on that game\r\n  // @param _gameStake - the new total stake for the game\r\n  // @param _accountStake - the new total stake for the staker's account\r\n  // @param _totalStake - the new total stake for the system as a whole\r\n  function _storeStakes(\r\n    uint _game, address _staker, uint _prevStake, uint _newStake,\r\n    uint _gameStake, uint _accountStake, uint _totalStake)\r\n    internal\r\n  {\r\n    uint _currentWeek = getCurrentWeek();\r\n\r\n    gameAccountStaked[_game][_staker] = _newStake;\r\n    gameStaked[_game] = _gameStake;\r\n    accountStaked[_staker] = _accountStake;\r\n    totalStaked = _totalStake;\r\n\r\n    // Each of these stores the weekly stake as \"1\" if it's been set to 0.\r\n    // This tracks the difference between \"not set this week\" and \"set to zero this week\"\r\n    weekGameAccountStakes[_currentWeek][_game][_staker] = _newStake > 0 ? _newStake : 1;\r\n    weekAccountStakes[_currentWeek][_staker] = _accountStake > 0 ? _accountStake : 1;\r\n    weekGameStakes[_currentWeek][_game] = _gameStake > 0 ? _gameStake : 1;\r\n    weekTotalStakes[_currentWeek] = _totalStake > 0 ? _totalStake : 1;\r\n\r\n    // Get the last payout week; set it to this week if there hasn't been a week.\r\n    // This lets the user iterate payouts correctly.\r\n    if(lastPayoutWeekByAccount[_staker] == 0) {\r\n      lastPayoutWeekByAccount[_staker] = _currentWeek - 1;\r\n    }\r\n    if (lastPayoutWeekByGame[_game] == 0) {\r\n      lastPayoutWeekByGame[_game] = _currentWeek - 1;\r\n    }\r\n\r\n    emit ChangeStake(\r\n      _currentWeek, _game, _staker, _prevStake, _newStake,\r\n      _accountStake, _gameStake, _totalStake);\r\n  }\r\n\r\n  // @dev Internal function to get the total stake for a given week\r\n  // @notice This updates the stored values for intervening weeks,\r\n  //   as that's more efficient at 100 or more users\r\n  // @param _week - the week in which to calculate the total stake\r\n  // @returns _stake - the total stake in that week\r\n  function _getWeekTotalStake(uint _week)\r\n    internal\r\n  returns(uint _stake) {\r\n    _stake = weekTotalStakes[_week];\r\n    if(_stake == 0) {\r\n      uint backWeek = _week;\r\n      while(_stake == 0) {\r\n        backWeek--;\r\n        _stake = weekTotalStakes[backWeek];\r\n      }\r\n      weekTotalStakes[_week] = _stake;\r\n    }\r\n  }\r\n\r\n  // @dev Internal function to get the end week based on start, number of weeks, and current week\r\n  // @param _startWeek - the start of the range\r\n  // @param _numberOfWeeks - the length of the range\r\n  // @returns endWeek - either the current week, or the end of the range\r\n  // @notice This throws if it tries to get a week range longer than the current week\r\n  function _getEndWeek(uint _startWeek, uint _numberOfWeeks)\r\n    internal\r\n    view\r\n  returns(uint endWeek) {\r\n    uint _currentWeek = getCurrentWeek();\r\n    require(_startWeek < _currentWeek, \"must get at least one week\");\r\n    endWeek = _numberOfWeeks == 0 ? _currentWeek : _startWeek + _numberOfWeeks;\r\n    require(endWeek <= _currentWeek, \"can't get more than the current week\");\r\n  }\r\n\r\n  // @dev Function to calculate and return the current week\r\n  // @returns uint - the current week\r\n  function getCurrentWeek()\r\n    public\r\n    view\r\n  returns(uint) {\r\n    return (now - WEEK_ZERO_START) / SECONDS_PER_WEEK;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface iERC20 {\r\n  /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n  function totalSupply() external view returns (uint);\r\n\r\n  /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n  function balanceOf(address account) external view returns (uint);\r\n\r\n  /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n  /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n  function approve(address spender, uint amount) external returns (bool);\r\n\r\n  /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n  /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n// @title Staking contract\r\n// @dev ERC20 management contract, designed to make staking ERC-20 tokens easier\r\n// @author GAME Credits Platform (https://www.gamecredits.org)\r\n// (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.\r\ncontract StakingContract is StakingBase {\r\n\r\n  string public url = \"https://www.gamecredits.org\";\r\n\r\n  event WeeklyStakePoolUpdated(uint week, uint stored);\r\n  event PromotedGame(uint game, bool isPromoted, string json);\r\n  event SuppressedGame(uint game, bool isSuppressed);\r\n\r\n  // The number of erc20 Tokens stored as income each week\r\n  mapping(uint => uint) public weeklyStakePool;\r\n\r\n  // @dev Constructor creates a reference to the NFT ownership contract\r\n  //  and verifies the manager cut is in the valid range.\r\n  // @param _erc20Contract - address of the mainnet erc20 contract\r\n  // @param _gameContract - address of the mainnet Game Data contract\r\n  constructor(iERC20 _erc20Contract, iGameContract _gameContract)\r\n    public\r\n  {\r\n    erc20Contract = _erc20Contract;\r\n    gameContract = _gameContract;\r\n  }\r\n\r\n  // @dev Gets an account's stake on a specific game\r\n  // @param _game - the game to query\r\n  // @param _account - the account to query\r\n  // @returns stake - the amount staked on that game by that account\r\n  function getGameAccountStake(uint _game, address _account)\r\n    external\r\n    view\r\n  returns(uint stake)\r\n  {\r\n    return gameAccountStaked[_game][_account];\r\n  }\r\n\r\n  // @dev Sets an account's stake on a game to an amount.\r\n  // @param _game - the game to increase or decrease stake on\r\n  // @param _account - the account to change stake\r\n  // @param _newStake - The new stake value. Can be an increase or decrease,\r\n  //   but must be different than their current stake.\r\n  // @notice - this will throw if called from a contract other than the GAME token contract\r\n  // @notice - this will throw if the _account doesn't have enough funds\r\n  function updateStake(uint _game, address _account, uint _newStake)\r\n    public\r\n    onlyERC20Contract()\r\n  {\r\n    uint currentStake = gameAccountStaked[_game][_account];\r\n    if (currentStake < _newStake) {\r\n      _increaseStake(_game, _account, _newStake.sub(currentStake));\r\n    } else\r\n    if (currentStake > _newStake) {\r\n      _decreaseStake(_game, _account, currentStake.sub(_newStake));\r\n    }\r\n  }\r\n\r\n  // @dev Lets any user add funds to the staking pool spread over a period of weeks\r\n  // @param _amount - the total amount of GAME tokens to add to the stake pool\r\n  // @param _startWeek - the first week in which tokens will be added to the stake pool\r\n  // @param _numberOfWeeks - the number of weeks over which the _amount will be spread\r\n  // @notice - The _amount must be exactly divisible by the _numberOfWeeks\r\n  // @notice - this will throw if called from a contract other than the GAME token contract\r\n  function fundStakePool(uint _amount, uint _startWeek, uint _numberOfWeeks)\r\n    external\r\n    onlyERC20Contract()\r\n  {\r\n    require(_startWeek >= getCurrentWeek(), \"Start Week must be equal or greater than current week\");\r\n    uint _amountPerWeek = _amount.div(_numberOfWeeks);\r\n    uint _checkAmount = _amountPerWeek.mul(_numberOfWeeks);\r\n    require(_amount == _checkAmount, \"Amount must divide exactly by number of weeks\");\r\n\r\n    for(uint week = _startWeek; week < _startWeek.add(_numberOfWeeks); week++) {\r\n      uint stored = weeklyStakePool[week].add(_amountPerWeek);\r\n      weeklyStakePool[week] = stored;\r\n      emit WeeklyStakePoolUpdated(week, stored);\r\n    }\r\n  }\r\n\r\n  // @dev Lets a staker collect the current payout for all their stakes.\r\n  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\r\n  // @returns _payout - the total payout over all the collected weeks\r\n  function collectPayout(uint _numberOfWeeks)\r\n    public\r\n  returns(uint _payout) {\r\n    uint startWeek = lastPayoutWeekByAccount[msg.sender];\r\n    require(startWeek > 0, \"must be a valid start week\");\r\n    uint endWeek = _getEndWeek(startWeek, _numberOfWeeks);\r\n    require(startWeek < endWeek, \"must be at least one week to pay out\");\r\n\r\n    uint lastWeekStake;\r\n    for (uint i = startWeek; i < endWeek; i++) {\r\n      // Get the stake for the week. Use the last week's stake if the stake hasn't changed\r\n      uint weeklyStake = weekAccountStakes[i][msg.sender] == 0\r\n        ? lastWeekStake\r\n        : weekAccountStakes[i][msg.sender];\r\n      lastWeekStake = weeklyStake;\r\n\r\n      uint weekStake = _getWeekTotalStake(i);\r\n      uint storedGAME = weeklyStakePool[i];\r\n      uint weeklyPayout = storedGAME > 1 && weeklyStake > 1 && weekStake > 1\r\n        ? weeklyStake.mul(storedGAME).mul(9).div(weekStake).div(10)\r\n        : 0;\r\n      _payout = _payout.add(weeklyPayout);\r\n\r\n    }\r\n    // If the weekly stake for the end week is not set, set it to the\r\n    //   last week's stake, to ensure we know what to pay out.\r\n    // This works even if the end week is the current week; the value\r\n    //   will be overwritten if necessary by future stake changes\r\n    if(weekAccountStakes[endWeek][msg.sender] == 0) {\r\n      weekAccountStakes[endWeek][msg.sender] = lastWeekStake;\r\n    }\r\n    // Always update the last payout week\r\n    lastPayoutWeekByAccount[msg.sender] = endWeek;\r\n\r\n    erc20Contract.transfer(msg.sender, _payout);\r\n    emit Payout(msg.sender, 0, _payout, endWeek);\r\n  }\r\n\r\n  // @dev Lets a game admin collect the current payout for their game.\r\n  // @param _game - the game to collect\r\n  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\r\n  // @returns _payout - the total payout over all the collected weeks\r\n  function collectGamePayout(uint _game, uint _numberOfWeeks)\r\n    external\r\n    onlyGameAdmin(_game)\r\n  returns(uint _payout) {\r\n    uint week = lastPayoutWeekByGame[_game];\r\n    require(week > 0, \"must be a valid start week\");\r\n    uint endWeek = _getEndWeek(week, _numberOfWeeks);\r\n    require(week < endWeek, \"must be at least one week to pay out\");\r\n\r\n    uint lastWeekStake;\r\n    for (week; week < endWeek; week++) {\r\n      // Get the stake for the week. Use the last week's stake if the stake hasn't changed\r\n      uint weeklyStake = weekGameStakes[week][_game] == 0\r\n        ? lastWeekStake\r\n        : weekGameStakes[week][_game];\r\n      lastWeekStake = weeklyStake;\r\n\r\n      uint weekStake = _getWeekTotalStake(week);\r\n      uint storedGAME = weeklyStakePool[week];\r\n      uint weeklyPayout = storedGAME > 1 && weeklyStake > 1 && weekStake > 1\r\n        ? weeklyStake.mul(storedGAME).div(weekStake).div(10)\r\n        : 0;\r\n      _payout = _payout.add(weeklyPayout);\r\n    }\r\n    // If the weekly stake for the end week is not set, set it to\r\n    //   the last week's stake, to ensure we know what to pay out\r\n    //   This works even if the end week is the current week; the value\r\n    //   will be overwritten if necessary by future stake changes\r\n    if(weekGameStakes[endWeek][_game] == 0) {\r\n      weekGameStakes[endWeek][_game] = lastWeekStake;\r\n    }\r\n    // Always update the last payout week\r\n    lastPayoutWeekByGame[_game] = endWeek;\r\n\r\n    erc20Contract.transfer(msg.sender, _payout);\r\n    emit Payout(msg.sender, _game, _payout, endWeek);\r\n  }\r\n\r\n  // @dev Adds or removes a game from the list of promoted games\r\n  // @param _game - the game to be promoted\r\n  // @param _isPromoted - true for promoted, false for not\r\n  // @param _json - A json string to be used to display promotional information\r\n  function setPromotedGame(uint _game, bool _isPromoted, string calldata _json)\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint gameId = gameContract.games(_game);\r\n    require(gameId == _game, \"gameIds must match\");\r\n    emit PromotedGame(_game, _isPromoted, _isPromoted ? _json : \"\");\r\n  }\r\n\r\n  // @dev Adds or removes a game from the list of suppressed games.\r\n  //   Suppressed games won't show up on the site, but can still be interacted with\r\n  //   by users.\r\n  // @param _game - the game to be promoted\r\n  // @param _isSuppressed - true for suppressed, false for not\r\n  function setSuppressedGame(uint _game, bool _isSuppressed)\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint gameId = gameContract.games(_game);\r\n    require(gameId == _game, \"gameIds must match\");\r\n    emit SuppressedGame(_game, _isSuppressed);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract iERC20\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"contract iGameContract\",\"name\":\"_gameContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"ChangeStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endWeek\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPromoted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"json\",\"type\":\"string\"}],\"name\":\"PromotedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"game\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuppressed\",\"type\":\"bool\"}],\"name\":\"SuppressedGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stored\",\"type\":\"uint256\"}],\"name\":\"WeeklyStakePoolUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECONDS_PER_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEEK_ZERO_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfWeeks\",\"type\":\"uint256\"}],\"name\":\"collectGamePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfWeeks\",\"type\":\"uint256\"}],\"name\":\"collectPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Contract\",\"outputs\":[{\"internalType\":\"contract iERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfWeeks\",\"type\":\"uint256\"}],\"name\":\"fundStakePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameAccountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameContract\",\"outputs\":[{\"internalType\":\"contract iGameContract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getGameAccountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPayoutWeekByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPayoutWeekByGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoveryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPromoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_json\",\"type\":\"string\"}],\"name\":\"setPromotedGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRecovery\",\"type\":\"address\"}],\"name\":\"setRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSuppressed\",\"type\":\"bool\"}],\"name\":\"setSuppressedGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newStake\",\"type\":\"uint256\"}],\"name\":\"updateStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weekAccountStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weekGameAccountStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weekGameStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weekTotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyStakePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingContract","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c8a7e94f10fb555b58fd7cbd3095958664c3651d0000000000000000000000000e2cda02caebdf772ef15a6f2961296741107038","Library":"","LicenseType":"None","SwarmSource":"bzzr://53a3f9a763d3bdeb718e0eb3a9f3374627407564b7ad4db332b73016043c8223"}]}