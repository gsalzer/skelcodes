{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\interfaces\\dss\\IVat.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IVat {\r\n    function hope(address usr) external;\r\n    function gem(bytes32, address) external view returns (uint);\r\n    function dai(address) external view returns (uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\dss\\ITokenJoin.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface ITokenJoin {\r\n    function join(address usr, uint wad) external;\r\n    function exit(address usr, uint wad) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\dss\\IFlip.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IFlip {\r\n    function tick(uint id) external;\r\n    function tend(uint id, uint lot, uint bid) external;\r\n    function dent(uint id, uint lot, uint bid) external;\r\n    function deal(uint id) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\dss\\IFlap.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IFlap {\r\n    function tick(uint id) external;\r\n    function tend(uint id, uint lot, uint bid) external;\r\n    function deal(uint id) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\dss\\IFlop.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract IFlop {\r\n    function tick(uint id) external;\r\n    function dent(uint id, uint lot, uint bid) external;\r\n    function deal(uint id) external;\r\n}\r\n\r\n// File: contracts\\interfaces\\token\\IERC20.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\proxy\\ProxyActionsStorage.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Central storage for common variables\r\n    across all proxies.\r\n*/\r\ncontract ProxyActionsStorage {\r\n\r\n    IVat public vat;\r\n    IFlap public flap;\r\n    IFlop public flop;\r\n\r\n    mapping(bytes32 => IERC20) public tokens;\r\n    mapping(bytes32 => uint) public decimals;\r\n    mapping(bytes32 => bytes32) public ilks;\r\n    mapping(bytes32 => ITokenJoin) public tokenJoins;\r\n    mapping(bytes32 => IFlip) public flips;\r\n\r\n    constructor() public {\r\n\r\n        vat = IVat(address(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B));\r\n        flap = IFlap(address(0xdfE0fb1bE2a52CDBf8FB962D5701d7fd0902db9f));\r\n        flop = IFlop(address(0x4D95A049d5B0b7d32058cd3F2163015747522e99));\r\n\r\n        tokens[\"ETH\"] = IERC20(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)); // WETH\r\n        tokens[\"DAI\"] = IERC20(address(0x6B175474E89094C44Da98b954EedeAC495271d0F));\r\n        tokens[\"BAT\"] = IERC20(address(0x0D8775F648430679A709E98d2b0Cb6250d2887EF));\r\n        tokens[\"USDC\"] = IERC20(address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48));\r\n        tokens[\"MKR\"] = IERC20(address(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2));\r\n\r\n        decimals[\"ETH\"] = 18;\r\n        decimals[\"BAT\"] = 18;\r\n        decimals[\"USDC\"] = 6;\r\n\r\n        ilks[\"ETH\"] = \"ETH-A\";\r\n        ilks[\"BAT\"] = \"BAT-A\";\r\n        ilks[\"USDC\"] = \"USDC-A\";\r\n\r\n        tokenJoins[\"ETH\"] = ITokenJoin(address(0x2F0b23f53734252Bda2277357e97e1517d6B042A));\r\n        tokenJoins[\"DAI\"] = ITokenJoin(address(0x9759A6Ac90977b93B58547b4A71c78317f391A28));\r\n        tokenJoins[\"BAT\"] = ITokenJoin(address(0x3D0B1912B66114d4096F48A8CEe3A56C231772cA));\r\n        tokenJoins[\"USDC\"] = ITokenJoin(address(0xA191e578a6736167326d05c119CE0c90849E84B7));\r\n\r\n        flips[\"ETH\"] = IFlip(address(0xd8a04F5412223F513DC55F839574430f5EC15531));\r\n        flips[\"BAT\"] = IFlip(address(0xaA745404d55f88C108A28c86abE7b5A1E7817c07));\r\n        flips[\"USDC\"] = IFlip(address(0xE6ed1d09a19Bd335f051d78D5d22dF3bfF2c28B1));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flap\",\"outputs\":[{\"internalType\":\"contract IFlap\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"flips\",\"outputs\":[{\"internalType\":\"contract IFlip\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flop\",\"outputs\":[{\"internalType\":\"contract IFlop\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ilks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenJoins\",\"outputs\":[{\"internalType\":\"contract ITokenJoin\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract IVat\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProxyActionsStorage","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://6a4b964e59459f8ba7392d794e4f303a105b46bc3ecb5ec83eb4c76c931f5fd1"}]}