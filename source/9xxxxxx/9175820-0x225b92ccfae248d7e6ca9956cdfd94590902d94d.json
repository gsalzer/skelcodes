{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n❤ https://cryptohands.org - first open MLM smart-contract without comission\r\n❤ https://doubleway.io - high-income binary matrix from the creators of CryptoHands\r\n \r\n\r\n____0000000000______0000000000_____\r\n__000________000__000________000___\r\n_000___________0000___________000__\r\n000_____________00_____________000_\r\n000____________________________000_\r\n000____________________________000_\r\n_000________CRYPTOHANDS_______000__\r\n__000________DOUBLEWAY_______000___\r\n___000_____________________000____\r\n_____000__________________000______\r\n_______000______________000________\r\n_________000__________000__________\r\n____________000____000_____________\r\n______________000000_______________\r\n________________00_________________\r\n*/\r\npragma solidity ^0.5.7;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b, 'Invalid values');\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'Substraction result smaller than zero');\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'Invalid values');\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public manager;\r\n    address public ownerWallet;\r\n    address public adminWallet;\r\n    uint adminPersent;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n        adminWallet = 0xcFebf7C3Ec7B407DFf17aa20a2631c95c8ff508c;\r\n        ownerWallet = 0xcFebf7C3Ec7B407DFf17aa20a2631c95c8ff508c;\r\n        adminPersent = 10;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only for owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require((msg.sender == owner)||(msg.sender == manager), \"only for owner or manager\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwnerOrManager {\r\n        manager = _manager;\r\n    }\r\n\r\n    function setAdminWallet(address _admin) public onlyOwner {\r\n        adminWallet = _admin;\r\n    }\r\n}\r\n\r\n\r\ncontract WalletOnly {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\ncontract AbsDAO is Ownable, WalletOnly {\r\n    // events\r\n    event TransferPie(address indexed _from, address indexed _to, uint _value);\r\n    event NewHolder(address indexed _addr, uint _index);\r\n    event HolderChanged(address indexed _from, address indexed _to, uint _index);\r\n    event PaymentReceived(address indexed _from, uint _value);\r\n    event PaymentForHolder(address indexed _addr, uint _index, uint _value);\r\n    event PaymentForHolderLost(address indexed _addr, uint _index, uint _value);\r\n\r\n    struct Holder {\r\n        bool isExist;\r\n        uint id;\r\n        uint value;\r\n        address payable addr;\r\n    }\r\n\r\n    mapping(address => Holder) public holders;\r\n    mapping(uint=>address payable) holderAddrs;\r\n\r\n    uint holderCount;\r\n    uint _initialPie = 100;\r\n\r\n    using SafeMath for uint;\r\n\r\n    constructor() public {\r\n        // creating root hoder\r\n        holderCount = 1;\r\n        holders[msg.sender] = Holder({\r\n            isExist: true,\r\n            id: 1,\r\n            value: _initialPie,\r\n            addr: msg.sender\r\n        });\r\n\r\n        holderAddrs[1] = msg.sender;\r\n    }\r\n\r\n    function () external payable {\r\n        require(!isContract(msg.sender), 'This contract cannot support payments from other contracts');\r\n\r\n        emit PaymentReceived(msg.sender, msg.value);\r\n\r\n        for (uint i = 1; i <= holderCount; i++) {\r\n            if (holders[holderAddrs[i]].value > 0) {\r\n                uint payValue = msg.value.div(100).mul(holders[holderAddrs[i]].value);\r\n                holderAddrs[i].transfer(payValue);\r\n                emit PaymentForHolder(holderAddrs[i], i, payValue);\r\n            } else {\r\n                emit PaymentForHolderLost(holderAddrs[i], i, holders[holderAddrs[i]].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getHolderPieAt(uint i) public view returns(uint) {\r\n        return holders[holderAddrs[i]].value;\r\n    }\r\n\r\n    function getHolder(uint i) public view returns(address payable) {\r\n        return holderAddrs[i];\r\n    }\r\n\r\n    function getHolderCount() public view returns(uint) {\r\n        return holderCount;\r\n    }\r\n\r\n    function transferPie(uint _amount, address payable _to) public {\r\n        require(holders[msg.sender].isExist, 'Holder not found');\r\n        require(_amount > 0 && _amount <= holders[msg.sender].value, 'Invalid amount');\r\n\r\n        if (_amount == holders[msg.sender].value) {\r\n            uint id = holders[msg.sender].id;\r\n            delete holders[msg.sender];\r\n\r\n            holders[_to] = Holder({\r\n                isExist: true,\r\n                id: id,\r\n                value: _amount,\r\n                addr: _to\r\n            });\r\n\r\n            holderAddrs[id] = _to;\r\n\r\n            emit HolderChanged(msg.sender, _to, id);\r\n        } else {\r\n            if (holders[_to].isExist) {\r\n                holders[msg.sender].value -= _amount;\r\n                holders[_to].value += _amount;\r\n            } else if (holderCount < 20) {\r\n                holderCount += 1;\r\n                holders[msg.sender].value -= _amount;\r\n                holders[_to] = Holder({\r\n                    isExist: true,\r\n                    id: holderCount,\r\n                    value: _amount,\r\n                    addr: _to\r\n                });\r\n\r\n                holderAddrs[holderCount] = _to;\r\n\r\n                emit NewHolder(_to, holderCount);\r\n            } else {\r\n                revert('Holder limit excised');\r\n            }\r\n        }\r\n\r\n        emit TransferPie(msg.sender, _to, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferPie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getHolderPieAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferPie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"NewHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"HolderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PaymentForHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PaymentForHolderLost\",\"type\":\"event\"}]","ContractName":"AbsDAO","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://faf1c4f1e05ac6ea07314b6ce197f3904acbfd70ce974f60f4565a75e7ddb631"}]}