{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/UAXToken.sol\r\n\r\n/**\r\n * UAX Smart Contract: EIP-20 compatible token smart contract that\r\n * manages UAX tokens.\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public payable returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public payable returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public payable returns (bool) {\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        balances[account] = balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        balances[account] = balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\n/*\r\n * UAX Token Smart Contract.\r\n * Copyright (c) 2019\r\n */\r\n\r\ncontract UAXToken is ERC20 {\r\n\r\n    uint256 constant internal FEE_DENOMINATOR = 100000;\r\n    uint256 constant internal MAX_FEE_NUMERATOR = FEE_DENOMINATOR;\r\n    uint256 constant internal MIN_FEE_NUMERATIOR = 0;\r\n    uint256 constant internal MAX_TOKENS_COUNT =\r\n    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff /\r\n    MAX_FEE_NUMERATOR;\r\n    uint256 constant internal DEFAULT_FEE = 5e2;\r\n    uint256 constant internal BLACK_LIST_FLAG = 0x01;\r\n    uint256 constant internal ZERO_FEE_FLAG = 0x02;\r\n\r\n    modifier delegatable {\r\n        if (depute == address(0)) {\r\n            require(msg.value == 0);\r\n            // Non payable if not delegated\r\n            _;\r\n        } else {\r\n            assembly {\r\n            // Save owner\r\n                let oldOwner := sload (owner_slot)\r\n\r\n            // Save depute\r\n                let oldDepute := sload (depute_slot)\r\n\r\n            // Solidity stores address of the beginning of free memory at 0x40\r\n                let buffer := mload (0x40)\r\n\r\n            // Copy message call data into buffer\r\n                calldatacopy (buffer, 0, calldatasize)\r\n\r\n            // Lets call our depute\r\n                let result := delegatecall (gas, oldDepute, buffer, calldatasize, buffer, 0)\r\n\r\n            // Check, whether owner was changed\r\n                switch eq (oldOwner, sload (owner_slot))\r\n                case 1 {} // Owner was not changed, fine\r\n                default {revert (0, 0)} // Owner was changed, revert!\r\n\r\n            // Check, whether depute was changed\r\n                switch eq (oldDepute, sload (depute_slot))\r\n                case 1 {} // Depute was not changed, fine\r\n                default {revert (0, 0)} // Depute was changed, revert!\r\n\r\n            // Copy returned value into buffer\r\n                returndatacopy (buffer, 0, returndatasize)\r\n\r\n            // Check call status\r\n                switch result\r\n                case 0 {revert (buffer, returndatasize)} // Call failed, revert!\r\n                default {return (buffer, returndatasize)} // Call succeeded, return\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(address _feeCollector) public {\r\n        fixedFee = DEFAULT_FEE;\r\n        minVariableFee = 0;\r\n        maxVariableFee = 0;\r\n        variableFeeNumerator = 0;\r\n\r\n        owner = msg.sender;\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    function() public delegatable payable {\r\n        revert();\r\n    }\r\n    function name() public delegatable view returns (string) {\r\n        return \"UAX\";\r\n    }\r\n\r\n    function symbol() public delegatable view returns (string) {\r\n        return \"UAX\";\r\n    }\r\n\r\n    function decimals() public delegatable view returns (uint8) {\r\n        return 2;\r\n    }\r\n\r\n    function totalSupply() public delegatable view returns (uint256) {\r\n        return tokensCount;\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n    public delegatable view returns (uint256 balance) {\r\n        return ERC20.balanceOf(_owner);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    public delegatable payable returns (bool) {\r\n        if (frozen) return false;\r\n        else if (\r\n            (addressFlags [msg.sender] | addressFlags [_to]) & BLACK_LIST_FLAG ==\r\n            BLACK_LIST_FLAG)\r\n            return false;\r\n        else {\r\n            if (_value <= balances[msg.sender]) {\r\n                require(ERC20.transfer(_to, _value));\r\n                return true;\r\n            } else return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public delegatable payable returns (bool) {\r\n        if (frozen) {\r\n            return false;\r\n        }\r\n        else if (\r\n            (addressFlags [_from] | addressFlags [_to]) & BLACK_LIST_FLAG ==\r\n            BLACK_LIST_FLAG) {\r\n            return false;\r\n        }\r\n        else {\r\n            if (_value <= allowed[_from][msg.sender] && _value <= balances[_from]) {\r\n                require(ERC20.transferFrom(_from, _to, _value));\r\n                return true;\r\n            } else return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    public delegatable payable returns (bool success) {\r\n        return ERC20.approve(_spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n    public delegatable view returns (uint256 remaining) {\r\n        return ERC20.allowance(_owner, _spender);\r\n    }\r\n\r\n    function delegatedTransfer(\r\n        address _to, uint256 _value, uint256 _fee,\r\n        uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s)\r\n    public delegatable payable returns (bool) {\r\n        if (frozen) return false;\r\n        else {\r\n            address _from = ecrecover(\r\n                keccak256(thisAddress(), messageSenderAddress(), _to, _value, _fee, _nonce),\r\n                _v, _r, _s\r\n            );\r\n\r\n            if (_nonce != nonces [_from]) {\r\n                return false;\r\n            }\r\n            if (\r\n                (addressFlags [_from] | addressFlags [_to]) & BLACK_LIST_FLAG ==\r\n                BLACK_LIST_FLAG) {\r\n                return false;\r\n            }\r\n\r\n            uint256 fee =\r\n            (addressFlags [_from] | addressFlags [_to]) & ZERO_FEE_FLAG == ZERO_FEE_FLAG ?\r\n            0 :\r\n            calcFee(_value);\r\n\r\n            uint256 balance = balances[_from];\r\n            if (_value > balance) {\r\n                return false;\r\n            }\r\n            balance = balance.sub(_value);\r\n            if (fee > balance) {\r\n                return false;\r\n            }\r\n            balance = balance.sub(fee);\r\n            if (_fee > balance) {\r\n                return false;\r\n            }\r\n\r\n            balance = balance.sub(_fee);\r\n\r\n            nonces [_from] = _nonce + 1;\r\n\r\n            balances[_from] = balance;\r\n            balances[_to] = balances[_to].add(_value);\r\n            balances[feeCollector] = balances[feeCollector].add(fee);\r\n            balances[msg.sender] = balances[msg.sender].add(_fee);\r\n\r\n            emit Transfer(_from, _to, _value);\r\n            emit Transfer(_from, feeCollector, fee);\r\n            emit Transfer(_from, msg.sender, _fee);\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function delegatedMultiTransfer(\r\n        address[] _to_arr, uint256[] _value_arr, uint256[] _fee_arr,\r\n        uint256[] _nonce_arr, uint8[] _v_arr, bytes32[] _r_arr, bytes32[] _s_arr)\r\n    public delegatable payable returns (bool) {\r\n        require(\r\n            _to_arr.length == _value_arr.length &&\r\n            _to_arr.length == _fee_arr.length &&\r\n            _to_arr.length == _nonce_arr.length &&\r\n            _to_arr.length == _v_arr.length &&\r\n            _to_arr.length == _r_arr.length &&\r\n            _to_arr.length == _s_arr.length\r\n        );\r\n\r\n        for (uint i = 0; i < _to_arr.length; i++) {\r\n            delegatedTransfer(_to_arr[i], _value_arr[i], _fee_arr[i], _nonce_arr[i], _v_arr[i], _r_arr[i], _s_arr[i]);\r\n        }\r\n    }\r\n\r\n    function createTokens(uint256 _value)\r\n    public delegatable payable returns (bool) {\r\n        require(msg.sender == owner);\r\n\r\n        if (_value > 0) {\r\n            if (_value <= MAX_TOKENS_COUNT.sub(tokensCount)) {\r\n                balances[msg.sender] = balances[msg.sender].add(_value);\r\n                tokensCount = tokensCount.add(_value);\r\n\r\n                emit Transfer(address(0), msg.sender, _value);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burnTokens(uint256 _value)\r\n    public delegatable payable returns (bool) {\r\n        require(msg.sender == owner);\r\n\r\n        if (_value > 0) {\r\n            if (_value <= balances[msg.sender]) {\r\n                balances[msg.sender] = balances[msg.sender].sub(_value);\r\n                tokensCount = tokensCount.sub(_value);\r\n\r\n                emit Transfer(msg.sender, address(0), _value);\r\n\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function freezeTransfers() public delegatable payable {\r\n        require(msg.sender == owner);\r\n\r\n        if (!frozen) {\r\n            frozen = true;\r\n            emit Freeze();\r\n        }\r\n    }\r\n\r\n    function unfreezeTransfers() public delegatable payable {\r\n        require(msg.sender == owner);\r\n\r\n        if (frozen) {\r\n            frozen = false;\r\n            emit Unfreeze();\r\n        }\r\n    }\r\n\r\n    function setOwner(address _newOwner) public {\r\n        require(msg.sender == owner);\r\n\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setFeeCollector(address _newFeeCollector)\r\n    public delegatable payable {\r\n        require(msg.sender == owner);\r\n\r\n        feeCollector = _newFeeCollector;\r\n    }\r\n\r\n    function nonce(address _owner) public view delegatable returns (uint256) {\r\n        return nonces [_owner];\r\n    }\r\n\r\n    function setFeeParameters(\r\n        uint256 _fixedFee,\r\n        uint256 _minVariableFee,\r\n        uint256 _maxVariableFee,\r\n        uint256 _variableFeeNumerator) public delegatable payable {\r\n        require(msg.sender == owner);\r\n\r\n        require(_minVariableFee <= _maxVariableFee);\r\n        require(_variableFeeNumerator <= MAX_FEE_NUMERATOR);\r\n\r\n        fixedFee = _fixedFee;\r\n        minVariableFee = _minVariableFee;\r\n        maxVariableFee = _maxVariableFee;\r\n        variableFeeNumerator = _variableFeeNumerator;\r\n\r\n        emit FeeChange(\r\n            _fixedFee, _minVariableFee, _maxVariableFee, _variableFeeNumerator\r\n        );\r\n    }\r\n\r\n    function getFeeParameters() public delegatable view returns (\r\n        uint256 _fixedFee,\r\n        uint256 _minVariableFee,\r\n        uint256 _maxVariableFee,\r\n        uint256 _variableFeeNumnerator) {\r\n        _fixedFee = fixedFee;\r\n        _minVariableFee = minVariableFee;\r\n        _maxVariableFee = maxVariableFee;\r\n        _variableFeeNumnerator = variableFeeNumerator;\r\n    }\r\n\r\n    function calcFee(uint256 _amount)\r\n    public delegatable view returns (uint256 _fee) {\r\n        require(_amount <= MAX_TOKENS_COUNT);\r\n\r\n        _fee = _amount.mul(variableFeeNumerator) / FEE_DENOMINATOR;\r\n        if (_fee < minVariableFee) _fee = minVariableFee;\r\n        if (_fee > maxVariableFee) _fee = maxVariableFee;\r\n        _fee = _fee.add(fixedFee);\r\n    }\r\n\r\n    function setFlags(address _address, uint256 _flags)\r\n    public delegatable payable {\r\n        require(msg.sender == owner);\r\n\r\n        addressFlags [_address] = _flags;\r\n    }\r\n\r\n    function flags(address _address) public delegatable view returns (uint256) {\r\n        return addressFlags [_address];\r\n    }\r\n\r\n    function setDepute(address _depute) public {\r\n        require(msg.sender == owner);\r\n\r\n        if (depute != _depute) {\r\n            depute = _depute;\r\n            emit Delegation(depute);\r\n        }\r\n    }\r\n\r\n    function thisAddress() internal view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function messageSenderAddress() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    address internal owner;\r\n    address internal feeCollector;\r\n    uint256 internal tokensCount;\r\n    bool internal frozen;\r\n    mapping(address => uint256) internal nonces;\r\n    uint256 internal fixedFee;\r\n    uint256 internal minVariableFee;\r\n    uint256 internal maxVariableFee;\r\n    uint256 internal variableFeeNumerator;\r\n    mapping(address => uint256) internal addressFlags;\r\n    address internal depute;\r\n\r\n    event Freeze ();\r\n    event Unfreeze ();\r\n    event FeeChange (\r\n        uint256 fixedFee,\r\n        uint256 minVariableFee,\r\n        uint256 maxVariableFee,\r\n        uint256 variableFeeNumerator\r\n    );\r\n    event Delegation (address depute);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"freezeTransfers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depute\",\"type\":\"address\"}],\"name\":\"setDepute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeTransfers\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeParameters\",\"outputs\":[{\"name\":\"_fixedFee\",\"type\":\"uint256\"},{\"name\":\"_minVariableFee\",\"type\":\"uint256\"},{\"name\":\"_maxVariableFee\",\"type\":\"uint256\"},{\"name\":\"_variableFeeNumnerator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcFee\",\"outputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"flags\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_flags\",\"type\":\"uint256\"}],\"name\":\"setFlags\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"delegatedTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to_arr\",\"type\":\"address[]\"},{\"name\":\"_value_arr\",\"type\":\"uint256[]\"},{\"name\":\"_fee_arr\",\"type\":\"uint256[]\"},{\"name\":\"_nonce_arr\",\"type\":\"uint256[]\"},{\"name\":\"_v_arr\",\"type\":\"uint8[]\"},{\"name\":\"_r_arr\",\"type\":\"bytes32[]\"},{\"name\":\"_s_arr\",\"type\":\"bytes32[]\"}],\"name\":\"delegatedMultiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fixedFee\",\"type\":\"uint256\"},{\"name\":\"_minVariableFee\",\"type\":\"uint256\"},{\"name\":\"_maxVariableFee\",\"type\":\"uint256\"},{\"name\":\"_variableFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeCollector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minVariableFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxVariableFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"variableFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"depute\",\"type\":\"address\"}],\"name\":\"Delegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UAXToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006436466c0a0583531b1fbebfac8cc694359a5e24","Library":"","LicenseType":"None","SwarmSource":"bzzr://264db80752a7c1ca440d2302a824b48486005b621791c517ff1b4f86c64b0807"}]}