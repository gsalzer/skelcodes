{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/** @title SecondChance Lottery Game\r\n * @author \r\n */\r\ncontract SecondChance {\r\n        \r\n    using SafeMath for uint256;\r\n    \r\n    struct gameDetails{\r\n        uint256 commisionAmount;\r\n        uint256 totalAmount;\r\n        uint256 noOfWinners;\r\n        uint256 userCount;\r\n        uint256[] userId;\r\n        uint256[] winnerList;\r\n        bool winCountStatus;\r\n    }\r\n\r\n    address public admin;\r\n    uint256 public percentage;\r\n    uint256 public maxAmount;\r\n    \r\n    mapping(uint256 => gameDetails) public games;\r\n                                                                                                                                          \r\n    event Participators(uint256 gameId,uint256 UserId,uint256 depType,uint256 depAmount, uint256 fiatAmount);\r\n \r\n    constructor(address _admin, uint256 _percentage, uint256 _maxAmount) public {\r\n        admin = _admin;\r\n        percentage = _percentage;\r\n        maxAmount = _maxAmount;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin , \"Only Owner Must call this Function\");\r\n        _;\r\n    }\r\n    \r\n    /** @dev Set the Admin  Percentage.\r\n     * @param _percentage - Percentage for Admin commision.\r\n     * @return bool - Success.\r\n     */\r\n    function setAdminPercent(uint256 _percentage) onlyOwner public returns(bool) {\r\n        percentage = _percentage;\r\n        return true;\r\n    }\r\n     \r\n    /** @dev Set the Maximum Winning Amount.\r\n     * @param _maxAmount - Maximum Winning Amount.\r\n     * @return bool - Success.\r\n     */\r\n    function setMaxAmount(uint256 _maxAmount) onlyOwner public returns(bool) {\r\n        maxAmount = _maxAmount;\r\n        return true;\r\n    }\r\n\r\n    /** @dev To Change the Admin Address.\r\n     * @param _newAdmin - The new address for Admin.\r\n     * @return bool - Success.\r\n     */\r\n    function changeAdmin(address _newAdmin) onlyOwner public returns(bool) {\r\n        admin = _newAdmin;\r\n        return true;\r\n    }\r\n\r\n    /** @dev Stores the Participator Details in Contract.\r\n     * @param _gameid - Unique Id of the game.\r\n     * @param _userid - The Bundle of userIds of the particular Game.\r\n     * @param _amount - The Bundle of depositAmount which is ETH/BTC (both convert into wei) in the particular Game.\r\n     * @param _type - The Bundle of Currency Type, If it is ETH then _type = 0 / If it is BTC then _type = 1.\r\n     * @param _fiat - The Bundle of depositAmount which is  ETH/BTC (convert into USD).\r\n     * @return bool - true.\r\n     */\r\n    function participate( uint256 _gameid,uint256[] memory _userid, uint256[] memory _amount, uint256[] memory _type, uint256[] memory _fiat) onlyOwner public returns(bool) {\r\n        require(games[_gameid].winCountStatus == false, \"Already game is completed\");\r\n        for(uint256 i=0 ; i<_userid.length ; i++ ){\r\n            require(_type[i] == 0 || _type[i] == 1, \"Invalid Type\");\r\n            games[_gameid].userId.push(_userid[i]);\r\n            games[_gameid].totalAmount = games[_gameid].totalAmount.add(_fiat[i]);\r\n            emit Participators(_gameid,_userid[i],_type[i],_amount[i],_fiat[i]); //event\r\n        }\r\n        games[_gameid].userCount = games[_gameid].userCount.add(uint256(_userid.length));\r\n        return true;\r\n    }\r\n\r\n    /** @dev Performs the Winning Algorithm and get the number of winners.\r\n     * @param _gameid - Id of the game.\r\n     * @param _totalamount - The Total Amount of USD in the particular Game for cross check.\r\n     * @param _userCount - The Total User Count of the particular Game for cross check.\r\n     * @return uint256 - Total Count of Winners.\r\n     */\r\n    function winning_algorithm(uint256 _gameid,uint256 _totalamount, uint256 _userCount) onlyOwner public returns(uint256) {\r\n        \r\n        // requires for cross check\r\n        require(_totalamount > 0 && games[_gameid].totalAmount > 0, \"Total Fiat Amount Checking Failed\");\r\n        require(games[_gameid].totalAmount == _totalamount,\"Total Amount mismatch\");\r\n        require(games[_gameid].userCount == _userCount,\"User Count mismatch\");\r\n        require(games[_gameid].winCountStatus == false, \"Already Done this Process\");\r\n\r\n        // deduct commision\r\n        uint256 perc = uint256(100).mul(10**18);\r\n        uint256 cAmount_ = (_totalamount.mul(percentage)).div(perc);\r\n        games[_gameid].commisionAmount = games[_gameid].commisionAmount.add(cAmount_);\r\n        games[_gameid].totalAmount =  games[_gameid].totalAmount.sub(games[_gameid].commisionAmount);\r\n        \r\n        \r\n        // if less than maxAmount after deduction of commisionAmount\r\n        if(games[_gameid].totalAmount < maxAmount){\r\n             games[_gameid].noOfWinners = 1;\r\n        }\r\n\r\n        // calc no of winners and list\r\n        else{\r\n            games[_gameid].noOfWinners = (games[_gameid].totalAmount).div(maxAmount);\r\n             \r\n            uint256 balanceAmount = (games[_gameid].totalAmount).mod(maxAmount);\r\n              \r\n            // last amount for last winner\r\n            if(balanceAmount>0)\r\n               games[_gameid].noOfWinners = games[_gameid].noOfWinners.add(1);\r\n                \r\n            // usercount and winnercount checking\r\n            if(games[_gameid].noOfWinners > games[_gameid].userCount)\r\n               games[_gameid].noOfWinners = games[_gameid].userCount;\r\n        }\r\n        games[_gameid].winCountStatus = true;\r\n        \r\n        return(games[_gameid].noOfWinners);\r\n    }\r\n\r\n    /** @dev Performs the Random Selection and get the winners in the particular game.\r\n     * @param _gId - Id of the game.\r\n     * @param _time - The current Time (EPOCH) for random generaion.\r\n     * @param _winnerCount - The Total Winner Count of the particular Game for cross check.\r\n     * @return bool - Success.\r\n     */\r\n   function getWinner(uint256 _gId, uint256 _time, uint256 _winnerCount) onlyOwner public returns (bool) {\r\n       require(games[_gId].noOfWinners == _winnerCount,\"Invalid Winner Count\");\r\n       require(games[_gId].winCountStatus == true, \"Pending Winning Count\");\r\n       \r\n       uint256 NumberOfUsers = games[_gId].userCount;\r\n       uint256 random = uint256(uint(keccak256(abi.encodePacked(block.timestamp + _time))) % NumberOfUsers +1);\r\n       uint256 userId =  games[_gId].userId[random];\r\n       games[_gId].winnerList.push(userId);\r\n       \r\n       return true;\r\n       \r\n    }\r\n    \r\n    /** @dev Getting the winning List and their winning amount for this particular game.\r\n     * @param _gId - Id of the game.\r\n     * @return uint256[] memory - array of winning List.\r\n     */\r\n    function getWinningList(uint256 _gId)  public view returns(uint256[] memory) {\r\n        return (games[_gId].winnerList);\r\n    }\r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UserId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fiatAmount\",\"type\":\"uint256\"}],\"name\":\"Participators\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"commisionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winCountStatus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerCount\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gId\",\"type\":\"uint256\"}],\"name\":\"getWinningList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_userid\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_type\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fiat\",\"type\":\"uint256[]\"}],\"name\":\"participate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setAdminPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userCount\",\"type\":\"uint256\"}],\"name\":\"winning_algorithm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SecondChance","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bda81b609821b68f83ce27a61c272e803fe9423e000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000003635c9adc5dea00000","Library":"","LicenseType":"None","SwarmSource":"bzzr://9134b275fadfcab8628ef3612943c8544cd68da74a2c9e75d970336c764e0ded"}]}