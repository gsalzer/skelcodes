{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-01-21\r\n*/\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\r\n * @dev If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CommonMath.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\nlibrary CommonMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant SCALE_FACTOR = 10 ** 18;\r\n    uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;\r\n\r\n    /**\r\n     * Returns scale factor equal to 10 ** 18\r\n     *\r\n     * @return  10 ** 18\r\n     */\r\n    function scaleFactor()\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return SCALE_FACTOR;\r\n    }\r\n\r\n    /**\r\n     * Calculates and returns the maximum value for a uint256\r\n     *\r\n     * @return  The maximum value for uint256\r\n     */\r\n    function maxUInt256()\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return MAX_UINT_256;\r\n    }\r\n\r\n    /**\r\n     * Increases a value by the scale factor to allow for additional precision\r\n     * during mathematical operations\r\n     */\r\n    function scale(\r\n        uint256 a\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a.mul(SCALE_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * Divides a value by the scale factor to allow for additional precision\r\n     * during mathematical operations\r\n    */\r\n    function deScale(\r\n        uint256 a\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a.div(SCALE_FACTOR);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs the power on a specified value, reverts on overflow.\r\n    */\r\n    function safePower(\r\n        uint256 a,\r\n        uint256 pow\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(a > 0);\r\n\r\n        uint256 result = 1;\r\n        for (uint256 i = 0; i < pow; i++){\r\n            uint256 previousResult = result;\r\n\r\n            // Using safemath multiplication prevents overflows\r\n            result = previousResult.mul(a);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Performs division where if there is a modulo, the value is rounded up\r\n    */\r\n    function divCeil(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return a.mod(b) > 0 ? a.div(b).add(1) : a.div(b);\r\n    }\r\n\r\n    /**\r\n     * Checks for rounding errors and returns value of potential partial amounts of a principal\r\n     *\r\n     * @param  _principal       Number fractional amount is derived from\r\n     * @param  _numerator       Numerator of fraction\r\n     * @param  _denominator     Denominator of fraction\r\n     * @return uint256          Fractional amount of principal calculated\r\n     */\r\n    function getPartialAmount(\r\n        uint256 _principal,\r\n        uint256 _numerator,\r\n        uint256 _denominator\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Get remainder of partial amount (if 0 not a partial amount)\r\n        uint256 remainder = mulmod(_principal, _numerator, _denominator);\r\n\r\n        // Return if not a partial amount\r\n        if (remainder == 0) {\r\n            return _principal.mul(_numerator).div(_denominator);\r\n        }\r\n\r\n        // Calculate error percentage\r\n        uint256 errPercentageTimes1000000 = remainder.mul(1000000).div(_numerator.mul(_principal));\r\n\r\n        // Require error percentage is less than 0.1%.\r\n        require(\r\n            errPercentageTimes1000000 < 1000,\r\n            \"CommonMath.getPartialAmount: Rounding error exceeds bounds\"\r\n        );\r\n\r\n        return _principal.mul(_numerator).div(_denominator);\r\n    }\r\n\r\n    /*\r\n     * Gets the rounded up log10 of passed value\r\n     *\r\n     * @param  _value         Value to calculate ceil(log()) on\r\n     * @return uint256        Output value\r\n     */\r\n    function ceilLog10(\r\n        uint256 _value\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Make sure passed value is greater than 0\r\n        require (\r\n            _value > 0,\r\n            \"CommonMath.ceilLog10: Value must be greater than zero.\"\r\n        );\r\n\r\n        // Since log10(1) = 0, if _value = 1 return 0\r\n        if (_value == 1) return 0;\r\n\r\n        // Calcualte ceil(log10())\r\n        uint256 x = _value - 1;\r\n\r\n        uint256 result = 0;\r\n\r\n        if (x >= 10 ** 64) {\r\n            x /= 10 ** 64;\r\n            result += 64;\r\n        }\r\n        if (x >= 10 ** 32) {\r\n            x /= 10 ** 32;\r\n            result += 32;\r\n        }\r\n        if (x >= 10 ** 16) {\r\n            x /= 10 ** 16;\r\n            result += 16;\r\n        }\r\n        if (x >= 10 ** 8) {\r\n            x /= 10 ** 8;\r\n            result += 8;\r\n        }\r\n        if (x >= 10 ** 4) {\r\n            x /= 10 ** 4;\r\n            result += 4;\r\n        }\r\n        if (x >= 100) {\r\n            x /= 100;\r\n            result += 2;\r\n        }\r\n        if (x >= 10) {\r\n            result += 1;\r\n        }\r\n\r\n        return result + 1;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CompoundUtils.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title CompoundUtils\r\n * @author Set Protocol\r\n *\r\n * Collection of common Compound functions for use in Set Protocol contracts\r\n */\r\nlibrary CompoundUtils\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n     * Utility function to convert a specified amount of cTokens to underlying\r\n     * token based on the cToken's exchange rate\r\n     *\r\n     * @param _cTokenAmount         Amount of cTokens that will be converted to underlying\r\n     * @param _cTokenExchangeRate   Exchange rate for the cToken\r\n     * @return underlyingAmount     Amount of underlying ERC20 tokens\r\n     */\r\n    function convertCTokenToUnderlying(\r\n        uint256 _cTokenAmount,\r\n        uint256 _cTokenExchangeRate\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        // Underlying units is calculated as cToken quantity * exchangeRate divided by 10 ** 18 and rounded up.\r\n        uint256 a = _cTokenAmount.mul(_cTokenExchangeRate);\r\n        uint256 b = CommonMath.scaleFactor();\r\n\r\n        // Round value up\r\n        return CommonMath.divCeil(a, b);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/IERC20.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title IERC20\r\n * @author Set Protocol\r\n *\r\n * Interface for using ERC20 Tokens. This interface is needed to interact with tokens that are not\r\n * fully ERC20 compliant and return something other than true on successful transfers.\r\n */\r\ninterface IERC20 {\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function totalSupply()\r\n        external\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/lib/ERC20Wrapper.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Wrapper\r\n * @author Set Protocol\r\n *\r\n * This library contains functions for interacting wtih ERC20 tokens, even those not fully compliant.\r\n * For all functions we will only accept tokens that return a null or true value, any other values will\r\n * cause the operation to revert.\r\n */\r\nlibrary ERC20Wrapper {\r\n\r\n    // ============ Internal Functions ============\r\n\r\n    /**\r\n     * Check balance owner's balance of ERC20 token\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _owner          The owner who's balance is being checked\r\n     * @return  uint256        The _owner's amount of tokens\r\n     */\r\n    function balanceOf(\r\n        address _token,\r\n        address _owner\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_token).balanceOf(_owner);\r\n    }\r\n\r\n    /**\r\n     * Checks spender's allowance to use token's on owner's behalf.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _owner          The token owner address\r\n     * @param  _spender        The address the allowance is being checked on\r\n     * @return  uint256        The spender's allowance on behalf of owner\r\n     */\r\n    function allowance(\r\n        address _token,\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_token).allowance(_owner, _spender);\r\n    }\r\n\r\n    /**\r\n     * Transfers tokens from an address. Handle's tokens that return true or null.\r\n     * If other value returned, reverts.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _to             The address to transfer to\r\n     * @param  _quantity       The amount of tokens to transfer\r\n     */\r\n    function transfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n    {\r\n        IERC20(_token).transfer(_to, _quantity);\r\n\r\n        // Check that transfer returns true or null\r\n        require(\r\n            checkSuccess(),\r\n            \"ERC20Wrapper.transfer: Bad return value\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Transfers tokens from an address (that has set allowance on the proxy).\r\n     * Handle's tokens that return true or null. If other value returned, reverts.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     * @param  _quantity       The number of tokens to transfer\r\n     */\r\n    function transferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n    {\r\n        IERC20(_token).transferFrom(_from, _to, _quantity);\r\n\r\n        // Check that transferFrom returns true or null\r\n        require(\r\n            checkSuccess(),\r\n            \"ERC20Wrapper.transferFrom: Bad return value\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Grants spender ability to spend on owner's behalf.\r\n     * Handle's tokens that return true or null. If other value returned, reverts.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _spender        The address to approve for transfer\r\n     * @param  _quantity       The amount of tokens to approve spender for\r\n     */\r\n    function approve(\r\n        address _token,\r\n        address _spender,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        IERC20(_token).approve(_spender, _quantity);\r\n\r\n        // Check that approve returns true or null\r\n        require(\r\n            checkSuccess(),\r\n            \"ERC20Wrapper.approve: Bad return value\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Ensure's the owner has granted enough allowance for system to\r\n     * transfer tokens.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _owner          The address of the token owner\r\n     * @param  _spender        The address to grant/check allowance for\r\n     * @param  _quantity       The amount to see if allowed for\r\n     */\r\n    function ensureAllowance(\r\n        address _token,\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n    {\r\n        uint256 currentAllowance = allowance(_token, _owner, _spender);\r\n        if (currentAllowance < _quantity) {\r\n            approve(\r\n                _token,\r\n                _spender,\r\n                CommonMath.maxUInt256()\r\n            );\r\n        }\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\r\n     * function returned 0 bytes or 1.\r\n     */\r\n    function checkSuccess(\r\n    )\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // default to failure\r\n        uint256 returnValue = 0;\r\n\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n\r\n            // no bytes returned: assume success\r\n            case 0x0 {\r\n                returnValue := 1\r\n            }\r\n\r\n            // 32 bytes returned\r\n            case 0x20 {\r\n                // copy 32 bytes into scratch space\r\n                returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                // load those bytes into returnValue\r\n                returnValue := mload(0x0)\r\n            }\r\n\r\n            // not sure what was returned: dont mark as success\r\n            default { }\r\n        }\r\n\r\n        // check if returned value is one or nothing\r\n        return returnValue == 1;\r\n    }\r\n}\r\n\r\n// File: contracts/core/interfaces/ICToken.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title ICToken\r\n * @author Set Protocol\r\n *\r\n * Interface for interacting with Compound cTokens\r\n */\r\ninterface ICToken {\r\n\r\n    /**\r\n     * Calculates the exchange rate from the underlying to the CToken\r\n     *\r\n     * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateCurrent()\r\n        external\r\n        returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function decimals() external view returns(uint8);\r\n\r\n    /**\r\n     * Sender supplies assets into the market and receives cTokens in exchange\r\n     *\r\n     * @notice Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param mintAmount The amount of the underlying asset to supply\r\n     * @return uint 0=success, otherwise a failure\r\n     */\r\n    function mint(uint mintAmount) external returns (uint);\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n}\r\n\r\n// File: contracts/core/interfaces/IRebalanceAuctionModule.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\npragma experimental \"ABIEncoderV2\";\r\n\r\n/**\r\n * @title IRebalanceAuctionModule\r\n * @author Set Protocol\r\n *\r\n * The IRebalanceAuctionModule interface provides a light-weight, structured way to interact with the\r\n * RebalanceAuctionModule contract from another contract.\r\n */\r\n\r\ninterface IRebalanceAuctionModule {\r\n    /**\r\n     * Bid on rebalancing a given quantity of sets held by a rebalancing token\r\n     * The tokens are returned to the user.\r\n     *\r\n     * @param  _rebalancingSetToken    Address of the rebalancing token being bid on\r\n     * @param  _quantity               Number of currentSets to rebalance\r\n     * @param  _allowPartialFill       Set to true if want to partially fill bid when quantity\r\n     *                                 is greater than currentRemainingSets\r\n     */\r\n    function bidAndWithdraw(\r\n        address _rebalancingSetToken,\r\n        uint256 _quantity,\r\n        bool _allowPartialFill\r\n    )\r\n        external;\r\n}\r\n\r\n// File: contracts/core/lib/RebalancingLibrary.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title RebalancingLibrary\r\n * @author Set Protocol\r\n *\r\n * The RebalancingLibrary contains functions for facilitating the rebalancing process for\r\n * Rebalancing Set Tokens. Removes the old calculation functions\r\n *\r\n */\r\nlibrary RebalancingLibrary {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum State { Default, Proposal, Rebalance, Drawdown }\r\n\r\n    /* ============ Structs ============ */\r\n\r\n    struct AuctionPriceParameters {\r\n        uint256 auctionStartTime;\r\n        uint256 auctionTimeToPivot;\r\n        uint256 auctionStartPrice;\r\n        uint256 auctionPivotPrice;\r\n    }\r\n\r\n    struct BiddingParameters {\r\n        uint256 minimumBid;\r\n        uint256 remainingCurrentSets;\r\n        uint256[] combinedCurrentUnits;\r\n        uint256[] combinedNextSetUnits;\r\n        address[] combinedTokenArray;\r\n    }\r\n}\r\n\r\n// File: contracts/core/interfaces/IRebalancingSetToken.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title IRebalancingSetToken\r\n * @author Set Protocol\r\n *\r\n * The IRebalancingSetToken interface provides a light-weight, structured way to interact with the\r\n * RebalancingSetToken contract from another contract.\r\n */\r\n\r\ninterface IRebalancingSetToken {\r\n\r\n    /*\r\n     * Get the auction library contract used for the current rebalance\r\n     *\r\n     * @return address    Address of auction library used in the upcoming auction\r\n     */\r\n    function auctionLibrary()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get totalSupply of Rebalancing Set\r\n     *\r\n     * @return  totalSupply\r\n     */\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get proposalTimeStamp of Rebalancing Set\r\n     *\r\n     * @return  proposalTimeStamp\r\n     */\r\n    function proposalStartTime()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get lastRebalanceTimestamp of Rebalancing Set\r\n     *\r\n     * @return  lastRebalanceTimestamp\r\n     */\r\n    function lastRebalanceTimestamp()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceInterval of Rebalancing Set\r\n     *\r\n     * @return  rebalanceInterval\r\n     */\r\n    function rebalanceInterval()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceState of Rebalancing Set\r\n     *\r\n     * @return RebalancingLibrary.State    Current rebalance state of the RebalancingSetToken\r\n     */\r\n    function rebalanceState()\r\n        external\r\n        view\r\n        returns (RebalancingLibrary.State);\r\n\r\n    /*\r\n     * Get the starting amount of current SetToken for the current auction\r\n     *\r\n     * @return  rebalanceState\r\n     */\r\n    function startingCurrentSetAmount()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Gets the balance of the specified address.\r\n     *\r\n     * @param owner      The address to query the balance of.\r\n     * @return           A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(\r\n        address owner\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Function used to set the terms of the next rebalance and start the proposal period\r\n     *\r\n     * @param _nextSet                      The Set to rebalance into\r\n     * @param _auctionLibrary               The library used to calculate the Dutch Auction price\r\n     * @param _auctionTimeToPivot           The amount of time for the auction to go ffrom start to pivot price\r\n     * @param _auctionStartPrice            The price to start the auction at\r\n     * @param _auctionPivotPrice            The price at which the price curve switches from linear to exponential\r\n     */\r\n    function propose(\r\n        address _nextSet,\r\n        address _auctionLibrary,\r\n        uint256 _auctionTimeToPivot,\r\n        uint256 _auctionStartPrice,\r\n        uint256 _auctionPivotPrice\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Get natural unit of Set\r\n     *\r\n     * @return  uint256       Natural unit of Set\r\n     */\r\n    function naturalUnit()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Returns the address of the current base SetToken with the current allocation\r\n     *\r\n     * @return           A address representing the base SetToken\r\n     */\r\n    function currentSet()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * Returns the address of the next base SetToken with the post auction allocation\r\n     *\r\n     * @return  address    Address representing the base SetToken\r\n     */\r\n    function nextSet()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get the unit shares of the rebalancing Set\r\n     *\r\n     * @return  unitShares       Unit Shares of the base Set\r\n     */\r\n    function unitShares()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Burn set token for given address.\r\n     * Can only be called by authorized contracts.\r\n     *\r\n     * @param  _from        The address of the redeeming account\r\n     * @param  _quantity    The number of sets to burn from redeemer\r\n     */\r\n    function burn(\r\n        address _from,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Place bid during rebalance auction. Can only be called by Core.\r\n     *\r\n     * @param _quantity                 The amount of currentSet to be rebalanced\r\n     * @return combinedTokenArray       Array of token addresses invovled in rebalancing\r\n     * @return inflowUnitArray          Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray         Array of amount of tokens taken out of system in bid\r\n     */\r\n    function placeBid(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (address[] memory, uint256[] memory, uint256[] memory);\r\n\r\n    /*\r\n     * Get combinedTokenArray of Rebalancing Set\r\n     *\r\n     * @return  combinedTokenArray\r\n     */\r\n    function getCombinedTokenArrayLength()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get combinedTokenArray of Rebalancing Set\r\n     *\r\n     * @return  combinedTokenArray\r\n     */\r\n    function getCombinedTokenArray()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /*\r\n     * Get failedAuctionWithdrawComponents of Rebalancing Set\r\n     *\r\n     * @return  failedAuctionWithdrawComponents\r\n     */\r\n    function getFailedAuctionWithdrawComponents()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /*\r\n     * Get auctionPriceParameters for current auction\r\n     *\r\n     * @return uint256[4]    AuctionPriceParameters for current rebalance auction\r\n     */\r\n    function getAuctionPriceParameters()\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get biddingParameters for current auction\r\n     *\r\n     * @return uint256[2]    BiddingParameters for current rebalance auction\r\n     */\r\n    function getBiddingParameters()\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get token inflows and outflows required for bid. Also the amount of Rebalancing\r\n     * Sets that would be generated.\r\n     *\r\n     * @param _quantity               The amount of currentSet to be rebalanced\r\n     * @return inflowUnitArray        Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray       Array of amount of tokens taken out of system in bid\r\n     */\r\n    function getBidPrice(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory, uint256[] memory);\r\n\r\n}\r\n\r\n// File: contracts/core/interfaces/ITransferProxy.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n/**\r\n * @title ITransferProxy\r\n * @author Set Protocol\r\n *\r\n * The ITransferProxy interface provides a light-weight, structured way to interact with the\r\n * TransferProxy contract from another contract.\r\n */\r\ninterface ITransferProxy {\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * Transfers tokens from an address (that has set allowance on the proxy).\r\n     * Can only be called by authorized core contracts.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _quantity       The number of tokens to transfer\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     */\r\n    function transfer(\r\n        address _token,\r\n        uint256 _quantity,\r\n        address _from,\r\n        address _to\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Transfers tokens from an address (that has set allowance on the proxy).\r\n     * Can only be called by authorized core contracts.\r\n     *\r\n     * @param  _tokens         The addresses of the ERC20 token\r\n     * @param  _quantities     The numbers of tokens to transfer\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     */\r\n    function batchTransfer(\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _quantities,\r\n        address _from,\r\n        address _to\r\n    )\r\n        external;\r\n}\r\n\r\n// File: contracts/core/lib/Rebalance.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title Rebalance\r\n * @author Set Protocol\r\n *\r\n * Types and functions for Rebalance-related data.\r\n */\r\nlibrary Rebalance {\r\n\r\n    struct TokenFlow {\r\n        address[] addresses;\r\n        uint256[] inflow;\r\n        uint256[] outflow;\r\n    }\r\n\r\n    function composeTokenFlow(\r\n        address[] memory _addresses,\r\n        uint256[] memory _inflow,\r\n        uint256[] memory _outflow\r\n    )\r\n        internal\r\n        pure\r\n        returns(TokenFlow memory)\r\n    {\r\n        return TokenFlow({addresses: _addresses, inflow: _inflow, outflow: _outflow });\r\n    }\r\n\r\n    function decomposeTokenFlow(TokenFlow memory _tokenFlow)\r\n        internal\r\n        pure\r\n        returns (address[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        return (_tokenFlow.addresses, _tokenFlow.inflow, _tokenFlow.outflow);\r\n    }\r\n\r\n    function decomposeTokenFlowToBidPrice(TokenFlow memory _tokenFlow)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        return (_tokenFlow.inflow, _tokenFlow.outflow);\r\n    }\r\n\r\n    /**\r\n     * Get token flows array of addresses, inflows and outflows\r\n     *\r\n     * @param    _rebalancingSetToken   The rebalancing Set Token instance\r\n     * @param    _quantity              The amount of currentSet to be rebalanced\r\n     * @return   combinedTokenArray     Array of token addresses\r\n     * @return   inflowArray            Array of amount of tokens inserted into system in bid\r\n     * @return   outflowArray           Array of amount of tokens returned from system in bid\r\n     */\r\n    function getTokenFlows(\r\n        IRebalancingSetToken _rebalancingSetToken,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n        view\r\n        returns (address[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        // Get token addresses\r\n        address[] memory combinedTokenArray = _rebalancingSetToken.getCombinedTokenArray();\r\n\r\n        // Get inflow and outflow arrays for the given bid quantity\r\n        (\r\n            uint256[] memory inflowArray,\r\n            uint256[] memory outflowArray\r\n        ) = _rebalancingSetToken.getBidPrice(_quantity);\r\n\r\n        return (combinedTokenArray, inflowArray, outflowArray);\r\n    }\r\n}\r\n\r\n// File: contracts/helper/RebalancingSetCTokenBidder.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RebalancingSetCTokenBidder\r\n * @author Set Protocol\r\n *\r\n * A helper contract that mints a cToken from its underlying or redeems a cToken into\r\n * its underlying used for bidding in the RebalanceAuctionModule.\r\n */\r\ncontract RebalancingSetCTokenBidder is\r\n    ReentrancyGuard\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    // Address and instance of RebalanceAuctionModule contract\r\n    IRebalanceAuctionModule public rebalanceAuctionModule;\r\n\r\n    // Address and instance of TransferProxy contract\r\n    ITransferProxy public transferProxy;\r\n\r\n    // Mapping of cToken address to underlying address\r\n    mapping (address => address) public cTokenToUnderlying;\r\n\r\n    string public dataDescription;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event BidPlacedCToken(\r\n        address indexed rebalancingSetToken,\r\n        address indexed bidder\r\n    );\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Constructor function for RebalancingSetCTokenBidder\r\n     *\r\n     * @param _rebalanceAuctionModule   The address of RebalanceAuctionModule\r\n     * @param _transferProxy            The address of TransferProxy\r\n     * @param _cTokenArray              The address array of the target cToken\r\n     * @param _underlyingArray          The address array of the target cToken's underlying\r\n     * @param _dataDescription          Description of contract for Etherscan / other applications\r\n     */\r\n    constructor(\r\n        IRebalanceAuctionModule _rebalanceAuctionModule,\r\n        ITransferProxy _transferProxy,\r\n        address[] memory _cTokenArray,\r\n        address[] memory _underlyingArray,\r\n        string memory _dataDescription\r\n    )\r\n        public\r\n    {\r\n        rebalanceAuctionModule = _rebalanceAuctionModule;\r\n\r\n        transferProxy = _transferProxy;\r\n\r\n        dataDescription = _dataDescription;\r\n\r\n        require(\r\n            _cTokenArray.length == _underlyingArray.length,\r\n            \"RebalancingSetCTokenBidder.constructor: cToken array and underlying array must be same length\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _cTokenArray.length; i++) {\r\n            address cTokenAddress = _cTokenArray[i];\r\n            address underlyingAddress = _underlyingArray[i];\r\n\r\n            // Initialize mapping of cToken to underlying\r\n            cTokenToUnderlying[cTokenAddress] = underlyingAddress;\r\n\r\n            // Add approvals of the underlying token to the cToken contract\r\n            ERC20Wrapper.approve(\r\n                underlyingAddress,\r\n                cTokenAddress,\r\n                CommonMath.maxUInt256()\r\n            );\r\n\r\n            // Add approvals of the cToken to the transferProxy contract\r\n            ERC20Wrapper.approve(\r\n                cTokenAddress,\r\n                address(_transferProxy),\r\n                CommonMath.maxUInt256()\r\n            );\r\n        }\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * Bid on rebalancing a given quantity of sets held by a rebalancing token wrapping or unwrapping\r\n     * a target cToken involved. The tokens are returned to the user.\r\n     *\r\n     * @param  _rebalancingSetToken    Instance of the rebalancing token being bid on\r\n     * @param  _quantity               Number of currentSets to rebalance\r\n     * @param  _allowPartialFill       Set to true if want to partially fill bid when quantity\r\n                                       is greater than currentRemainingSets\r\n     */\r\n\r\n    function bidAndWithdraw(\r\n        IRebalancingSetToken _rebalancingSetToken,\r\n        uint256 _quantity,\r\n        bool _allowPartialFill\r\n    )\r\n        external\r\n        nonReentrant\r\n    {\r\n        // Get token flow arrays for the given bid quantity\r\n        (\r\n            address[] memory combinedTokenArray,\r\n            uint256[] memory inflowUnitsArray,\r\n            uint256[] memory outflowUnitsArray\r\n        ) = Rebalance.getTokenFlows(_rebalancingSetToken, _quantity);\r\n\r\n        // Ensure allowances and transfer auction tokens or underlying from user\r\n        depositComponents(\r\n            combinedTokenArray,\r\n            inflowUnitsArray\r\n        );\r\n\r\n        // Bid in auction\r\n        rebalanceAuctionModule.bidAndWithdraw(\r\n            address(_rebalancingSetToken),\r\n            _quantity,\r\n            _allowPartialFill\r\n        );\r\n\r\n        // Withdraw auction tokens or underlying to user\r\n        withdrawComponentsToSender(\r\n            combinedTokenArray\r\n        );\r\n\r\n        // Log bid placed with Eth event\r\n        emit BidPlacedCToken(\r\n            address(_rebalancingSetToken),\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Get token inflows and outflows and combined token array denominated in underlying required\r\n     * for bid for a given rebalancing Set token.\r\n     *\r\n     * @param _rebalancingSetToken    The rebalancing Set Token instance\r\n     * @param _quantity               The amount of currentSet to be rebalanced\r\n     * @return combinedTokenArray     Array of token addresses\r\n     * @return inflowUnitsArray       Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitsArray      Array of amount of tokens returned from system in bid\r\n     */\r\n    function getAddressAndBidPriceArray(\r\n        IRebalancingSetToken _rebalancingSetToken,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (address[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        // Get token flow arrays for the given bid quantity\r\n        (\r\n            address[] memory combinedTokenArray,\r\n            uint256[] memory inflowUnitsArray,\r\n            uint256[] memory outflowUnitsArray\r\n        ) = Rebalance.getTokenFlows(_rebalancingSetToken, _quantity);\r\n\r\n        // Loop through the combined token addresses array and replace with underlying address\r\n        for (uint256 i = 0; i < combinedTokenArray.length; i++) {\r\n            address currentComponentAddress = combinedTokenArray[i];\r\n\r\n            // Check if current component address is a cToken\r\n            address underlyingAddress = cTokenToUnderlying[currentComponentAddress];\r\n            if (underlyingAddress != address(0)) {\r\n                combinedTokenArray[i] = underlyingAddress;\r\n\r\n                // Replace inflow and outflow with required amount of underlying.\r\n                // Calculated as cToken quantity * exchangeRate / 10 ** 18.\r\n                uint256 exchangeRate = ICToken(currentComponentAddress).exchangeRateStored();\r\n                uint256 currentInflowQuantity = inflowUnitsArray[i];\r\n                uint256 currentOutflowQuantity = outflowUnitsArray[i];\r\n\r\n                inflowUnitsArray[i] = CompoundUtils.convertCTokenToUnderlying(currentInflowQuantity, exchangeRate);\r\n                outflowUnitsArray[i] = CompoundUtils.convertCTokenToUnderlying(currentOutflowQuantity, exchangeRate);\r\n            }\r\n        }\r\n\r\n        return (combinedTokenArray, inflowUnitsArray, outflowUnitsArray);\r\n    }\r\n\r\n    /* ============ Private Functions ============ */\r\n\r\n    /**\r\n     * Before bidding, calculate the required amount of inflow tokens and deposit token components\r\n     * into this helper contract.\r\n     *\r\n     * @param  _combinedTokenArray            Array of token addresses\r\n     * @param  _inflowUnitsArray              Array of inflow token units\r\n     */\r\n    function depositComponents(\r\n        address[] memory _combinedTokenArray,\r\n        uint256[] memory _inflowUnitsArray\r\n    )\r\n        private\r\n    {\r\n        // Loop through the combined token addresses array and deposit inflow amounts\r\n        for (uint256 i = 0; i < _combinedTokenArray.length; i++) {\r\n            address currentComponentAddress = _combinedTokenArray[i];\r\n            uint256 currentComponentQuantity = _inflowUnitsArray[i];\r\n\r\n            // Check component inflow is greater than 0\r\n            if (currentComponentQuantity > 0) {\r\n                // Ensure allowance for components to transferProxy\r\n                ERC20Wrapper.ensureAllowance(\r\n                    currentComponentAddress,\r\n                    address(this),\r\n                    address(transferProxy),\r\n                    currentComponentQuantity\r\n                );\r\n\r\n                // If cToken, calculate required underlying tokens, transfer to contract,\r\n                // ensure underlying allowance to cToken and then mint cTokens\r\n                address underlyingAddress = cTokenToUnderlying[currentComponentAddress];\r\n                if (underlyingAddress != address(0)) {\r\n                    ICToken cTokenInstance = ICToken(currentComponentAddress);\r\n\r\n                    // Calculate required amount of underlying. Calculated as cToken quantity * exchangeRate / 10 ** 18.\r\n                    uint256 exchangeRate = cTokenInstance.exchangeRateCurrent();\r\n                    uint256 underlyingQuantity = CompoundUtils.convertCTokenToUnderlying(currentComponentQuantity, exchangeRate);\r\n\r\n                    // Transfer underlying tokens to contract\r\n                    ERC20Wrapper.transferFrom(\r\n                        underlyingAddress,\r\n                        msg.sender,\r\n                        address(this),\r\n                        underlyingQuantity\r\n                    );\r\n\r\n                    // Ensure allowance for underlying token to cToken contract\r\n                    ERC20Wrapper.ensureAllowance(\r\n                        underlyingAddress,\r\n                        address(this),\r\n                        address(cTokenInstance),\r\n                        underlyingQuantity\r\n                    );\r\n\r\n                    // Mint cToken using underlying\r\n                    uint256 mintResponse = cTokenInstance.mint(underlyingQuantity);\r\n                    require(\r\n                        mintResponse == 0,\r\n                        \"RebalancingSetCTokenBidder.bidAndWithdraw: Error minting cToken\"\r\n                    );\r\n                } else {\r\n                    // Transfer non-cTokens to contract\r\n                    ERC20Wrapper.transferFrom(\r\n                        currentComponentAddress,\r\n                        msg.sender,\r\n                        address(this),\r\n                        currentComponentQuantity\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * After bidding, loop through token address array and redeem any cTokens\r\n     * and transfer token components to user\r\n     *\r\n     * @param  _combinedTokenArray           Array of token addresses\r\n     */\r\n    function withdrawComponentsToSender(\r\n        address[] memory _combinedTokenArray\r\n    )\r\n        private\r\n    {\r\n        // Loop through the combined token addresses array and withdraw leftover amounts\r\n        for (uint256 i = 0; i < _combinedTokenArray.length; i++) {\r\n            address currentComponentAddress = _combinedTokenArray[i];\r\n\r\n            // Get balance of tokens in contract\r\n            uint256 currentComponentBalance = ERC20Wrapper.balanceOf(\r\n                currentComponentAddress,\r\n                address(this)\r\n            );\r\n\r\n            // Check component balance is greater than 0\r\n            if (currentComponentBalance > 0) {\r\n                // Check if cToken\r\n                address underlyingAddress = cTokenToUnderlying[currentComponentAddress];\r\n                if (underlyingAddress != address(0)) {\r\n                    // Redeem cToken into underlying\r\n                    uint256 mintResponse = ICToken(currentComponentAddress).redeem(currentComponentBalance);\r\n                    require(\r\n                        mintResponse == 0,\r\n                        \"RebalancingSetCTokenBidder.bidAndWithdraw: Erroring redeeming cToken\"\r\n                    );\r\n\r\n                    // Get balance of underlying in contract\r\n                    uint256 underlyingComponentBalance = ERC20Wrapper.balanceOf(\r\n                        underlyingAddress,\r\n                        address(this)\r\n                    );\r\n\r\n                    // Withdraw underlying from the contract and send to the user\r\n                    ERC20Wrapper.transfer(\r\n                        underlyingAddress,\r\n                        msg.sender,\r\n                        underlyingComponentBalance\r\n                    );\r\n                } else {\r\n                    // Withdraw non cTokens from the contract and send to the user\r\n                    ERC20Wrapper.transfer(\r\n                        currentComponentAddress,\r\n                        msg.sender,\r\n                        currentComponentBalance\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_rebalancingSetToken\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"getAddressAndBidPriceArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rebalancingSetToken\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"},{\"name\":\"_allowPartialFill\",\"type\":\"bool\"}],\"name\":\"bidAndWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenToUnderlying\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebalanceAuctionModule\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rebalanceAuctionModule\",\"type\":\"address\"},{\"name\":\"_transferProxy\",\"type\":\"address\"},{\"name\":\"_cTokenArray\",\"type\":\"address[]\"},{\"name\":\"_underlyingArray\",\"type\":\"address[]\"},{\"name\":\"_dataDescription\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rebalancingSetToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidPlacedCToken\",\"type\":\"event\"}]","ContractName":"RebalancingSetCTokenBidder","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000056db0438b1341e81e4c6e62f875fc3607fd1b9110000000000000000000000005a1e0fd3fc829e893d4a158cc32ae68b0c0b92c200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000070000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c1000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f4000000000000000000000000b3319f5d18bc0d84dd1b4825dcde5d5f7266d4070000000000000000000000006c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f400000000000000000000000000000000000000000000000000000000000000070000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000001985365e9f78359a9b6ad760e32412f4a445e8620000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f4980000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000000000000000000000000000000000000000001a526562616c616e63696e6753657443546f6b656e426964646572000000000000","Library":"ERC20Wrapper:b553ebbc620d8c8b0c65e8676420742919a70eb5","LicenseType":"None","SwarmSource":"bzzr://aea296c5971df175a025cd57ebec42de538e7735d9025ba4cd2590149b02801c"}]}