{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Project Society Construction and Terraforming Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka)\r\n *\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Core Blockchain Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka) by\r\n * [Basic Agreement](ipfs/QmaCiXUmSrP16Gz8Jdzq6AJESY1EAANmmwha15uR3c1bsS)).\r\n * \r\n * üåé Galt Project is an international decentralized land and real estate property registry\r\n * governed by DAO (Decentralized autonomous organization) and self-governance platform for communities\r\n * of homeowners on Ethereum.\r\n * \r\n * üè° https://galtproject.io\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\ncontract Proxy {\r\n  /**\r\n  * @dev Tells the address of the implementation where every call will be delegated.\r\n  * Should be implemented in a descendant contract\r\n  * @return address of the implementation to which it will be delegated\r\n  */\r\n  function implementation() public view returns (address) {\r\n    assert(false);\r\n  }\r\n\r\n  /**\r\n  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n  * This function will return whatever the implementation call returns\r\n  */\r\n  function () payable external {\r\n    address _impl = implementation();\r\n    require(_impl != address(0));\r\n\r\n    assembly {\r\n      let ptr := mload(0x40)\r\n      calldatacopy(ptr, 0, calldatasize)\r\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n      let size := returndatasize\r\n      returndatacopy(ptr, 0, size)\r\n\r\n      switch result\r\n      case 0 { revert(ptr, size) }\r\n      default { return(ptr, size) }\r\n    }\r\n  }\r\n}\r\n\r\n\r\ncontract UpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev This event will be emitted every time the implementation gets upgraded\r\n   * @param implementation representing the address of the upgraded implementation\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  // Storage position of the address of the current implementation\r\n  bytes32 private constant implementationPosition = keccak256(\"io.galtproject.proxy.implementation\");\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor() public {}\r\n\r\n  /**\r\n   * @dev Tells the address of the current implementation\r\n   * @return address of the current implementation\r\n   */\r\n  function implementation() public view returns (address impl) {\r\n    bytes32 position = implementationPosition;\r\n    assembly {\r\n      impl := sload(position)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the current implementation\r\n   * @param newImplementation address representing the new implementation to be set\r\n   */\r\n  function setImplementation(address newImplementation) internal {\r\n    bytes32 position = implementationPosition;\r\n    assembly {\r\n      sstore(position, newImplementation)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the implementation address\r\n   * @param newImplementation representing the address of the new implementation to be set\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    address currentImplementation = implementation();\r\n    require(currentImplementation != newImplementation);\r\n    setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n}\r\n\r\ninterface IOwnedUpgradeabilityProxy {\r\n  function implementation() external view returns (address);\r\n  function proxyOwner() external view returns (address owner);\r\n  function transferProxyOwnership(address newOwner) external;\r\n  function upgradeTo(address _implementation) external;\r\n  function upgradeToAndCall(address _implementation, bytes calldata _data) external payable;\r\n}\r\n\r\ncontract OwnedUpgradeabilityProxy is IOwnedUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n  * @dev Event to show ownership has been transferred\r\n  * @param previousOwner representing the address of the previous owner\r\n  * @param newOwner representing the address of the new owner\r\n  */\r\n  event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n  // Storage position of the owner of the contract\r\n  bytes32 private constant proxyOwnerPosition = keccak256(\"io.galtproject.proxy.owner\");\r\n\r\n  /**\r\n  * @dev the constructor sets the original owner of the contract to the sender account.\r\n  */\r\n  constructor() public {\r\n    setUpgradeabilityOwner(msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyProxyOwner() {\r\n    require(msg.sender == proxyOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Tells the address of the owner\r\n   * @return the address of the owner\r\n   */\r\n  function proxyOwner() public view returns (address owner) {\r\n    bytes32 position = proxyOwnerPosition;\r\n    assembly {\r\n      owner := sload(position)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the owner\r\n   */\r\n  function setUpgradeabilityOwner(address newProxyOwner) internal {\r\n    bytes32 position = proxyOwnerPosition;\r\n    assembly {\r\n      sstore(position, newProxyOwner)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferProxyOwnership(address newOwner) external onlyProxyOwner {\r\n    require(newOwner != address(0));\r\n    emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\n    setUpgradeabilityOwner(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   */\r\n  function upgradeTo(address implementation) external onlyProxyOwner {\r\n    _upgradeTo(implementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the proxy owner to upgrade the current version of the proxy and call the new implementation\r\n   * to initialize whatever is needed through a low level call.\r\n   * @param implementation representing the address of the new implementation to be set.\r\n   * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n   * signature of the implementation to be called with the needed payload\r\n   */\r\n  function upgradeToAndCall(address implementation, bytes calldata data) payable external onlyProxyOwner {\r\n    _upgradeTo(implementation);\r\n    (bool x,) = address(this).call.value(msg.value)(data);\r\n    require(x);\r\n  }\r\n}\r\n\r\ninterface IOwnedUpgradeabilityProxyFactory {\r\n  function build() external returns(IOwnedUpgradeabilityProxy);\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PPMediatorFactory {\r\n  event NewPPMediatorRaw(address mediator);\r\n  event NewPPMediator(address mediator, address tokenId, address _mediatorContractOnOtherSide);\r\n\r\n  // oppositeChainId specified only for information\r\n  uint256 public oppositeChainId;\r\n  address public implementation;\r\n  address public bridgeContract;\r\n  uint256 public initialGasLimit;\r\n  IOwnedUpgradeabilityProxyFactory internal ownedUpgradeabilityProxyFactory;\r\n\r\n  constructor(\r\n    IOwnedUpgradeabilityProxyFactory _factory,\r\n    address _impl,\r\n    address _bridgeContract,\r\n    uint256 _initialGasLimit,\r\n    uint256 _oppositeChainId\r\n  )\r\n    public\r\n  {\r\n    ownedUpgradeabilityProxyFactory = _factory;\r\n    implementation = _impl;\r\n    bridgeContract = _bridgeContract;\r\n    initialGasLimit = _initialGasLimit;\r\n    oppositeChainId = _oppositeChainId;\r\n  }\r\n\r\n  function buildWithPayload(\r\n    bytes calldata _payload\r\n  )\r\n    external\r\n    returns (address)\r\n  {\r\n    address mediator = _build(\r\n      _payload,\r\n      false,\r\n      true\r\n    );\r\n\r\n    emit NewPPMediatorRaw(mediator);\r\n\r\n    return mediator;\r\n  }\r\n\r\n  function build(\r\n    address _owner,\r\n    address _token,\r\n    address _mediatorContractOnOtherSide\r\n  )\r\n    external\r\n    returns (address)\r\n  {\r\n    bytes memory payload = abi.encodeWithSignature(\r\n      \"initialize(address,address,address,uint256,uint256,address)\",\r\n      bridgeContract,\r\n      _mediatorContractOnOtherSide,\r\n      _token,\r\n      initialGasLimit,\r\n      oppositeChainId,\r\n      _owner\r\n    );\r\n\r\n    address mediator = _build(\r\n      payload,\r\n      false,\r\n      true\r\n    );\r\n\r\n    emit NewPPMediator(mediator, _token, _mediatorContractOnOtherSide);\r\n\r\n    return mediator;\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _build(bytes memory _payload, bool _transferOwnership, bool _transferProxyOwnership)\r\n    internal\r\n    returns (address)\r\n  {\r\n    IOwnedUpgradeabilityProxy proxy = ownedUpgradeabilityProxyFactory.build();\r\n\r\n    proxy.upgradeToAndCall(implementation, _payload);\r\n\r\n    if (_transferOwnership == true) {\r\n      Ownable(address(proxy)).transferOwnership(msg.sender);\r\n    }\r\n\r\n    if (_transferProxyOwnership == true) {\r\n      proxy.transferProxyOwnership(msg.sender);\r\n    }\r\n\r\n    return address(proxy);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOwnedUpgradeabilityProxyFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oppositeChainId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_mediatorContractOnOtherSide\",\"type\":\"address\"}],\"name\":\"NewPPMediator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"NewPPMediatorRaw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediatorContractOnOtherSide\",\"type\":\"address\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"buildWithPayload\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oppositeChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PPMediatorFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b17014968fd33b0d4906186218f9144337442ec100000000000000000000000049b34a2d361f5efa833c8b1774537c047277b87b0000000000000000000000002140ecdc45c89ca112523637824513bae72c867100000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000063","Library":"","LicenseType":"None","SwarmSource":"bzzr://462f4350203b9e5ce5566c736df7ab4536889b89035f06ae4e1171992c0b0149"}]}