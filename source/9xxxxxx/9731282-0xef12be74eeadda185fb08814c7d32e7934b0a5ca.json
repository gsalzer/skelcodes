{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n// @title SelfDestructingSender\r\n// @notice Sends funds to any address using selfdestruct to bypass fallbacks.\r\n// @dev Is invoked by the _forceTransfer() function in the Game contract.\r\ncontract SelfDestructingSender {\r\n    constructor(address payable payee) public payable {\r\n        selfdestruct(payee);\r\n    }\r\n}\r\n\r\n\r\n// @title Game\r\n// @notice A money game in which only one player can lose. Everyone else leaves with more money than they started with.\r\n// Dozens may play. Only one will lose.\r\n// @dev The UI will initially launch at playescalation.com. If that site ever goes down, look for an `Announce` event at\r\n// https://etherscan.io/address/0xbea62796855548154464f6c8e7bc92672c9f87b8#events for where to find the latest UI.\r\n// IMPORTANT: This is not an investment scheme. This is a game. There is up to one loser per game and that could be you.\r\n// IMPORTANT: Do not play with more money than you are comfortable losing.\r\n// IMPORTANT: It is *impossible* to get back any money you lose, because that money is used to pay out all the other players.\r\n// IMPORTANT: The creators of this game have no control over this game or the payouts. This code is autonomous.\r\n// IMPORTANT: By interacting with this contract you agree to not hold the creators responsible for any loses you may incur. Use it at your own risk.\r\n// IMPORTANT: Have fun and play responsibly!\r\n// @dev This game works as follows:\r\n// - To ready the game, at least 0.0435 ETH is donated to the contract. Anyone can do this. It will probably be done by the game creators.\r\n// - Then anyone can start the game by calling the `firstPlay` function, which requires staking exactly 0.05 ETH with this contract.\r\n// - This starts a countdown clock that counts down from 30 minutes.\r\n// - During the 30 minutes, anyone can play by calling the `play` function, which requires staking funds with this contract.\r\n// - Each play of the game causes the countdown timer to be reset back to 30 minutes.\r\n// - Each successive play of the game requires a stake that is exactly 15% larger than the previous stake.\r\n// - The game ends when the countdown clock gets to 0.\r\n// - If two or more people play after you then you are a \"small winner\" and you are instantly given your stake back plus an additional 10% profit.\r\n// -    This \"small winner\" payout happens automatically, as soon as the second player after you plays.\r\n// -    You do not need to wait until the game ends to get paid. You are paid out instantly, with no need to send a withdrawal transaction.\r\n// - If nobody plays after you then you are a \"big winner\" and, when the clock gets to 0, you are given your stake back plus an additional 20% profit.\r\n// -    This \"big winner\" payout happens automatically when the game is reset.\r\n// -    Anyone can reset the game by calling the `reset` function. It costs only gas.\r\n// - If *exactly one* other person has played after you when the countdown clock gets to 0 then you are the game's only loser. You lose your stake.\r\n// -    That is, if you are the one sorry bastard who ends up in second place when the countdown clock gets to 0, you lose.\r\n// -    The only way to lose money in this game is to be the second to last person who played.\r\n// - TL;DR: So long as you are not in second place when the countdown clock gets to 0, you will leave with more money that you started with.\r\n//\r\n// NOTES:\r\n// - It is okay for a person to play more than once during a game. Each deposit is treated as a distinct play. The identity of the depositor is not important.\r\n//      For example, if you want to, you can put the profit won from an earlier play towards a later play. Or even play several times in a row.\r\n// - If the countdown clock is getting close to 0 and you are in second place, one possible way to avoid losing your stake\r\n//      is to play again (but only if you are comfortable putting more money at risk). This would knock your old play out of second place\r\n//      so you would get it back immediately, along with 10% profit, and your new deposit would have a chance at being the \"big winner\".\r\n// - This contract itself can accumulate funds over time. These funds are used to seed future rounds of the game.\r\n//      This seeding of the next round happens automatically when the `reset` function is called.\r\n// - If you ever find that nobody is paying attention to this contract and it has money in it, you can profit from that by being\r\n//      the first player. If nobody else is paying attention then you will also be the last player because nobody will play after you.\r\n//      This means you'll get your deposit back plus 20% profit. You can repeat this over and over until this contract is drained of all its funds.\r\n// - To any copycats thinking of offering similar games and just tweaking the constants: please be very careful.\r\n//      The maths behind the choice of constants is extremely sensitive, and it is easy to introduce critical insolvency vulnerabilities if you\r\n//      don't know what you are doing. This contract was created and rigorously tested by experienced contract developers. If you want to make\r\n//      changes to it please write full integration tests to be sure your choice of constants will not cause security issues.\r\ncontract Game {\r\n    using SafeMath for uint256;\r\n\r\n    // ======\r\n    // EVENTS\r\n    // ======\r\n\r\n    event Action(\r\n        uint256 indexed gameNumber,\r\n        uint256 indexed depositNumber,\r\n        address indexed depositorAddress,\r\n        uint256 block,\r\n        uint256 time,\r\n        address payoutProof, // address of the SelfDestructingSender contract that paid out the `(depositNumber - 2)th` deposit\r\n        bool gameOver\r\n    );\r\n\r\n    // ======================================================================\r\n    // CONSTANTS\r\n    // SECURITY: DO NOT CHANGE THESE CONSTANTS! THEY ARE NOT ARBITRARY!\r\n    // CHANGING THESE CONSTANTS MAY RESULT IN AN INSOLVENCY VULNERABILITY!\r\n    // ======================================================================\r\n\r\n    uint256 constant internal DEPOSIT_INCREMENT_PERCENT = 15;\r\n    uint256 constant internal BIG_REWARD_PERCENT = 20;\r\n    uint256 constant internal SMALL_REWARD_PERCENT = 10;\r\n    uint256 constant internal MAX_TIME = 30 minutes;\r\n    uint256 constant internal NEVER = uint256(-1);\r\n    uint256 constant internal INITIAL_INCENTIVE = 0.0435 ether;\r\n    address payable constant internal _designers = 0xBea62796855548154464F6C8E7BC92672C9F87b8; // address has no power\r\n\r\n    // =========\r\n    // VARIABLES\r\n    // =========\r\n\r\n    uint256 public endTime; // UNIX timestamp of when the current game ends\r\n    uint256 public escrow; // the amount of ETH (in wei) currently held in the game's escrow\r\n    uint256 public currentGameNumber;\r\n    uint256 public currentDepositNumber;\r\n    address payable[2] public topDepositors; // stores the addresses of the 2 most recent depositors\r\n    // NOTE: topDepositors[0] is the most recent depositor\r\n    mapping (uint256 => uint256) public requiredDeposit; // maps `n` to the required deposit size (in wei) required for the `n`th play\r\n    // NOTE: in practice, the parameter `n` should never exceed 200, since by then the required deposit would be more ETH than exists.\r\n    uint256[] internal _startBlocks; // for front-end use only: game number i starts at _startBlocks[i]\r\n    bool internal _gameStarted;\r\n\r\n    // ============\r\n    // CUSTOM TYPES\r\n    // ============\r\n\r\n    // the states of the state machine\r\n    enum GameState {NEEDS_DONATION, READY_FOR_FIRST_PLAY, IN_PROGRESS, GAME_OVER}\r\n\r\n    // =========\r\n    // MODIFIERS\r\n    // =========\r\n\r\n    // prevents transactions meant for one game from being used in a subsequent game\r\n    modifier currentGame(uint256 gameNumber) {\r\n        require(gameNumber == currentGameNumber, \"Wrong game number.\");\r\n        _;\r\n    }\r\n\r\n    // ensures that the deposit provided is exactly the amount of the current required deposit\r\n    modifier exactDeposit() {\r\n        require(\r\n            msg.value == requiredDeposit[currentDepositNumber],\r\n            \"Incorrect deposit amount. Perhaps another player got their txn mined before you. Try again.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ========================\r\n    // FALLBACK AND CONSTRUCTOR\r\n    // ========================\r\n\r\n    // SECURITY: Fallback must NOT be payable\r\n    // This prevents players from losing money if they attempt to play by sending money directly to\r\n    // this contract instead of calling one of the play functions\r\n    // Any funds sent to this contract via self-destruct will be applied to the INITIAL_INCENTIVE of subsequent games\r\n    function() external { }\r\n\r\n    constructor() public {\r\n        endTime = NEVER;\r\n        currentGameNumber = 1;\r\n        currentDepositNumber = 1;\r\n        _startBlocks.push(0);\r\n\r\n        // Here we are precomputing and storing values that we will use later\r\n        // These values will be needed during every play of the game and they are expensive to compute\r\n        // So we compute them up front and store them to save the players gas later\r\n        // These are the required sizes (in wei) of the `depositNumber`th deposit\r\n        // This computes and stores `INITIAL_INCENTIVE * (100 + DEPOSIT_INCREMENT_PERCENT / 100) ^ n`,\r\n        // rounded to 4 (ETH) decimal places, for n=0 to 200.  It must be done using a loop because solidity 0.5 does not\r\n        // support raising fractions to integer powers.\r\n        // SECURITY: The argument `depositNumber` will never be larger than 200 (since then the\r\n        // required deposit would be far more ETH than exists).\r\n        // SECURITY: SafeMath not used here for gas efficiency reasons.\r\n        // Since `depositNumber` will never be > 200 and since `INITIAL_INCENTIVE` and\r\n        // `DEPOSIT_INCREMENT_PERCENT` are small and constant, there is no risk of overflow here.\r\n        uint256 value = INITIAL_INCENTIVE;\r\n        uint256 r = DEPOSIT_INCREMENT_PERCENT;\r\n        requiredDeposit[0] = INITIAL_INCENTIVE;\r\n        for (uint256 i = 1; i <= 200; i++) { // `depositNumber` will never exceed 200\r\n            value += value * r / 100;\r\n            requiredDeposit[i] = value / 1e14 * 1e14; // round output to 4 (ETH) decimal places\r\n        }\r\n        // SECURITY: No entries in the requiredDeposit mapping should ever change again\r\n        // SECURITY: After the constructor runs, requiredDeposit should be read-only\r\n    }\r\n\r\n    // ============================\r\n    // PRIVATE / INTERNAL FUNCTIONS\r\n    // ============================\r\n\r\n    // @notice Transfers ETH to an address without any possibility of failing\r\n    // @param payee The address to which the ETH will be sent\r\n    // @param amount The amount of ETH (in wei) to be sent\r\n    // @return address The address of the SelfDestructingSender contract that delivered the funds\r\n    // @dev This allows us to use a push-payments pattern with no security risk\r\n    // For most applications the gas cost is too high to do this, but for this game\r\n    // the winnings on every deposit (other than the one losing deposit) far exceed the\r\n    // gas costs of this transfer method when players use reasonable gas prices -- for example, under 40 gwei for `firstPlay`\r\n    // @dev NOTE the following security concerns:\r\n    // SECURITY: MUST BE PRIVATE OR INTERNAL!\r\n    // SECURITY: THE PLAYERS MUST BE ABLE TO VERIFY SelfDestructingSender CONTRACT CODE!\r\n    function _forceTransfer(address payable payee, uint256 amount) internal returns (address) {\r\n        return address((new SelfDestructingSender).value(amount)(payee));\r\n    }\r\n\r\n    // @notice Computes the current game state\r\n    // @return The current game state\r\n    function _gameState() private view returns (GameState) {\r\n        if (!_gameStarted) {\r\n            // then the game state is either NEEDS_DONATION or READY_FOR_FIRST_PLAY\r\n            if (escrow < INITIAL_INCENTIVE) {\r\n                return GameState.NEEDS_DONATION;\r\n            } else {\r\n                return GameState.READY_FOR_FIRST_PLAY;\r\n            }\r\n        } else {\r\n            // then the game state is either IN_PROGRESS or GAME_OVER\r\n            if (now >= endTime) {\r\n                return GameState.GAME_OVER;\r\n            } else {\r\n                return GameState.IN_PROGRESS;\r\n            }\r\n        }\r\n    }\r\n\r\n    // =============================================\r\n    // EXTERNAL FUNCTIONS THAT MODIFY CONTRACT STATE\r\n    // =============================================\r\n\r\n    // @notice This is a function used to donate money that will be used to incentivize the first player to play\r\n    // Anyone can donate money, though in practice only the `_designers` likely will since nobody directly benefits from it\r\n    // Donations can be accepted only when the game is in the NEEDS_DONATION state\r\n    // Donations are added to escrow until escrow == INITIAL_INCENTIVE\r\n    // Any remaining donations are kept in address(this).balance and are used to seed future games\r\n    // SECURITY: Can be called only when the game state is NEEDS_DONATION\r\n    function donate() external payable {\r\n        require(_gameState() == GameState.NEEDS_DONATION, \"No donations needed.\");\r\n        // NOTE: if the game is in the NEEDS_DONATION state then escrow < INITIAL_INCENTIVE\r\n        uint256 maxAmountToPutInEscrow = INITIAL_INCENTIVE.sub(escrow);\r\n        if (msg.value > maxAmountToPutInEscrow) {\r\n            escrow = escrow.add(maxAmountToPutInEscrow);\r\n        } else {\r\n            escrow = escrow.add(msg.value);\r\n        }\r\n    }\r\n\r\n    // @notice Used to make the first play of a game\r\n    // @param gameNumber The current gameNumber\r\n    // SECURITY: Can be called only when the game state is READY_FOR_FIRST_PLAY\r\n    // SECURITY: Function call can be front-run. That is acceptable and may be part of game dynamics during competitive play.\r\n    function firstPlay(uint256 gameNumber) external payable currentGame(gameNumber) exactDeposit {\r\n        require(_gameState() == GameState.READY_FOR_FIRST_PLAY, \"Game not ready for first play.\");\r\n\r\n        emit Action(currentGameNumber, currentDepositNumber, msg.sender, block.number, now, address(0), false);\r\n\r\n        topDepositors[0] = msg.sender;\r\n        endTime = now.add(MAX_TIME);\r\n        escrow = escrow.add(msg.value);\r\n        currentDepositNumber++;\r\n        _gameStarted = true;\r\n        _startBlocks.push(block.number);\r\n    }\r\n\r\n    // @notice Used to make any subsequent play of the game\r\n    // @param gameNumber The current gameNumber\r\n    // SECURITY: Can be called only when the game state is IN_PROGRESS\r\n    // SECURITY: Function call can be front-run. That is acceptable and may be part of game dynamics during competitive play.\r\n    function play(uint256 gameNumber) external payable currentGame(gameNumber) exactDeposit {\r\n        require(_gameState() == GameState.IN_PROGRESS, \"Game is not in progress.\");\r\n\r\n        // We pay out the person who will no longer be the second-largest depositor\r\n        address payable addressToPay = topDepositors[1];\r\n        // They will receive their original deposit back plus SMALL_REWARD_PERCENT percent more\r\n        // NOTE: The first time the `play` function is called `currentDepositNumber` is at least 2, so\r\n        // the subtraction here will never cause a revert\r\n        uint256 amountToPay = requiredDeposit[currentDepositNumber.sub(2)].mul(SMALL_REWARD_PERCENT.add(100)).div(100);\r\n\r\n        address payoutProof = address(0);\r\n        if (addressToPay != address(0)) { // we never send money to the zero address\r\n            payoutProof = _forceTransfer(addressToPay, amountToPay);\r\n        }\r\n\r\n        // tell the front end what happened\r\n        emit Action(currentGameNumber, currentDepositNumber, msg.sender, block.number, now, payoutProof, false);\r\n\r\n        // store the new top depositors\r\n        topDepositors[1] = topDepositors[0];\r\n        topDepositors[0] = msg.sender;\r\n        // reset the clock\r\n        endTime = now.add(MAX_TIME);\r\n        // track the changes to escrow\r\n        // NOTE: even if addressToPay is address(0) we still reduce escrow by amountToPay\r\n        // Any money that would have gone to address(0) is is later put towards the INITIAL_INCENTIVE\r\n        // for the next game (see the end of the `reset` function)\r\n        escrow = escrow.sub(amountToPay).add(msg.value);\r\n        currentDepositNumber++;\r\n    }\r\n\r\n    // @notice Used to pay out the final depositor of a game and reset variables for the next game\r\n    // SECURITY: Can be called only when the game state is GAME_OVER\r\n    function reset() external {\r\n        require(_gameState() == GameState.GAME_OVER, \"Game is not over.\");\r\n        // We pay out the largest depositor\r\n        address payable addressToPay = topDepositors[0];\r\n\r\n        // They will receive their original deposit back plus BIG_REWARD_PERCENT percent more\r\n        uint256 amountToPay = requiredDeposit[currentDepositNumber.sub(1)].mul(BIG_REWARD_PERCENT.add(100)).div(100);\r\n        address payoutProof = _forceTransfer(addressToPay, amountToPay);\r\n\r\n        // track the payout in escrow\r\n        escrow = escrow.sub(amountToPay);\r\n\r\n        // tell the front end what happened\r\n        emit Action(currentGameNumber, currentDepositNumber, address(0), block.number, now, payoutProof, true);\r\n\r\n        // if there is anything left in escrow, give it to the _designers as a reward for maintaining the game\r\n        if (escrow > 0) {\r\n            _forceTransfer(_designers, escrow);\r\n        }\r\n\r\n        // reset the game vars for the next game\r\n        endTime = NEVER;\r\n        escrow = 0;\r\n        currentGameNumber++;\r\n        currentDepositNumber = 1;\r\n        _gameStarted = false;\r\n        topDepositors[0] = address(0);\r\n        topDepositors[1] = address(0);\r\n\r\n        // apply anything left over in address(this).balance to the next game's escrow\r\n        // being sure not to exceed INITIAL_INCENTIVE\r\n        if (address(this).balance > INITIAL_INCENTIVE) {\r\n            escrow = INITIAL_INCENTIVE;\r\n        } else {\r\n            escrow = address(this).balance;\r\n        }\r\n    }\r\n\r\n    // =======================\r\n    // EXTERNAL VIEW FUNCTIONS\r\n    // =======================\r\n\r\n    // @notice Returns the required deposit size (in wei) required for the next deposit of the game\r\n    function currentRequiredDeposit() external view returns (uint256) {\r\n        return requiredDeposit[currentDepositNumber];\r\n    }\r\n\r\n    // @notice Returns the current state of the game\r\n    function gameState() external view returns (GameState) {\r\n        return _gameState();\r\n    }\r\n\r\n    // @notice returns the block at which game number `index` began, or 0 if referring to\r\n    // a game that has not yet started\r\n    function startBlocks(uint256 index) external view returns (uint256) {\r\n        if (index >= _startBlocks.length) {\r\n            return 0; // the front-end will handle this properly\r\n        } else {\r\n            return _startBlocks[index];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutProof\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"gameOver\",\"type\":\"bool\"}],\"name\":\"Action\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDepositNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentGameNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRequiredDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"name\":\"firstPlay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameState\",\"outputs\":[{\"internalType\":\"enum Game.GameState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameNumber\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"startBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topDepositors\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Game","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://961c5b4893e9eebcc134dde48d246423bf963ef12dc3dae12e3ab6605ef2a0df"}]}