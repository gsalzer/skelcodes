{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\ninterface IToken { // brief ERC-20 interface\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract MemberDripDrop {\r\n    /***************\r\n    INTERNAL DETAILS\r\n    ***************/\r\n    uint256 public ethDrip;\r\n    uint256 public tokenDrip;\r\n    IToken public dripToken;\r\n    address payable[] members;\r\n    address payable public secretary;\r\n    \r\n    mapping(address => Member) public memberList;\r\n    \r\n    struct Member {\r\n        uint256 memberIndex;\r\n        bool exists;\r\n    }\r\n\r\n    modifier onlySecretary() {\r\n        require(msg.sender == secretary, \"caller must be secretary\");\r\n        _;\r\n    }\r\n    \r\n    // ******\r\n    // EVENTS\r\n    // ******\r\n    event DripTokenUpdated(address indexed updatedDripToken);\r\n    event TokenDripUpdated(uint256 indexed updatedTokenDrip);\r\n    event ETHDripUpdated(uint256 indexed updatedETHDrip);\r\n    event MemberAdded(address indexed addedMember);\r\n    event MemberRemoved(address indexed removedMember);\r\n    event SecretaryUpdated(address indexed updatedSecretary);\r\n    \r\n    function() external payable { } // contract receives ETH\r\n\r\n    constructor(\r\n        uint256 _ethDrip, \r\n        uint256 _tokenDrip,  \r\n        address dripTokenAddress, \r\n        address payable[] memory _members) payable public { // initializes contract\r\n        for (uint256 i = 0; i < _members.length; i++) {\r\n            require(_members[i] != address(0), \"member address cannot be 0\");\r\n            memberList[_members[i]].memberIndex = members.push(_members[i]) - 1;\r\n            memberList[_members[i]].exists = true;\r\n        }\r\n        \r\n        ethDrip = _ethDrip;\r\n        tokenDrip = _tokenDrip;\r\n        dripToken = IToken(dripTokenAddress);\r\n        secretary = members[0]; // first address in member array is secretary  \r\n    }\r\n    \r\n    /************************\r\n    DRIP/DROP TOKEN FUNCTIONS\r\n    ************************/\r\n    function dripTKN() public onlySecretary { // transfer token to members per stored drip amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            dripToken.transfer(members[i], tokenDrip);\r\n        }\r\n    }\r\n    \r\n    function dropTKN(uint256 drop, address dropTokenAddress) public onlySecretary { // transfer token to members per approved drop amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop);\r\n        }\r\n    }\r\n    \r\n    function customDropTKN(uint256[] memory drop, address dropTokenAddress) payable public onlySecretary { // transfer token to members per approved index drop amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop[i]);\r\n        }\r\n    }\r\n    \r\n    /**********************\r\n    DRIP/DROP ETH FUNCTIONS\r\n    **********************/\r\n    function dripETH() public onlySecretary { // transfer ETH to members per stored drip amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(ethDrip);\r\n        }\r\n    }\r\n\r\n    function dropETH() payable public onlySecretary { // transfer ETH to members per attached drop amount\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(msg.value);\r\n        }\r\n    }\r\n    \r\n    function customDropETH(uint256[] memory drop) payable public onlySecretary { // transfer ETH to members per index drop amounts\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drop[i]);\r\n        }\r\n    }\r\n    \r\n    /******************\r\n    SECRETARY FUNCTIONS\r\n    ******************/\r\n    // ******************\r\n    // DRIP/DROP REGISTRY\r\n    // ******************\r\n    function addMember(address payable addedMember) public onlySecretary { \r\n        require(memberList[addedMember].exists != true, \"member already exists\");\r\n        memberList[addedMember].memberIndex = members.push(addedMember) - 1;\r\n        memberList[addedMember].exists = true;\r\n        emit MemberAdded(addedMember);\r\n    }\r\n\r\n    function removeMember(address removedMember) public onlySecretary {\r\n        require(memberList[removedMember].exists = true, \"no such member to remove\");\r\n        uint256 memberToDelete = memberList[removedMember].memberIndex;\r\n        address payable keyToMove = members[members.length-1];\r\n        members[memberToDelete] = keyToMove;\r\n        memberList[keyToMove].memberIndex = memberToDelete;\r\n        memberList[removedMember].exists = false;\r\n        members.length--;\r\n        emit MemberRemoved(removedMember);\r\n    }\r\n\r\n    function updateSecretary(address payable updatedSecretary) public onlySecretary {\r\n        secretary = updatedSecretary;\r\n        emit SecretaryUpdated(updatedSecretary);\r\n    }\r\n    \r\n    // ************\r\n    // DRIP DETAILS\r\n    // ************\r\n    function updateETHDrip(uint256 updatedETHDrip) public onlySecretary {\r\n        ethDrip = updatedETHDrip;\r\n        emit ETHDripUpdated(updatedETHDrip);\r\n    }\r\n    \r\n    function updateDripToken(address updatedDripToken) public onlySecretary {\r\n        dripToken = IToken(updatedDripToken);\r\n        emit DripTokenUpdated(updatedDripToken);\r\n    }\r\n    \r\n    function updateTokenDrip(uint256 updatedTokenDrip) public onlySecretary {\r\n        tokenDrip = updatedTokenDrip;\r\n        emit TokenDripUpdated(updatedTokenDrip);\r\n    }\r\n    \r\n    /***************\r\n    GETTER FUNCTIONS\r\n    ***************/\r\n    // ****\r\n    // DRIP\r\n    // ****\r\n    function TokenBalance() public view returns (uint256) { // get balance of drip token in contract\r\n        return dripToken.balanceOf(address(this));\r\n    }\r\n    \r\n    function ETHBalance() public view returns (uint256) { // get balance of ETH in contract\r\n        return address(this).balance;\r\n    }\r\n\r\n    // ******\r\n    // MEMBER\r\n    // ******\r\n    function Membership() public view returns (address payable[] memory) {\r\n        return members;\r\n    }\r\n\r\n    function MemberCount() public view returns(uint256 memberCount) {\r\n        return members.length;\r\n    }\r\n\r\n    function isMember(address memberAddress) public view returns (bool memberExists) {\r\n        if(members.length == 0) return false;\r\n        return (members[memberList[memberAddress].memberIndex] == memberAddress);\r\n    }\r\n}\r\n\r\ncontract MemberDripDropFactory {\r\n    MemberDripDrop private DripDrop;\r\n    address[] public dripdrops;\r\n\r\n    event newDripDrop(address indexed secretary, address indexed dripdrop);\r\n\r\n    function newMemberDripDrop(\r\n        uint256 _ethDrip, \r\n        uint256 _tokenDrip,  \r\n        address dripTokenAddress, \r\n        address payable[] memory _members) payable public {\r\n        DripDrop = (new MemberDripDrop).value(msg.value)(\r\n            _ethDrip,\r\n            _tokenDrip,\r\n            dripTokenAddress,\r\n            _members);\r\n        dripdrops.push(address(DripDrop));\r\n        emit newDripDrop(_members[0], address(DripDrop));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"secretary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripdrop\",\"type\":\"address\"}],\"name\":\"newDripDrop\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dripdrops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDrip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dripTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"newMemberDripDrop\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"MemberDripDropFactory","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://dc23bda5b8bc6aa84dbcfaa396287aa695deb9dfbed3b1d3faeb53736ba256ee"}]}