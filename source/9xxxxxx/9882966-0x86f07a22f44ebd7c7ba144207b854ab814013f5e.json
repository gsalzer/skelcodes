{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\n\ncontract ProtocolInterface {\n    function deposit(address _user, uint256 _amount) public;\n\n    function withdraw(address _user, uint256 _amount) public;\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract ITokenInterface is ERC20 {\n    function assetBalanceOf(address _owner) public view returns (uint256);\n\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\n\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function tokenPrice() public view returns (uint256 price);\n}\n\ncontract ConstantAddressesMainnet {\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant IDAI_ADDRESS = 0x14094949152EDDBFcd073717200DA82fEd8dC960;\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\n    address public constant OTC_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant KYBER_WRAPPER = 0x8F337bD3b7F2b05d9A8dC8Ac518584e833424893;\n    address public constant UNISWAP_WRAPPER = 0x1e30124FDE14533231216D95F7798cD0061e5cf8;\n    address public constant ETH2DAI_WRAPPER = 0xd7BBB1777E13b6F535Dec414f575b858ed300baF;\n    address public constant OASIS_WRAPPER = 0x9aBE2715D2d99246269b8E17e9D1b620E9bf6558;\n\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    address public constant UNISWAP_FACTORY = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address public constant PIP_INTERFACE_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n\n    address public constant SAVINGS_LOGGER_ADDRESS = 0x89b3635BD2bAD145C6f92E82C9e83f06D5654984;\n    address public constant AUTOMATIC_LOGGER_ADDRESS = 0xAD32Ce09DE65971fFA8356d7eF0B783B82Fd1a9A;\n\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x6eC6D98e2AF940436348883fAFD5646E9cdE2446;\n\n    \n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\n\n    \n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\n\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\n\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\n\n    \n    address public constant SUBSCRIPTION_ADDRESS = 0x83152CAA0d344a2Fd428769529e2d490A88f4393;\n    address public constant MONITOR_ADDRESS = 0x3F4339816EDEF8D3d3970DB2993e2e0Ec6010760;\n\n    address public constant NEW_CDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\n    address public constant NEW_IDAI_ADDRESS = 0x493C57C4763932315A328269E1ADaD09653B9081;\n\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n}\n\ncontract ConstantAddressesKovan {\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\n    address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\n    address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\n    address public constant OTC_ADDRESS = 0x4A6bC4e803c62081ffEbCc8d227B5a87a58f1F8F;\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\n    address public constant SOLO_MARGIN_ADDRESS = 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE;\n    address public constant IDAI_ADDRESS = 0xA1e58F3B1927743393b25f261471E1f2D3D9f0F6;\n    address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\n    address public constant SAI_SAVER_PROXY = 0xADB7c74bCe932fC6C27ddA3Ac2344707d2fBb0E6;\n\n    address public constant KYBER_WRAPPER = 0x68c56FF0E7BBD30AF9Ad68225479449869fC1bA0;\n    address public constant UNISWAP_WRAPPER = 0x2A4ee140F05f1Ba9A07A020b07CCFB76CecE4b43;\n    address public constant ETH2DAI_WRAPPER = 0x823cde416973a19f98Bb9C96d97F4FE6C9A7238B;\n    address public constant OASIS_WRAPPER = 0x0257Ba4876863143bbeDB7847beC583e4deb6fE6;\n\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\n\n    address public constant FACTORY_ADDRESS = 0xc72E74E474682680a414b506699bBcA44ab9a930;\n    \n    address public constant PIP_INTERFACE_ADDRESS = 0xA944bd4b25C9F186A846fd5668941AA3d3B8425F;\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x64A436ae831C1672AE81F674CAb8B6775df3475C;\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\n    address public constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n\n    address public constant SAVINGS_LOGGER_ADDRESS = 0x2aa889D809B29c608dA99767837D189dAe12a874;\n\n    \n    address public constant UNISWAP_FACTORY = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n\n    \n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\n\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\n\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\n\n    \n    address public constant SUBSCRIPTION_ADDRESS = 0xFC41f79776061a396635aD0b9dF7a640A05063C1;\n    address public constant MONITOR_ADDRESS = 0xfC1Fc0502e90B7A3766f93344E1eDb906F8A75DD;\n\n    \n    address public constant NEW_CDAI_ADDRESS = 0xe7bc397DBd069fC7d0109C0636d06888bb50668c;\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\n}\n\ncontract ConstantAddresses is ConstantAddressesMainnet {}\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        require(b > 0);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary Require {\n\n    \n\n    uint256 constant ASCII_ZERO = 48; \n    uint256 constant ASCII_RELATIVE_ZERO = 87; \n    uint256 constant ASCII_LOWER_EX = 120; \n    bytes2 constant COLON = 0x3a20; \n    bytes2 constant COMMA = 0x2c20; \n    bytes2 constant LPAREN = 0x203c; \n    byte constant RPAREN = 0x3e; \n    uint256 constant FOUR_BIT_MASK = 0xf;\n\n    \n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason)\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        uint256 payloadA\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        uint256 payloadA,\n        uint256 payloadB\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        address payloadA\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        address payloadA,\n        uint256 payloadB\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        address payloadA,\n        uint256 payloadB,\n        uint256 payloadC\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        COMMA,\n                        stringify(payloadC),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        bytes32 payloadA\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    function that(\n        bool must,\n        bytes32 file,\n        bytes32 reason,\n        bytes32 payloadA,\n        uint256 payloadB,\n        uint256 payloadC\n    )\n        internal\n        pure\n    {\n        if (!must) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        stringifyTruncated(file),\n                        COLON,\n                        stringifyTruncated(reason),\n                        LPAREN,\n                        stringify(payloadA),\n                        COMMA,\n                        stringify(payloadB),\n                        COMMA,\n                        stringify(payloadC),\n                        RPAREN\n                    )\n                )\n            );\n        }\n    }\n\n    \n\n    function stringifyTruncated(\n        bytes32 input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        \n        bytes memory result = abi.encodePacked(input);\n\n        \n        for (uint256 i = 32; i > 0; ) {\n            \n            \n            i--;\n\n            \n            if (result[i] != 0) {\n                uint256 length = i + 1;\n\n                \n                assembly {\n                    mstore(result, length) \n                }\n\n                return result;\n            }\n        }\n\n        \n        return new bytes(0);\n    }\n\n    function stringify(\n        uint256 input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        if (input == 0) {\n            return \"0\";\n        }\n\n        \n        uint256 j = input;\n        uint256 length;\n        while (j != 0) {\n            length++;\n            j /= 10;\n        }\n\n        \n        bytes memory bstr = new bytes(length);\n\n        \n        j = input;\n        for (uint256 i = length; i > 0; ) {\n            \n            \n            i--;\n\n            \n            bstr[i] = byte(uint8(ASCII_ZERO + (j % 10)));\n\n            \n            j /= 10;\n        }\n\n        return bstr;\n    }\n\n    function stringify(\n        address input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        uint256 z = uint256(input);\n\n        \n        bytes memory result = new bytes(42);\n\n        \n        result[0] = byte(uint8(ASCII_ZERO));\n        result[1] = byte(uint8(ASCII_LOWER_EX));\n\n        \n        for (uint256 i = 0; i < 20; i++) {\n            \n            uint256 shift = i * 2;\n\n            \n            result[41 - shift] = char(z & FOUR_BIT_MASK);\n            z = z >> 4;\n\n            \n            result[40 - shift] = char(z & FOUR_BIT_MASK);\n            z = z >> 4;\n        }\n\n        return result;\n    }\n\n    function stringify(\n        bytes32 input\n    )\n        private\n        pure\n        returns (bytes memory)\n    {\n        uint256 z = uint256(input);\n\n        \n        bytes memory result = new bytes(66);\n\n        \n        result[0] = byte(uint8(ASCII_ZERO));\n        result[1] = byte(uint8(ASCII_LOWER_EX));\n\n        \n        for (uint256 i = 0; i < 32; i++) {\n            \n            uint256 shift = i * 2;\n\n            \n            result[65 - shift] = char(z & FOUR_BIT_MASK);\n            z = z >> 4;\n\n            \n            result[64 - shift] = char(z & FOUR_BIT_MASK);\n            z = z >> 4;\n        }\n\n        return result;\n    }\n\n    function char(\n        uint256 input\n    )\n        private\n        pure\n        returns (byte)\n    {\n        \n        if (input < 10) {\n            return byte(uint8(input + ASCII_ZERO));\n        }\n\n        \n        return byte(uint8(input + ASCII_RELATIVE_ZERO));\n    }\n}\n\nlibrary Math {\n    using SafeMath for uint256;\n\n    \n\n    bytes32 constant FILE = \"Math\";\n\n    \n\n    \n    function getPartial(\n        uint256 target,\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return target.mul(numerator).div(denominator);\n    }\n\n    \n    function getPartialRoundUp(\n        uint256 target,\n        uint256 numerator,\n        uint256 denominator\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        if (target == 0 || numerator == 0) {\n            \n            return SafeMath.div(0, denominator);\n        }\n        return target.mul(numerator).sub(1).div(denominator).add(1);\n    }\n\n    function to128(\n        uint256 number\n    )\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 result = uint128(number);\n        Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint128\"\n        );\n        return result;\n    }\n\n    function to96(\n        uint256 number\n    )\n        internal\n        pure\n        returns (uint96)\n    {\n        uint96 result = uint96(number);\n        Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint96\"\n        );\n        return result;\n    }\n\n    function to32(\n        uint256 number\n    )\n        internal\n        pure\n        returns (uint32)\n    {\n        uint32 result = uint32(number);\n        Require.that(\n            result == number,\n            FILE,\n            \"Unsafe cast to uint32\"\n        );\n        return result;\n    }\n\n    function min(\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function max(\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return a > b ? a : b;\n    }\n}\n\nlibrary Types {\n    using Math for uint256;\n\n    \n\n    enum AssetDenomination {\n        Wei, \n        Par  \n    }\n\n    enum AssetReference {\n        Delta, \n        Target \n    }\n\n    struct AssetAmount {\n        bool sign; \n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    \n\n    \n    struct TotalPar {\n        uint128 borrow;\n        uint128 supply;\n    }\n\n    \n    struct Par {\n        bool sign; \n        uint128 value;\n    }\n\n    function zeroPar()\n        internal\n        pure\n        returns (Par memory)\n    {\n        return Par({\n            sign: false,\n            value: 0\n        });\n    }\n\n    function sub(\n        Par memory a,\n        Par memory b\n    )\n        internal\n        pure\n        returns (Par memory)\n    {\n        return add(a, negative(b));\n    }\n\n    function add(\n        Par memory a,\n        Par memory b\n    )\n        internal\n        pure\n        returns (Par memory)\n    {\n        Par memory result;\n        if (a.sign == b.sign) {\n            result.sign = a.sign;\n            result.value = SafeMath.add(a.value, b.value).to128();\n        } else {\n            if (a.value >= b.value) {\n                result.sign = a.sign;\n                result.value = SafeMath.sub(a.value, b.value).to128();\n            } else {\n                result.sign = b.sign;\n                result.value = SafeMath.sub(b.value, a.value).to128();\n            }\n        }\n        return result;\n    }\n\n    function equals(\n        Par memory a,\n        Par memory b\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        if (a.value == b.value) {\n            if (a.value == 0) {\n                return true;\n            }\n            return a.sign == b.sign;\n        }\n        return false;\n    }\n\n    function negative(\n        Par memory a\n    )\n        internal\n        pure\n        returns (Par memory)\n    {\n        return Par({\n            sign: !a.sign,\n            value: a.value\n        });\n    }\n\n    function isNegative(\n        Par memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return !a.sign && a.value > 0;\n    }\n\n    function isPositive(\n        Par memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.sign && a.value > 0;\n    }\n\n    function isZero(\n        Par memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.value == 0;\n    }\n\n    \n\n    \n    struct Wei {\n        bool sign; \n        uint256 value;\n    }\n\n    function zeroWei()\n        internal\n        pure\n        returns (Wei memory)\n    {\n        return Wei({\n            sign: false,\n            value: 0\n        });\n    }\n\n    function sub(\n        Wei memory a,\n        Wei memory b\n    )\n        internal\n        pure\n        returns (Wei memory)\n    {\n        return add(a, negative(b));\n    }\n\n    function add(\n        Wei memory a,\n        Wei memory b\n    )\n        internal\n        pure\n        returns (Wei memory)\n    {\n        Wei memory result;\n        if (a.sign == b.sign) {\n            result.sign = a.sign;\n            result.value = SafeMath.add(a.value, b.value);\n        } else {\n            if (a.value >= b.value) {\n                result.sign = a.sign;\n                result.value = SafeMath.sub(a.value, b.value);\n            } else {\n                result.sign = b.sign;\n                result.value = SafeMath.sub(b.value, a.value);\n            }\n        }\n        return result;\n    }\n\n    function equals(\n        Wei memory a,\n        Wei memory b\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        if (a.value == b.value) {\n            if (a.value == 0) {\n                return true;\n            }\n            return a.sign == b.sign;\n        }\n        return false;\n    }\n\n    function negative(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (Wei memory)\n    {\n        return Wei({\n            sign: !a.sign,\n            value: a.value\n        });\n    }\n\n    function isNegative(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return !a.sign && a.value > 0;\n    }\n\n    function isPositive(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.sign && a.value > 0;\n    }\n\n    function isZero(\n        Wei memory a\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.value == 0;\n    }\n}\n\nlibrary Account {\n    \n\n    \n    enum Status {\n        Normal,\n        Liquid,\n        Vapor\n    }\n\n    \n\n    \n    struct Info {\n        address owner;  \n        uint256 number; \n    }\n\n    \n    struct Storage {\n        mapping (uint256 => Types.Par) balances; \n        Status status;\n    }\n\n    \n\n    function equals(\n        Info memory a,\n        Info memory b\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        return a.owner == b.owner && a.number == b.number;\n    }\n}\n\nlibrary Actions {\n\n    \n\n    bytes32 constant FILE = \"Actions\";\n\n    \n\n    enum ActionType {\n        Deposit,   \n        Withdraw,  \n        Transfer,  \n        Buy,       \n        Sell,      \n        Trade,     \n        Liquidate, \n        Vaporize,  \n        Call       \n    }\n\n    enum AccountLayout {\n        OnePrimary,\n        TwoPrimary,\n        PrimaryAndSecondary\n    }\n\n    enum MarketLayout {\n        ZeroMarkets,\n        OneMarket,\n        TwoMarkets\n    }\n\n    \n\n    \n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n\n    \n\n    \n    struct DepositArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address from;\n    }\n\n    \n    struct WithdrawArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 market;\n        address to;\n    }\n\n    \n    struct TransferArgs {\n        Types.AssetAmount amount;\n        Account.Info accountOne;\n        Account.Info accountTwo;\n        uint256 market;\n    }\n\n    \n    struct BuyArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 makerMarket;\n        uint256 takerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    \n    struct SellArgs {\n        Types.AssetAmount amount;\n        Account.Info account;\n        uint256 takerMarket;\n        uint256 makerMarket;\n        address exchangeWrapper;\n        bytes orderData;\n    }\n\n    \n    struct TradeArgs {\n        Types.AssetAmount amount;\n        Account.Info takerAccount;\n        Account.Info makerAccount;\n        uint256 inputMarket;\n        uint256 outputMarket;\n        address autoTrader;\n        bytes tradeData;\n    }\n\n    \n    struct LiquidateArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info liquidAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    \n    struct VaporizeArgs {\n        Types.AssetAmount amount;\n        Account.Info solidAccount;\n        Account.Info vaporAccount;\n        uint256 owedMarket;\n        uint256 heldMarket;\n    }\n\n    \n    struct CallArgs {\n        Account.Info account;\n        address callee;\n        bytes data;\n    }\n\n    \n\n    function getMarketLayout(\n        ActionType actionType\n    )\n        internal\n        pure\n        returns (MarketLayout)\n    {\n        if (\n            actionType == Actions.ActionType.Deposit\n            || actionType == Actions.ActionType.Withdraw\n            || actionType == Actions.ActionType.Transfer\n        ) {\n            return MarketLayout.OneMarket;\n        }\n        else if (actionType == Actions.ActionType.Call) {\n            return MarketLayout.ZeroMarkets;\n        }\n        return MarketLayout.TwoMarkets;\n    }\n\n    function getAccountLayout(\n        ActionType actionType\n    )\n        internal\n        pure\n        returns (AccountLayout)\n    {\n        if (\n            actionType == Actions.ActionType.Transfer\n            || actionType == Actions.ActionType.Trade\n        ) {\n            return AccountLayout.TwoPrimary;\n        } else if (\n            actionType == Actions.ActionType.Liquidate\n            || actionType == Actions.ActionType.Vaporize\n        ) {\n            return AccountLayout.PrimaryAndSecondary;\n        }\n        return AccountLayout.OnePrimary;\n    }\n\n    \n\n    function parseDepositArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (DepositArgs memory)\n    {\n        assert(args.actionType == ActionType.Deposit);\n        return DepositArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            market: args.primaryMarketId,\n            from: args.otherAddress\n        });\n    }\n\n    function parseWithdrawArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (WithdrawArgs memory)\n    {\n        assert(args.actionType == ActionType.Withdraw);\n        return WithdrawArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            market: args.primaryMarketId,\n            to: args.otherAddress\n        });\n    }\n\n    function parseTransferArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (TransferArgs memory)\n    {\n        assert(args.actionType == ActionType.Transfer);\n        return TransferArgs({\n            amount: args.amount,\n            accountOne: accounts[args.accountId],\n            accountTwo: accounts[args.otherAccountId],\n            market: args.primaryMarketId\n        });\n    }\n\n    function parseBuyArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (BuyArgs memory)\n    {\n        assert(args.actionType == ActionType.Buy);\n        return BuyArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            makerMarket: args.primaryMarketId,\n            takerMarket: args.secondaryMarketId,\n            exchangeWrapper: args.otherAddress,\n            orderData: args.data\n        });\n    }\n\n    function parseSellArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (SellArgs memory)\n    {\n        assert(args.actionType == ActionType.Sell);\n        return SellArgs({\n            amount: args.amount,\n            account: accounts[args.accountId],\n            takerMarket: args.primaryMarketId,\n            makerMarket: args.secondaryMarketId,\n            exchangeWrapper: args.otherAddress,\n            orderData: args.data\n        });\n    }\n\n    function parseTradeArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (TradeArgs memory)\n    {\n        assert(args.actionType == ActionType.Trade);\n        return TradeArgs({\n            amount: args.amount,\n            takerAccount: accounts[args.accountId],\n            makerAccount: accounts[args.otherAccountId],\n            inputMarket: args.primaryMarketId,\n            outputMarket: args.secondaryMarketId,\n            autoTrader: args.otherAddress,\n            tradeData: args.data\n        });\n    }\n\n    function parseLiquidateArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (LiquidateArgs memory)\n    {\n        assert(args.actionType == ActionType.Liquidate);\n        return LiquidateArgs({\n            amount: args.amount,\n            solidAccount: accounts[args.accountId],\n            liquidAccount: accounts[args.otherAccountId],\n            owedMarket: args.primaryMarketId,\n            heldMarket: args.secondaryMarketId\n        });\n    }\n\n    function parseVaporizeArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (VaporizeArgs memory)\n    {\n        assert(args.actionType == ActionType.Vaporize);\n        return VaporizeArgs({\n            amount: args.amount,\n            solidAccount: accounts[args.accountId],\n            vaporAccount: accounts[args.otherAccountId],\n            owedMarket: args.primaryMarketId,\n            heldMarket: args.secondaryMarketId\n        });\n    }\n\n    function parseCallArgs(\n        Account.Info[] memory accounts,\n        ActionArgs memory args\n    )\n        internal\n        pure\n        returns (CallArgs memory)\n    {\n        assert(args.actionType == ActionType.Call);\n        return CallArgs({\n            account: accounts[args.accountId],\n            callee: args.otherAddress,\n            data: args.data\n        });\n    }\n}\n\ncontract ISoloMargin {\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    function operate(\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    ) public;\n\n    function getAccountBalances(\n        Account.Info memory account\n    ) public view returns (\n        address[] memory,\n        Types.Par[] memory,\n        Types.Wei[] memory\n    );\n\n    function setOperators(\n        OperatorArg[] memory args\n    ) public;\n}\n\ncontract SavingsLogger {\n    event Deposit(address indexed sender, uint8 protocol, uint256 amount);\n    event Withdraw(address indexed sender, uint8 protocol, uint256 amount);\n    event Swap(address indexed sender, uint8 fromProtocol, uint8 toProtocol, uint256 amount);\n\n    function logDeposit(address _sender, uint8 _protocol, uint256 _amount) external {\n        emit Deposit(_sender, _protocol, _amount);\n    }\n\n    function logWithdraw(address _sender, uint8 _protocol, uint256 _amount) external {\n        emit Withdraw(_sender, _protocol, _amount);\n    }\n\n    function logSwap(address _sender, uint8 _protocolFrom, uint8 _protocolTo, uint256 _amount)\n        external\n    {\n        emit Swap(_sender, _protocolFrom, _protocolTo, _amount);\n    }\n}\n\ncontract Gem {\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n    function allowance(address, address) public returns (uint);\n}\n\ncontract Join {\n    bytes32 public ilk;\n\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract VatLike {\n    function can(address, address) public view returns (uint);\n    function ilks(bytes32) public view returns (uint, uint, uint, uint, uint);\n    function dai(address) public view returns (uint);\n    function urns(bytes32, address) public view returns (uint, uint);\n    function frob(bytes32, address, address, address, int, int) public;\n    function hope(address) public;\n    function move(address, address, uint) public;\n}\n\ncontract PotLike {\n    function pie(address) public view returns (uint);\n    function drip() public returns (uint);\n    function join(uint) public;\n    function exit(uint) public;\n}\n\ncontract GemLike {\n    function approve(address, uint) public;\n    function transfer(address, uint) public;\n    function transferFrom(address, address, uint) public;\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract DaiJoinLike {\n    function vat() public returns (VatLike);\n    function dai() public returns (GemLike);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract DSRSavingsProtocol is DSMath {\n\n    \n    \n    \n\n    \n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant POT_ADDRESS = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\n\n    function dsrDeposit(uint _amount, bool _fromUser) internal {\n        VatLike vat = DaiJoinLike(DAI_JOIN_ADDRESS).vat();\n\n        uint chi = PotLike(POT_ADDRESS).drip();\n\n        daiJoin_join(DAI_JOIN_ADDRESS, address(this), _amount, _fromUser);\n\n        if (vat.can(address(this), address(POT_ADDRESS)) == 0) {\n            vat.hope(POT_ADDRESS);\n        }\n\n        PotLike(POT_ADDRESS).join(mul(_amount, RAY) / chi);\n    }\n\n    function dsrWithdraw(uint _amount, bool _toUser) internal {\n        VatLike vat = DaiJoinLike(DAI_JOIN_ADDRESS).vat();\n\n        uint chi = PotLike(POT_ADDRESS).drip();\n        uint pie = mul(_amount, RAY) / chi;\n\n        PotLike(POT_ADDRESS).exit(pie);\n        uint balance = DaiJoinLike(DAI_JOIN_ADDRESS).vat().dai(address(this));\n\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\n            vat.hope(DAI_JOIN_ADDRESS);\n        }\n\n        address to;\n        if (_toUser) {\n            to = msg.sender;\n        } else {\n            to = address(this);\n        }\n\n        if (_amount == uint(-1)) {\n            DaiJoinLike(DAI_JOIN_ADDRESS).exit(to, mul(chi, pie) / RAY);\n        } else {\n            DaiJoinLike(DAI_JOIN_ADDRESS).exit(\n                to,\n                balance >= mul(_amount, RAY) ? _amount : balance / RAY\n            );\n        }\n    }\n\n    function daiJoin_join(address apt, address urn, uint wad, bool _fromUser) internal {\n        if (_fromUser) {\n            DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\n        }\n\n        DaiJoinLike(apt).dai().approve(apt, wad);\n\n        DaiJoinLike(apt).join(urn, wad);\n    }\n}\n\ncontract SavingsProxy is ConstantAddresses, DSRSavingsProtocol {\n    address public constant ADAI_ADDRESS = 0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d;\n    \n    address public constant SAVINGS_COMPOUND_ADDRESS = 0x72c5a18D651DA5568EFfE731a98484dE62C9F347;\n    address public constant SAVINGS_DYDX_ADDRESS = 0x03b1565e070df392e48e7a8e01798C4B00E534A5;\n    address public constant SAVINGS_FULCRUM_ADDRESS = 0xe9ea575d2d8Ca26b0E026a2146994592e0Ee1Dd9;\n    address public constant SAVINGS_AAVE_ADDRESS = 0x535B9035E9bA8D7efe0FeAEac885fb65b303E37C;\n\n    enum SavingsProtocol {Compound, Dydx, Fulcrum, Dsr, Aave}\n\n    function deposit(SavingsProtocol _protocol, uint256 _amount) public {\n        if (_protocol == SavingsProtocol.Dsr) {\n            dsrDeposit(_amount, true);\n        } else {\n            _deposit(_protocol, _amount, true);\n        }\n\n        SavingsLogger(SAVINGS_LOGGER_ADDRESS).logDeposit(msg.sender, uint8(_protocol), _amount);\n    }\n\n    function withdraw(SavingsProtocol _protocol, uint256 _amount) public {\n        if (_protocol == SavingsProtocol.Dsr) {\n            dsrWithdraw(_amount, true);\n        } else {\n            _withdraw(_protocol, _amount, true);\n        }\n\n        SavingsLogger(SAVINGS_LOGGER_ADDRESS).logWithdraw(msg.sender, uint8(_protocol), _amount);\n    }\n\n    function swap(SavingsProtocol _from, SavingsProtocol _to, uint256 _amount) public {\n        if (_from == SavingsProtocol.Dsr) {\n            dsrWithdraw(_amount, false);\n        } else {\n            _withdraw(_from, _amount, false);\n        }\n\n        \n        \n        uint256 amountToDeposit = ERC20(DAI_ADDRESS).balanceOf(address(this));\n\n        if (_to == SavingsProtocol.Dsr) {\n            dsrDeposit(amountToDeposit, false);\n        } else {\n            _deposit(_to, amountToDeposit, false);\n        }\n\n        SavingsLogger(SAVINGS_LOGGER_ADDRESS).logSwap(\n            msg.sender,\n            uint8(_from),\n            uint8(_to),\n            _amount\n        );\n    }\n\n    function withdrawDai() public {\n        ERC20(DAI_ADDRESS).transfer(msg.sender, ERC20(DAI_ADDRESS).balanceOf(address(this)));\n    }\n\n    function getAddress(SavingsProtocol _protocol) public pure returns (address) {\n        if (_protocol == SavingsProtocol.Compound) {\n            return SAVINGS_COMPOUND_ADDRESS;\n        }\n\n        if (_protocol == SavingsProtocol.Dydx) {\n            return SAVINGS_DYDX_ADDRESS;\n        }\n\n        if (_protocol == SavingsProtocol.Fulcrum) {\n            return SAVINGS_FULCRUM_ADDRESS;\n        }\n\n        if (_protocol == SavingsProtocol.Aave) {\n            return SAVINGS_AAVE_ADDRESS;\n        }\n    }\n\n    function _deposit(SavingsProtocol _protocol, uint256 _amount, bool _fromUser) internal {\n        if (_fromUser) {\n            ERC20(DAI_ADDRESS).transferFrom(msg.sender, address(this), _amount);\n        }\n\n        approveDeposit(_protocol);\n\n        ProtocolInterface(getAddress(_protocol)).deposit(address(this), _amount);\n\n        endAction(_protocol);\n    }\n\n    function _withdraw(SavingsProtocol _protocol, uint256 _amount, bool _toUser) public {\n        approveWithdraw(_protocol);\n\n        ProtocolInterface(getAddress(_protocol)).withdraw(address(this), _amount);\n\n        endAction(_protocol);\n\n        if (_toUser) {\n            withdrawDai();\n        }\n    }\n\n    function endAction(SavingsProtocol _protocol) internal {\n        if (_protocol == SavingsProtocol.Dydx) {\n            setDydxOperator(false);\n        }\n    }\n\n    function approveDeposit(SavingsProtocol _protocol) internal {\n        if (_protocol == SavingsProtocol.Compound || _protocol == SavingsProtocol.Fulcrum || _protocol == SavingsProtocol.Aave) {\n            ERC20(DAI_ADDRESS).approve(getAddress(_protocol), uint256(-1));\n        }\n\n        if (_protocol == SavingsProtocol.Dydx) {\n            ERC20(DAI_ADDRESS).approve(SOLO_MARGIN_ADDRESS, uint256(-1));\n            setDydxOperator(true);\n        }\n    }\n\n    function approveWithdraw(SavingsProtocol _protocol) internal {\n        if (_protocol == SavingsProtocol.Compound) {\n            ERC20(NEW_CDAI_ADDRESS).approve(getAddress(_protocol), uint256(-1));\n        }\n\n        if (_protocol == SavingsProtocol.Dydx) {\n            setDydxOperator(true);\n        }\n\n        if (_protocol == SavingsProtocol.Fulcrum) {\n            ERC20(NEW_IDAI_ADDRESS).approve(getAddress(_protocol), uint256(-1));\n        }\n\n        if (_protocol == SavingsProtocol.Aave) {\n            ERC20(ADAI_ADDRESS).approve(getAddress(_protocol), uint256(-1));\n        }\n    }\n\n    function setDydxOperator(bool _trusted) internal {\n        ISoloMargin.OperatorArg[] memory operatorArgs = new ISoloMargin.OperatorArg[](1);\n        operatorArgs[0] = ISoloMargin.OperatorArg({\n            operator: getAddress(SavingsProtocol.Dydx),\n            trusted: _trusted\n        });\n\n        ISoloMargin(SOLO_MARGIN_ADDRESS).setOperators(operatorArgs);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_AAVE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_DYDX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PIP_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTC_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_protocol\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_toUser\",\"type\":\"bool\"}],\"name\":\"_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_protocol\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_FULCRUM_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONITOR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH2DAI_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STUPID_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_REGISTRY_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUTOMATIC_LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUBSCRIPTION_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_protocol\",\"type\":\"uint8\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_IDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_protocol\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_COMPOUND_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SavingsProxy","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}