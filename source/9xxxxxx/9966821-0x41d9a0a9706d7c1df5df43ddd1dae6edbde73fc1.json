{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\n\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        \n        \n        \n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        \n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    \n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        \n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        \n        \n        \n        \n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    \n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        \n        \n\n        \n        \n        \n        \n        \n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        \n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { \n            \n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary ECDSA {\n    \n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        \n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        \n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        \n        \n        \n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n\n        \n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    \n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        \n        \n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\ncontract ERC20Escrow {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    event FundsDeposited(address indexed buyer, uint256 amount);\n    event FundsRefunded();\n    event FundsReleased(address indexed seller, uint256 amount);\n    event DisputeResolved();\n    event OwnershipTransferred(address indexed oldOwner, address newOwner);\n    event MediatorChanged(address indexed oldMediator, address newMediator);\n\n    enum Status { AWAITING_PAYMENT, PAID, REFUNDED, MEDIATED, COMPLETE }\n\n    Status public status;\n    bytes32 escrowID;\n    uint256 amount;\n    uint256 fee;\n    address public owner;\n    address public mediator;\n    address public buyer;\n    address public seller;\n    IERC20 public token;\n    bool public initialized = false;\n    bool public funded = false;\n    bool public completed = false;\n    bytes32 public releaseMsgHash;\n    bytes32 public resolveMsgHash;\n\n    modifier onlyBuyer() {\n        require(msg.sender == buyer, \"Only the buyer can call this function.\");\n        _;\n    }\n\n    modifier onlyWithBuyerSignature(bytes32 hash, bytes memory signature) {\n        require(\n            hash.toEthSignedMessageHash()\n                .recover(signature) == buyer,\n            \"Must be signed by buyer.\"\n        );\n        _;\n    }\n\n    modifier onlyWithParticipantSignature(bytes32 hash, bytes memory signature) {\n        address signer = hash.toEthSignedMessageHash()\n            .recover(signature);\n        require(\n            signer == buyer || signer == seller,\n            \"Must be signed by either buyer or seller.\"\n        );\n        _;\n    }\n\n    modifier onlySeller() {\n        require(msg.sender == seller, \"Only the seller can call this function.\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can call this function.\");\n        _;\n    }\n\n    modifier onlyMediator() {\n        require(msg.sender == mediator, \"Only the mediator can call this function.\");\n        _;\n    }\n\n    modifier onlyUninitialized() {\n        require(initialized == false, \"Escrow already initialized.\");\n        initialized = true;\n        _;\n    }\n\n    modifier onlyUnfunded() {\n        require(funded == false, \"Escrow already funded.\");\n        funded = true;\n        _;\n    }\n\n    modifier onlyFunded() {\n        require(funded == true, \"Escrow not funded.\");\n        _;\n    }\n\n    modifier onlyIncompleted() {\n        require(completed == false, \"Escrow already completed.\");\n        completed = true;\n        _;\n    }\n\n    function init(\n        bytes32 _escrowID,\n        IERC20 _token,\n        address _owner,\n        address _buyer,\n        address _seller,\n        address _mediator,\n        uint256 _amount,\n        uint256 _fee\n    )\n        external\n        onlyUninitialized\n    {\n        status = Status.AWAITING_PAYMENT;\n        escrowID = _escrowID;\n        token = _token;\n        owner = _owner;\n        buyer = _buyer;\n        mediator = _mediator;\n        seller = _seller;\n        amount = _amount;\n        fee = _fee;\n        releaseMsgHash = keccak256(\n            abi.encodePacked(\"releaseFunds()\", escrowID, address(this))\n        );\n        resolveMsgHash = keccak256(\n            abi.encodePacked(\"resolveDispute()\", escrowID, address(this))\n        );\n        emit OwnershipTransferred(address(0), _owner);\n        emit MediatorChanged(address(0), _owner);\n    }\n\n    function depositAmount() public view returns (uint256) {\n        return amount.add(fee);\n    }\n\n    function deposit()\n        public\n        onlyUnfunded\n    {\n        token.safeTransferFrom(msg.sender, address(this), depositAmount());\n        status = Status.PAID;\n        emit FundsDeposited(msg.sender, depositAmount());\n    }\n\n    function _releaseFees() private {\n            token.safeTransfer(mediator, fee.mul(2));\n    }\n\n    function refund()\n        public\n        onlySeller\n        onlyFunded\n        onlyIncompleted\n    {\n        token.safeTransfer(buyer, depositAmount());\n        status = Status.REFUNDED;\n        emit FundsRefunded();\n    }\n\n    function releaseFunds(\n        bytes calldata signature\n    )\n        external\n        onlyFunded\n        onlyIncompleted\n        onlyWithBuyerSignature(releaseMsgHash, signature)\n    {\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\n        token.safeTransfer(seller, releaseAmount);\n\n        _releaseFees();\n\n        status = Status.COMPLETE;\n        emit FundsReleased(seller, releaseAmount);\n    }\n\n    function resolveDispute(\n        bytes calldata _signature,\n        uint8 _buyerPercent\n    )\n        external\n        onlyFunded\n        onlyMediator\n        onlyIncompleted\n        onlyWithParticipantSignature(resolveMsgHash, _signature)\n    {\n        require(_buyerPercent <= 100, \"_buyerPercent must be 100 or lower\");\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\n\n        status = Status.MEDIATED;\n        emit DisputeResolved();\n\n        if (_buyerPercent > 0)\n          token.safeTransfer(buyer, releaseAmount.mul(uint256(_buyerPercent)).div(100));\n        if (_buyerPercent < 100)\n          token.safeTransfer(seller, releaseAmount.mul(uint256(100).sub(_buyerPercent)).div(100));\n\n        _releaseFees();\n    }\n\n    function setOwner(address _newOwner) external onlyOwner {\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n\n    function setMediator(address _newMediator) external onlyOwner {\n        emit MediatorChanged(mediator, _newMediator);\n        mediator = _newMediator;\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FundsRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMediator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMediator\",\"type\":\"address\"}],\"name\":\"MediatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"funded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowID\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMsgHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_buyerPercent\",\"type\":\"uint8\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveMsgHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMediator\",\"type\":\"address\"}],\"name\":\"setMediator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum ERC20Escrow.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20Escrow","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}