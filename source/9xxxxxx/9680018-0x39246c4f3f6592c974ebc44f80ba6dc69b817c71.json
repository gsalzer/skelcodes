{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CompoundOracleInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n// AT MAINNET ADDRESS: 0x02557a5E05DeFeFFD4cAe6D83eA3d173B272c904\r\n\r\ncontract CompoundOracleInterface {\r\n    // returns asset:eth -- to get USDC:eth, have to do 10**24/result,\r\n\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n  * @notice retrieves price of an asset\r\n  * @dev function to get price for an asset\r\n  * @param asset Asset for which to get the price\r\n  * @return uint mantissa of asset price (scaled by 1e18) or zero if unset or contract paused\r\n  */\r\n    function getPrice(address asset) public view returns (uint);\r\n    function getUnderlyingPrice(ERC20 cToken) public view returns (uint);\r\n    // function getPrice(address asset) public view returns (uint) {\r\n    //     return 527557000000000;\r\n    // }\r\n\r\n}\r\n\r\n// File: contracts/lib/UniswapExchangeInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n// Solidity Interface\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n// File: contracts/lib/UniswapFactoryInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n// Solidity Interface\r\ncontract UniswapFactoryInterface {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n    // function createExchange(address token) external returns (address exchange) {\r\n    //     return 0x06D014475F84Bb45b9cdeD1Cf3A1b8FE3FbAf128;\r\n    // }\r\n    // // Get Exchange and Token Info\r\n    // function getExchange(address token) external view returns (address exchange){\r\n    //     return 0x06D014475F84Bb45b9cdeD1Cf3A1b8FE3FbAf128;\r\n    // }\r\n    // function getToken(address exchange) external view returns (address token) {\r\n    //     return 0x06D014475F84Bb45b9cdeD1Cf3A1b8FE3FbAf128;\r\n    // }\r\n    // function getTokenWithId(uint256 tokenId) external view returns (address token) {\r\n    //     return 0x06D014475F84Bb45b9cdeD1Cf3A1b8FE3FbAf128;\r\n    // }\r\n}\r\n\r\n// File: contracts/OptionsUtils.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract OptionsUtils {\r\n    // defauls are for mainnet\r\n    UniswapFactoryInterface public UNISWAP_FACTORY;\r\n\r\n    CompoundOracleInterface public COMPOUND_ORACLE;\r\n\r\n    constructor(address _uniswapFactory, address _compoundOracle) public {\r\n        UNISWAP_FACTORY = UniswapFactoryInterface(_uniswapFactory);\r\n        COMPOUND_ORACLE = CompoundOracleInterface(_compoundOracle);\r\n    }\r\n\r\n    // TODO: for now gets Uniswap, later update to get other exchanges\r\n    function getExchange(address _token)\r\n        public\r\n        view\r\n        returns (UniswapExchangeInterface)\r\n    {\r\n        if (address(UNISWAP_FACTORY.getExchange(_token)) == address(0)) {\r\n            revert(\"No payout exchange\");\r\n        }\r\n\r\n        UniswapExchangeInterface exchange = UniswapExchangeInterface(\r\n            UNISWAP_FACTORY.getExchange(_token)\r\n        );\r\n\r\n        return exchange;\r\n    }\r\n\r\n    function isETH(IERC20 _ierc20) public pure returns (bool) {\r\n        return _ierc20 == IERC20(0);\r\n    }\r\n}\r\n\r\n// File: contracts/OptionsExchange.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OptionsExchange {\r\n    uint256 constant LARGE_BLOCK_SIZE = 1651753129000;\r\n    uint256 constant LARGE_APPROVAL_NUMBER = 10**30;\r\n\r\n    UniswapFactoryInterface public UNISWAP_FACTORY;\r\n\r\n    constructor(address _uniswapFactory) public {\r\n        UNISWAP_FACTORY = UniswapFactoryInterface(_uniswapFactory);\r\n    }\r\n\r\n    /*** Events ***/\r\n    event SellOTokens(\r\n        address seller,\r\n        address payable receiver,\r\n        address oTokenAddress,\r\n        address payoutTokenAddress,\r\n        uint256 oTokensToSell,\r\n        uint256 payoutTokensReceived\r\n    );\r\n    event BuyOTokens(\r\n        address buyer,\r\n        address payable receiver,\r\n        address oTokenAddress,\r\n        address paymentTokenAddress,\r\n        uint256 oTokensToBuy,\r\n        uint256 premiumPaid\r\n    );\r\n\r\n    /**\r\n    * @notice This function sells oTokens on Uniswap and sends back payoutTokens to the receiver\r\n    * @param receiver The address to send the payout tokens back to\r\n    * @param oTokenAddress The address of the oToken to sell\r\n    * @param payoutTokenAddress The address of the token to receive the premiums in\r\n    * @param oTokensToSell The number of oTokens to sell\r\n    */\r\n    function sellOTokens(\r\n        address payable receiver,\r\n        address oTokenAddress,\r\n        address payoutTokenAddress,\r\n        uint256 oTokensToSell\r\n    ) public {\r\n        // @note: first need to bootstrap the uniswap exchange to get the address.\r\n        IERC20 oToken = IERC20(oTokenAddress);\r\n        IERC20 payoutToken = IERC20(payoutTokenAddress);\r\n        oToken.transferFrom(msg.sender, address(this), oTokensToSell);\r\n        uint256 payoutTokensReceived = uniswapSellOToken(\r\n            oToken,\r\n            payoutToken,\r\n            oTokensToSell,\r\n            receiver\r\n        );\r\n\r\n        emit SellOTokens(\r\n            msg.sender,\r\n            receiver,\r\n            oTokenAddress,\r\n            payoutTokenAddress,\r\n            oTokensToSell,\r\n            payoutTokensReceived\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice This function buys oTokens on Uniswap and using paymentTokens from the receiver\r\n    * @param receiver The address to send the oTokens back to\r\n    * @param oTokenAddress The address of the oToken to buy\r\n    * @param paymentTokenAddress The address of the token to pay the premiums in\r\n    * @param oTokensToBuy The number of oTokens to buy\r\n    */\r\n    function buyOTokens(\r\n        address payable receiver,\r\n        address oTokenAddress,\r\n        address paymentTokenAddress,\r\n        uint256 oTokensToBuy\r\n    ) public payable {\r\n        IERC20 oToken = IERC20(oTokenAddress);\r\n        IERC20 paymentToken = IERC20(paymentTokenAddress);\r\n        uniswapBuyOToken(paymentToken, oToken, oTokensToBuy, receiver);\r\n    }\r\n\r\n    /**\r\n    * @notice This function calculates the amount of premiums that the seller\r\n    * will receive if they sold oTokens on Uniswap\r\n    * @param oTokenAddress The address of the oToken to sell\r\n    * @param payoutTokenAddress The address of the token to receive the premiums in\r\n    * @param oTokensToSell The number of oTokens to sell\r\n    */\r\n    function premiumReceived(\r\n        address oTokenAddress,\r\n        address payoutTokenAddress,\r\n        uint256 oTokensToSell\r\n    ) public view returns (uint256) {\r\n        // get the amount of ETH that will be paid out if oTokensToSell is sold.\r\n        UniswapExchangeInterface oTokenExchange = getExchange(oTokenAddress);\r\n        uint256 ethReceived = oTokenExchange.getTokenToEthInputPrice(\r\n            oTokensToSell\r\n        );\r\n\r\n        if (!isETH(IERC20(payoutTokenAddress))) {\r\n            // get the amount of payout tokens that will be received if the ethRecieved is sold.\r\n            UniswapExchangeInterface payoutExchange = getExchange(\r\n                payoutTokenAddress\r\n            );\r\n            return payoutExchange.getEthToTokenInputPrice(ethReceived);\r\n        }\r\n        return ethReceived;\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice This function calculates the premiums to be paid if a buyer wants to\r\n    * buy oTokens on Uniswap\r\n    * @param oTokenAddress The address of the oToken to buy\r\n    * @param paymentTokenAddress The address of the token to pay the premiums in\r\n    * @param oTokensToBuy The number of oTokens to buy\r\n    */\r\n    function premiumToPay(\r\n        address oTokenAddress,\r\n        address paymentTokenAddress,\r\n        uint256 oTokensToBuy\r\n    ) public view returns (uint256) {\r\n        // get the amount of ETH that needs to be paid for oTokensToBuy.\r\n        UniswapExchangeInterface oTokenExchange = getExchange(oTokenAddress);\r\n        uint256 ethToPay = oTokenExchange.getEthToTokenOutputPrice(\r\n            oTokensToBuy\r\n        );\r\n\r\n        if (!isETH(IERC20(paymentTokenAddress))) {\r\n            // get the amount of paymentTokens that needs to be paid to get the desired ethToPay.\r\n            UniswapExchangeInterface paymentTokenExchange = getExchange(\r\n                paymentTokenAddress\r\n            );\r\n            return paymentTokenExchange.getTokenToEthOutputPrice(ethToPay);\r\n        }\r\n\r\n        return ethToPay;\r\n    }\r\n\r\n    function uniswapSellOToken(\r\n        IERC20 oToken,\r\n        IERC20 payoutToken,\r\n        uint256 _amt,\r\n        address payable _transferTo\r\n    ) internal returns (uint256) {\r\n        require(!isETH(oToken), \"Can only sell oTokens\");\r\n        UniswapExchangeInterface exchange = getExchange(address(oToken));\r\n\r\n        if (isETH(payoutToken)) {\r\n            //Token to ETH\r\n            oToken.approve(address(exchange), _amt);\r\n            return\r\n                exchange.tokenToEthTransferInput(\r\n                    _amt,\r\n                    1,\r\n                    LARGE_BLOCK_SIZE,\r\n                    _transferTo\r\n                );\r\n        } else {\r\n            //Token to Token\r\n            oToken.approve(address(exchange), _amt);\r\n            return\r\n                exchange.tokenToTokenTransferInput(\r\n                    _amt,\r\n                    1,\r\n                    1,\r\n                    LARGE_BLOCK_SIZE,\r\n                    _transferTo,\r\n                    address(payoutToken)\r\n                );\r\n        }\r\n    }\r\n\r\n    function uniswapBuyOToken(\r\n        IERC20 paymentToken,\r\n        IERC20 oToken,\r\n        uint256 _amt,\r\n        address payable _transferTo\r\n    ) public returns (uint256) {\r\n        require(!isETH(oToken), \"Can only buy oTokens\");\r\n\r\n        if (!isETH(paymentToken)) {\r\n            UniswapExchangeInterface exchange = getExchange(\r\n                address(paymentToken)\r\n            );\r\n\r\n            uint256 paymentTokensToTransfer = premiumToPay(\r\n                address(oToken),\r\n                address(paymentToken),\r\n                _amt\r\n            );\r\n            paymentToken.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                paymentTokensToTransfer\r\n            );\r\n\r\n            // Token to Token\r\n            paymentToken.approve(address(exchange), LARGE_APPROVAL_NUMBER);\r\n\r\n            emit BuyOTokens(\r\n                msg.sender,\r\n                _transferTo,\r\n                address(oToken),\r\n                address(paymentToken),\r\n                _amt,\r\n                paymentTokensToTransfer\r\n            );\r\n\r\n            return\r\n                exchange.tokenToTokenTransferInput(\r\n                    paymentTokensToTransfer,\r\n                    1,\r\n                    1,\r\n                    LARGE_BLOCK_SIZE,\r\n                    _transferTo,\r\n                    address(oToken)\r\n                );\r\n        } else {\r\n            // ETH to Token\r\n            UniswapExchangeInterface exchange = UniswapExchangeInterface(\r\n                UNISWAP_FACTORY.getExchange(address(oToken))\r\n            );\r\n\r\n            uint256 ethToTransfer = exchange.getEthToTokenOutputPrice(_amt);\r\n\r\n            emit BuyOTokens(\r\n                msg.sender,\r\n                _transferTo,\r\n                address(oToken),\r\n                address(paymentToken),\r\n                _amt,\r\n                ethToTransfer\r\n            );\r\n\r\n            return\r\n                exchange.ethToTokenTransferOutput.value(ethToTransfer)(\r\n                    _amt,\r\n                    LARGE_BLOCK_SIZE,\r\n                    _transferTo\r\n                );\r\n        }\r\n    }\r\n\r\n    function getExchange(address _token)\r\n        internal\r\n        view\r\n        returns (UniswapExchangeInterface)\r\n    {\r\n        UniswapExchangeInterface exchange = UniswapExchangeInterface(\r\n            UNISWAP_FACTORY.getExchange(_token)\r\n        );\r\n\r\n        if (address(exchange) == address(0)) {\r\n            revert(\"No payout exchange\");\r\n        }\r\n\r\n        return exchange;\r\n    }\r\n\r\n    function isETH(IERC20 _ierc20) internal pure returns (bool) {\r\n        return _ierc20 == IERC20(0);\r\n    }\r\n\r\n    function() external payable {\r\n        // to get ether from uniswap exchanges\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"name\":\"payoutTokenAddress\",\"type\":\"address\"},{\"name\":\"oTokensToSell\",\"type\":\"uint256\"}],\"name\":\"premiumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"name\":\"payoutTokenAddress\",\"type\":\"address\"},{\"name\":\"oTokensToSell\",\"type\":\"uint256\"}],\"name\":\"sellOTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"name\":\"oTokensToBuy\",\"type\":\"uint256\"}],\"name\":\"buyOTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"name\":\"oTokensToBuy\",\"type\":\"uint256\"}],\"name\":\"premiumToPay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paymentToken\",\"type\":\"address\"},{\"name\":\"oToken\",\"type\":\"address\"},{\"name\":\"_amt\",\"type\":\"uint256\"},{\"name\":\"_transferTo\",\"type\":\"address\"}],\"name\":\"uniswapBuyOToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payoutTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oTokensToSell\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payoutTokensReceived\",\"type\":\"uint256\"}],\"name\":\"SellOTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oTokensToBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"premiumPaid\",\"type\":\"uint256\"}],\"name\":\"BuyOTokens\",\"type\":\"event\"}]","ContractName":"OptionsExchange","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://fd6275a3a8cfbd1de9bf362c2894014045f3dd1668b86f714ec99f707a99b550"}]}