{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on   \r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),  \r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),  \r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\TrustlessFundV2.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract TrustlessFundV2 is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  /*** STORAGE VARIABLES ***/\r\n\r\n  /**\r\n    * @notice Date time in seconds when timelock expires.\r\n  */\r\n  uint public expiration;\r\n\r\n  /**\r\n    * @notice Address permitted to withdraw funds after unlock.\r\n  */\r\n  address public beneficiary;\r\n\r\n  /**\r\n    * @notice Token look up table for front-end access.\r\n  */\r\n  address[] public tokenLUT;\r\n\r\n  /**\r\n    * @notice Checks whether a token exists in the fund.\r\n  */\r\n  mapping(address => bool) public tokens;\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /**\r\n    * @notice Emits when a deposit is made.\r\n  */\r\n  event Deposit(address indexed _from, uint _value, address indexed _token);\r\n\r\n  /**\r\n    * @notice Emits when a withdrawal is made.\r\n  */\r\n  event Withdraw(address indexed _to, uint _value, address indexed _token);\r\n\r\n  /**\r\n    * @notice Emits when the expiration is increased.\r\n  */\r\n  event IncreaseTime(uint _newExpiration);\r\n\r\n  /**\r\n    * @notice Emits when the beneficiary is updated.\r\n  */\r\n  event UpdateBeneficiary(address indexed _newBeneficiary);\r\n\r\n  /*** MODIFIERS ***/\r\n\r\n  /**\r\n    * @dev Throws if the contract has not yet reached its expiration.\r\n  */\r\n  modifier isExpired() {\r\n    require(expiration < block.timestamp, 'contract is still locked');\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Throws if msg.sender is not the beneficiary.\r\n  */\r\n  modifier onlyBeneficiary() {\r\n    require(msg.sender == beneficiary, 'only the beneficiary can perform this function');        \r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @param _expiration Date time in seconds when timelock expires.\r\n    * @param _beneficiary Address permitted to withdraw funds after unlock.\r\n    * @param _owner The contract owner.\r\n  */\r\n  constructor(uint _expiration, address _beneficiary, address _owner) public {\r\n    expiration = _expiration;\r\n    beneficiary = _beneficiary;\r\n    transferOwnership(_owner);\r\n  }\r\n\r\n  /*** VIEW/PURE FUNCTIONS ***/\r\n\r\n  /**\r\n    * @dev Returns the length of the tokenLUT array.\r\n  */\r\n  function getTokenSize() public view returns(uint) {\r\n    return tokenLUT.length;\r\n  }\r\n\r\n  /*** OTHER FUNCTIONS ***/\r\n\r\n  /**\r\n    * @dev Allows a user to deposit ETH or an ERC20 into the contract.\r\n           If _token is 0 address, deposit ETH.\r\n    * @param _amount The amount to deposit.\r\n    * @param _token The token to deposit.\r\n  */\r\n  function deposit(uint _amount, address _token) public payable {\r\n    if(_token == address(0)) {\r\n      require(msg.value == _amount, 'incorrect amount');\r\n      if(!tokens[_token]) {\r\n        tokenLUT.push(_token);\r\n        tokens[_token] = true;\r\n      }\r\n      emit Deposit(msg.sender, _amount, _token);\r\n    }\r\n    else {\r\n      IERC20 token = IERC20(_token);\r\n      require(token.transferFrom(msg.sender, address(this), _amount), 'transfer failed');        \r\n      if(!tokens[_token]) {\r\n        tokenLUT.push(_token);\r\n        tokens[_token] = true;\r\n      }\r\n      emit Deposit(msg.sender, _amount, _token);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev Withdraw funds to msg.sender, but only if the timelock is expired\r\n           and msg.sender is the beneficiary.\r\n           If _token is 0 address, withdraw ETH.\r\n    * @param _amount The amount to withdraw.\r\n    * @param _token The token to withdraw.\r\n  */\r\n  function withdraw(uint _amount, address _token) public isExpired() onlyBeneficiary() {\r\n    if(_token == address(0)) {\r\n      (bool success, ) = msg.sender.call.value(_amount)(\"\");\r\n      require(success, \"Transfer failed.\");\r\n      emit Withdraw(msg.sender, _amount, _token);\r\n    } else {\r\n      IERC20 token = IERC20(_token);\r\n      require(token.transfer(msg.sender, _amount), 'transfer failed');\r\n      emit Withdraw(msg.sender, _amount, _token);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @dev Increase the time until expiration. Only the owner can perform this.\r\n    * @param _newExpiration New date time in seconds when timelock expires.\r\n  */\r\n  function increaseTime(uint _newExpiration) public onlyOwner() {\r\n    require(_newExpiration > expiration, 'can only increase expiration');\r\n    expiration = _newExpiration;\r\n    emit IncreaseTime(_newExpiration);\r\n  }\r\n\r\n  /**\r\n    * @dev Update the beneficiary address. Only the owner can perform this.\r\n    * @param _newBeneficiary New beneficiary address.\r\n  */\r\n  function updateBeneficiary(address _newBeneficiary) public onlyOwner() {\r\n    require(_newBeneficiary != beneficiary, 'same beneficiary');\r\n    require(_newBeneficiary != address(0), 'cannot set as burn address');\r\n    beneficiary = _newBeneficiary;\r\n    emit UpdateBeneficiary(_newBeneficiary);\r\n  }\r\n}\r\n\r\n// File: contracts\\TrustlessFundFactoryV2.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract TrustlessFundFactoryV2 {\r\n  /*** STORAGE VARIABLES ***/\r\n\r\n  /**\r\n    * @notice Maps unique IDs to funds.\r\n  */\r\n  mapping(uint => address) funds;\r\n\r\n  /**\r\n    * @notice Maps user address to their corresponding funds.\r\n  */\r\n  mapping(address => uint[]) userFunds;\r\n\r\n  /**\r\n    * @notice Get the next fund ID.\r\n  */\r\n  uint public nextId;\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /**\r\n    * @notice Emits when a fund is created.\r\n  */\r\n  event CreateFund(\r\n    uint expiration,\r\n    address indexed beneficiary,\r\n    address indexed owner\r\n  );\r\n\r\n  /*** PURE/VIEW FUNCTIONS ***/\r\n\r\n  /**\r\n    * @dev Given an id, return the corresponding fund address.\r\n    * @param _id The id of the fund.\r\n  */\r\n  function getFund(uint _id) public view returns(address) {\r\n    return funds[_id];\r\n  }\r\n\r\n  /**\r\n    * @dev Given a user address, return all owned funds.\r\n    * @param _user The address of the user.\r\n  */\r\n  function getUserFunds(address _user) public view returns(uint[] memory) {\r\n    return userFunds[_user];\r\n  }\r\n\r\n  /*** OTHER FUNCTIONS ***/\r\n\r\n  /**\r\n    * @dev Deploy a TrustlessFund contract.\r\n    * @param _expiration Date time in seconds when timelock expires.\r\n    * @param _beneficiary Address permitted to withdraw funds after unlock.\r\n  */\r\n  function createFund(uint _expiration, address _beneficiary) public {\r\n    require(funds[nextId] == address(0), 'id already in use');\r\n    require(_beneficiary != address(0), 'beneficiary is burn address');\r\n    TrustlessFundV2 fund = new TrustlessFundV2(_expiration, _beneficiary, msg.sender);\r\n    funds[nextId] = address(fund);\r\n    userFunds[msg.sender].push(nextId);\r\n    nextId++;\r\n    emit CreateFund(_expiration, _beneficiary, msg.sender);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateFund\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"createFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserFunds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TrustlessFundFactoryV2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://08202b8f29c3474566c49235fe1d58450a11c85fe7a0f6fa9bd569920c079984"}]}