{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/DeliverFunds.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract DeliverFunds {\r\n    constructor(address payable target) public payable {\r\n        selfdestruct(target);\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/EthexJackpot.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * (E)t)h)e)x) Jackpot Contract \r\n *  This smart-contract is the part of Ethex Lottery fair game.\r\n *  See latest version at https://github.com/ethex-bet/ethex-contracts \r\n *  http://ethex.bet\r\n */\r\n\r\n\r\n\r\ncontract EthexJackpot is Ownable {\r\n    mapping(uint256 => address payable) public tickets;\r\n    mapping(uint256 => Segment[4]) public prevJackpots;\r\n    uint256[4] public amounts;\r\n    uint256[4] public starts;\r\n    uint256[4] public ends;\r\n    uint256[4] public numberStarts;\r\n    uint256 public numberEnd;\r\n    uint256 public firstNumber;\r\n    address public lotoAddress;\r\n    address payable public newVersionAddress;\r\n    EthexJackpot public previousContract;\r\n    \r\n    struct Segment {\r\n        uint256 start;\r\n        uint256 end;\r\n        bool processed;\r\n    }\r\n    \r\n    event Jackpot (\r\n        uint256 number,\r\n        uint256 count,\r\n        uint256 amount,\r\n        byte jackpotType\r\n    );\r\n    \r\n    event Ticket (\r\n        uint256 number\r\n    );\r\n    \r\n    event Superprize (\r\n        uint256 amount,\r\n        address winner\r\n    );\r\n    \r\n    uint256 internal constant PRECISION = 1 ether;\r\n    \r\n    modifier onlyLoto {\r\n        require(msg.sender == lotoAddress, \"Loto only\");\r\n        _;\r\n    }\r\n    \r\n    function() external payable { }\r\n    \r\n    function migrate() external {\r\n        require(msg.sender == owner || msg.sender == newVersionAddress);\r\n        require(newVersionAddress != address(0), \"NewVersionAddress required\");\r\n        newVersionAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function registerTicket(address payable gamer) external payable onlyLoto {\r\n        distribute();\r\n        uint8 i;\r\n        if (gamer == address(0x0)) {\r\n            for (; i < 4; i++)\r\n                if (block.number >= ends[i])\r\n                    setJackpot(i);\r\n        }\r\n        else {\r\n            uint256 number = numberEnd + 1;\r\n            for (; i < 4; i++) {\r\n                if (block.number >= ends[i]) {\r\n                    setJackpot(i);\r\n                    numberStarts[i] = number;\r\n                }\r\n                else\r\n                    if (numberStarts[i] == prevJackpots[starts[i]][i].start)\r\n                        numberStarts[i] = number;\r\n            }\r\n            numberEnd = number;\r\n            tickets[number] = gamer;\r\n            emit Ticket(number);\r\n        }\r\n    }\r\n    \r\n    function setLoto(address loto) external onlyOwner {\r\n        lotoAddress = loto;\r\n    }\r\n    \r\n    function setNewVersion(address payable newVersion) external onlyOwner {\r\n        newVersionAddress = newVersion;\r\n    }\r\n    \r\n    function payIn() external payable { distribute(); }\r\n    \r\n    function settleJackpot() external {\r\n        for (uint8 i = 0; i < 4; i++)\r\n            if (block.number >= ends[i])\r\n                setJackpot(i);\r\n\r\n        uint256[4] memory payAmounts;\r\n        uint256[4] memory wins;\r\n        uint8[4] memory PARTS = [84, 12, 3, 1];\r\n        for (uint8 i = 0; i < 4; i++) {\r\n            uint256 start = starts[i];\r\n            if (block.number == start || (start < block.number - 256))\r\n                continue;\r\n            if (prevJackpots[start][i].processed == false && prevJackpots[start][i].start != 0) {\r\n                payAmounts[i] = amounts[i] * PRECISION / PARTS[i] / PRECISION;\r\n                amounts[i] -= payAmounts[i];\r\n                prevJackpots[start][i].processed = true;\r\n                uint48 modulo = uint48(bytes6(blockhash(start) << 29));\r\n                wins[i] = getNumber(prevJackpots[start][i].start, prevJackpots[start][i].end, modulo);\r\n                emit Jackpot(wins[i], prevJackpots[start][i].end - prevJackpots[start][i].start + 1, payAmounts[i], byte(uint8(1) << i));\r\n            }\r\n        }\r\n        \r\n        for (uint8 i = 0; i < 4; i++)\r\n            if (payAmounts[i] > 0 && !getAddress(wins[i]).send(payAmounts[i]))\r\n                (new DeliverFunds).value(payAmounts[i])(getAddress(wins[i]));\r\n    }\r\n\r\n    function settleMissedJackpot(bytes32 hash, uint256 blockHeight) external onlyOwner {\r\n        for (uint8 i = 0; i < 4; i++)\r\n            if (block.number >= ends[i])\r\n                setJackpot(i);\r\n        \r\n        if (blockHeight < block.number - 256) {\r\n            uint48 modulo = uint48(bytes6(hash << 29));\r\n        \r\n            uint256[4] memory payAmounts;\r\n            uint256[4] memory wins;\r\n            uint8[4] memory PARTS = [84, 12, 3, 1];\r\n            for (uint8 i = 0; i < 4; i++) {\r\n                if (prevJackpots[blockHeight][i].processed == false && prevJackpots[blockHeight][i].start != 0) {\r\n                    payAmounts[i] = amounts[i] * PRECISION / PARTS[i] / PRECISION;\r\n                    amounts[i] -= payAmounts[i];\r\n                    prevJackpots[blockHeight][i].processed = true;\r\n                    wins[i] = getNumber(prevJackpots[blockHeight][i].start, prevJackpots[blockHeight][i].end, modulo);\r\n                    emit Jackpot(wins[i], prevJackpots[blockHeight][i].end - prevJackpots[blockHeight][i].start + 1, payAmounts[i], byte(uint8(1) << i));\r\n                }\r\n            }\r\n        \r\n            for (uint8 i = 0; i < 4; i++)\r\n                if (payAmounts[i] > 0 && !getAddress(wins[i]).send(payAmounts[i]))\r\n                    (new DeliverFunds).value(payAmounts[i])(getAddress(wins[i]));\r\n        }\r\n    }\r\n    \r\n    function paySuperprize(address payable winner) external onlyLoto {\r\n        uint256 superprizeAmount = amounts[0] + amounts[1] + amounts[2] + amounts[3];\r\n        amounts[0] = 0;\r\n        amounts[1] = 0;\r\n        amounts[2] = 0;\r\n        amounts[3] = 0;\r\n        emit Superprize(superprizeAmount, winner);\r\n        if (superprizeAmount > 0 && !winner.send(superprizeAmount))\r\n            (new DeliverFunds).value(superprizeAmount)(winner);\r\n    }\r\n    \r\n    function setOldVersion(address payable oldAddress) external onlyOwner {\r\n        previousContract = EthexJackpot(oldAddress);\r\n        for (uint8 i = 0; i < 4; i++) {\r\n            starts[i] = previousContract.starts(i);\r\n            ends[i] = previousContract.ends(i);\r\n            numberStarts[i] = previousContract.numberStarts(i);\r\n            uint256 start;\r\n            uint256 end;\r\n            bool processed;\r\n            (start, end, processed) = previousContract.prevJackpots(starts[i], i);\r\n            prevJackpots[starts[i]][i] = Segment(start, end, processed);\r\n            amounts[i] = previousContract.amounts(i);\r\n        }\r\n        numberEnd = previousContract.numberEnd();\r\n        firstNumber = numberEnd;\r\n        previousContract.migrate();\r\n    }\r\n    \r\n    function getAddress(uint256 number) public returns (address payable) {\r\n        if (number <= firstNumber)\r\n            return previousContract.getAddress(number);\r\n        return tickets[number];\r\n    }\r\n    \r\n    function setJackpot(uint8 jackpotType) private {\r\n        uint24[4] memory LENGTH = [5000, 35000, 150000, 450000];\r\n        prevJackpots[ends[jackpotType]][jackpotType].processed = prevJackpots[starts[jackpotType]][jackpotType].end == numberEnd;\r\n        starts[jackpotType] = ends[jackpotType];\r\n        ends[jackpotType] = starts[jackpotType] + LENGTH[jackpotType];\r\n        prevJackpots[starts[jackpotType]][jackpotType].start = numberStarts[jackpotType];\r\n        prevJackpots[starts[jackpotType]][jackpotType].end = numberEnd;\r\n    }\r\n    \r\n    function distribute() private {\r\n        uint256 distributedAmount = amounts[0] + amounts[1] + amounts[2] + amounts[3];\r\n        if (distributedAmount < address(this).balance) {\r\n            uint256 amount = (address(this).balance - distributedAmount) / 4;\r\n            amounts[0] += amount;\r\n            amounts[1] += amount;\r\n            amounts[2] += amount;\r\n            amounts[3] += amount;\r\n        }\r\n    }\r\n    \r\n    function getNumber(uint256 startNumber, uint256 endNumber, uint48 modulo) private pure returns (uint256) {\r\n        return startNumber + modulo % (endNumber - startNumber + 1);\r\n    }\r\n}\r\n\r\n// File: contracts/EthexHouse.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * (E)t)h)e)x) House Contract \r\n *  This smart-contract is the part of Ethex Lottery fair game.\r\n *  See latest version at https://github.com/ethex-bet/ethex-contracts \r\n *  http://ethex.bet\r\n */\r\n\r\n \r\n contract EthexHouse is Ownable {\r\n    function payIn() external payable { }\r\n    \r\n    function withdraw() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n }\r\n\r\n// File: contracts/EthexSuperprize.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * (E)t)h)e)x) Superprize Contract \r\n *  This smart-contract is the part of Ethex Lottery fair game.\r\n *  See latest version at https://github.com/ethex-bet/ethex-lottery \r\n *  http://ethex.bet\r\n */\r\n\r\n\r\n \r\n contract EthexSuperprize is Ownable {\r\n    struct Payout {\r\n        uint256 index;\r\n        uint256 amount;\r\n        uint256 block;\r\n        address payable winnerAddress;\r\n        uint256 betId;\r\n    }\r\n     \r\n    Payout[] public payouts;\r\n    \r\n    address public lotoAddress;\r\n    address payable public newVersionAddress;\r\n    EthexSuperprize public previousContract;\r\n    uint256 public hold;\r\n    \r\n    event Superprize (\r\n        uint256 index,\r\n        uint256 amount,\r\n        address winner,\r\n        uint256 betId,\r\n        byte state\r\n    );\r\n    \r\n    uint8 internal constant PARTS = 6;\r\n    uint256 internal constant PRECISION = 1 ether;\r\n    uint256 internal constant MONTHLY = 150000;\r\n\r\n    function() external payable { }\r\n    \r\n    function initSuperprize(address payable winner, uint256 betId) external {\r\n        require(msg.sender == lotoAddress, \"Loto only\");\r\n        uint256 amount = address(this).balance - hold;\r\n        hold = address(this).balance;\r\n        uint256 sum;\r\n        uint256 temp;\r\n        for (uint256 i = 1; i < PARTS; i++) {\r\n            temp = amount * PRECISION * (i - 1 + 10) / 75 / PRECISION;\r\n            sum += temp;\r\n            payouts.push(Payout(i, temp, block.number + i * MONTHLY, winner, betId));\r\n        }\r\n        payouts.push(Payout(PARTS, amount - sum, block.number + PARTS * MONTHLY, winner, betId));\r\n        emit Superprize(0, amount, winner, betId, 0);\r\n    }\r\n    \r\n    function paySuperprize() external onlyOwner {\r\n        if (payouts.length == 0)\r\n            return;\r\n        Payout[] memory payoutArray = new Payout[](payouts.length);\r\n        uint i = payouts.length;\r\n        while (i > 0) {\r\n            i--;\r\n            if (payouts[i].block <= block.number) {\r\n                emit Superprize(payouts[i].index, payouts[i].amount, payouts[i].winnerAddress, payouts[i].betId, 0x01);\r\n                hold -= payouts[i].amount;\r\n            }\r\n            payoutArray[i] = payouts[i];\r\n            payouts.pop();\r\n        }\r\n        for (i = 0; i < payoutArray.length; i++)\r\n            if (payoutArray[i].block > block.number)\r\n                payouts.push(payoutArray[i]);\r\n        for (i = 0; i < payoutArray.length; i++)\r\n            if (payoutArray[i].block <= block.number && !payoutArray[i].winnerAddress.send(payoutArray[i].amount))\r\n                (new DeliverFunds).value(payoutArray[i].amount)(payoutArray[i].winnerAddress);\r\n    }\r\n     \r\n    function setOldVersion(address payable oldAddress) external onlyOwner {\r\n        previousContract = EthexSuperprize(oldAddress);\r\n        lotoAddress = previousContract.lotoAddress();\r\n        hold = previousContract.hold();\r\n        uint256 index;\r\n        uint256 amount;\r\n        uint256 betBlock;\r\n        address payable winner;\r\n        uint256 betId;\r\n        uint256 payoutsCount = previousContract.getPayoutsCount();\r\n        for (uint i = 0; i < payoutsCount; i++) {\r\n            (index, amount, betBlock, winner, betId) = previousContract.payouts(i);\r\n            payouts.push(Payout(index, amount, betBlock, winner, betId));\r\n        }\r\n        previousContract.migrate();\r\n    }\r\n    \r\n    function setNewVersion(address payable newVersion) external onlyOwner {\r\n        newVersionAddress = newVersion;\r\n    }\r\n    \r\n    function setLoto(address loto) external onlyOwner {\r\n        lotoAddress = loto;\r\n    }\r\n    \r\n    function migrate() external {\r\n        require(msg.sender == owner || msg.sender == newVersionAddress);\r\n        require(newVersionAddress != address(0));\r\n        newVersionAddress.transfer(address(this).balance);\r\n    }   \r\n\r\n    function getPayoutsCount() public view returns (uint256) { return payouts.length; }\r\n}\r\n\r\n// File: contracts/openzeppelin/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/openzeppelin/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/access/roles/DistributorRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract DistributorRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event DistributorAdded(address indexed account);\r\n    event DistributorRemoved(address indexed account);\r\n\r\n    Roles.Role private _distributors;\r\n\r\n    constructor () internal {\r\n        _addDistributor(_msgSender());\r\n    }\r\n\r\n    modifier onlyDistributor() {\r\n        require(isDistributor(_msgSender()), \"DistributorRole: caller does not have the Distributor role\");\r\n        _;\r\n    }\r\n\r\n    function isDistributor(address account) public view returns (bool) {\r\n        return _distributors.has(account);\r\n    }\r\n\r\n    function addDistributor(address account) public onlyDistributor {\r\n        _addDistributor(account);\r\n    }\r\n\r\n    function renounceDistributor() public {\r\n        _removeDistributor(_msgSender());\r\n    }\r\n\r\n    function _addDistributor(address account) internal {\r\n        _distributors.add(account);\r\n        emit DistributorAdded(account);\r\n    }\r\n\r\n    function _removeDistributor(address account) internal {\r\n        _distributors.remove(account);\r\n        emit DistributorRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/token/ERC20/ERC20Distributable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Distributable is Context, IERC20, DistributorRole {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public onlyDistributor returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public onlyDistributor returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public onlyDistributor returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public onlyDistributor returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public onlyDistributor returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/EthexFreeSpins.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\ncontract EthexFreeSpins is Ownable, Context, ERC20Distributable, ERC20Detailed {\r\n    mapping (address => bool) private _migrated;\r\n\t\r\n    address payable public lotoAddress;\r\n    address payable public oldVersionAddress;\r\n    address payable public newVersionAddress;\r\n\r\n    uint256 public Rate;\r\n\r\n    constructor (uint256 rate) public ERC20Detailed(\"EthexFreeSpins\", \"EFS\", 18) { \r\n\t\trequire(rate > 0, \"Rate must be non zero\");\r\n        Rate = rate;\r\n    }\r\n\r\n    function use(address account, uint256 amount) public {\r\n\t\trequire(amount >= Rate, \"Amount must be greater then rate\");\r\n        require(msg.sender == lotoAddress, \"Loto only\");\r\n        if (oldVersionAddress != address(0) && _migrated[account] == false) {\r\n            uint256 totalAmount = EthexFreeSpins(oldVersionAddress).totalBalanceOf(account);\r\n            _mint(account, totalAmount);\r\n            _migrated[account] = true;\r\n        }\r\n        _burn(account, amount);\r\n        lotoAddress.transfer(amount / Rate);\r\n    }\r\n\r\n    function removeDistributor(address account) external onlyOwner {\r\n        _removeDistributor(account);\r\n    }\r\n\r\n    function setLoto(address payable loto) external onlyOwner {\r\n        lotoAddress = loto;\r\n    }\r\n\r\n    function mint(address account) public payable {\r\n        _mint(account, msg.value * Rate);\r\n    }\r\n    \r\n    function setOldVersion(address payable oldVersion) external onlyOwner {\r\n        oldVersionAddress = oldVersion;\r\n    }\r\n    \r\n    function setNewVersion(address payable newVersion) external onlyOwner {\r\n        newVersionAddress = newVersion;\r\n    }\r\n    \r\n    function migrate() external {\r\n        require(msg.sender == owner || msg.sender == newVersionAddress);\r\n        require(newVersionAddress != address(0), \"NewVersionAddress required\");\r\n        EthexFreeSpins(newVersionAddress).payIn.value(address(this).balance)();\r\n    }\r\n    \r\n    function payIn() external payable { }\r\n    \r\n    function totalBalanceOf(address account) public view returns (uint256) {\r\n        uint256 balance = balanceOf(account);\r\n        if (oldVersionAddress != address(0) && _migrated[account] == false)\r\n            return balance + EthexFreeSpins(oldVersionAddress).totalBalanceOf(account);\r\n        return balance;\r\n    }\r\n}\r\n\r\n// File: contracts/uniswap/IUniswapFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract IUniswapFactory {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n// File: contracts/uniswap/IUniswapExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract IUniswapExchange {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n// File: contracts/EthexLoto.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n/**\r\n * (E)t)h)e)x) Loto Contract \r\n *  This smart-contract is the part of Ethex Lottery fair game.\r\n *  See latest version at https://github.com/ethex-bet/ethex-contacts \r\n *  http://ethex.bet\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EthexLoto is Ownable {\r\n    struct Bet {\r\n        uint256 blockNumber;\r\n        uint256 amount;\r\n        uint256 id;\r\n        bytes6 bet;\r\n        address payable gamer;\r\n    }\r\n\r\n    struct Transaction {\r\n        uint256 amount;\r\n        address payable gamer;\r\n    }\r\n\r\n    struct Superprize {\r\n        uint256 amount;\r\n        uint256 id;\r\n    }\r\n    \r\n    mapping(uint256 => Bet) public betQueue;\r\n    uint256 public counters = 0x20000000000000001;\r\n    uint256 public holdBalance;\r\n\r\n    address payable public newVersionAddress;\r\n    address payable public jackpotAddress;\r\n    address payable public houseAddress;\r\n    address payable public superprizeAddress;\r\n    address payable public freeSpinsAddress;\r\n    address payable public uniswapAddress;\r\n\r\n    event TokenBetAdded (\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    );\r\n    \r\n    event PlaceBet (\r\n        uint256 id\r\n    );\r\n\r\n    event PayoutBet (\r\n        uint256 amount,\r\n        uint256 id,\r\n        address gamer\r\n    );\r\n\r\n    event RefundBet (\r\n        uint256 amount,\r\n        uint256 id,\r\n        address gamer\r\n    );\r\n\r\n    uint256 internal constant MIN_BET = 0.01 ether;\r\n    uint256 internal constant PRECISION = 1 ether;\r\n    uint256 internal constant JACKPOT_PERCENT = 10;\r\n    uint256 internal constant HOUSE_EDGE = 10;\r\n\r\n    constructor(address payable jackpot, address payable house, address payable superprize, address payable freeSpins, address payable uniswap) public {\r\n        jackpotAddress = jackpot;\r\n        houseAddress = house;\r\n        superprizeAddress = superprize;\r\n        freeSpinsAddress = freeSpins;\r\n        uniswapAddress = uniswap;\r\n        \r\n        for(uint i = 1; i <= 10; i++)\r\n            betQueue[i] = Bet(1, MIN_BET, 1, 0xffffffffffff, address(0x0));\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function placeTokenBet(address tokenAddress, uint256 betMaxTokenAmount, uint256 betTargetEthAmount, uint256 swapDeadline, bytes6 bet) external {\r\n        require(betTargetEthAmount >= MIN_BET, \"Bet amount should be greater or equal than minimal amount\");\r\n        require(tokenAddress != address(0), \"Token address is required\");\r\n\r\n        if (tokenAddress == freeSpinsAddress)\r\n        {\r\n            placeFreeSpinBet(betTargetEthAmount, bet);\r\n            return;\r\n        }\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        IUniswapFactory uniswapFactory = IUniswapFactory(uniswapAddress);\r\n\r\n        address exchangeAddress = uniswapFactory.getExchange(tokenAddress);\r\n        require(exchangeAddress != address(0), \"Token is not supported\");\r\n\r\n        IUniswapExchange uniswap = IUniswapExchange(exchangeAddress);\r\n\r\n        uint256 tokensSold = uniswap.getTokenToEthOutputPrice(betTargetEthAmount);\r\n        require(betMaxTokenAmount >= tokensSold, \"Swap requires more token then was allowed\");\r\n\r\n        uint256 balance = token.balanceOf(msg.sender);\r\n        require(balance >= tokensSold, \"Not enough tokens\");\r\n\r\n        token.transferFrom(msg.sender, address(this), tokensSold);\r\n        token.approve(exchangeAddress, tokensSold);\r\n\r\n        uint256 converted = uniswap.tokenToEthSwapOutput(betTargetEthAmount, tokensSold, swapDeadline);\r\n        require(converted >= betTargetEthAmount, \"Exchange result is smaller then requested\");\r\n\r\n        placeBet(msg.sender, betTargetEthAmount, bet);\r\n\r\n        emit TokenBetAdded(tokensSold, betTargetEthAmount);\r\n    }\r\n\r\n    function placeFreeSpinBet(uint256 betAmount, bytes6 bet) public {\r\n        require(betAmount >= MIN_BET, \"Bet amount should be greater or equal than minimal amount\");\r\n\r\n        EthexFreeSpins freeSpinsToken = EthexFreeSpins(freeSpinsAddress);\r\n\r\n        uint256 freeSpinAmount = betAmount * freeSpinsToken.Rate();\r\n        uint256 freeSpinBalance = freeSpinsToken.balanceOf(msg.sender);\r\n\r\n        require(freeSpinBalance >= freeSpinAmount, \"Not enough tokens\");\r\n\r\n        freeSpinsToken.use(msg.sender, freeSpinAmount);\r\n        placeBet(msg.sender, betAmount, bet);\r\n\r\n        emit TokenBetAdded(freeSpinAmount, betAmount);\r\n    }\r\n\r\n    function placeBet(bytes6 bet) external payable {\r\n        require(tx.origin == msg.sender);\r\n\r\n        placeBet(msg.sender, msg.value, bet);\r\n    }\r\n\r\n    function placeBet(address payable player, uint256 amount, bytes6 bet) private {\r\n        require(amount >= MIN_BET, \"Bet amount should be greater or equal than minimal amount\");\r\n\r\n        uint256 coefficient;\r\n        uint8 markedCount;\r\n        uint256 holdAmount;\r\n        uint256 jackpotFee = amount * JACKPOT_PERCENT * PRECISION / 100 / PRECISION;\r\n        uint256 houseEdgeFee = amount * HOUSE_EDGE * PRECISION / 100 / PRECISION;\r\n        uint256 betAmount = amount - jackpotFee - houseEdgeFee;\r\n\r\n        (coefficient, markedCount, holdAmount) = getHold(betAmount, bet);\r\n\r\n        require(amount * (100 - JACKPOT_PERCENT - HOUSE_EDGE) * (coefficient * 8 - 15 * markedCount) <= 9000 ether * markedCount);\r\n\r\n        require(\r\n            amount * (800 * coefficient - (JACKPOT_PERCENT + HOUSE_EDGE) * (coefficient * 8 + 15 * markedCount)) <= 1500 * markedCount * (address(this).balance - holdBalance));\r\n\r\n        holdBalance += holdAmount;\r\n        \r\n        emit PlaceBet(enqueue(betAmount, bet, player));\r\n        \r\n        EthexJackpot(jackpotAddress).registerTicket.value(jackpotFee)(markedCount > 1 ? player : address(0x0));\r\n        EthexHouse(houseAddress).payIn.value(houseEdgeFee)();\r\n    }\r\n\r\n    function settleBets() external {\r\n        uint256 betCount;\r\n        uint256 first;\r\n        uint256 last;\r\n        (betCount, first, last) = getCounters();\r\n        if (first > last)\r\n            return;\r\n        uint256 i = 0;\r\n        uint256 length = getLength();\r\n        length = length > 10 ? 10 : length;\r\n        Transaction[] memory transactions = new Transaction[](length);\r\n        Superprize[] memory superprizes = new Superprize[](length);\r\n        uint256 hold = holdBalance;\r\n        uint256 balance = address(this).balance - hold;\r\n\r\n        for(; i < length; i++) {\r\n            if (betQueue[first].blockNumber >= block.number) {\r\n                length = i;\r\n                break;\r\n            }\r\n            else {\r\n                Bet memory bet = dequeue();\r\n                first++;\r\n                uint256 coefficient = 0;\r\n                uint8 markedCount = 0;\r\n                uint256 holdAmount = 0;\r\n                (coefficient, markedCount, holdAmount) = getHold(bet.amount, bet.bet);\r\n                hold -= holdAmount;\r\n                balance += holdAmount;\r\n                if (bet.blockNumber < block.number - 256) {\r\n                    transactions[i] = Transaction(bet.amount, bet.gamer);\r\n                    emit RefundBet(bet.amount, bet.id, bet.gamer);\r\n                    balance -= bet.amount;\r\n                }\r\n                else {\r\n                    bytes32 blockHash = blockhash(bet.blockNumber);\r\n                    coefficient = 0;\r\n                    uint8 matchesCount;\r\n                    bool isSuperPrize = true;\r\n                    for (uint8 j = 0; j < bet.bet.length; j++) {\r\n                        if (bet.bet[j] > 0x13) {\r\n                            isSuperPrize = false;\r\n                            continue;\r\n                        }\r\n                        byte field;\r\n                        if (j % 2 == 0)\r\n                            field = blockHash[29 + j / 2] >> 4;\r\n                        else\r\n                            field = blockHash[29 + j / 2] & 0x0F;\r\n                        if (bet.bet[j] < 0x10) {\r\n                            if (field == bet.bet[j]) {\r\n                                matchesCount++;\r\n                                coefficient += 30;\r\n                            }\r\n                            else\r\n                                isSuperPrize = false;\r\n                            continue;\r\n                        }\r\n                        else\r\n                            isSuperPrize = false;\r\n                        if (bet.bet[j] == 0x10) {\r\n                            if (field > 0x09 && field < 0x10) {\r\n                                matchesCount++;\r\n                                coefficient += 5;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (bet.bet[j] == 0x11) {\r\n                            if (field < 0x0A) {\r\n                                matchesCount++;\r\n                                coefficient += 3;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (bet.bet[j] == 0x12) {\r\n                            if (field < 0x0A && field & 0x01 == 0x01) {\r\n                                matchesCount++;\r\n                                coefficient += 6;\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (bet.bet[j] == 0x13) {\r\n                            if (field < 0x0A && field & 0x01 == 0x0) {\r\n                                matchesCount++;\r\n                                coefficient += 6;\r\n                            }\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    coefficient *= PRECISION * 8;\r\n                        \r\n                    uint256 payoutAmount = bet.amount * coefficient / (PRECISION * 15 * markedCount);\r\n                    transactions[i] = Transaction(payoutAmount, bet.gamer);\r\n                    emit PayoutBet(payoutAmount, bet.id, bet.gamer);\r\n                    balance -= payoutAmount;\r\n\r\n                    if (isSuperPrize == true) {\r\n                        superprizes[i].amount = balance;\r\n                        superprizes[i].id = bet.id;\r\n                        balance = 0;\r\n                    }\r\n                }\r\n                holdBalance = hold;\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < length; i++) {\r\n            if (transactions[i].amount > 0 && !transactions[i].gamer.send(transactions[i].amount))\r\n                (new DeliverFunds).value(transactions[i].amount)(transactions[i].gamer);\r\n            if (superprizes[i].id != 0) {\r\n                EthexSuperprize(superprizeAddress).initSuperprize(transactions[i].gamer, superprizes[i].id);\r\n                EthexJackpot(jackpotAddress).paySuperprize(transactions[i].gamer);\r\n                if (superprizes[i].amount > 0 && !transactions[i].gamer.send(superprizes[i].amount))\r\n                    (new DeliverFunds).value(superprizes[i].amount)(transactions[i].gamer);\r\n            }\r\n        }\r\n    }\r\n\r\n    function migrate() external {\r\n        require(msg.sender == owner || msg.sender == newVersionAddress);\r\n        require(getLength() == 0, \"There are pending bets\");\r\n        require(newVersionAddress != address(0), \"NewVersionAddress required\");\r\n        newVersionAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function setJackpot(address payable jackpot) external onlyOwner {\r\n        jackpotAddress = jackpot;\r\n    }\r\n\r\n    function setSuperprize(address payable superprize) external onlyOwner {\r\n        superprizeAddress = superprize;\r\n    }\r\n    \r\n    function setFreeSpins(address payable freeSpins) external onlyOwner {\r\n        freeSpinsAddress = freeSpins;\r\n    }\r\n\r\n    function setNewVersion(address payable newVersion) external onlyOwner {\r\n        newVersionAddress = newVersion;\r\n    }\r\n\r\n    function setOldVersion(address payable oldAddress) external onlyOwner {\r\n        counters = EthexLoto(oldAddress).counters();\r\n        EthexLoto(oldAddress).migrate();\r\n    }\r\n\r\n    function withdrawToken(IERC20 token, uint amount, address sendTo) external onlyOwner {\r\n        require(token.transfer(sendTo, amount));\r\n    }\r\n\r\n    function length() external view returns (uint256) { return getLength(); }\r\n\r\n    function enqueue(uint256 amount, bytes6 bet, address payable gamer) internal returns (uint256 betCount) {\r\n        uint256 first;\r\n        uint256 last;\r\n        (betCount, first, last) = getCounters();\r\n        last++;\r\n        betCount++;\r\n        betQueue[last] = Bet(block.number, amount, betCount, bet, gamer);\r\n        counters = betCount << 128 | (first << 64 | last);\r\n    }\r\n\r\n    function dequeue() internal returns (Bet memory bet) {\r\n        uint256 betCount;\r\n        uint256 first;\r\n        uint256 last;\r\n        (betCount, first, last) = getCounters();\r\n        require(last >= first);\r\n\r\n        bet = betQueue[first];\r\n\r\n        if (first == last)\r\n            counters = betCount << 128 | 0x20000000000000001;\r\n        else\r\n            counters = betCount << 128 | (first + 1 << 64 | last);\r\n    }\r\n    \r\n    function getLength() internal view returns (uint256) {\r\n        uint256 betCount;\r\n        uint256 first;\r\n        uint256 last;\r\n        (betCount, first, last) = getCounters();\r\n        return 1 + last - first;\r\n    }\r\n    \r\n    function getCounters() internal view returns (uint256 betCount, uint256 first, uint256 last) {\r\n        betCount = counters >> 128;\r\n        first = (counters & 0xffffffffffffffffffffffffffffffff) >> 64;\r\n        last = counters & 0xffffffffffffffff;\r\n    }\r\n    \r\n    function getHold(uint256 amount, bytes6 bet) internal pure returns (uint256 coefficient, uint8 markedCount, uint256 holdAmount) {\r\n        for (uint8 i = 0; i < bet.length; i++) {\r\n            if (bet[i] > 0x13)\r\n                continue;\r\n            markedCount++;\r\n            if (bet[i] < 0x10) {\r\n                coefficient += 30;\r\n                continue;\r\n            }\r\n            if (bet[i] == 0x10) {\r\n                coefficient += 5;\r\n                continue;\r\n            }\r\n            if (bet[i] == 0x11) {\r\n                coefficient += 3;\r\n                continue;\r\n            }\r\n            if (bet[i] == 0x12) {\r\n                coefficient += 6;\r\n                continue;\r\n            }\r\n            if (bet[i] == 0x13) {\r\n                coefficient += 6;\r\n                continue;\r\n            }\r\n        }\r\n        holdAmount = amount * coefficient * 8 / 15 / markedCount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"jackpot\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"house\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"superprize\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"freeSpins\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"uniswap\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"PayoutBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"RefundBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokenBetAdded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes6\",\"name\":\"bet\",\"type\":\"bytes6\"},{\"internalType\":\"address payable\",\"name\":\"gamer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeSpinsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"houseAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVersionAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes6\",\"name\":\"bet\",\"type\":\"bytes6\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes6\",\"name\":\"bet\",\"type\":\"bytes6\"}],\"name\":\"placeFreeSpinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betMaxTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betTargetEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes6\",\"name\":\"bet\",\"type\":\"bytes6\"}],\"name\":\"placeTokenBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"freeSpins\",\"type\":\"address\"}],\"name\":\"setFreeSpins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"jackpot\",\"type\":\"address\"}],\"name\":\"setJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"setNewVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"setOldVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"superprize\",\"type\":\"address\"}],\"name\":\"setSuperprize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settleBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superprizeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthexLoto","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008dc74d28b9821f7f9d0e95ab2d3c66f5276ac474000000000000000000000000a6d93468c1f16f2e1009ec321251f0b3147117b300000000000000000000000043386190b78ed35551a104bd374522725b20fe570000000000000000000000009a5423038bade592e3e35ac04c5ff6813dd3e7df000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://b3c8f7b4e828553f9171aed4a05ab58b21ff259c14d6d763e9f8628992b78b76"}]}