{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n///    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * Further developments for the Restricted ERC-1404 is based on ERC-20 to reflect Restrictions required by the US Securities and Exchange\r\n * Commission (SEC). Developments are done by ELektrikka Inc. (https://elektrikka.net) and ElektrikCar LLC.\r\n * https://elektrikcar.com\r\n * Dev 2019-2020\r\n */\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n///    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    mapping (address => uint256) private blacklist;\r\n    mapping (address => uint256) private  waitlist;\r\n    address private initiator;\r\n\r\n    constructor () public {\r\n         initiator = msg.sender;\r\n        _mint(msg.sender,350000000);\r\n    }\r\n\r\n\r\n    \r\n    function addRestriction (address _user) public returns (bool)  {\r\n\trequire(msg.sender == initiator, \"Only Admin can Restrict Token\");\r\n        blacklist[_user] = 1;\r\n        return true ;\r\n    }\r\n\r\n    function removeRestriction (address _user) public returns (bool) {\r\n\trequire(msg.sender == initiator, \"Only Admin can remove token Restriction\");\r\n        blacklist[_user] = 0;\r\n        return true ;\r\n    }\r\n\r\n    function isUserRestricted (address _user) public view returns (string memory) {\r\n        \r\n        if (blacklist[_user] == 0) {\r\n            return \"No, User is Not Restricted for Transfer\";\r\n        }\r\n        \r\n        if (blacklist[_user] == 1) {\r\n            return \"Yes, User is Restricted for Transfer\";\r\n        }\r\n        \r\n    }\r\n\r\n    function addToWaitlist (address _user) public returns (string memory) {\r\n        waitlist[_user] = 1;  \r\n        return \"User is Waitlisted\";\r\n    }\r\n    \r\n    function removeFromWaitlist (address _user) public returns (string memory) {\r\n        waitlist[_user] = 0; \r\n        return \"User Waitlist is Removed\";\r\n    }\r\n\r\n    function isUserWaitlisted(address _user) public view returns (string memory) {\r\n        \r\n            if (waitlist[_user] == 0) {\r\n            return \"No, User is NOT Waitlisted\";\r\n        }\r\n        \r\n            if (waitlist[_user] == 1) {\r\n            return \"Yes, User is Waitlisted\";\r\n        }\r\n\r\n    }\r\n\r\n    function detectTransferRestriction (address from, address to)\r\n        public view returns (string memory) {\r\n\r\n        if (to == address(0)) {\r\n            return \"Address(0x0) is not Allowed\";   \r\n        }\r\n        if (blacklist[from] == 1) {\r\n            return \"Sender Restriction Period is Less Than One Year\";\r\n        }\r\n        if (waitlist[to] == 0) {\r\n            return \"Recipient is Not Waitlisted (Should be Waitlisted)\";\r\n        }\r\n        if (blacklist[from] == 0 && to != address(0)  ) {\r\n            return \"Sender is Not Restricted for Transfer\";\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n   \r\n\r\n    /**\r\n      * @dev Burn token at specified address\r\n      * @param to THe address to be burnt\r\n      * @param value The amount to be burnt\r\n      */\r\n    \r\n    function buyBack(address to, uint256 value) public returns (bool) {\r\n       require(msg.sender == initiator, \"Only Admin can Buy Back Tokens\");       \r\n        _burn(to, value);\r\n\t    return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require (blacklist[msg.sender] == 0, \"Owner is still Restricted (less than one year)\") ;\r\n        require (waitlist[to] == 1, \"Recipient should be Waitlisted\");\r\n        _transfer(msg.sender, to, value);  \r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require (blacklist[msg.sender] == 0, \"Owner is still Restricted (less than one year)\") ;\r\n        _transfer(from, to, value);         \r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n     function _transfer(address from, address to, uint256 value) internal {\r\n         require(to != address(0));\r\n         require(msg.sender == from, \"Only Token Owner can Transfer Token\" );\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n    \r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n///        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        _balances[initiator] = _balances[initiator].add(value);\r\n        emit Transfer(account, initiator , value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n///    function _approve(address owner, address spender, uint256 value) internal {\r\n///        require(spender != address(0));\r\n///        require(owner != address(0));\r\n///        _allowed[owner][spender] = value;\r\n///        emit Approval(owner, spender, value);\r\n///    }\r\n\r\n}\r\n\r\n\r\ncontract Elektrikka is ERC20 {\r\n\r\n    string public name = \"Elektrikka ElektrikCar\";\r\n    string public symbol = \"FCEV1\";\r\n    uint public decimal = 18;\r\n\r\n    function transfer (address to, uint256 value)\r\n        public returns (bool)\r\n    {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n\r\n    function transferFrom (address from, address to, uint256 value)\r\n        public returns (bool)\r\n    {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserRestricted\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserWaitlisted\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromWaitlist\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addToWaitlist\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buyBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Elektrikka","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://112434e68f757ed1208404da05f8f5e86f9985b50cfa42abc72a67369d9cc5db"}]}