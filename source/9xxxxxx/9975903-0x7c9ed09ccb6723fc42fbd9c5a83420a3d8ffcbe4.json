{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n\r\ncontract Earth {\r\n\r\n    // Look again at that dot. That's here. That's home. That's us.\r\n    // On it everyone you love, everyone you know, everyone you ever\r\n    // heard of, every human being who ever was, lived out their lives.\r\n    // The aggregate of our joy and suffering, thousands of confident\r\n    // religions, ideologies, and economic doctrines, every hunter and\r\n    // forager, every hero and coward, every creator and destroyer of\r\n    // civilization, every king and peasant, every young couple in love,\r\n    // every mother and father, hopeful child, inventor and explorer,\r\n    // every teacher of morals, every corrupt politician, every \"superstar\",\r\n    // every \"supreme leader\", every saint and sinner in the history of\r\n    // our species lived there — on a mote of dust suspended in a sunbeam.\r\n    // — Carl Sagan\r\n\r\n\r\n    constructor() public {}\r\n\r\n    event CreateID(\r\n        bytes32 indexed name,\r\n        address primary,\r\n        address recovery,\r\n        uint64 number\r\n    );\r\n\r\n    event SetPrimary(\r\n        bytes32 indexed name,\r\n        address primary\r\n    );\r\n\r\n    event SetRecovery(\r\n        bytes32 indexed name,\r\n        address recovery\r\n    );\r\n\r\n    event Recover(\r\n        bytes32 indexed name,\r\n        address primary,\r\n        address recovery\r\n    );\r\n\r\n    struct ID {\r\n        address primary;\r\n        address recovery;\r\n        uint64 joined;\r\n        uint64 number;\r\n    }\r\n\r\n\r\n    /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */\r\n    \r\n\r\n    mapping(address => bytes32) public associate;\r\n\r\n    mapping(address => bytes32) public directory;\r\n\r\n    mapping(uint64 => bytes32) public index;\r\n\r\n    mapping(bytes32 => ID) public citizens;\r\n\r\n    uint64 public population;\r\n\r\n\r\n    /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */\r\n\r\n\r\n    function getPrimary(bytes32 name) public view returns (address) {\r\n        return citizens[name].primary;\r\n    }\r\n\r\n    function getRecovery(bytes32 name) public view returns (address) {\r\n        return citizens[name].recovery;\r\n    }\r\n\r\n    function getJoined(bytes32 name) public view returns (uint64) {\r\n        return citizens[name].joined;\r\n    }\r\n\r\n    function getNumber(bytes32 name) public view returns (uint64) {\r\n        return citizens[name].number;\r\n    }\r\n\r\n    function addressAvailable(address addr) public view returns (bool) {\r\n        return associate[addr] == bytes32(0x0);\r\n    }\r\n\r\n    function nameAvailable(bytes32 name) public view returns (bool) {\r\n        return getPrimary(name) == address(0x0);\r\n    }\r\n\r\n    function lookupNumber(uint64 number) public view returns (address, address, uint64, bytes32) {\r\n        bytes32 name = index[number];\r\n        ID storage id = citizens[name];\r\n        return (id.primary, id.recovery, id.joined, name);\r\n    }\r\n\r\n    function authorize() public view returns (bytes32) {\r\n\r\n        // Get the name linked to the sender address\r\n        bytes32 name = directory[msg.sender];\r\n\r\n        // Revert if not linked to any name\r\n        require(name != bytes32(0x0));\r\n\r\n        // Return authorized name\r\n        return name;\r\n    }\r\n\r\n\r\n    /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */\r\n    \r\n\r\n    function createID(bytes32 name, address recovery) public {\r\n        \r\n        // Ensure that name was provided\r\n        require(name != bytes32(0x0));\r\n\r\n        // Ensure that name is available\r\n        require(nameAvailable(name));\r\n\r\n        // Ensure sender has never been linked\r\n        require(addressAvailable(msg.sender));\r\n\r\n        // Primary and recovery cannot be the same\r\n        require(recovery != msg.sender);\r\n\r\n        // If a valid recovery address was provided,\r\n        // check available and associate with name\r\n        if (recovery != address(0x0)) { \r\n            require(addressAvailable(recovery));\r\n            associate[recovery] = name;\r\n        }\r\n\r\n        // Associate sender address with name\r\n        // and create new directory entry\r\n        associate[msg.sender] = name;\r\n        directory[msg.sender] = name;\r\n\r\n        // Increment the population size\r\n        population += 1;\r\n\r\n        // Create the ID model\r\n        citizens[name] = ID({\r\n            primary: msg.sender,\r\n            recovery: recovery,\r\n            joined: uint64(now),\r\n            number: population\r\n        });\r\n\r\n        // Map number to name\r\n        index[population] = name;\r\n\r\n        emit CreateID(name, msg.sender, recovery, population);\r\n    }\r\n\r\n    function setPrimary(bytes32 name, address primary) public {\r\n        \r\n        // Get the ID model\r\n        ID storage id = citizens[name];\r\n\r\n        // Ensure id belongs to sender\r\n        require(id.primary == msg.sender);\r\n\r\n        // Ensure new address provided\r\n        require(primary != address(0x0));\r\n\r\n        // Ensure new address available\r\n        require(addressAvailable(primary));\r\n\r\n        // Associate new address with name\r\n        // and create new directory entry\r\n        associate[primary] = name;\r\n        directory[primary] = name;\r\n\r\n        // Old address no longer points to name\r\n        directory[msg.sender] = bytes32(0x0);\r\n\r\n        // Update ID model\r\n        id.primary = primary;\r\n        \r\n        emit SetPrimary(name, primary);\r\n    }\r\n\r\n    function setRecovery(bytes32 name, address recovery) public {\r\n        \r\n        // Get the ID model\r\n        ID storage id = citizens[name];\r\n        \r\n        // Ensure ID belongs to sender\r\n        require(id.primary == msg.sender);\r\n\r\n        // Ensure recovery address provided\r\n        require(recovery != address(0x0));\r\n        \r\n        // Ensure recovery not already set\r\n        require(id.recovery == address(0x0));\r\n\r\n        // Ensure recovery address available\r\n        require(addressAvailable(recovery));\r\n        \r\n        // Associate recovery with name\r\n        associate[recovery] = name;\r\n        \r\n        // Update ID model\r\n        id.recovery = recovery;\r\n\r\n        emit SetRecovery(name, recovery);\r\n    }\r\n\r\n    function recover(bytes32 name, address newRecovery) public {\r\n\r\n        // Get the ID model\r\n        ID storage id = citizens[name];\r\n\r\n        // Ensure recovery address is sender\r\n        require(id.recovery == msg.sender);\r\n        \r\n        // If a new recovery address was provided\r\n        // and is available, associate with name\r\n        if (newRecovery != address(0x0)) {\r\n            require(addressAvailable(newRecovery));\r\n            associate[newRecovery] = name;\r\n        }\r\n\r\n        // Set new recovery address (may be zero)\r\n        id.recovery = newRecovery;\r\n\r\n        // Existing primary no longer points to anything\r\n        directory[id.primary] = bytes32(0x0);\r\n\r\n        // Current recovery address now points to\r\n        // name, replacing former primary address\r\n        directory[msg.sender] = name;\r\n        id.primary = msg.sender;\r\n\r\n        emit Recover(name, msg.sender, newRecovery);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"nameAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"citizens\",\"outputs\":[{\"name\":\"primary\",\"type\":\"address\"},{\"name\":\"recovery\",\"type\":\"address\"},{\"name\":\"joined\",\"type\":\"uint64\"},{\"name\":\"number\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"directory\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint64\"}],\"name\":\"lookupNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"newRecovery\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getRecovery\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"primary\",\"type\":\"address\"}],\"name\":\"setPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"population\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorize\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"recovery\",\"type\":\"address\"}],\"name\":\"setRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addressAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"associate\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getJoined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"index\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getPrimary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"recovery\",\"type\":\"address\"}],\"name\":\"createID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"primary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recovery\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint64\"}],\"name\":\"CreateID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"primary\",\"type\":\"address\"}],\"name\":\"SetPrimary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"recovery\",\"type\":\"address\"}],\"name\":\"SetRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"primary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recovery\",\"type\":\"address\"}],\"name\":\"Recover\",\"type\":\"event\"}]","ContractName":"Earth","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2abbd6de649cfe215b49e316a223e26e3a11cc3f9a7aa6694cf1e04aca7d3c6e"}]}