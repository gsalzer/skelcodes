{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\ncontract PonzyGame{\r\n    mapping(address => Node) public nodes;\r\n    uint[] prices = [1 ether, 2 ether, 7 ether, 29 ether];\r\n    address payable public owner;\r\n    event LevelUp(address indexed user, address indexed seller, uint8 level);\r\n    event Joined(address indexed user, address indexed parent);\r\n    event SaleSkiped(address indexed seller, address user);\r\n    struct Node {\r\n        uint8 level;\r\n        address payable parent;\r\n        address payable descendant1;\r\n        address payable descendant2;\r\n        address payable descendant3;\r\n    }\r\n    constructor(address payable descendant1, address payable descendant2, address payable descendant3) public {\r\n        owner = msg.sender;\r\n        nodes[owner]         = Node(4, owner, descendant1,         descendant2,         descendant3         );   \r\n        nodes[descendant1]   = Node(4, owner, address(uint160(0)), address(uint160(0)), address(uint160(0)) );   \r\n        nodes[descendant2]   = Node(4, owner, address(uint160(0)), address(uint160(0)), address(uint160(0)) );   \r\n        nodes[descendant3]   = Node(4, owner, address(uint160(0)), address(uint160(0)), address(uint160(0)) );   \r\n    }\r\n    function joinTo(address payable _parent) payable public{\r\n        require(msg.value == prices[0],\"wrong ether amount\");\r\n        require(nodes[msg.sender].level == 0, \"already connected\");\r\n        address payable parent = findAvailableNode(_parent);\r\n        Node storage node = nodes[parent];\r\n        if(node.descendant1 == address(0)){\r\n            node.descendant1 = msg.sender;\r\n        } else if(node.descendant2 == address(0)) {\r\n            node.descendant2 = msg.sender;\r\n        } else if(node.descendant3 == address(0)) {\r\n            node.descendant3 = msg.sender;\r\n        } else revert(\"there are no empty descendant\");\r\n        parent.transfer(1e18);\r\n        nodes[msg.sender] = Node(1, parent, address(0),address(0),address(0));\r\n    \r\n        emit Joined(msg.sender, parent);\r\n    }\r\n    function findAvailableNode(address payable _parent) public view returns (address payable){\r\n        \r\n        address payable[] memory queue = new address payable[](13);\r\n        uint current = 0;\r\n        uint last = 1;\r\n        if(nodes[_parent].level == 0) queue[0] = owner;\r\n        else queue[0] = _parent;\r\n        while(true){\r\n            address payable currentAddress = queue[current++];\r\n            Node memory currentNode = nodes[currentAddress];\r\n            require(currentNode.level > 0, \"tree crashed\");\r\n            if(currentNode.descendant1 == address(0)) return currentAddress;\r\n            if(currentNode.descendant2 == address(0)) return currentAddress;\r\n            if(currentNode.descendant3 == address(0)) return currentAddress;\r\n            \r\n            if(queue.length - last < 3){\r\n                address payable[] memory tmp = new address payable[](queue.length * 3 + 1);\r\n                for(uint i = current; i < last;i++)\r\n                    tmp[i - current] = queue[i]; \r\n                queue = tmp;\r\n                last -=current;\r\n                current = 0;\r\n            }\r\n            queue[last++] = currentNode.descendant1;\r\n            queue[last++] = currentNode.descendant2;\r\n            queue[last++] = currentNode.descendant3;\r\n        }\r\n    }\r\n    function levelUp() payable public {\r\n        Node storage it = nodes[msg.sender];\r\n        require(it.level > 0, \"you are not in PonzyGame\");\r\n        require(prices[it.level] > 0, \"last level\");\r\n        require(msg.value == prices[it.level], \"wrong ether amount\");\r\n        address payable parent = it.parent;\r\n        for(uint i = 0; i < it.level; i++)\r\n            parent = nodes[parent].parent;\r\n        while(nodes[parent].level < it.level + 1){\r\n            emit SaleSkiped(parent, msg.sender);\r\n            parent = nodes[parent].parent;\r\n        }\r\n        parent.transfer(prices[it.level]);\r\n        it.level++;\r\n        emit LevelUp(msg.sender,parent,it.level);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"descendant1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"descendant2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"descendant3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SaleSkiped\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"findAvailableNode\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"joinTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"levelUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"descendant1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"descendant2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"descendant3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PonzyGame","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000073645a5ab460b88740b5a941bfbaed129d26a9fd0000000000000000000000005c44ab7abf4e3c3545a6e34cf93fa95b575e40c4000000000000000000000000d5e5a8fe4f83d36813bac14364eb13a8daebadb9","Library":"","LicenseType":"None","SwarmSource":"bzzr://0515ddbb499708d5e3691cf69088ea2ed3e3dc68aa721f10fc23a5cc8b2f2527"}]}