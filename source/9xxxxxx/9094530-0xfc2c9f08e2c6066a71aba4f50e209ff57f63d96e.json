{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\n\r\ncontract ERC20{\r\n    function transfer(address to, uint value) public;\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title Main contract to staking processes\r\n/// @author Larry J. Smith\r\n/// @notice users can call public functions to interactive with staking smart contract including stake, withdraw, refund\r\n/// @dev Larry is one of the core technical engineers\r\ncontract Staking{\r\n\r\n    address payable userAddress;\r\n    uint totalStakingEtherAmt;\r\n    uint totalStakingTetherAmt;\r\n    uint totalWithdrawEtherAmt;\r\n    uint totalWithdrawTetherAmt;\r\n    bool isValid;\r\n    \r\n    address tether_0x_address = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    string  identifier = \"0x77e946e40eb9f635802c42fc2b54a13095dd696d\";\r\n    address public owner;\r\n    ERC20 tetherContract;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"invalid sender\");\r\n        _;\r\n    }\r\n\r\n    event EtherStaking(address indexed addr, uint amount);\r\n    event TetherStaking(address indexed addr, uint amount);\r\n    event Withdrawal(address indexed addr, uint indexed _type , uint amount);\r\n    event Refund(address indexed addr);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        tetherContract =  ERC20(tether_0x_address);\r\n    }\r\n\r\n    function () external payable{\r\n        revert();\r\n    }\r\n\r\n    function stakeEther() public payable returns(bool){\r\n        address payable addr = msg.sender;\r\n        uint amount = msg.value;\r\n        require(amount > 0, \"invalid amount\");\r\n        if(isValid){\r\n            require(msg.sender == userAddress, \"invalid sender\");\r\n            totalStakingEtherAmt += amount;\r\n        }else{\r\n            userAddress = addr;\r\n            totalStakingEtherAmt = amount;\r\n            totalStakingTetherAmt = 0;\r\n            totalWithdrawEtherAmt = 0;\r\n            totalWithdrawTetherAmt = 0;\r\n            isValid = true;\r\n        }\r\n        emit EtherStaking(addr, amount);\r\n        return true;\r\n    }\r\n\r\n    function stakeTether(uint amount) public returns(bool){\r\n        require(amount > 0, \"invalid amount\");\r\n        tetherContract.transferFrom(msg.sender,address(this),amount);\r\n        if(isValid){\r\n            require(msg.sender == userAddress, \"invalid sender\");\r\n            totalStakingTetherAmt += amount;\r\n            \r\n        }else{\r\n            userAddress = msg.sender;\r\n            totalStakingEtherAmt = 0;\r\n            totalStakingTetherAmt = amount;\r\n            totalWithdrawEtherAmt = 0;\r\n            totalWithdrawTetherAmt = 0;\r\n            isValid = true;\r\n        }\r\n        emit TetherStaking(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint amount,uint _type) public returns(bool){\r\n        address addr = msg.sender;\r\n        require(amount > 0,\"invalid amount\");\r\n        require(addr == userAddress, \"invalid sender\");\r\n\r\n        if(_type == 1){\r\n            require(totalStakingEtherAmt - totalWithdrawEtherAmt >= amount, \"not enough balance\");\r\n            totalWithdrawEtherAmt += amount;\r\n            userAddress.transfer(amount);\r\n            emit Withdrawal(addr, _type, amount);\r\n            return true;\r\n        }\r\n        if(_type == 2){\r\n            require(totalStakingTetherAmt - totalWithdrawTetherAmt >= amount, \"not enough balance\");\r\n            totalWithdrawTetherAmt += amount;\r\n            tetherContract.transfer(msg.sender, amount);\r\n            emit Withdrawal(addr, _type, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    function refund() public onlyOwner returns(bool){\r\n        if(isValid){\r\n            uint etherAmt = totalStakingEtherAmt - totalWithdrawEtherAmt;\r\n            uint tetherAmt = totalStakingTetherAmt - totalWithdrawTetherAmt;\r\n\r\n            if(etherAmt>0){\r\n                userAddress.transfer(etherAmt);\r\n                totalWithdrawEtherAmt += etherAmt;\r\n            }\r\n            if(tetherAmt>0){\r\n                tetherContract.transfer(userAddress, tetherAmt);\r\n                totalWithdrawTetherAmt +=tetherAmt;\r\n            }\r\n            emit Refund(userAddress);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getBalanceOf() public view returns(uint,uint,uint,uint,uint,uint){\r\n        return (totalStakingEtherAmt - totalWithdrawEtherAmt, totalStakingTetherAmt - totalWithdrawTetherAmt, totalStakingEtherAmt, totalStakingTetherAmt, totalWithdrawEtherAmt, totalWithdrawTetherAmt);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTether\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TetherStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Refund\",\"type\":\"event\"}]","ContractName":"Staking","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://d8f2573c10834d70db3052c0405e0aa6d734bb1e07ede865780e7413a13cd999"}]}