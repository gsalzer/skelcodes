{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ncontract HEX {\r\n    function xfLobbyEnter(address referrerAddr)\r\n    external\r\n    payable;\r\n\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n    external;\r\n\r\n    function xfLobbyPendingDays(address memberAddr)\r\n    external\r\n    view\r\n    returns (uint256[2] memory words);\r\n\r\n    function balanceOf (address account)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function transfer (address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    function currentDay ()\r\n    external\r\n    view\r\n    returns (uint256);\r\n} // TODO: Windows file separator\r\n\r\ncontract AutoLobby {\r\n\r\n    event UserJoined(\r\n        uint40 timestamp,\r\n        address indexed memberAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    event LobbyJoined(\r\n        uint40 timestamp,\r\n        uint16 day,\r\n        uint256 amount\r\n    );\r\n\r\n    event LobbyLeft(\r\n        uint40 timestamp,\r\n        uint16 day,\r\n        uint256 hearts\r\n    );\r\n\r\n    event MissedLobby(\r\n        uint40 timestamp,\r\n        uint16 day\r\n    );\r\n\r\n    struct UserState {\r\n        uint16 firstDayJoined;\r\n        uint16 nextPendingDay;\r\n        uint256 todayAmount;\r\n        uint256 nextDayAmount;\r\n    }\r\n\r\n    struct ContractStateCache {\r\n        uint256 currentDay;\r\n        uint256 lastDayJoined;\r\n        uint256 nextPendingDay;\r\n        uint256 todayAmount;\r\n    }\r\n\r\n    struct ContractState {\r\n        uint16 _lastDayJoined;\r\n        uint16 _nextPendingDay;\r\n        uint256 _todayAmount;\r\n        uint256 _nextDayAmount;\r\n    }\r\n\r\n    struct ParticipationState {\r\n        uint256 poolSize;\r\n        uint256 heartsReceived;\r\n    }\r\n\r\n    HEX internal hx = HEX(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39);\r\n\r\n    uint16 internal constant LAUNCH_PHASE_DAYS = 350;\r\n    uint16 internal constant LAUNCH_PHASE_END_DAY = 351;\r\n    uint256 internal constant XF_LOBBY_DAY_WORDS = (LAUNCH_PHASE_END_DAY + 255) >> 8;\r\n\r\n    uint256 public HEX_LAUNCH_TIME = 1575331200;\r\n\r\n    address payable internal constant REF_ADDRESS = 0xD30BC4859A79852157211E6db19dE159673a67E2;\r\n\r\n    ContractState public state;\r\n\r\n    mapping(address => UserState) public userData;\r\n    address[] public users;\r\n\r\n    mapping(uint256 => ParticipationState) public dailyData;\r\n\r\n    constructor ()\r\n    public\r\n    {\r\n        state._nextPendingDay = 1;\r\n    }\r\n\r\n    function nudge ()\r\n    external\r\n    {\r\n        ContractStateCache memory currentState;\r\n        ContractStateCache memory snapshot;\r\n        _loadState(currentState, snapshot);\r\n\r\n        _nudge(currentState);\r\n\r\n        _syncState(currentState, snapshot);\r\n    }\r\n\r\n    function _nudge (ContractStateCache memory currentState)\r\n    internal\r\n    {\r\n        if(currentState.lastDayJoined < currentState.currentDay){\r\n            _joinLobby(currentState);\r\n        }\r\n    }\r\n\r\n    function depositEth ()\r\n    public\r\n    payable\r\n    returns (uint256)\r\n    {\r\n        require(msg.value > 0, \"Deposited ETH must be greater than 0\");\r\n\r\n        ContractStateCache memory currentState;\r\n        ContractStateCache memory snapshot;\r\n        _loadState(currentState, snapshot);\r\n\r\n        require(currentState.currentDay < LAUNCH_PHASE_END_DAY, \"Launch phase is over\");\r\n        _nudge(currentState);\r\n        uint256 catchUpHearts = _handleWithdrawal(currentState, currentState.currentDay);\r\n        _handleDeposit(currentState);\r\n\r\n        emit UserJoined(\r\n            uint40(block.timestamp),\r\n            msg.sender,\r\n            msg.value\r\n        );\r\n\r\n        _syncState(currentState, snapshot);\r\n\r\n        return catchUpHearts;\r\n    }\r\n\r\n    function withdrawHex (uint256 beforeDay)\r\n    external\r\n    returns (uint256)\r\n    {\r\n        ContractStateCache memory currentState;\r\n        ContractStateCache memory snapshot;\r\n        _loadState(currentState, snapshot);\r\n\r\n        _nudge(currentState);\r\n        uint256 _beforeDay = beforeDay;\r\n        if(beforeDay == 0 || beforeDay > currentState.currentDay){\r\n            _beforeDay = currentState.currentDay;\r\n        }\r\n\r\n       uint256 amount = _handleWithdrawal(currentState, _beforeDay);\r\n\r\n        _syncState(currentState, snapshot);\r\n\r\n        return amount;\r\n    }\r\n\r\n    function ()\r\n    external\r\n    payable\r\n    {\r\n        depositEth();\r\n    }\r\n\r\n    function flush ()\r\n    external\r\n    {\r\n        require((LAUNCH_PHASE_END_DAY + 90) < _getHexContractDay(), \"Flush is only allowed after 90 days post launch phase\");\r\n        if(address(this).balance != 0){\r\n            REF_ADDRESS.transfer(address(this).balance);\r\n        }\r\n        uint256 hexBalance = hx.balanceOf(address(this));\r\n        if(hexBalance > 0){\r\n            hx.transfer(REF_ADDRESS, hexBalance);\r\n        }\r\n    }\r\n\r\n    function getHexContractDay()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _getHexContractDay();\r\n    }\r\n\r\n    function getUsers()\r\n    public\r\n    view\r\n    returns(uint256) {\r\n        return users.length;\r\n    }\r\n\r\n    function getUserId(uint256 idx)\r\n    public\r\n    view\r\n    returns(address) {\r\n        return users[idx];\r\n    }\r\n\r\n    function getUserData(address addr)\r\n    public\r\n    view\r\n    returns(uint16,\r\n        uint16,\r\n        uint256,\r\n        uint256) {\r\n        return (userData[addr].firstDayJoined,\r\n        userData[addr].nextPendingDay,\r\n        userData[addr].todayAmount,\r\n        userData[addr].nextDayAmount);\r\n    }\r\n\r\n    function _joinLobby (ContractStateCache memory currentState)\r\n    private\r\n    {\r\n        if(currentState.lastDayJoined < currentState.currentDay){\r\n            uint256 budget = currentState.todayAmount;\r\n            if(budget > 0){\r\n                uint256 remainingFraction = _calcDailyFractionRemaining(budget, currentState.currentDay);\r\n                uint256 contribution = budget - remainingFraction;\r\n                require(contribution > 0, \"daily contribution must be greater than 0\");\r\n                hx.xfLobbyEnter.value(contribution)(REF_ADDRESS);\r\n                currentState.lastDayJoined = currentState.currentDay;\r\n                dailyData[currentState.currentDay] = ParticipationState(budget, 0);\r\n                currentState.todayAmount -= contribution;\r\n                emit LobbyJoined(\r\n                    uint40(block.timestamp),\r\n                    uint16(currentState.currentDay),\r\n                    contribution);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _handleWithdrawal(ContractStateCache memory currentState, uint256 beforeDay)\r\n    private\r\n    returns (uint256)\r\n    {\r\n        _leaveLobbies(currentState, beforeDay);\r\n        return _distributeShare(beforeDay);\r\n    }\r\n\r\n    function _handleDeposit(ContractStateCache memory currentState)\r\n    private\r\n    {\r\n        UserState storage user = userData[msg.sender];\r\n        // new user\r\n        if(user.firstDayJoined == 0){\r\n            uint16 nextDay = uint16(currentState.currentDay + 1);\r\n            user.firstDayJoined = nextDay;\r\n            user.nextPendingDay = nextDay;\r\n            user.todayAmount += msg.value;\r\n            users.push(msg.sender) -1;\r\n        } else {\r\n            user.nextDayAmount += msg.value;\r\n        }\r\n\r\n        currentState.todayAmount += msg.value;\r\n    }\r\n\r\n    function _leaveLobbies(ContractStateCache memory currentState, uint256 beforeDay)\r\n    private\r\n    {\r\n        uint256 newBalance = hx.balanceOf(address(this));\r\n        uint256 oldBalance;\r\n        if(currentState.nextPendingDay < beforeDay){\r\n            uint256[XF_LOBBY_DAY_WORDS] memory joinedDays = hx.xfLobbyPendingDays(address(this));\r\n            while(currentState.nextPendingDay < beforeDay){\r\n                if( (joinedDays[currentState.nextPendingDay >> 8] & (1 << (currentState.nextPendingDay & 255))) >>\r\n                    (currentState.nextPendingDay & 255) == 1){\r\n                    hx.xfLobbyExit(currentState.nextPendingDay, 0);\r\n                    oldBalance = newBalance;\r\n                    newBalance = hx.balanceOf(address(this));\r\n                    dailyData[currentState.nextPendingDay].heartsReceived = newBalance - oldBalance;\r\n                    require(dailyData[currentState.nextPendingDay].heartsReceived > 0, \"Hearts received for a lobby is 0\");\r\n                    emit LobbyLeft(uint40(block.timestamp),\r\n                        uint16(currentState.nextPendingDay),\r\n                        dailyData[currentState.nextPendingDay].heartsReceived);\r\n                } else {\r\n                    emit MissedLobby(uint40(block.timestamp),\r\n                     uint16(currentState.nextPendingDay));\r\n                }\r\n                currentState.nextPendingDay++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _distributeShare(uint256 endDay)\r\n    private\r\n    returns (uint256)\r\n    {\r\n        uint256 totalShare = 0;\r\n\r\n        UserState storage user = userData[msg.sender];\r\n\r\n        if(user.firstDayJoined > 0 && user.firstDayJoined < endDay){\r\n            if(user.nextPendingDay < user.firstDayJoined){\r\n                user.nextPendingDay = user.firstDayJoined;\r\n            }\r\n            uint256 userContribution;\r\n            while(user.nextPendingDay < endDay){\r\n                if(dailyData[user.nextPendingDay].poolSize > 0 && dailyData[user.nextPendingDay].heartsReceived > 0){\r\n                    require(dailyData[user.nextPendingDay].heartsReceived > 0, \"Hearts received must be > 0, leave lobby for day\");\r\n\r\n                    userContribution = user.todayAmount - _calcDailyFractionRemaining(user.todayAmount, user.nextPendingDay);\r\n                    totalShare += user.todayAmount *\r\n                        dailyData[user.nextPendingDay].heartsReceived /\r\n                        dailyData[user.nextPendingDay].poolSize;\r\n                    user.todayAmount -= userContribution;\r\n                    if(user.nextDayAmount > 0){\r\n                        user.todayAmount += user.nextDayAmount;\r\n                        user.nextDayAmount = 0;\r\n                    }\r\n                }\r\n                user.nextPendingDay++;\r\n            }\r\n            if(totalShare > 0){\r\n                require(hx.transfer(msg.sender, totalShare), strConcat(\"Failed to transfer \",uint2str(totalShare),\", insufficient balance\"));\r\n            }\r\n        }\r\n\r\n        return totalShare;\r\n    }\r\n\r\n    function _getHexContractDay()\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(HEX_LAUNCH_TIME < block.timestamp, \"AutoLobby: Launch time not before current block\");\r\n        return (block.timestamp - HEX_LAUNCH_TIME) / 1 days;\r\n    }\r\n\r\n    function _calcDailyFractionRemaining(uint256 amount, uint256 day)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if(day >= LAUNCH_PHASE_DAYS){\r\n            return 0;\r\n        }\r\n        return amount * (LAUNCH_PHASE_END_DAY - day - 1) / (LAUNCH_PHASE_END_DAY - day);\r\n    }\r\n\r\n    function _calcDailyFractionRemainingAgg(uint256 amount, uint256 day)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if(day >= LAUNCH_PHASE_DAYS){\r\n            return 0;\r\n        } else if( amount >= (LAUNCH_PHASE_END_DAY - day)) {\r\n            return amount * (LAUNCH_PHASE_END_DAY - day - 1) / (LAUNCH_PHASE_END_DAY - day);\r\n        } else {\r\n            return amount / (LAUNCH_PHASE_END_DAY - day) * (LAUNCH_PHASE_END_DAY - day - 1) ;\r\n        }\r\n    }\r\n\r\n    function _loadState(ContractStateCache memory c, ContractStateCache memory snapshot)\r\n    internal\r\n    view\r\n    {\r\n        c.currentDay = _getHexContractDay();\r\n        c.lastDayJoined = state._lastDayJoined;\r\n        c.nextPendingDay = state._nextPendingDay;\r\n        c.todayAmount = state._todayAmount;\r\n        _takeSnapshot(c, snapshot);\r\n    }\r\n\r\n    function _takeSnapshot(ContractStateCache memory c, ContractStateCache memory snapshot)\r\n    internal\r\n    pure\r\n    {\r\n        snapshot.currentDay = c.currentDay;\r\n        snapshot.lastDayJoined = c.lastDayJoined;\r\n        snapshot.nextPendingDay = c.nextPendingDay;\r\n        snapshot.todayAmount = c.todayAmount;\r\n    }\r\n\r\n    function _syncState(ContractStateCache memory c, ContractStateCache memory snapshot)\r\n    internal\r\n    {\r\n        if(snapshot.currentDay != c.currentDay ||\r\n        snapshot.lastDayJoined != c.lastDayJoined ||\r\n        snapshot.nextPendingDay != c.nextPendingDay ||\r\n        snapshot.todayAmount != c.todayAmount)\r\n        {\r\n            _saveState(c);\r\n        }\r\n    }\r\n\r\n    function _saveState(ContractStateCache memory c)\r\n    internal\r\n    {\r\n        state._lastDayJoined = uint16(c.lastDayJoined);\r\n        state._nextPendingDay = uint16(c.nextPendingDay);\r\n        state._todayAmount = c.todayAmount;\r\n    }\r\n\r\n    function uint2str(uint i)\r\n    internal\r\n    pure returns (string memory _uintAsString)\r\n    {\r\n        uint _i = i;\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c\r\n    , string memory _d, string memory _e)\r\n    private\r\n    pure\r\n    returns (string memory){\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d)\r\n    private\r\n    pure\r\n    returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c)\r\n    private\r\n    pure\r\n    returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b)\r\n    private\r\n    pure\r\n    returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LobbyJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hearts\",\"type\":\"uint256\"}],\"name\":\"LobbyLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"day\",\"type\":\"uint16\"}],\"name\":\"MissedLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserJoined\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"HEX_LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heartsReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"flush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHexContractDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nudge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"_lastDayJoined\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_nextPendingDay\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_todayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextDayAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"firstDayJoined\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nextPendingDay\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"todayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextDayAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeDay\",\"type\":\"uint256\"}],\"name\":\"withdrawHex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AutoLobby","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f563c296fe56375297d0a07b087ea2a8344d0b113fc0705780489cb9a2b8b855"}]}