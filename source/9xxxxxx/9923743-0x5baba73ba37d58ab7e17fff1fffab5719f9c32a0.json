{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/Context.sol\r\n\r\n// From package @openzeppelin/contracts@2.4.0\r\npragma solidity 0.5.8;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n// From package @openzeppelin/contracts@2.4.0\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Registry.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Registry is Ownable {\r\n    // ------\r\n    // STATE\r\n    // ------\r\n\r\n    struct Member {\r\n        uint256 challengeID;\r\n        uint256 memberStartTime; // Used for voting: voteWeight = sqrt(now - memberStartTime)\r\n    }\r\n\r\n    // Note, this address is used to map to the owner and delegates in the ERC-1056 registry\r\n    mapping(address => Member) public members;\r\n\r\n    // -----------------\r\n    // GETTER FUNCTIONS\r\n    // -----------------\r\n\r\n    /**\r\n    @dev                Get the challenge ID of a Member. If no challenge exists it returns 0\r\n    @param _member      The member being checked\r\n    @return             The challengeID\r\n    */\r\n    function getChallengeID(address _member) external view returns (uint256) {\r\n        require(_member != address(0), \"Can't check 0 address\");\r\n        Member memory member = members[_member];\r\n        return member.challengeID;\r\n    }\r\n\r\n    /**\r\n    @dev                Get the start time of a Member. If no time exists it returns 0\r\n    @param _member      The member being checked\r\n    @return             The start time\r\n    */\r\n    function getMemberStartTime(address _member) external view returns (uint256) {\r\n        require(_member != address(0), \"Can't check 0 address\");\r\n        Member memory member = members[_member];\r\n        return member.memberStartTime;\r\n    }\r\n\r\n    // -----------------\r\n    // SETTER FUNCTIONS\r\n    // -----------------\r\n\r\n    /**\r\n    @dev                Set a member in the Registry. Only Everest can call this function.\r\n    @param _member      The member being added\r\n    @return             The start time of the member\r\n    */\r\n    function setMember(address _member) external onlyOwner returns (uint256) {\r\n        require(_member != address(0), \"Can't check 0 address\");\r\n        Member memory member = Member({\r\n            challengeID: 0,\r\n            /* solium-disable-next-line security/no-block-members*/\r\n            memberStartTime: now\r\n        });\r\n        members[_member] = member;\r\n\r\n        /* solium-disable-next-line security/no-block-members*/\r\n        return now;\r\n    }\r\n\r\n    /**\r\n    @dev                        Edit the challengeID. Can be used to set a challenge or remove a\r\n                                challenge for a member. Only Everest can call.\r\n    @param _member              The member being checked\r\n    @param _newChallengeID      The new challenge ID. Pass in 0 to remove a challenge.\r\n    */\r\n    function editChallengeID(address _member, uint256 _newChallengeID) external onlyOwner {\r\n        require(_member != address(0), \"Can't check 0 address\");\r\n        Member storage member = members[_member];\r\n        member.challengeID = _newChallengeID;\r\n    }\r\n\r\n    /**\r\n    @dev                Remove a member. Only Everest can call\r\n    @param _member      The member being removed\r\n    */\r\n    function deleteMember(address _member) external onlyOwner {\r\n        require(_member != address(0), \"Can't check 0 address\");\r\n        delete members[_member];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"},{\"name\":\"_newChallengeID\",\"type\":\"uint256\"}],\"name\":\"editChallengeID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"challengeID\",\"type\":\"uint256\"},{\"name\":\"memberStartTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"deleteMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getChallengeID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getMemberStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"setMember\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Registry","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://531ce42e51ec8f869b5adc12f6238d5a03c73613bfe08266e92f641e4a390f0a"}]}