{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a); \r\n    return a - b; \r\n  } \r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    uint256 c = a + b; assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender], \"Error\"); \r\n    // SafeMath.sub will throw if there is not enough balance. \r\n    balances[msg.sender] = balances[msg.sender].sub(_value); \r\n    balances[_to] = balances[_to].add(_value); \r\n    emit Transfer(msg.sender, _to, _value); \r\n    return true; \r\n  } \r\n\r\n  /** \r\n   * @dev Gets the balance of the specified address. \r\n   * @param _owner The address to query the the balance of. \r\n   * @return An uint256 representing the amount owned by the passed address. \r\n   */ \r\n  function balanceOf(address _owner) public view returns (uint256 balance) { \r\n    return balances[_owner]; \r\n  } \r\n} \r\n\r\n/** \r\n * @title Standard ERC20 token \r\n * \r\n * @dev Implementation of the basic standard token. \r\n * @dev https://github.com/ethereum/EIPs/issues/20 \r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol \r\n */ \r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]); \r\n    balances[_from] = balances[_from].sub(_value); \r\n    balances[_to] = balances[_to].add(_value); \r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \r\n    emit Transfer(_from, _to, _value); \r\n    return true; \r\n  } \r\n\r\n /** \r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. \r\n  * \r\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old \r\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this \r\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: \r\n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \r\n  * @param _spender The address which will spend the funds. \r\n  * @param _value The amount of tokens to be spent. \r\n  */ \r\n  function approve(address _spender, uint256 _value) public returns (bool) { \r\n    allowed[msg.sender][_spender] = _value; \r\n    emit Approval(msg.sender, _spender, _value); \r\n    return true; \r\n  }\r\n\r\n /** \r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender. \r\n  * @param _owner address The address which owns the funds. \r\n  * @param _spender address The address which will spend the funds. \r\n  * @return A uint256 specifying the amount of tokens still available for the spender. \r\n  */ \r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \r\n    return allowed[_owner][_spender]; \r\n  } \r\n\r\n /** \r\n  * approve should be called when allowed[_spender] == 0. To increment \r\n  * allowed value is better to use this function to avoid 2 calls (and wait until \r\n  * the first transaction is mined) * From MonolithDAO Token.sol \r\n  */ \r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \r\n    return true; \r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender]; \r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function () external payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract MiningExpertToken is StandardToken, Ownable {\r\n    \r\n    string public constant name = \"Mining Expert Token\";\r\n    \r\n    string public constant symbol = \"MEXP\";\r\n    \r\n    uint32 public constant decimals = 18;\r\n    \r\n    uint256 public constant INITIAL_SUPPLY = 200000000*10**18; //200 billion token MEXP\r\n    \r\n    constructor () public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n    }\r\n    \r\n}\r\n\r\n//The contract has an address 0x0000009d48b12597675a02fca9c317eadef152cb, it is generated before the contract is uploaded to the network, all other addresses have nothing to do with us\r\ncontract MiningExpert is MiningExpertToken{\r\n   using SafeMath for uint;\r\n   \r\n   MiningExpertToken public token = new MiningExpertToken();\r\n    // public information about the contribution of a specific investor\r\n    mapping (address => uint) public contributor_balance;\r\n    // public information last payment time\r\n    mapping (address => uint) public contributor_payout_time;\r\n    // public information how much the user received money\r\n    mapping(address => uint) public contributor_payout;\r\n    // public information how much the user received tokens\r\n    mapping(address => uint) public contributor_token_payout;\r\n    // public information how much the user received bonus MEXP\r\n    mapping(address => bool) public contributor_bonus;\r\n    // public information how much the user received bonus MEXP\r\n    mapping(address => uint) public contributor_ETH_bonus;\r\n    \r\n    // all deposits below the minimum will be sent directly to the developer's wallet and will\r\n    // be used for the development of the project\r\n    uint constant  MINIMAL_DEPOSIT = 0.01 ether;\r\n    //Token bonus 200%\r\n    uint constant  BONUS_COEFFICIENT = 2;\r\n    //bonus 2.2% for a deposit above 10 ETH\r\n    uint constant  BONUS_ETH = 22;\r\n    //bonus cost 0.01 ether\r\n    uint TOKEN_COST = 100;\r\n    // Time after which you can request the next payment\r\n    uint constant  PAYOUT_TIME = 1 hours;\r\n    // 0.0925 % per hour\r\n    uint constant  HOURLY_PERCENT = 925;\r\n    //commission 10%\r\n    uint constant PROJECT_COMMISSION = 10;\r\n    // developer wallet for advertising and server payments\r\n    address payable constant DEVELOPER_WALLET  = 0x100000b152A8dA7a8FCb938D7113952BfbB99705;\r\n    // payment wallet\r\n    address payable constant PAYMENT_WALLET = 0x2000001068A0F8A100A2A3a6D256A069A074B4E2;\r\n    \r\n    event NewContributor(address indexed contributor, uint value, uint time);\r\n    event PayDividends(address indexed contributor, uint value, uint time);\r\n    event PayTokenDividends(address indexed contributor, uint value, uint time);\r\n    event NewContribution(address indexed contributor, uint value,uint time);\r\n    event PayBonus(address indexed contributor, uint value, uint time);\r\n    event Refund(address indexed contributor, uint value, uint time);\r\n    event Reinvest(address indexed contributor, uint value, uint time);\r\n    event TokenRefund(address indexed contributor, uint value, uint time);\r\n\r\n    uint public total_deposits;\r\n    uint public number_contributors;\r\n    uint public last_payout;\r\n    uint public total_payout;\r\n    uint public total_token_payout;\r\n    \r\n    constructor()public payable {\r\n        balances[address(this)] = INITIAL_SUPPLY/2;\r\n        balances[DEVELOPER_WALLET] = INITIAL_SUPPLY/2;\r\n        emit Transfer(address(this), DEVELOPER_WALLET, INITIAL_SUPPLY/2);\r\n    }\r\n    \r\n    /**\r\n     * The modifier checking the positive balance of the beneficiary\r\n    */\r\n    modifier checkContributor(){\r\n        require(contributor_balance[msg.sender] > 0,  \"Deposit not found\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * modifier checking the next payout time\r\n     */\r\n    modifier checkTime(){\r\n         require(now >= contributor_payout_time[msg.sender].add(PAYOUT_TIME), \"You can request payments at least 1 time per hour\");\r\n         _;\r\n    }\r\n    \r\n    function get_contributor_credit()public view  returns(uint){\r\n        uint hourly_rate = (contributor_balance[msg.sender].add(contributor_ETH_bonus[msg.sender])).mul(HOURLY_PERCENT).div(1000000);\r\n        uint debt = now.sub(contributor_payout_time[msg.sender]).div(PAYOUT_TIME);\r\n        return(debt.mul(hourly_rate));\r\n    }\r\n    \r\n    // Take the remainder of the deposit and exit the project\r\n    function refund() checkContributor public payable {\r\n        uint balance = contributor_balance[msg.sender];\r\n        uint token_balance_payout = contributor_token_payout[msg.sender].div(TOKEN_COST);\r\n        uint payout_left = balance.sub(contributor_payout[msg.sender]).sub(token_balance_payout);\r\n        uint out_summ;\r\n        \r\n        if(contributor_bonus[msg.sender] || contributor_payout[msg.sender] > 0){\r\n            out_summ = payout_left.sub(balance.mul(PROJECT_COMMISSION).div(100));\r\n            msg.sender.transfer(out_summ);\r\n        }else{\r\n            out_summ = payout_left;\r\n            msg.sender.transfer(out_summ);\r\n        }\r\n        contributor_balance[msg.sender] = 0;\r\n        contributor_payout_time[msg.sender] = 0;\r\n        contributor_payout[msg.sender] = 0;\r\n        contributor_token_payout[msg.sender] = 0;\r\n        contributor_bonus[msg.sender] = false;\r\n        contributor_ETH_bonus[msg.sender] = 0;\r\n        \r\n        emit Refund(msg.sender, out_summ, now);\r\n    }\r\n    \r\n    // Conclusion establihsment and exit tokens MEXP\r\n    function tokenRefund() checkContributor public payable {\r\n        uint balance = contributor_balance[msg.sender];\r\n        uint token_balance_payout = contributor_token_payout[msg.sender].div(TOKEN_COST);\r\n        uint payout_left = balance.sub(contributor_payout[msg.sender]).sub(token_balance_payout);\r\n        uint out_summ;\r\n        \r\n        if(contributor_bonus[msg.sender] || contributor_payout[msg.sender] > 0){\r\n            out_summ = payout_left.sub(balance.mul(PROJECT_COMMISSION).div(100));\r\n            this.transfer(msg.sender, out_summ.mul(TOKEN_COST));\r\n        }else{\r\n            out_summ = payout_left;\r\n            this.transfer(msg.sender, out_summ.mul(TOKEN_COST));\r\n        }\r\n        contributor_balance[msg.sender] = 0;\r\n        contributor_payout_time[msg.sender] = 0;\r\n        contributor_payout[msg.sender] = 0;\r\n        contributor_token_payout[msg.sender] = 0;\r\n        contributor_bonus[msg.sender] = false;\r\n        contributor_ETH_bonus[msg.sender] = 0;\r\n        total_token_payout += out_summ;\r\n        \r\n        emit Refund(msg.sender, out_summ, now);\r\n    }\r\n    \r\n    // Reinvest the dividends into the project\r\n    function reinvest()public checkContributor payable{\r\n        require(contributor_bonus[msg.sender], 'Get bonus to reinvest');\r\n        uint credit = get_contributor_credit();\r\n        \r\n        if (credit > 0){\r\n            uint bonus = credit.mul(BONUS_ETH).div(1000);\r\n            credit += bonus;\r\n            contributor_payout_time[msg.sender] = now;\r\n            contributor_balance[msg.sender] += credit;\r\n            emit Reinvest(msg.sender, credit, now);\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    // Get payment of dividends\r\n    function receivePayment()checkTime public payable{\r\n        uint credit = get_contributor_credit();\r\n        contributor_payout_time[msg.sender] = now;\r\n        contributor_payout[msg.sender] += credit;\r\n        // 1 percent held on hedging\r\n        msg.sender.transfer(credit.sub(credit.div(100)));\r\n        total_payout += credit;\r\n        last_payout = now;\r\n        emit PayDividends(msg.sender, credit, now);\r\n    }\r\n    \r\n    // Get payment of dividends in tokens\r\n    function receiveTokenPayment()checkTime public payable{\r\n        uint credit = get_contributor_credit().mul(TOKEN_COST);\r\n        contributor_payout_time[msg.sender] = now;\r\n        contributor_token_payout[msg.sender] += credit;\r\n        this.transfer(msg.sender,credit);\r\n        total_token_payout += credit;\r\n        last_payout = now;\r\n        emit PayTokenDividends(msg.sender, credit, now);\r\n    }\r\n    \r\n    /**\r\n     * The method of accepting payments, if a zero payment has come, then we start the procedure for refunding\r\n     * the interest on the deposit, if the payment is not empty, we record the number of broadcasts on the contract\r\n     * and the payment time\r\n     */\r\n    function makeContribution() private{\r\n            \r\n        if (contributor_balance[msg.sender] == 0){\r\n            emit NewContributor(msg.sender, msg.value, now);\r\n            number_contributors+=1;\r\n        }\r\n        \r\n        // transfer developer commission\r\n        DEVELOPER_WALLET.transfer(msg.value.mul(10).div(100));\r\n        \r\n        if(now >= contributor_payout_time[msg.sender].add(PAYOUT_TIME) && contributor_balance[msg.sender] != 0){\r\n            receivePayment();\r\n        }\r\n        \r\n        contributor_balance[msg.sender] += msg.value;\r\n        contributor_payout_time[msg.sender] = now;\r\n        \r\n        if (msg.value >= 10 ether){\r\n            contributor_ETH_bonus[msg.sender] = msg.value.mul(BONUS_ETH).div(1000);\r\n        }\r\n        \r\n        total_deposits += msg.value;\r\n        emit NewContribution(msg.sender, msg.value, now);\r\n    }\r\n    \r\n    // Get bonus for contribution\r\n    function getBonus()checkContributor external payable{\r\n        uint balance = contributor_balance[msg.sender];\r\n        if (!contributor_bonus[msg.sender]){\r\n            contributor_bonus[msg.sender] = true;\r\n            uint bonus = balance.mul(TOKEN_COST);\r\n            this.transfer(msg.sender, bonus);\r\n            total_token_payout += bonus;\r\n            emit PayBonus(msg.sender, bonus, now);\r\n        }\r\n    }\r\n    \r\n    // Get information on the contributor\r\n    function getContribtor() public view returns(uint balance, uint payout, uint payout_time, uint token_payout, bool bonus, uint ETH_bonus, uint payout_balance, uint token_balance) {\r\n        balance = contributor_balance[msg.sender];\r\n        payout = contributor_payout[msg.sender];\r\n        payout_time = contributor_payout_time[msg.sender];\r\n        token_payout = contributor_token_payout[msg.sender];\r\n        bonus = contributor_bonus[msg.sender];\r\n        ETH_bonus = contributor_ETH_bonus[msg.sender];\r\n        payout_balance = get_contributor_credit();\r\n        token_balance = balanceOf(msg.sender);\r\n        \r\n    }\r\n\r\n    /**\r\n     * function that is launched when transferring money to a contract\r\n     */\r\n    function() external payable{\r\n        if (msg.value >= MINIMAL_DEPOSIT){\r\n            //if the sender is not a payment wallet, then we make out a deposit otherwise we do nothing,\r\n            // but simply put money on the balance of the contract\r\n            if(msg.sender != PAYMENT_WALLET){\r\n                makeContribution();\r\n            }\r\n            \r\n        }else{\r\n           DEVELOPER_WALLET.transfer(msg.value); \r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewContributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PayBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PayTokenDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_ETH_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_bonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_payout_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributor_token_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContribtor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_payout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ETH_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_contributor_credit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"number_contributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receivePayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveTokenPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract MiningExpertToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_token_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MiningExpert","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5732d8bc1d9d9d4dbf2ca4485e73033ae575467c544fe4744beffa804501bb59"}]}