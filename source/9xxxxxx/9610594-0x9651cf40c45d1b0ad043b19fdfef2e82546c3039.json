{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title InstaList\r\n * @dev Registry For Smart Account Authorised user.\r\n */\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address _user) external view returns (bool);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint64 x, uint64 y) internal pure returns (uint64 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint64 x, uint64 y) internal pure returns (uint64 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Variables is DSMath {\r\n\r\n    // The InstaIndex Address.\r\n    address public constant instaIndex = 0x1c503F1544500C05da80cd326D97342f2B13a732;\r\n\r\n    // Smart Account Count.\r\n    uint64 public accounts;\r\n    // Smart Account ID (Smart Account Address => Account ID).\r\n    mapping (address => uint64) public accountID;\r\n    // Smart Account Address (Smart Account ID => Smart Account Address).\r\n    mapping (uint64 => address) public accountAddr;\r\n\r\n    // User Link (User Address => UserLink(Account ID of First and Last And Count of Smart Accounts)).\r\n    mapping (address => UserLink) public userLink;\r\n    // Linked List of Users (User Address => Smart Account ID => UserList(Previous and next Account ID)).\r\n    mapping (address => mapping(uint64 => UserList)) public userList;\r\n\r\n    struct UserLink {\r\n        uint64 first;\r\n        uint64 last;\r\n        uint64 count;\r\n    }\r\n    struct UserList {\r\n        uint64 prev;\r\n        uint64 next;\r\n    }\r\n\r\n    // Account Link (Smart Account ID => AccountLink).\r\n    mapping (uint64 => AccountLink) public accountLink; // account => account linked list connection\r\n    // Linked List of Accounts (Smart Account ID => Account Address => AccountList).\r\n    mapping (uint64 => mapping (address => AccountList)) public accountList; // account => user address => list\r\n\r\n    struct AccountLink {\r\n        address first;\r\n        address last;\r\n        uint64 count;\r\n    }\r\n    struct AccountList {\r\n        address prev;\r\n        address next;\r\n    }\r\n\r\n}\r\n\r\ncontract Configure is Variables {\r\n\r\n    /**\r\n     * @dev Add Account to User Linked List.\r\n     * @param _owner Acount Owner.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function addAccount(address _owner, uint64 _account) internal {\r\n        if (userLink[_owner].last != 0) {\r\n            userList[_owner][_account].prev = userLink[_owner].last;\r\n            userList[_owner][userLink[_owner].last].next = _account;\r\n        }\r\n        if (userLink[_owner].first == 0) userLink[_owner].first = _account;\r\n        userLink[_owner].last = _account;\r\n        userLink[_owner].count = add(userLink[_owner].count, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Account from User Linked List.\r\n     * @param _owner Acount Owner/User.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function removeAccount(address _owner, uint64 _account) internal {\r\n        uint64 _prev = userList[_owner][_account].prev;\r\n        uint64 _next = userList[_owner][_account].next;\r\n        if (_prev != 0) userList[_owner][_prev].next = _next;\r\n        if (_next != 0) userList[_owner][_next].prev = _prev;\r\n        if (_prev == 0) userLink[_owner].first = _next;\r\n        if (_next == 0) userLink[_owner].last = _prev;\r\n        userLink[_owner].count = sub(userLink[_owner].count, 1);\r\n        delete userList[_owner][_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Add Owner to Account Linked List.\r\n     * @param _owner Acount Owner.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function addUser(address _owner, uint64 _account) internal {\r\n        if (accountLink[_account].last != address(0)) {\r\n            accountList[_account][_owner].prev = accountLink[_account].last;\r\n            accountList[_account][accountLink[_account].last].next = _owner;\r\n        }\r\n        if (accountLink[_account].first == address(0)) accountLink[_account].first = _owner;\r\n        accountLink[_account].last = _owner;\r\n        accountLink[_account].count = add(accountLink[_account].count, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Owner from Account Linked List.\r\n     * @param _owner Acount Owner.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function removeUser(address _owner, uint64 _account) internal {\r\n        address _prev = accountList[_account][_owner].prev;\r\n        address _next = accountList[_account][_owner].next;\r\n        if (_prev != address(0)) accountList[_account][_prev].next = _next;\r\n        if (_next != address(0)) accountList[_account][_next].prev = _prev;\r\n        if (_prev == address(0)) accountLink[_account].first = _next;\r\n        if (_next == address(0)) accountLink[_account].last = _prev;\r\n        accountLink[_account].count = sub(accountLink[_account].count, 1);\r\n        delete accountList[_account][_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract InstaList is Configure {\r\n\r\n    /**\r\n     * @dev Enable Auth for Smart Account.\r\n     * @param _owner Owner Address.\r\n    */\r\n    function addAuth(address _owner) external {\r\n        require(accountID[msg.sender] != 0, \"not-account\");\r\n        require(AccountInterface(msg.sender).isAuth(_owner), \"not-owner\");\r\n        addAccount(_owner, accountID[msg.sender]);\r\n        addUser(_owner, accountID[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Disable Auth for Smart Account.\r\n     * @param _owner Owner Address.\r\n    */\r\n    function removeAuth(address _owner) external {\r\n        require(accountID[msg.sender] != 0, \"not-account\");\r\n        require(!AccountInterface(msg.sender).isAuth(_owner), \"already-owner\");\r\n        removeAccount(_owner, accountID[msg.sender]);\r\n        removeUser(_owner, accountID[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Setup Initial configuration of Smart Account.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function init(address  _account) external {\r\n        require(msg.sender == instaIndex, \"not-index\");\r\n        accounts++;\r\n        accountID[_account] = accounts;\r\n        accountAddr[accounts] = _account;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"accountAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"accountLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"first\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLink\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"first\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"last\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"prev\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"next\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaList","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://6e4daec0a53624ee7b79e0a517d88c85aa10e764afc58eff78fbd04bc7641280"}]}