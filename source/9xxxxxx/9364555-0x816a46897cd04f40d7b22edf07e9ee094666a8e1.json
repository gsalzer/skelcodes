{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IENSRegistry.sol\r\n\r\npragma solidity ^0.5.15;\r\n\r\n/**\r\n * @title EnsRegistry\r\n * @dev Extract of the interface for ENS Registry\r\n*/\r\ncontract IENSRegistry {\r\n    function setOwner(bytes32 node, address owner) public;\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n    function setResolver(bytes32 node, address resolver) public;\r\n    function owner(bytes32 node) public view returns (address);\r\n    function resolver(bytes32 node) public view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IDCLRegistrar.sol\r\n\r\npragma solidity ^0.5.15;\r\n\r\ncontract IDCLRegistrar {\r\n    /**\r\n\t * @dev Allows to create a subdomain (e.g. \"nacho.dcl.eth\"), set its resolver, owner and target address\r\n\t * @param _subdomain - subdomain  (e.g. \"nacho\")\r\n\t * @param _beneficiary - address that will become owner of this new subdomain\r\n\t */\r\n    function register(string calldata _subdomain, address _beneficiary) external;\r\n\r\n     /**\r\n\t * @dev Re-claim the ownership of a subdomain (e.g. \"nacho\").\r\n     * @notice After a subdomain is transferred by this contract, the owner in the ENS registry contract\r\n     * is still the old owner. Therefore, the owner should call `reclaim` to update the owner of the subdomain.\r\n\t * @param _tokenId - erc721 token id which represents the node (subdomain).\r\n     * @param _owner - new owner.\r\n     */\r\n    function reclaim(uint256 _tokenId, address _owner) external;\r\n\r\n    /**\r\n     * @dev Transfer a name to a new owner.\r\n     * @param _from - current owner of the node.\r\n     * @param _to - new owner of the node.\r\n     * @param _id - node id.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _id) public;\r\n\r\n    /**\r\n\t * @dev Check whether a name is available to be registered or not\r\n\t * @param _labelhash - hash of the name to check\r\n     * @return whether the name is available or not\r\n     */\r\n    function available(bytes32 _labelhash) public view returns (bool);\r\n\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Token.sol\r\n\r\npragma solidity ^0.5.15;\r\n\r\n\r\ncontract IERC20Token is IERC20{\r\n    function balanceOf(address from) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function burn(uint256 amount) public;\r\n}\r\n\r\n// File: contracts/ens/DCLController.sol\r\n\r\npragma solidity ^0.5.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DCLController is Ownable {\r\n    using Address for address;\r\n\r\n    // Price of each name\r\n    uint256 constant public PRICE = 100 ether;\r\n\r\n    // Accepted ERC20 token\r\n    IERC20Token public acceptedToken;\r\n    // DCL Registrar\r\n    IDCLRegistrar public registrar;\r\n\r\n    // Price of each name\r\n    uint256 public maxGasPrice = 20000000000; // 20 gwei\r\n\r\n    // Emitted when a name is bought\r\n    event NameBought(address indexed _caller, address indexed _beneficiary, uint256 _price, string _name);\r\n\r\n    // Emitted when the max gas price is changed\r\n    event MaxGasPriceChanged(uint256 indexed _oldMaxGasPrice, uint256 indexed _newMaxGasPrice);\r\n\r\n    /**\r\n\t * @dev Constructor of the contract\r\n     * @param _acceptedToken - address of the accepted token\r\n     * @param _registrar - address of the DCL registrar contract\r\n\t */\r\n    constructor(IERC20Token _acceptedToken, IDCLRegistrar _registrar) public {\r\n        require(address(_acceptedToken).isContract(), \"Accepted token should be a contract\");\r\n        require(address(_registrar).isContract(), \"Registrar should be a contract\");\r\n\r\n        // Accepted token\r\n        acceptedToken = _acceptedToken;\r\n        // DCL registrar\r\n        registrar = _registrar;\r\n    }\r\n\r\n    /**\r\n\t * @dev Register a name\r\n     * @param _name - name to be registered\r\n\t * @param _beneficiary - owner of the name\r\n\t */\r\n    function register(string memory _name, address _beneficiary) public {\r\n        // Check gas price\r\n        require(tx.gasprice <= maxGasPrice, \"Maximum gas price allowed exceeded\");\r\n        // Check for valid beneficiary\r\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\r\n\r\n        // Check if the name is valid\r\n        _requireNameValid(_name);\r\n        // Check if the sender has at least `price` and the contract has allowance to use on its behalf\r\n        _requireBalance(msg.sender);\r\n\r\n        // Register the name\r\n        registrar.register(_name, _beneficiary);\r\n        // Debit `price` from sender\r\n        acceptedToken.transferFrom(msg.sender, address(this), PRICE);\r\n        // Burn it\r\n        acceptedToken.burn(PRICE);\r\n        // Log\r\n        emit NameBought(msg.sender, _beneficiary, PRICE, _name);\r\n    }\r\n\r\n    /**\r\n     * @dev Update max gas price\r\n     * @param _maxGasPrice - new max gas price to be used\r\n     */\r\n    function updateMaxGasPrice(uint256 _maxGasPrice) external onlyOwner {\r\n        require(_maxGasPrice != maxGasPrice, \"Max gas price should be different\");\r\n        require(\r\n            _maxGasPrice >= 1000000000,\r\n            \"Max gas price should be greater than or equal to 1 gwei\"\r\n        );\r\n\r\n        emit MaxGasPriceChanged(maxGasPrice, _maxGasPrice);\r\n\r\n        maxGasPrice = _maxGasPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Validate if a user has balance and the contract has enough allowance\r\n     * to use user's accepted token on his belhalf\r\n     * @param _user - address of the user\r\n     */\r\n    function _requireBalance(address _user) internal view {\r\n        require(\r\n            acceptedToken.balanceOf(_user) >= PRICE,\r\n            \"Insufficient funds\"\r\n        );\r\n        require(\r\n            acceptedToken.allowance(_user, address(this)) >= PRICE,\r\n            \"The contract is not authorized to use the accepted token on sender behalf\"\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Validate a nane\r\n    * @notice that only a-z is allowed\r\n    * @param _name - string for the name\r\n    */\r\n    function _requireNameValid(string memory _name) internal pure {\r\n        bytes memory tempName = bytes(_name);\r\n        require(\r\n            tempName.length >= 2 && tempName.length <= 15,\r\n            \"Name should be greather than or equal to 2 and less than or equal to 15\"\r\n        );\r\n        for(uint256 i = 0; i < tempName.length; i++) {\r\n            require(_isLetter(tempName[i]) || _isNumber(tempName[i]), \"Invalid Character\");\r\n        }\r\n    }\r\n\r\n    function _isLetter(bytes1 _char) internal pure returns (bool) {\r\n        return (_char >= 0x41 && _char <= 0x5A) || (_char >= 0x61 && _char <= 0x7A);\r\n    }\r\n\r\n    function _isNumber(bytes1 _char) internal pure returns (bool) {\r\n        return (_char >= 0x30 && _char <= 0x39);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"internalType\":\"contract IDCLRegistrar\",\"name\":\"_registrar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_oldMaxGasPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"MaxGasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NameBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract IDCLRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"updateMaxGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DCLController","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000d8ef557522e8bb87a8179bd2efac1bd5ab7756b4","Library":"","LicenseType":"None","SwarmSource":"bzzr://20660878b44e83da8dec4064a7767b53f253a05d9029e9a7ccbbe6be5c3bdc08"}]}