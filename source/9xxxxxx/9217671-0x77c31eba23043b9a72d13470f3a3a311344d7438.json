{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/contracts/src/bridges/ChaiBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IERC20Bridge.sol\\\";\\nimport \\\"../interfaces/IChai.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\n\\n\\n// solhint-disable space-after-comma\\ncontract ChaiBridge is\\n    IERC20Bridge,\\n    DeploymentConstants\\n{\\n    /// @dev Withdraws `amount` of `from` address's Dai from the Chai contract.\\n    ///      Transfers `amount` of Dai to `to` address.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    /// @return success The magic bytes `0x37708e9b` if successful.\\n    function bridgeTransferFrom(\\n        address /* tokenAddress */,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata /* bridgeData */\\n    )\\n        external\\n        returns (bytes4 success)\\n    {\\n        // Ensure that only the `ERC20BridgeProxy` can call this function.\\n        require(\\n            msg.sender == _getERC20BridgeProxyAddress(),\\n            \\\"ChaiBridge/ONLY_CALLABLE_BY_ERC20_BRIDGE_PROXY\\\"\\n        );\\n\\n        // Withdraw `from` address's Dai.\\n        // NOTE: This contract must be approved to spend Chai on behalf of `from`.\\n        bytes memory drawCalldata = abi.encodeWithSelector(\\n            IChai(address(0)).draw.selector,\\n            from,\\n            amount\\n        );\\n\\n        (bool success,) = _getChaiAddress().call(drawCalldata);\\n        require(\\n            success,\\n            \\\"ChaiBridge/DRAW_DAI_FAILED\\\"\\n        );\\n\\n        // Transfer Dai to `to`\\n        // This will never fail if the `draw` call was successful\\n        IERC20Token(_getDaiAddress()).transfer(to, amount);\\n\\n        return BRIDGE_SUCCESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IERC20Bridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract IERC20Bridge {\\n\\n    // @dev Result of a successful bridge call.\\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\\n\\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\\n    /// @param tokenAddress The address of the ERC20 token to transfer.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\\n    /// @return success The magic bytes `0x37708e9b` if successful.\\n    function bridgeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success);\\n}\\n\"\r\n    },\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/contracts/src/interfaces/IChai.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\\\";\\n\\n\\ncontract PotLike {\\n    function chi() external returns (uint256);\\n    function rho() external returns (uint256);\\n    function drip() external returns (uint256);\\n    function join(uint256) external;\\n    function exit(uint256) external;\\n}\\n\\n\\n// The actual Chai contract can be found here: https://github.com/dapphub/chai\\ncontract IChai is\\n    IERC20Token\\n{\\n    /// @dev Withdraws Dai owned by `src`\\n    /// @param src Address that owns Dai.\\n    /// @param wad Amount of Dai to withdraw.\\n    function draw(\\n        address src,\\n        uint256 wad\\n    )\\n        external;\\n\\n    /// @dev Queries Dai balance of Chai holder.\\n    /// @param usr Address of Chai holder.\\n    /// @return Dai balance.\\n    function dai(address usr)\\n        external\\n        returns (uint256);\\n\\n    /// @dev Queries the Pot contract used by the Chai contract.\\n    function pot()\\n        external\\n        returns (PotLike);\\n\\n    /// @dev Deposits Dai in exchange for Chai\\n    /// @param dst Address to receive Chai.\\n    /// @param wad Amount of Dai to deposit.\\n    function join(\\n        address dst,\\n        uint256 wad\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract IERC20Token {\\n\\n    // solhint-disable no-simple-event-func-name\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address _spender, uint256 _value)\\n        external\\n        returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils/contracts/src/DeploymentConstants.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\ncontract DeploymentConstants {\\n    /// @dev Mainnet address of the WETH contract.\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    // /// @dev Kovan address of the WETH contract.\\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    // ///@dev Kovan address of the `Dai` (multi-collateral) contract\\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\\n    /// @dev Mainnet address of the `Chai` contract\\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\\n    /// @dev Mainnet address of the 0x DevUtils contract.\\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\\n    // /// @dev Kovan address of the 0x DevUtils contract.\\n    // address constant private DEV_UTILS_ADDRESS = 0x161793Cdca4fF9E766A706c2C49c36AC1340bbcd;\\n    /// @dev Kyber ETH pseudo-address.\\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev Mainnet address of the dYdX contract.\\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n\\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\\n    function _getKyberNetworkProxyAddress()\\n        internal\\n        view\\n        returns (address kyberAddress)\\n    {\\n        return KYBER_NETWORK_PROXY_ADDRESS;\\n    }\\n\\n    /// @dev Overridable way to get the WETH address.\\n    /// @return wethAddress The WETH address.\\n    function _getWethAddress()\\n        internal\\n        view\\n        returns (address wethAddress)\\n    {\\n        return WETH_ADDRESS;\\n    }\\n\\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\\n    function _getUniswapExchangeFactoryAddress()\\n        internal\\n        view\\n        returns (address uniswapAddress)\\n    {\\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\\n    function _getEth2DaiAddress()\\n        internal\\n        view\\n        returns (address eth2daiAddress)\\n    {\\n        return ETH2DAI_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\\n    function _getERC20BridgeProxyAddress()\\n        internal\\n        view\\n        returns (address erc20BridgeProxyAddress)\\n    {\\n        return ERC20_BRIDGE_PROXY_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the `Dai` contract.\\n    /// @return daiAddress The `Dai` contract.\\n    function _getDaiAddress()\\n        internal\\n        view\\n        returns (address daiAddress)\\n    {\\n        return DAI_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the `Chai` contract.\\n    /// @return chaiAddress The `Chai` contract.\\n    function _getChaiAddress()\\n        internal\\n        view\\n        returns (address chaiAddress)\\n    {\\n        return CHAI_ADDRESS;\\n    }\\n\\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\\n    /// @return devUtils The 0x `DevUtils` contract address.\\n    function _getDevUtilsAddress()\\n        internal\\n        view\\n        returns (address devUtils)\\n    {\\n        return DEV_UTILS_ADDRESS;\\n    }\\n\\n    /// @dev Overridable way to get the DyDx contract.\\n    /// @return exchange The DyDx exchange contract.\\n    function _getDydxAddress()\\n        internal\\n        view\\n        returns (address dydxAddress)\\n    {\\n        return DYDX_ADDRESS;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/contracts/test/TestChaiBridge.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../src/bridges/ChaiBridge.sol\\\";\\nimport \\\"@0x/contracts-erc20/contracts/src/ERC20Token.sol\\\";\\n\\n\\ncontract TestChaiDai is\\n    ERC20Token\\n{\\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\\n\\n    function draw(\\n        address from,\\n        uint256 amount\\n    )\\n        external\\n    {\\n        if (from == ALWAYS_REVERT_ADDRESS) {\\n            revert();\\n        }\\n        balances[msg.sender] += amount;\\n    }\\n}\\n\\n\\ncontract TestChaiBridge is\\n    ChaiBridge\\n{\\n    address public testChaiDai;\\n    address private constant ALWAYS_REVERT_ADDRESS = address(1);\\n\\n    constructor()\\n        public\\n    {\\n        testChaiDai = address(new TestChaiDai());\\n    }\\n\\n    function _getDaiAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return testChaiDai;\\n    }\\n\\n    function _getChaiAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return testChaiDai;\\n    }\\n\\n    function _getERC20BridgeProxyAddress()\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return msg.sender == ALWAYS_REVERT_ADDRESS ? address(0) : msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20/contracts/src/ERC20Token.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./interfaces/IERC20Token.sol\\\";\\n\\n\\ncontract ERC20Token is\\n    IERC20Token\\n{\\n    mapping (address => uint256) internal balances;\\n    mapping (address => mapping (address => uint256)) internal allowed;\\n\\n    uint256 internal _totalSupply;\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address _to, uint256 _value)\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            balances[msg.sender] >= _value,\\n            \\\"ERC20_INSUFFICIENT_BALANCE\\\"\\n        );\\n        require(\\n            balances[_to] + _value >= balances[_to],\\n            \\\"UINT256_OVERFLOW\\\"\\n        );\\n\\n        balances[msg.sender] -= _value;\\n        balances[_to] += _value;\\n\\n        emit Transfer(\\n            msg.sender,\\n            _to,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        external\\n        returns (bool)\\n    {\\n        require(\\n            balances[_from] >= _value,\\n            \\\"ERC20_INSUFFICIENT_BALANCE\\\"\\n        );\\n        require(\\n            allowed[_from][msg.sender] >= _value,\\n            \\\"ERC20_INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n        require(\\n            balances[_to] + _value >= balances[_to],\\n            \\\"UINT256_OVERFLOW\\\"\\n        );\\n\\n        balances[_to] += _value;\\n        balances[_from] -= _value;\\n        allowed[_from][msg.sender] -= _value;\\n\\n        emit Transfer(\\n            _from,\\n            _to,\\n            _value\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address _spender, uint256 _value)\\n        external\\n        returns (bool)\\n    {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(\\n            msg.sender,\\n            _spender,\\n            _value\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    /// @dev Query the balance of owner\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address _owner)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return balances[_owner];\\n    }\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"remappings\": [\r\n      \"@0x/contracts-erc20=/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20\",\r\n      \"@0x/contracts-utils=/Users/abandeali/github/0xproject/0x-monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils\"\r\n    ]\r\n  }\r\n}}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"bridgeTransferFrom\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChaiBridge","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://6f967d1e118d2fe7fc01c7299d8f1166691f20f8a85d5dafd94b0abab67b14d0"}]}