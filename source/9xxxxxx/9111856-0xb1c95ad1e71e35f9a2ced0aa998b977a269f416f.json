{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Proxy{\r\n    address owner;\r\n    address forwardingAddress;\r\n    uint cap;\r\n    address feeAddress;\r\n    bool public isComplete;\r\n\r\n    event ForwardFunds(address indexed _recipient, uint _amount);\r\n    event ReceivedFunds(address indexed _sender, uint _amount);\r\n    event ForwardFee(address indexed _feeAddress, uint _amount);\r\n\r\n    modifier onlyOwner{\r\n        require(msg.sender == owner, \"Only the owner may edit this contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _forwardingAddress, address _feeAddress, uint256 _cap) public{\r\n        require(_feeAddress != address(0), \"Cannot initialise without a fee address\");\r\n        require(_cap >= 0, \"Cap cannot be less that 0\");\r\n        require(_forwardingAddress != address(0), \"Cannot initialise without a forwarding address\");\r\n        // Check that forwarding address is not a contract\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_forwardingAddress)\r\n        }\r\n        require(size == 0, \"Cannot set contract as forwarding address\");\r\n\r\n        owner = msg.sender;\r\n        forwardingAddress = _forwardingAddress;\r\n        feeAddress = _feeAddress;\r\n        cap = _cap;\r\n        isComplete = false;\r\n    }\r\n\r\n    // fallback function:\r\n    function() public payable {\r\n        require(!isComplete, \"This dump has completed!\");\r\n        // forwardingAddress.transfer(msg.value);\r\n        emit ReceivedFunds(msg.sender, msg.value);\r\n    }\r\n\r\n    function complete() public onlyOwner {\r\n        require(!isComplete, \"This dump has already raised the required ether.\"); // require that the raising isnt complete.\r\n        uint owedToRecipient = address(this).balance - (address(this).balance / 10);\r\n        uint fee = address(this).balance / 10;\r\n        forwardingAddress.transfer(owedToRecipient);\r\n        feeAddress.transfer(fee);\r\n        isComplete = true;\r\n        emit ForwardFunds(forwardingAddress, owedToRecipient);\r\n        emit ForwardFee(feeAddress, fee);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"complete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_forwardingAddress\",\"type\":\"address\"},{\"name\":\"_feeAddress\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ForwardFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_feeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ForwardFee\",\"type\":\"event\"}]","ContractName":"Proxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c75a010a8c034259be80c1f7dc7c1db251d4f974000000000000000000000000387021122fa3358fe7d7cf3bf92c41fb37f1b6db00000000000000000000000000000000000000000000000000b1a2bc2ec50000","Library":"","LicenseType":"None","SwarmSource":"bzzr://dec6e8bc4ddb1dd5470f04eac1809d9d2ac5e59156f94a352bcec8f60baa74dc"}]}