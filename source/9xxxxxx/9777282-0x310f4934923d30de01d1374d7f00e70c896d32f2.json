{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract XHT {\r\n    string constant public name = \"Hypercube's Token\";\r\n    string constant public symbol = \"XHT\";\r\n    uint8 constant public decimals = 4;\r\n    uint256 public totalSupply;\r\n    address public owner = msg.sender;\r\n    address public deprecated;\r\n    uint256 public last_mint_block = block.number;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function mint() public {\r\n        uint256 _value = (block.number - last_mint_block) * 2;\r\n        last_mint_block = block.number;\r\n        _transfer(address(0), owner, _value);\r\n    }\r\n\r\n    function transfer_ownership(address _to) public {\r\n        require(msg.sender == owner, \"Permission denied.\");\r\n        owner = _to;\r\n    }\r\n\r\n    function deprecate(address _to) public {\r\n        require(msg.sender == owner, \"Permission denied.\");\r\n        deprecated = _to;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(allowance[_from][msg.sender] >= _value, \"Insufficient allowance.\");\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) private {\r\n        if (_from == address(0)) {\r\n            // mint\r\n            totalSupply += _value;\r\n        } else {\r\n            // transfer from\r\n            require(balanceOf[_from] >= _value, \"Insufficient balance.\");\r\n            balanceOf[_from] -= _value;\r\n        }\r\n        if (_to == address(0)) {\r\n            // burn\r\n            totalSupply -= _value;\r\n        } else {\r\n            // transfer into\r\n            balanceOf[_to] += _value;\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract Exchange {\r\n    XHT private token = XHT(0xa0DDAa9779a3F237095338b6546aABaAD7AbeaeE);\r\n    uint256 public start_block = block.number;\r\n\r\n    function buy_price() public view returns (uint256) {\r\n        return 2e7 * (block.number - start_block);\r\n    }\r\n\r\n    function sell_price() public view returns (uint256) {\r\n        return 1e7 * (block.number - start_block);\r\n    }\r\n\r\n    function buy() public payable {\r\n        uint256 eth_value = msg.value;\r\n        uint256 xht_value = eth_value / buy_price();\r\n        require(token.balanceOf(address(this)) >= xht_value, \"I cannot sell this much now.\");\r\n        token.transfer(msg.sender, xht_value);\r\n    }\r\n\r\n    function sell(uint256 xht_value) public {\r\n        uint256 eth_value = xht_value * sell_price();\r\n        require(address(this).balance >= eth_value, \"I cannot buy this much now.\");\r\n        if (token.transferFrom(msg.sender, address(this), xht_value))\r\n            msg.sender.transfer(eth_value);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xht_value\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Exchange","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://0d16a9876496f955047f253f808b7267136a5093f55fb75ada8498eb60046556"}]}