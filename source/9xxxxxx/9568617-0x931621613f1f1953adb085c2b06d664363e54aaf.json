{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.1;\r\n\r\n\r\n/**\r\n* Give Together\r\n* a no loss way to give to a\r\n* new charity each week\r\n* @author Lucas Kohorst\r\n* @dev This contract accepts ERC20 token which\r\n* if the donation time is past will forward the \r\n* tokens to a new charity each week. This can be \r\n* used stand alone but is intended to be designated\r\n* as a hat in the rToken project https://github.com/rtoken-project/rtoken-contracts\r\n* accured interest will be redeemed at this contract address\r\n* which will then be sent to the charity of the week\r\n*/\r\nabstract contract ERC20Token {\r\n   function transferFrom(address sender, address recipient, uint256 amount) virtual external returns (bool);\r\n   function balanceOf(address owner) virtual external view returns (uint256);\r\n   function approve(address spender, uint256 amount) virtual external returns (bool);\r\n}\r\ncontract GiveTogether  {\r\n    address payable public currentCharity;\r\n    address public owner;\r\n    mapping (address => Charity) public charities;\r\n    address payable [] public charityAccts;\r\n\r\n    uint256 public currentDate;\r\n    uint256 public sendDonationTime;\r\n    uint256 private oneWeek = 1 weeks;\r\n    uint256 public totalDonation;\r\n    uint256 public rDaiBalance;\r\n    bytes32 private N;\r\n\r\n    struct Charity  {\r\n        string name;\r\n        string website;\r\n        bool isCharity;\r\n    }\r\n\r\n    /**\r\n    * Modifier for owner specific functions\r\n    */\r\n    modifier isOwner() {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Constructor only run on contract creation\r\n    * adds intial charities, sets owner\r\n    * sets current date, current charity and \r\n    * current donation time\r\n    */\r\n    constructor() public {\r\n        // Setting the owner\r\n        owner = msg.sender;\r\n\r\n        // Adding intial charities\r\n        addCharity(0xD3F81260a44A1df7A7269CF66Abd9c7e4f8CdcD1, \"Heifer\", \"https://www.heifer.org/\"); \r\n        addCharity(0xc1D5FD1F0D969075040988e37Df3643Af724995D, \"Grace Aid\", \"https://graceaid.org/\");\r\n        addCharity(0x6e4C6ADFA15cADa2699Fd2c16290ea1F71D0f9D7, \"Breast Cancer Support (UK)\", \"https://breastcancersupport.org.uk/\");\r\n        addCharity(0x50990F09d4f0cb864b8e046e7edC749dE410916b, \"350\", \"https://350.org/\");\r\n        addCharity(0xb189f76323678E094D4996d182A792E52369c005, \"EFF\", \"https://www.eff.org/\");\r\n        addCharity(0x998F25Be40241CA5D8F5fCaF3591B5ED06EF3Be7, \"Freedom of Press\", \"https://freedom.press/\");\r\n        addCharity(0xE000c5E5E74472B3584427c115712Eb325cf3ff5, \"Code for America\", \"https://www.codeforamerica.org/\");\r\n        addCharity(0xEF0050248aE8E5559Bdc6357cc2574fcDF434837, \"Fight for the Future\", \"https://www.fightforthefuture.org/\");\r\n        addCharity(0xc7464dbcA260A8faF033460622B23467Df5AEA42, \"Give Directly\", \"https://www.givedirectly.org/\");\r\n        addCharity(0x7cF2eBb5Ca55A8bd671A020F8BDbAF07f60F26C1, \"Give Well\", \"https://www.givewell.org/\");\r\n        addCharity(0x3ea5f030ade93A8D0400dcbDAC259e7348164fc1, \"Index of Censorship\", \"https://www.indexoncensorship.org/\");\r\n        addCharity(0x95a647B3d8a3F11176BAdB799b9499C671fa243a, \"Khan Academy\", \"https://www.khanacademy.org/\");\r\n        addCharity(0x19DdD94B94D3c68385c897846AB44Ac99DBFAe0f, \"Tor Project\", \"https://www.torproject.org/\");\r\n        addCharity(0x3a9f94DE63612f4A117Adf20F745bd420d148ac1, \"UNICEF New Zealand\", \"https://www.unicef.org.nz/\");\r\n        addCharity(0xC94BD2b79921DAa2395EB74934D867346C4C71d4, \"Rainforest Trust\", \"https://www.rainforesttrust.org/\");\r\n        addCharity(0xe0c83D05DB000393B22F85432F047167a5d650a8, \"FreeCodeCamp\", \"https://www.freecodecamp.org/\");\r\n        addCharity(0x682E9f760C5Be1A954A3e0499c5fb43faf4B86fB, \"Develop Africa\", \"https://www.developafrica.org/\");\r\n        addCharity(0x0AAD8B37E1f9a2AA3088c5bd3235bB120F40E8aD, \"The Lupus Foundation\", \"https://www.lupus.org/\");\t\r\n        addCharity(0x6B0d647Af6c9ff7CE6D507849eAbF649D045623e, \"Pathways to Education\", \"https://www.pathwaystoeducation.ca/donate-ethereum/\");\r\n        addCharity(0x0a91BC5990ebB27131FF81E97E7e2339433d1671, \"Rainforest Foundation\", \"https://www.rainforestfoundation.org\");\r\n\r\n        // Setting the default donation time\r\n        // to an hour before a week is over\r\n        sendDonationTime = 1 weeks - 1 hours;\r\n        currentDate = now;\r\n        // Generating random charity from hash of address\r\n        // Setting the nonce with the owner of the contract and time\r\n        N = keccak256(abi.encodePacked(owner, now));\r\n        bytes32 hash = keccak256(abi.encodePacked(N, msg.sender));\r\n        currentCharity = charityAccts[uint(hash) % charityAccts.length];\r\n    }   \r\n    \r\n    /**\r\n    * Default payable function; Gets called when an ERC20 token is sent\r\n    * to the contracta nd forwards\r\n    * it to the destination address\r\n    * which is the charity of the week\r\n    */\r\n    receive() external payable {\r\n        // Checking that there is an ERC20 token being sent \r\n        // and that the donation time is passed\r\n        if (msg.value > 0) {\r\n            // Adding to total donation\r\n            totalDonation = totalDonation +  msg.value;\r\n            // Sending any ETH in the account\r\n            if (!currentCharity.send(address(this).balance)) revert();\r\n        }\r\n        // Getting a new charity and send donation time\r\n        // are less than current time that means\r\n        // the previous charity expired\r\n        if(now >= currentDate + sendDonationTime) {\r\n           currentDate = now;\r\n           currentCharity = generateNewCharity();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * If need a new charity can be generated\r\n    * @return currentCharity the address of the current charity\r\n    * @dev only callable by owner\r\n    */\r\n    function generateNewCharity() public isOwner returns (address payable) {\r\n        // Generating new nonce from the owner and the time\r\n        N = keccak256(abi.encodePacked(owner, now));\r\n        bytes32 hash = keccak256(abi.encodePacked(N, msg.sender));\r\n        currentCharity = charityAccts[uint(hash) % charityAccts.length];\r\n        if (!charities[currentCharity].isCharity) generateNewCharity();\r\n        return currentCharity;\r\n    }\r\n\r\n    /**\r\n    * Withdraws rDAI and ETH balance to current charity\r\n    */\r\n    function withdrawRDAI() public {\r\n        ERC20Token tok = ERC20Token(0x261b45D85cCFeAbb11F022eBa346ee8D1cd488c0);\r\n        rDaiBalance = tok.balanceOf(address(this));\r\n        totalDonation = totalDonation + rDaiBalance;\r\n        require(rDaiBalance > 0);\r\n        tok.approve(address(this), rDaiBalance);\r\n        tok.transferFrom(address(this), currentCharity, rDaiBalance);\r\n        rDaiBalance = tok.balanceOf(address(this));\r\n\r\n        // Getting a new charity and send donation time\r\n        // are less than current time that means\r\n        // the previous charity expired\r\n        if(now >= currentDate + sendDonationTime) {\r\n           currentDate = now;\r\n           currentCharity = generateNewCharity();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Adds a charity if it is not there already\r\n    * @param _addr charity's donation address\r\n    * @param _name charity's name\r\n    * @param _website charity's website\r\n    * @dev only callable by owner\r\n    */\r\n    function addCharity(address payable _addr, string memory _name, string memory _website) public isOwner {\r\n        if (charities[_addr].isCharity) revert();\r\n        charities[_addr] = Charity(_name, _website, true);\r\n        charityAccts.push(_addr);\r\n    }\r\n\r\n    /**\r\n    * Removes a charity\r\n    * @param _addr charity's donation address\r\n    * @dev only callable by owner\r\n    * @dev https://ethereum.stackexchange.com/questions/1527/how-to-delete-an-element-at-a-certain-index-in-an-array\r\n    */\r\n    function removeCharity(address payable _addr) public isOwner {\r\n       for (uint i = 0; i < charityAccts.length; i++) {\r\n           if (charityAccts[i] == _addr) {\r\n               // Will leave empty space in the array\r\n               delete charityAccts[i];\r\n           }\r\n       }\r\n    }\r\n\r\n    /**\r\n    * Sets time to generate new charity\r\n    * @param _time donation time\r\n    */\r\n    function setSendDonationTime(uint256 _time) public isOwner {\r\n        sendDonationTime = _time;\r\n    }\r\n\r\n\r\n    /**\r\n    * Gets name and website for each charity\r\n    * based on addres\r\n    * @param addr address to get charity by\r\n    * @return addr address of the charity\r\n    * @return name charity name\r\n    * @return website charity's website\r\n    */\r\n    function getCharities(address addr) public view returns (address, string memory, string memory, bool) {\r\n        return (addr, charities[addr].name, charities[addr].website, charities[addr].isCharity);\r\n    }\r\n\r\n    /** \r\n    * Get number of charities\r\n    * @return charityAccts length how many charities there are\r\n    */\r\n    function getNumCharities() public view returns(uint) {\r\n        return charityAccts.length;\r\n    }\r\n    \r\n    /**\r\n    * Sets new owner\r\n    * @param newOwner, new contract owner\r\n    */\r\n    function transferOwner(address newOwner) public isOwner {\r\n        require(msg.sender == owner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"}],\"name\":\"addCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"charities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isCharity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charityAccts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCharity\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateNewCharity\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCharities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumCharities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rDaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendDonationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSendDonationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GiveTogether","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://11b0918e3043ba79ef89ad662b3f7bd373f5cf72116b1410c47ce8e0f5fb23d8"}]}