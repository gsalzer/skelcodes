{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract UnstructuredStorage {\r\n    function set_uint256(bytes32 pos, uint256 value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_uint256(bytes32 pos) internal view returns(uint256 value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n    function set_address(bytes32 pos, address value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_address(bytes32 pos) internal view returns(address value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n\r\n    function set_bool(bytes32 pos, bool value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_bool(bytes32 pos) internal view returns(bool value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n    function set_bytes32(bytes32 pos, bytes32 value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_bytes32(bytes32 pos) internal view returns(bytes32 value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n\r\n    function set_uint256(bytes32 pos, uint256 offset, uint256 value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(add(pos, offset), value)\r\n        }\r\n    }\r\n\r\n    function get_uint256(bytes32 pos, uint256 offset) internal view returns(uint256 value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(add(pos, offset))\r\n        }\r\n    }\r\n\r\n    function set_uint256_list(bytes32 pos, uint256[] memory list) internal {\r\n        uint256 sz = list.length;\r\n        set_uint256(pos, sz);\r\n        for(uint256 i = 0; i<sz; i++) {\r\n            set_uint256(pos, i+1, list[i]);\r\n        }\r\n    }\r\n\r\n    function get_uint256_list(bytes32 pos) internal view returns (uint256[] memory list) {\r\n        uint256 sz = get_uint256(pos);\r\n        list = new uint256[](sz);\r\n        for(uint256 i = 0; i < sz; i++) {\r\n            list[i] = get_uint256(pos, i+1);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Proxy is UnstructuredStorage {\r\n    bytes32 constant PTR_ADMIN = 0x5efc91c2d380347780169c7ab26c240567a20526b30a717ec31dd9612a38a828; // zeropool.proxy.admin\r\n    bytes32 constant PTR_MAINTENANCE = 0xa28fd2c18c6d991da3007d79a4849662f0e1bbda92b900a933c69ba747eaad66; // zeropool.proxy.maintenance\r\n    bytes32 constant PTR_IMPLEMENTATION = 0x3211d1e0eae510fb358ab4a50deb1494201412f1a5fc234fc4bf3430b8b4b768; // zeropool.proxy.implementation\r\n\r\n    function set_admin(address value) internal {\r\n        set_address(PTR_ADMIN, value);\r\n    }\r\n\r\n    function get_admin() internal view returns(address value) {\r\n        value = get_address(PTR_ADMIN);\r\n    }\r\n\r\n    function set_maintenance(bool value) internal {\r\n        set_bool(PTR_MAINTENANCE, value);\r\n    }\r\n\r\n    function get_maintenance() internal view returns(bool value) {\r\n        value = get_bool(PTR_MAINTENANCE);\r\n    }\r\n\r\n    function set_implementation(address value) internal {\r\n        set_address(PTR_IMPLEMENTATION, value);\r\n    }\r\n\r\n    function get_implementation() internal view returns(address value) {\r\n        value = get_address(PTR_IMPLEMENTATION);\r\n    }\r\n\r\n    function admin() external view returns(address) {\r\n        return get_admin();\r\n    }\r\n\r\n    function maintenance() external view returns(bool) {\r\n        return get_maintenance();\r\n    }\r\n\r\n    function implementation() external view returns(address) {\r\n        return get_implementation();\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == get_admin());\r\n        _;\r\n    }\r\n\r\n    function hardfork(address new_impl, bytes calldata init_call) external onlyAdmin returns(bool) {\r\n        set_implementation(new_impl);\r\n        if (init_call.length>0) {\r\n\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let sz := calldatasize()\r\n                calldatacopy(ptr, 0x64,sz)\r\n                let result := delegatecall(gas(), new_impl, ptr, sub(sz, 0x64), 0, 0)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n\r\n                switch result\r\n                case 0 { revert(ptr, size) }\r\n                default { return(ptr, size) }\r\n            }\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function updateAdmin(address new_admin) external onlyAdmin returns(bool) {\r\n        set_admin(new_admin);\r\n        return true;\r\n    }\r\n\r\n    function publishRelease() external onlyAdmin returns(bool) {\r\n        set_admin(address(0));\r\n        set_maintenance(false);\r\n        return true;\r\n    }\r\n\r\n    function released() external view returns(bool) {\r\n        return get_admin() == address(0);\r\n    }\r\n\r\n    function setMaintenance(bool value) external onlyAdmin returns(bool) {\r\n        set_maintenance(value);\r\n        return true;\r\n    }\r\n\r\n    constructor() public {\r\n        set_admin(msg.sender);\r\n    }\r\n\r\n    fallback() external payable {\r\n        require(!get_maintenance() || msg.sender==get_admin(), \"contract is under maintenance\");\r\n        address impl = get_implementation();\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract MainnetProxy is Proxy {}","ABI":"[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"init_call\",\"type\":\"bytes\"}],\"name\":\"hardfork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publishRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMaintenance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MainnetProxy","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://9c530af1f912869ed70136aa7d69c9d80fe466154b12cfd49b3f5cb60adee8a6"}]}