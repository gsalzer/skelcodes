{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.99 <0.6.0;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor (address payable newOwner) public {\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ITicketsStorage {\r\n    function findHappyNumber(uint step) public returns (uint);\r\n}\r\n\r\n\r\ncontract Funds is Ownable {\r\n    using SafeMath for uint;\r\n    ITicketsStorage private m_tickets;\r\n\r\n    uint private ticketPrice = 0.00001 ether;\r\n    uint private botComission = 0.002 ether;\r\n    address payable public croupier;\r\n\r\n    mapping(address => bool) public administrators;\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => bool) private parentContract;\r\n\r\n    mapping(uint => mapping(address => uint)) private funds;\r\n    //type fund -> contract address -> amount\r\n\r\n    //types of fund:\r\n    // 0 - day, 1 - week, 2 - month, 3 - year\r\n    enum FundType {DAY, WEEK, MONTH, YEAR}\r\n    FundType fundType;\r\n\r\n    mapping(address => mapping(uint => uint)) private _percent;\r\n    // contractAddress -> type fund -> percent\r\n\r\n    struct Winner {\r\n        uint happyTicket;\r\n        uint amount;\r\n        address wallet;\r\n        uint playerIndex;\r\n        uint daySeek;\r\n    }\r\n    mapping(address => mapping(uint => mapping(uint => Winner))) private winners;\r\n    // contractAddress -> fundType -> number day -> Winner\r\n\r\n    struct Player {\r\n        address payable wallet;\r\n        uint startNumber;\r\n        uint endNumber;\r\n    }\r\n    mapping(address => mapping(uint => mapping(uint => Player[]))) private playersByDay;\r\n    // contractAddress -> fundType -> number day -> Player\r\n\r\n    modifier onlyAdministratorOrWhitelist(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress] || whitelist[_customerAddress] || isOwner());\r\n        _;\r\n    }\r\n\r\n    modifier onlyParentContract {\r\n        require(parentContract[msg.sender] || isOwner(), \"onlyParentContract methods called by non - parent of contract.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCroupier {\r\n        require(msg.sender == croupier || isOwner(), \"only croupier methods, called by non-croupier.\");\r\n        _;\r\n    }\r\n\r\n    event AddedPlayer(uint numberDay, address indexed contractAddress, uint _fundType, address indexed addressPlayer);\r\n    event SendPrizeToWinnerWallet(address indexed contractAddress, uint fundType, uint dayStart, address indexed addressPlayer, uint amount);\r\n    event PutAmountToFund(address indexed contractAddress, uint amount, uint fundType, address indexed sender);\r\n    event GetAmountFromFund(address indexed contractAddress, uint amount, uint fundType, address indexed beneficiary, address indexed sender);\r\n    event DistribBonusOk(address indexed contractAddress, uint fundType, uint dayStart);\r\n    event DistribBonusFail(address indexed contractAddress, uint fundType, uint dayStart);\r\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\r\n    event WriteWinner(address indexed contractAddress, uint fundType, uint dayStart, uint happyTicket, uint countPlayers);\r\n    event ChangeValue(address indexed sender, uint newMinPrice, uint oldMinPrice);\r\n\r\n    constructor() public\r\n    Ownable(msg.sender)\r\n    { }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    function addPlayer(address payable _player, address _contract, uint _fundType, uint _ethValue) internal {\r\n        require(_player != address(0) && _contract != address(0));\r\n        uint numberDay = getDayNumber(now);\r\n        uint start = 0;\r\n        uint length = countPlayerByDay(_contract, _fundType, numberDay);\r\n        if (length > 0) {\r\n            (,,start) = playerInfo(_contract, _fundType, numberDay, (length-1));\r\n            start = start.add(1);\r\n        }\r\n\r\n        playersByDay[_contract][_fundType][numberDay].push(Player({\r\n            wallet : _player,\r\n            startNumber : start,\r\n            endNumber : start.add(_ethValue.div(ticketPrice))\r\n            }));\r\n\r\n        emit AddedPlayer(numberDay, _contract, _fundType, _player);\r\n    }\r\n\r\n    function countPlayerByDay(address _contract, uint _fundType, uint _numberDay) public view returns (uint) {\r\n        return playersByDay[_contract][_fundType][_numberDay].length;\r\n    }\r\n\r\n    function getPlayerByDay(address _contract, uint _fundType, uint _numberDay, uint _index) public view returns\r\n    (Player memory player) {\r\n        return playersByDay[_contract][_fundType][_numberDay][_index];\r\n    }\r\n\r\n    function depositFunds(uint _fundType, address _contract, address payable _player) onlyAdministratorOrWhitelist payable public {\r\n        require(_contract != address(0));\r\n        uint amount = msg.value;\r\n        if (amount > 0) {\r\n            funds[_fundType][_contract] = funds[_fundType][_contract].add(amount);\r\n            addPlayer(_player, _contract, _fundType, amount);\r\n            emit PutAmountToFund(_contract, amount, _fundType, msg.sender);\r\n        }\r\n    }\r\n\r\n    function withdrawFunds(uint _fundType, address _contract, uint _amount, address payable _beneficiary) onlyParentContract public {\r\n        require(_contract != address(0));\r\n        require(balanceAll() >= _amount && _amount > 0);\r\n        require(funds[_fundType][_contract] >= _amount);\r\n\r\n        funds[_fundType][_contract] = funds[_fundType][_contract].sub(_amount);\r\n        _beneficiary.transfer(_amount);\r\n        emit GetAmountFromFund(_contract, _amount, _fundType, _beneficiary, msg.sender);\r\n    }\r\n\r\n    function getDayNumber(uint256 _date) public pure returns (uint256 result) {\r\n        result = _date.div(1 days);\r\n    }\r\n\r\n    function getCurrentDayNumber() public view returns (uint256 result) {\r\n        result = now.div(1 days);\r\n    }\r\n\r\n    function _writeWinner(address _contract, uint _fundType, uint _dayStart, uint _happyTicket, uint _daySeek) internal {\r\n        Winner storage winner = winners[_contract][_fundType][_dayStart];\r\n        winner.happyTicket = _happyTicket;\r\n        winner.amount = funds[_fundType][_contract].mul(4).div(5);\r\n        winner.daySeek = _daySeek;\r\n    }\r\n\r\n    function _defineWinnerOfDay(address _contract, uint _dayStart) internal {\r\n        _defineWinner(_contract, uint(FundType.DAY), _dayStart, 0);\r\n    }\r\n\r\n    function _defineWinnerOfWeek(address _contract, uint _dayStart) internal {\r\n        uint daySeek = getRandomNumber(6);\r\n        _defineWinner(_contract, uint(FundType.WEEK), _dayStart, daySeek);\r\n    }\r\n\r\n    function _defineWinnerOfMonth(address _contract, uint _dayStart) internal {\r\n        uint daySeek = getRandomNumber(30);\r\n        _defineWinner(_contract, uint(FundType.MONTH), _dayStart, daySeek);\r\n    }\r\n\r\n    function _defineWinnerOfYear(address _contract, uint _dayStart) internal {\r\n        uint daySeek = getRandomNumber(365);\r\n        _defineWinner(_contract, uint(FundType.YEAR), _dayStart, daySeek);\r\n    }\r\n\r\n    function _defineWinner(address _contract, uint _fundType, uint _dayStart, uint _daySeek) internal {\r\n        require(_dayStart >= _daySeek);\r\n        _getTicketDayWinner(_contract, _fundType, _dayStart, _daySeek);\r\n    }\r\n\r\n    function _getTicketDayWinner(address _contract, uint _fundType, uint _dayStart, uint _daySeek) internal {\r\n        uint countPlayers = countPlayerByDay(_contract, _fundType, _dayStart.sub(_daySeek));\r\n        uint ticketsCount = 0;\r\n        uint _happyTicket = 0;\r\n        if (countPlayers > 0) {\r\n            (,,ticketsCount) = playerInfo(_contract, _fundType, _dayStart.sub(_daySeek), countPlayers-1);\r\n        } else {\r\n            _daySeek = 0;\r\n            countPlayers = countPlayerByDay(_contract, _fundType, _dayStart);\r\n            if(countPlayers > 0) {\r\n                (,,ticketsCount) = playerInfo(_contract, _fundType, _dayStart, countPlayers-1);\r\n            }\r\n        }\r\n        _happyTicket = getRandomNumber(ticketsCount);\r\n        if (_happyTicket > 0) {\r\n            _writeWinner(_contract, _fundType, _dayStart, _happyTicket, _daySeek);\r\n            emit WriteWinner(_contract, _fundType, _dayStart, _happyTicket, countPlayers);\r\n        }\r\n    }\r\n\r\n    function _sendCroupier(address _contract, uint _fundType) internal {\r\n        uint fundAmount = funds[_fundType][_contract];\r\n        if (fundAmount > botComission) { //for test's\r\n            if (croupier.send(botComission)) {\r\n                funds[_fundType][_contract] = funds[_fundType][_contract].sub(botComission);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRandomNumber(uint value) internal returns (uint) {\r\n        if (address(m_tickets) != address(0) ) {\r\n            return m_tickets.findHappyNumber(value);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setAdministrator(address _newAdmin, bool _status) onlyOwner public {\r\n        administrators[_newAdmin] = _status;\r\n    }\r\n\r\n    function setWhitelist(address _newUser, bool _status) onlyParentContract public {\r\n        whitelist[_newUser] = _status;\r\n    }\r\n\r\n    function setParentContract(address _contract, bool _status) onlyOwner public {\r\n        parentContract[_contract] = _status;\r\n    }\r\n\r\n    function setCroupierWallet(address payable _newWallet) external onlyOwner {\r\n        require(_newWallet != address(0));\r\n        address payable _oldWallet = croupier;\r\n        croupier = _newWallet;\r\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\r\n    }\r\n\r\n    function balanceAll() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function balanceOfFund(uint _fundType, address _contract) public view returns (uint _balance) {\r\n        _balance = funds[_fundType][_contract];\r\n    }\r\n\r\n    function makeBonus(uint _fundType, address _contract, uint _dayStart) onlyCroupier public {\r\n        require(_fundType >= 0 && _fundType < 4);\r\n        _distribBonus(_fundType, _contract, _dayStart);\r\n        _sendCroupier(_contract, _fundType);\r\n    }\r\n\r\n    function sendBonus(uint _fundType, address _contract, uint _dayStart, uint _playerIndex) onlyCroupier public {\r\n        require(_fundType >= 0 && _fundType < 4);\r\n        if (countPlayerByDay(_contract, _fundType, _dayStart) > 0) {\r\n            Winner storage winner = winners[_contract][_fundType][_dayStart];\r\n            (address payable playerWallet,,) = playerInfo(_contract, _fundType, _dayStart, _playerIndex);\r\n            winner.wallet = playerWallet;\r\n            winner.playerIndex = _playerIndex;\r\n            uint bonus = winner.amount;\r\n            funds[_fundType][_contract] = funds[_fundType][_contract].sub(bonus);\r\n            _transferPrize(_contract, _fundType, _dayStart, playerWallet, bonus);\r\n            _sendCroupier(_contract, _fundType);\r\n        }\r\n    }\r\n\r\n    function _transferPrize(address _contract, uint _fundType, uint _dayStart, address payable _wallet, uint _bonus) internal {\r\n        if (_wallet != address(0) && _bonus > 0 && _bonus <= balanceAll()) {\r\n            _wallet.transfer(_bonus);\r\n            emit SendPrizeToWinnerWallet(_contract, _fundType, _dayStart, _wallet, _bonus);\r\n        }\r\n    }\r\n\r\n    function _distribBonus(uint _fundType, address _contract, uint _dayStart) internal {\r\n        if(funds[_fundType][_contract] > 0) {\r\n            if (_fundType == uint(FundType.DAY)) {\r\n                _defineWinnerOfDay(_contract, _dayStart);\r\n            }\r\n            if (_fundType == uint(FundType.WEEK)) {\r\n                _defineWinnerOfWeek(_contract, _dayStart);\r\n            }\r\n            if (_fundType == uint(FundType.MONTH)) {\r\n                _defineWinnerOfMonth(_contract, _dayStart);\r\n            }\r\n            if (_fundType == uint(FundType.YEAR)) {\r\n                _defineWinnerOfYear(_contract, _dayStart);\r\n            }\r\n            emit DistribBonusOk(_contract, _fundType, _dayStart);\r\n        } else {\r\n            emit DistribBonusFail(_contract, _fundType, _dayStart);\r\n        }\r\n    }\r\n\r\n    function setPercentFund(address _contractAddress, uint _fundType, uint _newPercent) onlyParentContract public {\r\n        require(_newPercent >= 0);\r\n        _percent[_contractAddress][_fundType] = _newPercent;\r\n    }\r\n\r\n    function getPercentFund(address _contractAddress, uint _fundType) public view returns(uint) {\r\n        return _percent[_contractAddress][_fundType];\r\n    }\r\n\r\n    function setTicketsStorage(address _addressTicketsStorage) external onlyOwner {\r\n        require(_addressTicketsStorage != address(0));\r\n        m_tickets = ITicketsStorage(_addressTicketsStorage);\r\n    }\r\n\r\n    function finish() external onlyOwner {\r\n        address payable __owner = owner();\r\n        selfdestruct(__owner);\r\n    }\r\n\r\n    function winnerInfo(address _contractAddress, uint _fundType, uint _dayNumber) public view returns (\r\n        address _wallet,\r\n        uint _happyTicket,\r\n        uint _amount,\r\n        uint _playerIndex,\r\n        uint _daySeek\r\n    ) {\r\n        Winner memory winner = winners[_contractAddress][_fundType][_dayNumber];\r\n        _wallet = winner.wallet;\r\n        _happyTicket = winner.happyTicket;\r\n        _amount = winner.amount;\r\n        _playerIndex = winner.playerIndex;\r\n        _daySeek = winner.daySeek;\r\n    }\r\n\r\n    function playerInfo(address _contractAddress, uint _fundType, uint _dayNumber, uint _index) public view returns (\r\n        address payable _wallet,\r\n        uint _startNumber,\r\n        uint _endNumber\r\n    ) {\r\n        if (playersByDay[_contractAddress][_fundType][_dayNumber].length > 0) {\r\n            Player memory player = playersByDay[_contractAddress][_fundType][_dayNumber][_index];\r\n            _wallet = player.wallet;\r\n            _startNumber = player.startNumber;\r\n            _endNumber = player.endNumber;\r\n        }\r\n    }\r\n\r\n    function setBotComission(uint _newValue) external onlyOwner {\r\n        require(_newValue > 0);\r\n        uint _oldValue = botComission;\r\n        botComission = _newValue;\r\n        emit ChangeValue(msg.sender, _newValue, _oldValue);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberDay\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressPlayer\",\"type\":\"address\"}],\"name\":\"AddedPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinPrice\",\"type\":\"uint256\"}],\"name\":\"ChangeValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dayStart\",\"type\":\"uint256\"}],\"name\":\"DistribBonusFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dayStart\",\"type\":\"uint256\"}],\"name\":\"DistribBonusOk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"GetAmountFromFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PutAmountToFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dayStart\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressPlayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendPrizeToWinnerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dayStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"happyTicket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countPlayers\",\"type\":\"uint256\"}],\"name\":\"WriteWinner\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"balanceOfFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberDay\",\"type\":\"uint256\"}],\"name\":\"countPlayerByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"depositFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDayNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getDayNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"}],\"name\":\"getPercentFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPlayerByDay\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct Funds.Player\",\"name\":\"player\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dayStart\",\"type\":\"uint256\"}],\"name\":\"makeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"playerInfo\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dayStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerIndex\",\"type\":\"uint256\"}],\"name\":\"sendBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setBotComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setCroupierWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setParentContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"setPercentFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressTicketsStorage\",\"type\":\"address\"}],\"name\":\"setTicketsStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayNumber\",\"type\":\"uint256\"}],\"name\":\"winnerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_happyTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_playerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daySeek\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Funds","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://cfe90859624586fe448559c31cd762afb559028663513bb16a5b2f8f7636cced"}]}