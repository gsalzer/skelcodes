{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/role/interface/IBaseOperators.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n    function isAdmin(address _account) external view returns (bool);\r\n    function isSystem(address _account) external view returns (bool);\r\n    function confirmFor(address _address) external;\r\n}\r\n\r\n// File: contracts/helpers/Initializable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  modifier whenInitialized() {\r\n    require(initialized, \"Initializable: Contract has not been initialized\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Initializable: Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  function isInitialized() public view returns (bool) {\r\n    return initialized;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/role/Operatorable.sol\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns(address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns(address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Whitelist contract with whitelist/unwhitelist functionality for particular addresses.  Whitelisting/unwhitelisting\r\n        is controlled by operators/system in Operatorable contract which is initialized with the relevant BaseOperators address.\r\n */\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract Whitelist is Operatorable {\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    event WhitelistToggled(address indexed account, bool whitelisted);\r\n\r\n    /**\r\n     * @dev Reverts if _account is not whitelisted.\r\n     * @param _account address to determine if whitelisted.\r\n     */\r\n    modifier onlyWhitelisted(address _account) {\r\n        require(isWhitelisted(_account), \"Whitelist: account is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if address is empty.\r\n     * @param _address address to validate.\r\n     */\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"Whitelist: invalid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Getter to determine if address is whitelisted.\r\n    * @param _account address to determine if whitelisted or not.\r\n    * @return bool is whitelisted\r\n    */\r\n    function isWhitelisted(address _account) public view returns (bool) {\r\n        return whitelisted[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle whitelisted/unwhitelisted on _account address, with _toggled being true/false.\r\n     * @param _account address to toggle.\r\n     * @param _toggled whitelist/unwhitelist.\r\n     */\r\n    function toggleWhitelist(address _account, bool _toggled)\r\n        public\r\n        onlyValidAddress(_account)\r\n        onlyOperatorOrSystem\r\n    {\r\n        whitelisted[_account] = _toggled;\r\n        emit WhitelistToggled(_account, whitelisted[_account]);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch whitelisted/unwhitelist multiple addresses, with _toggled being true/false.\r\n     * @param _addresses address array.\r\n     * @param _toggled whitelist/unwhitelist.\r\n     */\r\n    function batchToggleWhitelist(address[] memory _addresses, bool _toggled) public {\r\n        require(_addresses.length <= 256, \"Whitelist: batch count is greater than 256\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            toggleWhitelist(_addresses[i], _toggled);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/edge/ERC20/ERC20Whitelist.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ERC20Whitelist is ERC20, Whitelist {\r\n    function transfer(address to, uint256 value) public onlyWhitelisted(msg.sender) onlyWhitelisted(to) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public onlyWhitelisted(msg.sender) onlyWhitelisted(spender) returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public onlyWhitelisted(msg.sender) onlyWhitelisted(from) onlyWhitelisted(to) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public onlyWhitelisted(spender) onlyWhitelisted(msg.sender) returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public onlyWhitelisted(spender) onlyWhitelisted(msg.sender) returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal onlyWhitelisted(account) {\r\n        super._burn(account, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal onlyWhitelisted(msg.sender) onlyWhitelisted(account) {\r\n        super._burnFrom(account, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal onlyWhitelisted(account) {\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @dev Contract module which allows children to implement an emergency stop\r\n *      mechanism that can be triggered by an authorized account in the Operatorable\r\n *      contract.\r\n */\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract Pausable is Operatorable {\r\n    event Paused(address indexed account);\r\n    event Unpaused(address indexed account);\r\n\r\n    bool internal _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by operator to pause child contract. The contract\r\n     *      must not already be paused.\r\n     */\r\n    function pause() public onlyOperator whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /** @dev Called by operator to pause child contract. The contract\r\n     *       must already be paused.\r\n     */\r\n    function unpause() public onlyOperator whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is already paused or not.\r\n     */\r\n    function isNotPaused() public view returns(bool){\r\n        return !_paused;\r\n    }\r\n}\r\n\r\n// File: contracts/edge/ERC20/ERC20Pausable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n   function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal whenNotPaused {\r\n        super._burn(account, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal whenNotPaused {\r\n        super._burnFrom(account, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal whenNotPaused {\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/Freezable.sol\r\n\r\n/**\r\n * @title Freezable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Freezable contract to freeze functionality for particular addresses.  Freezing/unfreezing is controlled\r\n *       by operators in Operatorable contract which is initialized with the relevant BaseOperators address.\r\n */\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract Freezable is Operatorable {\r\n    mapping(address => bool) public frozen;\r\n\r\n    event FreezeToggled(address indexed account, bool frozen);\r\n\r\n    /**\r\n     * @dev Reverts if address is empty.\r\n     * @param _address address to validate.\r\n     */\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"Freezable: Empty address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if account address is frozen.\r\n     * @param _account address to validate is not frozen.\r\n     */\r\n    modifier whenNotFrozen(address _account) {\r\n        require(!frozen[_account], \"Freezable: account is frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if account address is not frozen.\r\n     * @param _account address to validate is frozen.\r\n     */\r\n    modifier whenFrozen(address _account) {\r\n        require(frozen[_account], \"Freezable: account is not frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if address is frozen.\r\n     * @param _account address to determine if frozen or not.\r\n     * @return bool is frozen\r\n     */\r\n    function isFrozen(address _account) public view returns (bool) {\r\n        return frozen[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle freeze/unfreeze on _account address, with _toggled being true/false.\r\n     * @param _account address to toggle.\r\n     * @param _toggled freeze/unfreeze.\r\n     */\r\n    function toggleFreeze(address _account, bool _toggled)\r\n        public\r\n        onlyValidAddress(_account)\r\n        onlyOperator\r\n    {\r\n        frozen[_account] = _toggled;\r\n        emit FreezeToggled(_account, frozen[_account]);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch freeze/unfreeze multiple addresses, with _toggled being true/false.\r\n     * @param _addresses address array.\r\n     * @param _toggled freeze/unfreeze.\r\n     */\r\n    function batchToggleFreeze(address[] memory _addresses, bool _toggled) public {\r\n        require(_addresses.length <= 256, 'Freezable: batch count is greater than 256');\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            toggleFreeze(_addresses[i], _toggled);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/edge/ERC20/ERC20Freezable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ERC20Freezable is ERC20, Freezable {\r\n   function transfer(address to, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(to) returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotFrozen(msg.sender) whenNotFrozen(from) whenNotFrozen(to) returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotFrozen(msg.sender) whenNotFrozen(spender) returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal whenNotFrozen(msg.sender) whenNotFrozen(account) {\r\n        super._burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/edge/ERC20/ERC20Mintable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ERC20Mintable is ERC20, Operatorable {\r\n    function _mint(address account, uint256 amount) internal onlyOperatorOrSystem {\r\n        require(amount > 0, 'ERC20Mintable: amount has to be greater than 0');\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/edge/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\ncontract ERC20Burnable is ERC20, Operatorable {\r\n    function _burnFor(address account, uint256 amount) internal onlyOperator {\r\n        super._burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/edge/EdgeToken.sol\r\n\r\n/**\r\n * @title EdgeToken\r\n * @author Connor Howe <connor.howe@sygnum.com>\r\n * @dev EdgeToken is a ERC20 token that is upgradable and pausable.\r\n *      User addresses require to be whitelisted for transfers\r\n *      to execute.  Addresses can be frozen, and funds from\r\n *      particular addresses can be confiscated.\r\n */\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EdgeToken is ERC20, ERC20Detailed(\"Digital CHF\", \"DCHF\", 2), Initializable, ERC20Whitelist,\r\n                        ERC20Pausable, ERC20Freezable, ERC20Mintable, ERC20Burnable {\r\n\r\n    event Minted(address indexed minter, address indexed account, uint256 value);\r\n    event Burned(address indexed burner, uint256 value);\r\n    event BurnedFor(address indexed burner, address indexed account, uint256 value);\r\n\r\n    uint16 constant BATCH_LIMIT = 256;\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, only called once.\r\n     * @param _baseOperators Address of baseOperators contract.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n    }\r\n\r\n    /**\r\n    * @dev Burn.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function burn(uint256 _amount) public {\r\n        require(!isFrozen(msg.sender), \"EdgeToken: Account must not be frozen\");\r\n        super._burn(msg.sender, _amount);\r\n        emit Burned(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev BurnFor.\r\n    * @param _account Account to burn tokens from.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function burnFor(address _account, uint256 _amount) public {\r\n        super._burnFor(_account, _amount);\r\n        emit BurnedFor(msg.sender, _account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev burnFrom.\r\n    * @param _account Account to burn from.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function burnFrom(address _account, uint256 _amount) public {\r\n        super._burnFrom(_account, _amount);\r\n        emit Burned(_account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Mint.\r\n    * @param _account Address to mint tokens to.\r\n    * @param _amount Amount to mint.\r\n    */\r\n    function mint(address _account, uint256 _amount) public {\r\n        if(isSystem(msg.sender)){\r\n            require(!isFrozen(_account), 'EdgeToken: Account must be frozen if system calling.');\r\n        }\r\n        super._mint(_account, _amount);\r\n        emit Minted(msg.sender, _account, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev confiscate.\r\n    * @param _confiscatee Account to confiscate funds from.\r\n    * @param _receiver Account to transfer confiscated funds too.\r\n    * @param _amount Amount of tokens to burn.\r\n    */\r\n    function confiscate(address _confiscatee, address _receiver, uint256 _amount)\r\n        public\r\n        onlyOperator\r\n        whenNotPaused\r\n        onlyWhitelisted(_receiver)\r\n        onlyWhitelisted(_confiscatee)\r\n    {\r\n        super._transfer(_confiscatee, _receiver, _amount);\r\n     }\r\n\r\n    /**\r\n     * @dev Batch burn from an operator or admin address.\r\n     * @param _recipients Array of recipient addresses.\r\n     * @param _values Array of amount to burn.\r\n     */\r\n    function batchBurnFor(address[] memory _recipients, uint256[] memory _values) public returns (bool) {\r\n        require(_recipients.length == _values.length, \"EdgeToken: values and recipients are not equal.\");\r\n        require(_recipients.length <= BATCH_LIMIT, \"EdgeToken: batch count is greater than BATCH_LIMIT.\");\r\n        for(uint256 i = 0; i < _recipients.length; i++) {\r\n            burnFor(_recipients[i], _values[i]);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * @dev Batch mint to a maximum of 255 addresses, for a custom amount for each address.\r\n     * @param _recipients Array of recipient addresses.\r\n     * @param _values Array of amount to mint.\r\n     */\r\n    function batchMint(address[] memory _recipients, uint256[] memory _values) public returns (bool) {\r\n        require(_recipients.length == _values.length, \"EdgeToken: values and recipients are not equal.\");\r\n        require(_recipients.length <= BATCH_LIMIT, \"EdgeToken: greater than BATCH_LIMIT.\");\r\n        for(uint256 i = 0; i < _recipients.length; i++) {\r\n            mint(_recipients[i], _values[i]);\r\n        }\r\n    }\r\n\r\n     /**\r\n    * @dev Batch confiscate to a macimum of 255 addresses. \r\n    * @param _confiscatees array addresses who's funds are being confiscated\r\n    * @param _receivers array addresses who's receiving the funds\r\n    * @param _values array of values of funds being confiscated\r\n    */\r\n    function batchConfiscate(address[] memory _confiscatees, address[] memory _receivers, uint256[] memory _values) public returns (bool) {\r\n        require(_confiscatees.length == _values.length && _receivers.length == _values.length, \"EdgeToken: values and recipients are not equal\");\r\n        require(_confiscatees.length <= BATCH_LIMIT, \"EdgeToken: batch count is greater than BATCH_LIMIT\");\r\n        for(uint256 i = 0; i < _confiscatees.length; i++) {\r\n            confiscate(_confiscatees[i], _receivers[i], _values[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_confiscatees\",\"type\":\"address[]\"},{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchConfiscate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_toggled\",\"type\":\"bool\"}],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNotPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_toggled\",\"type\":\"bool\"}],\"name\":\"batchToggleFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_toggled\",\"type\":\"bool\"}],\"name\":\"toggleFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_confiscatee\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"confiscate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_toggled\",\"type\":\"bool\"}],\"name\":\"batchToggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"EdgeToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://4cba08f9712053af01e3219da7c1ab3768bd8997dea79ebd2e22a014c5ad9464"}]}