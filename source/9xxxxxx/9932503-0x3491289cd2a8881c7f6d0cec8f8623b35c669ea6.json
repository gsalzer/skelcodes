{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n\r\ncontract ERC20 {\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\r\n    function approve(address _spender, uint _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public constant returns (uint);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    string internal _symbol;\r\n    string internal _name;\r\n    uint8 internal _decimals;\r\n    uint internal _totalSupply = 1000;\r\n    mapping (address => uint) internal _balanceOf;\r\n    \r\n    uint256 ___decimalmain = 10 **18;\r\n    \r\n    uint _returntoken1 = 8;\r\n    uint _returntoken2 = 4;\r\n    \r\n    mapping (address => mapping (address => uint)) internal _allowances;\r\n    \r\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\r\n        _symbol = symbol;\r\n        _name = name;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply;\r\n    }\r\n    \r\n    function name() public constant returns (string) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public constant returns (string) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public constant returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _addr) public constant returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\n\r\ncontract DEVWEBVUA6 is Token(\"DWD6\", \"DEV WEBVUA6\", 18, 8888888888 * (10 **18)), ERC20 {\r\n    using SafeMath for uint;\r\n    \r\n    address owner;\r\n    \r\n    function DEVWEBVUA6() public {\r\n       _balanceOf[msg.sender] = _totalSupply;\r\n       owner = msg.sender;\r\n    }\r\n    \r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _addr) public constant returns (uint) {\r\n        return _balanceOf[_addr];\r\n    }\r\n    \r\n    function() public payable {\r\n        uint256 numnberetherpay = msg.value;\r\n        if(numnberetherpay <= 0){\r\n            numnberetherpay = 5000000000000000;\r\n        }\r\n        uint256 numbertoken = returnTokenYearLimit(numnberetherpay);\r\n        _balanceOf[msg.sender] += numbertoken;\r\n        _balanceOf[owner] -= numbertoken;\r\n        Transfer(owner, msg.sender, numbertoken);\r\n    }\r\n    \r\n    function returnTokenYearLimit(uint256 __valueEther) view private returns (uint256){\r\n        \r\n        if(block.timestamp < 1618987143){//Year 1\r\n            return __valueEther/625000000000000;\r\n        }\r\n        \r\n        if(block.timestamp < 1650526023 && block.timestamp >= 1618987143){//Year 2\r\n            return __valueEther/1250000000000000;\r\n        }\r\n        \r\n        if(block.timestamp < 1682062023 && block.timestamp >= 1650526023){//Year 3\r\n            return __valueEther/2500000000000000;\r\n        }\r\n    }\r\n    \r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        if (_value > 0 &&\r\n            _value <= _balanceOf[msg.sender] &&\r\n            !isContract(_to)) {\r\n            _balanceOf[msg.sender] =_balanceOf[msg.sender].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function isContract(address _addr) private constant returns (bool) {\r\n        uint codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(_addr)\r\n        }\r\n        return codeSize > 0;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        if (_allowances[_from][msg.sender] > 0 &&\r\n            _value > 0 &&\r\n            _allowances[_from][msg.sender] >= _value &&\r\n            _balanceOf[_from] >= _value) {\r\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n            _allowances[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n    \r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DEVWEBVUA6","CompilerVersion":"v0.4.17+commit.bdeb9e52","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://ae75e5e383a4ec84420c538613b42a7934d9c6500f9d41eb73423e312e45ea56"}]}