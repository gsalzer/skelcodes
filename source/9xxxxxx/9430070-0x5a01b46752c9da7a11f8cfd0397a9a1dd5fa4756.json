{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-02-06\r\n*/\r\n\r\n// File: contracts/interfaces/IModule.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface that every module contract should implement\r\n */\r\ninterface IModule {\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() external pure returns(bytes4 initFunction);\r\n\r\n    /**\r\n     * @notice Return the permission flags that are associated with a module\r\n     */\r\n    function getPermissions() external view returns(bytes32[] memory permissions);\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n    event Pause(address account);\r\n    event Unpause(address account);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal whenNotPaused {\r\n        paused = true;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Pause(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal whenPaused {\r\n        paused = false;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Unpause(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IModuleFactory.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface that every module factory contract should implement\r\n */\r\ninterface IModuleFactory {\r\n    event ChangeSetupCost(uint256 _oldSetupCost, uint256 _newSetupCost);\r\n    event ChangeCostType(bool _isOldCostInPoly, bool _isNewCostInPoly);\r\n    event GenerateModuleFromFactory(\r\n        address _module,\r\n        bytes32 indexed _moduleName,\r\n        address indexed _moduleFactory,\r\n        address _creator,\r\n        uint256 _setupCost,\r\n        uint256 _setupCostInPoly\r\n    );\r\n    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\r\n\r\n    //Should create an instance of the Module, or throw\r\n    function deploy(bytes calldata _data) external returns(address moduleAddress);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function version() external view returns(string memory moduleVersion);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function name() external view returns(bytes32 moduleName);\r\n\r\n    /**\r\n     * @notice Returns the title associated with the module\r\n     */\r\n    function title() external view returns(string memory moduleTitle);\r\n\r\n    /**\r\n     * @notice Returns the description associated with the module\r\n     */\r\n    function description() external view returns(string memory moduleDescription);\r\n\r\n    /**\r\n     * @notice Get the setup cost of the module in USD\r\n     */\r\n    function setupCost() external returns(uint256 usdSetupCost);\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getTypes() external view returns(uint8[] memory moduleTypes);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() external view returns(bytes32[] memory moduleTags);\r\n\r\n    /**\r\n     * @notice Used to change the setup fee\r\n     * @param _newSetupCost New setup fee\r\n     */\r\n    function changeSetupCost(uint256 _newSetupCost) external;\r\n\r\n    /**\r\n     * @notice Used to change the currency and amount setup cost\r\n     * @param _setupCost new setup cost\r\n     * @param _isCostInPoly new setup cost currency. USD or POLY\r\n     */\r\n    function changeCostAndType(uint256 _setupCost, bool _isCostInPoly) external;\r\n\r\n    /**\r\n     * @notice Function use to change the lower and upper bound of the compatible version st\r\n     * @param _boundType Type of bound\r\n     * @param _newVersion New version array\r\n     */\r\n    function changeSTVersionBounds(string calldata _boundType, uint8[] calldata _newVersion) external;\r\n\r\n    /**\r\n     * @notice Get the setup cost of the module\r\n     */\r\n    function setupCostInPoly() external returns (uint256 polySetupCost);\r\n\r\n    /**\r\n     * @notice Used to get the lower bound\r\n     * @return Lower bound\r\n     */\r\n    function getLowerSTVersionBounds() external view returns(uint8[] memory lowerBounds);\r\n\r\n    /**\r\n     * @notice Used to get the upper bound\r\n     * @return Upper bound\r\n     */\r\n    function getUpperSTVersionBounds() external view returns(uint8[] memory upperBounds);\r\n\r\n    /**\r\n     * @notice Updates the tags of the ModuleFactory\r\n     * @param _tagsData New list of tags\r\n     */\r\n    function changeTags(bytes32[] calldata _tagsData) external;\r\n\r\n    /**\r\n     * @notice Updates the name of the ModuleFactory\r\n     * @param _name New name that will replace the old one.\r\n     */\r\n    function changeName(bytes32 _name) external;\r\n\r\n    /**\r\n     * @notice Updates the description of the ModuleFactory\r\n     * @param _description New description that will replace the old one.\r\n     */\r\n    function changeDescription(string calldata _description) external;\r\n\r\n    /**\r\n     * @notice Updates the title of the ModuleFactory\r\n     * @param _title New Title that will replace the old one.\r\n     */\r\n    function changeTitle(string calldata _title) external;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IDataStore.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IDataStore {\r\n    /**\r\n     * @dev Changes security token atatched to this data store\r\n     * @param _securityToken address of the security token\r\n     */\r\n    function setSecurityToken(address _securityToken) external;\r\n\r\n    /**\r\n     * @dev Stores a uint256 data against a key\r\n     * @param _key Unique key to identify the data\r\n     * @param _data Data to be stored against the key\r\n     */\r\n    function setUint256(bytes32 _key, uint256 _data) external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _data) external;\r\n\r\n    function setAddress(bytes32 _key, address _data) external;\r\n\r\n    function setString(bytes32 _key, string calldata _data) external;\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _data) external;\r\n\r\n    function setBool(bytes32 _key, bool _data) external;\r\n\r\n    /**\r\n     * @dev Stores a uint256 array against a key\r\n     * @param _key Unique key to identify the array\r\n     * @param _data Array to be stored against the key\r\n     */\r\n    function setUint256Array(bytes32 _key, uint256[] calldata _data) external;\r\n\r\n    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external ;\r\n\r\n    function setAddressArray(bytes32 _key, address[] calldata _data) external;\r\n\r\n    function setBoolArray(bytes32 _key, bool[] calldata _data) external;\r\n\r\n    /**\r\n     * @dev Inserts a uint256 element to the array identified by the key\r\n     * @param _key Unique key to identify the array\r\n     * @param _data Element to push into the array\r\n     */\r\n    function insertUint256(bytes32 _key, uint256 _data) external;\r\n\r\n    function insertBytes32(bytes32 _key, bytes32 _data) external;\r\n\r\n    function insertAddress(bytes32 _key, address _data) external;\r\n\r\n    function insertBool(bytes32 _key, bool _data) external;\r\n\r\n    /**\r\n     * @dev Deletes an element from the array identified by the key.\r\n     * When an element is deleted from an Array, last element of that array is moved to the index of deleted element.\r\n     * @param _key Unique key to identify the array\r\n     * @param _index Index of the element to delete\r\n     */\r\n    function deleteUint256(bytes32 _key, uint256 _index) external;\r\n\r\n    function deleteBytes32(bytes32 _key, uint256 _index) external;\r\n\r\n    function deleteAddress(bytes32 _key, uint256 _index) external;\r\n\r\n    function deleteBool(bytes32 _key, uint256 _index) external;\r\n\r\n    /**\r\n     * @dev Stores multiple uint256 data against respective keys\r\n     * @param _keys Array of keys to identify the data\r\n     * @param _data Array of data to be stored against the respective keys\r\n     */\r\n    function setUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\r\n\r\n    function setBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\r\n\r\n    function setAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\r\n\r\n    function setBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\r\n\r\n    /**\r\n     * @dev Inserts multiple uint256 elements to the array identified by the respective keys\r\n     * @param _keys Array of keys to identify the data\r\n     * @param _data Array of data to be inserted in arrays of the respective keys\r\n     */\r\n    function insertUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\r\n\r\n    function insertBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\r\n\r\n    function insertAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\r\n\r\n    function insertBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\r\n\r\n    function getUint256(bytes32 _key) external view returns(uint256);\r\n\r\n    function getBytes32(bytes32 _key) external view returns(bytes32);\r\n\r\n    function getAddress(bytes32 _key) external view returns(address);\r\n\r\n    function getString(bytes32 _key) external view returns(string memory);\r\n\r\n    function getBytes(bytes32 _key) external view returns(bytes memory);\r\n\r\n    function getBool(bytes32 _key) external view returns(bool);\r\n\r\n    function getUint256Array(bytes32 _key) external view returns(uint256[] memory);\r\n\r\n    function getBytes32Array(bytes32 _key) external view returns(bytes32[] memory);\r\n\r\n    function getAddressArray(bytes32 _key) external view returns(address[] memory);\r\n\r\n    function getBoolArray(bytes32 _key) external view returns(bool[] memory);\r\n\r\n    function getUint256ArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getBytes32ArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getAddressArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getBoolArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256);\r\n\r\n    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32);\r\n\r\n    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address);\r\n\r\n    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool);\r\n\r\n    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(uint256[] memory);\r\n\r\n    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bytes32[] memory);\r\n\r\n    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(address[] memory);\r\n\r\n    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bool[] memory);\r\n}\r\n\r\n// File: contracts/interfaces/ISecurityToken.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface for all security tokens\r\n */\r\ninterface ISecurityToken {\r\n    // Standard ERC20 interface\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns(uint8);\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address owner) external view returns(uint256);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function transfer(address to, uint256 value) external returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\r\n    function approve(address spender, uint256 value) external returns(bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @notice Transfers of securities may fail for a number of reasons. So this function will used to understand the\r\n     * cause of failure by getting the byte value. Which will be the ESC that follows the EIP 1066. ESC can be mapped\r\n     * with a reson string to understand the failure cause, table of Ethereum status code will always reside off-chain\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\r\n     * @return byte Ethereum status code (ESC)\r\n     * @return bytes32 Application specific reason code\r\n     */\r\n    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\r\n\r\n    // Emit at the time when module get added\r\n    event ModuleAdded(\r\n        uint8[] _types,\r\n        bytes32 indexed _name,\r\n        address indexed _moduleFactory,\r\n        address _module,\r\n        uint256 _moduleCost,\r\n        uint256 _budget,\r\n        bytes32 _label,\r\n        bool _archived\r\n    );\r\n\r\n    // Emit when the token details get updated\r\n    event UpdateTokenDetails(string _oldDetails, string _newDetails);\r\n    // Emit when the token name get updated\r\n    event UpdateTokenName(string _oldName, string _newName);\r\n    // Emit when the granularity get changed\r\n    event GranularityChanged(uint256 _oldGranularity, uint256 _newGranularity);\r\n    // Emit when is permanently frozen by the issuer\r\n    event FreezeIssuance();\r\n    // Emit when transfers are frozen or unfrozen\r\n    event FreezeTransfers(bool _status);\r\n    // Emit when new checkpoint created\r\n    event CheckpointCreated(uint256 indexed _checkpointId, uint256 _investorLength);\r\n    // Events to log controller actions\r\n    event SetController(address indexed _oldController, address indexed _newController);\r\n    //Event emit when the global treasury wallet address get changed\r\n    event TreasuryWalletChanged(address _oldTreasuryWallet, address _newTreasuryWallet);\r\n    event DisableController();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event TokenUpgraded(uint8 _major, uint8 _minor, uint8 _patch);\r\n\r\n    // Emit when Module get archived from the securityToken\r\n    event ModuleArchived(uint8[] _types, address _module); //Event emitted by the tokenLib.\r\n    // Emit when Module get unarchived from the securityToken\r\n    event ModuleUnarchived(uint8[] _types, address _module); //Event emitted by the tokenLib.\r\n    // Emit when Module get removed from the securityToken\r\n    event ModuleRemoved(uint8[] _types, address _module); //Event emitted by the tokenLib.\r\n    // Emit when the budget allocated to a module is changed\r\n    event ModuleBudgetChanged(uint8[] _moduleTypes, address _module, uint256 _oldBudget, uint256 _budget); //Event emitted by the tokenLib.\r\n\r\n    // Transfer Events\r\n    event TransferByPartition(\r\n        bytes32 indexed _fromPartition,\r\n        address _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    // Operator Events\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n    event AuthorizedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder);\r\n\r\n    // Issuance / Redemption Events\r\n    event IssuedByPartition(bytes32 indexed partition, address indexed to, uint256 value, bytes data);\r\n    event RedeemedByPartition(bytes32 indexed partition, address indexed operator, address indexed from, uint256 value, bytes data, bytes operatorData);\r\n\r\n    // Document Events\r\n    event DocumentRemoved(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n    event DocumentUpdated(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n\r\n    // Controller Events\r\n    event ControllerTransfer(\r\n        address _controller,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    event ControllerRedemption(\r\n        address _controller,\r\n        address indexed _tokenHolder,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    // Issuance / Redemption Events\r\n    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\r\n    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\r\n\r\n    /**\r\n     * @notice Initialization function\r\n     * @dev Expected to be called atomically with the proxy being created, by the owner of the token\r\n     * @dev Can only be called once\r\n     */\r\n    function initialize(address _getterDelegate) external;\r\n\r\n    /**\r\n     * @notice The standard provides an on-chain function to determine whether a transfer will succeed,\r\n     * and return details indicating the reason if the transfer is not valid.\r\n     * @param _from The address from whom the tokens get transferred.\r\n     * @param _to The address to which to transfer tokens to.\r\n     * @param _partition The partition from which to transfer tokens\r\n     * @param _value The amount of tokens to transfer from `_partition`\r\n     * @param _data Additional data attached to the transfer of tokens\r\n     * @return ESC (Ethereum Status Code) following the EIP-1066 standard\r\n     * @return Application specific reason codes with additional details\r\n     * @return The partition to which the transferred tokens were allocated for the _to address\r\n     */\r\n    function canTransferByPartition(\r\n        address _from,\r\n        address _to,\r\n        bytes32 _partition,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        view\r\n        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\r\n\r\n    /**\r\n     * @notice Transfers of securities may fail for a number of reasons. So this function will used to understand the\r\n     * cause of failure by getting the byte value. Which will be the ESC that follows the EIP 1066. ESC can be mapped\r\n     * with a reson string to understand the failure cause, table of Ethereum status code will always reside off-chain\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\r\n     * @return byte Ethereum status code (ESC)\r\n     * @return bytes32 Application specific reason code\r\n     */\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\r\n\r\n    /**\r\n     * @notice Used to attach a new document to the contract, or update the URI or hash of an existing attached document\r\n     * @dev Can only be executed by the owner of the contract.\r\n     * @param _name Name of the document. It should be unique always\r\n     * @param _uri Off-chain uri of the document from where it is accessible to investors/advisors to read.\r\n     * @param _documentHash hash (of the contents) of the document.\r\n     */\r\n    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\r\n\r\n    /**\r\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\r\n     * @dev Can only be executed by the owner of the contract.\r\n     * @param _name Name of the document. It should be unique always\r\n     */\r\n    function removeDocument(bytes32 _name) external;\r\n\r\n    /**\r\n     * @notice Used to return the details of a document with a known name (`bytes32`).\r\n     * @param _name Name of the document\r\n     * @return string The URI associated with the document.\r\n     * @return bytes32 The hash (of the contents) of the document.\r\n     * @return uint256 the timestamp at which the document was last modified.\r\n     */\r\n    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\r\n\r\n    /**\r\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\r\n     * @return bytes32 List of all documents names present in the contract.\r\n     */\r\n    function getAllDocuments() external view returns (bytes32[] memory documentNames);\r\n\r\n    /**\r\n     * @notice In order to provide transparency over whether `controllerTransfer` / `controllerRedeem` are useable\r\n     * or not `isControllable` function will be used.\r\n     * @dev If `isControllable` returns `false` then it always return `false` and\r\n     * `controllerTransfer` / `controllerRedeem` will always revert.\r\n     * @return bool `true` when controller address is non-zero otherwise return `false`.\r\n     */\r\n    function isControllable() external view returns (bool controlled);\r\n\r\n    /**\r\n     * @notice Checks if an address is a module of certain type\r\n     * @param _module Address to check\r\n     * @param _type type to check against\r\n     */\r\n    function isModule(address _module, uint8 _type) external view returns(bool isValid);\r\n\r\n    /**\r\n     * @notice This function must be called to increase the total supply (Corresponds to mint function of ERC20).\r\n     * @dev It only be called by the token issuer or the operator defined by the issuer. ERC1594 doesn't have\r\n     * have the any logic related to operator but its superset ERC1400 have the operator logic and this function\r\n     * is allowed to call by the operator.\r\n     * @param _tokenHolder The account that will receive the created tokens (account should be whitelisted or KYCed).\r\n     * @param _value The amount of tokens need to be issued\r\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\r\n     */\r\n    function issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice issue new tokens and assigns them to the target _tokenHolder.\r\n     * @dev Can only be called by the issuer or STO attached to the token.\r\n     * @param _tokenHolders A list of addresses to whom the minted tokens will be dilivered\r\n     * @param _values A list of number of tokens get minted and transfer to corresponding address of the investor from _tokenHolders[] list\r\n     * @return success\r\n     */\r\n    function issueMulti(address[] calldata _tokenHolders, uint256[] calldata _values) external;\r\n\r\n    /**\r\n     * @notice Increases totalSupply and the corresponding amount of the specified owners partition\r\n     * @param _partition The partition to allocate the increase in balance\r\n     * @param _tokenHolder The token holder whose balance should be increased\r\n     * @param _value The amount by which to increase the balance\r\n     * @param _data Additional data attached to the minting of tokens\r\n     */\r\n    function issueByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice Decreases totalSupply and the corresponding amount of the specified partition of msg.sender\r\n     * @param _partition The partition to allocate the decrease in balance\r\n     * @param _value The amount by which to decrease the balance\r\n     * @param _data Additional data attached to the burning of tokens\r\n     */\r\n    function redeemByPartition(bytes32 _partition, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice This function redeem an amount of the token of a msg.sender. For doing so msg.sender may incentivize\r\n     * using different ways that could be implemented with in the `redeem` function definition. But those implementations\r\n     * are out of the scope of the ERC1594.\r\n     * @param _value The amount of tokens need to be redeemed\r\n     * @param _data The `bytes _data` it can be used in the token contract to authenticate the redemption.\r\n     */\r\n    function redeem(uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice This function redeem an amount of the token of a msg.sender. For doing so msg.sender may incentivize\r\n     * using different ways that could be implemented with in the `redeem` function definition. But those implementations\r\n     * are out of the scope of the ERC1594.\r\n     * @dev It is analogy to `transferFrom`\r\n     * @param _tokenHolder The account whose tokens gets redeemed.\r\n     * @param _value The amount of tokens need to be redeemed\r\n     * @param _data The `bytes _data` it can be used in the token contract to authenticate the redemption.\r\n     */\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice Decreases totalSupply and the corresponding amount of the specified partition of tokenHolder\r\n     * @dev This function can only be called by the authorised operator.\r\n     * @param _partition The partition to allocate the decrease in balance.\r\n     * @param _tokenHolder The token holder whose balance should be decreased\r\n     * @param _value The amount by which to decrease the balance\r\n     * @param _data Additional data attached to the burning of tokens\r\n     * @param _operatorData Additional data attached to the transfer of tokens by the operator\r\n     */\r\n    function operatorRedeemByPartition(\r\n        bytes32 _partition,\r\n        address _tokenHolder,\r\n        uint256 _value,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Validate permissions with PermissionManager if it exists, If no Permission return false\r\n     * @dev Note that IModule withPerm will allow ST owner all permissions anyway\r\n     * @dev this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n     * @param _delegate address of delegate\r\n     * @param _module address of PermissionManager module\r\n     * @param _perm the permissions\r\n     * @return success\r\n     */\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns(bool hasPermission);\r\n\r\n    /**\r\n     * @notice Returns module list for a module type\r\n     * @param _module Address of the module\r\n     * @return bytes32 Name\r\n     * @return address Module address\r\n     * @return address Module factory address\r\n     * @return bool Module archived\r\n     * @return uint8 Array of module types\r\n     * @return bytes32 Module label\r\n     */\r\n    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\r\n\r\n    /**\r\n     * @notice Returns module list for a module name\r\n     * @param _name Name of the module\r\n     * @return address[] List of modules with this name\r\n     */\r\n    function getModulesByName(bytes32 _name) external view returns(address[] memory modules);\r\n\r\n    /**\r\n     * @notice Returns module list for a module type\r\n     * @param _type Type of the module\r\n     * @return address[] List of modules with this type\r\n     */\r\n    function getModulesByType(uint8 _type) external view returns(address[] memory modules);\r\n\r\n    /**\r\n     * @notice use to return the global treasury wallet\r\n     */\r\n    function getTreasuryWallet() external view returns(address treasuryWallet);\r\n\r\n    /**\r\n     * @notice Queries totalSupply at a specified checkpoint\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function totalSupplyAt(uint256 _checkpointId) external view returns(uint256 supply);\r\n\r\n    /**\r\n     * @notice Queries balance at a specified checkpoint\r\n     * @param _investor Investor to query balance for\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns(uint256 balance);\r\n\r\n    /**\r\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\r\n     */\r\n    function createCheckpoint() external returns(uint256 checkpointId);\r\n\r\n    /**\r\n     * @notice Gets list of times that checkpoints were created\r\n     * @return List of checkpoint times\r\n     */\r\n    function getCheckpointTimes() external view returns(uint256[] memory checkpointTimes);\r\n\r\n    /**\r\n     * @notice returns an array of investors\r\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\r\n     * @return list of addresses\r\n     */\r\n    function getInvestors() external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice returns an array of investors at a given checkpoint\r\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\r\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\r\n     * @return list of investors\r\n     */\r\n    function getInvestorsAt(uint256 _checkpointId) external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice returns an array of investors with non zero balance at a given checkpoint\r\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\r\n     * @param _start Position of investor to start iteration from\r\n     * @param _end Position of investor to stop iteration at\r\n     * @return list of investors\r\n     */\r\n    function getInvestorsSubsetAt(uint256 _checkpointId, uint256 _start, uint256 _end) external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice generates subset of investors\r\n     * NB - can be used in batches if investor list is large\r\n     * @param _start Position of investor to start iteration from\r\n     * @param _end Position of investor to stop iteration at\r\n     * @return list of investors\r\n     */\r\n    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice Gets current checkpoint ID\r\n     * @return Id\r\n     */\r\n    function currentCheckpointId() external view returns(uint256 checkpointId);\r\n\r\n    /**\r\n     * @notice Determines whether `_operator` is an operator for all partitions of `_tokenHolder`\r\n     * @param _operator The operator to check\r\n     * @param _tokenHolder The token holder to check\r\n     * @return Whether the `_operator` is an operator for all partitions of `_tokenHolder`\r\n     */\r\n    function isOperator(address _operator, address _tokenHolder) external view returns (bool isValid);\r\n\r\n    /**\r\n     * @notice Determines whether `_operator` is an operator for a specified partition of `_tokenHolder`\r\n     * @param _partition The partition to check\r\n     * @param _operator The operator to check\r\n     * @param _tokenHolder The token holder to check\r\n     * @return Whether the `_operator` is an operator for a specified partition of `_tokenHolder`\r\n     */\r\n    function isOperatorForPartition(bytes32 _partition, address _operator, address _tokenHolder) external view returns (bool isValid);\r\n\r\n    /**\r\n     * @notice Return all partitions\r\n     * @param _tokenHolder Whom balance need to queried\r\n     * @return List of partitions\r\n     */\r\n    function partitionsOf(address _tokenHolder) external view returns (bytes32[] memory partitions);\r\n\r\n    /**\r\n     * @notice Gets data store address\r\n     * @return data store address\r\n     */\r\n    function dataStore() external view returns (address dataStoreAddress);\r\n\r\n    /**\r\n    * @notice Allows owner to change data store\r\n    * @param _dataStore Address of the token data store\r\n    */\r\n    function changeDataStore(address _dataStore) external;\r\n\r\n\r\n    /**\r\n     * @notice Allows to change the treasury wallet address\r\n     * @param _wallet Ethereum address of the treasury wallet\r\n     */\r\n    function changeTreasuryWallet(address _wallet) external;\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\r\n     * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\r\n     * @param _tokenContract Address of the ERC20Basic compliance token\r\n     * @param _value Amount of POLY to withdraw\r\n     */\r\n    function withdrawERC20(address _tokenContract, uint256 _value) external;\r\n\r\n    /**\r\n    * @notice Allows owner to increase/decrease POLY approval of one of the modules\r\n    * @param _module Module address\r\n    * @param _change Change in allowance\r\n    * @param _increase True if budget has to be increased, false if decrease\r\n    */\r\n    function changeModuleBudget(address _module, uint256 _change, bool _increase) external;\r\n\r\n    /**\r\n     * @notice Changes the tokenDetails\r\n     * @param _newTokenDetails New token details\r\n     */\r\n    function updateTokenDetails(string calldata _newTokenDetails) external;\r\n\r\n    /**\r\n    * @notice Allows owner to change token name\r\n    * @param _name new name of the token\r\n    */\r\n    function changeName(string calldata _name) external;\r\n\r\n    /**\r\n    * @notice Allows the owner to change token granularity\r\n    * @param _granularity Granularity level of the token\r\n    */\r\n    function changeGranularity(uint256 _granularity) external;\r\n\r\n    /**\r\n     * @notice Freezes all the transfers\r\n     */\r\n    function freezeTransfers() external;\r\n\r\n    /**\r\n     * @notice Un-freezes all the transfers\r\n     */\r\n    function unfreezeTransfers() external;\r\n\r\n    /**\r\n     * @notice Permanently freeze issuance of this security token.\r\n     * @dev It MUST NOT be possible to increase `totalSuppy` after this function is called.\r\n     */\r\n    function freezeIssuance(bytes calldata _signature) external;\r\n\r\n    /**\r\n      * @notice Attachs a module to the SecurityToken\r\n      * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\r\n      * @dev to control restrictions on transfers.\r\n      * @param _moduleFactory is the address of the module factory to be added\r\n      * @param _data is data packed into bytes used to further configure the module (See STO usage)\r\n      * @param _maxCost max amount of POLY willing to pay to the module.\r\n      * @param _budget max amount of ongoing POLY willing to assign to the module.\r\n      * @param _label custom module label.\r\n      * @param _archived whether to add the module as an archived module\r\n      */\r\n    function addModuleWithLabel(\r\n        address _moduleFactory,\r\n        bytes calldata _data,\r\n        uint256 _maxCost,\r\n        uint256 _budget,\r\n        bytes32 _label,\r\n        bool _archived\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Function used to attach a module to the security token\r\n     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\r\n     * @dev to control restrictions on transfers.\r\n     * @dev You are allowed to add a new moduleType if:\r\n     * @dev - there is no existing module of that type yet added\r\n     * @dev - the last member of the module list is replacable\r\n     * @param _moduleFactory is the address of the module factory to be added\r\n     * @param _data is data packed into bytes used to further configure the module (See STO usage)\r\n     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\r\n     * @param _budget max amount of ongoing POLY willing to assign to the module.\r\n     * @param _archived whether to add the module as an archived module\r\n     */\r\n    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\r\n\r\n    /**\r\n    * @notice Archives a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function archiveModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Unarchives a module attached to the SecurityToken\r\n    * @param _module address of module to unarchive\r\n    */\r\n    function unarchiveModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Removes a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function removeModule(address _module) external;\r\n\r\n    /**\r\n     * @notice Used by the issuer to set the controller addresses\r\n     * @param _controller address of the controller\r\n     */\r\n    function setController(address _controller) external;\r\n\r\n    /**\r\n     * @notice This function allows an authorised address to transfer tokens between any two token holders.\r\n     * The transfer must still respect the balances of the token holders (so the transfer must be for at most\r\n     * `balanceOf(_from)` tokens) and potentially also need to respect other transfer restrictions.\r\n     * @dev This function can only be executed by the `controller` address.\r\n     * @param _from Address The address which you want to send tokens from\r\n     * @param _to Address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @param _data data to validate the transfer. (It is not used in this reference implementation\r\n     * because use of `_data` parameter is implementation specific).\r\n     * @param _operatorData data attached to the transfer by controller to emit in event. (It is more like a reason string\r\n     * for calling this function (aka force transfer) which provides the transparency on-chain).\r\n     */\r\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\r\n\r\n    /**\r\n     * @notice This function allows an authorised address to redeem tokens for any token holder.\r\n     * The redemption must still respect the balances of the token holder (so the redemption must be for at most\r\n     * `balanceOf(_tokenHolder)` tokens) and potentially also need to respect other transfer restrictions.\r\n     * @dev This function can only be executed by the `controller` address.\r\n     * @param _tokenHolder The account whose tokens will be redeemed.\r\n     * @param _value uint256 the amount of tokens need to be redeemed.\r\n     * @param _data data to validate the transfer. (It is not used in this reference implementation\r\n     * because use of `_data` parameter is implementation specific).\r\n     * @param _operatorData data attached to the transfer by controller to emit in event. (It is more like a reason string\r\n     * for calling this function (aka force transfer) which provides the transparency on-chain).\r\n     */\r\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\r\n\r\n    /**\r\n     * @notice Used by the issuer to permanently disable controller functionality\r\n     * @dev enabled via feature switch \"disableControllerAllowed\"\r\n     */\r\n    function disableController(bytes calldata _signature) external;\r\n\r\n    /**\r\n     * @notice Used to get the version of the securityToken\r\n     */\r\n    function getVersion() external view returns(uint8[] memory version);\r\n\r\n    /**\r\n     * @notice Gets the investor count\r\n     */\r\n    function getInvestorCount() external view returns(uint256 investorCount);\r\n\r\n    /**\r\n     * @notice Gets the holder count (investors with non zero balance)\r\n     */\r\n    function holderCount() external view returns(uint256 count);\r\n\r\n    /**\r\n      * @notice Overloaded version of the transfer function\r\n      * @param _to receiver of transfer\r\n      * @param _value value of transfer\r\n      * @param _data data to indicate validation\r\n      * @return bool success\r\n      */\r\n    function transferWithData(address _to, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n      * @notice Overloaded version of the transferFrom function\r\n      * @param _from sender of transfer\r\n      * @param _to receiver of transfer\r\n      * @param _value value of transfer\r\n      * @param _data data to indicate validation\r\n      * @return bool success\r\n      */\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of tokens from a specified partition from one address to another address\r\n     * @param _partition The partition from which to transfer tokens\r\n     * @param _to The address to which to transfer tokens to\r\n     * @param _value The amount of tokens to transfer from `_partition`\r\n     * @param _data Additional data attached to the transfer of tokens\r\n     * @return The partition to which the transferred tokens were allocated for the _to address\r\n     */\r\n    function transferByPartition(bytes32 _partition, address _to, uint256 _value, bytes calldata _data) external returns (bytes32 partition);\r\n\r\n    /**\r\n     * @notice Get the balance according to the provided partitions\r\n     * @param _partition Partition which differentiate the tokens.\r\n     * @param _tokenHolder Whom balance need to queried\r\n     * @return Amount of tokens as per the given partitions\r\n     */\r\n    function balanceOfByPartition(bytes32 _partition, address _tokenHolder) external view returns(uint256 balance);\r\n\r\n    /**\r\n      * @notice Provides the granularity of the token\r\n      * @return uint256\r\n      */\r\n    function granularity() external view returns(uint256 granularityAmount);\r\n\r\n    /**\r\n      * @notice Provides the address of the polymathRegistry\r\n      * @return address\r\n      */\r\n    function polymathRegistry() external view returns(address registryAddress);\r\n\r\n    /**\r\n    * @notice Upgrades a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function upgradeModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Upgrades security token\r\n    */\r\n    function upgradeToken() external;\r\n\r\n    /**\r\n     * @notice A security token issuer can specify that issuance has finished for the token\r\n     * (i.e. no new tokens can be minted or issued).\r\n     * @dev If a token returns FALSE for `isIssuable()` then it MUST always return FALSE in the future.\r\n     * If a token returns FALSE for `isIssuable()` then it MUST never allow additional tokens to be issued.\r\n     * @return bool `true` signifies the minting is allowed. While `false` denotes the end of minting\r\n     */\r\n    function isIssuable() external view returns (bool issuable);\r\n\r\n    /**\r\n     * @notice Authorises an operator for all partitions of `msg.sender`.\r\n     * NB - Allowing investors to authorize an investor to be an operator of all partitions\r\n     * but it doesn't mean we operator is allowed to transfer the LOCKED partition values.\r\n     * Logic for this restriction is written in `operatorTransferByPartition()` function.\r\n     * @param _operator An address which is being authorised.\r\n     */\r\n    function authorizeOperator(address _operator) external;\r\n\r\n    /**\r\n     * @notice Revokes authorisation of an operator previously given for all partitions of `msg.sender`.\r\n     * NB - Allowing investors to authorize an investor to be an operator of all partitions\r\n     * but it doesn't mean we operator is allowed to transfer the LOCKED partition values.\r\n     * Logic for this restriction is written in `operatorTransferByPartition()` function.\r\n     * @param _operator An address which is being de-authorised\r\n     */\r\n    function revokeOperator(address _operator) external;\r\n\r\n    /**\r\n     * @notice Authorises an operator for a given partition of `msg.sender`\r\n     * @param _partition The partition to which the operator is authorised\r\n     * @param _operator An address which is being authorised\r\n     */\r\n    function authorizeOperatorByPartition(bytes32 _partition, address _operator) external;\r\n\r\n    /**\r\n     * @notice Revokes authorisation of an operator previously given for a specified partition of `msg.sender`\r\n     * @param _partition The partition to which the operator is de-authorised\r\n     * @param _operator An address which is being de-authorised\r\n     */\r\n    function revokeOperatorByPartition(bytes32 _partition, address _operator) external;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of tokens from a specified partition from one address to another address\r\n     * @param _partition The partition from which to transfer tokens.\r\n     * @param _from The address from which to transfer tokens from\r\n     * @param _to The address to which to transfer tokens to\r\n     * @param _value The amount of tokens to transfer from `_partition`\r\n     * @param _data Additional data attached to the transfer of tokens\r\n     * @param _operatorData Additional data attached to the transfer of tokens by the operator\r\n     * @return The partition to which the transferred tokens were allocated for the _to address\r\n     */\r\n    function operatorTransferByPartition(\r\n        bytes32 _partition,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData\r\n    )\r\n        external\r\n        returns (bytes32 partition);\r\n\r\n    /*\r\n    * @notice Returns if transfers are currently frozen or not\r\n    */\r\n    function transfersFrozen() external view returns (bool isFrozen);\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() external view returns (bool);\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() external view returns (address ownerAddress);\r\n\r\n    function controller() external view returns(address controllerAddress);\r\n\r\n    function moduleRegistry() external view returns(address moduleRegistryAddress);\r\n\r\n    function securityTokenRegistry() external view returns(address securityTokenRegistryAddress);\r\n\r\n    function polyToken() external view returns(address polyTokenAddress);\r\n\r\n    function tokenFactory() external view returns(address tokenFactoryAddress);\r\n\r\n    function getterDelegate() external view returns(address delegate);\r\n\r\n    function controllerDisabled() external view returns(bool isDisabled);\r\n\r\n    function initialized() external view returns(bool isInitialized);\r\n\r\n    function tokenDetails() external view returns(string memory details);\r\n\r\n    function updateFromRegistry() external;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/ICheckPermission.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface ICheckPermission {\r\n    /**\r\n     * @notice Validate permissions with PermissionManager if it exists, If no Permission return false\r\n     * @dev Note that IModule withPerm will allow ST owner all permissions anyway\r\n     * @dev this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n     * @param _delegate address of delegate\r\n     * @param _module address of PermissionManager module\r\n     * @param _perm the permissions\r\n     * @return success\r\n     */\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns(bool hasPerm);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/storage/modules/ModuleStorage.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * @title Storage for Module contract\r\n * @notice Contract is abstract\r\n */\r\ncontract ModuleStorage {\r\n    address public factory;\r\n\r\n    ISecurityToken public securityToken;\r\n\r\n    // Permission flag\r\n    bytes32 public constant ADMIN = \"ADMIN\";\r\n    bytes32 public constant OPERATOR = \"OPERATOR\";\r\n\r\n    bytes32 internal constant TREASURY = 0xaae8817359f3dcb67d050f44f3e49f982e0359d90ca4b5f18569926304aaece6; // keccak256(abi.encodePacked(\"TREASURY_WALLET\"))\r\n\r\n    IERC20 public polyToken;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor(address _securityToken, address _polyAddress) public {\r\n        securityToken = ISecurityToken(_securityToken);\r\n        factory = msg.sender;\r\n        polyToken = IERC20(_polyAddress);\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Module.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Interface that any module contract should implement\r\n * @notice Contract is abstract\r\n */\r\ncontract Module is IModule, ModuleStorage, Pausable {\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     */\r\n    constructor (address _securityToken, address _polyAddress) public\r\n    ModuleStorage(_securityToken, _polyAddress)\r\n    {\r\n    }\r\n\r\n    //Allows owner, factory or permissioned delegate\r\n    modifier withPerm(bytes32 _perm) {\r\n        require(_checkPerm(_perm, msg.sender), \"Invalid permission\");\r\n        _;\r\n    }\r\n\r\n    function _checkPerm(bytes32 _perm, address _caller) internal view returns (bool) {\r\n        bool isOwner = _caller == Ownable(address(securityToken)).owner();\r\n        bool isFactory = _caller == factory;\r\n        return isOwner || isFactory || ICheckPermission(address(securityToken)).checkPermission(_caller, address(this), _perm);\r\n    }\r\n\r\n    function _onlySecurityTokenOwner() internal view {\r\n        require(msg.sender == Ownable(address(securityToken)).owner(), \"Sender is not owner\");\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == factory, \"Sender is not factory\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Pause (overridden function)\r\n     */\r\n    function pause() public {\r\n        _onlySecurityTokenOwner();\r\n        super._pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause (overridden function)\r\n     */\r\n    function unpause() public {\r\n        _onlySecurityTokenOwner();\r\n        super._unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice used to return the data store address of securityToken\r\n     */\r\n    function getDataStore() public view returns(IDataStore) {\r\n        return IDataStore(securityToken.dataStore());\r\n    }\r\n\r\n    /**\r\n    * @notice Reclaims ERC20Basic compatible tokens\r\n    * @dev We duplicate here due to the overriden owner & onlyOwner\r\n    * @param _tokenContract The address of the token contract\r\n    */\r\n    function reclaimERC20(address _tokenContract) external {\r\n        _onlySecurityTokenOwner();\r\n        require(_tokenContract != address(0), \"Invalid address\");\r\n        IERC20 token = IERC20(_tokenContract);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(msg.sender, balance), \"Transfer failed\");\r\n    }\r\n\r\n   /**\r\n    * @notice Reclaims ETH\r\n    * @dev We duplicate here due to the overriden owner & onlyOwner\r\n    */\r\n    function reclaimETH() external {\r\n        _onlySecurityTokenOwner();\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ITransferManager.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface to be implemented by all Transfer Manager modules\r\n */\r\ninterface ITransferManager {\r\n    //  If verifyTransfer returns:\r\n    //  FORCE_VALID, the transaction will always be valid, regardless of other TM results\r\n    //  INVALID, then the transfer should not be allowed regardless of other TM results\r\n    //  VALID, then the transfer is valid for this TM\r\n    //  NA, then the result from this TM is ignored\r\n    enum Result {INVALID, NA, VALID, FORCE_VALID}\r\n\r\n    /**\r\n     * @notice Determines if the transfer between these two accounts can happen\r\n     */\r\n    function executeTransfer(address _from, address _to, uint256 _amount, bytes calldata _data) external returns(Result result);\r\n\r\n    function verifyTransfer(address _from, address _to, uint256 _amount, bytes calldata _data) external view returns(Result result, bytes32 partition);\r\n\r\n    /**\r\n     * @notice return the amount of tokens for a given user as per the partition\r\n     * @param _partition Identifier\r\n     * @param _tokenHolder Whom token amount need to query\r\n     * @param _additionalBalance It is the `_value` that transfer during transfer/transferFrom function call\r\n     */\r\n    function getTokensByPartition(bytes32 _partition, address _tokenHolder, uint256 _additionalBalance) external view returns(uint256 amount);\r\n\r\n}\r\n\r\n// File: contracts/modules/TransferManager/TransferManager.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * @title Base abstract contract to be implemented by all Transfer Manager modules\r\n */\r\ncontract TransferManager is ITransferManager, Module {\r\n\r\n    bytes32 public constant LOCKED = \"LOCKED\";\r\n    bytes32 public constant UNLOCKED = \"UNLOCKED\";\r\n\r\n    modifier onlySecurityToken() {\r\n        require(msg.sender == address(securityToken), \"Sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    // Provide default versions of ERC1410 functions that can be overriden\r\n\r\n    /**\r\n     * @notice return the amount of tokens for a given user as per the partition\r\n     * @dev returning the balance of token holder against the UNLOCKED partition. \r\n     * This condition is valid only when the base contract doesn't implement the\r\n     * `getTokensByPartition()` function.  \r\n     */\r\n    function getTokensByPartition(bytes32 _partition, address _tokenHolder, uint256 /*_additionalBalance*/) external view returns(uint256) {\r\n        if (_partition == UNLOCKED)\r\n            return securityToken.balanceOf(_tokenHolder);\r\n        return uint256(0);\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/TransferManager/MATM/ManualApprovalTransferManagerStorage.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Contract used to store layout for the ManualApprovalTransferManager storage\r\n */\r\ncontract ManualApprovalTransferManagerStorage {\r\n\r\n    //Manual approval is an allowance (that has been approved) with an expiry time\r\n    struct ManualApproval {\r\n        address from;\r\n        address to;\r\n        uint256 initialAllowance;\r\n        uint256 allowance;\r\n        uint256 expiryTime;\r\n        bytes32 description;\r\n    }\r\n\r\n    mapping (address => mapping (address => uint256)) public approvalIndex;\r\n\r\n    // An array to track all approvals. It is an unbounded array but it's not a problem as\r\n    // it is never looped through in an onchain call. It is defined as an Array instead of mapping\r\n    // just to make it easier for users to fetch list of all approvals through constant functions.\r\n    ManualApproval[] public approvals;\r\n\r\n}\r\n\r\n// File: contracts/modules/TransferManager/MATM/ManualApprovalTransferManager.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Transfer Manager module for manually approving transactions between accounts\r\n */\r\ncontract ManualApprovalTransferManager is ManualApprovalTransferManagerStorage, TransferManager {\r\n    using SafeMath for uint256;\r\n\r\n    event AddManualApproval(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _allowance,\r\n        uint256 _expiryTime,\r\n        bytes32 _description,\r\n        address indexed _addedBy\r\n    );\r\n\r\n    event ModifyManualApproval(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _expiryTime,\r\n        uint256 _allowance,\r\n        bytes32 _description,\r\n        address indexed _editedBy\r\n    );\r\n\r\n    event RevokeManualApproval(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        address indexed _addedBy\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     */\r\n    constructor(address _securityToken, address _polyToken) public Module(_securityToken, _polyToken) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() public pure returns(bytes4) {\r\n        return bytes4(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to verify the transfer transaction and allow a manually approved transqaction to bypass other restrictions\r\n     * @param _from Address of the sender\r\n     * @param _to Address of the receiver\r\n     * @param _amount The amount of tokens to transfer\r\n     */\r\n    function executeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes calldata /* _data */\r\n    )\r\n        external\r\n        onlySecurityToken\r\n        returns(Result)\r\n    {\r\n\r\n        (Result success, bytes32 esc) = _verifyTransfer(_from, _to, _amount);\r\n        if (esc != bytes32(0)) {\r\n            uint256 index = approvalIndex[_from][_to] - 1;\r\n            ManualApproval storage approval = approvals[index];\r\n            approval.allowance = approval.allowance.sub(_amount);\r\n        }\r\n        return (success);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Used to verify the transfer transaction and allow a manually approved transqaction to bypass other restrictions\r\n     * @param _from Address of the sender\r\n     * @param _to Address of the receiver\r\n     * @param _amount The amount of tokens to transfer\r\n     */\r\n    function verifyTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes memory /* _data */\r\n    )\r\n        public\r\n        view\r\n        returns(Result, bytes32)\r\n    {\r\n        return _verifyTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    function _verifyTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        internal\r\n        view\r\n        returns(Result, bytes32)\r\n    {\r\n        uint256 index = approvalIndex[_from][_to];\r\n        if (!paused && index != 0) {\r\n            index--; //Actual index is storedIndex - 1\r\n            ManualApproval memory approval = approvals[index];\r\n            if ((approval.expiryTime >= now) && (approval.allowance >= _amount)) {\r\n                return (Result.VALID, bytes32(uint256(address(this)) << 96));\r\n            }\r\n        }\r\n        return (Result.NA, bytes32(0));\r\n    }\r\n\r\n\r\n    /**\r\n    * @notice Adds a pair of addresses to manual approvals\r\n    * @param _from is the address from which transfers are approved\r\n    * @param _to is the address to which transfers are approved\r\n    * @param _allowance is the approved amount of tokens\r\n    * @param _expiryTime is the time until which the transfer is allowed\r\n    * @param _description Description about the manual approval\r\n    */\r\n    function addManualApproval(\r\n        address _from,\r\n        address _to,\r\n        uint256 _allowance,\r\n        uint256 _expiryTime,\r\n        bytes32 _description\r\n    )\r\n        external\r\n        withPerm(ADMIN)\r\n    {\r\n        _addManualApproval(_from, _to, _allowance, _expiryTime, _description);\r\n    }\r\n\r\n    function _addManualApproval(address _from, address _to, uint256 _allowance, uint256 _expiryTime, bytes32 _description) internal {\r\n        require(_expiryTime > now, \"Invalid expiry time\");\r\n        require(_allowance > 0, \"Invalid allowance\");\r\n        if (approvalIndex[_from][_to] != 0) {\r\n            uint256 index = approvalIndex[_from][_to] - 1;\r\n            require(approvals[index].expiryTime < now || approvals[index].allowance == 0, \"Approval already exists\");\r\n            _revokeManualApproval(_from, _to);\r\n        }\r\n        approvals.push(ManualApproval(_from, _to, _allowance, _allowance, _expiryTime, _description));\r\n        approvalIndex[_from][_to] = approvals.length;\r\n        emit AddManualApproval(_from, _to, _allowance, _expiryTime, _description, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Adds mutiple manual approvals in batch\r\n    * @param _from is the address array from which transfers are approved\r\n    * @param _to is the address array to which transfers are approved\r\n    * @param _allowances is the array of approved amounts\r\n    * @param _expiryTimes is the array of the times until which eath transfer is allowed\r\n    * @param _descriptions is the description array for these manual approvals\r\n    */\r\n    function addManualApprovalMulti(\r\n        address[] memory _from,\r\n        address[] memory _to,\r\n        uint256[] memory _allowances,\r\n        uint256[] memory _expiryTimes,\r\n        bytes32[] memory _descriptions\r\n    )\r\n        public\r\n        withPerm(ADMIN)\r\n    {\r\n        _checkInputLengthArray(_from, _to, _allowances, _expiryTimes, _descriptions);\r\n        for (uint256 i = 0; i < _from.length; i++){\r\n            _addManualApproval(_from[i], _to[i], _allowances[i], _expiryTimes[i], _descriptions[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Modify the existing manual approvals\r\n    * @param _from is the address from which transfers are approved\r\n    * @param _to is the address to which transfers are approved\r\n    * @param _expiryTime is the time until which the transfer is allowed\r\n    * @param _changeInAllowance is the change in allowance\r\n    * @param _description Description about the manual approval\r\n    * @param _increase tells whether the allowances will be increased (true) or decreased (false).\r\n    * or any value when there is no change in allowances\r\n    */\r\n    function modifyManualApproval(\r\n        address _from,\r\n        address _to,\r\n        uint256 _expiryTime,\r\n        uint256 _changeInAllowance,\r\n        bytes32 _description,\r\n        bool _increase\r\n    )\r\n        external\r\n        withPerm(ADMIN)\r\n    {\r\n        _modifyManualApproval(_from, _to, _expiryTime, _changeInAllowance, _description, _increase);\r\n    }\r\n\r\n    function _modifyManualApproval(\r\n        address _from,\r\n        address _to,\r\n        uint256 _expiryTime,\r\n        uint256 _changeInAllowance,\r\n        bytes32 _description,\r\n        bool _increase\r\n    )\r\n        internal\r\n    {\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        require(_expiryTime > now, \"Invalid expiry time\");\r\n        uint256 index = approvalIndex[_from][_to];\r\n        require(index != 0, \"Approval not present\");\r\n        index--; //Index is stored in an incremented form. 0 represnts non existant.\r\n        ManualApproval storage approval = approvals[index];\r\n        uint256 allowance = approval.allowance;\r\n        uint256 initialAllowance = approval.initialAllowance;\r\n        uint256 expiryTime = approval.expiryTime;\r\n        require(allowance != 0, \"Approval has been exhausted\");\r\n        require(expiryTime > now, \"Approval has expired\");\r\n\r\n        if (_changeInAllowance > 0) {\r\n            if (_increase) {\r\n                // Allowance get increased\r\n                allowance = allowance.add(_changeInAllowance);\r\n                initialAllowance = initialAllowance.add(_changeInAllowance);\r\n            } else {\r\n                // Allowance get decreased\r\n                if (_changeInAllowance >= allowance) {\r\n                    if (_changeInAllowance >= initialAllowance) {\r\n                        initialAllowance = 0;\r\n                    }\r\n                    else {\r\n                        initialAllowance = initialAllowance.sub(allowance);\r\n                    }\r\n                    allowance = 0;\r\n                } else {\r\n                    allowance = allowance.sub(_changeInAllowance);\r\n                    initialAllowance = initialAllowance.sub(_changeInAllowance);\r\n                }\r\n            }\r\n            approval.allowance = allowance;\r\n            approval.initialAllowance = initialAllowance;\r\n        }\r\n        // Greedy storage technique\r\n        if (expiryTime != _expiryTime) {\r\n            approval.expiryTime = _expiryTime;\r\n        }\r\n        if (approval.description != _description) {\r\n            approval.description = _description;\r\n        }\r\n        emit ModifyManualApproval(_from, _to, _expiryTime, allowance, _description, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds mutiple manual approvals in batch\r\n     * @param _from is the address array from which transfers are approved\r\n     * @param _to is the address array to which transfers are approved\r\n     * @param _expiryTimes is the array of the times until which eath transfer is allowed\r\n     * @param _changeInAllowance is the array of change in allowances\r\n     * @param _descriptions is the description array for these manual approvals\r\n     * @param _increase Array of bools that tells whether the allowances will be increased (true) or decreased (false).\r\n     * or any value when there is no change in allowances\r\n     */\r\n    function modifyManualApprovalMulti(\r\n        address[] memory _from,\r\n        address[] memory _to,\r\n        uint256[] memory _expiryTimes,\r\n        uint256[] memory _changeInAllowance,\r\n        bytes32[] memory _descriptions,\r\n        bool[] memory _increase\r\n    )\r\n        public\r\n        withPerm(ADMIN)\r\n    {\r\n        _checkInputLengthArray(_from, _to, _changeInAllowance, _expiryTimes, _descriptions);\r\n        require(_increase.length == _changeInAllowance.length, \"Input array length mismatch\");\r\n        for (uint256 i = 0; i < _from.length; i++) {\r\n            _modifyManualApproval(_from[i], _to[i], _expiryTimes[i], _changeInAllowance[i], _descriptions[i], _increase[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a pairs of addresses from manual approvals\r\n    * @param _from is the address from which transfers are approved\r\n    * @param _to is the address to which transfers are approved\r\n    */\r\n    function revokeManualApproval(address _from, address _to) external withPerm(ADMIN) {\r\n        _revokeManualApproval(_from, _to);\r\n    }\r\n\r\n    function _revokeManualApproval(address _from, address _to) internal {\r\n        uint256 index = approvalIndex[_from][_to];\r\n        require(index != 0, \"Approval not exist\");\r\n\r\n        // find the record in active approvals array & delete it\r\n        index--; //Index is stored after incrementation so that 0 represents non existant index\r\n        uint256 lastApprovalIndex = approvals.length - 1;\r\n        if (index != lastApprovalIndex) {\r\n            approvals[index] = approvals[lastApprovalIndex];\r\n            approvalIndex[approvals[index].from][approvals[index].to] = index + 1;\r\n        }\r\n        delete approvalIndex[_from][_to];\r\n        approvals.length--;\r\n        emit RevokeManualApproval(_from, _to, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes mutiple pairs of addresses from manual approvals\r\n    * @param _from is the address array from which transfers are approved\r\n    * @param _to is the address array to which transfers are approved\r\n    */\r\n    function revokeManualApprovalMulti(address[] calldata _from, address[] calldata _to) external withPerm(ADMIN) {\r\n        require(_from.length == _to.length, \"Input array length mismatch\");\r\n        for(uint256 i = 0; i < _from.length; i++){\r\n            _revokeManualApproval(_from[i], _to[i]);\r\n        }\r\n    }\r\n\r\n    function _checkInputLengthArray(\r\n        address[] memory _from,\r\n        address[] memory _to,\r\n        uint256[] memory _expiryTimes,\r\n        uint256[] memory _allowances,\r\n        bytes32[] memory _descriptions\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        require(_from.length == _to.length &&\r\n        _to.length == _allowances.length &&\r\n        _allowances.length == _expiryTimes.length &&\r\n        _expiryTimes.length == _descriptions.length,\r\n        \"Input array length mismatch\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the all active approvals corresponds to an address\r\n     * @param _user Address of the holder corresponds to whom list of manual approvals\r\n     * need to return\r\n     * @return address[] addresses from\r\n     * @return address[] addresses to\r\n     * @return uint256[] allowances provided to the approvals\r\n     * @return uint256[] expiry times provided to the approvals\r\n     * @return bytes32[] descriptions provided to the approvals\r\n     */\r\n    function getActiveApprovalsToUser(address _user) external view returns(address[] memory, address[] memory, uint256[] memory, uint256[] memory, uint256[] memory, bytes32[] memory) {\r\n        uint256 counter = 0;\r\n        uint256 approvalsLength = approvals.length;\r\n        for (uint256 i = 0; i < approvalsLength; i++) {\r\n            if ((approvals[i].from == _user || approvals[i].to == _user)\r\n                && approvals[i].expiryTime >= now)\r\n                counter ++;\r\n        }\r\n\r\n        address[] memory from = new address[](counter);\r\n        address[] memory to = new address[](counter);\r\n        uint256[] memory initialAllowance = new uint256[](counter);\r\n        uint256[] memory allowance = new uint256[](counter);\r\n        uint256[] memory expiryTime = new uint256[](counter);\r\n        bytes32[] memory description = new bytes32[](counter);\r\n\r\n        counter = 0;\r\n        for (uint256 i = 0; i < approvalsLength; i++) {\r\n            if ((approvals[i].from == _user || approvals[i].to == _user)\r\n                && approvals[i].expiryTime >= now) {\r\n\r\n                from[counter]=approvals[i].from;\r\n                to[counter]=approvals[i].to;\r\n                initialAllowance[counter]=approvals[i].initialAllowance;\r\n                allowance[counter]=approvals[i].allowance;\r\n                expiryTime[counter]=approvals[i].expiryTime;\r\n                description[counter]=approvals[i].description;\r\n                counter ++;\r\n            }\r\n        }\r\n        return (from, to, initialAllowance, allowance, expiryTime, description);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the details of the approval corresponds to _from & _to addresses\r\n     * @param _from Address of the sender\r\n     * @param _to Address of the receiver\r\n     * @return uint256 expiryTime of the approval\r\n     * @return uint256 allowance provided to the approval\r\n     * @return uint256 the remaining allowance\r\n     * @return uint256 Description provided to the approval\r\n     */\r\n    function getApprovalDetails(address _from, address _to) external view returns(uint256, uint256, uint256, bytes32) {\r\n        uint256 index = approvalIndex[_from][_to];\r\n        if (index != 0) {\r\n            index--;\r\n            assert(index < approvals.length);\r\n            ManualApproval storage approval = approvals[index];\r\n            return(\r\n                approval.expiryTime,\r\n                approval.initialAllowance,\r\n                approval.allowance,\r\n                approval.description\r\n            );\r\n        }\r\n        return (uint256(0), uint256(0), uint256(0), bytes32(0));\r\n    }\r\n\r\n    /**\r\n    * @notice Returns the current number of active approvals\r\n    */\r\n    function getTotalApprovalsLength() external view returns(uint256) {\r\n        return approvals.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the details of all approvals\r\n     * @return address[] addresses from\r\n     * @return address[] addresses to\r\n     * @return uint256[] allowances provided to the approvals\r\n     * @return uint256[] expiry times provided to the approvals\r\n     * @return bytes32[] descriptions provided to the approvals\r\n     */\r\n    function getAllApprovals() external view returns(address[] memory, address[] memory, uint256[] memory, uint256[] memory, uint256[] memory, bytes32[] memory) {\r\n        uint256 approvalsLength = approvals.length;\r\n        address[] memory from = new address[](approvalsLength);\r\n        address[] memory to = new address[](approvalsLength);\r\n        uint256[] memory initialAllowance = new uint256[](approvalsLength);\r\n        uint256[] memory allowance = new uint256[](approvalsLength);\r\n        uint256[] memory expiryTime = new uint256[](approvalsLength);\r\n        bytes32[] memory description = new bytes32[](approvalsLength);\r\n\r\n        for (uint256 i = 0; i < approvalsLength; i++) {\r\n\r\n            from[i]=approvals[i].from;\r\n            to[i]=approvals[i].to;\r\n            initialAllowance[i]=approvals[i].initialAllowance;\r\n            allowance[i]=approvals[i].allowance;\r\n            expiryTime[i]=approvals[i].expiryTime;\r\n            description[i]=approvals[i].description;\r\n\r\n        }\r\n\r\n        return (from, to, initialAllowance, allowance, expiryTime, description);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the permissions flag that are associated with ManualApproval transfer manager\r\n     */\r\n    function getPermissions() public view returns(bytes32[] memory) {\r\n        bytes32[] memory allPermissions = new bytes32[](1);\r\n        allPermissions[0] = ADMIN;\r\n        return allPermissions;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"reclaimETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitFunction\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_partition\",\"type\":\"bytes32\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTokensByPartition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"executeTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_allowance\",\"type\":\"uint256\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"bytes32\"}],\"name\":\"addManualApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvalIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvals\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"initialAllowance\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"},{\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCKED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"revokeManualApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getApprovalDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPermissions\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_allowances\",\"type\":\"uint256[]\"},{\"name\":\"_expiryTimes\",\"type\":\"uint256[]\"},{\"name\":\"_descriptions\",\"type\":\"bytes32[]\"}],\"name\":\"addManualApprovalMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_expiryTimes\",\"type\":\"uint256[]\"},{\"name\":\"_changeInAllowance\",\"type\":\"uint256[]\"},{\"name\":\"_descriptions\",\"type\":\"bytes32[]\"},{\"name\":\"_increase\",\"type\":\"bool[]\"}],\"name\":\"modifyManualApprovalMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"name\":\"_changeInAllowance\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"bytes32\"},{\"name\":\"_increase\",\"type\":\"bool\"}],\"name\":\"modifyManualApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveApprovalsToUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"revokeManualApprovalMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalApprovalsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"verifyTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDataStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_securityToken\",\"type\":\"address\"},{\"name\":\"_polyToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_description\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_addedBy\",\"type\":\"address\"}],\"name\":\"AddManualApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_allowance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_description\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_editedBy\",\"type\":\"address\"}],\"name\":\"ModifyManualApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_addedBy\",\"type\":\"address\"}],\"name\":\"RevokeManualApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"ManualApprovalTransferManager","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://40b5025d1a94dded19f8e3e82c2cd295ac3a5065f131b8fd2b62c09b6651a979"}]}