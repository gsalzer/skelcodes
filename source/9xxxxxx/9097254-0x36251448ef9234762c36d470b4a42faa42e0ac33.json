{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\n\ninterface IPPTokenController {\n  event SetGeoDataManager(address indexed geoDataManager);\n  event SetFeeManager(address indexed geoDataManager);\n  event NewProposal(\n    uint256 indexed proposalId,\n    uint256 indexed tokenId,\n    address indexed creator\n  );\n  event ProposalExecuted(uint256 indexed proposalId);\n  event ProposalExecutionFailed(uint256 indexed proposalId);\n  event ProposalApproval(\n    uint256 indexed proposalId,\n    uint256 indexed tokenId\n  );\n  event ProposalRejection(\n    uint256 indexed proposalId,\n    uint256 indexed tokenId\n  );\n  event ProposalCancellation(\n    uint256 indexed proposalId,\n    uint256 indexed tokenId\n  );\n  event SetBurner(address burner);\n  event SetBurnTimeout(uint256 indexed tokenId, uint256 timeout);\n  event InitiateTokenBurn(uint256 indexed tokenId, uint256 timeoutAt);\n  event BurnTokenByTimeout(uint256 indexed tokenId);\n  event CancelTokenBurn(uint256 indexed tokenId);\n  event SetFee(bytes32 indexed key, uint256 value);\n  event WithdrawEth(address indexed to, uint256 amount);\n  event WithdrawErc20(address indexed to, address indexed tokenAddress, uint256 amount);\n\n  function fees(bytes32) external returns (uint256);\n  function setBurner(address _burner) external;\n  function setGeoDataManager(address _geoDataManager) external;\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external;\n  function setFee(bytes32 _key, uint256 _value) external;\n  function withdrawErc20(address _tokenAddress, address _to) external;\n  function withdrawEth(address payable _to) external;\n  function initiateTokenBurn(uint256 _tokenId) external;\n  function cancelTokenBurn(uint256 _tokenId) external;\n  function burnTokenByTimeout(uint256 _tokenId) external;\n  function propose(bytes calldata _data, string calldata _dataLink) external payable;\n  function approve(uint256 _proposalId) external;\n  function execute(uint256 _proposalId) external;\n  function fetchTokenId(bytes calldata _data) external pure returns (uint256 tokenId);\n  function() external payable;\n}\n\ninterface IPPToken {\n  event SetMinter(address indexed minter);\n  event SetBaseURI(string baseURI);\n  event SetDataLink(string indexed dataLink);\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\n  event SetController(address indexed controller);\n  event SetDetails(\n    address indexed geoDataManager,\n    uint256 indexed privatePropertyId\n  );\n  event SetContour(\n    address indexed geoDataManager,\n    uint256 indexed privatePropertyId\n  );\n  event SetExtraData(bytes32 indexed key, bytes32 value);\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\n\n  enum PropertyInitialSetupStage {\n    PENDING,\n    DETAILS,\n    DONE\n  }\n\n  enum AreaSource {\n    USER_INPUT,\n    CONTRACT\n  }\n\n  enum TokenType {\n    NULL,\n    LAND_PLOT,\n    BUILDING,\n    ROOM,\n    PACKAGE\n  }\n\n  // ERC20 METHOD\n  function transferFrom(address from, address to, uint256 tokenId) external;\n  function approve(address to, uint256 tokenId) external;\n\n  // PERMISSIONED METHODS\n\n  function setMinter(address _minter) external;\n  function setDataLink(string calldata _dataLink) external;\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\n  function setController(address payable _controller) external;\n  function setDetails(\n    uint256 _privatePropertyId,\n    TokenType _tokenType,\n    AreaSource _areaSource,\n    uint256 _area,\n    bytes32 _ledgerIdentifier,\n    string calldata _humanAddress,\n    string calldata _dataLink\n  )\n    external;\n\n  function setContour(\n    uint256 _privatePropertyId,\n    uint256[] calldata _contour,\n    int256 _highestPoint\n  )\n    external;\n\n  function mint(address _to) external;\n  function burn(uint256 _tokenId) external;\n\n  // GETTERS\n  function controller() external view returns (address payable);\n  function minter() external view returns (address);\n\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\n  function ownerOf(uint256 _tokenId) external view returns (address);\n  function exists(uint256 _tokenId) external view returns (bool);\n  function getType(uint256 _tokenId) external view returns (TokenType);\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\n  function getArea(uint256 _tokenId) external view returns (uint256);\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\n  function getDetails(uint256 _privatePropertyId)\n    external\n    view\n    returns (\n      TokenType tokenType,\n      uint256[] memory contour,\n      int256 highestPoint,\n      AreaSource areaSource,\n      uint256 area,\n      bytes32 ledgerIdentifier,\n      string memory humanAddress,\n      string memory dataLink,\n      PropertyInitialSetupStage setupStage\n    );\n}\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IACL {\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\n}\n\ninterface IPPGlobalRegistry {\n  function setContract(bytes32 _key, address _value) external;\n\n  // GETTERS\n  function getContract(bytes32 _key) external view returns (address);\n  function getACL() external view returns (IACL);\n  function getGaltTokenAddress() external view returns (address);\n  function getPPTokenRegistryAddress() external view returns (address);\n  function getPPLockerRegistryAddress() external view returns (address);\n  function getPPMarketAddress() external view returns (address);\n}\n\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n\ncontract PPTokenController is IPPTokenController, Ownable {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  bytes32 public constant PROPOSAL_GALT_FEE_KEY = bytes32(\"CONTROLLER_PROPOSAL_GALT\");\n  bytes32 public constant PROPOSAL_ETH_FEE_KEY = bytes32(\"CONTROLLER_PROPOSAL_ETH\");\n\n  enum ProposalStatus {\n    NULL,\n    PENDING,\n    APPROVED,\n    EXECUTED,\n    REJECTED,\n    CANCELLED\n  }\n\n  struct Proposal {\n    address creator;\n    ProposalStatus status;\n    bool tokenOwnerApproved;\n    bool geoDataManagerApproved;\n    bytes data;\n    string dataLink;\n  }\n\n  IPPGlobalRegistry public globalRegistry;\n  IERC721 public tokenContract;\n  address public geoDataManager;\n  address public feeManager;\n  address public burner;\n  uint256 public defaultBurnTimeoutDuration;\n  uint256 internal idCounter;\n\n  mapping(uint256 => Proposal) public proposals;\n  // tokenId => timeoutDuration (in seconds)\n  mapping(uint256 => uint256) public burnTimeoutDuration;\n  // tokenId => burnTimeoutAt\n  mapping(uint256 => uint256) public burnTimeoutAt;\n  // key => fee\n  mapping(bytes32 => uint256) public fees;\n\n  constructor(IPPGlobalRegistry _globalRegistry, IERC721 _tokenContract, uint256 _defaultBurnTimeoutDuration) public {\n    require(_defaultBurnTimeoutDuration > 0, \"Invalid burn timeout duration\");\n\n    defaultBurnTimeoutDuration = _defaultBurnTimeoutDuration;\n\n    tokenContract = _tokenContract;\n  }\n\n  function() external payable {\n  }\n\n  // CONTRACT OWNER INTERFACE\n\n  function setGeoDataManager(address _geoDataManager) external onlyOwner {\n    geoDataManager = _geoDataManager;\n\n    emit SetGeoDataManager(_geoDataManager);\n  }\n\n  function setFeeManager(address _feeManager) external onlyOwner {\n    feeManager = _feeManager;\n\n    emit SetFeeManager(_feeManager);\n  }\n\n  function setBurner(address _burner) external onlyOwner {\n    burner = _burner;\n\n    emit SetBurner(_burner);\n  }\n\n  function withdrawErc20(address _tokenAddress, address _to) external {\n    require(msg.sender == feeManager, \"Missing permissions\");\n\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\n\n    IERC20(_tokenAddress).transfer(_to, balance);\n\n    emit WithdrawErc20(_to, _tokenAddress, balance);\n  }\n\n  function withdrawEth(address payable _to) external {\n    require(msg.sender == feeManager, \"Missing permissions\");\n\n    uint256 balance = address(this).balance;\n\n    _to.transfer(balance);\n\n    emit WithdrawEth(_to, balance);\n  }\n\n  function setFee(bytes32 _key, uint256 _value) external {\n    require(msg.sender == feeManager, \"Missing permissions\");\n\n    fees[_key] = _value;\n    emit SetFee(_key, _value);\n  }\n\n  // BURNER INTERFACE\n\n  function initiateTokenBurn(uint256 _tokenId) external {\n    require(msg.sender == burner, \"Only burner allowed\");\n    require(burnTimeoutAt[_tokenId] == 0, \"Burn already initiated\");\n    require(tokenContract.ownerOf(_tokenId) != address(0), \"Token doesn't exists\");\n\n    uint256 duration = burnTimeoutDuration[_tokenId];\n    if (duration == 0) {\n      duration = defaultBurnTimeoutDuration;\n    }\n\n    uint256 timeoutAt = block.timestamp.add(duration);\n    burnTimeoutAt[_tokenId] = timeoutAt;\n\n    emit InitiateTokenBurn(_tokenId, timeoutAt);\n  }\n\n  // TOKEN OWNER INTERFACE\n\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external {\n    require(tokenContract.ownerOf(_tokenId) == msg.sender, \"Only token owner allowed\");\n    require(_duration > 0, \"Invalid timeout duration\");\n\n    burnTimeoutDuration[_tokenId] = _duration;\n\n    emit SetBurnTimeout(_tokenId, _duration);\n  }\n\n  function cancelTokenBurn(uint256 _tokenId) external {\n    require(burnTimeoutAt[_tokenId] != 0, \"Burn not initiated\");\n    require(tokenContract.ownerOf(_tokenId) == msg.sender, \"Only token owner allowed\");\n\n    burnTimeoutAt[_tokenId] = 0;\n\n    emit CancelTokenBurn(_tokenId);\n  }\n\n  // COMMON INTERFACE\n\n  function propose(\n    bytes calldata _data,\n    string calldata _dataLink\n  )\n    external\n    payable\n  {\n    address msgSender = msg.sender;\n    uint256 tokenId = fetchTokenId(_data);\n    uint256 proposalId = _nextId();\n\n    Proposal storage p = proposals[proposalId];\n\n    if (msgSender == geoDataManager) {\n      p.geoDataManagerApproved = true;\n    } else if (msgSender == tokenContract.ownerOf(tokenId)) {\n      _acceptProposalFee();\n      p.tokenOwnerApproved = true;\n    } else {\n      revert(\"Missing permissions\");\n    }\n\n    p.creator = msgSender;\n    p.data = _data;\n    p.dataLink = _dataLink;\n    p.status = ProposalStatus.PENDING;\n\n    emit NewProposal(proposalId, tokenId, msg.sender);\n  }\n\n  function approve(uint256 _proposalId) external {\n    Proposal storage p = proposals[_proposalId];\n    uint256 tokenId = fetchTokenId(p.data);\n\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\n\n    if (p.geoDataManagerApproved == true) {\n      require(msg.sender == tokenContract.ownerOf(tokenId), \"Missing permissions\");\n      p.tokenOwnerApproved = true;\n    } else if (p.tokenOwnerApproved == true) {\n      require(msg.sender == geoDataManager, \"Missing permissions\");\n      p.geoDataManagerApproved = true;\n    } else {\n      revert(\"Missing permissions\");\n    }\n\n    emit ProposalApproval(_proposalId, tokenId);\n\n    p.status = ProposalStatus.APPROVED;\n\n    execute(_proposalId);\n  }\n\n  function reject(uint256 _proposalId) external {\n    Proposal storage p = proposals[_proposalId];\n    uint256 tokenId = fetchTokenId(p.data);\n\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\n\n    if (p.geoDataManagerApproved == true) {\n      require(msg.sender == tokenContract.ownerOf(tokenId), \"Missing permissions\");\n    } else if (p.tokenOwnerApproved == true) {\n      require(msg.sender == geoDataManager, \"Missing permissions\");\n    } else {\n      revert(\"Missing permissions\");\n    }\n\n    p.status = ProposalStatus.REJECTED;\n\n    emit ProposalRejection(_proposalId, tokenId);\n  }\n\n  function cancel(uint256 _proposalId) external {\n    Proposal storage p = proposals[_proposalId];\n    uint256 tokenId = fetchTokenId(p.data);\n\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\n\n    if (msg.sender == geoDataManager) {\n      require(p.geoDataManagerApproved == true, \"Only own proposals can be cancelled\");\n    } else if (msg.sender == tokenContract.ownerOf(tokenId)) {\n      require(p.tokenOwnerApproved == true, \"Only own proposals can be cancelled\");\n    } else {\n      revert(\"Missing permissions\");\n    }\n\n    p.status = ProposalStatus.CANCELLED;\n\n    emit ProposalCancellation(_proposalId, tokenId);\n  }\n\n  // PERMISSIONLESS INTERFACE\n\n  function execute(uint256 _proposalId) public {\n    Proposal storage p = proposals[_proposalId];\n\n    require(p.tokenOwnerApproved == true, \"Token owner approval required\");\n    require(p.geoDataManagerApproved == true, \"GeoDataManager approval required\");\n    require(p.status == ProposalStatus.APPROVED, \"Expect APPROVED status\");\n\n    p.status = ProposalStatus.EXECUTED;\n\n    (bool ok,) = address(tokenContract)\n      .call\n      .gas(gasleft().sub(50000))(p.data);\n\n    if (ok == false) {\n      emit ProposalExecutionFailed(_proposalId);\n      p.status = ProposalStatus.APPROVED;\n    } else {\n      emit ProposalExecuted(_proposalId);\n    }\n  }\n\n  function burnTokenByTimeout(uint256 _tokenId) external {\n    require(burnTimeoutAt[_tokenId] != 0, \"Timeout not set\");\n    require(block.timestamp > burnTimeoutAt[_tokenId], \"Timeout has not passed yet\");\n    require(tokenContract.ownerOf(_tokenId) != address(0), \"Token already burned\");\n\n    IPPToken(address(tokenContract)).burn(_tokenId);\n\n    emit BurnTokenByTimeout(_tokenId);\n  }\n\n  // @dev Assuming that a tokenId is always the first argument in a method\n  function fetchTokenId(bytes memory _data) public pure returns (uint256 tokenId) {\n    assembly {\n      tokenId := mload(add(_data, 0x24))\n    }\n\n    require(tokenId > 0, \"Failed fetching tokenId from encoded data\");\n  }\n\n  // INTERNAL\n\n  function _nextId() internal returns (uint256) {\n    idCounter += 1;\n    return idCounter;\n  }\n\n  function _galtToken() internal view returns (IERC20) {\n    return IERC20(globalRegistry.getGaltTokenAddress());\n  }\n\n  function _acceptProposalFee() internal {\n    if (msg.value == 0) {\n      _galtToken().transferFrom(msg.sender, address(this), fees[PROPOSAL_GALT_FEE_KEY]);\n    } else {\n      require(msg.value == fees[PROPOSAL_ETH_FEE_KEY], \"Invalid fee\");\n    }\n  }\n}\n\ncontract PPTokenControllerFactory {\n  // USER INTERFACE\n\n  function build(\n    IPPGlobalRegistry _globalRegistry,\n    IERC721 _tokenContract,\n    uint256 _defaultBurnTimeoutDuration\n  )\n    external\n    returns (PPTokenController)\n  {\n    PPTokenController ppTokenController = new PPTokenController(\n      _globalRegistry,\n      _tokenContract,\n      _defaultBurnTimeoutDuration\n    );\n\n    ppTokenController.transferOwnership(msg.sender);\n\n    return ppTokenController;\n  }\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"_globalRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultBurnTimeoutDuration\",\"type\":\"uint256\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"contract PPTokenController\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPTokenControllerFactory","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://1e2549a968cc693669650dd20e1db0eef8240a8a5c3de30fa34890b3eedd1f15"}]}