{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;}\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");}\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;}\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");}\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;}\r\n}\r\n\r\ncontract Secondary {\r\n    address payable private _primary;\r\n    address private _primaryCandidate;\r\n\r\n    constructor () internal {\r\n        _primary = msg.sender;\r\n        _primaryCandidate = address(0);\r\n    }\r\n\r\n    modifier onlyPrimary() {\r\n        require(msg.sender == _primary, \"Secondary: caller is not the primary account\");\r\n        _;\r\n    }\r\n\r\n    function primary() public view returns (address payable) {\r\n        return _primary;\r\n    }\r\n    \r\n    function acceptBeingPrimary() public {\r\n        require(msg.sender == _primaryCandidate, \"Secondary: caller is not the primary candidate account\");\r\n        require(msg.sender != address(0));\r\n        \r\n        _primary = toPayable(_primaryCandidate);\r\n        _primaryCandidate = address(0);\r\n    }\r\n\r\n    function setPrimaryCandidate(address recipient) public onlyPrimary {\r\n        require(recipient != _primary, \"You can't make yourself Primary Candidate\");\r\n        _primaryCandidate = recipient;\r\n    }\r\n    \r\n    function toPayable(address input) internal pure returns (address payable){\r\n        return address(uint160(input));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract assetContractable is Secondary{\r\n    mapping(address=>bool) private _assetContracts;\r\n    \r\n    modifier onlyAssetContracts() {\r\n        require(_assetContracts[msg.sender], \"Only Assets can call this function!\");\r\n        _;\r\n    }\r\n    \r\n    function assetContracts(address input) public view returns (bool) {\r\n        return _assetContracts[input];\r\n    }\r\n \r\n    function addAssetContracts(address input) public onlyPrimary{\r\n        require(input != address(this), \"Input was OUSD address\");\r\n        require(input != msg.sender, \"Input was your address\");\r\n        require(input != address(0), \"Input was zero\");\r\n        require(!assetContracts(input), \"Input already an Asset Contract\");\r\n         \r\n        _assetContracts[input] = true;\r\n    }\r\n    \r\n    function removeAssetContracts(address input) public onlyPrimary{\r\n        require(assetContracts(input), \"Input not as Asset Contract\");\r\n        _assetContracts[input] = false;\r\n    }\r\n    \r\n}\r\n\r\ninterface Assetcontract{\r\n    function AssetMint(address sender, uint256 valuesent) external;\r\n    function contractID() external view returns (string memory);\r\n    function updateLastPrice(uint256 input) external;\r\n    function lastPrice() external view returns (uint);\r\n}\r\n\r\ninterface Pricer{\r\n    function getPrice(string calldata QUERY) external payable returns (bytes32);\r\n    function fee() external view returns (uint256);\r\n    function updateFee() external;\r\n    function EthandGasPriceAddress() external view returns (address);\r\n}\r\n\r\ninterface EthandGasPricer{\r\n    function ethPrice() external view returns (uint256);\r\n}\r\n\r\ncontract PriceGettable is assetContractable{\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string private contractID;\r\n    address payable private _pricerAddress;\r\n    uint private _feeIncrease;\r\n    uint private _resultDecrease;\r\n    uint internal _balanceMin;\r\n  \r\n    function pricerAddress() public view returns (address payable) {\r\n        return _pricerAddress;\r\n    }\r\n    \r\n    function setpricerAddress(address payable input) external onlyPrimary {\r\n        require(input != address(this), \"Input was OUSD address\");\r\n        require(!assetContracts(input), \"Input was Asset address\");\r\n        require(input != msg.sender, \"Input was your address\");\r\n        require(input != address(0), \"Input was zero\");\r\n    \r\n        _pricerAddress = input;\r\n    }\r\n    \r\n    function updateContractID(string memory input) public onlyPrimary {\r\n        contractID = input;\r\n    }\r\n    \r\n    function getEthPrice() internal returns (bytes32) {\r\n        return Pricer(_pricerAddress).getPrice.value(fee())(contractID);\r\n    }\r\n    \r\n     function getAssetPrice(address asset) internal returns (bytes32) {\r\n        string memory assetID = Assetcontract(asset).contractID();\r\n        return Pricer(_pricerAddress).getPrice.value(fee())(assetID);\r\n    }\r\n    \r\n    modifier onlyPricer() {\r\n        require(msg.sender == _pricerAddress, \"Only Pricer contract can call this function!\");\r\n        _;\r\n    }\r\n    \r\n    function fee() internal view returns (uint256) {\r\n        return Pricer(_pricerAddress).fee();\r\n    }\r\n    \r\n    function updateFee() internal {   \r\n        Pricer(_pricerAddress).updateFee(); \r\n    }\r\n    \r\n    function ethPrice() internal view returns (uint256){\r\n       address EthandGasPriceAddress = Pricer(_pricerAddress).EthandGasPriceAddress();\r\n       return EthandGasPricer(EthandGasPriceAddress).ethPrice();\r\n    }\r\n    \r\n    function lastPrice() public view returns (uint){\r\n        return ethPrice();\r\n    }\r\n\r\n    function feeIncrease(uint input) public view returns (uint256) {\r\n       return _feeIncrease.add(100).mul(input).div(100);\r\n    }\r\n    \r\n    function setFeeIncrease(uint input) public onlyPrimary{\r\n        _feeIncrease = input;\r\n    }\r\n    \r\n    function resultDecrease(uint input) public view returns (uint256) {\r\n       return input.sub(input.mul(_resultDecrease).div(10000));\r\n    }\r\n    \r\n    function setResultDecrease(uint input) public onlyPrimary{\r\n        _resultDecrease = input;\r\n    }\r\n    \r\n    function setBalanceMin(uint input) public onlyPrimary{\r\n        _balanceMin = input;\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract ERC20 is IERC20, PriceGettable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    \r\n    uint constant internal DECIMAL = 10**18;\r\n    \r\n    mapping(bytes32=>customer) internal Customers;\r\n    mapping(uint=>uint) private withdrawPerBlock;\r\n    \r\n    enum IdType { gettingAsset, gettingUSDfromAsset, gettingUSDfromEth, gettingEth}\r\n    \r\n    struct customer { \r\n        address sender;\r\n        uint256 valuesent;\r\n        address Assetcontract;\r\n        IdType mytype;\r\n        uint feeEth;\r\n    }\r\n    \r\n    uint256 private withdrawThreshold = 1;\r\n    \r\n    function updateWithdrawThreshold(uint256 _withdrawThreshold) public onlyPrimary {\r\n        withdrawThreshold = _withdrawThreshold;\r\n    }\r\n    \r\n    //Max you can withdraw in USD per block\r\n    function withdrawMAX() public view returns (uint256){\r\n        \r\n        if(_balanceMin > address(this).balance.mul(ethPrice())/10**36){return 0;}\r\n        uint usdMAX = (address(this).balance.mul(ethPrice())).div(withdrawThreshold.mul(DECIMAL));\r\n      \r\n        if(withdrawPerBlock[block.number] < usdMAX){\r\n            return usdMAX.sub(withdrawPerBlock[block.number]);\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        \r\n        if(recipient == address(this)){\r\n            require(amount <= withdrawMAX(), \"Amount sent is too big\");\r\n            withdrawPerBlock[block.number] = withdrawPerBlock[block.number].add(amount);\r\n            \r\n            updateFee();\r\n            uint USDFee = (fee().mul(ethPrice())).div(DECIMAL);\r\n            require(amount > feeIncrease(USDFee), \"Amount sent is too small\");\r\n            \r\n            _burn(sender,amount);\r\n            bytes32 customerId = getEthPrice();\r\n            Customers[customerId] = customer(sender, amount, sender, IdType.gettingEth, feeIncrease(fee()));\r\n            \r\n        }else if(assetContracts(recipient)){\r\n            \r\n           updateFee();\r\n           uint USDFee = (fee().mul(ethPrice())).div(DECIMAL);\r\n           require(amount > feeIncrease(USDFee), \"Amount sent is too small\");\r\n           \r\n           _burn(sender,amount);\r\n           bytes32 CustomerId = getAssetPrice(recipient);\r\n           Customers[CustomerId] = customer(sender, amount, recipient, IdType.gettingAsset, feeIncrease(fee()) );\r\n            \r\n        }else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n        \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount,address sender ) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(sender, account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(value, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n   \r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface token {\r\n    function balanceOf(address input) external returns (uint256);\r\n    function transfer(address input, uint amount) external;\r\n}\r\n\r\ncontract MainToken is ERC20, ERC20Detailed{\r\n\r\n    constructor () public ERC20Detailed(\"Onyx USD\", \"OUSD\", 18){\r\n        _mint(primary(),10**18, address(this));\r\n    }\r\n    \r\n    function () external payable {\r\n        getTokens(msg.sender);\r\n    }\r\n    \r\n    function getTokens(address sendTo) public payable {\r\n        updateFee();\r\n        bytes32 customerId = getEthPrice();\r\n        uint amount = msg.value.sub(fee());\r\n        Customers[customerId] = customer(sendTo, amount, sendTo, IdType.gettingUSDfromEth, 0);\r\n    }\r\n    \r\n    function sendFunds() external payable {}\r\n    \r\n    function USDtrade(address sender, uint assetAmount) public onlyAssetContracts{\r\n       bytes32 customerId = getAssetPrice(msg.sender);\r\n       Customers[customerId] = customer(sender, assetAmount, msg.sender,IdType.gettingUSDfromAsset, feeIncrease(fee())  );\r\n    }\r\n    \r\n    function priceUpdated(uint result, bytes32 customerId, bool marketOpen) public onlyPricer {\r\n       uint feeEth       = Customers[customerId].feeEth;\r\n       address sender    = Customers[customerId].sender;\r\n       uint256 valuesent = Customers[customerId].valuesent;\r\n       address AC        = Customers[customerId].Assetcontract;\r\n       IdType mytype     = Customers[customerId].mytype;\r\n       \r\n       require(sender != address(0), \"Sender address was zero\");\r\n       require(AC != address(0), \"Asset contract address was zero\");\r\n       require(msg.sender != address(0));\r\n      \r\n       if(mytype == IdType.gettingUSDfromAsset){\r\n\r\n            if(marketOpen){\r\n                \r\n                Assetcontract(AC).updateLastPrice(result);\r\n                \r\n                uint amount = (valuesent.mul(result)).sub(feeEth.mul(ethPrice())).div(DECIMAL);\r\n                _mint(sender, amount , AC);\r\n                \r\n            }else{\r\n                uint assetFee = fee().mul(ethPrice()).div(Assetcontract(AC).lastPrice());\r\n                Assetcontract(AC).AssetMint(sender,valuesent.sub(assetFee)); \r\n            }\r\n\r\n        }else if(mytype == IdType.gettingAsset){\r\n\r\n            if(marketOpen){\r\n\r\n               Assetcontract(AC).updateLastPrice(result);\r\n               \r\n               uint amount = valuesent.mul(DECIMAL).sub(feeEth.mul(ethPrice())).div(result);\r\n               Assetcontract(AC).AssetMint(sender, amount);\r\n\r\n            }else{\r\n                uint usdfee = feeEth.mul(ethPrice()).div(DECIMAL);\r\n                _mint(sender, valuesent.sub(usdfee), AC);\r\n            }\r\n            \r\n        }else if(mytype == IdType.gettingUSDfromEth){\r\n            \r\n            if(marketOpen){\r\n            \r\n                uint256 amount = (valuesent.mul(result)).div(DECIMAL);\r\n                _mint(sender, amount ,address(this));\r\n                \r\n            }else{\r\n                toPayable(sender).transfer(valuesent);\r\n            }\r\n\r\n        }else if(mytype == IdType.gettingEth){\r\n            \r\n            if(marketOpen){\r\n                \r\n                uint256 amount = valuesent.mul(DECIMAL).div(result).sub(feeEth);\r\n                toPayable(sender).transfer( resultDecrease(amount) );\r\n                \r\n            }else{\r\n                \r\n                uint usdfee = feeEth.mul(ethPrice()).div(DECIMAL);\r\n                _mint(sender, valuesent.sub(usdfee), address(this));\r\n            }\r\n           \r\n        }\r\n    \r\n       delete Customers[customerId];\r\n  \r\n    }\r\n    \r\n    function USDMint(address to, uint256 valuesent) public onlyPrimary{\r\n        _mint(to,valuesent, address(this));\r\n    }\r\n \r\n    function USDBurn(address to, uint256 valuesent) public onlyPrimary {\r\n        _burn(to,valuesent);\r\n        emit Transfer(to, address(this), valuesent);\r\n    }\r\n\r\n    function getStuckTokens(address _tokenAddress) public {\r\n        token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n   \r\n    function withdrawEth(uint256 amount) public onlyPrimary {\r\n        primary().transfer(amount);\r\n    } \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valuesent\",\"type\":\"uint256\"}],\"name\":\"USDBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valuesent\",\"type\":\"uint256\"}],\"name\":\"USDMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"USDtrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptBeingPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"addAssetContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"assetContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"feeIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"customerId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"marketOpen\",\"type\":\"bool\"}],\"name\":\"priceUpdated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"removeAssetContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"resultDecrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"setBalanceMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"setFeeIncrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setPrimaryCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"setResultDecrease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"input\",\"type\":\"address\"}],\"name\":\"setpricerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"input\",\"type\":\"string\"}],\"name\":\"updateContractID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawThreshold\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawMAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MainToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://67bb80964b14ca2bbd2635f6f4f12dc04e069a2099a2239e10b6f7f425267202"}]}