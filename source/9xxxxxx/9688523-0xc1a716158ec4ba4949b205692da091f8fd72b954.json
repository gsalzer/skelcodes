{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDepositRegistry.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IDepositRegistry {\r\n    struct Deposit {\r\n        bool deposited;\r\n        bool unlockedForWithdrawal;\r\n    }\r\n\r\n    event UserDepositCompleted(address depositRegistry, address indexed user);\r\n    event UserWithdrawnCompleted(address depositRegistry, address indexed user);\r\n    event AddressUnlockedForWithdrawal(address depositRegistry, address indexed user);\r\n    event MigrationFinished(address depositRegistry);\r\n\r\n    function setReferralTracker(address) external;\r\n\r\n    function setERC20Token(address) external;\r\n\r\n    function setKYC(address) external;\r\n\r\n    function setAdministrator(address _admin) external;\r\n\r\n    function migrate(address[] calldata depositors, address oldDeposit) external;\r\n\r\n    function finishMigration() external;\r\n\r\n    function depositFor(address from) external returns (bool);\r\n\r\n    function depositForWithReferral(address from, address referrer) external returns (bool);\r\n\r\n    function delegateDeposit(address to) external returns (bool);\r\n\r\n    function withdraw(address to) external;\r\n\r\n    function unlockAddressForWithdrawal(address user) external;\r\n\r\n    function hasDeposited(address user) external view returns (bool);\r\n\r\n    function isUnlocked(address user) external view returns (bool);\r\n\r\n    function getERC20Token() external view returns (address);\r\n\r\n    function getDepositRegistryByUser(address user) external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IKYCRegistry.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IKYCRegistry {\r\n    event RemovedFromKYC(address indexed user);\r\n    event AddedToKYC(address indexed user);\r\n\r\n    function isConfirmed(address addr) external view returns (bool);\r\n\r\n    function setAdministrator(address _admin) external;\r\n\r\n    function removeAddressFromKYC(address addr) external;\r\n\r\n    function addAddressToKYC(address addr) external;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IAuthorization.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IAuthorization {\r\n    function getKycAddress() external view returns (address);\r\n\r\n    function getDepositAddress() external view returns (address);\r\n\r\n    function hasDeposited(address user) external view returns (bool);\r\n\r\n    function isKYCConfirmed(address user) external view returns (bool);\r\n\r\n    function setKYCRegistry(address _kycAddress) external returns (bool);\r\n\r\n    function setDepositRegistry(address _depositAddress) external returns (bool);\r\n}\r\n\r\n// File: contracts/Authorization.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Authorization is IAuthorization, Ownable {\r\n    address internal kycAddress;\r\n    address internal depositAddress;\r\n\r\n    constructor(address _kycAddress, address _depositAddress) public {\r\n        kycAddress = _kycAddress;\r\n        depositAddress = _depositAddress;\r\n    }\r\n\r\n    function getKycAddress() external view returns (address) {\r\n        return kycAddress;\r\n    }\r\n\r\n    function getDepositAddress() external view returns (address) {\r\n        return depositAddress;\r\n    }\r\n\r\n    function hasDeposited(address user) external view returns (bool) {\r\n        return IDepositRegistry(depositAddress).hasDeposited(user);\r\n    }\r\n\r\n    function isKYCConfirmed(address user) external view returns (bool) {\r\n        return IKYCRegistry(kycAddress).isConfirmed(user);\r\n    }\r\n\r\n    function setKYCRegistry(address _kycAddress) external onlyOwner returns (bool) {\r\n        kycAddress = _kycAddress;\r\n        return true;\r\n    }\r\n\r\n    function setDepositRegistry(address _depositAddress) external onlyOwner returns (bool) {\r\n        depositAddress = _depositAddress;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKycAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isKYCConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositAddress\",\"type\":\"address\"}],\"name\":\"setDepositRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kycAddress\",\"type\":\"address\"}],\"name\":\"setKYCRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Authorization","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000018adbd9651643a91a520cee597ef361ae18ac329000000000000000000000000c234efe85f6f31c47485659e8deb21b0885118c5","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e617c0f14be23587f4cd3b75502e423e6d6be38a132083e433f9761705bda8e5"}]}