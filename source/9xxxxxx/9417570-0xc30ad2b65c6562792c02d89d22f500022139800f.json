{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-02-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2019-06-17\r\n*/\r\n\r\npragma solidity 0.5.9;\r\n                                                                                                                 \r\n// 'BitcoinSoV' contract\r\n// Mineable & Deflationary ERC20 Token using Proof Of Work\r\n// Website: https://btcsov.com\r\n//\r\n// Symbol      : BSOV\r\n// Name        : BitcoinSoV \r\n// Total supply: 21,000,000.00\r\n// Decimals    : 8\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract tokenContract {\r\n     function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool) {}\r\n}\r\n\r\ncontract MergeMiner {\r\n    address constant public btc = 0xB6eD7644C69416d67B522e20bC294A9a9B405B31; //0xbtc\r\n    address constant public sedo = 0x0F00f1696218EaeFa2D2330Df3D6D1f94813b38f; //sedo\r\n    address constant public bsov = 0x26946adA5eCb57f3A1F91605050Ce45c482C9Eb1; //bsov\r\n    \r\n     function multiMint(uint256 nonce, bytes32 challenge_digest, uint8 diff) public\r\n    returns (bool)\r\n    {\r\n        bool success = false;\r\n        if (diff <= 1) {\r\n           tokenContract a = tokenContract(btc);\r\n           success = a.mint(nonce,challenge_digest);//(bytes4(keccak256(\"mint(uint256,bytes32)\")),nonce,challenge_digest);\r\n        //    success = bsov.call(bytes4(keccak256(\"mint(uint256,bytes32)\")),nonce,challenge_digest);\r\n           // success = bsov.call(abi.enc(\"mint(uint256,bytes32))\",nonce,challenge_digest);\r\n        }\r\n        if (diff <= 2) {\r\n            success = false;\r\n            tokenContract a = tokenContract(sedo);\r\n            success = a.mint(nonce,challenge_digest);\r\n         //    success = sedo.call(bytes4(keccak256(\"mint(uint256,bytes32)\")),nonce,challenge_digest);\r\n        }\r\n        if (diff <= 3) {\r\n            success = true;\r\n            tokenContract a = tokenContract(btc);\r\n            success = a.mint(nonce,challenge_digest);\r\n          //  success = btc.call(bytes4(keccak256(\"mint(uint256,bytes32)\")),nonce,challenge_digest);\r\n        }\r\n\r\n\r\n      return success;\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"diff\",\"type\":\"uint8\"}],\"name\":\"multiMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sedo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"btc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bsov\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MergeMiner","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://aa7fdac82675a3bd16a8e3cdb28a58305710db1cb154c50cc7f730e4ed91899b"}]}