{"status":"1","message":"OK","result":[{"SourceCode":"{\"ActionERC20Transfer.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./GelatoActionsStandard.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n// import \\\"../../external/SafeERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\ncontract ActionERC20Transfer is GelatoActionsStandard {\\n    // using SafeERC20 for IERC20; \\u003c- internal library methods vs. try/catch\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // actionSelector public state variable np due to this.actionSelector constant issue\\n    function actionSelector() external pure override returns(bytes4) {\\n        return this.action.selector;\\n    }\\n    uint256 public constant override actionGas = 80000;\\n\\n    function action(\\n        // Standard Action Params\\n        address,  // user\\n        address _userProxy,\\n        address _sendToken,\\n        uint256 _sendAmount,\\n        // Specific Action Params\\n        address _destination\\n    )\\n        external\\n        virtual\\n    {\\n        require(address(this) == _userProxy, \\\"NotOkUserProxy\\\");\\n        IERC20 sendERC20 = IERC20(_sendToken);\\n        try sendERC20.transfer(_destination, _sendAmount) {\\n            emit LogOneWay(_userProxy, _sendToken, _sendAmount, _destination);\\n        } catch {\\n            revert(\\\"ActionERC20Transfer: ErrorTransfer\\\");\\n        }\\n    }\\n\\n    // ===== ACTION CONDITIONS CHECK ========\\n    // Overriding and extending GelatoActionsStandard\\u0027s function (optional)\\n    function actionConditionsCheck(bytes calldata _actionPayloadWithSelector)\\n        external\\n        view\\n        override\\n        virtual\\n        returns(string memory)  // actionCondition\\n    {\\n        (address _user,\\n         address _userProxy,\\n         address _sendToken,\\n         uint256 _sendAmount) = abi.decode(\\n            _actionPayloadWithSelector[4:132],\\n            (address,address,address,uint256)\\n        );\\n        return _actionConditionsCheck(_user, _userProxy, _sendToken, _sendAmount);\\n    }\\n\\n    function _actionConditionsCheck(\\n        // Standard Action Params\\n        address _user,\\n        address _userProxy,\\n        // Specific Action Params\\n        address _sendToken,\\n        uint256 _sendAmount\\n    )\\n        internal\\n        view\\n        virtual\\n        returns(string memory)  // // actionCondition\\n    {\\n        if (!_isUserOwnerOfUserProxy(_user, _userProxy))\\n            return \\\"ActionERC20Transfer: NotOkUserProxyOwner\\\";\\n\\n        if (!_sendToken.isContract()) return \\\"ActionERC20Transfer: NotOkERC20Address\\\";\\n\\n        IERC20 sendERC20 = IERC20(_sendToken);\\n\\n        try sendERC20.balanceOf(_userProxy) returns(uint256 sendERC20Balance) {\\n            if (sendERC20Balance \\u003c _sendAmount)\\n                return \\\"ActionERC20Transfer: NotOkUserProxyBalance\\\";\\n        } catch {\\n            return \\\"ActionERC20Transfer: ErrorBalanceOf\\\";\\n        }\\n        // STANDARD return string to signal actionConditions Ok\\n        return \\\"ok\\\";\\n    }\\n\\n    // ============ API for FrontEnds ===========\\n    function getUserProxysSourceTokenBalance(\\n        // Standard Action Params\\n        address _user,\\n        address _userProxy,\\n        // Specific Action Params\\n        address _sendToken,\\n        uint256,\\n        address\\n    )\\n        external\\n        view\\n        virtual\\n        returns(uint256)\\n    {\\n        _user;  // silence warning\\n        IERC20 sendERC20 = IERC20(_sendToken);\\n        try sendERC20.balanceOf(_userProxy) returns(uint256 userProxySendERC20Balance) {\\n            return userProxySendERC20Balance;\\n        } catch {\\n            revert(\\\"Error: ActionERC20Transfer.getUserProxysSourceTokenBalance: balanceOf\\\");\\n        }\\n    }\\n}\\n\"},\"Address.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"},\"GelatoActionsStandard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoAction.sol\\\";\\nimport \\\"./IGelatoUserProxy.sol\\\";\\n\\n/// @title GelatoActionsStandard\\n/// @dev find all the NatSpecs inside IGelatoAction\\nabstract contract GelatoActionsStandard is IGelatoAction {\\n\\n    event LogOneWay(\\n        address origin,\\n        address sendToken,\\n        uint256 sendAmount,\\n        address destination\\n    );\\n\\n    event LogTwoWay(\\n        address origin,\\n        address sendToken,\\n        uint256 sendAmount,\\n        address destination,\\n        address receiveToken,\\n        uint256 receiveAmount,\\n        address receiver\\n    );\\n\\n    /* CAUTION: all actions must have their action() function according to the\\n    following standard format:\\n        function action(\\n            address _user,\\n            address _userProxy,\\n            address _source,\\n            uint256 _sourceAmount,\\n            address _destination,\\n            ...\\n        )\\n            external;\\n    action function not defined here because non-overridable, due to\\n    different arguments passed across different actions\\n    */\\n\\n    function actionConditionsCheck(bytes calldata)  // _actionPayloadWithSelector\\n        external\\n        view\\n        override\\n        virtual\\n        returns(string memory)  // actionCondition\\n    {\\n        this;\\n        // Standard return value for actionConditions fulfilled and no erros:\\n        return \\\"ok\\\";\\n    }\\n\\n    /// All actions must override this with their own implementation\\n    /*function getUsersSendTokenBalance(\\n        address _user,\\n        address _userProxy,\\n        address _source,\\n        uint256 _sourceAmount,\\n        address _destination,\\n        ...\\n    )\\n        external\\n        view\\n        override\\n        virtual\\n        returns(uint256 userSrcBalance);\\n    getUsersSendTokenBalance not defined here because non-overridable, due to\\n    different arguments passed across different actions\\n    */\\n\\n    function _isUserOwnerOfUserProxy(address _user, address _userProxy)\\n        internal\\n        view\\n        virtual\\n        returns(bool)\\n    {\\n        address owner = IGelatoUserProxy(_userProxy).user();\\n        return _user == owner;\\n    }\\n}\\n\"},\"GelatoCoreEnums.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nabstract contract GelatoCoreEnums {\\n\\n    enum CanExecuteResults {\\n        ExecutionClaimAlreadyExecutedOrCancelled,\\n        ExecutionClaimNonExistant,\\n        ExecutionClaimExpired,\\n        WrongCalldata,  // also returns if a not-selected executor calls fn\\n        ConditionNotOk,\\n        UnhandledConditionError,\\n        Executable\\n    }\\n\\n    // Not needed atm due to revert with string memory reason\\n    /* enum ExecutionResults {\\n        ActionGasNotOk,\\n        ActionNotOk,  // Mostly for caught/handled (by action) action errors\\n        DappNotOk,  // Mostly for caught/handled (by action) dapp errors\\n        UnhandledActionError,\\n        UnhandledUserProxyError,\\n        Success\\n    } */\\n\\n    enum StandardReason { Ok, NotOk, UnhandledError }\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IGelatoAction.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/// @title IGelatoAction - solidity interface of GelatoActionsStandard\\n/// @notice all the APIs and events of GelatoActionsStandard\\n/// @dev all the APIs are implemented inside GelatoActionsStandard\\ninterface IGelatoAction {\\n    function actionSelector() external pure returns(bytes4);\\n    function actionGas() external pure returns(uint256);\\n\\n    /* CAUTION: all actions must have their action() function according to the\\n    following standard format:\\n        function action(\\n            address _user,\\n            address _userProxy,\\n            address _source,\\n            uint256 _sourceAmount,\\n            address _destination,\\n            ...\\n        )\\n            external;\\n    action function not defined here because non-overridable, due to\\n    different arguments passed across different actions\\n    */\\n\\n    /**\\n     * @notice Returns whether the action-specific conditions are fulfilled\\n     * @dev if actions have specific conditions they should override and extend this fn\\n     * @param _actionPayloadWithSelector: the actionPayload (with actionSelector)\\n     * @return actionCondition\\n     */\\n    function actionConditionsCheck(bytes calldata _actionPayloadWithSelector)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// All actions must override this with their own implementation\\n    /*function getUsersSendTokenBalance(\\n        address _user,\\n        address _userProxy,\\n        address _source,\\n        uint256 _sourceAmount,\\n        address _destination,\\n        ...\\n    )\\n        external\\n        view\\n        override\\n        virtual\\n        returns(uint256 userSrcBalance);\\n    getUsersSendTokenBalance not defined here because non-overridable, due to\\n    different arguments passed across different actions\\n    */\\n}\"},\"IGelatoUserProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoAction.sol\\\";\\nimport \\\"./GelatoCoreEnums.sol\\\";\\n\\n/// @title IGelatoUserProxy - solidity interface of GelatoConditionsStandard\\n/// @notice GelatoUserProxy.execute() API called by gelatoCore during .execute()\\n/// @dev all the APIs are implemented inside GelatoUserProxy\\ninterface IGelatoUserProxy {\\n    function callAccount(address, bytes calldata) external payable returns(bool, bytes memory);\\n    function delegatecallAccount(address, bytes calldata) external payable returns(bool, bytes memory);\\n\\n    function delegatecallGelatoAction(\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external\\n        payable;\\n\\n    function user() external view returns(address);\\n    function gelatoCore() external view returns(address);\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"LogOneWay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogTwoWay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sendAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"action\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"}],\"name\":\"actionConditionsCheck\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getUserProxysSourceTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ActionERC20Transfer","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://df565ec62058984d1b3c16f1a3be52768d9c9268d6714db58e1f00317da86688"}]}