{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/Forwarder.sol\n\npragma solidity 0.5.12;\n\n\n\n/**\n * @dev ERC20 interface\n */\ninterface ERC20 {\n  function totalSupply() external view returns (uint supply);\n  function balanceOf(address _owner) external view returns (uint balance);\n  function transfer(address _to, uint _value) external returns (bool success);\n  function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n  function approve(address _spender, uint _value) external returns (bool success);\n  function allowance(address _owner, address _spender) external view returns (uint remaining);\n  function decimals() external view returns(uint digits);\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n/**\n * @dev Chai interface\n */\ninterface IChai {\n  function join(address dst, uint wad) external;\n}\n\n/**\n * @dev Kyber Network Interface\n */\ninterface IKyberNetworkProxy {\n  function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\n  function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\n  function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) external returns(uint);\n}\n\ncontract Forwarder is Initializable, Ownable {\n\n  /**\n   * DEVELOPER NOTES\n   *   - IMPORTANT: Contracts derived from {GSNRecipient} should never use\n   *     `msg.sender`, and should use {_msgSender} instead. See comments here:\n   *      https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L6\n   */\n\n  // =============================================================================================\n  //                                    Storage Variables\n  // =============================================================================================\n\n  // Floatify server\n  address public floatify;\n\n  // Contract addresses and interfaces\n  ERC20 public daiContract;\n  IChai public chaiContract;\n  IKyberNetworkProxy public knpContract;\n  ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n  // =============================================================================================\n  //                                        Events\n  // =============================================================================================\n\n  /**\n   * @dev Emitted when Chai is successfully minted from Dai held by the contract\n   */\n  event ChaiSent(uint256 indexed amountInDai);\n\n  /**\n   * @dev Emitted when Ether is swapped for Dai\n   */\n  event SwapEther(uint256 indexed amountInDai, uint256 indexed amountInEther);\n\n  /**\n   * @dev Emitted when a token is swapped for Dai\n   */\n  event SwapToken(uint256 indexed amountInDai, uint256 indexed amountInToken, address token);\n\n  /**\n   * @dev Emitted when saved addresses are updated\n   */\n  event FloatifyAddressChanged(address indexed previousAddress, address indexed newAddress);\n  event DaiAddressChanged(address indexed previousAddress, address indexed newAddress);\n  event ChaiAddressChanged(address indexed previousAddress, address indexed newAddress);\n  event KyberAddressChanged(address indexed previousAddress, address indexed newAddress);\n\n\n  // ===============================================================================================\n  //                                      Constructor\n  // ===============================================================================================\n\n  /**\n   * @notice Constructor, calls other constructors. Can only be called once\n   * due to initializer modifier\n   * @param _owner The user's account address\n   * @param _floatify Floatify server address\n   * @param _dai Dai contract address\n   * @param _chai Chai server address\n   * @param _kyber Kyber network proxy address\n   */\n  function initialize(\n    address _owner,\n    address _floatify,\n    address _dai,\n    address _chai,\n    address _kyber\n  ) public initializer {\n    // Call constructors of contracts we inherit from\n    Ownable.initialize(_owner);\n\n    // Set Floatify address\n    floatify = _floatify;\n\n    // Set contract addresses and interfaces\n    daiContract = ERC20(_dai);\n    chaiContract = IChai(_chai);\n    knpContract = IKyberNetworkProxy(_kyber);\n\n    // Approve the Chai contract to spend our DAI balance\n    approveChaiToSpendDai();\n  }\n\n  // ===============================================================================================\n  //                                       Helpers\n  // ===============================================================================================\n\n  /**\n   * @dev Throws if called by any account other than floatify\n   */\n  modifier onlyFloatify() {\n    require(_msgSender() == floatify, \"Forwarder: caller is not the floatify address\");\n    _;\n  }\n\n\n  /**\n   * @notice Approve the Chai contract to spend our Dai\n   */\n  function approveChaiToSpendDai() private {\n    bool result = daiContract.approve(address(chaiContract), uint256(-1));\n    require(result, \"Forwarder: failed to approve Chai contract to spend DAI\");\n  }\n\n\n  /**\n   * @notice Remove allowance of Chai contract to prevent it from spending Dai\n   */\n  function resetChaiAllowance() private {\n    bool result = daiContract.approve(address(chaiContract), 0);\n    require(result, \"Forwarder: failed to remove allowance of Chai contract to spend DAI\");\n  }\n\n\n  // ===============================================================================================\n  //                                    Updating Addresses\n  // ===============================================================================================\n\n  /**\n   * @dev Allows the floatify address to be changed\n   * @param _newAddress new address\n   */\n  function updateFloatifyAddress(address _newAddress) public onlyFloatify {\n    // Make sure only floatify can call this function\n    require(_newAddress != address(0), \"Forwarder: new floatify address is the zero address\");\n    // Update address\n    emit FloatifyAddressChanged(floatify, _newAddress);\n    floatify = _newAddress;\n  }\n\n  /**\n   * @dev Allows the Dai contract address to be changed\n   * @param _newAddress new address\n   */\n  function updateDaiAddress(address _newAddress) public onlyFloatify {\n    // Reset allowance for old address to zero\n    resetChaiAllowance();\n    // Set new allowance\n    emit DaiAddressChanged(address(daiContract), _newAddress);\n    daiContract = ERC20(_newAddress);\n    approveChaiToSpendDai();\n  }\n\n  /**\n   * @dev Allows the Chai contract address to be changed\n   * @param _newAddress new address\n   */\n  function updateChaiAddress(address _newAddress) public onlyFloatify {\n    // Reset allowance for old address to zero\n    resetChaiAllowance();\n    // Set new allowance\n    emit ChaiAddressChanged(address(chaiContract), _newAddress);\n    chaiContract = IChai(_newAddress);\n    approveChaiToSpendDai();\n  }\n\n  /**\n   * @dev Allows the Kyber Proxy contract address to be changed\n   * @param _newAddress new address\n   */\n  function updateKyberAddress(address _newAddress) public onlyFloatify {\n    emit KyberAddressChanged(address(knpContract), _newAddress);\n    knpContract = IKyberNetworkProxy(_newAddress);\n  }\n\n\n  // ===============================================================================================\n  //                               Handling Received Ether/Tokens\n  // ===============================================================================================\n\n  /**\n   * @notice Upon receiving Dai, use this function to convert it to Chai and send\n   * it to the owner\n   */\n  function mintAndSendChai() public {\n    // Get Dai balance of this contract\n    uint256 _daiBalance = daiContract.balanceOf(address(this));\n    // Mint and send Chai\n    emit ChaiSent(_daiBalance);\n    address _owner = owner();\n    chaiContract.join(_owner, _daiBalance);\n  }\n\n\n  /**\n   * @notice Upon receiving any other token, use this function to convert it to Dai\n   * and send it to the owern\n   */\n  function convertAndSendToken(address _srcTokenAddress) public {\n    // TODO convert token to Dai\n    //   Use \"Loose Token Conversion\" as shown here\n    //   https://developer.kyber.network/docs/DappsGuide/#scenario-1-loose-token-conversion\n\n    // Get token parameters\n    ERC20 _srcTokenContract = ERC20(_srcTokenAddress);\n    uint256 _srcTokenBalance = _srcTokenContract.balanceOf(address(this));\n\n    // Mitigate ERC20 Approve front-running attack, by initially setting allowance to 0\n    require(_srcTokenContract.approve(address(knpContract), 0), \"First approval failed\");\n\n    // Approve tokens so network can take them during the swap\n    require(_srcTokenContract.approve(address(knpContract), _srcTokenBalance), \"Second approval failed\");\n\n    // Use slippage rate as the minimum conversion rate\n    uint256 minRate;\n    (, minRate) = knpContract.getExpectedRate(_srcTokenContract, daiContract, _srcTokenBalance);\n\n    // Swap the ERC20 token for Dai\n    knpContract.swapTokenToToken(_srcTokenContract, _srcTokenBalance, daiContract, minRate);\n\n    // Log the event\n    uint256 daiBalance = daiContract.balanceOf(address(this));\n    emit SwapToken(daiBalance, _srcTokenBalance, _srcTokenAddress);\n\n    // Mint and send Chai\n    mintAndSendChai();\n  }\n\n\n  /**\n   * @notice Upon receiving Ether, convert it to Chai and send it to the owner\n   */\n  function() external payable {\n    // TODO\n    // handle slippage for larger transactions?\n    //   https://developer.kyber.network/docs/Integrations-SlippageRateProtection/\n\n    uint256 etherAmount = address(this).balance;\n\n    // Use slippage rate as the minimum conversion rate\n    uint256 minRate;\n    (, minRate) = knpContract.getExpectedRate(ETH_TOKEN_ADDRESS, daiContract, msg.value);\n\n    // Swap Ether for Dai, and receive back tokens to this contract's address\n    knpContract.swapEtherToToken.value(msg.value)(daiContract, minRate);\n\n    // Log the event\n    uint256 daiBalance = daiContract.balanceOf(address(this));\n    emit SwapEther(daiBalance, etherAmount);\n\n    // Convert to Chai and send to owner\n    mintAndSendChai();\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChaiAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInDai\",\"type\":\"uint256\"}],\"name\":\"ChaiSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DaiAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FloatifyAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"KyberAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInDai\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInEther\",\"type\":\"uint256\"}],\"name\":\"SwapEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInDai\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SwapToken\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chaiContract\",\"outputs\":[{\"internalType\":\"contract IChai\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcTokenAddress\",\"type\":\"address\"}],\"name\":\"convertAndSendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiContract\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floatify\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_floatify\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"knpContract\",\"outputs\":[{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintAndSendChai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateChaiAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateDaiAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFloatifyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateKyberAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Forwarder","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://e8a3a12fc67d66f015edc98f39cdcbfcbbde7223b2e288f2bdaef3122415671c"}]}