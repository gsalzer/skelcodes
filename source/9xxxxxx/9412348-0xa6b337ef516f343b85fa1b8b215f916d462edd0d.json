{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\ninterface ERC20Interface {\r\n    function balanceOf(address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n}\r\ninterface CurveInterface {\r\n    function exchange(int128, int128, uint256, uint256, uint256) external;\r\n}\r\ncontract CurveSwapperPOC {\r\n  ERC20Interface internal constant _CDAI = ERC20Interface(\r\n    0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\r\n  );\r\n  ERC20Interface internal constant _CUSDC = ERC20Interface(\r\n    0x39AA39c021dfbaE8faC545936693aC917d5E7563\r\n  );\r\n  CurveInterface internal constant _CURVE = CurveInterface(\r\n    0x2e60CF74d81ac34eB21eEff58Db4D385920ef419\r\n  );\r\n  constructor() public {\r\n    require(_CUSDC.approve(address(_CURVE), uint256(-1)));\r\n  }\r\n  function swap() external {\r\n    uint256 cUSDCBalance = _CUSDC.balanceOf(msg.sender);\r\n    require(_CUSDC.transferFrom(msg.sender, address(this), cUSDCBalance));\r\n    _CURVE.exchange(1, 0, cUSDCBalance, cUSDCBalance, now + 1);\r\n    uint256 cDaiBalance = _CDAI.balanceOf(address(this));\r\n    require(_CDAI.transfer(msg.sender, cDaiBalance));\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CurveSwapperPOC","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b4fa175af316446f157383ac2f639542a72a261daec7aafc26baeff8bcb969d6"}]}