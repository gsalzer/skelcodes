{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\ninterface IToken {\r\n    function decimals() external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function approve(address spender, uint value) external;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint amount) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IToken token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IToken token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IToken token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IToken;\r\n\r\n    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\r\n    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(IToken token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    address payable internal newOwnerCandidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n}\r\n\r\n\r\ncontract FundsMgr is Ownable {\r\n    using UniversalERC20 for IToken;\r\n\r\n    function withdraw(address token, uint256 amount) onlyOwner public  {\r\n        require(msg.sender == owner);\r\n\r\n        if (token == address(0x0)) {\r\n            owner.transfer(amount);\r\n        } else {\r\n            IToken(token).universalTransfer(owner, amount);\r\n        }\r\n    }\r\n    function withdrawAll(address[] memory tokens) onlyOwner public  {\r\n        for(uint256 i = 0; i < tokens.length;i++) {\r\n            withdraw(tokens[i], IToken(tokens[i]).universalBalanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\r\n        z = add(mul(x, y), base / 2) / base;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }*/\r\n}\r\n\r\ncontract ConstantAddressesMainnet {\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address public constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n    address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant CUSDC_ADDRESS = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n}\r\n\r\ncontract ConstantAddresses is ConstantAddressesMainnet {}\r\n\r\n// ** INTERFACES **\r\n\r\ninterface IDfWallet {\r\n\r\n    function deposit(\r\n        address _tokenIn, address _cTokenIn, uint _amountIn, address _tokenOut, address _cTokenOut, uint _amountOut\r\n    ) external payable;\r\n\r\n    function withdraw(\r\n        address _tokenIn, address _cTokenIn, address _tokenOut, address _cTokenOut\r\n    ) external payable;\r\n\r\n}\r\n\r\ninterface ICToken {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external returns (uint256);\r\n\r\n    function totalReserves() external returns (uint256);\r\n\r\n    function reserveFactorMantissa() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function getCash() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n}\r\n\r\ninterface ICompoundOracle {\r\n    function getUnderlyingPrice(address cToken) external view returns (uint);\r\n}\r\n\r\ninterface IOneInchExchange {\r\n    function spender() external view returns (address);\r\n}\r\n\r\ninterface ILoanPool {\r\n    function loan(uint _amount) external;\r\n}\r\n\r\ncontract DfFinanceCloseCompound is DSMath, ConstantAddresses, FundsMgr {\r\n    using UniversalERC20 for IToken;\r\n\r\n\r\n    struct Strategy {\r\n        // first bytes32 (== uint256) slot\r\n        uint80 deposit;  // in eth – max more 1.2 mln eth\r\n        uint80 entryEthPrice;  // in usd – max more 1.2 mln USD for 1 eth\r\n        uint8 profitPercent;  // % – 0 to 255\r\n        uint8 fee;  // % – 0 to 100 (ex. 30% = 30)\r\n        uint80 ethForRedeem;  // eth for repay loan – max more 1.2 mln eth\r\n\r\n        // second bytes32 (== uint256) slot\r\n        uint80 usdToWithdraw;  // in usd\r\n        address owner;  // == uint160\r\n    }\r\n\r\n\r\n    mapping(address => bool) public admins;\r\n    mapping(address => bool) public strategyManagers;\r\n\r\n    mapping(address => Strategy) public strategies;  //  dfWallet => Strategy\r\n\r\n    ILoanPool public loanPool;\r\n\r\n\r\n    // ** EVENTS **\r\n\r\n    event StrategyClosing(address indexed dfWallet, uint profit, address token);\r\n    event StrategyClosed(address indexed dfWallet, uint profit, address token);\r\n    event SetupStrategy(\r\n        address indexed owner, address indexed dfWallet, uint deposit, uint priceEth, uint8 profitPercent, uint8 fee\r\n    );\r\n\r\n    event SystemProfit(uint profit);\r\n\r\n\r\n    // ** MODIFIERS **\r\n\r\n    modifier hasSetupStrategyPermission {\r\n        require(strategyManagers[msg.sender], \"Setup cup permission denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin {\r\n        require(admins[msg.sender] || msg.sender == owner, \"Permission denied\");\r\n        _;\r\n    }\r\n\r\n\r\n    // ** CONSTRUCTOR **\r\n\r\n    constructor() public {\r\n        loanPool = ILoanPool(0x9EdAe6aAb4B0f0f8146051ab353593209982d6B6);\r\n        strategyManagers[address(0)] = true;  // TODO: set DfFinanceOpenCompound\r\n    }\r\n\r\n\r\n    // ** PUBLIC VIEW function **\r\n\r\n    function getStrategy(address _dfWallet) public view returns(\r\n        address strategyOwner,\r\n        uint deposit,\r\n        uint entryEthPrice,\r\n        uint profitPercent,\r\n        uint fee,\r\n        uint ethForRedeem,\r\n        uint usdToWithdraw)\r\n    {\r\n        strategyOwner = strategies[_dfWallet].owner;\r\n        deposit = strategies[_dfWallet].deposit;\r\n        entryEthPrice = strategies[_dfWallet].entryEthPrice;\r\n        profitPercent = strategies[_dfWallet].profitPercent;\r\n        fee = strategies[_dfWallet].fee;\r\n        ethForRedeem = strategies[_dfWallet].ethForRedeem;\r\n        usdToWithdraw = strategies[_dfWallet].usdToWithdraw;\r\n    }\r\n\r\n    function getCurPriceEth() public view returns(uint256) {\r\n        // eth - usdc price call to Compound Oracle contract\r\n        uint price = ICompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(USDC_ADDRESS) / 1e12;   // get 1e18 price * 1e12\r\n        return wdiv(WAD, price);\r\n    }\r\n\r\n\r\n    // * SETUP_STRATAGY_PERMISSION function **\r\n\r\n    function setupStrategy(\r\n        address _owner, address _dfWallet, uint256 _deposit, uint8 _profitPercent, uint8 _fee\r\n    ) public hasSetupStrategyPermission {\r\n        require(strategies[_dfWallet].deposit == 0, \"Strategy already set\");\r\n\r\n        uint priceEth = getCurPriceEth();\r\n\r\n        strategies[_dfWallet] = Strategy(uint80(_deposit), uint80(priceEth), _profitPercent, _fee, 0, 0, _owner);\r\n\r\n        emit SetupStrategy(_owner, _dfWallet, priceEth, _deposit, _profitPercent, _fee);\r\n    }\r\n\r\n\r\n    // ** ONLY_OWNER_OR_ADMIN functions **\r\n\r\n    function collectUsdForStrategies(\r\n        address[] memory _dfWallets, uint256 _amountUsdToRedeem, uint256 _amountUsdToBuy, uint256 _usdPrice,  bool _useExchange, bytes memory _exData\r\n    ) public onlyOwnerOrAdmin {\r\n        // uint usdDecimals = IToken(USDC_ADDRESS).decimals(); == 1e6\r\n        uint totalCreditEth = wmul(_amountUsdToRedeem + _amountUsdToBuy, _usdPrice, 1e6) * 1e12;\r\n\r\n        // Use 1inch exchange (eth to usdc swap)\r\n        if (_useExchange) {\r\n            loanPool.loan(totalCreditEth);  // take an totalCredit eth loan\r\n            _exchange(IToken(ETH_ADDRESS), totalCreditEth, IToken(USDC_ADDRESS), add(_amountUsdToRedeem, _amountUsdToBuy), _exData);\r\n        }\r\n\r\n        uint ethAfterClose = 0;  // count all eth from strategies close\r\n\r\n        // TODO: in internal function\r\n        for(uint i = 0; i < _dfWallets.length; i++) {\r\n            Strategy storage strategy = strategies[_dfWallets[i]];\r\n            require(strategy.ethForRedeem == 0 && strategy.deposit > 0, \"Strategy is not exists or valid\");\r\n\r\n            uint ethLocked = ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallets[i]);\r\n            uint ethForRedeem = wmul(ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallets[i]), _usdPrice, 1e6) * 1e12;\r\n\r\n            if (_amountUsdToBuy > 0) { // in USD\r\n                uint usdToWithdraw = _getUsdToWithdraw(_dfWallets[i], ethLocked, ethForRedeem, _usdPrice);\r\n                strategy.usdToWithdraw = uint80(usdToWithdraw);\r\n\r\n                ethAfterClose += ethLocked;\r\n                emit StrategyClosing(_dfWallets[i], usdToWithdraw, address(USDC_ADDRESS));\r\n            } else { // in ETH\r\n                uint profitEth = _getProfitEth(_dfWallets[i], ethLocked, ethForRedeem);\r\n\r\n                ethAfterClose += ethForRedeem;\r\n                emit StrategyClosing(_dfWallets[i], add(strategy.deposit, profitEth), address(0x0));\r\n            }\r\n\r\n            strategy.ethForRedeem = uint80(ethForRedeem);\r\n        }\r\n\r\n        require(ethAfterClose >= totalCreditEth, \"TotalCreditEth is not enough\");\r\n    }\r\n\r\n\r\n    // ** PUBLIC function **\r\n\r\n    function closeStrategy(address _dfWallet) public {\r\n        Strategy memory strategy = strategies[_dfWallet];\r\n        require(strategy.deposit > 0 && strategy.ethForRedeem > 0, \"Strategy is not exists or ready for close\");\r\n\r\n        uint ethLocked = ICToken(CETH_ADDRESS).balanceOfUnderlying(_dfWallet);\r\n        // uint ethForRedeem = wmul(ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet), _usdPrice, 1e6) * 1e12;\r\n\r\n        IToken(USDC_ADDRESS).approve(_dfWallet, uint(-1));\r\n        IDfWallet(_dfWallet).withdraw(ETH_ADDRESS, CETH_ADDRESS, USDC_ADDRESS, CUSDC_ADDRESS);  // revert if already withdrawn\r\n\r\n        // TODO: add affiliate\r\n        // uint systemProfit = sub(sub(ethLocked, strategy.deposit), strategy.ethForRedeem) * strategy.fee / 100;\r\n        // ethLocked = sub(ethLocked, affiliateProcess(strategy.owner, systemProfit));\r\n\r\n        // Transfer deposited eth with profit to strategy owner\r\n        if (strategy.usdToWithdraw > 0) {\r\n            _transferEth(address(loanPool), ethLocked);\r\n\r\n            IToken(USDC_ADDRESS).universalTransfer(strategy.owner, strategy.usdToWithdraw);\r\n\r\n            emit StrategyClosed(_dfWallet, strategy.usdToWithdraw, address(USDC_ADDRESS));\r\n        } else {\r\n            _transferEth(address(loanPool), strategy.ethForRedeem);\r\n\r\n            uint profitEth = _getProfitEth(_dfWallet, ethLocked, strategy.ethForRedeem);\r\n            IToken(ETH_ADDRESS).universalTransfer(strategy.owner, add(strategy.deposit, profitEth));\r\n\r\n            emit StrategyClosed(_dfWallet, add(strategy.deposit, profitEth), address(0));\r\n        }\r\n\r\n        // clear _dfWallet strategy struct\r\n        _clearStrategy(_dfWallet);\r\n    }\r\n\r\n    function closeStrategies(address[] memory _dfWallets) public {\r\n        for (uint i = 0; i < _dfWallets.length; i++) {\r\n            closeStrategy(_dfWallets[i]);\r\n        }\r\n    }\r\n\r\n    // TODO: UPD this function logic\r\n    // function manualClose(address _dfWallet) public {\r\n    //     require(strategies[_dfWallet].owner == msg.sender, \"Permission denied\");\r\n    //     // require(strategies[_dfWallet].);\r\n\r\n    //     uint amount = ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet);\r\n    //     IToken(USDC_ADDRESS).transferFrom(msg.sender, address(this), amount);\r\n    //     IToken(USDC_ADDRESS).approve(_dfWallet, amount);\r\n\r\n    //     IDfWallet(_dfWallet).withdraw(ETH_ADDRESS, CETH_ADDRESS, USDC_ADDRESS, CUSDC_ADDRESS);\r\n    // }\r\n\r\n\r\n    // ** ONLY_OWNER functions **\r\n\r\n    function setLoanPool(address _loanAddr) public onlyOwner {\r\n        require(_loanAddr != address(0), \"Address must not be zero\");\r\n        loanPool = ILoanPool(_loanAddr);\r\n    }\r\n\r\n    function setAdminPermission(address _admin, bool _status) public onlyOwner {\r\n        admins[_admin] = _status;\r\n    }\r\n\r\n    function setAdminPermission(address[] memory _admins, bool _status) public onlyOwner {\r\n        for (uint i = 0; i < _admins.length; i++) {\r\n            admins[_admins[i]] = _status;\r\n        }\r\n    }\r\n\r\n    function setSetupStrategyPermission(address _manager, bool _status) public onlyOwner {\r\n        strategyManagers[_manager] = _status;\r\n    }\r\n\r\n    function setSetupStrategyPermission(address[] memory _managers, bool _status) public onlyOwner {\r\n        for (uint i = 0; i < _managers.length; i++) {\r\n            strategyManagers[_managers[i]] = _status;\r\n        }\r\n    }\r\n\r\n\r\n    // ** INTERNAL PUBLIC functions **\r\n\r\n    function _getProfitEth(\r\n        address _dfWallet, uint256 _ethLocked, uint256 _ethForRedeem\r\n    ) internal view returns(uint256 profitEth) {\r\n        uint deposit = strategies[_dfWallet].deposit;  // in eth\r\n        uint fee = strategies[_dfWallet].fee; // in percent (from 0 to 100)\r\n        uint profitPercent = strategies[_dfWallet].profitPercent; // in percent (from 0 to 255)\r\n\r\n        // user additional profit in eth\r\n        profitEth = sub(sub(_ethLocked, deposit), _ethForRedeem) * sub(100, fee) / 100;\r\n\r\n        require(wdiv(profitEth, deposit) * 100 >= profitPercent * WAD, \"Needs more profit in eth\");\r\n    }\r\n\r\n    function _getUsdToWithdraw(\r\n        address _dfWallet, uint256 _ethLocked, uint256 _ethForRedeem, uint256 _usdPrice\r\n    ) internal view returns(uint256 usdToWithdraw) {\r\n        uint deposit = strategies[_dfWallet].deposit;  // in eth\r\n        uint fee = strategies[_dfWallet].fee; // in percent (from 0 to 100)\r\n        uint profitPercent = strategies[_dfWallet].profitPercent; // in percent (from 0 to 255)\r\n        uint ethPrice = strategies[_dfWallet].entryEthPrice;\r\n\r\n        // user additional profit in eth\r\n        uint profitEth = sub(sub(_ethLocked, deposit), _ethForRedeem) * sub(100, fee) / 100;\r\n\r\n        usdToWithdraw = wdiv(add(deposit, profitEth), _usdPrice * 1e12) / 1e12;\r\n        uint usdOriginal = wmul(deposit, ethPrice) / 1e12;\r\n\r\n        require(usdOriginal > 0, \"Incorrect entry usd amount\");\r\n        require(wdiv(sub(usdToWithdraw, usdOriginal), usdOriginal) * 100 >= profitPercent * WAD, \"Needs more profit in usd\");\r\n    }\r\n\r\n\r\n    // ** INTERNAL functions **\r\n\r\n    function _transferEth(address receiver, uint256 amount) internal {\r\n        address payable receiverPayable = address(uint160(receiver));\r\n        (bool result, ) = receiverPayable.call.value(amount)(\"\");\r\n        require(result, \"Transfer of ETH failed\");\r\n    }\r\n\r\n    function _exchange(\r\n        IToken _fromToken, uint _maxFromTokenAmount, IToken _toToken, uint _minToTokenAmount, bytes memory _data\r\n    ) internal returns(uint) {\r\n        IOneInchExchange ex = IOneInchExchange(0x11111254369792b2Ca5d084aB5eEA397cA8fa48B);\r\n\r\n        // Approve tokens for 1inch\r\n        uint256 ethAmount = 0;\r\n        if (address(_fromToken) != ETH_ADDRESS) {\r\n            if (_fromToken.allowance(address(this), ex.spender()) != uint(-1)) {\r\n                _fromToken.approve(ex.spender(), uint(-1));\r\n            }\r\n        } else {\r\n            ethAmount = _maxFromTokenAmount;\r\n        }\r\n\r\n        uint fromTokenBalance = _fromToken.universalBalanceOf(address(this));\r\n        uint toTokenBalance = _toToken.universalBalanceOf(address(this));\r\n\r\n        bytes32 response;\r\n        assembly {\r\n        // call(g, a, v, in, insize, out, outsize)\r\n            let succeeded := call(sub(gas, 5000), ex, ethAmount, add(_data, 0x20), mload(_data), 0, 32)\r\n            response := mload(0)      // load delegatecall output\r\n        //switch iszero(succeeded)\r\n        //case 1 {\r\n        //    // throw if call failed\r\n        //    revert(0, 0)\r\n        //}\r\n        }\r\n\r\n        require(_fromToken.universalBalanceOf(address(this)) + _maxFromTokenAmount >= fromTokenBalance, \"Exchange error\");\r\n\r\n        uint newBalanceToToken = _toToken.universalBalanceOf(address(this));\r\n        require(newBalanceToToken >= toTokenBalance + _minToTokenAmount, \"Exchange error\");\r\n\r\n        return sub(newBalanceToToken, toTokenBalance); // how many tokens received\r\n    }\r\n\r\n    function _clearStrategy(address _dfWallet) internal {\r\n        strategies[_dfWallet] = Strategy(0, 0, 0, 0, 0, 0, address(0));\r\n    }\r\n\r\n\r\n    // ** FALLBACK functions **\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"name\":\"SetupStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StrategyClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StrategyClosing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"SystemProfit\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dfWallets\",\"type\":\"address[]\"}],\"name\":\"closeStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"closeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dfWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountUsdToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUsdToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useExchange\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_exData\",\"type\":\"bytes\"}],\"name\":\"collectUsdForStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurPriceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryEthPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethForRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdToWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanPool\",\"outputs\":[{\"internalType\":\"contract ILoanPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanAddr\",\"type\":\"address\"}],\"name\":\"setLoanPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setSetupStrategyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setSetupStrategyPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setupStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"deposit\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"entryEthPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"uint80\",\"name\":\"ethForRedeem\",\"type\":\"uint80\"},{\"internalType\":\"uint80\",\"name\":\"usdToWithdraw\",\"type\":\"uint80\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfFinanceCloseCompound","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b2f059233ee80ae26293fbcb6931a78efb4f8c840ba9478eacd540855a4ec66a"}]}