{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-03-04\r\n*/\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract ERC20 {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function transfer(address to, uint256 value) public returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Multisig {\r\n    function executeChange(uint256 tid) public view returns (bool);\r\n    function executeAdminChange(uint256 tid, address newowner) public returns (bool);\r\n    function requestOwnerChange(address owner, address newowner) public returns (uint256);\r\n    function vestingTransaction(address owner, address holderaddress, uint256 vestAmount) public returns (uint256);\r\n    function mintTransaction(address owner, uint256 amount, uint256 time) public returns (uint256);\r\n}\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract AssetfinX is ERC20 {\r\n    \r\n    uint256 constant TOTALSUPPLY = 50000000;\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    string public name = \"AssetfinX\";\r\n    string public symbol = \"AFX\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = TOTALSUPPLY*10**uint256(decimals);\r\n\taddress public owner;\r\n\tuint256 public circulatingSupply;\r\n\tbool public contractStatus;\r\n\taddress public multisigAddress;\r\n\tuint256 public minfreezeTime;\r\n\r\n    mapping (address => uint256) public balances;\r\n\tmapping (address => uint256[2]) public freezeOf;\r\n\tmapping (address => uint256) public lockOf;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    mapping (address => mapping (uint256 => mapping(uint256 => uint256))) public mintTransaction;\r\n    mapping (address => mapping (address => uint256)) public ownerTransaction;\r\n    mapping (address => mapping (address => mapping(uint256 => uint256))) public vestTransaction;\r\n\r\n\tevent Freeze(address indexed from, uint256 value, uint256 freezetime);\r\n\tevent Unfreeze(address indexed from, uint256 value, uint256 unfreezetime);\r\n\tevent Lock(address indexed from, uint256 amount, uint256 locktime);\r\n    event Release(address indexed from, uint256 amount, uint256 releasetime);\r\n\r\n    constructor(uint256 _initialSupply, bool _status, address _multisigAddress) public  {\r\n        balances[msg.sender] = _initialSupply;   \r\n\t\tcirculatingSupply = _initialSupply;           \r\n\t\towner = msg.sender;\r\n\t\tcontractStatus = _status;\r\n\t\tmultisigAddress = _multisigAddress;\r\n        emit Transfer(address(0), owner, _initialSupply);\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier contractActive(){\r\n        require(contractStatus, \"Contract is inactive\");\r\n        _;\r\n    }\r\n    \r\n    modifier multisigCheck(uint256 _id){\r\n        require(Multisig(multisigAddress).executeChange(_id), \"Not confirmed\");\r\n        _;\r\n    }\r\n    \r\n    modifier multisigAdminCheck(uint256 _id, address _newaddress){\r\n        require(Multisig(multisigAddress).executeAdminChange(_id, _newaddress), \"Not confirmed\");\r\n        _;\r\n    }\r\n    \r\n    /** \r\n     * @dev Set Minimum time for freeze\r\n     * @param _time Minimum time\r\n     */ \r\n    function setminimumFreezetime(uint256 _time) public contractActive onlyOwner returns (bool) {\r\n        require(_time > 0, \"Invalid time\");\r\n        minfreezeTime = _time;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Request Multisig contract to change admin \r\n     * @param _newAdmin New admin address \r\n     */ \r\n    function requestchangeAdmin(address _newAdmin) public contractActive onlyOwner returns (bool) {\r\n        ownerTransaction[msg.sender][_newAdmin] = Multisig(multisigAddress).requestOwnerChange(owner, _newAdmin);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Change admin \r\n     * @param _address New owner address\r\n     */ \r\n    function changeAdmin(address _address) public contractActive onlyOwner multisigAdminCheck(ownerTransaction[owner][_address], _address) returns (bool) {\r\n        owner = _address;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Request Multisig contract for vesting\r\n     * @param _address Token holder address\r\n     * @param _amount Amount to be vested\r\n     */ \r\n    function vestRequest(address _address, uint256 _amount) public contractActive onlyOwner returns (bool) {\r\n       vestTransaction[owner][_address][_amount] = Multisig(multisigAddress).vestingTransaction(owner, _address, _amount);\r\n       return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Request Multisig contract for Mint \r\n     * @param _amount Amount to be Minted\r\n     * @param _time Current time\r\n     */ \r\n    function mintRequest(uint256 _amount, uint256 _time) public contractActive onlyOwner returns (bool) {\r\n       mintTransaction[owner][_amount][_time] = Multisig(multisigAddress).mintTransaction(owner, _amount, _time);\r\n       return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Check balance of the holder\r\n     * @param tokenOwner Token holder address\r\n     */ \r\n    function balanceOf(address tokenOwner) public view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to specified address\r\n     * @param _to Receiver address\r\n     * @param _value Amount of the tokens\r\n     */\r\n    function transfer(address _to, uint256 _value) public contractActive returns (bool) {\r\n        require(_to != address(0), \"Null address\");                                         \r\n\t\trequire(_value > 0, \"Invalid Value\"); \r\n        require(balances[msg.sender] >= _value, \"Insufficient balance\");                           \r\n        _transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n \r\n    /**\r\n     * @dev Approve respective tokens for spender\r\n     * @param _spender Spender address\r\n     * @param _value The amount of tokens to be allowed\r\n     */\r\n    function approve(address _spender, uint256 _value) public contractActive returns (bool) {\r\n        require(_spender != address(0), \"Null address\");\r\n        require(_value >= 0, \"Invalid value\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev To view approved balance\r\n     * @param holder The holder address\r\n     * @param delegate The spender address\r\n     */ \r\n    function allowance(address holder, address delegate) public view returns (uint256) {\r\n        return allowed[holder][delegate];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from  The holder address\r\n     * @param _to  The Receiver address\r\n     * @param _value  the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public contractActive returns (bool) {\r\n        require( _to != address(0), \"Null address\");\r\n        require(_from != address(0), \"Null address\");\r\n        require( _value > 0 , \"Invalid value\"); \r\n        require( _value <= balances[_from] , \"Insufficient balance\");\r\n        require( _value <= allowed[_from][msg.sender] , \"Insufficient allowance\");\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal Transfer function\r\n     * @param _from  The holder address\r\n     * @param _to  The Receiver address\r\n     * @param _value  the amount of tokens to be transferred\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value); \r\n    }\r\n    \r\n    /**\r\n     * @dev Freeze tokens - User can freeze again only after UnFreezeing the previous one.\r\n     * @param _value  The amount of tokens to be freeze\r\n     * @param _time  Timeperiod for freezing in seconds\r\n     */\r\n\tfunction freeze(uint256 _value, uint256 _time) public contractActive returns (bool) {\r\n        require(_value > 0, \"Invalid Value\");\r\n        require(freezeOf[msg.sender][0] == 0, \"Tokens already frozen\");\r\n        require( _value <= balances[msg.sender], \"Insufficient balance\"); \r\n        require(_time >= minfreezeTime, \"Invalid time\");\r\n        balances[msg.sender] = balances[msg.sender].sub(_value); \r\n        freezeOf[msg.sender][0] = _value; \r\n        freezeOf[msg.sender][1] = now.add(_time);\r\n        emit Transfer(msg.sender, address(this), _value);\r\n        emit Freeze(msg.sender, _value, now);\r\n        return true;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev UnFreeze tokens\r\n     */\r\n\tfunction unfreeze() public contractActive returns (bool) {\r\n        require(freezeOf[msg.sender][0] != 0, \"Sender has no tokens to unfreeze\");\r\n\t\trequire(now >= freezeOf[msg.sender][1], \"Invalid time\");\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(freezeOf[msg.sender][0]);\r\n\t\temit Transfer(address(this), msg.sender, freezeOf[msg.sender][0]);\r\n        emit Unfreeze(msg.sender, freezeOf[msg.sender][0], now);\r\n        freezeOf[msg.sender][0] = 0;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Mint tokens to increase the circulating supply\r\n     * @param _amount The amount of tokens to be Minted\r\n     * @param _reqestedTime  Request submitted time\r\n     */\r\n    function mint(uint256 _amount, uint256 _reqestedTime) public contractActive onlyOwner multisigCheck(mintTransaction[owner][_amount][_reqestedTime]) returns (bool) {\r\n        require( _amount > 0, \"Invalid amount\");\r\n        require(circulatingSupply.add(_amount) <= totalSupply, \"Supply exceeds limit\");\r\n        \r\n        circulatingSupply = circulatingSupply.add(_amount);\r\n        balances[owner] = balances[owner].add(_amount);\r\n        \r\n        emit Transfer(address(0), owner, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Vesting lock tokens\r\n     * @param _address Holder address\r\n     * @param _amount Amount of token to be locked\r\n     */\r\n    function vestLock(address _address, uint256 _amount) public contractActive onlyOwner multisigCheck(vestTransaction[owner][_address][_amount]) returns (bool) {\r\n       require(_amount > 0, \"Invalid Amount\");\r\n       require(balances[_address] >= _amount, \"Invalid balance\");\r\n       \r\n       balances[_address] = balances[_address].sub(_amount);\r\n       lockOf[_address] = lockOf[_address].add(_amount);\r\n       emit Transfer(_address,address(this),_amount);\r\n       emit Lock(_address,_amount,now);\r\n       return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Vesting Release token\r\n     * @param _address Holder address \r\n     * @param _amount Amount of token to be released\r\n     */ \r\n    function vestRelease(address _address, uint256 _amount) public contractActive onlyOwner multisigCheck(vestTransaction[owner][_address][_amount]) returns (bool) {\r\n       require(_amount > 0, \"Invalid Amount\");\r\n       require(lockOf[_address] >= _amount, \"Insufficient Amount\");\r\n       \r\n       lockOf[_address] = lockOf[_address].sub(_amount);\r\n       balances[_address] = balances[_address].add(_amount);\r\n       emit Transfer(address(this), _address, _amount);\r\n       emit Release(_address, _amount,now);\r\n       return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev updatecontractStatus to change the status of the contract from active to inactive\r\n     * @param _status status of the contract\r\n     */\r\n    function updatecontractStatus(bool _status) public onlyOwner returns(bool) {\r\n        require(contractStatus != _status, \"Invalid status\");\r\n        contractStatus = _status;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * dev Update Multisig Contract address \r\n     * @param _address New contract address \r\n     */ \r\n    function updateMultisigAddress(address _address) public contractActive onlyOwner returns(bool) {\r\n        require(_address != address(0), \"Null Address\");\r\n        multisigAddress = _address;\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezetime\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasetime\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unfreezetime\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minfreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reqestedTime\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"mintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"requestchangeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setminimumFreezetime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMultisigAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updatecontractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vestLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vestRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vestRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AssetfinX","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://05b264336e2e3458213cdbeac7cc4c3ab80b3e302feed2be588104e921372af9"}]}