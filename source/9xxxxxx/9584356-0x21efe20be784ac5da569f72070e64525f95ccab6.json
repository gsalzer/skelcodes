{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address who) public view returns (uint value);\r\n    function allowance(address owner, address spender) public view returns (uint remaining);\r\n\r\n    function transfer(address to, uint value) public returns (bool ok);\r\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n    function approve(address spender, uint value) public returns (bool ok);\r\n\r\n    event Burned(uint value, uint when);\r\n    event Stacked(address indexed from, uint value, uint when);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract AZBIcore is ERC20{\r\n\r\n    modifier onlyTeam{\r\n        require(msg.sender == teamAddress, \"This function is for team only!\");\r\n        _;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    uint8 public constant decimals = 18;\r\n    uint256 initialSupply;\r\n    uint256 public soldTokens = 0;\r\n    uint256 public currentPrice;\r\n    uint256 public currentInterest;\r\n    string public constant name = \"AZBI core\";\r\n    string public constant symbol = \"AZBI\";\r\n\r\n    //add valid address!!!\r\n    address payable teamAddress;\r\n    address stakingRewardAddress = address(this);\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) stacked;\r\n    mapping (address => uint256) timeOfStacking;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function stake() public returns (bool success) {\r\n        if (balances[msg.sender] >= 0) {\r\n            uint256 value = balances[msg.sender];\r\n            stacked[msg.sender] = stacked[msg.sender].add(value);\r\n            balances[msg.sender] = 0;\r\n            timeOfStacking[msg.sender] = now;\r\n            emit Stacked(msg.sender, value, now);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function currentReward(address owner) public view returns (uint256 value) {\r\n        if (stacked[owner] > 0) {\r\n            uint256 reward = stacked[owner].mul(currentInterest).div(100).mul(now.sub(timeOfStacking[owner])).div(365 days);  // 20% per year\r\n            if (reward<=balances[stakingRewardAddress]) {\r\n                return reward;\r\n            } else {\r\n                return balances[stakingRewardAddress];\r\n            }\r\n        }\r\n        else return 0;\r\n    }\r\n\r\n    function getStacked(address owner) public view returns (uint256 value) {\r\n        return stacked[owner];\r\n    }\r\n\r\n    function claimReward() public returns (bool success) {\r\n        require(stacked[msg.sender]>0, \"You need to have something staked first\"); // none stacked\r\n        uint256 reward = currentReward(msg.sender);\r\n        balances[stakingRewardAddress] = balances[stakingRewardAddress].sub(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(stacked[msg.sender]);\r\n        stacked[msg.sender] = 0;\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return initialSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint remaining) {\r\n        return allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        if (balances[msg.sender] >= value) {\r\n            require (value>=10**2, \"too small amount of AZBI\"); // too small amount of AZBI\r\n            balances[msg.sender] = balances[msg.sender].sub(value);\r\n            uint256 toBurn = value.div(100);\r\n            uint256 forReward = value.mul(3).div(100);\r\n            uint256 toTransfer = value.mul(96).div(100);\r\n            balances[to] = balances[to].add(toTransfer);\r\n            balances[stakingRewardAddress] = balances[stakingRewardAddress].add(forReward);\r\n            emit Burned(toBurn, now);\r\n            initialSupply = initialSupply.sub(toBurn);\r\n            emit Transfer(msg.sender, to, toTransfer);\r\n            emit Transfer(msg.sender, stakingRewardAddress, forReward);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        if (balances[from] >= value && allowed[from][msg.sender] >= value) {\r\n            require (value>=10**2, \"too small amount of AZBI\"); // too small amount of AZBI\r\n            uint256 toBurn = value.div(100);\r\n            uint256 forReward = value.mul(3).div(100);\r\n            uint256 toTransfer = value.mul(96).div(100);\r\n            balances[from] = balances[from].sub(value);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n            balances[to] = balances[to].add(toTransfer);\r\n            balances[stakingRewardAddress] = balances[stakingRewardAddress].add(forReward);\r\n            emit Burned(toBurn, now);\r\n            initialSupply = initialSupply.sub(toBurn);\r\n            emit Transfer(from, to, toTransfer);\r\n            emit Transfer(from, stakingRewardAddress, forReward);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function changeInterest(uint256 value) public onlyTeam {\r\n        currentInterest = value;\r\n    }\r\n\r\n    function changePrice(uint256 value) public onlyTeam {\r\n        currentPrice = value;\r\n    }\r\n\r\n    constructor() public payable {\r\n        teamAddress = address(0x8EcA013b8eca5a8643914798AdBdf313BF91AC8a);\r\n        initialSupply = 20000000000*10**uint256(decimals);\r\n        currentPrice = 5 * 10**12;\r\n        currentInterest = 20;\r\n        balances[teamAddress] = initialSupply.mul(6).div(10);\r\n        balances[stakingRewardAddress] = initialSupply.mul(4).div(10);\r\n    }\r\n\r\n    function () external payable {\r\n        require (msg.value>=10**15, \"Send 0.001 ETH minimum\"); // 0.001 ETH min\r\n        uint256 valueToPass =  msg.value.div(currentPrice).mul(10**uint256(decimals));\r\n        if (balances[address(this)] <= valueToPass)\r\n            valueToPass = balances[address(this)];\r\n\r\n        soldTokens = soldTokens.add(valueToPass);\r\n\r\n        if (balances[address(this)] >= valueToPass && valueToPass > 0) {\r\n            balances[msg.sender] = balances[msg.sender].add(valueToPass);\r\n            balances[address(this)] = balances[address(this)].sub(valueToPass);\r\n            emit Transfer(address(this), msg.sender, valueToPass);\r\n        }\r\n        teamAddress.transfer(msg.value);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Stacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getStacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AZBIcore","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a000ceab13e9f9235176b38aa3f45345d7b11894837e54f6b0b0577b56dfe010"}]}