{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\ncontract OWNCoin is ERC20 {\r\n    string public constant name = \"OWN Coin\";\r\n    string public constant symbol = \"OWN\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    address public minter;\r\n\r\n    constructor(uint totalSupply, address owner) public {\r\n        require(totalSupply > 0, \"Invalid totalSupply\");\r\n        require(owner != address(0), \"Invalid owner\");\r\n\r\n        minter = owner;\r\n        _mint(owner, totalSupply);\r\n    }\r\n\r\n    function batchTransfer(\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external {\r\n        require(recipients.length == amounts.length, \"Data lenght mismatch\");\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _transfer(\r\n                msg.sender,\r\n                recipients[i],\r\n                amounts[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function mint(uint supply) external {\r\n        require(msg.sender == minter, \"Invalid sender\");\r\n        _mint(minter, supply);\r\n    }\r\n\r\n    function changeMinter(address newMinter) external {\r\n        require(newMinter != address(0), \"Invalid minter\");\r\n        require(msg.sender == minter, \"Invalid sender\");\r\n        minter = newMinter;\r\n    }\r\n\r\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external {\r\n        approve(spender, value);\r\n\r\n        (bool success, ) = spender.call(data);\r\n        if(!success) {\r\n            revert(\"Forwarded call failed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Agreement is ERC20 {\r\n    bytes32 public dataHash;\r\n    string public dataUrl;\r\n    mapping (address => bool) public isAdmin;\r\n    OWNCoin public ownCoin;\r\n    uint totalWithdrawn;\r\n    mapping (address => uint) lastTotalReceived;\r\n\r\n\r\n    event Withdraw(address account, uint value);\r\n    event AdminAdded(address account);\r\n    event DataHashChanged(bytes32 dataHash);\r\n    event DataUrlChanged(string dataUrl);\r\n\r\n    constructor(\r\n        bytes32 _dataHash,\r\n        string memory _dataUrl,\r\n        address[] memory holderAccounts,\r\n        uint256[] memory holderBalances,\r\n        bool[] memory holderAdminStatuses,\r\n        address ownCoinAddress\r\n    )\r\n    public {\r\n        require(holderAccounts.length == holderBalances.length, \"Data length mismatch\");\r\n        require(holderAccounts.length == holderAdminStatuses.length, \"Data length mismatch\");\r\n        require(holderAccounts.length > 0, \"No holders\");\r\n        require(holderAdminStatuses[0], \"First holder must be admin\");\r\n        require(holderAccounts[0] != address(0), \"Invalid owner\");\r\n        require(ownCoinAddress != address(0), \"Invalid OWNCoinAddress\");\r\n\r\n        for (uint256 i = 0; i < holderAccounts.length; i++) {\r\n            require(holderBalances[i] > 0, \"Invalid balance\");\r\n            require(holderAccounts[i] != address(0), \"Invalid holder\");\r\n            require(balanceOf(holderAccounts[i]) == 0, \"Duplicated holder\");\r\n            if (holderAdminStatuses[i]) {\r\n                isAdmin[holderAccounts[i]] = true;\r\n                emit AdminAdded(holderAccounts[i]);\r\n            }\r\n\r\n            _mint(holderAccounts[i], holderBalances[i]);\r\n        }\r\n\r\n        ownCoin = OWNCoin(ownCoinAddress);\r\n\r\n        _setDataHashAndUrl(_dataHash, _dataUrl);\r\n    }\r\n\r\n    function addAdmin(address account) external {\r\n        require(isAdmin[msg.sender], \"Sender must be an admin\");\r\n        require(account != address(0), \"Invalid admin\");\r\n        require(!isAdmin[account], \"Account is already an admin\");\r\n\r\n        isAdmin[account] = true;\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function _setDataHashAndUrl(bytes32 _dataHash, string memory _dataUrl) private {\r\n        if (dataHash != _dataHash) {\r\n            dataHash = _dataHash;\r\n            emit DataHashChanged(dataHash);\r\n        }\r\n\r\n        dataUrl = _dataUrl;\r\n        emit DataUrlChanged(dataUrl);\r\n    }\r\n\r\n    function setDataHashAndUrl(bytes32 _dataHash, string calldata _dataUrl) external {\r\n        require(isAdmin[msg.sender], \"Sender must be an admin\");\r\n        _setDataHashAndUrl(_dataHash, _dataUrl);\r\n    }\r\n\r\n    function withdraw(address account) public {\r\n        uint totalReceived = ownCoin.balanceOf(address(this)).add(totalWithdrawn);\r\n        uint newReceived = totalReceived.sub(lastTotalReceived[account]);\r\n        uint amountToTransfer = balanceOf(account).mul(newReceived).div(totalSupply());\r\n\r\n        lastTotalReceived[account] = totalReceived;\r\n        totalWithdrawn = totalWithdrawn.add(amountToTransfer);\r\n\r\n        if (amountToTransfer > 0) {\r\n            require(ownCoin.transfer(account, amountToTransfer), \"Withdrawing transfer failed\");\r\n        }\r\n        emit Withdraw(account, amountToTransfer);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        withdraw(msg.sender);\r\n        withdraw(to);\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract AgreementFactory {\r\n    address public ownCoinAddress;\r\n\r\n    event AgreementCreated(address agreementAddress);\r\n\r\n    constructor(address _ownCoinAddress) public {\r\n        require(_ownCoinAddress != address(0), \"Invalid OWNCoinAddress\");\r\n        ownCoinAddress = _ownCoinAddress;\r\n    }\r\n\r\n    function create(\r\n        bytes32 dataHash,\r\n        string calldata dataUrl,\r\n        address[] calldata holderAccounts,\r\n        uint256[] calldata holderBalances,\r\n        bool[] calldata holderAdminStatuses\r\n    ) external {\r\n        Agreement token = new Agreement(\r\n            dataHash,\r\n            dataUrl,\r\n            holderAccounts,\r\n            holderBalances,\r\n            holderAdminStatuses,\r\n            ownCoinAddress\r\n        );\r\n        emit AgreementCreated(address(token));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"name\":\"dataUrl\",\"type\":\"string\"},{\"name\":\"holderAccounts\",\"type\":\"address[]\"},{\"name\":\"holderBalances\",\"type\":\"uint256[]\"},{\"name\":\"holderAdminStatuses\",\"type\":\"bool[]\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownCoinAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownCoinAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agreementAddress\",\"type\":\"address\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"}]","ContractName":"AgreementFactory","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000127Df907524fEB74404D8186583b4A65a66a0d74","Library":"","LicenseType":"None","SwarmSource":"bzzr://3b94de5bd3937dc1f2493ab1ddc311113ed0d3b73a0c9e680274709a3dc84ffb"}]}