{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IntVoteInterface {\r\n    //When implementing this interface please do not only override function and modifier,\r\n    //but also to keep the modifiers on the overridden functions.\r\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\r\n    modifier votable(bytes32 _proposalId) {revert(); _;}\r\n\r\n    event NewProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _numOfChoices,\r\n        address _proposer,\r\n        bytes32 _paramsHash\r\n    );\r\n\r\n    event ExecuteProposal(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _decision,\r\n        uint256 _totalReputation\r\n    );\r\n\r\n    event VoteProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _voter,\r\n        uint256 _vote,\r\n        uint256 _reputation\r\n    );\r\n\r\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );\r\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n     * @param _proposer address\r\n     * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\r\n     * @return proposal's id.\r\n     */\r\n    function propose(\r\n        uint256 _numOfChoices,\r\n        bytes32 _proposalParameters,\r\n        address _proposer,\r\n        address _organization\r\n        ) external returns(bytes32);\r\n\r\n    function vote(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _rep,\r\n        address _voter\r\n    )\r\n    external\r\n    returns(bool);\r\n\r\n    function cancelVote(bytes32 _proposalId) external;\r\n\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);\r\n\r\n    function isVotable(bytes32 _proposalId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool);\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);\r\n}\r\n\r\n// File: @daostack/infra/contracts/libs/RealMath.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * RealMath: fixed-point math library, based on fractional and integer parts.\r\n * Using uint256 as real216x40, which isn't in Solidity yet.\r\n * Internally uses the wider uint256 for some math.\r\n *\r\n * Note that for addition, subtraction, and mod (%), you should just use the\r\n * built-in Solidity operators. Functions for these operations are not provided.\r\n *\r\n */\r\n\r\n\r\nlibrary RealMath {\r\n\r\n    /**\r\n     * How many total bits are there?\r\n     */\r\n    uint256 constant private REAL_BITS = 256;\r\n\r\n    /**\r\n     * How many fractional bits are there?\r\n     */\r\n    uint256 constant private REAL_FBITS = 40;\r\n\r\n    /**\r\n     * What's the first non-fractional bit\r\n     */\r\n    uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;\r\n\r\n    /**\r\n     * Raise a real number to any positive integer power\r\n     */\r\n    function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {\r\n\r\n        uint256 tempRealBase = realBase;\r\n        uint256 tempExponent = exponent;\r\n\r\n        // Start with the 0th power\r\n        uint256 realResult = REAL_ONE;\r\n        while (tempExponent != 0) {\r\n            // While there are still bits set\r\n            if ((tempExponent & 0x1) == 0x1) {\r\n                // If the low bit is set, multiply in the (many-times-squared) base\r\n                realResult = mul(realResult, tempRealBase);\r\n            }\r\n                // Shift off the low bit\r\n            tempExponent = tempExponent >> 1;\r\n            if (tempExponent != 0) {\r\n                // Do the squaring\r\n                tempRealBase = mul(tempRealBase, tempRealBase);\r\n            }\r\n        }\r\n\r\n        // Return the final result.\r\n        return realResult;\r\n    }\r\n\r\n    /**\r\n     * Create a real from a rational fraction.\r\n     */\r\n    function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {\r\n        return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);\r\n    }\r\n\r\n    /**\r\n     * Multiply one real by another. Truncates overflows.\r\n     */\r\n    function mul(uint256 realA, uint256 realB) private pure returns (uint256) {\r\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\r\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\r\n        uint256 res = realA * realB;\r\n        require(res/realA == realB, \"RealMath mul overflow\");\r\n        return (res >> REAL_FBITS);\r\n    }\r\n\r\n    /**\r\n     * Divide one real by another real. Truncates overflows.\r\n     */\r\n    function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {\r\n        // We use the reverse of the multiplication trick: convert numerator from\r\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\r\n        return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ninterface VotingMachineCallbacksInterface {\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);\r\n    function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);\r\n\r\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)\r\n    external\r\n    returns(bool);\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);\r\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface ProposalExecuteInterface {\r\n    function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\ncontract GenesisProtocolLogic is IntVoteInterface {\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using RealMath for uint216;\r\n    using RealMath for uint256;\r\n    using Address for address;\r\n\r\n    enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}\r\n    enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}\r\n\r\n    //Organization's parameters\r\n    struct Parameters {\r\n        uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.\r\n        uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\r\n        uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.\r\n        uint256 preBoostedVotePeriodLimit; //the time limit for a proposal\r\n                                          //to be in an preparation state (stable) before boosted.\r\n        uint256 thresholdConst; //constant  for threshold calculation .\r\n                                //threshold =thresholdConst ** (numberOfBoostedProposals)\r\n        uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals\r\n                                   //in the threshold calculation to prevent overflow\r\n        uint256 quietEndingPeriod; //quite ending period\r\n        uint256 proposingRepReward;//proposer reputation reward.\r\n        uint256 votersReputationLossRatio;//Unsuccessful pre booster\r\n                                          //voters lose votersReputationLossRatio% of their reputation.\r\n        uint256 minimumDaoBounty;\r\n        uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula\r\n                               //(daoBountyConst * averageBoostDownstakes)/100 .\r\n        uint256 activationTime;//the point in time after which proposals can be created.\r\n        //if this address is set so only this address is allowed to vote of behalf of someone else.\r\n        address voteOnBehalf;\r\n    }\r\n\r\n    struct Voter {\r\n        uint256 vote; // YES(1) ,NO(2)\r\n        uint256 reputation; // amount of voter's reputation\r\n        bool preBoosted;\r\n    }\r\n\r\n    struct Staker {\r\n        uint256 vote; // YES(1) ,NO(2)\r\n        uint256 amount; // amount of staker's stake\r\n        uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.\r\n    }\r\n\r\n    struct Proposal {\r\n        bytes32 organizationId; // the organization unique identifier the proposal is target to.\r\n        address callbacks;    // should fulfill voting callbacks interface.\r\n        ProposalState state;\r\n        uint256 winningVote; //the winning vote.\r\n        address proposer;\r\n        //the proposal boosted period limit . it is updated for the case of quiteWindow mode.\r\n        uint256 currentBoostedVotePeriodLimit;\r\n        bytes32 paramsHash;\r\n        uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.\r\n        uint256 daoBounty;\r\n        uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.\r\n        uint256 confidenceThreshold;\r\n        uint256 secondsFromTimeOutTillExecuteBoosted;\r\n        uint[3] times; //times[0] - submittedTime\r\n                       //times[1] - boostedPhaseTime\r\n                       //times[2] -preBoostedPhaseTime;\r\n        bool daoRedeemItsWinnings;\r\n        //      vote      reputation\r\n        mapping(uint256   =>  uint256    ) votes;\r\n        //      vote      reputation\r\n        mapping(uint256   =>  uint256    ) preBoostedVotes;\r\n        //      address     voter\r\n        mapping(address =>  Voter    ) voters;\r\n        //      vote        stakes\r\n        mapping(uint256   =>  uint256    ) stakes;\r\n        //      address  staker\r\n        mapping(address  => Staker   ) stakers;\r\n    }\r\n\r\n    event Stake(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _staker,\r\n        uint256 _vote,\r\n        uint256 _amount\r\n    );\r\n\r\n    event Redeem(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event RedeemDaoBounty(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event RedeemReputation(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);\r\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\r\n    event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);\r\n    event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);\r\n\r\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\r\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\r\n    mapping(bytes32=>uint) public orgBoostedProposalsCnt;\r\n           //organizationId => organization\r\n    mapping(bytes32        => address     ) public organizations;\r\n          //organizationId => averageBoostDownstakes\r\n    mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;\r\n    uint256 constant public NUM_OF_CHOICES = 2;\r\n    uint256 constant public NO = 2;\r\n    uint256 constant public YES = 1;\r\n    uint256 public proposalsCnt; // Total number of proposals\r\n    IERC20 public stakingToken;\r\n    address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;\r\n    uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(IERC20 _stakingToken) public {\r\n      //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .\r\n      //This will work for a network which already hosted the GEN token on this address (e.g mainnet).\r\n      //If such contract address does not exist in the network (e.g ganache)\r\n      //the contract will use the _stakingToken param as the\r\n      //staking token address.\r\n        if (address(GEN_TOKEN_ADDRESS).isContract()) {\r\n            stakingToken = IERC20(GEN_TOKEN_ADDRESS);\r\n        } else {\r\n            stakingToken = _stakingToken;\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev Check that the proposal is votable\r\n   * a proposal is votable if it is in one of the following states:\r\n   *  PreBoosted,Boosted,QuietEndingPeriod or Queued\r\n   */\r\n    modifier votable(bytes32 _proposalId) {\r\n        require(_isVotable(_proposalId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _paramsHash parameters hash\r\n     * @param _proposer address\r\n     * @param _organization address\r\n     */\r\n    function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)\r\n        external\r\n        returns(bytes32)\r\n    {\r\n      // solhint-disable-next-line not-rely-on-time\r\n        require(now > parameters[_paramsHash].activationTime, \"not active yet\");\r\n        //Check parameters existence.\r\n        require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);\r\n        // Generate a unique ID:\r\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\r\n        proposalsCnt = proposalsCnt.add(1);\r\n         // Open proposal:\r\n        Proposal memory proposal;\r\n        proposal.callbacks = msg.sender;\r\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\r\n\r\n        proposal.state = ProposalState.Queued;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        proposal.times[0] = now;//submitted time\r\n        proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;\r\n        proposal.proposer = _proposer;\r\n        proposal.winningVote = NO;\r\n        proposal.paramsHash = _paramsHash;\r\n        if (organizations[proposal.organizationId] == address(0)) {\r\n            if (_organization == address(0)) {\r\n                organizations[proposal.organizationId] = msg.sender;\r\n            } else {\r\n                organizations[proposal.organizationId] = _organization;\r\n            }\r\n        }\r\n        //calc dao bounty\r\n        uint256 daoBounty =\r\n        parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);\r\n        proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);\r\n        proposals[proposalId] = proposal;\r\n        proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal\r\n\r\n        emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n      * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired\r\n      * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.\r\n      * P = t/150, where t is the number of seconds passed since the the proposal's timeout.\r\n      * P is capped by 10%.\r\n      * @param _proposalId the id of the proposal\r\n      * @return uint256 expirationCallBounty the bounty amount for the expiration call\r\n     */\r\n    function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,\r\n        \"proposal state in not Boosted nor QuietEndingPeriod\");\r\n        require(_execute(_proposalId), \"proposal need to expire\");\r\n\r\n        proposal.secondsFromTimeOutTillExecuteBoosted =\r\n        // solhint-disable-next-line not-rely-on-time\r\n        now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));\r\n\r\n        expirationCallBounty = calcExecuteCallBounty(_proposalId);\r\n        proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);\r\n        require(stakingToken.transfer(msg.sender, expirationCallBounty), \"transfer to msg.sender failed\");\r\n        emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);\r\n    }\r\n\r\n    /**\r\n     * @dev hash the parameters, save them if necessary, and return the hash value\r\n     * @param _params a parameters array\r\n     *    _params[0] - _queuedVoteRequiredPercentage,\r\n     *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\r\n     *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\r\n     *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation\r\n     *                  state (stable) before boosted.\r\n     *    _params[4] -_thresholdConst\r\n     *    _params[5] -_quietEndingPeriod\r\n     *    _params[6] -_proposingRepReward\r\n     *    _params[7] -_votersReputationLossRatio\r\n     *    _params[8] -_minimumDaoBounty\r\n     *    _params[9] -_daoBountyConst\r\n     *    _params[10] -_activationTime\r\n     * @param _voteOnBehalf - authorized to vote on behalf of others.\r\n    */\r\n    function setParameters(\r\n        uint[11] calldata _params, //use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n    external\r\n    returns(bytes32)\r\n    {\r\n        require(_params[0] <= 100 && _params[0] >= 50, \"50 <= queuedVoteRequiredPercentage <= 100\");\r\n        require(_params[4] <= 16000 && _params[4] > 1000, \"1000 < thresholdConst <= 16000\");\r\n        require(_params[7] <= 100, \"votersReputationLossRatio <= 100\");\r\n        require(_params[2] >= _params[5], \"boostedVotePeriodLimit >= quietEndingPeriod\");\r\n        require(_params[8] > 0, \"minimumDaoBounty should be > 0\");\r\n        require(_params[9] > 0, \"daoBountyConst should be > 0\");\r\n\r\n        bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);\r\n        //set a limit for power for a given alpha to prevent overflow\r\n        uint256 limitExponent = 172;//for alpha less or equal 2\r\n        uint256 j = 2;\r\n        for (uint256 i = 2000; i < 16000; i = i*2) {\r\n            if ((_params[4] > i) && (_params[4] <= i*2)) {\r\n                limitExponent = limitExponent/j;\r\n                break;\r\n            }\r\n            j++;\r\n        }\r\n\r\n        parameters[paramsHash] = Parameters({\r\n            queuedVoteRequiredPercentage: _params[0],\r\n            queuedVotePeriodLimit: _params[1],\r\n            boostedVotePeriodLimit: _params[2],\r\n            preBoostedVotePeriodLimit: _params[3],\r\n            thresholdConst:uint216(_params[4]).fraction(uint216(1000)),\r\n            limitExponentValue:limitExponent,\r\n            quietEndingPeriod: _params[5],\r\n            proposingRepReward: _params[6],\r\n            votersReputationLossRatio:_params[7],\r\n            minimumDaoBounty:_params[8],\r\n            daoBountyConst:_params[9],\r\n            activationTime:_params[10],\r\n            voteOnBehalf:_voteOnBehalf\r\n        });\r\n        return paramsHash;\r\n    }\r\n\r\n    /**\r\n     * @dev redeem a reward for a successful stake, vote or proposing.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return rewards -\r\n     *           [0] stakerTokenReward\r\n     *           [1] voterReputationReward\r\n     *           [2] proposerReputationReward\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),\r\n        \"Proposal should be Executed or ExpiredInQueue\");\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        //as staker\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n        uint256 totalStakesLeftAfterCallBounty =\r\n        proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));\r\n        if (staker.amount > 0) {\r\n\r\n            if (proposal.state == ProposalState.ExpiredInQueue) {\r\n                //Stakes of a proposal that expires in Queue are sent back to stakers\r\n                rewards[0] = staker.amount;\r\n            } else if (staker.vote == proposal.winningVote) {\r\n                if (staker.vote == YES) {\r\n                    if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {\r\n                        uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);\r\n                        rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;\r\n                    }\r\n                } else {\r\n                    rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;\r\n                }\r\n            }\r\n            staker.amount = 0;\r\n        }\r\n            //dao redeem its winnings\r\n        if (proposal.daoRedeemItsWinnings == false &&\r\n            _beneficiary == organizations[proposal.organizationId] &&\r\n            proposal.state != ProposalState.ExpiredInQueue &&\r\n            proposal.winningVote == NO) {\r\n            rewards[0] =\r\n            rewards[0]\r\n            .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)\r\n            .sub(proposal.daoBounty);\r\n            proposal.daoRedeemItsWinnings = true;\r\n        }\r\n\r\n        //as voter\r\n        Voter storage voter = proposal.voters[_beneficiary];\r\n        if ((voter.reputation != 0) && (voter.preBoosted)) {\r\n            if (proposal.state == ProposalState.ExpiredInQueue) {\r\n              //give back reputation for the voter\r\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);\r\n            } else if (proposal.winningVote == voter.vote) {\r\n                uint256 lostReputation;\r\n                if (proposal.winningVote == YES) {\r\n                    lostReputation = proposal.preBoostedVotes[NO];\r\n                } else {\r\n                    lostReputation = proposal.preBoostedVotes[YES];\r\n                }\r\n                lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;\r\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)\r\n                .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);\r\n            }\r\n            voter.reputation = 0;\r\n        }\r\n        //as proposer\r\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\r\n            rewards[2] = params.proposingRepReward;\r\n            proposal.proposer = address(0);\r\n        }\r\n        if (rewards[0] != 0) {\r\n            proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);\r\n            require(stakingToken.transfer(_beneficiary, rewards[0]), \"transfer to beneficiary failed\");\r\n            emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);\r\n        }\r\n        if (rewards[1].add(rewards[2]) != 0) {\r\n            VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);\r\n            emit RedeemReputation(\r\n            _proposalId,\r\n            organizations[proposal.organizationId],\r\n            _beneficiary,\r\n            rewards[1].add(rewards[2])\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev redeemDaoBounty a reward for a successful stake.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return redeemedAmount - redeem token amount\r\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )\r\n     */\r\n    function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)\r\n    public\r\n    returns(uint256 redeemedAmount, uint256 potentialAmount) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(proposal.state == ProposalState.Executed);\r\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        if (\r\n            (staker.amount4Bounty > 0)&&\r\n            (staker.vote == proposal.winningVote)&&\r\n            (proposal.winningVote == YES)&&\r\n            (totalWinningStakes != 0)) {\r\n            //as staker\r\n                potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;\r\n            }\r\n        if ((potentialAmount != 0)&&\r\n            (VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {\r\n            staker.amount4Bounty = 0;\r\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\r\n            require(\r\n            VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));\r\n            redeemedAmount = potentialAmount;\r\n            emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev calcExecuteCallBounty calculate the execute boosted call bounty\r\n      * @param _proposalId the ID of the proposal\r\n      * @return uint256 executeCallBounty\r\n    */\r\n    function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {\r\n        uint maxRewardSeconds = 1500;\r\n        uint rewardSeconds =\r\n        uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);\r\n        return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);\r\n    }\r\n\r\n    /**\r\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\r\n     * @param _proposalId the ID of the proposal\r\n     * @return bool true or false.\r\n     */\r\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\r\n        Proposal memory proposal = proposals[_proposalId];\r\n        return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));\r\n    }\r\n\r\n    /**\r\n     * @dev threshold return the organization's score threshold which required by\r\n     * a proposal to shift to boosted state.\r\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\r\n     * @param _organizationId the organization identifier\r\n     * @param _paramsHash the organization parameters hash\r\n     * @return uint256 organization's score threshold as real number.\r\n     */\r\n    function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {\r\n        uint256 power = orgBoostedProposalsCnt[_organizationId];\r\n        Parameters storage params = parameters[_paramsHash];\r\n\r\n        if (power > params.limitExponentValue) {\r\n            power = params.limitExponentValue;\r\n        }\r\n\r\n        return params.thresholdConst.pow(power);\r\n    }\r\n\r\n  /**\r\n   * @dev hashParameters returns a hash of the given parameters\r\n   */\r\n    function getParametersHash(\r\n        uint[11] memory _params,//use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n        public\r\n        pure\r\n        returns(bytes32)\r\n        {\r\n        //double call to keccak256 to avoid deep stack issue when call with too many params.\r\n        return keccak256(\r\n            abi.encodePacked(\r\n            keccak256(\r\n            abi.encodePacked(\r\n                _params[0],\r\n                _params[1],\r\n                _params[2],\r\n                _params[3],\r\n                _params[4],\r\n                _params[5],\r\n                _params[6],\r\n                _params[7],\r\n                _params[8],\r\n                _params[9],\r\n                _params[10])\r\n            ),\r\n            _voteOnBehalf\r\n        ));\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        Proposal memory tmpProposal = proposal;\r\n        uint256 totalReputation =\r\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\r\n        //first divide by 100 to prevent overflow\r\n        uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;\r\n        ExecutionState executionState = ExecutionState.None;\r\n        uint256 averageDownstakesOfBoosted;\r\n        uint256 confidenceThreshold;\r\n\r\n        if (proposal.votes[proposal.winningVote] > executionBar) {\r\n         // someone crossed the absolute vote execution bar.\r\n            if (proposal.state == ProposalState.Queued) {\r\n                executionState = ExecutionState.QueueBarCrossed;\r\n            } else if (proposal.state == ProposalState.PreBoosted) {\r\n                executionState = ExecutionState.PreBoostedBarCrossed;\r\n            } else {\r\n                executionState = ExecutionState.BoostedBarCrossed;\r\n            }\r\n            proposal.state = ProposalState.Executed;\r\n        } else {\r\n            if (proposal.state == ProposalState.Queued) {\r\n                // solhint-disable-next-line not-rely-on-time\r\n                if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {\r\n                    proposal.state = ProposalState.ExpiredInQueue;\r\n                    proposal.winningVote = NO;\r\n                    executionState = ExecutionState.QueueTimeOut;\r\n                } else {\r\n                    confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\r\n                    if (_score(_proposalId) > confidenceThreshold) {\r\n                        //change proposal mode to PreBoosted mode.\r\n                        proposal.state = ProposalState.PreBoosted;\r\n                        // solhint-disable-next-line not-rely-on-time\r\n                        proposal.times[2] = now;\r\n                        proposal.confidenceThreshold = confidenceThreshold;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (proposal.state == ProposalState.PreBoosted) {\r\n                confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\r\n              // solhint-disable-next-line not-rely-on-time\r\n                if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {\r\n                    if (_score(_proposalId) > confidenceThreshold) {\r\n                        if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {\r\n                         //change proposal mode to Boosted mode.\r\n                            proposal.state = ProposalState.Boosted;\r\n                         // solhint-disable-next-line not-rely-on-time\r\n                            proposal.times[1] = now;\r\n                            orgBoostedProposalsCnt[proposal.organizationId]++;\r\n                         //add a value to average -> average = average + ((value - average) / nbValues)\r\n                            averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\r\n                          // solium-disable-next-line indentation\r\n                            averagesDownstakesOfBoosted[proposal.organizationId] =\r\n                                uint256(int256(averageDownstakesOfBoosted) +\r\n                                ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/\r\n                                int256(orgBoostedProposalsCnt[proposal.organizationId])));\r\n                        }\r\n                    } else {\r\n                        proposal.state = ProposalState.Queued;\r\n                    }\r\n                } else { //check the Confidence level is stable\r\n                    uint256 proposalScore = _score(_proposalId);\r\n                    if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {\r\n                        proposal.state = ProposalState.Queued;\r\n                    } else if (proposal.confidenceThreshold > proposalScore) {\r\n                        proposal.confidenceThreshold = confidenceThreshold;\r\n                        emit ConfidenceLevelChange(_proposalId, confidenceThreshold);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((proposal.state == ProposalState.Boosted) ||\r\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\r\n            // solhint-disable-next-line not-rely-on-time\r\n            if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {\r\n                proposal.state = ProposalState.Executed;\r\n                executionState = ExecutionState.BoostedTimeOut;\r\n            }\r\n        }\r\n\r\n        if (executionState != ExecutionState.None) {\r\n            if ((executionState == ExecutionState.BoostedTimeOut) ||\r\n                (executionState == ExecutionState.BoostedBarCrossed)) {\r\n                orgBoostedProposalsCnt[tmpProposal.organizationId] =\r\n                orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);\r\n                //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);\r\n                uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];\r\n                if (boostedProposals == 0) {\r\n                    averagesDownstakesOfBoosted[proposal.organizationId] = 0;\r\n                } else {\r\n                    averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\r\n                    averagesDownstakesOfBoosted[proposal.organizationId] =\r\n                    (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;\r\n                }\r\n            }\r\n            emit ExecuteProposal(\r\n            _proposalId,\r\n            organizations[proposal.organizationId],\r\n            proposal.winningVote,\r\n            totalReputation\r\n            );\r\n            emit GPExecuteProposal(_proposalId, executionState);\r\n            ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));\r\n            proposal.daoBounty = proposal.daoBountyRemain;\r\n        }\r\n        if (tmpProposal.state != proposal.state) {\r\n            emit StateChange(_proposalId, proposal.state);\r\n        }\r\n        return (executionState != ExecutionState.None);\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {\r\n        // 0 is not a valid vote.\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"wrong vote value\");\r\n        require(_amount > 0, \"staking amount should be >0\");\r\n\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        if ((proposal.state != ProposalState.PreBoosted) &&\r\n            (proposal.state != ProposalState.Queued)) {\r\n            return false;\r\n        }\r\n\r\n        // enable to increase stake only on the previous stake vote\r\n        Staker storage staker = proposal.stakers[_staker];\r\n        if ((staker.amount > 0) && (staker.vote != _vote)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = _amount;\r\n        require(stakingToken.transferFrom(_staker, address(this), amount), \"fail transfer from staker\");\r\n        proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes\r\n        staker.amount = staker.amount.add(amount);\r\n        //This is to prevent average downstakes calculation overflow\r\n        //Note that any how GEN cap is 100000000 ether.\r\n        require(staker.amount <= 0x100000000000000000000000000000000, \"staking amount is too high\");\r\n        require(proposal.totalStakes <= uint256(0x100000000000000000000000000000000).sub(proposal.daoBountyRemain),\r\n                \"total stakes is too high\");\r\n\r\n        if (_vote == YES) {\r\n            staker.amount4Bounty = staker.amount4Bounty.add(amount);\r\n        }\r\n        staker.vote = _vote;\r\n\r\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\r\n        emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\r\n     * @param _proposalId id of the proposal\r\n     * @param _voter used in case the vote is cast for someone else\r\n     * @param _vote a value between 0 to and the proposal's number of choices.\r\n     * @param _rep how many reputation the voter would like to stake for this vote.\r\n     *         if  _rep==0 so the voter full reputation will be use.\r\n     * @return true in case of proposal execution otherwise false\r\n     * throws if proposal is not open or if it has been executed\r\n     * NB: executes the proposal if a decision has been reached\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"0 < _vote <= 2\");\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n\r\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        // Check voter has enough reputation:\r\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\r\n        require(reputation > 0, \"_voter must have reputation\");\r\n        require(reputation >= _rep, \"reputation >= _rep\");\r\n        uint256 rep = _rep;\r\n        if (rep == 0) {\r\n            rep = reputation;\r\n        }\r\n        // If this voter has already voted, return false.\r\n        if (proposal.voters[_voter].reputation != 0) {\r\n            return false;\r\n        }\r\n        // The voting itself:\r\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\r\n        //check if the current winningVote changed or there is a tie.\r\n        //for the case there is a tie the current winningVote set to NO.\r\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\r\n            ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\r\n            proposal.winningVote == YES)) {\r\n            if (proposal.state == ProposalState.Boosted &&\r\n            // solhint-disable-next-line not-rely-on-time\r\n                ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||\r\n                proposal.state == ProposalState.QuietEndingPeriod) {\r\n                //quietEndingPeriod\r\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\r\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\r\n                    proposal.state = ProposalState.QuietEndingPeriod;\r\n                    emit StateChange(_proposalId, proposal.state);\r\n                }\r\n                // solhint-disable-next-line not-rely-on-time\r\n                proposal.times[1] = now;\r\n            }\r\n            proposal.winningVote = _vote;\r\n        }\r\n        proposal.voters[_voter] = Voter({\r\n            reputation: rep,\r\n            vote: _vote,\r\n            preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))\r\n        });\r\n        if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {\r\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\r\n            uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;\r\n            VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);\r\n        }\r\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev _score return the proposal score (Confidence level)\r\n     * For dual choice proposal S = (S+)/(S-)\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint256 proposal score as real number.\r\n     */\r\n    function _score(bytes32 _proposalId) internal view returns(uint256) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.\r\n        return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));\r\n    }\r\n\r\n    /**\r\n      * @dev _isVotable check if the proposal is votable\r\n      * @param _proposalId the ID of the proposal\r\n      * @return bool true or false\r\n    */\r\n    function _isVotable(bytes32 _proposalId) internal view returns(bool) {\r\n        ProposalState pState = proposals[_proposalId].state;\r\n        return ((pState == ProposalState.PreBoosted)||\r\n                (pState == ProposalState.Boosted)||\r\n                (pState == ProposalState.QuietEndingPeriod)||\r\n                (pState == ProposalState.Queued)\r\n        );\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\ncontract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {\r\n    using ECDSA for bytes32;\r\n\r\n    // Digest describing the data the user signs according EIP 712.\r\n    // Needs to match what is passed to Metamask.\r\n    bytes32 public constant DELEGATION_HASH_EIP712 =\r\n    keccak256(abi.encodePacked(\r\n    \"address GenesisProtocolAddress\",\r\n    \"bytes32 ProposalId\",\r\n    \"uint256 Vote\",\r\n    \"uint256 AmountToStake\",\r\n    \"uint256 Nonce\"\r\n    ));\r\n\r\n    mapping(address=>uint256) public stakesNonce; //stakes Nonce\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(IERC20 _stakingToken)\r\n    public\r\n    // solhint-disable-next-line no-empty-blocks\r\n    GenesisProtocolLogic(_stakingToken) {\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {\r\n        return _stake(_proposalId, _vote, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev stakeWithSignature function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @param _nonce nonce value ,it is part of the signature to ensure that\r\n              a signature can be received only once.\r\n     * @param _signatureType signature type\r\n              1 - for web3.eth.sign\r\n              2 - for eth_signTypedData according to EIP #712.\r\n     * @param _signature  - signed data by the staker\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stakeWithSignature(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _signatureType,\r\n        bytes calldata _signature\r\n        )\r\n        external\r\n        returns(bool)\r\n        {\r\n        // Recreate the digest the user signed\r\n        bytes32 delegationDigest;\r\n        if (_signatureType == 2) {\r\n            delegationDigest = keccak256(\r\n                abi.encodePacked(\r\n                    DELEGATION_HASH_EIP712, keccak256(\r\n                        abi.encodePacked(\r\n                        address(this),\r\n                        _proposalId,\r\n                        _vote,\r\n                        _amount,\r\n                        _nonce)\r\n                    )\r\n                )\r\n            );\r\n        } else {\r\n            delegationDigest = keccak256(\r\n                        abi.encodePacked(\r\n                        address(this),\r\n                        _proposalId,\r\n                        _vote,\r\n                        _amount,\r\n                        _nonce)\r\n                    ).toEthSignedMessageHash();\r\n        }\r\n        address staker = delegationDigest.recover(_signature);\r\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\r\n        require(staker != address(0), \"staker address cannot be 0\");\r\n        require(stakesNonce[staker] == _nonce);\r\n        stakesNonce[staker] = stakesNonce[staker].add(1);\r\n        return _stake(_proposalId, _vote, _amount, staker);\r\n    }\r\n\r\n    /**\r\n     * @dev voting function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote NO(2) or YES(1).\r\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\r\n     * @param _voter voter address\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)\r\n    external\r\n    votable(_proposalId)\r\n    returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        address voter;\r\n        if (params.voteOnBehalf != address(0)) {\r\n            require(msg.sender == params.voteOnBehalf);\r\n            voter = _voter;\r\n        } else {\r\n            voter = msg.sender;\r\n        }\r\n        return internalVote(_proposalId, voter, _vote, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev Cancel the vote of the msg.sender.\r\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\r\n   * This function is here in order to comply to the IntVoteInterface .\r\n   */\r\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\r\n       //this is not allowed\r\n        return;\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n  /**\r\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\r\n    * @return uint256 that contains number of choices\r\n    */\r\n    function getNumberOfChoices(bytes32) external view returns(uint256) {\r\n        return NUM_OF_CHOICES;\r\n    }\r\n\r\n    /**\r\n      * @dev getProposalTimes returns proposals times variables.\r\n      * @param _proposalId id of the proposal\r\n      * @return proposals times array\r\n      */\r\n    function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {\r\n        return proposals[_proposalId].times;\r\n    }\r\n\r\n    /**\r\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _voter the address of the voter\r\n     * @return uint256 vote - the voters vote\r\n     *        uint256 reputation - amount of reputation committed by _voter to _proposalId\r\n     */\r\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\r\n        Voter memory voter = proposals[_proposalId].voters[_voter];\r\n        return (voter.vote, voter.reputation);\r\n    }\r\n\r\n    /**\r\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n    * @param _proposalId the ID of the proposal\r\n    * @param _choice the index in the\r\n    * @return voted reputation for the given choice\r\n    */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {\r\n        return proposals[_proposalId].votes[_choice];\r\n    }\r\n\r\n    /**\r\n    * @dev isVotable check if the proposal is votable\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bool true or false\r\n    */\r\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\r\n        return _isVotable(_proposalId);\r\n    }\r\n\r\n    /**\r\n    * @dev proposalStatus return the total votes and stakes for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint256 preBoostedVotes YES\r\n    * @return uint256 preBoostedVotes NO\r\n    * @return uint256 total stakes YES\r\n    * @return uint256 total stakes NO\r\n    */\r\n    function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {\r\n        return (\r\n                proposals[_proposalId].preBoostedVotes[YES],\r\n                proposals[_proposalId].preBoostedVotes[NO],\r\n                proposals[_proposalId].stakes[YES],\r\n                proposals[_proposalId].stakes[NO]\r\n        );\r\n    }\r\n\r\n  /**\r\n    * @dev getProposalOrganization return the organizationId for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bytes32 organization identifier\r\n    */\r\n    function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {\r\n        return (proposals[_proposalId].organizationId);\r\n    }\r\n\r\n    /**\r\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _staker staker address\r\n      * @return uint256 vote\r\n      * @return uint256 amount\r\n    */\r\n    function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {\r\n        return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);\r\n    }\r\n\r\n    /**\r\n      * @dev voteStake return the amount stakes for a given proposal and vote\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _vote vote number\r\n      * @return uint256 stake amount\r\n    */\r\n    function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {\r\n        return proposals[_proposalId].stakes[_vote];\r\n    }\r\n\r\n  /**\r\n    * @dev voteStake return the winningVote for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint256 winningVote\r\n    */\r\n    function winningVote(bytes32 _proposalId) external view returns(uint256) {\r\n        return proposals[_proposalId].winningVote;\r\n    }\r\n\r\n    /**\r\n      * @dev voteStake return the state for a given proposal\r\n      * @param _proposalId the ID of the proposal\r\n      * @return ProposalState proposal state\r\n    */\r\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\r\n        return proposals[_proposalId].state;\r\n    }\r\n\r\n   /**\r\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n    * @return bool true or false\r\n    */\r\n    function isAbstainAllow() external pure returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {\r\n        return (YES, NO);\r\n    }\r\n\r\n    /**\r\n     * @dev score return the proposal score\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint256 proposal score.\r\n     */\r\n    function score(bytes32 _proposalId) public view returns(uint256) {\r\n        return  _score(_proposalId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"}],\"name\":\"CancelProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"CancelVoting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_confidenceThreshold\",\"type\":\"uint256\"}],\"name\":\"ConfidenceLevelChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_decision\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalReputation\",\"type\":\"uint256\"}],\"name\":\"ExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExpirationCallBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum GenesisProtocolLogic.ExecutionState\",\"name\":\"_executionState\",\"type\":\"uint8\"}],\"name\":\"GPExecuteProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numOfChoices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_paramsHash\",\"type\":\"bytes32\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemDaoBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RedeemReputation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum GenesisProtocolLogic.ProposalState\",\"name\":\"_proposalState\",\"type\":\"uint8\"}],\"name\":\"StateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reputation\",\"type\":\"uint256\"}],\"name\":\"VoteProposal\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_HASH_EIP712\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NUM_OF_CHOICES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"YES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"averagesDownstakesOfBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"calcExecuteCallBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"cancelVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"executeBoosted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationCallBounty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllowedRangeOfChoices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getNumberOfChoices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"_params\",\"type\":\"uint256[11]\"},{\"internalType\":\"address\",\"name\":\"_voteOnBehalf\",\"type\":\"address\"}],\"name\":\"getParametersHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"getProposalOrganization\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"getProposalTimes\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"times\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAbstainAllow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"isVotable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orgBoostedProposalsCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"organizations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"queuedVoteRequiredPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queuedVotePeriodLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedVotePeriodLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBoostedVotePeriodLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdConst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitExponentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quietEndingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposingRepReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votersReputationLossRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDaoBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoBountyConst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voteOnBehalf\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"proposalStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"organizationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbacks\",\"type\":\"address\"},{\"internalType\":\"enum GenesisProtocolLogic.ProposalState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"winningVote\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentBoostedVotePeriodLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paramsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"daoBountyRemain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confidenceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsFromTimeOutTillExecuteBoosted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"daoRedeemItsWinnings\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalsCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_organization\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"rewards\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"redeemDaoBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"potentialAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"score\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"_params\",\"type\":\"uint256[11]\"},{\"internalType\":\"address\",\"name\":\"_voteOnBehalf\",\"type\":\"address\"}],\"name\":\"setParameters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"shouldBoost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_signatureType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"stakeWithSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakesNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GenesisProtocolLogic.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_organizationId\",\"type\":\"bytes32\"}],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"voteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"}],\"name\":\"voteStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"voteStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"winningVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GenesisProtocol","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000543ff227f64aa17ea132bf9886cab5db55dcaddf","Library":"","LicenseType":"None","SwarmSource":"bzzr://fd65d40eb2d0cd96bf99bfe6d14fd8afe555eaa6fc9c19984c70fbd2a521b655"}]}