{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    // function imin(int x, int y) internal pure returns (int z) {\r\n    //     return x <= y ? x : y;\r\n    // }\r\n    // function imax(int x, int y) internal pure returns (int z) {\r\n    //     return x >= y ? x : y;\r\n    // }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    // uint constant RAY = 10 ** 27;\r\n\r\n    // function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, y), WAD / 2) / WAD;\r\n    // }\r\n    // function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, y), RAY / 2) / RAY;\r\n    // }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    // function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, RAY), y / 2) / y;\r\n    // }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    // function rpow(uint _x, uint n) internal pure returns (uint z) {\r\n    //     uint x = _x;\r\n    //     z = n % 2 != 0 ? x : RAY;\r\n\r\n    //     for (n /= 2; n != 0; n /= 2) {\r\n    //         x = rmul(x, x);\r\n\r\n    //         if (n % 2 != 0) {\r\n    //             z = rmul(z, x);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * @dev x to the power of y power(base, exponent)\r\n     */\r\n    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\r\n        if (exponent == 0) {\r\n            return 1;\r\n        }\r\n        else if (exponent == 1) {\r\n            return base;\r\n        }\r\n        else if (base == 0 && exponent != 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 z = base;\r\n            for (uint256 i = 1; i < exponent; i++)\r\n                z = mul(z, base);\r\n            return z;\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITargetHandler {\r\n\tfunction setDispatcher (address _dispatcher) external;\r\n\tfunction deposit(uint256 _amountss) external returns (uint256); // token deposit\r\n\tfunction withdraw(uint256 _amounts) external returns (uint256);\r\n\tfunction withdrawProfit() external returns (uint256);\r\n\tfunction drainFunds() external returns (uint256);\r\n\tfunction getBalance() external view  returns (uint256);\r\n\tfunction getPrinciple() external view  returns (uint256);\r\n\tfunction getProfit() external view  returns (uint256);\r\n\tfunction getTargetAddress() external view  returns (address);\r\n\tfunction getToken() external view  returns (address);\r\n\tfunction getDispatcher() external view  returns (address);\r\n}\r\n\r\ninterface IDispatcher {\r\n\r\n\t// external function\r\n\tfunction trigger() external returns (bool);\r\n\tfunction withdrawProfit() external returns (bool);\r\n\tfunction drainFunds(uint256 _index) external returns (bool);\r\n\tfunction refundDispather(address _receiver) external returns (bool);\r\n\r\n\t// get function\r\n\tfunction getReserve() external view returns (uint256);\r\n\tfunction getReserveRatio() external view returns (uint256);\r\n\tfunction getPrinciple() external view returns (uint256);\r\n\tfunction getBalance() external view returns (uint256);\r\n\tfunction getProfit() external view returns (uint256);\r\n\tfunction getTHPrinciple(uint256 _index) external view returns (uint256);\r\n\tfunction getTHBalance(uint256 _index) external view returns (uint256);\r\n\tfunction getTHProfit(uint256 _index) external view returns (uint256);\r\n\tfunction getToken() external view returns (address);\r\n\tfunction getFund() external view returns (address);\r\n\tfunction getTHStructures() external view returns (uint256[] memory, address[] memory, address[] memory);\r\n\tfunction getTHData(uint256 _index) external view returns (uint256, uint256, uint256, uint256);\r\n\tfunction getTHCount() external view returns (uint256);\r\n\tfunction getTHAddress(uint256 _index) external view returns (address);\r\n\tfunction getTargetAddress(uint256 _index) external view returns (address);\r\n\tfunction getPropotion() external view returns (uint256[] memory);\r\n\tfunction getProfitBeneficiary() external view returns (address);\r\n\tfunction getReserveUpperLimit() external view returns (uint256);\r\n\tfunction getReserveLowerLimit() external view returns (uint256);\r\n\tfunction getExecuteUnit() external view returns (uint256);\r\n\r\n\t// Governmence Functions\r\n\tfunction setAimedPropotion(uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction addTargetHandler(address _targetHandlerAddr, uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction removeTargetHandler(address _targetHandlerAddr, uint256 _index, uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction setProfitBeneficiary(address _profitBeneficiary) external returns (bool);\r\n\tfunction setReserveLowerLimit(uint256 _number) external returns (bool);\r\n\tfunction setReserveUpperLimit(uint256 _number) external returns (bool);\r\n\tfunction setExecuteUnit(uint256 _number) external returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external view returns (uint);\r\n    function allowance(address _owner, address _spender) external view returns (uint);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface IFund {\r\n\tfunction transferOut(address _tokenID, address _to, uint amount) external returns (bool);\r\n}\r\n\r\ncontract Dispatcher is IDispatcher, DSAuth, DSMath {\r\n\r\n\taddress token;\r\n\taddress profitBeneficiary;\r\n\taddress fundPool;\r\n\tTargetHandler[] ths;\r\n\tuint256 reserveUpperLimit;\r\n\tuint256 reserveLowerLimit;\r\n\tuint256 executeUnit;\r\n\r\n\tstruct TargetHandler {\r\n\t\taddress targetHandlerAddr;\r\n\t\taddress targetAddr;\r\n\t\tuint256 aimedPropotion;\r\n\t}\r\n\r\n\tconstructor (address _tokenAddr, address _fundPool, address[] memory _thAddr, uint256[] memory _thPropotion, uint256 _tokenDecimals) public {\r\n\t\ttoken = _tokenAddr;\r\n\t\tfundPool = _fundPool;\r\n\t\trequire(_thAddr.length == _thPropotion.length, \"wrong length\");\r\n\t\tuint256 sum = 0;\r\n\t\tuint256 i;\r\n\t\tfor(i = 0; i < _thAddr.length; ++i) {\r\n\t\t\tsum = add(sum, _thPropotion[i]);\r\n\t\t}\r\n\t\trequire(sum == 1000, \"the sum of propotion must be 1000\");\r\n\t\tfor(i = 0; i < _thAddr.length; ++i) {\r\n\t\t\tths.push(TargetHandler(_thAddr[i], ITargetHandler(_thAddr[i]).getTargetAddress(), _thPropotion[i]));\r\n\t\t}\r\n\t\texecuteUnit = (10 ** _tokenDecimals) / 10; //0.1\r\n\r\n\t\t// set up the default limit\r\n\t\treserveUpperLimit = 900; // 350 / 1000 = 0.35\r\n\t\treserveLowerLimit = 850; // 300 / 1000 = 0.3\r\n\t}\r\n\r\n\tfunction trigger () auth external returns (bool) {\r\n\t\tuint256 reserve = getReserve();\r\n\t\tuint256 denominator = add(reserve, getPrinciple());\r\n\t\tuint256 reserveMax = reserveUpperLimit * denominator / 1000;\r\n\t\tuint256 reserveMin = reserveLowerLimit * denominator / 1000;\r\n\t\tuint256 amounts;\r\n\t\tif (reserve > reserveMax) {\r\n\t\t\tamounts = sub(reserve, reserveMax);\r\n\t\t\tamounts = div(amounts, executeUnit);\r\n\t\t\tamounts = mul(amounts, executeUnit);\r\n\t\t\tif (amounts > 0) {\r\n\t\t\t\tinternalDeposit(amounts);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t} else if (reserve < reserveMin) {\r\n\t\t\tamounts = sub(reserveMin, reserve);\r\n\t\t\tamounts = div(amounts, executeUnit);\r\n\t\t\tamounts = mul(amounts, executeUnit);\r\n\t\t\tif (amounts > 0) {\r\n\t\t\t\twithdrawPrinciple(amounts);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction internalDeposit (uint256 _amount) internal {\r\n\t\tuint256 i;\r\n\t\tuint256 _amounts = _amount;\r\n\t\tuint256 amountsToTH;\r\n\t\tuint256 thCurrentBalance;\r\n\t\tuint256 amountsToSatisfiedAimedPropotion;\r\n\t\tuint256 totalPrincipleAfterDeposit = add(getPrinciple(), _amounts);\r\n\t\tTargetHandler memory _th;\r\n\t\tfor(i = 0; i < ths.length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\tamountsToTH = 0;\r\n\t\t\tthCurrentBalance = getTHPrinciple(i);\r\n\t\t\tamountsToSatisfiedAimedPropotion = div(mul(totalPrincipleAfterDeposit, _th.aimedPropotion), 1000);\r\n\t\t\tamountsToSatisfiedAimedPropotion = mul(div(amountsToSatisfiedAimedPropotion, executeUnit), executeUnit);\r\n\t\t\tif (thCurrentBalance > amountsToSatisfiedAimedPropotion) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\tamountsToTH = sub(amountsToSatisfiedAimedPropotion, thCurrentBalance);\r\n\t\t\t\tif (amountsToTH > _amounts) {\r\n\t\t\t\t\tamountsToTH = _amounts;\r\n\t\t\t\t\t_amounts = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_amounts = sub(_amounts, amountsToTH);\r\n\t\t\t\t}\r\n\t\t\t\tif(amountsToTH > 0) {\r\n\t\t\t\t\tIFund(fundPool).transferOut(token, _th.targetHandlerAddr, amountsToTH);\r\n\t\t\t\t\tITargetHandler(_th.targetHandlerAddr).deposit(amountsToTH);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawPrinciple (uint256 _amount) internal {\r\n\t\tuint256 i;\r\n\t\tuint256 _amounts = _amount;\r\n\t\tuint256 amountsFromTH;\r\n\t\tuint256 thCurrentBalance;\r\n\t\tuint256 amountsToSatisfiedAimedPropotion;\r\n\t\tuint256 totalBalanceAfterWithdraw = sub(getPrinciple(), _amounts);\r\n\t\tTargetHandler memory _th;\r\n\t\tfor(i = 0; i < ths.length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\tamountsFromTH = 0;\r\n\t\t\tthCurrentBalance = getTHPrinciple(i);\r\n\t\t\tamountsToSatisfiedAimedPropotion = div(mul(totalBalanceAfterWithdraw, _th.aimedPropotion), 1000);\r\n\t\t\tif (thCurrentBalance < amountsToSatisfiedAimedPropotion) {\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\tamountsFromTH = sub(thCurrentBalance, amountsToSatisfiedAimedPropotion);\r\n\t\t\t\tif (amountsFromTH > _amounts) {\r\n\t\t\t\t\tamountsFromTH = _amounts;\r\n\t\t\t\t\t_amounts = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_amounts = sub(_amounts, amountsFromTH);\r\n\t\t\t\t}\r\n\t\t\t\tif (amountsFromTH > 0) {\r\n\t\t\t\t\tITargetHandler(_th.targetHandlerAddr).withdraw(amountsFromTH);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawProfit () external auth returns (bool) {\r\n\t\trequire(profitBeneficiary != address(0), \"profitBeneficiary not settled.\");\r\n\t\tuint256 i;\r\n\t\tTargetHandler memory _th;\r\n\t\tfor(i = 0; i < ths.length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\tITargetHandler(_th.targetHandlerAddr).withdrawProfit();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction drainFunds (uint256 _index) external auth returns (bool) {\r\n\t\trequire(profitBeneficiary != address(0), \"profitBeneficiary not settled.\");\r\n\t\tTargetHandler memory _th = ths[_index];\r\n\t\tITargetHandler(_th.targetHandlerAddr).drainFunds();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction refundDispather (address _receiver) external auth returns (bool) {\r\n\t\tuint256 lefto = IERC20(token).balanceOf(address(this));\r\n\t\tIERC20(token).transfer(_receiver, lefto);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// getter function\r\n\tfunction getReserve() public view returns (uint256) {\r\n\t\treturn IERC20(token).balanceOf(fundPool);\r\n\t}\r\n\r\n\tfunction getReserveRatio() public view returns (uint256) {\r\n\t\tuint256 reserve = getReserve();\r\n\t\tuint256 denominator = add(getPrinciple(), reserve);\r\n\t\tuint256 adjusted_reserve = add(reserve, executeUnit);\r\n\t\tif (denominator == 0) {\r\n\t\t\treturn 0;\r\n\t\t} else {\r\n\t\t\treturn div(mul(adjusted_reserve, 1000), denominator);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getPrinciple() public view returns (uint256 result) {\r\n\t\tresult = 0;\r\n\t\tfor(uint256 i = 0; i < ths.length; ++i) {\r\n\t\t\tresult = add(result, getTHPrinciple(i));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getBalance() public view returns (uint256 result) {\r\n\t\tresult = 0;\r\n\t\tfor(uint256 i = 0; i < ths.length; ++i) {\r\n\t\t\tresult = add(result, getTHBalance(i));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getProfit() public view returns (uint256) {\r\n\t\treturn sub(getBalance(), getPrinciple());\r\n\t}\r\n\r\n\tfunction getTHPrinciple(uint256 _index) public view returns (uint256) {\r\n\t\treturn ITargetHandler(ths[_index].targetHandlerAddr).getPrinciple();\r\n\t}\r\n\r\n\tfunction getTHBalance(uint256 _index) public view returns (uint256) {\r\n\t\treturn ITargetHandler(ths[_index].targetHandlerAddr).getBalance();\r\n\t}\r\n\r\n\tfunction getTHProfit(uint256 _index) public view returns (uint256) {\r\n\t\treturn ITargetHandler(ths[_index].targetHandlerAddr).getProfit();\r\n\t}\r\n\r\n\tfunction getTHData(uint256 _index) external view returns (uint256, uint256, uint256, uint256) {\r\n\t\taddress _mmAddr = ths[_index].targetAddr;\r\n\t\treturn (getTHPrinciple(_index), getTHBalance(_index), getTHProfit(_index), IERC20(token).balanceOf(_mmAddr));\r\n\t}\r\n\r\n\tfunction getFund() external view returns (address) {\r\n\t\treturn fundPool;\r\n\t}\r\n\r\n\tfunction getToken() external view returns (address) {\r\n\t\treturn token;\r\n\t}\r\n\r\n\tfunction getProfitBeneficiary() external view returns (address) {\r\n\t\treturn profitBeneficiary;\r\n\t}\r\n\r\n\tfunction getReserveUpperLimit() external view returns (uint256) {\r\n\t\treturn reserveUpperLimit;\r\n\t}\r\n\r\n\tfunction getReserveLowerLimit() external view returns (uint256) {\r\n\t\treturn reserveLowerLimit;\r\n\t}\r\n\r\n\tfunction getExecuteUnit() external view returns (uint256) {\r\n\t\treturn executeUnit;\r\n\t}\r\n\r\n\tfunction getPropotion() external view returns (uint256[] memory) {\r\n\t\tuint256 length = ths.length;\r\n\t\tTargetHandler memory _th;\r\n\t\tuint256[] memory result = new uint256[](length);\r\n\t\tfor (uint256 i = 0; i < length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\tresult[i] = _th.aimedPropotion;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction getTHCount() external view returns (uint256) {\r\n\t\treturn ths.length;\r\n\t}\r\n\r\n\tfunction getTHAddress(uint256 _index) external view returns (address) {\r\n\t\treturn ths[_index].targetHandlerAddr;\r\n\t}\r\n\r\n\tfunction getTargetAddress(uint256 _index) external view returns (address) {\r\n\t\treturn ths[_index].targetAddr;\r\n\t}\r\n\r\n\tfunction getTHStructures() external view returns (uint256[] memory, address[] memory, address[] memory) {\r\n\t\tuint256 length = ths.length;\r\n\t\tTargetHandler memory _th;\r\n\t\tuint256[] memory prop = new uint256[](length);\r\n\t\taddress[] memory thAddr = new address[](length);\r\n\t\taddress[] memory mmAddr = new address[](length);\r\n\r\n\t\tfor (uint256 i = 0; i < length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\tprop[i] = _th.aimedPropotion;\r\n\t\t\tthAddr[i] = _th.targetHandlerAddr;\r\n\t\t\tmmAddr[i] = _th.targetAddr;\r\n\t\t}\r\n\t\treturn (prop, thAddr, mmAddr);\r\n\t}\r\n\r\n\t// owner function\r\n\tfunction setAimedPropotion(uint256[] calldata _thPropotion) external auth returns (bool){\r\n\t\trequire(ths.length == _thPropotion.length, \"wrong length\");\r\n\t\tuint256 sum = 0;\r\n\t\tuint256 i;\r\n\t\tTargetHandler memory _th;\r\n\t\tfor(i = 0; i < _thPropotion.length; ++i) {\r\n\t\t\tsum = add(sum, _thPropotion[i]);\r\n\t\t}\r\n\t\trequire(sum == 1000, \"the sum of propotion must be 1000\");\r\n\t\tfor(i = 0; i < _thPropotion.length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\t_th.aimedPropotion = _thPropotion[i];\r\n\t\t\tths[i] = _th;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeTargetHandler(address _targetHandlerAddr, uint256 _index, uint256[] calldata _thPropotion) external auth returns (bool) {\r\n\t\tuint256 length = ths.length;\r\n\t\tuint256 sum = 0;\r\n\t\tuint256 i;\r\n\t\tTargetHandler memory _th;\r\n\r\n\t\trequire(length > 1, \"can not remove the last target handler\");\r\n\t\trequire(_index < length, \"not the correct index\");\r\n\t\trequire(ths[_index].targetHandlerAddr == _targetHandlerAddr, \"not the correct index or address\");\r\n\t\trequire(getTHPrinciple(_index) == 0, \"must drain all balance in the target handler\");\r\n\t\tths[_index] = ths[length - 1];\r\n\t\tths.length --;\r\n\r\n\t\trequire(ths.length == _thPropotion.length, \"wrong length\");\r\n\t\tfor(i = 0; i < _thPropotion.length; ++i) {\r\n\t\t\tsum = add(sum, _thPropotion[i]);\r\n\t\t}\r\n\t\trequire(sum == 1000, \"the sum of propotion must be 1000\");\r\n\t\tfor(i = 0; i < _thPropotion.length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\t_th.aimedPropotion = _thPropotion[i];\r\n\t\t\tths[i] = _th;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction addTargetHandler(address _targetHandlerAddr, uint256[] calldata _thPropotion) external auth returns (bool) {\r\n\t\tuint256 length = ths.length;\r\n\t\tuint256 sum = 0;\r\n\t\tuint256 i;\r\n\t\tTargetHandler memory _th;\r\n\r\n\t\tfor(i = 0; i < length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\trequire(_th.targetHandlerAddr != _targetHandlerAddr, \"exist target handler\");\r\n\t\t}\r\n\t\tths.push(TargetHandler(_targetHandlerAddr, ITargetHandler(_targetHandlerAddr).getTargetAddress(), 0));\r\n\r\n\t\trequire(ths.length == _thPropotion.length, \"wrong length\");\r\n\t\tfor(i = 0; i < _thPropotion.length; ++i) {\r\n\t\t\tsum += _thPropotion[i];\r\n\t\t}\r\n\t\trequire(sum == 1000, \"the sum of propotion must be 1000\");\r\n\t\tfor(i = 0; i < _thPropotion.length; ++i) {\r\n\t\t\t_th = ths[i];\r\n\t\t\t_th.aimedPropotion = _thPropotion[i];\r\n\t\t\tths[i] = _th;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setReserveUpperLimit(uint256 _number) external auth returns (bool) {\r\n\t\trequire(_number >= reserveLowerLimit, \"wrong number\");\r\n\t\treserveUpperLimit = _number;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setReserveLowerLimit(uint256 _number) external auth returns (bool) {\r\n\t\trequire(_number <= reserveUpperLimit, \"wrong number\");\r\n\t\treserveLowerLimit = _number;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setExecuteUnit(uint256 _number) external auth returns (bool) {\r\n\t\texecuteUnit = _number;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setProfitBeneficiary(address _profitBeneficiary) external auth returns (bool) {\r\n\t\tprofitBeneficiary = _profitBeneficiary;\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ninterface IDFView {\r\n\t    function getCollateralBalance(address _srcToken) external view returns (uint);\r\n}\r\n\r\ncontract DFDispatcher is Dispatcher{\r\n\r\n\taddress public dfView;\r\n\r\n\tconstructor (address _dfView,\r\n\t\t         address _tokenAddr,\r\n\t\t\t\t address _fundPool,\r\n\t\t\t\t address[] memory _thAddr,\r\n\t\t\t\t uint256[] memory _thPropotion,\r\n\t\t\t\t uint256 _tokenDecimals)\r\n\t\t\t\t Dispatcher(_tokenAddr, _fundPool, _thAddr, _thPropotion, _tokenDecimals) public\r\n\t{\r\n\t\tdfView = _dfView;\r\n\t}\r\n\r\n\t// getter function\r\n\tfunction getReserve() public view returns (uint256) {\r\n\t\treturn IDFView(dfView).getCollateralBalance(token) - super.getPrinciple();\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTHData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTHPrinciple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitBeneficiary\",\"type\":\"address\"}],\"name\":\"setProfitBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"exponent\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExecuteUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTHAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"refundDispather\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setExecuteUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setReserveLowerLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTHCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTHStructures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserveRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrinciple\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"drainFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTHBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserveUpperLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setReserveUpperLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_thPropotion\",\"type\":\"uint256[]\"}],\"name\":\"setAimedPropotion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTargetAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"trigger\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetHandlerAddr\",\"type\":\"address\"},{\"name\":\"_thPropotion\",\"type\":\"uint256[]\"}],\"name\":\"addTargetHandler\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPropotion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserveLowerLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targetHandlerAddr\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_thPropotion\",\"type\":\"uint256[]\"}],\"name\":\"removeTargetHandler\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfView\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTHProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dfView\",\"type\":\"address\"},{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_fundPool\",\"type\":\"address\"},{\"name\":\"_thAddr\",\"type\":\"address[]\"},{\"name\":\"_thPropotion\",\"type\":\"uint256[]\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DFDispatcher","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000097dd22173f0e382dae42baaeb9bdbc9fdf3396f0000000000000000000000008e870d67f660d95d5be530380d0ec0bd388289e1000000000000000000000000786bf554473f9ab733fd683c528212492a23d89500000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000100000000000000000000000028ffc9a34557200fca0dcc3a3d2cd7c7f90d7c27000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8","Library":"","LicenseType":"None","SwarmSource":"bzzr://2ee3d054ef17a59d6eb659b255f97761b37665ca2c38946bd266d0f98b9d42ee"}]}