{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n\r\ncontract Bytes {\r\n    function scriptNumSize(uint256 i) public pure returns (uint256) {\r\n        if      (i > 0x7fffffff) { return 5; }\r\n        else if (i > 0x7fffff  ) { return 4; }\r\n        else if (i > 0x7fff    ) { return 3; }\r\n        else if (i > 0x7f      ) { return 2; }\r\n        else if (i > 0x00      ) { return 1; }\r\n        else                     { return 0; }\r\n    }\r\n\r\n    function scriptNumSizeHex(uint256 i) public pure returns (bytes memory) {\r\n        return toBytes(scriptNumSize(i));\r\n    }\r\n\r\n    function toBytes(uint256 x) public pure returns (bytes memory b) {\r\n        uint a = scriptNumSize(x);\r\n        b = new bytes(a);\r\n        for (uint i = 0; i < a; i++) {\r\n            b[i] = byte(uint8(x / (2**(8*(a - 1 - i)))));\r\n        }\r\n    }\r\n\r\n    function scriptNumEncode(uint256 num) public pure returns (bytes memory) {\r\n        uint a = scriptNumSize(num);\r\n        bytes memory b = toBytes(num);\r\n        for (uint i = 0; i < (a/2); i++) {\r\n            byte c = b[i];\r\n            b[i] = b[a - i - 1];\r\n            b[a - i - 1] = c;\r\n        }\r\n        return b;\r\n    }\r\n}\r\n\r\ninterface LoansInterface {\r\n    function secretHashes(bytes32) external view returns (bytes32, bytes32, bytes32, bytes32, bytes32, bool);\r\n    function pubKeys(bytes32) external view returns (bytes memory, bytes memory, bytes memory);\r\n    function liquidationExpiration(bytes32) external view returns (uint256);\r\n    function seizureExpiration(bytes32) external view returns (uint256);\r\n}\r\n\r\ncontract P2WSH is Bytes {\r\n  LoansInterface loans;\r\n\r\n  constructor(LoansInterface loans_) public {\r\n    loans = loans_;\r\n  }\r\n\r\n  function loanPeriodP2WSH(bytes32 loan, bytes memory script) internal view returns (bytes memory) {\r\n    (, bytes32 secretHashB1, bytes32 secretHashC1, , ,) = loans.secretHashes(loan);\r\n    (bytes memory borrowerPubKey, ,) = loans.pubKeys(loan);\r\n\r\n    bytes memory result = abi.encodePacked(\r\n      hex\"63820120877ca820\", \r\n      secretHashB1,\r\n      hex\"879352877c820120877ca820\", \r\n      secretHashC1,\r\n      hex\"879352879351a26976a914\", \r\n      ripemd160(abi.encodePacked(sha256(borrowerPubKey))),\r\n      hex\"88ac67\", \r\n      script,\r\n      hex\"68\" \r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  function biddingPeriodSigP2WSH(bytes32 loan) internal view returns (bytes memory) {\r\n    (bytes memory borrowerPubKey, bytes memory lenderPubKey, bytes memory arbiterPubKey) = loans.pubKeys(loan);\r\n\r\n    bytes memory result = abi.encodePacked(\r\n      hex\"52\", \r\n      toBytes(borrowerPubKey.length),\r\n      borrowerPubKey,\r\n      toBytes(lenderPubKey.length),\r\n      lenderPubKey,\r\n      toBytes(arbiterPubKey.length),\r\n      arbiterPubKey,\r\n      hex\"53ae\" \r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  function biddingPeriodP2WSH(bytes32 loan, bytes memory script) internal view returns (bytes memory) {\r\n    bytes memory result = abi.encodePacked(\r\n      hex\"63\", \r\n      biddingPeriodSigP2WSH(loan),\r\n      hex\"67\", \r\n      script,\r\n      hex\"68\" \r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  function seizurePeriodSechP2WSH(bytes32 loan) internal view returns (bytes memory) {\r\n    (bytes32 secretHashA1,,,,,) = loans.secretHashes(loan);\r\n    uint256 liquidationExpiration = loans.liquidationExpiration(loan);\r\n\r\n    bytes memory result = abi.encodePacked(\r\n      hex\"82012088a820\", \r\n      secretHashA1,\r\n      hex\"88\", \r\n      scriptNumSizeHex(liquidationExpiration),\r\n      scriptNumEncode(liquidationExpiration),\r\n      hex\"b175\" \r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  function seizurePeriodP2WSH(bytes32 loan, bytes memory script, bool sez) internal view returns (bytes memory) {\r\n    (bytes memory borrowerPubKey, bytes memory lenderPubKey, ) = loans.pubKeys(loan);\r\n\r\n    bytes memory pubKey;\r\n\r\n    if (sez) {\r\n      pubKey = lenderPubKey;\r\n    } else {\r\n      pubKey = borrowerPubKey;\r\n    }\r\n\r\n    bytes memory result = abi.encodePacked(\r\n      hex\"63\", \r\n      seizurePeriodSechP2WSH(loan),\r\n      hex\"76a914\", \r\n      ripemd160(abi.encodePacked(sha256(pubKey))),\r\n      hex\"88ac67\", \r\n      script,\r\n      hex\"68\" \r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  function refundablePeriodP2WSH(bytes32 loan) internal view returns (bytes memory) {\r\n    (bytes memory borrowerPubKey, , ) = loans.pubKeys(loan);\r\n    uint256 seizureExpiration = loans.seizureExpiration(loan);\r\n\r\n    bytes memory result = abi.encodePacked(\r\n      scriptNumSizeHex(seizureExpiration),\r\n      scriptNumEncode(seizureExpiration),\r\n      hex\"b17576a914\", \r\n      ripemd160(abi.encodePacked(sha256(borrowerPubKey))),\r\n      hex\"88ac\" \r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  function getP2WSH(bytes32 loan, bool sez) external view returns (bytes memory, bytes32) {\r\n    bytes memory script = loanPeriodP2WSH(loan, biddingPeriodP2WSH(loan, seizurePeriodP2WSH(loan, refundablePeriodP2WSH(loan), sez)));\r\n    bytes32 pubkh = sha256(script);\r\n\r\n    return (script, pubkh);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"loan\",\"type\":\"bytes32\"},{\"name\":\"sez\",\"type\":\"bool\"}],\"name\":\"getP2WSH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"toBytes\",\"outputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"scriptNumSizeHex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"scriptNumEncode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"scriptNumSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"loans_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"P2WSH","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000023d2374f10b02f1c866498f3f534a1f24c9341b5","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7d58c4a0117df28353f3dd5f142ee139c0eec743407896df35d40fb3aced6ffb"}]}