{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/SecretSanta.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\ncontract ERC721 {\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Secret Santa with NFTs (www.secrethsanta.co)\r\n * @notice All the logic of the contract happens here\r\n * @author Clemlak\r\n */\r\ncontract SecretSanta is Ownable {\r\n    address public lastSecretSanta;\r\n    bool public isPrizeClaimed;\r\n\r\n    uint256 public lastPresentAt;\r\n    uint256 public prizeDelay;\r\n\r\n    address[] public prizeTokens;\r\n    uint256[] public prizeTokensId;\r\n\r\n    mapping (address => bool) public whitelist;\r\n\r\n    event PresentSent(\r\n        address indexed from,\r\n        address indexed to,\r\n        address token,\r\n        uint256 tokenId\r\n    );\r\n\r\n    event PrizeAdded(\r\n        address indexed from,\r\n        address[] tokens,\r\n        uint256[] tokensId\r\n    );\r\n\r\n    constructor(\r\n        uint256 initialPrizeDelay\r\n    ) public {\r\n        lastSecretSanta = msg.sender;\r\n        lastPresentAt = now;\r\n        prizeDelay = initialPrizeDelay;\r\n    }\r\n\r\n    /**\r\n     * @notice Send tokens to the prize\r\n     * @param tokens An array with the address of the contracts\r\n     * @param tokensId An array with the id of the tokens\r\n     */\r\n    function sendPrize(\r\n        address[] calldata tokens,\r\n        uint256[] calldata tokensId\r\n    ) external {\r\n        require(\r\n            tokens.length == tokensId.length,\r\n            \"Invalid array\"\r\n        );\r\n\r\n        require(\r\n            lastPresentAt + prizeDelay > now,\r\n            \"Too late\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokens.length; i += 1) {\r\n            require(\r\n                whitelist[tokens[i]],\r\n                \"Token not whitelisted\"\r\n            );\r\n\r\n            ERC721 token = ERC721(tokens[i]);\r\n            token.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                tokensId[i]\r\n            );\r\n\r\n            prizeTokens.push(tokens[i]);\r\n            prizeTokensId.push(tokensId[i]);\r\n        }\r\n\r\n        emit PrizeAdded(\r\n            msg.sender,\r\n            tokens,\r\n            tokensId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sends a present\r\n     * @param tokenAddress The address of the contract\r\n     * @param tokenId The id of the token\r\n     */\r\n    function sendPresent(\r\n        address tokenAddress,\r\n        uint256 tokenId\r\n    ) external {\r\n        require(\r\n            lastPresentAt + prizeDelay > now,\r\n            \"Too late\"\r\n        );\r\n\r\n        require(\r\n            whitelist[tokenAddress],\r\n            \"Token not whitelisted\"\r\n        );\r\n\r\n        ERC721 token = ERC721(tokenAddress);\r\n\r\n        token.transferFrom(\r\n            msg.sender,\r\n            lastSecretSanta,\r\n            tokenId\r\n        );\r\n\r\n        emit PresentSent(\r\n            msg.sender,\r\n            lastSecretSanta,\r\n            tokenAddress,\r\n            tokenId\r\n        );\r\n\r\n        lastSecretSanta = msg.sender;\r\n        lastPresentAt = now;\r\n    }\r\n\r\n    /**\r\n     * @notice Claims the prize\r\n     */\r\n    function claimPrize() external {\r\n        require(\r\n            now > lastPresentAt + prizeDelay,\r\n            \"Not yet\"\r\n        );\r\n\r\n        require(\r\n            msg.sender == lastSecretSanta,\r\n            \"Sender not last Santa\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < prizeTokens.length; i += 1) {\r\n            ERC721 token = ERC721(prizeTokens[i]);\r\n\r\n            token.transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                prizeTokensId[i]\r\n            );\r\n        }\r\n\r\n        isPrizeClaimed = true;\r\n    }\r\n\r\n    function updateWhitelist(\r\n        address[] calldata tokens,\r\n        bool isApproved\r\n    ) external onlyOwner() {\r\n        for (uint256 i = 0; i < tokens.length; i += 1) {\r\n            whitelist[tokens[i]] = isApproved;\r\n        }\r\n    }\r\n\r\n    function getPrize() external view returns (\r\n        address[] memory tokens,\r\n        uint256[] memory tokensId\r\n    ) {\r\n        return (\r\n            prizeTokens,\r\n            prizeTokensId\r\n        );\r\n    }\r\n\r\n    function isTooLate() external view returns (bool) {\r\n        return now > lastPresentAt + prizeDelay;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialPrizeDelay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PresentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokensId\",\"type\":\"uint256[]\"}],\"name\":\"PrizeAdded\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensId\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPrizeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTooLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPresentAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSecretSanta\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeTokensId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sendPresent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensId\",\"type\":\"uint256[]\"}],\"name\":\"sendPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SecretSanta","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000003f480","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://eec68babc5e2ba2b7bda93b6e124c414d1f4b684d5eab16a96362e590f41d7b2"}]}