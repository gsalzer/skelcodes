{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}contract PermittedStabelsInterface {\r\n  mapping (address => bool) public permittedAddresses;\r\n}\r\ncontract PermittedPoolsInterface {\r\n  mapping (address => bool) public permittedAddresses;\r\n}\r\ncontract PermittedExchangesInterface {\r\n  mapping (address => bool) public permittedAddresses;\r\n}\r\ncontract SmartFundUSDFactoryInterface {\r\n  function createSmartFund(\r\n    address _owner,\r\n    string  _name,\r\n    uint256 _successFee,\r\n    uint256 _platformFee,\r\n    address _platfromAddress,\r\n    address _exchangePortalAddress,\r\n    address _permittedExchanges,\r\n    address _permittedPools,\r\n    address _permittedStabels,\r\n    address _poolPortalAddress,\r\n    address _stableCoinAddress,\r\n    address _cEther\r\n    )\r\n  public\r\n  returns(address);\r\n}\r\ncontract SmartFundETHFactoryInterface {\r\n  function createSmartFund(\r\n    address _owner,\r\n    string  _name,\r\n    uint256 _successFee,\r\n    uint256 _platformFee,\r\n    address _platfromAddress,\r\n    address _exchangePortalAddress,\r\n    address _permittedExchanges,\r\n    address _permittedPools,\r\n    address _poolPortalAddress,\r\n    address _cEther\r\n    )\r\n  public\r\n  returns(address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n/*\r\n* The SmartFundRegistry is used to manage the creation and permissions of SmartFund contracts\r\n*/\r\ncontract SmartFundRegistry is Ownable {\r\n  address[] public smartFunds;\r\n\r\n  // address of platdorm wallet contract\r\n  address public COTDAOWallet;\r\n\r\n  // The Smart Contract which stores the addresses of all the authorized Exchange Portals\r\n  PermittedExchangesInterface public permittedExchanges;\r\n  // The Smart Contract which stores the addresses of all the authorized Pool Portals\r\n  PermittedPoolsInterface public permittedPools;\r\n  // The Smart Contract which stores the addresses of all the authorized stable coins\r\n  PermittedStabelsInterface public permittedStabels;\r\n\r\n  // Addresses of portals\r\n  address public poolPortalAddress;\r\n  address public exchangePortalAddress;\r\n\r\n  // platForm fee is out of 10,000, e.g 2500 is 25%\r\n  uint256 public platformFee;\r\n\r\n  // Default maximum success fee is 3000/30%\r\n  uint256 public maximumSuccessFee = 3000;\r\n\r\n  // Address of stable coin can be set in constructor and changed via function\r\n  address public stableCoinAddress;\r\n\r\n  // Addresses for Compound platform\r\n  address public cEther;\r\n\r\n  // Factories\r\n  SmartFundETHFactoryInterface public smartFundETHFactory;\r\n  SmartFundUSDFactoryInterface public smartFundUSDFactory;\r\n\r\n  event SmartFundAdded(address indexed smartFundAddress, address indexed owner);\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _COTDAOWallet                 address of platform wallet contract\r\n  * @param _platformFee                  Initial platform fee\r\n  * @param _permittedExchangesAddress    Address of the permittedExchanges contract\r\n  * @param _exchangePortalAddress        Address of the initial ExchangePortal contract\r\n  * @param _permittedPoolAddress         Address of the permittedPool contract\r\n  * @param _poolPortalAddress            Address of the initial PoolPortal contract\r\n  * @param _permittedStabels             Address of the permittesStabels contract\r\n  * @param _stableCoinAddress            Address of the stable coin\r\n  * @param _smartFundETHFactory          Address of smartFund ETH factory\r\n  * @param _smartFundUSDFactory          Address of smartFund USD factory\r\n  * @param _cEther                       Address of Compound ETH wrapper\r\n  */\r\n  constructor(\r\n    address _COTDAOWallet,\r\n    uint256 _platformFee,\r\n    address _permittedExchangesAddress,\r\n    address _exchangePortalAddress,\r\n    address _permittedPoolAddress,\r\n    address _poolPortalAddress,\r\n    address _permittedStabels,\r\n    address _stableCoinAddress,\r\n    address _smartFundETHFactory,\r\n    address _smartFundUSDFactory,\r\n    address _cEther\r\n  ) public {\r\n    COTDAOWallet = _COTDAOWallet;\r\n    platformFee = _platformFee;\r\n    exchangePortalAddress = _exchangePortalAddress;\r\n    permittedExchanges = PermittedExchangesInterface(_permittedExchangesAddress);\r\n    permittedPools = PermittedPoolsInterface(_permittedPoolAddress);\r\n    permittedStabels = PermittedStabelsInterface(_permittedStabels);\r\n    poolPortalAddress = _poolPortalAddress;\r\n    stableCoinAddress = _stableCoinAddress;\r\n    smartFundETHFactory = SmartFundETHFactoryInterface(_smartFundETHFactory);\r\n    smartFundUSDFactory = SmartFundUSDFactoryInterface(_smartFundUSDFactory);\r\n    cEther = _cEther;\r\n  }\r\n\r\n  /**\r\n  * @dev Creates a new SmartFund\r\n  *\r\n  * @param _name               The name of the new fund\r\n  * @param _successFee         The fund managers success fee\r\n  * @param _isStableBasedFund  true for USD base fund, false for ETH base\r\n  */\r\n  function createSmartFund(\r\n    string _name,\r\n    uint256 _successFee,\r\n    bool _isStableBasedFund\r\n  ) public {\r\n    // Require that the funds success fee be less than the maximum allowed amount\r\n    require(_successFee <= maximumSuccessFee);\r\n\r\n    address owner = msg.sender;\r\n    address smartFund;\r\n\r\n    if(_isStableBasedFund){\r\n      // Create USD Fund\r\n      smartFund = smartFundUSDFactory.createSmartFund(\r\n        owner,\r\n        _name,\r\n        _successFee,\r\n        platformFee,\r\n        COTDAOWallet,\r\n        exchangePortalAddress,\r\n        address(permittedExchanges),\r\n        address(permittedPools),\r\n        address(permittedStabels),\r\n        poolPortalAddress,\r\n        stableCoinAddress,\r\n        cEther\r\n      );\r\n    }else{\r\n      // Create ETH Fund\r\n      smartFund = smartFundETHFactory.createSmartFund(\r\n        owner,\r\n        _name,\r\n        _successFee,\r\n        platformFee,\r\n        COTDAOWallet,\r\n        exchangePortalAddress,\r\n        address(permittedExchanges),\r\n        address(permittedPools),\r\n        poolPortalAddress,\r\n        cEther\r\n      );\r\n    }\r\n\r\n    smartFunds.push(smartFund);\r\n    emit SmartFundAdded(smartFund, owner);\r\n  }\r\n\r\n  function totalSmartFunds() public view returns (uint256) {\r\n    return smartFunds.length;\r\n  }\r\n\r\n  function getAllSmartFundAddresses() public view returns(address[]) {\r\n    address[] memory addresses = new address[](smartFunds.length);\r\n\r\n    for (uint i; i < smartFunds.length; i++) {\r\n      addresses[i] = address(smartFunds[i]);\r\n    }\r\n\r\n    return addresses;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets a new default ExchangePortal address\r\n  *\r\n  * @param _newExchangePortalAddress    Address of the new exchange portal to be set\r\n  */\r\n  function setExchangePortalAddress(address _newExchangePortalAddress) public onlyOwner {\r\n    // Require that the new exchange portal is permitted by permittedExchanges\r\n    require(permittedExchanges.permittedAddresses(_newExchangePortalAddress));\r\n    exchangePortalAddress = _newExchangePortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets a new default Portal Portal address\r\n  *\r\n  * @param _poolPortalAddress    Address of the new pool portal to be set\r\n  */\r\n  function setPoolPortalAddress (address _poolPortalAddress) external onlyOwner {\r\n    // Require that the new pool portal is permitted by permittedPools\r\n    require(permittedPools.permittedAddresses(_poolPortalAddress));\r\n\r\n    poolPortalAddress = _poolPortalAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets maximum success fee for all newly created SmartFunds\r\n  *\r\n  * @param _maximumSuccessFee    New maximum success fee\r\n  */\r\n  function setMaximumSuccessFee(uint256 _maximumSuccessFee) external onlyOwner {\r\n    maximumSuccessFee = _maximumSuccessFee;\r\n  }\r\n\r\n  /**\r\n  * @dev Sets platform fee for all newly created SmartFunds\r\n  *\r\n  * @param _platformFee    New platform fee\r\n  */\r\n  function setPlatformFee(uint256 _platformFee) external onlyOwner {\r\n    platformFee = _platformFee;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets new stableCoinAddress\r\n  *\r\n  * @param _stableCoinAddress    New stable address\r\n  */\r\n  function changeStableCoinAddress(address _stableCoinAddress) external onlyOwner {\r\n    require(permittedStabels.permittedAddresses(_stableCoinAddress));\r\n    stableCoinAddress = _stableCoinAddress;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows platform to withdraw tokens received as part of the platform fee\r\n  *\r\n  * @param _tokenAddress    Address of the token to be withdrawn\r\n  */\r\n  function withdrawTokens(address _tokenAddress) external onlyOwner {\r\n    ERC20 token = ERC20(_tokenAddress);\r\n\r\n    token.transfer(owner, token.balanceOf(this));\r\n  }\r\n\r\n  /**\r\n  * @dev Allows platform to withdraw ether received as part of the platform fee\r\n  */\r\n  function withdrawEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  // Fallback payable function in order to receive ether when fund manager withdraws their cut\r\n  function() public payable {}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartFundETHFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cEther\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maximumSuccessFee\",\"type\":\"uint256\"}],\"name\":\"setMaximumSuccessFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllSmartFundAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolPortalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_poolPortalAddress\",\"type\":\"address\"}],\"name\":\"setPoolPortalAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_successFee\",\"type\":\"uint256\"},{\"name\":\"_isStableBasedFund\",\"type\":\"bool\"}],\"name\":\"createSmartFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permittedExchanges\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangePortalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newExchangePortalAddress\",\"type\":\"address\"}],\"name\":\"setExchangePortalAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableCoinAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"name\":\"changeStableCoinAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smartFundUSDFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumSuccessFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSmartFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smartFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COTDAOWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permittedPools\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permittedStabels\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_COTDAOWallet\",\"type\":\"address\"},{\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"name\":\"_permittedExchangesAddress\",\"type\":\"address\"},{\"name\":\"_exchangePortalAddress\",\"type\":\"address\"},{\"name\":\"_permittedPoolAddress\",\"type\":\"address\"},{\"name\":\"_poolPortalAddress\",\"type\":\"address\"},{\"name\":\"_permittedStabels\",\"type\":\"address\"},{\"name\":\"_stableCoinAddress\",\"type\":\"address\"},{\"name\":\"_smartFundETHFactory\",\"type\":\"address\"},{\"name\":\"_smartFundUSDFactory\",\"type\":\"address\"},{\"name\":\"_cEther\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"smartFundAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SmartFundAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SmartFundRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c9d742f23b4f10a3da83821481d1b4ed8a59610900000000000000000000000000000000000000000000000000000000000003e800000000000000000000000015ebf91de109d1fabf8028be33d41d10342d5f4e0000000000000000000000009d82221f8c715de15103b5e5ef55644d29d845630000000000000000000000008c7ab65e2f82ce8c43831e909a24216656498fb4000000000000000000000000e8546d4de7927d0e6d314136b8980248aa095ea6000000000000000000000000ad3d707c4e20931d83aff95d1c69b9086fa37d2b0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000094afa531709c58a175506c68eff9f1393bf73aec000000000000000000000000fc25e551d2b8e492ba94818ca7de3f57b5b8a9740000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed5","Library":"","LicenseType":"None","SwarmSource":"bzzr://613e35e15ecb998f7c9c1ab6758f77e374d35c73c40bb1dbf0218a31293babda"}]}