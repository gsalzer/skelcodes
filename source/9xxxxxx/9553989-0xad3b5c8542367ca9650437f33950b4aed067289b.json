{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.7;\n\ninterface IERC20 {\n    function totalSupply() external view returns(uint256);\n\n    function balanceOf(address who) external view returns(uint256);\n\n    function allowance(address owner, address spender) external view returns(uint256);\n\n    function transfer(address to, uint256 value) external returns(bool);\n\n    function approve(address spender, uint256 value) external returns(bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function ceil(uint256 a, uint256 m) internal pure returns(uint256) {\n        uint256 c = add(a, m);\n        uint256 d = sub(c, 1);\n        return mul(div(d, m), m);\n    }\n}\n\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function name() public view returns(string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns(string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns(uint8) {\n        return _decimals;\n    }\n}\ncontract Owned {\n    address payable public owner = 0x9e50A773A5aDcC115A2964Ae1dCBBECcd379e8d5;\n    address payable public drawer = 0x9e50A773A5aDcC115A2964Ae1dCBBECcd379e8d5;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n\n    modifier onlyOwnerOrDrawer {\n        require(msg.sender == owner || msg.sender == drawer);\n        _;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnershipOfDrawer(address payable _newOwner) public onlyOwnerOrDrawer {\n        drawer = _newOwner;\n    }\n\n    function transferOwnership(address payable _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\ncontract BIDCOIN is ERC20Detailed, Owned {\n\n    using SafeMath\n    for uint256;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowed;\n\n\n\n    string constant tokenName = \"BIDCOIN\";\n    string constant tokenSymbol = \"BID\";\n    uint8 constant tokenDecimals = 8;\n    uint256 _totalSupply = 100000000 * (10 ** uint256(tokenDecimals));\n    uint256 public basePercent = 100;\n    address public lastWinner;\n    address public burnAddress = 0x0000000000000000000000000000000000000000;\n\n    function transfer(address to, uint256 value) public returns(bool) {\n\n        require(value <= _balances[msg.sender], \"Value sending is higher than the balance\");\n        require(to != address(0), \"Can't transfer to zero address, use burnFrom instead\");\n\n        uint256 tokensToBurn = findPointFivePercent(value);\n        uint256 tokensForDividentTrans = findPointFivePercent(value);\n        uint256 tokensToTransfer = value.sub(tokensToBurn.add(tokensForDividentTrans));\n\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        _balances[address(this)] = _balances[address(this)].add(tokensForDividentTrans);\n        _totalSupply = _totalSupply.sub(tokensToBurn);\n\n        emit Transfer(msg.sender, to, tokensToTransfer);\n        emit Transfer(msg.sender, address(0), tokensToBurn);\n        emit Transfer(msg.sender, address(this), tokensForDividentTrans);\n\n        return true;\n    }\n\n\n    function pickWinner(address[] memory randomEntries) public onlyOwnerOrDrawer returns(bool) {\n        uint winner = (uint(keccak256(abi.encodePacked(now, msg.sender, block.number))) % (randomEntries.length)) - 1;\n        lastWinner = randomEntries[winner];\n        transferFromContract(lastWinner, findPointFivePercent(balanceOf(address(this))));\n        return true;\n    }\n\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n        _balances[owner] = _balances[owner].add(_totalSupply);\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function totalSupply() public view returns(uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns(uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns(uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function findPointFivePercent(uint256 value) public view returns(uint256) {\n        uint256 roundValue = value.ceil(basePercent);\n        uint256 pointFivePercent = roundValue.mul(basePercent).div(20000);\n        return pointFivePercent;\n    }\n\n    function withdrawTokenByOwner() public onlyOwner {\n        transfer(owner, balanceOf(address(this)));\n    }\n\n\n    function transferFromContract(address to, uint256 value) internal returns(bool) {\n\n        address contractAddress = address(this);\n        require(value <= _balances[contractAddress], \"Value sending is higher than the balance\");\n        require(to != address(0), \"Can't transfer to zero address, use burnFrom instead\");\n\n        uint256 tokensToBurn = findPointFivePercent(value);\n        uint256 tokensToTransfer = value.sub(tokensToBurn);\n\n        _balances[contractAddress] = _balances[contractAddress].sub(value);\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        _totalSupply = _totalSupply.sub(tokensToBurn);\n\n        emit Transfer(contractAddress, to, tokensToTransfer);\n        emit Transfer(contractAddress, address(0), tokensToBurn);\n\n        return true;\n    }\n\n\n\n\n    /**\n     * @dev Airdrops some tokens to some accounts.\n     * @param source The address of the current token holder.\n     * @param dests List of account addresses.\n     * @param values List of token amounts. Note that these are in whole\n     *   tokens. Fractions of tokens are not supported.\n     */\n    function airdrop(address source, address[] memory dests, uint256[] memory values) public onlyOwner {\n        // This simple validation will catch most mistakes without consuming\n        // too much gas.\n        require(dests.length == values.length, \"Address and values doesn't match\");\n\n        for (uint256 i = 0; i < dests.length; i++) {\n            require(transferFrom(source, dests[i], values[i]));\n        }\n    }\n\n\n    function approve(address spender, uint256 value) public returns(bool) {\n        require(spender != address(0), \"Can't approve to zero address\");\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns(bool) {\n        require(value <= _balances[from], \"Insufficient balance\");\n        require(value <= _allowed[from][msg.sender], \"Balance not allowed\");\n        require(to != address(0), \"Can't send to zero address\");\n        _balances[from] = _balances[from].sub(value);\n\n        uint256 tokensToBurn = findPointFivePercent(value);\n        uint256 tokenForDivident = findPointFivePercent(value);\n\n\n        uint256 tokensToTransfer = value.sub(tokensToBurn.add(tokenForDivident));\n\n        _balances[to] = _balances[to].add(tokensToTransfer);\n        _balances[address(this)] = _balances[address(this)].add(tokenForDivident);\n        _totalSupply = _totalSupply.sub(tokensToBurn);\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        emit Transfer(from, to, tokensToTransfer);\n        emit Transfer(from, address(0), tokensToBurn);\n        emit Transfer(from, address(this), tokenForDivident);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns(bool) {\n        require(spender != address(0), \"Can't allow to zero address\");\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool) {\n        require(spender != address(0), \"Can't allow to zero address\");\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n\n\n    function _burn(address account, uint256 amount) internal {\n        require(amount != 0, \"Can't burn zero amount\");\n        require(amount <= _balances[account], \"Balance not enough\");\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[account] = _balances[account].sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function burnFrom(address account, uint256 amount) external {\n        require(amount <= _allowed[account][msg.sender], \"Balance not allowed\");\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n        _burn(account, amount);\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"address\"},{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokenByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfDrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"randomEntries\",\"type\":\"address[]\"}],\"name\":\"pickWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findPointFivePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BIDCOIN","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}