{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ninterface IConditionalTokens {\r\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\r\n}\r\n\r\ninterface IRealitio {\r\n    function getContentHash(bytes32 questionId) external view returns (bytes32);\r\n    function getOpeningTS(bytes32 questionId) external view returns (uint32);\r\n    function resultFor(bytes32 questionId) external view returns (bytes32);\r\n}\r\n\r\ncontract RealitioProxy {\r\n  IConditionalTokens public conditionalTokens;\r\n  IRealitio public realitio;\r\n  uint256 public nuancedBinaryTemplateId;\r\n\r\n  constructor(\r\n    IConditionalTokens _conditionalTokens,\r\n    IRealitio _realitio,\r\n    uint256 _nuancedBinaryTemplateId\r\n  ) public {\r\n    conditionalTokens = _conditionalTokens;\r\n    realitio = _realitio;\r\n    nuancedBinaryTemplateId = _nuancedBinaryTemplateId;\r\n  }\r\n\r\n  function resolve(\r\n    bytes32 questionId,\r\n    uint256 templateId,\r\n    string calldata question,\r\n    uint256 numOutcomes\r\n  ) external {\r\n    // check that the given templateId and question match the questionId\r\n    bytes32 contentHash = keccak256(abi.encodePacked(templateId, realitio.getOpeningTS(questionId), question));\r\n    require(contentHash == realitio.getContentHash(questionId), \"Content hash mismatch\");\r\n\r\n    uint256[] memory payouts;\r\n\r\n    if (templateId == 0 || templateId == 2) {\r\n      // binary or single-select\r\n      payouts = getSingleSelectPayouts(questionId, numOutcomes);\r\n    } else if (templateId == nuancedBinaryTemplateId) {\r\n      payouts = getNuancedBinaryPayouts(questionId, numOutcomes);\r\n    } else {\r\n      revert(\"Unknown templateId\");\r\n    }\r\n\r\n    conditionalTokens.reportPayouts(questionId, payouts);\r\n  }\r\n\r\n  function getSingleSelectPayouts(bytes32 questionId, uint256 numOutcomes) internal view returns (uint256[] memory) {\r\n    uint256[] memory payouts = new uint256[](numOutcomes);\r\n\r\n    uint256 answer = uint256(realitio.resultFor(questionId));\r\n\r\n    if (answer == uint256(-1)) {\r\n      for (uint256 i = 0; i < numOutcomes; i++) {\r\n        payouts[i] = 1;\r\n      }\r\n    } else {\r\n      require(answer < numOutcomes, \"Answer must be between 0 and numOutcomes\");\r\n      payouts[answer] = 1;\r\n    }\r\n\r\n    return payouts;\r\n  }\r\n\r\n  function getNuancedBinaryPayouts(bytes32 questionId, uint256 numOutcomes) internal view returns (uint256[] memory) {\r\n    require(numOutcomes == 2, \"Number of outcomes expected to be 2\");\r\n    uint256[] memory payouts = new uint256[](2);\r\n\r\n    uint256 answer = uint256(realitio.resultFor(questionId));\r\n\r\n    if (answer == uint256(-1)) {\r\n      payouts[0] = 1;\r\n      payouts[1] = 1;\r\n    } else {\r\n      require(answer < 5, \"Answer must be between 0 and 4\");\r\n      payouts[0] = 4 - answer;\r\n      payouts[1] = answer;\r\n    }\r\n\r\n    return payouts;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IRealitio\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nuancedBinaryTemplateId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nuancedBinaryTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealitio\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numOutcomes\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RealitioProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c59b0e4de5f1248c1140964e0ff287b192407e0c000000000000000000000000325a2e0f3cca2ddbaebb4dfc38df8d19ca165b470000000000000000000000000000000000000000000000000000000000000006","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://2a8da174488687318b64d852ba9d67483e06fafcf663351965d792868927de7e"}]}