{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title The MORIART ROUND 2 contracts concept.\r\n * @author www.grox.solutions\r\n */\r\n\r\npragma solidity 0.5.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MORIART_2 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public ONE_HUNDRED   = 10000;\r\n    uint256 constant public ENTER_FEE     = 1000;\r\n    uint256 constant public FINAL_WAVE    = 1500;\r\n    uint256 constant public ONE_DAY       = 1 days;\r\n    uint256 constant public MINIMUM       = 0.1 ether;\r\n    uint16[5] public refPercent           = [400, 300, 200, 100, 0];\r\n    uint256 public EXIT_FEE_1             = 1000;\r\n    uint256 public EXIT_FEE_2             = 2000;\r\n\r\n    uint256 constant public REF_TRIGGER   = 0 ether;\r\n    uint256 constant public REIN_TRIGGER  = 0.00000333 ether;\r\n    uint256 constant public EXIT_TRIGGER  = 0.00000777 ether;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        address referrer;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    address payable public admin = 0x9C14a7882f635acebbC7f0EfFC0E2b78B9Aa4858;\r\n\r\n    uint256 public maxBalance;\r\n\r\n    uint256 public start = 1584662400;\r\n\r\n    mapping (uint256 => int256) week;\r\n    uint256 period = 7 days;\r\n\r\n    bool public finalized;\r\n\r\n    event InvestorAdded(address indexed investor);\r\n    event ReferrerAdded(address indexed investor, address indexed referrer);\r\n    event DepositAdded(address indexed investor, uint256 amount);\r\n    event Withdrawn(address indexed investor, uint256 amount);\r\n    event RefBonusAdded(address indexed investor, address indexed referrer, uint256 amount, uint256 indexed level);\r\n    event RefBonusPayed(address indexed investor, uint256 amount);\r\n    event Reinvested(address indexed investor, uint256 amount);\r\n    event Finalized(uint256 amount);\r\n    event GasRefund(uint256 amount);\r\n\r\n    modifier notOnPause() {\r\n        require(block.timestamp >= start && !finalized);\r\n        _;\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value == REF_TRIGGER) {\r\n            withdrawBonus();\r\n        } else if (msg.value == EXIT_TRIGGER) {\r\n            msg.sender.transfer(msg.value);\r\n            exit();\r\n        } else if (msg.value == REIN_TRIGGER) {\r\n            msg.sender.transfer(msg.value);\r\n            reinvest();\r\n        } else {\r\n            invest();\r\n        }\r\n    }\r\n\r\n    function invest() public payable notOnPause {\r\n        require(msg.value >= MINIMUM);\r\n        admin.transfer(msg.value * ENTER_FEE / ONE_HUNDRED);\r\n\r\n        users[msg.sender].deposits.push(Deposit(msg.value, block.timestamp));\r\n\r\n        if (users[msg.sender].referrer != address(0)) {\r\n            _refSystem(msg.sender);\r\n        } else if (msg.data.length == 20) {\r\n            _addReferrer(msg.sender, _bytesToAddress(bytes(msg.data)));\r\n        }\r\n\r\n        if (users[msg.sender].deposits.length == 1) {\r\n            emit InvestorAdded(msg.sender);\r\n        }\r\n\r\n        if (address(this).balance > maxBalance) {\r\n            maxBalance = address(this).balance;\r\n        }\r\n\r\n        week[_getIndex()] += int256(msg.value);\r\n\r\n        emit DepositAdded(msg.sender, msg.value);\r\n    }\r\n\r\n    function reinvest() public notOnPause {\r\n\r\n        uint256 deposit = getDeposits(msg.sender);\r\n        uint256 compensation = 70000 * tx.gasprice;\r\n        uint256 profit = getProfit(msg.sender);\r\n        uint256 amount = profit.add(getRefBonus(msg.sender)).sub(compensation);\r\n\r\n        delete users[msg.sender].deposits;\r\n        if (users[msg.sender].bonus > 0) {\r\n            users[msg.sender].bonus = 0;\r\n        }\r\n\r\n        users[msg.sender].deposits.push(Deposit(deposit + amount, block.timestamp));\r\n\r\n        week[_getIndex()] += int256(profit);\r\n\r\n        emit Reinvested(msg.sender, amount);\r\n\r\n        _refund(compensation);\r\n\r\n    }\r\n\r\n    function reinvestProfit() public notOnPause {\r\n\r\n        uint256 deposit = getDeposits(msg.sender);\r\n        uint256 compensation = 70000 * tx.gasprice;\r\n        uint256 profit = getProfit(msg.sender);\r\n        uint256 amount = profit.sub(compensation);\r\n\r\n        delete users[msg.sender].deposits;\r\n\r\n        users[msg.sender].deposits.push(Deposit(deposit + amount, block.timestamp));\r\n\r\n        week[_getIndex()] += int256(profit);\r\n\r\n        emit Reinvested(msg.sender, amount);\r\n\r\n        _refund(compensation);\r\n\r\n    }\r\n\r\n    function reinvestBonus() public notOnPause {\r\n\r\n        uint256 compensation = 70000 * tx.gasprice;\r\n        uint256 bonus = getRefBonus(msg.sender);\r\n        uint256 amount = bonus.sub(compensation);\r\n\r\n        users[msg.sender].bonus = 0;\r\n\r\n        users[msg.sender].deposits.push(Deposit(amount, block.timestamp));\r\n\r\n        week[_getIndex()] += int256(bonus);\r\n\r\n        emit Reinvested(msg.sender, amount);\r\n\r\n        _refund(compensation);\r\n\r\n    }\r\n\r\n    function withdrawBonus() public {\r\n        uint256 payout = getRefBonus(msg.sender);\r\n\r\n        require(payout > 0);\r\n\r\n        users[msg.sender].bonus = 0;\r\n\r\n        bool onFinalizing;\r\n        if (payout > _getFinalWave()) {\r\n            payout = _getFinalWave();\r\n            onFinalizing = true;\r\n        }\r\n\r\n        msg.sender.transfer(payout);\r\n\r\n        week[_getIndex()] -= int256(payout);\r\n\r\n        emit RefBonusPayed(msg.sender, payout);\r\n\r\n        if (onFinalizing) {\r\n            _finalize();\r\n        }\r\n\r\n    }\r\n\r\n    function withdrawProfit() public {\r\n        uint256 payout = getProfit(msg.sender);\r\n\r\n        require(payout > 0);\r\n\r\n        for (uint256 i = 0; i < users[msg.sender].deposits.length; i++) {\r\n            users[msg.sender].deposits[i].time = block.timestamp;\r\n        }\r\n\r\n        bool onFinalizing;\r\n        if (payout > _getFinalWave()) {\r\n            payout = _getFinalWave();\r\n            onFinalizing = true;\r\n        }\r\n\r\n        msg.sender.transfer(payout);\r\n\r\n        week[_getIndex()] -= int256(payout);\r\n\r\n        emit RefBonusPayed(msg.sender, payout);\r\n\r\n        if (onFinalizing) {\r\n            _finalize();\r\n        }\r\n\r\n    }\r\n\r\n    function exit() public {\r\n        require(block.timestamp >= start + period);\r\n\r\n        uint256 deposit = getDeposits(msg.sender);\r\n        uint256 fee = getFee(msg.sender);\r\n        uint256 sum = deposit + getProfit(msg.sender) + getRefBonus(msg.sender);\r\n        uint256 payout = sum - fee;\r\n\r\n        require(sum >= MINIMUM);\r\n\r\n        bool onFinalizing;\r\n        if (sum > _getFinalWave()) {\r\n            payout = _getFinalWave();\r\n            onFinalizing = true;\r\n        } else {\r\n            admin.transfer(fee);\r\n        }\r\n\r\n        delete users[msg.sender];\r\n\r\n        msg.sender.transfer(payout);\r\n\r\n        week[_getIndex()] -= int256(payout);\r\n\r\n        emit Withdrawn(msg.sender, payout);\r\n\r\n        if (onFinalizing) {\r\n            _finalize();\r\n        }\r\n    }\r\n\r\n    function setRefPercent(uint16[5] memory newRefPercents) public {\r\n        require(msg.sender == admin);\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            require(newRefPercents[i] <= 1000);\r\n        }\r\n        refPercent = newRefPercents;\r\n    }\r\n\r\n    function setExitFee(uint256 fee_1, uint256 fee_2) public {\r\n        require(msg.sender == admin);\r\n        require(fee_1 <= 3000 && fee_2 <= 3000);\r\n        EXIT_FEE_1 = fee_1;\r\n        EXIT_FEE_2 = fee_2;\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory source) internal pure returns(address parsedReferrer) {\r\n        assembly {\r\n            parsedReferrer := mload(add(source,0x14))\r\n        }\r\n        return parsedReferrer;\r\n    }\r\n\r\n    function _addReferrer(address addr, address refAddr) internal {\r\n        if (refAddr != addr) {\r\n            users[addr].referrer = refAddr;\r\n\r\n            _refSystem(addr);\r\n            emit ReferrerAdded(addr, refAddr);\r\n        }\r\n    }\r\n\r\n    function _refSystem(address addr) internal {\r\n        address referrer = users[addr].referrer;\r\n\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            if (referrer != address(0)) {\r\n                uint256 amount = msg.value * refPercent[i] / ONE_HUNDRED;\r\n                users[referrer].bonus += amount;\r\n                emit RefBonusAdded(addr, referrer, amount, i + 1);\r\n                referrer = users[referrer].referrer;\r\n            } else break;\r\n        }\r\n    }\r\n\r\n    function _refund(uint256 amount) internal {\r\n        if (msg.sender.send(amount)) {\r\n            emit GasRefund(amount);\r\n        }\r\n    }\r\n\r\n    function _finalize() internal {\r\n        emit Finalized(address(this).balance);\r\n        admin.transfer(address(this).balance);\r\n        finalized = true;\r\n    }\r\n\r\n    function _getFinalWave() internal view returns(uint256) {\r\n        if (address(this).balance > maxBalance * FINAL_WAVE / ONE_HUNDRED) {\r\n            return address(this).balance.sub(maxBalance * FINAL_WAVE / ONE_HUNDRED);\r\n        }\r\n    }\r\n\r\n    function _getIndex() internal view returns(uint256) {\r\n        if (block.timestamp >= start) {\r\n            return (block.timestamp.sub(start)).div(period);\r\n        }\r\n    }\r\n\r\n    function getPercent() public view returns(uint256) {\r\n        if (block.timestamp >= start) {\r\n\r\n            uint256 count;\r\n            uint256 idx = _getIndex();\r\n\r\n            for (uint256 i = 0; i < idx; i++) {\r\n                if (week[i] >= int256(2 ether * (15**count) / (10**count))) {\r\n                    count++;\r\n                }\r\n            }\r\n\r\n            return 50e18 + 10e18 * count + 10e18 * (block.timestamp - (start + period * idx)) / period;\r\n        }\r\n    }\r\n\r\n    function getAvailable(address addr) public view returns(uint256) {\r\n        if (users[addr].deposits.length != 0) {\r\n            uint256 deposit = getDeposits(addr);\r\n\r\n            uint256 fee = getFee(addr);\r\n\r\n            uint256 payout = deposit - fee + getProfit(addr) + getRefBonus(addr);\r\n\r\n            return payout;\r\n        }\r\n    }\r\n\r\n    function getFee(address addr) public view returns(uint256) {\r\n        if (users[addr].deposits.length != 0) {\r\n            uint256 deposit = getDeposits(addr);\r\n\r\n            uint256 fee;\r\n            if (block.timestamp - users[addr].deposits[users[addr].deposits.length - 1].time < 30 * ONE_DAY) {\r\n                fee = deposit * EXIT_FEE_2 / ONE_HUNDRED;\r\n            } else {\r\n                fee = deposit * EXIT_FEE_1 / ONE_HUNDRED;\r\n            }\r\n\r\n            return fee;\r\n        }\r\n    }\r\n\r\n    function getDeposits(address addr) public view returns(uint256) {\r\n        uint256 sum;\r\n\r\n        for (uint256 i = 0; i < users[addr].deposits.length; i++) {\r\n            sum += users[addr].deposits[i].amount;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    function getDeposit(address addr, uint256 index) public view returns(uint256) {\r\n        return users[addr].deposits[index].amount;\r\n    }\r\n\r\n    function getProfit(address addr) public view returns(uint256) {\r\n        if (users[addr].deposits.length != 0) {\r\n            uint256 payout;\r\n            uint256 percent = getPercent();\r\n\r\n            for (uint256 i = 0; i < users[addr].deposits.length; i++) {\r\n                payout += (users[addr].deposits[i].amount * percent / 1e22) * (block.timestamp - users[addr].deposits[i].time) / ONE_DAY;\r\n            }\r\n\r\n            return payout;\r\n        }\r\n    }\r\n\r\n    function getRefBonus(address addr) public view returns(uint256) {\r\n        return users[addr].bonus;\r\n    }\r\n\r\n    function getNextDate() public view returns(uint256) {\r\n        return(start + ((_getIndex() + 1) * period));\r\n    }\r\n\r\n    function getCurrentTurnover() public view returns(int256) {\r\n        return week[_getIndex()];\r\n    }\r\n\r\n    function getTurnover(uint256 index) public view returns(int256) {\r\n        return week[index];\r\n    }\r\n\r\n    function getCurrentGoal() public view returns(int256) {\r\n        if (block.timestamp >= start) {\r\n            uint256 count;\r\n            uint256 idx = _getIndex();\r\n\r\n            for (uint256 i = 0; i < idx; i++) {\r\n                if (week[i] >= int256(2 ether * (15**count) / (10**count))) {\r\n                    count++;\r\n                }\r\n            }\r\n\r\n            return int256(2 ether * (15**count) / (10**count));\r\n        }\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"EXIT_FEE_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXIT_FEE_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FINAL_WAVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRefPercents\",\"type\":\"uint16[5]\"}],\"name\":\"setRefPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REIN_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee_1\",\"type\":\"uint256\"},{\"name\":\"fee_2\",\"type\":\"uint256\"}],\"name\":\"setExitFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENTER_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXIT_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvestProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REF_TRIGGER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RefBonusAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonusPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasRefund\",\"type\":\"event\"}]","ContractName":"MORIART_2","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c47e108d9e9d5b6b689fa0782ec065de7462686e9b62cac48b36d261dcca279b"}]}