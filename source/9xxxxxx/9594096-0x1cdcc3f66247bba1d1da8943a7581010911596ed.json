{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Project Society Construction and Terraforming Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka)\r\n *\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Core Blockchain Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka) by\r\n * [Basic Agreement](ipfs/QmaCiXUmSrP16Gz8Jdzq6AJESY1EAANmmwha15uR3c1bsS)).\r\n * \r\n * üåé Galt Project is an international decentralized land and real estate property registry\r\n * governed by DAO (Decentralized autonomous organization) and self-governance platform for communities\r\n * of homeowners on Ethereum.\r\n * \r\n * üè° https://galtproject.io\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\ncontract IPPDepositHolder {\r\n  event Deposit(address indexed tokenContract, uint256 indexed tokenId, uint256 amount);\r\n  event Withdrawal(address indexed tokenContract, uint256 indexed tokenId, uint256 total);\r\n  event Payout(address indexed tokenContract, uint256 indexed tokenId, uint256 amount, address to);\r\n\r\n  function deposit(address _tokenContract, uint256 _tokenId, uint256 _amount) external;\r\n  function withdraw(address _tokenContract, uint256 _tokenId) external;\r\n  function payout(address _tokenContract, uint256 _tokenId, address _to) external;\r\n  function balanceOf(address _tokenContract, uint256 _tokenId) external view returns (uint256);\r\n  function isInsufficient(address _tokenContract, uint256 _tokenId, uint256 _minimalDeposit)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\ninterface IPPTokenController {\r\n  event Mint(address indexed to, uint256 indexed tokenId);\r\n  event SetGeoDataManager(address indexed geoDataManager);\r\n  event SetContourVerificationManager(address indexed contourVerificationManager);\r\n  event SetFeeManager(address indexed feeManager);\r\n  event SetFeeCollector(address indexed feeCollector);\r\n  event ReportCVMisbehaviour(uint256 tokenId);\r\n  event NewProposal(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId,\r\n    address indexed creator\r\n  );\r\n  event ProposalExecuted(uint256 indexed proposalId);\r\n  event ProposalExecutionFailed(uint256 indexed proposalId);\r\n  event ProposalApproval(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalRejection(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalCancellation(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event SetMinter(address indexed minter);\r\n  event SetBurner(address indexed burner);\r\n  event SetBurnTimeout(uint256 indexed tokenId, uint256 timeout);\r\n  event InitiateTokenBurn(uint256 indexed tokenId, uint256 timeoutAt);\r\n  event BurnTokenByTimeout(uint256 indexed tokenId);\r\n  event CancelTokenBurn(uint256 indexed tokenId);\r\n  event SetFee(bytes32 indexed key, uint256 value);\r\n  event WithdrawEth(address indexed to, uint256 amount);\r\n  event WithdrawErc20(address indexed to, address indexed tokenAddress, uint256 amount);\r\n  event UpdateContourUpdatedAt(uint256 indexed tokenId, uint256 timestamp);\r\n  event UpdateDetailsUpdatedAt(uint256 indexed tokenId, uint256 timestamp);\r\n\r\n  enum PropertyInitialSetupStage {\r\n    PENDING,\r\n    DETAILS,\r\n    DONE\r\n  }\r\n\r\n  function contourVerificationManager() external view returns (address);\r\n  function fees(bytes32) external view returns (uint256);\r\n  function setBurner(address _burner) external;\r\n  function setGeoDataManager(address _geoDataManager) external;\r\n  function setFeeManager(address _feeManager) external;\r\n  function setFeeCollector(address _feeCollector) external;\r\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external;\r\n  function setFee(bytes32 _key, uint256 _value) external;\r\n  function withdrawErc20(address _tokenAddress, address _to) external;\r\n  function withdrawEth(address payable _to) external;\r\n  function initiateTokenBurn(uint256 _tokenId) external;\r\n  function cancelTokenBurn(uint256 _tokenId) external;\r\n  function burnTokenByTimeout(uint256 _tokenId) external;\r\n  function reportCVMisbehaviour(uint256 _tokenId) external;\r\n  function propose(bytes calldata _data, string calldata _dataLink) external payable;\r\n  function approve(uint256 _proposalId) external;\r\n  function execute(uint256 _proposalId) external;\r\n  function fetchTokenId(bytes calldata _data) external pure returns (uint256 tokenId);\r\n  function() external payable;\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ninterface IPPToken {\r\n  event SetBaseURI(string baseURI);\r\n  event SetContractDataLink(string indexed dataLink);\r\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\r\n  event SetController(address indexed controller);\r\n  event SetDetails(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetContour(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetHumanAddress(uint256 indexed tokenId, string humanAddress);\r\n  event SetDataLink(uint256 indexed tokenId, string dataLink);\r\n  event SetLedgerIdentifier(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexRootHash(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexStorageLink(uint256 indexed tokenId, string vertexStorageLink);\r\n  event SetArea(uint256 indexed tokenId, uint256 area, AreaSource areaSource);\r\n  event SetExtraData(bytes32 indexed key, bytes32 value);\r\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\r\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\r\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\r\n\r\n  enum AreaSource {\r\n    USER_INPUT,\r\n    CONTRACT\r\n  }\r\n\r\n  enum TokenType {\r\n    NULL,\r\n    LAND_PLOT,\r\n    BUILDING,\r\n    ROOM,\r\n    PACKAGE\r\n  }\r\n\r\n  struct Property {\r\n    uint256 setupStage;\r\n\r\n    // (LAND_PLOT,BUILDING,ROOM) Type cannot be changed after token creation\r\n    TokenType tokenType;\r\n    // Geohash5z (x,y,z)\r\n    uint256[] contour;\r\n    // Meters above the sea\r\n    int256 highestPoint;\r\n\r\n    // USER_INPUT or CONTRACT\r\n    AreaSource areaSource;\r\n    // Calculated either by contract (for land plots and buildings) or by manual input\r\n    // in sq. meters (1 sq. meter == 1 eth)\r\n    uint256 area;\r\n\r\n    bytes32 ledgerIdentifier;\r\n    string humanAddress;\r\n    string dataLink;\r\n\r\n    // Reserved for future use\r\n    bytes32 vertexRootHash;\r\n    string vertexStorageLink;\r\n  }\r\n\r\n  // PERMISSIONED METHODS\r\n\r\n  function setContractDataLink(string calldata _dataLink) external;\r\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\r\n  function setController(address payable _controller) external;\r\n  function setDetails(\r\n    uint256 _tokenId,\r\n    TokenType _tokenType,\r\n    AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink\r\n  )\r\n    external;\r\n\r\n  function setContour(\r\n    uint256 _tokenId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external;\r\n\r\n  function setArea(uint256 _tokenId, uint256 _area, AreaSource _areaSource) external;\r\n  function setLedgerIdentifier(uint256 _tokenId, bytes32 _ledgerIdentifier) external;\r\n  function setDataLink(uint256 _tokenId, string calldata _dataLink) external;\r\n  function setVertexRootHash(uint256 _tokenId, bytes32 _vertexRootHash) external;\r\n  function setVertexStorageLink(uint256 _tokenId, string calldata _vertexStorageLink) external;\r\n  function setExtraData(bytes32 _key, bytes32 _value) external;\r\n  function setPropertyExtraData(uint256 _tokenId, bytes32 _key, bytes32 _value) external;\r\n\r\n  function incrementSetupStage(uint256 _tokenId) external;\r\n\r\n  function mint(address _to) external returns (uint256);\r\n  function burn(uint256 _tokenId) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  // GETTERS\r\n  function controller() external view returns (address payable);\r\n  function extraData(bytes32 _key) external view returns (bytes32);\r\n  function propertyExtraData(uint256 _tokenId, bytes32 _key) external view returns (bytes32);\r\n  function propertyCreatedAt(uint256 _tokenId) external view returns (uint256);\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function exists(uint256 _tokenId) external view returns (bool);\r\n  function getType(uint256 _tokenId) external view returns (TokenType);\r\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\r\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\r\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\r\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\r\n  function getArea(uint256 _tokenId) external view returns (uint256);\r\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\r\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\r\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\r\n  function getVertexRootHash(uint256 _tokenId) external view returns (bytes32);\r\n  function getVertexStorageLink(uint256 _tokenId) external view returns (string memory);\r\n  function getSetupStage(uint256 _tokenId) external view returns (uint256);\r\n  function getDetails(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (\r\n      TokenType tokenType,\r\n      uint256[] memory contour,\r\n      int256 highestPoint,\r\n      AreaSource areaSource,\r\n      uint256 area,\r\n      bytes32 ledgerIdentifier,\r\n      string memory humanAddress,\r\n      string memory dataLink,\r\n      uint256 setupStage,\r\n      bytes32 vertexRootHash,\r\n      string memory vertexStorageLink\r\n    );\r\n}\r\n\r\ninterface IPPTokenRegistry {\r\n  event AddToken(address indexed token, address indexed owener, address indexed factory);\r\n  event SetFactory(address factory);\r\n  event SetLockerRegistry(address lockerRegistry);\r\n\r\n  function tokenList(uint256 _index) external view returns (address);\r\n  function isValid(address _tokenContract) external view returns (bool);\r\n  function requireValidToken(address _token) external view;\r\n  function addToken(address _privatePropertyToken) external;\r\n  function getAllTokens() external view returns (address[] memory);\r\n}\r\n\r\ninterface IACL {\r\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\r\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\r\n}\r\n\r\ninterface IPPGlobalRegistry {\r\n  function setContract(bytes32 _key, address _value) external;\r\n\r\n  // GETTERS\r\n  function getContract(bytes32 _key) external view returns (address);\r\n  function getACL() external view returns (IACL);\r\n  function getGaltTokenAddress() external view returns (address);\r\n  function getPPTokenRegistryAddress() external view returns (address);\r\n  function getPPLockerRegistryAddress() external view returns (address);\r\n  function getPPMarketAddress() external view returns (address);\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates if the contract has been initialized.\r\n   */\r\n  bool public initialized;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   */\r\n  modifier isInitializer() {\r\n    require(!initialized, \"Contract instance has already been initialized\");\r\n    _;\r\n    initialized = true;\r\n  }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract OwnableAndInitializable is Ownable, Initializable {\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   */\r\n  modifier isInitializer() {\r\n    require(!initialized, \"Contract instance has already been initialized\");\r\n    _;\r\n    initialized = true;\r\n    _transferOwnership(tx.origin);\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract. Allow a custom owner setup;\r\n   */\r\n  modifier initializeWithOwner(address _owner) {\r\n    require(!initialized, \"Contract instance has already been initialized\");\r\n    _;\r\n    initialized = true;\r\n    _transferOwnership(_owner);\r\n  }\r\n}\r\n\r\ncontract ACL is IACL, OwnableAndInitializable {\r\n  event SetRole(bytes32 indexed role, address indexed candidate, bool allowed);\r\n\r\n  // Mapping (roleName => (address => isAllowed))\r\n  mapping(bytes32 => mapping(address => bool)) _roles;\r\n\r\n  function initialize() external isInitializer {\r\n  }\r\n\r\n  /**\r\n   * @notice Sets role permissions.\r\n   *\r\n   * @param _role bytes32 encoded role name\r\n   * @param _candidate address\r\n   * @param _allow true to enable, false to disable\r\n   */\r\n  function setRole(bytes32 _role, address _candidate, bool _allow) external onlyOwner {\r\n    _roles[_role][_candidate] = _allow;\r\n    emit SetRole(_role, _candidate, _allow);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if a candidate has a role.\r\n   *\r\n   * @param _candidate address\r\n   * @param _role bytes32 encoded role name\r\n   * @return bool whether a user has the role assigned or not\r\n   */\r\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool) {\r\n    return _roles[_role][_candidate];\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract PPDepositHolder is IPPDepositHolder {\r\n  using SafeMath for uint256;\r\n\r\n  IPPGlobalRegistry public globalRegistry;\r\n\r\n  // TokenContract => (tokenId => amount))\r\n  mapping(address => mapping(uint256 => uint256)) internal deposits;\r\n\r\n  modifier onlyValidTokenContract(address _tokenContract) {\r\n    IPPTokenRegistry(globalRegistry.getPPTokenRegistryAddress()).requireValidToken(address(_tokenContract));\r\n    _;\r\n  }\r\n\r\n  constructor(IPPGlobalRegistry _globalRegistry) public {\r\n    globalRegistry = _globalRegistry;\r\n  }\r\n\r\n  // anyone can deposit\r\n  function deposit(address _tokenContract, uint256 _tokenId, uint256 _amount)\r\n    external\r\n    onlyValidTokenContract(_tokenContract)\r\n  {\r\n    require(IPPToken(_tokenContract).exists(_tokenId) == true, \"Token doesn't exists\");\r\n\r\n    // deposits[_tokenContract][_tokenId] += _amount;\r\n    deposits[_tokenContract][_tokenId] = deposits[_tokenContract][_tokenId].add(_amount);\r\n\r\n    IERC20(globalRegistry.getGaltTokenAddress())\r\n      .transferFrom(msg.sender, address(this), _amount);\r\n\r\n    emit Deposit(_tokenContract, _tokenId, _amount);\r\n  }\r\n\r\n  // @dev user withdraws his deposit back, withdraws total amount\r\n  function withdraw(address _tokenContract, uint256 _tokenId) external {\r\n    require(msg.sender == IPPToken(_tokenContract).ownerOf(_tokenId), \"Not the token owner\");\r\n\r\n    uint256 balance = deposits[_tokenContract][_tokenId];\r\n\r\n    require(balance > 0, \"Deposit is 0\");\r\n\r\n    deposits[_tokenContract][_tokenId] = 0;\r\n\r\n    IERC20(globalRegistry.getGaltTokenAddress())\r\n      .transfer(msg.sender, balance);\r\n\r\n    emit Withdrawal(_tokenContract, _tokenId, balance);\r\n  }\r\n\r\n  // @dev ContourVerifier claims to payout a deposit in order to reward a fisherman\r\n  function payout(address _tokenContract, uint256 _tokenId, address _to)\r\n    external\r\n    onlyValidTokenContract(_tokenContract)\r\n  {\r\n    require(\r\n      msg.sender == IPPTokenController(IPPToken(_tokenContract).controller()).contourVerificationManager(),\r\n      \"Only valid verificationManager allowed\"\r\n    );\r\n\r\n    uint256 balance = deposits[_tokenContract][_tokenId];\r\n\r\n    require(balance > 0, \"Deposit is 0\");\r\n\r\n    deposits[_tokenContract][_tokenId] = 0;\r\n\r\n    IERC20(globalRegistry.getGaltTokenAddress())\r\n      .transfer(_to, balance);\r\n\r\n    emit Payout(_tokenContract, _tokenId, balance, _to);\r\n  }\r\n\r\n  function isInsufficient(address _tokenContract, uint256 _tokenId, uint256 _minimalDeposit)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return (deposits[_tokenContract][_tokenId] >= _minimalDeposit);\r\n  }\r\n\r\n  function balanceOf(address _tokenContract, uint256 _tokenId) external view returns (uint256) {\r\n    return deposits[_tokenContract][_tokenId];\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"_globalRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalRegistry\",\"outputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimalDeposit\",\"type\":\"uint256\"}],\"name\":\"isInsufficient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPDepositHolder","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000002d05d7dfbe60af0b4e55856820321253f04b379","Library":"","LicenseType":"None","SwarmSource":"bzzr://af9bdbfd24bd4699ca00ce197acdd7f2468251c072fb2c8b2c619505391ccf52"}]}