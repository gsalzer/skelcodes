{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface publicCalls {\r\n  function setOwnerTokenService (  ) external;\r\n  function tokenCreatedSet ( address _address, address _tokenCreated ) external;\r\n  function tokenICOCreatedSet ( address _address, address _tokenICOCreated ) external;\r\n  function amountOfMNEForToken (  ) external view returns ( uint256 );\r\n  function amountOfMNEForTokenICO (  ) external view returns ( uint256 );\r\n  function ethFeeForToken (  ) external view returns ( uint256 );\r\n  function ethFeeForTokenICO (  ) external view returns ( uint256 );  \r\n  function tokenWithoutICOCount (  ) external view returns ( uint256 );\r\n  function tokenICOCount (  ) external view returns ( uint256 );  \r\n  function tokenWithoutICOCountSet ( uint256 _tokenWithoutICOCount ) external;\r\n  function tokenICOCountSet ( uint256 _tokenICOCount ) external;\r\n}\r\n\r\ninterface genesis {\r\n  function availableBalanceOf ( address _address ) external view returns ( uint256 Balance );  \r\n}\r\n\r\ncontract tokenService\r\n{\r\n\t\r\naddress public ownerMain = 0x0000000000000000000000000000000000000000;\t\r\naddress public updaterAddress = 0x0000000000000000000000000000000000000000;\r\nfunction setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}\r\nfunction updaterSetOwnerMain(address _address) public {if (tx.origin == updaterAddress) ownerMain = _address; else revert();}\r\n\r\nfunction setOwnerMain() public {\r\n\tif (tx.origin == updaterAddress)\r\n\t\townerMain = msg.sender;\r\n\telse\r\n\t\trevert();\r\n}\r\n\r\nmodifier onlyOwner(){\r\n    require(msg.sender == ownerMain);\r\n     _;\r\n}\r\n\r\npublicCalls public pc;\r\ngenesis public gn;\r\n\t\r\nconstructor(address _publicCallsAddress, address _genesisAddress) public {\r\nsetUpdater();\r\npc = publicCalls(_publicCallsAddress);\r\npc.setOwnerTokenService();\r\ngn = genesis(_genesisAddress);\r\n}\r\n\r\nfunction reloadGenesis(address _address) public\r\n{\r\n\tif (msg.sender == updaterAddress)\r\n\t{\r\n\t\tgn = genesis(_address);\t\t\r\n\t}\r\n\telse revert();\r\n}\r\n\r\nfunction reloadPublicCalls(address _address, uint code) public { if (!(code == 1234)) revert();  if (msg.sender == updaterAddress)\t{pc = publicCalls(_address); pc.setOwnerTokenService();} else revert();}\r\n\r\nevent CreateTokenHistory(address indexed _owner, address indexed _address);\r\nevent CreateTokenICOHistory(address indexed _owner, address indexed _address);\r\n\r\nfunction CreateToken(address _from, uint256 _msgvalue) public onlyOwner returns (uint256 _mneToBurn, address _address) {\r\n\tuint256 mneToBurn = pc.amountOfMNEForToken();\r\n\t\t\r\n\tif (!(gn.availableBalanceOf(_from) >= mneToBurn)) revert('(!(gn.availableBalanceOf(_from) >= mneToBurn))');\t\r\n\t\r\n\tuint256 feesToPayToContract = pc.ethFeeForToken();\r\n\tuint256 feesToPayToSeller = 0;\r\n\tuint256 feesGeneralToPayToContract = (feesToPayToContract + feesToPayToSeller) * 0;\r\n\t\t\r\n\tuint256 totalToSend = feesToPayToContract + feesToPayToSeller + feesGeneralToPayToContract;\r\n\t\r\n\tif (!(_msgvalue == totalToSend)) revert('(!(_msgvalue == totalToSend))');\r\n\t\r\n\tToken token = new Token(_from);\r\n\tpc.tokenCreatedSet(_from, address(token));\r\n\temit CreateTokenHistory(_from, address(token));\r\n\tpc.tokenWithoutICOCountSet(pc.tokenWithoutICOCount() + 1);\r\n\treturn (mneToBurn, address(token));\r\n}\r\n\r\nfunction CreateTokenICO(address _from, uint256 _msgvalue) public onlyOwner returns (uint256 _mneToBurn, address _address) {\r\n\t/*uint256 mneToBurn = pc.amountOfMNEForTokenICO();\r\n\t\r\n\tif (!(gn.availableBalanceOf(_from) >= mneToBurn)) revert('(!(gn.availableBalanceOf(_from) >= mneToBurn))');\t\r\n\t\r\n\tuint256 feesToPayToContract = pc.ethFeeForTokenICO();\r\n\tuint256 feesToPayToSeller = 0;\r\n\tuint256 feesGeneralToPayToContract = (feesToPayToContract + feesToPayToSeller) * 0;\r\n\t\t\r\n\tuint256 totalToSend = feesToPayToContract + feesToPayToSeller + feesGeneralToPayToContract;\r\n\t\r\n\tif (!(_msgvalue == totalToSend)) revert('(!(_msgvalue == totalToSend))');\r\n\t\r\n\tTokenICO token = new TokenICO(payable(_from));\r\n\tpc.tokenICOCreatedSet(_from, address(token));\r\n\temit CreateTokenICOHistory(_from, address(token));\r\n\tpc.tokenICOCountSet(pc.tokenICOCount() + 1);\r\n\treturn (mneToBurn, address(token));*/\r\n\treturn (0, 0x0000000000000000000000000000000000000000);\r\n}\r\n}\r\n\r\ncontract Token {\r\n    string public symbol = \"\";\r\n    string public name = \"\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 _totalSupply = 0;\r\n    address owner = 0x0000000000000000000000000000000000000000;\r\n    bool setupDone = false;\r\n   \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n \r\n    mapping(address => uint256) balances;\r\n \r\n    mapping(address => mapping (address => uint256)) allowed;\r\n \r\n    constructor(address adr) public {\r\n        owner = adr;        \r\n    }\r\n   \r\n    function SetupToken(string memory tokenName, string memory tokenSymbol, uint256 tokenSupply) public\r\n    {\r\n        if (msg.sender == owner && setupDone == false)\r\n        {\r\n            symbol = tokenSymbol;\r\n            name = tokenName;\r\n            _totalSupply = tokenSupply * 1000000000000000000;\r\n            balances[owner] = _totalSupply;\r\n            setupDone = true;\r\n        }\r\n    }\r\n \r\n    function totalSupply() public view returns (uint256 totalSupply) {        \r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    )  public returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract TokenICO {\r\n    string public symbol = \"\";\r\n    string public name = \"\";\r\n    uint8 public constant decimals = 18;\r\n\tstring public constant ICOFactoryVersion = \"1.0\";\r\n    uint256 _totalSupply = 0;\r\n\tuint256 _oneEtherEqualsInWei = 0;\t\r\n\tuint256 _maxICOpublicSupply = 0;\r\n\tuint256 _ownerICOsupply = 0;\r\n\tuint256 _currentICOpublicSupply = 0;\r\n\tuint256 _blockICOdatetime = 0;\r\n\taddress payable _ICOfundsReceiverAddress = 0x0000000000000000000000000000000000000000;\r\n\taddress _remainingTokensReceiverAddress = 0x0000000000000000000000000000000000000000;\r\n    address payable owner = 0x0000000000000000000000000000000000000000;\t\r\n    bool setupDone = false;\r\n\tbool isICOrunning = false;\r\n\tbool ICOstarted = false;\r\n\tuint256 ICOoverTimestamp = 0;\r\n   \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Burn(address indexed _owner, uint256 _value);\r\n \r\n    mapping(address => uint256) balances;\r\n \r\n    mapping(address => mapping (address => uint256)) allowed;\r\n \r\n    constructor(address payable adr) public {\r\n        owner = adr;        \r\n    }\r\n\t\r\n\treceive() external payable\r\n\t{\r\n\t\tif ((isICOrunning && _blockICOdatetime == 0) || (isICOrunning && _blockICOdatetime > 0 && now <= _blockICOdatetime))\r\n\t\t{\r\n\t\t\tuint256 _amount = ((msg.value * _oneEtherEqualsInWei) / 1000000000000000000);\r\n\t\t\t\r\n\t\t\tif (((_currentICOpublicSupply + _amount) > _maxICOpublicSupply) && _maxICOpublicSupply > 0) revert();\r\n\t\t\t\r\n\t\t\tif(!_ICOfundsReceiverAddress.send(msg.value)) revert();\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t_currentICOpublicSupply += _amount;\r\n\t\t\t\r\n\t\t\tbalances[msg.sender] += _amount;\r\n\t\t\t\r\n\t\t\t_totalSupply += _amount;\t\t\t\r\n\t\t\t\r\n\t\t\temit Transfer(address(this), msg.sender, _amount);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n   \r\n    function SetupToken(string memory tokenName, string memory tokenSymbol, uint256 oneEtherEqualsInWei, uint256 maxICOpublicSupply, uint256 ownerICOsupply, address remainingTokensReceiverAddress, address payable ICOfundsReceiverAddress, uint256 blockICOdatetime) public\r\n    {\r\n        if (msg.sender == owner && !setupDone)\r\n        {\r\n            symbol = tokenSymbol;\r\n            name = tokenName;\r\n\t\t\t_oneEtherEqualsInWei = oneEtherEqualsInWei;\r\n\t\t\t_maxICOpublicSupply = maxICOpublicSupply * 1000000000000000000;\t\t\t\t\t\t\t\t\t\r\n\t\t\tif (ownerICOsupply > 0)\r\n\t\t\t{\r\n\t\t\t\t_ownerICOsupply = ownerICOsupply * 1000000000000000000;\r\n\t\t\t\t_totalSupply = _ownerICOsupply;\r\n\t\t\t\tbalances[owner] = _totalSupply;\r\n\t\t\t\temit Transfer(address(this), owner, _totalSupply);\r\n\t\t\t}\t\t\t\r\n\t\t\t_ICOfundsReceiverAddress = ICOfundsReceiverAddress;\r\n\t\t\tif (_ICOfundsReceiverAddress == 0x0000000000000000000000000000000000000000) _ICOfundsReceiverAddress = owner;\r\n\t\t\t_remainingTokensReceiverAddress = remainingTokensReceiverAddress;\r\n\t\t\t_blockICOdatetime = blockICOdatetime;\t\t\t\r\n            setupDone = true;\r\n        }\r\n    }\r\n\t\r\n\tfunction StartICO() public returns (bool success)\r\n    {\r\n        if (msg.sender == owner && !ICOstarted && setupDone)\r\n        {\r\n            ICOstarted = true;\t\t\t\r\n\t\t\tisICOrunning = true;\t\t\t\r\n        }\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction StopICO() public returns (bool success)\r\n    {\r\n        if (msg.sender == owner && isICOrunning)\r\n        {            \r\n\t\t\tif (_remainingTokensReceiverAddress != 0x0000000000000000000000000000000000000000 && _maxICOpublicSupply > 0)\r\n\t\t\t{\r\n\t\t\t\tuint256 _remainingAmount = _maxICOpublicSupply - _currentICOpublicSupply;\r\n\t\t\t\tif (_remainingAmount > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tbalances[_remainingTokensReceiverAddress] += _remainingAmount;\r\n\t\t\t\t\t_totalSupply += _remainingAmount;\r\n\t\t\t\t\temit Transfer(address(this), _remainingTokensReceiverAddress, _remainingAmount);\t\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\t\r\n\t\t\tisICOrunning = false;\t\r\n\t\t\tICOoverTimestamp = now;\r\n        }\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n\t\r\n\tfunction BurnTokens(uint256 amountInWei) public returns (bool success)\r\n    {\r\n\t\tif (balances[msg.sender] >= amountInWei)\r\n\t\t{\r\n\t\t\tbalances[msg.sender] -= amountInWei;\r\n\t\t\t_totalSupply -= amountInWei;\r\n\t\t\temit Burn(msg.sender, amountInWei);\r\n\t\t\temit Transfer(msg.sender, 0x0000000000000000000000000000000000000000, amountInWei);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trevert();\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n \r\n    function totalSupply() public view returns (uint256 totalSupplyValue) {        \r\n        return _totalSupply;\r\n    }\r\n\t\r\n\tfunction OneEtherEqualsInWei() public view returns (uint256 oneEtherEqualsInWei) {        \r\n        return _oneEtherEqualsInWei;\r\n    }\r\n\t\r\n\tfunction MaxICOpublicSupply() public view returns (uint256 maxICOpublicSupply) {        \r\n        return _maxICOpublicSupply;\r\n    }\r\n\t\r\n\tfunction OwnerICOsupply() public view returns (uint256 ownerICOsupply) {        \r\n        return _ownerICOsupply;\r\n    }\r\n\t\r\n\tfunction CurrentICOpublicSupply() public view returns (uint256 currentICOpublicSupply) {        \r\n        return _currentICOpublicSupply;\r\n    }\r\n\t\r\n\tfunction RemainingTokensReceiverAddress() public view returns (address remainingTokensReceiverAddress) {        \r\n        return _remainingTokensReceiverAddress;\r\n    }\r\n\t\r\n\tfunction ICOfundsReceiverAddress() public view returns (address ICOfundsReceiver) {        \r\n        return _ICOfundsReceiverAddress;\r\n    }\r\n\t\r\n\tfunction Owner() public view returns (address ownerAddress) {        \r\n        return owner;\r\n    }\r\n\t\r\n\tfunction SetupDone() public view returns (bool setupDoneFlag) {        \r\n        return setupDone;\r\n    }\r\n    \r\n\tfunction IsICOrunning() public view returns (bool isICOrunningFalg) {        \r\n        return isICOrunning;\r\n    }\r\n\t\r\n\tfunction IsICOstarted() public view returns (bool isICOstartedFlag) {        \r\n        return ICOstarted;\r\n    }\r\n\t\r\n\tfunction ICOoverTimeStamp() public view returns (uint256 ICOoverTimestampCheck) {        \r\n        return ICOoverTimestamp;\r\n    }\r\n\t\r\n\tfunction BlockICOdatetime() public view returns (uint256 blockStopICOdate) {        \r\n        return _blockICOdatetime;\r\n    }\r\n\t\r\n\tfunction TimeNow() public view returns (uint256 timenow) {        \r\n        return now;\r\n    }\r\n\t \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        if (balances[msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public returns (bool success) {\r\n        if (balances[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0\r\n            && balances[_to] + _amount > balances[_to]) {\r\n            balances[_from] -= _amount;\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balances[_to] += _amount;\r\n            emit Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_publicCallsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_genesisAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"CreateTokenHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"CreateTokenICOHistory\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_msgvalue\",\"type\":\"uint256\"}],\"name\":\"CreateToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mneToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_msgvalue\",\"type\":\"uint256\"}],\"name\":\"CreateTokenICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mneToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gn\",\"outputs\":[{\"internalType\":\"contract genesis\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerMain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pc\",\"outputs\":[{\"internalType\":\"contract publicCalls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"reloadGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"reloadPublicCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOwnerMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updaterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updaterSetOwnerMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"tokenService","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000090e340e2d11e6eb1d99e34d122d6fe0fef3213fd000000000000000000000000a6be27538a28114fe03eb7ade9adfe53164f2a4c","Library":"","LicenseType":"None","SwarmSource":"ipfs://df52431f93542240f931dfda921876499acbebdc3bdb5262ea086f4d7f7768d4"}]}