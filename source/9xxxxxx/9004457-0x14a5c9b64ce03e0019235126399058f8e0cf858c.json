{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ncontract DSGuard {\n    function canCall(address src_, address dst_, bytes4 sig) public view returns (bool);\n\n    function permit(bytes32 src, bytes32 dst, bytes32 sig) public;\n    function forbid(bytes32 src, bytes32 dst, bytes32 sig) public;\n\n    function permit(address src, address dst, bytes32 sig) public;\n    function forbid(address src, address dst, bytes32 sig) public;\n\n}\n\ncontract DSGuardFactory {\n    function newGuard() public returns (DSGuard guard);\n}\n\ncontract DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig));\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\ncontract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache;  \n\n    constructor(address _cacheAddr) public {\n        require(setCache(_cacheAddr));\n    }\n\n    function() external payable {\n    }\n\n    \n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        returns (address target, bytes32 response)\n    {\n        target = cache.read(_code);\n        if (target == address(0)) {\n            \n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes memory _data)\n        public\n        auth\n        note\n        payable\n        returns (bytes32 response)\n    {\n        require(_target != address(0));\n\n        \n        assembly {\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\n            response := mload(0)      \n            switch iszero(succeeded)\n            case 1 {\n                \n                revert(0, 0)\n            }\n        }\n    }\n\n    \n    function setCache(address _cacheAddr)\n        public\n        payable\n        auth\n        note\n        returns (bool)\n    {\n        require(_cacheAddr != address(0));        \n        cache = DSProxyCache(_cacheAddr);  \n        return true;\n    }\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n            case 1 {\n                \n                revert(0, 0)\n            }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract Vat {\n\n    struct Urn {\n        uint256 ink;   \n        uint256 art;   \n    }\n\n    struct Ilk {\n        uint256 Art;   \n        uint256 rate;  \n        uint256 spot;  \n        uint256 line;  \n        uint256 dust;  \n    }\n\n    mapping (bytes32 => mapping (address => Urn )) public urns;\n    mapping (bytes32 => Ilk)                       public ilks;\n\n    function can(address, address) public view returns (uint);\n    function dai(address) public view returns (uint);\n    function frob(bytes32, address, address, address, int, int) public;\n    function hope(address) public;\n    function move(address, address, uint) public;\n}\n\ncontract Gem {\n    function dec() public returns (uint);\n    function gem() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n    function allowance(address, address) public returns (uint);\n}\n\ncontract DaiJoin {\n    function vat() public returns (Vat);\n    function dai() public returns (Gem);\n    function join(address, uint) public payable;\n    function exit(address, uint) public;\n}\n\ncontract OtcInterface {\n    function buyAllAmount(address, uint, address, uint) public returns (uint);\n\n    function getPayAmount(address, address, uint) public view returns (uint);\n    function getBuyAmount(address, address, uint) public view returns (uint);\n}\n\ncontract ValueLike {\n    function peek() public returns (uint, bool);\n}\n\ncontract VoxLike {\n    function par() public returns (uint);\n}\n\ncontract SaiTubLike {\n    function skr() public view returns (Gem);\n    function gem() public view returns (Gem);\n    function gov() public view returns (Gem);\n    function sai() public view returns (Gem);\n    function pep() public view returns (ValueLike);\n    function vox() public view returns (VoxLike);\n    function bid(uint) public view returns (uint);\n    function ink(bytes32) public view returns (uint);\n    function tag() public view returns (uint);\n    function tab(bytes32) public returns (uint);\n    function rap(bytes32) public returns (uint);\n    function draw(bytes32, uint) public;\n    function shut(bytes32) public;\n    function exit(uint) public;\n    function give(bytes32, address) public;\n    function lad(bytes32 cup) public view returns (address);\n    function cups(bytes32) public returns (address, uint, uint, uint);\n}\n\ncontract ScdMcdMigration {\n    SaiTubLike public tub;\n    DaiJoin public daiJoin;\n\n    function swapSaiToDai(uint) external;\n    function swapDaiToSai(uint) external;\n    function migrate(bytes32) external returns (uint);\n}\n\ncontract PayProxyActions is DSMath {\n    function pay(\n        address payable scdMcdMigration,    \n        bytes32 cup,                        \n        uint amount                         \n    ) public {\n        SaiTubLike tub = ScdMcdMigration(scdMcdMigration).tub();\n        \n        (uint val, bool ok) = tub.pep().peek();\n        if (ok && val != 0) {\n            \n            uint govFee = wdiv(rmul(amount, rdiv(tub.rap(cup), tub.tab(cup))) + 1, val); \n\n            \n            require(tub.gov().transferFrom(msg.sender, address(this), govFee), \"transfer-failed\");\n\n            \n            tub.sai().approve(address(tub), amount);\n            \n            tub.gov().approve(address(tub), govFee);\n        }\n    }\n\n    function payFeeWithGem(\n        address payable scdMcdMigration,    \n        bytes32 cup,                        \n        uint amount,                        \n        address otc,                        \n        address payGem                      \n    ) public {\n        SaiTubLike tub = ScdMcdMigration(scdMcdMigration).tub();\n        \n        (uint val, bool ok) = tub.pep().peek();\n        if (ok && val != 0) {\n            \n            uint govFee = wdiv(rmul(amount, rdiv(tub.rap(cup), tub.tab(cup))) + 1, val); \n            \n            uint payAmt = OtcInterface(otc).getPayAmount(payGem, address(tub.gov()), govFee);\n            \n            if (Gem(payGem).allowance(address(this), otc) < payAmt) {\n                Gem(payGem).approve(otc, payAmt);\n            }\n            \n            require(Gem(payGem).transferFrom(msg.sender, address(this), payAmt), \"transfer-failed\");\n            \n            OtcInterface(otc).buyAllAmount(address(tub.gov()), govFee, payGem, payAmt);\n\n            \n            tub.sai().approve(address(tub), amount);\n            \n            tub.gov().approve(address(tub), govFee);\n        }\n    }\n\n    function _getRatio(\n        SaiTubLike tub,\n        bytes32 cup\n    ) internal returns (uint ratio) {\n        ratio = rdiv(\n                        rmul(tub.tag(), tub.ink(cup)),\n                        rmul(tub.vox().par(), tub.tab(cup))\n                    );\n    }\n\n    function payFeeWithDebt(\n        address payable scdMcdMigration,    \n        bytes32 cup,                        \n        uint amount,                        \n        address otc,                        \n        uint minRatio                       \n    ) public {\n        SaiTubLike tub = ScdMcdMigration(scdMcdMigration).tub();\n        \n        (uint val, bool ok) = tub.pep().peek();\n        if (ok && val != 0) {\n            \n            uint govFee = wdiv(rmul(amount, rdiv(tub.rap(cup), tub.tab(cup))) + 1, val); \n            \n            uint payAmt = OtcInterface(otc).getPayAmount(address(tub.sai()), address(tub.gov()), govFee);\n\n            \n            tub.draw(cup, payAmt);\n\n            require(_getRatio(tub, cup) > minRatio, \"minRatio-failed\");\n\n            \n            if (Gem(address(tub.sai())).allowance(address(this), otc) < payAmt) {\n                Gem(address(tub.sai())).approve(otc, payAmt);\n            }\n            \n            OtcInterface(otc).buyAllAmount(address(tub.gov()), govFee, address(tub.sai()), payAmt);\n\n            \n            tub.sai().approve(address(tub), amount);\n            \n            tub.gov().approve(address(tub), govFee);\n        }\n    }\n}\n\ncontract PipInterface {\n    function read() public returns (bytes32);\n}\n\ncontract PepInterface {\n    function peek() public returns (bytes32, bool);\n}\n\ncontract VoxInterface {\n    function par() public returns (uint);\n}\n\ncontract TubInterface {\n    event LogNewCup(address indexed lad, bytes32 cup);\n\n    function open() public returns (bytes32);\n    function join(uint) public;\n    function exit(uint) public;\n    function lock(bytes32, uint) public;\n    function free(bytes32, uint) public;\n    function draw(bytes32, uint) public;\n    function wipe(bytes32, uint) public;\n    function give(bytes32, address) public;\n    function shut(bytes32) public;\n    function bite(bytes32) public;\n    function cups(bytes32) public returns (address, uint, uint, uint);\n    function gem() public returns (TokenInterface);\n    function gov() public returns (TokenInterface);\n    function skr() public returns (TokenInterface);\n    function sai() public returns (TokenInterface);\n    function vox() public returns (VoxInterface);\n    function ask(uint) public returns (uint);\n    function mat() public returns (uint);\n    function chi() public returns (uint);\n    function ink(bytes32) public returns (uint);\n    function tab(bytes32) public returns (uint);\n    function rap(bytes32) public returns (uint);\n    function per() public returns (uint);\n    function pip() public returns (PipInterface);\n    function pep() public returns (PepInterface);\n    function tag() public returns (uint);\n    function drip() public;\n    function lad(bytes32 cup) public view returns (address);\n    function bid(uint wad) public view returns (uint);\n}\n\ncontract DSProxyInterface {\n    function execute(bytes memory _code, bytes memory _data) public payable returns (address, bytes32);\n\n    function execute(address _target, bytes memory _data) public payable returns (bytes32);\n\n    function setCache(address _cacheAddr) public payable returns (bool);\n\n    function owner() public returns (address);\n}\n\ncontract ProxyRegistryInterface {\n    function proxies(address _owner) public view returns(DSProxyInterface);\n    function build(address) public returns (address);\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract GasTokenInterface is ERC20 {\n    function free(uint256 value) public returns (bool success);\n    function freeUpTo(uint256 value) public returns (uint256 freed);\n    function freeFrom(address from, uint256 value) public returns (bool success);\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed);\n}\n\ncontract ConstantAddressesMainnet {\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant IDAI_ADDRESS = 0x14094949152EDDBFcd073717200DA82fEd8dC960;\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\n    address public constant OTC_ADDRESS = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant KYBER_WRAPPER = 0x8F337bD3b7F2b05d9A8dC8Ac518584e833424893;\n    address public constant UNISWAP_WRAPPER = 0x1e30124FDE14533231216D95F7798cD0061e5cf8;\n    address public constant ETH2DAI_WRAPPER = 0xd7BBB1777E13b6F535Dec414f575b858ed300baF;\n    address public constant OASIS_WRAPPER = 0x9aBE2715D2d99246269b8E17e9D1b620E9bf6558;\n\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    address public constant UNISWAP_FACTORY = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address public constant PIP_INTERFACE_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n\n    address public constant SAVINGS_LOGGER_ADDRESS = 0x89b3635BD2bAD145C6f92E82C9e83f06D5654984;\n\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x865B41584A22F8345Fca4B71c42a1E7aBcD67eCB;\n\n    \n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\n\n    \n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\n\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\n\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\n\n    \n    address public constant SUBSCRIPTION_ADDRESS = 0x83152CAA0d344a2Fd428769529e2d490A88f4393;\n    address public constant MONITOR_ADDRESS = 0x3F4339816EDEF8D3d3970DB2993e2e0Ec6010760;\n\n}\n\ncontract ConstantAddressesKovan {\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\n    address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\n    address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\n    address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\n    address payable public  constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\n    address public constant OTC_ADDRESS = 0x4A6bC4e803c62081ffEbCc8d227B5a87a58f1F8F;\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\n    address public constant SOLO_MARGIN_ADDRESS = 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE;\n    address public constant IDAI_ADDRESS = 0xA1e58F3B1927743393b25f261471E1f2D3D9f0F6;\n    address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\n    address public constant SAI_SAVER_PROXY = 0xADB7c74bCe932fC6C27ddA3Ac2344707d2fBb0E6;\n\n    address public constant KYBER_WRAPPER = 0x68c56FF0E7BBD30AF9Ad68225479449869fC1bA0;\n    address public constant UNISWAP_WRAPPER = 0x2A4ee140F05f1Ba9A07A020b07CCFB76CecE4b43;\n    address public constant ETH2DAI_WRAPPER = 0x823cde416973a19f98Bb9C96d97F4FE6C9A7238B;\n    address public constant OASIS_WRAPPER = 0x0257Ba4876863143bbeDB7847beC583e4deb6fE6;\n\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\n\n\n    address public constant FACTORY_ADDRESS = 0xc72E74E474682680a414b506699bBcA44ab9a930;\n    \n    address public constant PIP_INTERFACE_ADDRESS = 0xA944bd4b25C9F186A846fd5668941AA3d3B8425F;\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x64A436ae831C1672AE81F674CAb8B6775df3475C;\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\n    address public constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n\n    address public constant SAVINGS_LOGGER_ADDRESS = 0xA6E5d5F489b1c00d9C11E1caF45BAb6e6e26443d;\n\n    \n    address public constant UNISWAP_FACTORY = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n\n    \n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\n\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\n\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\n\n    \n    address public constant SUBSCRIPTION_ADDRESS = 0xFC41f79776061a396635aD0b9dF7a640A05063C1;\n    address public constant MONITOR_ADDRESS = 0xfC1Fc0502e90B7A3766f93344E1eDb906F8A75DD;\n}\n\ncontract ConstantAddresses is ConstantAddressesMainnet {\n}\n\ncontract Monitor is DSMath, ConstantAddresses {\n\n    \n    PipInterface pip = PipInterface(PIP_INTERFACE_ADDRESS);\n    TubInterface tub = TubInterface(TUB_ADDRESS);\n    ProxyRegistryInterface registry = ProxyRegistryInterface(PROXY_REGISTRY_INTERFACE_ADDRESS);\n    GasTokenInterface gasToken = GasTokenInterface(GAS_TOKEN_INTERFACE_ADDRESS);\n\n    uint constant public REPAY_GAS_TOKEN = 30;\n    uint constant public BOOST_GAS_TOKEN = 19;\n\n    uint constant public MAX_GAS_PRICE = 40000000000; \n\n    uint constant public REPAY_GAS_COST = 1500000;\n    uint constant public BOOST_GAS_COST = 750000;\n\n    address public saverProxy;\n    address public owner;\n    uint public changeIndex;\n\n    struct CdpHolder {\n        uint minRatio;\n        uint maxRatio;\n        uint optimalRatioBoost;\n        uint optimalRatioRepay;\n        address owner;\n    }\n\n    mapping(bytes32 => CdpHolder) public holders;\n\n    \n    mapping(address => bool) public approvedCallers;\n\n    event Subscribed(address indexed owner, bytes32 cdpId);\n    event Unsubscribed(address indexed owner, bytes32 cdpId);\n    event Updated(address indexed owner, bytes32 cdpId);\n\n    event CdpRepay(bytes32 indexed cdpId, address caller, uint _amount, uint _ratioBefore, uint _ratioAfter);\n    event CdpBoost(bytes32 indexed cdpId, address caller, uint _amount, uint _ratioBefore, uint _ratioAfter);\n\n    modifier onlyApproved() {\n        require(approvedCallers[msg.sender]);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n\n    constructor(address _saverProxy) public {\n        approvedCallers[msg.sender] = true;\n        owner = msg.sender;\n\n        saverProxy = _saverProxy;\n        changeIndex = 0;\n    }\n\n    \n    \n    \n    \n    \n    \n    function subscribe(bytes32 _cdpId, uint _minRatio, uint _maxRatio, uint _optimalRatioBoost, uint _optimalRatioRepay) public {\n        require(isOwner(msg.sender, _cdpId));\n\n        bool isCreated = holders[_cdpId].owner == address(0) ? true : false;\n\n        holders[_cdpId] = CdpHolder({\n            minRatio: _minRatio,\n            maxRatio: _maxRatio,\n            optimalRatioBoost: _optimalRatioBoost,\n            optimalRatioRepay: _optimalRatioRepay,\n            owner: msg.sender\n        });\n\n        changeIndex++;\n\n        if (isCreated) {\n            emit Subscribed(msg.sender, _cdpId);\n        } else {\n            emit Updated(msg.sender, _cdpId);\n        }\n    }\n\n    \n    \n    function unsubscribe(bytes32 _cdpId) public {\n        require(isOwner(msg.sender, _cdpId));\n\n        delete holders[_cdpId];\n\n        changeIndex++;\n\n        emit Unsubscribed(msg.sender, _cdpId);\n    }\n\n    \n    \n    \n    \n    function repayFor(bytes32 _cdpId, uint _amount) public onlyApproved {\n        if (gasToken.balanceOf(address(this)) >= BOOST_GAS_TOKEN) {\n            gasToken.free(BOOST_GAS_TOKEN);\n        }\n\n        CdpHolder memory holder = holders[_cdpId];\n        uint ratioBefore = getRatio(_cdpId);\n\n        require(holder.owner != address(0));\n        require(ratioBefore <= holders[_cdpId].minRatio);\n\n        uint gasCost = calcGasCost(REPAY_GAS_COST);\n\n        DSProxyInterface(holder.owner).execute(saverProxy, abi.encodeWithSignature(\"repay(bytes32,uint256,uint256)\", _cdpId, _amount, gasCost));\n\n        uint ratioAfter = getRatio(_cdpId);\n\n        require(ratioAfter > holders[_cdpId].minRatio);\n        require(ratioAfter < holders[_cdpId].maxRatio);\n\n        emit CdpRepay(_cdpId, msg.sender, _amount, ratioBefore, ratioAfter);\n    }\n\n    \n    \n    \n    \n    function boostFor(bytes32 _cdpId, uint _amount) public onlyApproved {\n        if (gasToken.balanceOf(address(this)) >= REPAY_GAS_TOKEN) {\n            gasToken.free(REPAY_GAS_TOKEN);\n        }\n\n        CdpHolder memory holder = holders[_cdpId];\n        uint ratioBefore = getRatio(_cdpId);\n\n        require(holder.owner != address(0));\n\n        require(ratioBefore >= holders[_cdpId].maxRatio);\n\n        uint gasCost = calcGasCost(BOOST_GAS_COST);\n\n        DSProxyInterface(holder.owner).execute(saverProxy, abi.encodeWithSignature(\"boost(bytes32,uint256,uint256)\", _cdpId, _amount, gasCost));\n\n        uint ratioAfter = getRatio(_cdpId);\n\n        require(ratioAfter > holders[_cdpId].minRatio);\n        require(ratioAfter < holders[_cdpId].maxRatio);\n\n        emit CdpBoost(_cdpId, msg.sender, _amount, ratioBefore, ratioAfter);\n    }\n\n\n    \n    \n    function getRatio(bytes32 _cdpId) public returns(uint) {\n        return (rdiv(rmul(rmul(tub.ink(_cdpId), tub.tag()), WAD), tub.tab(_cdpId)));\n    }\n\n    \n    \n    \n    function isOwner(address _owner, bytes32 _cdpId) internal view returns(bool) {\n        require(tub.lad(_cdpId) == _owner);\n\n        return true;\n    }\n\n    \n    \n    \n    function calcGasCost(uint _gasAmount) internal view returns (uint) {\n        uint gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\n\n        return mul(gasPrice, _gasAmount);\n    }\n\n\n    \n\n    \n    \n    function addCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = true;\n    }\n\n    \n    \n    function removeCaller(address _caller) public onlyOwner {\n        approvedCallers[_caller] = false;\n    }\n\n    \n    \n    \n    \n    function transferERC20(address _tokenAddress, address _to, uint _amount) public onlyOwner {\n        ERC20(_tokenAddress).transfer(_to, _amount);\n    }\n\n    \n    \n    \n    function transferEth(address payable _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n    }\n }\n\ncontract Manager {\n    function last(address) public returns (uint);\n    function cdpCan(address, uint, address) public view returns (uint);\n    function ilks(uint) public view returns (bytes32);\n    function owns(uint) public view returns (address);\n    function urns(uint) public view returns (address);\n    function vat() public view returns (address);\n    function open(bytes32, address) public returns (uint);\n    function give(uint, address) public;\n    function cdpAllow(uint, address, uint) public;\n    function urnAllow(address, uint) public;\n    function frob(uint, int, int) public;\n    function flux(uint, address, uint) public;\n    function move(uint, address, uint) public;\n    function exit(address, uint, address, uint) public;\n    function quit(uint, address) public;\n    function enter(address, uint) public;\n    function shift(uint, uint) public;\n}\n\ncontract PartialMigrationProxy is PayProxyActions, ConstantAddresses {\n\n    enum MigrationType { WITH_MKR, WITH_CONVERSION, WITH_DEBT }\n\n    function migratePart(bytes32 _cup, uint _ethAmount, uint _saiAmount, uint _minRatio, MigrationType _type, uint _currentVault) external {\n        TubInterface tub = TubInterface(TUB_ADDRESS);\n        Manager manager = Manager(MANAGER_ADDRESS);\n\n        \n        uint ink = rdiv(_ethAmount, tub.per());\n        tub.free(_cup, ink);\n\n        tub.exit(ink);\n        tub.gem().withdraw(_ethAmount);\n\n        \n        bytes32 newCup = tub.open();\n        lock(tub, newCup, _ethAmount);\n        draw(tub, newCup, _saiAmount);\n\n        \n        if (_type == MigrationType.WITH_MKR) {\n            pay(SCD_MCD_MIGRATION, _cup, _saiAmount);\n        } else if (_type == MigrationType.WITH_CONVERSION) {\n            payFeeWithGem(SCD_MCD_MIGRATION, _cup, _saiAmount, OTC_ADDRESS, MAKER_DAI_ADDRESS);\n        } else if (_type == MigrationType.WITH_DEBT) {\n            payFeeWithDebt(SCD_MCD_MIGRATION, _cup, _saiAmount, OTC_ADDRESS, _minRatio);\n        }\n\n        tub.wipe(_cup, _saiAmount);\n\n        \n        uint vaultId = migrate(newCup, tub);\n\n        if (_currentVault > 0) {\n            manager.shift(vaultId, _currentVault);\n            \n            manager.give(vaultId, WALLET_ID);\n        }\n    }\n\n        \n    function migrate(bytes32 _cdpId, TubInterface _tub) private returns(uint) {\n        _tub.give(_cdpId, address(SCD_MCD_MIGRATION));\n        uint newCdpId = ScdMcdMigration(SCD_MCD_MIGRATION).migrate(_cdpId);\n\n        return newCdpId;\n    }\n\n    function draw(TubInterface tub, bytes32 cup, uint wad) private {\n        if (wad > 0) {\n            tub.draw(cup, wad);\n        }\n    }\n\n    function lock(TubInterface tub, bytes32 cup, uint value) private {\n        if (value > 0) {\n\n            tub.gem().deposit.value(value)();\n\n            uint ink = rdiv(value, tub.per());\n            if (tub.gem().allowance(address(this), address(tub)) != uint(-1)) {\n                tub.gem().approve(address(tub), uint(-1));\n            }\n            tub.join(ink);\n\n            if (tub.skr().allowance(address(this), address(tub)) != uint(-1)) {\n                tub.skr().approve(address(tub), uint(-1));\n            }\n            tub.lock(cup, ink);\n        }\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cup\",\"type\":\"bytes32\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"name\":\"_saiAmount\",\"type\":\"uint256\"},{\"name\":\"_minRatio\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_currentVault\",\"type\":\"uint256\"}],\"name\":\"migratePart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PIP_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTC_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONITOR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH2DAI_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STUPID_EXCHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"scdMcdMigration\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_REGISTRY_INTERFACE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"scdMcdMigration\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"payGem\",\"type\":\"address\"}],\"name\":\"payFeeWithGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUBSCRIPTION_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_DAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"scdMcdMigration\",\"type\":\"address\"},{\"name\":\"cup\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"otc\",\"type\":\"address\"},{\"name\":\"minRatio\",\"type\":\"uint256\"}],\"name\":\"payFeeWithDebt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PartialMigrationProxy","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://9cb93cff3f2acb172a06c5e0a2c783b1c6805bb56ba45729345b8678777a0315"}]}