{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.24;\r\n\r\ncontract Matrix {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint personalMatrixCnt;\r\n        uint personalMatrixNum;\r\n        uint personalMatrixFills;\r\n        uint totalReferrals;\r\n        uint levelsOpen;\r\n    }\r\n\r\n    mapping(uint => uint) public LEVEL_PRICE;\r\n    mapping(uint => uint) public LEVEL_SLOTS;\r\n    mapping(uint => uint) public EXTRA_SLOTS;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public binaryUsers;\r\n    mapping(uint => address) public usersById;\r\n\r\n    mapping(address => mapping (uint => uint)) public positionsByAddress;\r\n    mapping(address => uint) public positionsByAddressCnt;\r\n    mapping(uint => uint) public binaryPositionsLevels;\r\n\r\n    uint public lastUserId = 2;\r\n    uint public lastBinaryId = 1;\r\n    uint public lastPersonalMatrixId = 2;\r\n    address public owner;\r\n\r\n    uint REGISTRATION_COST = 0.05 ether;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event LevelUpgraded(address indexed user, uint indexed userId, uint indexed level);\r\n    event LevelFilled(address indexed user, uint indexed userId, uint indexed level);\r\n    event Transfer(address indexed user, uint indexed userId, uint indexed amount);\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    constructor(address ownerAddress) public {\r\n        owner = ownerAddress;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            personalMatrixCnt: 0,\r\n            personalMatrixNum: 1,\r\n            personalMatrixFills: 0,\r\n            totalReferrals: 0,\r\n            levelsOpen: 1\r\n            });\r\n\r\n        users[ownerAddress] = user;\r\n        usersById[1] = ownerAddress;\r\n\r\n        LEVEL_PRICE[1] = 0.05 ether;\r\n        LEVEL_PRICE[2] = 0.1 ether;\r\n        LEVEL_PRICE[3] = 0.2 ether;\r\n        LEVEL_PRICE[4] = 1 ether;\r\n        LEVEL_PRICE[5] = 6 ether;\r\n        LEVEL_PRICE[6] = 50 ether;\r\n        LEVEL_PRICE[7] = 50 ether;\r\n        LEVEL_PRICE[8] = 100 ether;\r\n        LEVEL_PRICE[9] = 400 ether;\r\n        LEVEL_PRICE[10] = 1600 ether;\r\n\r\n        LEVEL_SLOTS[1] = 2;\r\n        LEVEL_SLOTS[2] = 4;\r\n        LEVEL_SLOTS[3] = 8;\r\n        LEVEL_SLOTS[4] = 16;\r\n        LEVEL_SLOTS[5] = 32;\r\n        LEVEL_SLOTS[6] = 2;\r\n        LEVEL_SLOTS[7] = 4;\r\n        LEVEL_SLOTS[8] = 8;\r\n        LEVEL_SLOTS[9] = 16;\r\n        LEVEL_SLOTS[10] = 32;\r\n\r\n        EXTRA_SLOTS[1] = 0;\r\n        EXTRA_SLOTS[2] = 1;\r\n        EXTRA_SLOTS[3] = 6;\r\n        EXTRA_SLOTS[4] = 20;\r\n        EXTRA_SLOTS[5] = 200;\r\n        EXTRA_SLOTS[6] = 200;\r\n        EXTRA_SLOTS[7] = 400;\r\n        EXTRA_SLOTS[8] = 2000;\r\n        EXTRA_SLOTS[9] = 16000;\r\n        EXTRA_SLOTS[10] = 124000;\r\n    }\r\n\r\n    function reg(address referrer) public payable {\r\n        registration(msg.sender, referrer);\r\n    }\r\n\r\n    function purchasePosition() public payable {\r\n        require(msg.value == 0.05 ether, \"purchase cost 0.05\");\r\n        require(isUserExists(msg.sender), \"user not exists\");\r\n\r\n        updateBinaryMatrix(msg.sender);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == 0.1 ether, \"registration cost 0.1\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        users[userAddress] = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            levelsOpen: 1,\r\n            personalMatrixCnt: 0,\r\n            personalMatrixFills: 0,\r\n            personalMatrixNum: lastPersonalMatrixId,\r\n            totalReferrals: 0\r\n            });\r\n        usersById[lastUserId] = userAddress;\r\n\r\n        lastUserId++;\r\n        lastPersonalMatrixId++;\r\n\r\n        updatePersonalMatrix(referrerAddress);\r\n        updateBinaryMatrix(userAddress);\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\r\n    function updatePersonalMatrix(address referrer) private {\r\n        users[referrer].totalReferrals++;\r\n        if (users[referrer].personalMatrixCnt < 2) {\r\n            payRegDividends(referrer);\r\n            users[referrer].personalMatrixCnt++;\r\n        } else if (users[referrer].personalMatrixCnt == 2) {\r\n            updateBinaryMatrix(referrer);\r\n            users[referrer].personalMatrixCnt++;\r\n        } else {\r\n            if (users[referrer].referrer == address(0)) {\r\n                payRegDividends(referrer);\r\n            } else {\r\n                updatePersonalMatrix(users[referrer].referrer);\r\n            }\r\n            users[referrer].personalMatrixCnt = 0;\r\n            users[referrer].personalMatrixNum = lastPersonalMatrixId;\r\n            users[referrer].personalMatrixFills++;\r\n            lastPersonalMatrixId++;\r\n        }\r\n    }\r\n\r\n    function payRegDividends(address user) private {\r\n        emit Transfer(user, users[user].id, REGISTRATION_COST);\r\n        address(uint160(user)).transfer(REGISTRATION_COST);\r\n    }\r\n\r\n    function updateBinaryMatrix(address user) private {\r\n        positionsByAddress[user][positionsByAddressCnt[user]] = lastBinaryId;\r\n        positionsByAddressCnt[user]++;\r\n        binaryPositionsLevels[lastBinaryId] = 1;\r\n\r\n        binaryUsers[lastBinaryId] = user;\r\n        lastBinaryId++;\r\n\r\n        uint div = 1;\r\n        uint level = 0;\r\n        uint initIndex = lastBinaryId-1;\r\n        uint index = lastBinaryId-1;\r\n\r\n        while (level < 5) {\r\n            level++;\r\n            div *= 2;\r\n\r\n            if (index % div == div - 1) {\r\n                index = index / div;\r\n\r\n                if (index != 0) {\r\n                    binaryPositionsLevels[index] = level;\r\n                    fillLevel(binaryUsers[index], level);\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        index = initIndex;\r\n\r\n        while (level < 10) {\r\n            level++;\r\n            div *= 2;\r\n\r\n            if (index % div == div - 1) {\r\n                index = index / div;\r\n\r\n                if (index != 0) {\r\n                    binaryPositionsLevels[index] = level;\r\n                    fillLevel(binaryUsers[index], level);\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function fillLevel(address user, uint level) private {\r\n        emit LevelFilled(user, users[user].id, level);\r\n\r\n        level = level + 1;\r\n\r\n        uint payment = LEVEL_PRICE[level - 1] * LEVEL_SLOTS[level - 1];\r\n\r\n        if (users[user].levelsOpen < level) {\r\n            users[user].levelsOpen++;\r\n            emit LevelUpgraded(user, users[user].id, level);\r\n        }\r\n\r\n        payment -= LEVEL_PRICE[level];\r\n        payment -= REGISTRATION_COST * EXTRA_SLOTS[level-1];\r\n\r\n        if (level > 2) {\r\n            emit Transfer(user, users[user].id, payment);\r\n\r\n            address(uint160(user)).transfer(payment);\r\n        }\r\n\r\n        uint i = 0;\r\n        while (i < EXTRA_SLOTS[level-1]) {\r\n            updateBinaryMatrix(user);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"binaryPositionsLevels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EXTRA_SLOTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"reg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPersonalMatrixId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"binaryUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchasePosition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_SLOTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"personalMatrixCnt\",\"type\":\"uint256\"},{\"name\":\"personalMatrixNum\",\"type\":\"uint256\"},{\"name\":\"personalMatrixFills\",\"type\":\"uint256\"},{\"name\":\"totalReferrals\",\"type\":\"uint256\"},{\"name\":\"levelsOpen\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionsByAddressCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBinaryId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"LevelUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"LevelFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Matrix","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000778474b5a9d6cc0a6642ae1ca5c395ed2c73a336","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://895e21dae3b104d59f05e0ccea0c60689e08766846bc0ad465f18b86e1c0ba33"}]}