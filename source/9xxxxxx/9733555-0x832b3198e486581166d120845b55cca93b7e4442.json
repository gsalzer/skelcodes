{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IOneSplitView {\r\n    // disableFlags = FLAG_UNISWAP + FLAG_KYBER + ...\r\n    uint256 public constant FLAG_UNISWAP = 0x01;\r\n    uint256 public constant FLAG_KYBER = 0x02;\r\n    uint256 public constant FLAG_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\r\n    uint256 public constant FLAG_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\r\n    uint256 public constant FLAG_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\r\n    uint256 public constant FLAG_BANCOR = 0x04;\r\n    uint256 public constant FLAG_OASIS = 0x08;\r\n    uint256 public constant FLAG_COMPOUND = 0x10;\r\n    uint256 public constant FLAG_FULCRUM = 0x20;\r\n    uint256 public constant FLAG_CHAI = 0x40;\r\n    uint256 public constant FLAG_AAVE = 0x80;\r\n    uint256 public constant FLAG_SMART_TOKEN = 0x100;\r\n    uint256 public constant FLAG_MULTI_PATH_ETH = 0x200; // Turned off by default\r\n    uint256 public constant FLAG_BDAI = 0x400;\r\n    uint256 public constant FLAG_IEARN = 0x800;\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\r\n        );\r\n}\r\n\r\n\r\ncontract IOneSplit is IOneSplitView {\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) public payable;\r\n\r\n    function goodSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) public payable;\r\n}\r\n\r\n// File: contracts/interfaces/IPriceOracleGetter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* @title IPriceOracleGetter interface\r\n* @notice Interface for the Aave price oracle.\r\n**/\r\n\r\ninterface IPriceOracleGetter {\r\n    /**\r\n    * @dev returns the asset price in ETH\r\n    * @param _asset the address of the asset\r\n    * @return the ETH price of the asset\r\n    **/\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/EthAddressLib.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IExchangeAdapter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract IExchangeAdapter {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant MAX_UINT = uint256(-1);\r\n\r\n    uint256 public constant MAX_UINT_MINUS_ONE = MAX_UINT - 1;\r\n\r\n    event Exchange(\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed platform,\r\n        uint256 fromAmount,\r\n        uint256 toAmount\r\n    );\r\n\r\n    function approveExchange(IERC20[] calldata _tokens) external;\r\n\r\n    function exchange(address _from, address _to, uint256 _amount, uint256 _maxSlippage) external returns(uint256);\r\n}\r\n\r\n// File: contracts/fees/OneSplitAdapter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title OneSplitAdapter\r\n/// @author Aave\r\n/// @notice Implements the logic to exchange assets through 1Split\r\ncontract OneSplitAdapter is IExchangeAdapter {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice The OneSplit exchange\r\n    address public oneSplit;\r\n\r\n    /// @notice It defines in how many chunks the amount to swap will be splitted to then\r\n    /// divide the chunks amongst the underlying exchanges.\r\n    /// For example, using 10 as SPLIT_PARTS and having 4 underlying exchanges on 1Split,\r\n    /// the division amongst could look like [4,4,0,2]\r\n    uint256 public constant SPLIT_PARTS = 10;\r\n\r\n    /// @notice By using this flag on OneSplit, the swap sequence will introduce a step to ETH\r\n    /// in the middle, resulting in a sequence like FROM-to-ETH -> ETH-to-TO.\r\n    /// This is optimal for cases where the pair FROM/TO is not liquid enough in the\r\n    /// underlying exchanges used by OneSplit, reducing this way the slippage\r\n    uint256 public constant MULTI_PATH_ETH_FLAG = 512;\r\n\r\n    /// @notice Aave proxy for Chainlink aggregators\r\n    IPriceOracleGetter priceOracle;\r\n\r\n    constructor(address _oneSplit, IPriceOracleGetter _priceOracle) public {\r\n        oneSplit = _oneSplit;\r\n        priceOracle = _priceOracle;\r\n    }\r\n\r\n    /// @notice \"Infinite\" approval for all the tokens initialized\r\n    /// @param _tokens the list of token addresses to approve\r\n    function approveExchange(IERC20[] calldata _tokens) external {\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            if (address(_tokens[i]) != EthAddressLib.ethAddress()) {\r\n                _tokens[i].safeApprove(oneSplit, MAX_UINT_MINUS_ONE);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Exchanges _amount of _from token (or ETH) to _to token (or ETH)\r\n    /// - Uses EthAddressLib.ethAddress() as the reference on 1Split of ETH\r\n    /// @param _from The asset to exchange from\r\n    /// @param _to The asset to exchange to\r\n    /// @param _amount The amount to exchange\r\n    /// @param _maxSlippage Max slippage acceptable, taken into account after the goodSwap()\r\n    function exchange(address _from, address _to, uint256 _amount, uint256 _maxSlippage) external returns(uint256) {\r\n        uint256 _value = (_from == EthAddressLib.ethAddress()) ? _amount : 0;\r\n\r\n        uint256 _fromAssetPriceInWei = priceOracle.getAssetPrice(_from);\r\n        uint256 _toAssetPriceInWei = priceOracle.getAssetPrice(_to);\r\n        uint256 _toBalanceBefore = IERC20(_to).balanceOf(address(this));\r\n\r\n        IOneSplit(oneSplit).goodSwap.value(_value)(\r\n            IERC20(_from),\r\n            IERC20(_to),\r\n            _amount,\r\n            0,\r\n            SPLIT_PARTS,\r\n            MULTI_PATH_ETH_FLAG\r\n        );\r\n\r\n        uint256 _toReceivedAmount = IERC20(_to).balanceOf(address(this)).sub(_toBalanceBefore);\r\n\r\n        require(\r\n            (_toAssetPriceInWei.mul(_toReceivedAmount).mul(100))\r\n                .div(_fromAssetPriceInWei.mul(_amount)) >= (100 - _maxSlippage),\r\n            \"INVALID_SLIPPAGE\"\r\n        );\r\n\r\n        emit Exchange(_from, _to, oneSplit, _amount, _toReceivedAmount);\r\n        return _toReceivedAmount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneSplit\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT_MINUS_ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTI_PATH_ETH_FLAG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPLIT_PARTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"approveExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneSplit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OneSplitAdapter","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001814222fa8c8c1c1bf380e3bbfbd9de8657da47600000000000000000000000076b47460d7f7c5222cfb6b6a75615ab10895dde4","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://b279b0a26a73e1819a5759ffa7a5e23498ea8fb51e171570b022a00cb8bbddca"}]}