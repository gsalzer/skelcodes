{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/adapters/mainnet/mainnetChaiAdapter.sol\npragma solidity >0.4.13 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.6 <0.6.0 >=0.5.12 <0.6.0 >=0.5.15 <0.6.0;\n\n////// lib/openzeppelin-contracts/src/contracts/token/ERC20/IERC20.sol\n/* pragma solidity ^0.5.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n////// src/interfaces/ICToken.sol\n/* pragma solidity ^0.5.15; */\n\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function getCash() external view returns (uint);\n    function exchangeRateCurrent() external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function balanceOfUnderlying(address account) external returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n////// src/interfaces/IChai.sol\n/* pragma solidity ^0.5.12; */\n\ninterface IChai {\n    function draw(address src, uint wad) external;\n    function exit(address src, uint wad) external;\n    function join(address dst, uint wad) external;\n    function dai(address usr) external returns (uint wad);\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n    function approve(address usr, uint wad) external returns (bool);\n    function move(address src, address dst, uint wad) external returns (bool);\n    function transfer(address dst, uint wad) external returns (bool);\n    function transferFrom(address src, address dst, uint wad) external;\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n}\n////// src/interfaces/IPot.sol\n/* pragma solidity ^0.5.15; */\n\ninterface IPot {\n    function rho () external returns (uint256);\n    function drip () external returns (uint256);\n    function chi () external view returns (uint256);\n}\n////// src/adapters/mainnet/mainnetChaiAdapter.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.12; */\n\n/* import \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n/* import \"../../interfaces/ICToken.sol\"; */\n/* import \"../../interfaces/IChai.sol\"; */\n/* import \"../../interfaces/IPot.sol\"; */\n\ncontract MainnetChaiAdapter {\n\n    uint256 internal constant WAD = 10**18;\n    uint256 internal constant RAY = 10**27;\n    IChai constant chai = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\n    IERC20 constant dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    ICToken constant cdai = ICToken(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\n    IPot constant pot = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\n\n    constructor () public { }\n\n    // takes raw chai amount\n    // transfers it into our balance\n    function intakeRaw (uint256 amount) public returns (uint256) {\n\n        uint256 daiAmt = dai.balanceOf(address(this));\n        chai.exit(msg.sender, amount);\n        daiAmt = dai.balanceOf(address(this)) - daiAmt;\n        uint256 success = cdai.mint(daiAmt);\n        if (success != 0) revert(\"CDai/mint-failed\");\n        return daiAmt;\n\n    }\n\n    // takes numeraire amount\n    // transfers corresponding chai into our balance;\n    function intakeNumeraire (uint256 amount) public returns (uint256) {\n\n        uint256 chaiBal = chai.balanceOf(msg.sender);\n        chai.draw(msg.sender, amount);\n        uint256 success = cdai.mint(amount);\n        if (success != 0) revert(\"CDai/mint-failed\");\n        return chaiBal - chai.balanceOf(msg.sender);\n\n    }\n\n    // takes numeraire amount\n    // transfers corresponding chai to destination address\n    function outputNumeraire (address dst, uint256 amount) public returns (uint256) {\n\n        uint256 success = cdai.redeemUnderlying(amount);\n        if (success != 0) revert(\"CDai/redeemUnderlying-failed\");\n        uint256 chaiBal = chai.balanceOf(dst);\n        chai.join(dst, amount);\n        return chai.balanceOf(dst) - chaiBal;\n\n    }\n\n    // transfers corresponding chai to destination address\n    function outputRaw (address dst, uint256 amount) public returns (uint256) {\n\n        uint256 daiAmt = rmul(amount, pot.chi());\n        uint256 success = cdai.redeemUnderlying(daiAmt);\n        if (success != 0) revert(\"CDai/redeemUnderlying-failed\");\n        chai.join(dst, daiAmt);\n        return daiAmt;\n\n    }\n    \n    // pass it a numeraire and get the raw amount\n    function viewRawAmount (uint256 amount) public view returns (uint256) {\n\n        return rdivup(amount, pot.chi());\n\n    }\n\n    // pass it a raw amount and get the numeraire amount\n    function viewNumeraireAmount (uint256 amount) public view returns (uint256) {\n\n        return rmul(amount, pot.chi());\n\n    }\n\n    function viewNumeraireBalance (address addr) public view returns (uint256) {\n\n        uint256 rate = cdai.exchangeRateStored();\n        uint256 balance = cdai.balanceOf(addr);\n        return wmul(balance, rate);\n\n    }\n\n    // takes chai amount\n    // tells corresponding numeraire value\n    function getNumeraireAmount (uint256 amount) public returns (uint256) {\n\n        uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();\n        return rmul(amount, chi);\n\n    }\n\n    function getRawAmount (uint256 amount) public returns (uint256) {\n\n        uint chi = (now > pot.rho())\n          ? pot.drip()\n          : pot.chi();\n        return rdivup(amount, chi);\n\n    }\n\n    // tells numeraire balance\n    function getNumeraireBalance () public returns (uint256) {\n\n        return cdai.balanceOfUnderlying(address(this));\n\n    }\n    \n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        // always rounds down\n        z = mul(x, y) / RAY;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        // always rounds down\n        z = mul(x, RAY) / y;\n    }\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\n        // always rounds up\n        z = add(mul(x, RAY), sub(y, 1)) / y;\n    }\n\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getNumeraireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNumeraireBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"intakeNumeraire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"intakeRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"outputNumeraire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"outputRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewNumeraireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"viewNumeraireBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MainnetChaiAdapter","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}