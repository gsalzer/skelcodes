{"status":"1","message":"OK","result":[{"SourceCode":"/*! unixo.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\r\n//\r\n// ██╗░░░██╗███╗░░██╗██╗██╗░░██╗░█████╗░░░░██╗░█████╗░\r\n// ██║░░░██║████╗░██║██║╚██╗██╔╝██╔══██╗░░░██║██╔══██╗\r\n// ██║░░░██║██╔██╗██║██║░╚███╔╝░██║░░██║░░░██║██║░░██║\r\n// ██║░░░██║██║╚████║██║░██╔██╗░██║░░██║░░░██║██║░░██║\r\n// ╚██████╔╝██║░╚███║██║██╔╝╚██╗╚█████╔╝██╗██║╚█████╔╝\r\n// ░╚═════╝░╚═╝░░╚══╝╚═╝╚═╝░░╚═╝░╚════╝░╚═╝╚═╝░╚════╝░\r\n//\r\n// Official Website : https://unixo.io/\r\n// \r\n// Telegram Official Chat : https://t.me/unixo_chat\r\n\r\npragma solidity 0.6.6;\r\n\r\ncontract Unixo {\r\n    struct User {\r\n        uint256 id;\r\n        uint256 upline_id;\r\n        address upline;\r\n        uint256 balance;\r\n        uint256 profit;\r\n        uint8 level;\r\n        address[] referrals;\r\n        mapping(uint8 => uint40) expires;\r\n    }\r\n\r\n    uint24 public LEVEL_TIME_LIFE = 30 days;\r\n\r\n    address payable public root;\r\n    uint256 public last_id;\r\n\r\n    uint256[] public levels;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public users_ids;\r\n\r\n    event Register(address indexed addr, address indexed upline);\r\n    event UpLevel(address indexed addr, uint256 level);\r\n    event Profit(address indexed addr, address indexed referral, uint256 level, uint256 value);\r\n    event Lost(address indexed addr, address indexed referral, uint256 level, uint256 value);\r\n\r\n    constructor() public {\r\n        levels.push(0.1 ether);\r\n        levels.push(0.3 ether);\r\n        levels.push(0.9 ether);\r\n        levels.push(1.8 ether);\r\n        levels.push(3.6 ether);\r\n        levels.push(7.2 ether);\r\n        levels.push(14.4 ether);\r\n        levels.push(28.8 ether);\r\n        levels.push(57.6 ether);\r\n        levels.push(115.2 ether);\r\n\r\n        root = 0xd3cf11873DA75E5AaE7Fa46425FA6672EaA4a121;\r\n        users[root].id = ++last_id;\r\n        users_ids[last_id] = root;\r\n\r\n        emit Register(root, address(0));\r\n    }\r\n    \r\n    receive() payable external {\r\n        revert(\"Bad upline\");\r\n    }\r\n\r\n    fallback() payable external {\r\n        _register(msg.sender, bytesToAddress(msg.data), msg.value);\r\n    }\r\n\r\n    function _register(address _user, address _upline, uint256 _value) private {\r\n        require(_value == levels[0], \"Bad value\");\r\n\r\n        if(!(users[_user].upline != address(0) && users[_user].expires[0] < block.timestamp)) {\r\n            require(users[_user].upline == address(0) && _user != root, \"User exists\");\r\n            \r\n            require(_upline == root || users[_upline].upline != address(0), \"Bad upline\");\r\n            \r\n            address upline = this.findFreeReferrer(_upline);\r\n\r\n            users[_user].id = ++last_id;\r\n            users[_user].upline_id = users[upline].id;\r\n            users[_user].upline = upline;\r\n            users_ids[last_id] = _user;\r\n            users[upline].referrals.push(_user);\r\n            \r\n            emit Register(_user, upline);\r\n        }\r\n        \r\n        users[_user].expires[0] = uint40(block.timestamp + LEVEL_TIME_LIFE);\r\n\r\n        _uplinePay(users[_user].upline, 0, _value);\r\n    }\r\n\r\n    function _send(address _to, uint256 _value) private {\r\n        if(_to == address(0) || !payable(_to).send(_value - 0.01 ether)) {\r\n            root.transfer(_value);\r\n        }\r\n        else root.transfer(0.01 ether);\r\n    }\r\n    \r\n    function _uplinePay(address _user, uint8 _level, uint256 _value) private {\r\n        if(users[_user].expires[_level] < block.timestamp && _user != root) {\r\n            emit Lost(_user, tx.origin, _level, _value);\r\n\r\n            return _uplinePay(users[_user].upline, _level, _value);\r\n        }\r\n\r\n        uint256 cap = levels[users[_user].level] * 3;\r\n\r\n        if(users[_user].level < levels.length - 1) {\r\n            uint256 next_price = levels[users[_user].level + 1];\r\n            uint256 max_profit = cap - next_price;\r\n\r\n            if(users[_user].profit < max_profit || _user == root) {\r\n                users[_user].profit += _value;\r\n\r\n                _send(_user, _value);\r\n                \r\n                emit Profit(_user, tx.origin, _level, _value);\r\n            }\r\n            else {\r\n                uint256 b = users[_user].balance + _value;\r\n\r\n                if(b >= next_price) {\r\n                    users[_user].balance = 0;\r\n                    users[_user].profit = 0;\r\n                    users[_user].level++;\r\n                    users[_user].expires[users[_user].level] = uint40(block.timestamp + LEVEL_TIME_LIFE);\r\n\r\n                    emit UpLevel(_user, users[_user].level);\r\n\r\n                    _uplinePay(users[_user].upline, users[_user].level, b);\r\n                }\r\n                else users[_user].balance += _value;\r\n            }\r\n        }\r\n        else {\r\n            if(users[_user].profit < cap || _user == root) {\r\n                users[_user].profit += _value;\r\n\r\n                _send(_user, _value);\r\n\r\n                emit Profit(_user, tx.origin, _level, _value);\r\n            }\r\n            else _uplinePay(users[_user].upline, _level, _value);\r\n        }\r\n    }\r\n\r\n    function register(uint256 _upline_id) payable external {\r\n        _register(msg.sender, users_ids[_upline_id], msg.value);\r\n    }\r\n\r\n    function destruct() external {\r\n        require(msg.sender == root, \"Access denied\");\r\n\r\n        selfdestruct(root);\r\n    }\r\n\r\n    function findFreeReferrer(address _user) external view returns(address) {\r\n        if(users[_user].referrals.length < 3) return _user;\r\n\r\n        address[] memory refs = new address[](1023);\r\n        \r\n        refs[0] = users[_user].referrals[0];\r\n        refs[1] = users[_user].referrals[1];\r\n        refs[2] = users[_user].referrals[2];\r\n\r\n        for(uint16 i = 0; i < 1023; i++) {\r\n            if(users[refs[i]].referrals.length < 3) {\r\n                return refs[i];\r\n            }\r\n\r\n            if(i < 340) {\r\n                uint16 n = (i + 1) * 3;\r\n\r\n                refs[n] = users[refs[i]].referrals[0];\r\n                refs[n + 1] = users[refs[i]].referrals[1];\r\n                refs[n + 2] = users[refs[i]].referrals[2];\r\n            }\r\n        }\r\n\r\n        revert(\"No free referrer\");\r\n    }\r\n\r\n    function bytesToAddress(bytes memory data) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(data, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"UpLevel\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"LEVEL_TIME_LIFE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upline_id\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upline_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users_ids\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Unixo","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://d39f49beeabb3a688d9c54eb40002f6d2f8504088ff9d56e4f7f62089a623701"}]}