{"status":"1","message":"OK","result":[{"SourceCode":"/**\n\nDeployed by Ren Project, https://renproject.io\n\nCommit hash: 7918544\nRepository: https://github.com/renproject/darknode-sol\nIssues: https://github.com/renproject/darknode-sol/issues\n\nLicenses\nopenzeppelin-solidity: (MIT) https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\ndarknode-sol: (GNU GPL V3) https://github.com/renproject/darknode-sol/blob/master/LICENSE\n\n*/\n\npragma solidity 0.5.12;\n\n\ncontract Initializable {\n\n  \n  bool private initialized;\n\n  \n  bool private initializing;\n\n  \n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  \n  function isConstructor() private view returns (bool) {\n    \n    \n    \n    \n    \n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  \n  uint256[50] private ______gap;\n}\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        \n        \n        \n\n        \n        \n        \n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        \n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    \n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    \n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        \n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        \n        \n        \n        \n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    \n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        \n        \n\n        \n        \n        \n        \n        \n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        \n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { \n            \n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary Math {\n    \n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    \n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    \n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\nlibrary ERC20WithFees {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    \n    \n    function safeTransferFromWithFees(IERC20 token, address from, address to, uint256 value) internal returns (uint256) {\n        uint256 balancesBefore = token.balanceOf(to);\n        token.safeTransferFrom(from, to, value);\n        uint256 balancesAfter = token.balanceOf(to);\n        return Math.min(value, balancesAfter.sub(balancesBefore));\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    \n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    \n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    \n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    \n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    \n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    \n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole is Context {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(_msgSender());\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(_msgSender());\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\ncontract Pausable is Context, PauserRole {\n    \n    event Paused(address account);\n\n    \n    event Unpaused(address account);\n\n    bool private _paused;\n\n    \n    constructor () internal {\n        _paused = false;\n    }\n\n    \n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    \n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    \n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    \n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    \n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\ncontract ERC20Burnable is Context, ERC20 {\n    \n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n\n    \n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n}\n\ncontract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {\n\n    string private constant _name = \"Republic Token\";\n    string private constant _symbol = \"REN\";\n    uint8 private constant _decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(_decimals);\n\n    \n    constructor() ERC20Burnable() ERC20Pausable() ERC20Detailed(_name, _symbol, _decimals) public {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function transferTokens(address beneficiary, uint256 amount) public onlyOwner returns (bool) {\n        \n        \n        require(amount > 0);\n\n        _transfer(msg.sender, beneficiary, amount);\n        emit Transfer(msg.sender, beneficiary, amount);\n\n        return true;\n    }\n}\n\ncontract Claimable is Ownable {\n\n    address public pendingOwner;\n\n    modifier onlyPendingOwner() {\n        require(_msgSender() == pendingOwner, \"Claimable: caller is not the pending owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != owner() && newOwner != pendingOwner, \"Claimable: invalid new owner\");\n        pendingOwner = newOwner;\n    }\n\n    function claimOwnership() public onlyPendingOwner {\n        _transferOwnership(pendingOwner);\n        delete pendingOwner;\n    }\n}\n\nlibrary LinkedList {\n\n    \n    address public constant NULL = address(0);\n\n    \n    struct Node {\n        bool inList;\n        address previous;\n        address next;\n    }\n\n    \n    struct List {\n        mapping (address => Node) list;\n    }\n\n    \n    function insertBefore(List storage self, address target, address newNode) internal {\n        require(newNode != address(0), \"LinkedList: invalid address\");\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\n\n        \n        address prev = self.list[target].previous;\n\n        self.list[newNode].next = target;\n        self.list[newNode].previous = prev;\n        self.list[target].previous = newNode;\n        self.list[prev].next = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    \n    function insertAfter(List storage self, address target, address newNode) internal {\n        require(newNode != address(0), \"LinkedList: invalid address\");\n        require(!isInList(self, newNode), \"LinkedList: already in list\");\n        require(isInList(self, target) || target == NULL, \"LinkedList: not in list\");\n\n        \n        address n = self.list[target].next;\n\n        self.list[newNode].previous = target;\n        self.list[newNode].next = n;\n        self.list[target].next = newNode;\n        self.list[n].previous = newNode;\n\n        self.list[newNode].inList = true;\n    }\n\n    \n    function remove(List storage self, address node) internal {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        \n        address p = self.list[node].previous;\n        address n = self.list[node].next;\n\n        self.list[p].next = n;\n        self.list[n].previous = p;\n\n        \n        \n        self.list[node].inList = false;\n        delete self.list[node];\n    }\n\n    \n    function prepend(List storage self, address node) internal {\n        \n\n        insertBefore(self, begin(self), node);\n    }\n\n    \n    function append(List storage self, address node) internal {\n        \n\n        insertAfter(self, end(self), node);\n    }\n\n    function swap(List storage self, address left, address right) internal {\n        \n\n        address previousRight = self.list[right].previous;\n        remove(self, right);\n        insertAfter(self, left, right);\n        remove(self, left);\n        insertAfter(self, previousRight, left);\n    }\n\n    function isInList(List storage self, address node) internal view returns (bool) {\n        return self.list[node].inList;\n    }\n\n    \n    function begin(List storage self) internal view returns (address) {\n        return self.list[NULL].next;\n    }\n\n    \n    function end(List storage self) internal view returns (address) {\n        return self.list[NULL].previous;\n    }\n\n    function next(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        return self.list[node].next;\n    }\n\n    function previous(List storage self, address node) internal view returns (address) {\n        require(isInList(self, node), \"LinkedList: not in list\");\n        return self.list[node].previous;\n    }\n\n    function elements(List storage self, address _start, uint256 _count) internal view returns (address[] memory) {\n        require(_count > 0, \"LinkedList: invalid count\");\n        require(isInList(self, _start) || _start == address(0), \"LinkedList: not in list\");\n        address[] memory elems = new address[](_count);\n\n        \n        uint256 n = 0;\n        address nextItem = _start;\n        if (nextItem == address(0)) {\n            nextItem = begin(self);\n        }\n\n        while (n < _count) {\n            if (nextItem == address(0)) {\n                break;\n            }\n            elems[n] = nextItem;\n            nextItem = next(self, nextItem);\n            n += 1;\n        }\n        return elems;\n    }\n}\n\ncontract CanReclaimTokens is Ownable {\n    using SafeERC20 for ERC20;\n\n    mapping(address => bool) private recoverableTokensBlacklist;\n\n    function blacklistRecoverableToken(address _token) public onlyOwner {\n        recoverableTokensBlacklist[_token] = true;\n    }\n\n    \n    \n    function recoverTokens(address _token) external onlyOwner {\n        require(!recoverableTokensBlacklist[_token], \"CanReclaimTokens: token is not recoverable\");\n\n        if (_token == address(0x0)) {\n            msg.sender.transfer(address(this).balance);\n        } else {\n            ERC20(_token).safeTransfer(msg.sender, ERC20(_token).balanceOf(address(this)));\n        }\n    }\n}\n\ncontract DarknodeRegistryStore is Claimable, CanReclaimTokens {\n    using SafeMath for uint256;\n\n    string public VERSION; \n\n    \n    \n    \n    \n    \n    struct Darknode {\n        \n        \n        \n        \n        address payable owner;\n\n        \n        \n        \n        uint256 bond;\n\n        \n        uint256 registeredAt;\n\n        \n        uint256 deregisteredAt;\n\n        \n        \n        \n        \n        bytes publicKey;\n    }\n\n    \n    mapping(address => Darknode) private darknodeRegistry;\n    LinkedList.List private darknodes;\n\n    \n    RenToken public ren;\n\n    \n    \n    \n    \n    constructor(\n        string memory _VERSION,\n        RenToken _ren\n    ) public {\n        VERSION = _VERSION;\n        ren = _ren;\n        blacklistRecoverableToken(address(ren));\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function appendDarknode(\n        address _darknodeID,\n        address payable _darknodeOwner,\n        uint256 _bond,\n        bytes calldata _publicKey,\n        uint256 _registeredAt,\n        uint256 _deregisteredAt\n    ) external onlyOwner {\n        Darknode memory darknode = Darknode({\n            owner: _darknodeOwner,\n            bond: _bond,\n            publicKey: _publicKey,\n            registeredAt: _registeredAt,\n            deregisteredAt: _deregisteredAt\n        });\n        darknodeRegistry[_darknodeID] = darknode;\n        LinkedList.append(darknodes, _darknodeID);\n    }\n\n    \n    function begin() external view onlyOwner returns(address) {\n        return LinkedList.begin(darknodes);\n    }\n\n    \n    \n    function next(address darknodeID) external view onlyOwner returns(address) {\n        return LinkedList.next(darknodes, darknodeID);\n    }\n\n    \n    \n    function removeDarknode(address darknodeID) external onlyOwner {\n        uint256 bond = darknodeRegistry[darknodeID].bond;\n        delete darknodeRegistry[darknodeID];\n        LinkedList.remove(darknodes, darknodeID);\n        require(ren.transfer(owner(), bond), \"DarknodeRegistryStore: bond transfer failed\");\n    }\n\n    \n    \n    function updateDarknodeBond(address darknodeID, uint256 decreasedBond) external onlyOwner {\n        uint256 previousBond = darknodeRegistry[darknodeID].bond;\n        require(decreasedBond < previousBond, \"DarknodeRegistryStore: bond not decreased\");\n        darknodeRegistry[darknodeID].bond = decreasedBond;\n        require(ren.transfer(owner(), previousBond.sub(decreasedBond)), \"DarknodeRegistryStore: bond transfer failed\");\n    }\n\n    \n    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {\n        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;\n    }\n\n    \n    function darknodeOwner(address darknodeID) external view onlyOwner returns (address payable) {\n        return darknodeRegistry[darknodeID].owner;\n    }\n\n    \n    function darknodeBond(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].bond;\n    }\n\n    \n    function darknodeRegisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].registeredAt;\n    }\n\n    \n    function darknodeDeregisteredAt(address darknodeID) external view onlyOwner returns (uint256) {\n        return darknodeRegistry[darknodeID].deregisteredAt;\n    }\n\n    \n    function darknodePublicKey(address darknodeID) external view onlyOwner returns (bytes memory) {\n        return darknodeRegistry[darknodeID].publicKey;\n    }\n}\n\ninterface IDarknodePaymentStore {\n}\n\ninterface IDarknodePayment {\n    function changeCycle() external returns (uint256);\n    function store() external view returns (IDarknodePaymentStore);\n}\n\ninterface IDarknodeSlasher {\n}\n\ncontract DarknodeRegistry is Claimable, CanReclaimTokens {\n    using SafeMath for uint256;\n\n    string public VERSION; \n\n    \n    \n    \n    struct Epoch {\n        uint256 epochhash;\n        uint256 blocktime;\n    }\n\n    uint256 public numDarknodes;\n    uint256 public numDarknodesNextEpoch;\n    uint256 public numDarknodesPreviousEpoch;\n\n    \n    uint256 public minimumBond;\n    uint256 public minimumPodSize;\n    uint256 public minimumEpochInterval;\n\n    \n    \n    uint256 public nextMinimumBond;\n    uint256 public nextMinimumPodSize;\n    uint256 public nextMinimumEpochInterval;\n\n    \n    Epoch public currentEpoch;\n    Epoch public previousEpoch;\n\n    \n    RenToken public ren;\n\n    \n    DarknodeRegistryStore public store;\n\n    \n    IDarknodePayment public darknodePayment;\n\n    \n    IDarknodeSlasher public slasher;\n    IDarknodeSlasher public nextSlasher;\n\n    \n    \n    \n    \n    event LogDarknodeRegistered(address indexed _operator, address indexed _darknodeID, uint256 _bond);\n\n    \n    \n    \n    event LogDarknodeDeregistered(address indexed _operator, address indexed _darknodeID);\n\n    \n    \n    \n    event LogDarknodeOwnerRefunded(address indexed _operator, uint256 _amount);\n\n    \n    \n    \n    \n    \n    event LogDarknodeSlashed(address indexed _operator, address indexed _darknodeID, address indexed _challenger, uint256 _percentage);\n\n    \n    event LogNewEpoch(uint256 indexed epochhash);\n\n    \n    event LogMinimumBondUpdated(uint256 _previousMinimumBond, uint256 _nextMinimumBond);\n    event LogMinimumPodSizeUpdated(uint256 _previousMinimumPodSize, uint256 _nextMinimumPodSize);\n    event LogMinimumEpochIntervalUpdated(uint256 _previousMinimumEpochInterval, uint256 _nextMinimumEpochInterval);\n    event LogSlasherUpdated(address indexed _previousSlasher, address indexed _nextSlasher);\n    event LogDarknodePaymentUpdated(IDarknodePayment indexed _previousDarknodePayment, IDarknodePayment indexed _nextDarknodePayment);\n\n    \n    modifier onlyDarknodeOwner(address _darknodeID) {\n        require(store.darknodeOwner(_darknodeID) == msg.sender, \"DarknodeRegistry: must be darknode owner\");\n        _;\n    }\n\n    \n    modifier onlyRefunded(address _darknodeID) {\n        require(isRefunded(_darknodeID), \"DarknodeRegistry: must be refunded or never registered\");\n        _;\n    }\n\n    \n    modifier onlyRefundable(address _darknodeID) {\n        require(isRefundable(_darknodeID), \"DarknodeRegistry: must be deregistered for at least one epoch\");\n        _;\n    }\n\n    \n    \n    modifier onlyDeregisterable(address _darknodeID) {\n        require(isDeregisterable(_darknodeID), \"DarknodeRegistry: must be deregisterable\");\n        _;\n    }\n\n    \n    modifier onlySlasher() {\n        require(address(slasher) == msg.sender, \"DarknodeRegistry: must be slasher\");\n        _;\n    }\n\n    \n    \n    modifier onlyDarknode(address _darknodeID) {\n        require(isRegistered(_darknodeID), \"DarknodeRegistry: invalid darknode\");\n        _;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    constructor(\n        string memory _VERSION,\n        RenToken _renAddress,\n        DarknodeRegistryStore _storeAddress,\n        uint256 _minimumBond,\n        uint256 _minimumPodSize,\n        uint256 _minimumEpochIntervalSeconds\n    ) public {\n        VERSION = _VERSION;\n\n        store = _storeAddress;\n        ren = _renAddress;\n\n        minimumBond = _minimumBond;\n        nextMinimumBond = minimumBond;\n\n        minimumPodSize = _minimumPodSize;\n        nextMinimumPodSize = minimumPodSize;\n\n        minimumEpochInterval = _minimumEpochIntervalSeconds;\n        nextMinimumEpochInterval = minimumEpochInterval;\n\n        currentEpoch = Epoch({\n            epochhash: uint256(blockhash(block.number - 1)),\n            blocktime: block.timestamp\n        });\n        numDarknodes = 0;\n        numDarknodesNextEpoch = 0;\n        numDarknodesPreviousEpoch = 0;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function register(address _darknodeID, bytes calldata _publicKey) external onlyRefunded(_darknodeID) {\n        require(_darknodeID != address(0), \"DarknodeRegistry: darknode address cannot be zero\");\n        \n        \n\n        \n        require(ren.transferFrom(msg.sender, address(store), minimumBond), \"DarknodeRegistry: bond transfer failed\");\n\n        \n        store.appendDarknode(\n            _darknodeID,\n            msg.sender,\n            minimumBond,\n            _publicKey,\n            currentEpoch.blocktime.add(minimumEpochInterval),\n            0\n        );\n\n        numDarknodesNextEpoch = numDarknodesNextEpoch.add(1);\n\n        \n        emit LogDarknodeRegistered(msg.sender, _darknodeID, minimumBond);\n    }\n\n    \n    \n    \n    \n    \n    \n    function deregister(address _darknodeID) external onlyDeregisterable(_darknodeID) onlyDarknodeOwner(_darknodeID) {\n        deregisterDarknode(_darknodeID);\n    }\n\n    \n    \n    \n    function epoch() external {\n        if (previousEpoch.blocktime == 0) {\n            \n            require(msg.sender == owner(), \"DarknodeRegistry: not authorized (first epochs)\");\n        }\n\n        \n        require(block.timestamp >= currentEpoch.blocktime.add(minimumEpochInterval), \"DarknodeRegistry: epoch interval has not passed\");\n        uint256 epochhash = uint256(blockhash(block.number - 1));\n\n        \n        previousEpoch = currentEpoch;\n        currentEpoch = Epoch({\n            epochhash: epochhash,\n            blocktime: block.timestamp\n        });\n\n        \n        numDarknodesPreviousEpoch = numDarknodes;\n        numDarknodes = numDarknodesNextEpoch;\n\n        \n        if (nextMinimumBond != minimumBond) {\n            minimumBond = nextMinimumBond;\n            emit LogMinimumBondUpdated(minimumBond, nextMinimumBond);\n        }\n        if (nextMinimumPodSize != minimumPodSize) {\n            minimumPodSize = nextMinimumPodSize;\n            emit LogMinimumPodSizeUpdated(minimumPodSize, nextMinimumPodSize);\n        }\n        if (nextMinimumEpochInterval != minimumEpochInterval) {\n            minimumEpochInterval = nextMinimumEpochInterval;\n            emit LogMinimumEpochIntervalUpdated(minimumEpochInterval, nextMinimumEpochInterval);\n        }\n        if (nextSlasher != slasher) {\n            slasher = nextSlasher;\n            emit LogSlasherUpdated(address(slasher), address(nextSlasher));\n        }\n        if (address(darknodePayment) != address(0x0)) {\n            darknodePayment.changeCycle();\n        }\n\n        \n        emit LogNewEpoch(epochhash);\n    }\n\n    \n    \n    \n    function transferStoreOwnership(DarknodeRegistry _newOwner) external onlyOwner {\n        store.transferOwnership(address(_newOwner));\n        _newOwner.claimStoreOwnership();\n    }\n\n    \n    \n    \n    function claimStoreOwnership() external {\n        store.claimOwnership();\n    }\n\n    \n    \n    \n    \n    function updateDarknodePayment(IDarknodePayment _darknodePayment) external onlyOwner {\n        require(address(_darknodePayment) != address(0x0), \"DarknodeRegistry: invalid Darknode Payment address\");\n        IDarknodePayment previousDarknodePayment = darknodePayment;\n        darknodePayment = _darknodePayment;\n        emit LogDarknodePaymentUpdated(previousDarknodePayment, darknodePayment);\n    }\n\n    \n    \n    \n    function updateMinimumBond(uint256 _nextMinimumBond) external onlyOwner {\n        \n        nextMinimumBond = _nextMinimumBond;\n    }\n\n    \n    \n    function updateMinimumPodSize(uint256 _nextMinimumPodSize) external onlyOwner {\n        \n        nextMinimumPodSize = _nextMinimumPodSize;\n    }\n\n    \n    \n    function updateMinimumEpochInterval(uint256 _nextMinimumEpochInterval) external onlyOwner {\n        \n        nextMinimumEpochInterval = _nextMinimumEpochInterval;\n    }\n\n    \n    \n    \n    function updateSlasher(IDarknodeSlasher _slasher) external onlyOwner {\n        require(address(_slasher) != address(0), \"DarknodeRegistry: invalid slasher address\");\n        nextSlasher = _slasher;\n    }\n\n    \n    \n    \n    \n    \n    function slash(address _guilty, address _challenger, uint256 _percentage)\n        external\n        onlySlasher\n        onlyDarknode(_guilty)\n    {\n        require(_percentage <= 100, \"DarknodeRegistry: invalid percent\");\n\n        \n        if (isDeregisterable(_guilty)) {\n            deregisterDarknode(_guilty);\n        }\n\n        uint256 totalBond = store.darknodeBond(_guilty);\n        uint256 penalty = totalBond.div(100).mul(_percentage);\n        uint256 challengerReward = penalty.div(2);\n        uint256 darknodePaymentReward = penalty.sub(challengerReward);\n        if (challengerReward > 0) {\n            \n            store.updateDarknodeBond(_guilty, totalBond.sub(penalty));\n\n            \n            require(address(darknodePayment) != address(0x0), \"DarknodeRegistry: invalid payment address\");\n            require(ren.transfer(address(darknodePayment.store()), darknodePaymentReward), \"DarknodeRegistry: reward transfer failed\");\n            require(ren.transfer(_challenger, challengerReward), \"DarknodeRegistry: reward transfer failed\");\n        }\n\n        emit LogDarknodeSlashed(store.darknodeOwner(_guilty), _guilty, _challenger, _percentage);\n    }\n\n    \n    \n    \n    \n    \n    \n    function refund(address _darknodeID) external onlyRefundable(_darknodeID) {\n        address darknodeOwner = store.darknodeOwner(_darknodeID);\n\n        \n        uint256 amount = store.darknodeBond(_darknodeID);\n\n        \n        store.removeDarknode(_darknodeID);\n\n        \n        require(ren.transfer(darknodeOwner, amount), \"DarknodeRegistry: bond transfer failed\");\n\n        \n        emit LogDarknodeOwnerRefunded(darknodeOwner, amount);\n    }\n\n    \n    \n    function getDarknodeOwner(address _darknodeID) external view returns (address payable) {\n        return store.darknodeOwner(_darknodeID);\n    }\n\n    \n    \n    function getDarknodeBond(address _darknodeID) external view returns (uint256) {\n        return store.darknodeBond(_darknodeID);\n    }\n\n    \n    \n    function getDarknodePublicKey(address _darknodeID) external view returns (bytes memory) {\n        return store.darknodePublicKey(_darknodeID);\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function getDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n        return getDarknodesFromEpochs(_start, count, false);\n    }\n\n    \n    \n    function getPreviousDarknodes(address _start, uint256 _count) external view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodesPreviousEpoch;\n        }\n        return getDarknodesFromEpochs(_start, count, true);\n    }\n\n    \n    \n    \n    function isPendingRegistration(address _darknodeID) external view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        return registeredAt != 0 && registeredAt > currentEpoch.blocktime;\n    }\n\n    \n    \n    function isPendingDeregistration(address _darknodeID) external view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt > currentEpoch.blocktime;\n    }\n\n    \n    function isDeregistered(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return deregisteredAt != 0 && deregisteredAt <= currentEpoch.blocktime;\n    }\n\n    \n    \n    \n    function isDeregisterable(address _darknodeID) public view returns (bool) {\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        \n        \n        return isRegistered(_darknodeID) && deregisteredAt == 0;\n    }\n\n    \n    \n    \n    function isRefunded(address _darknodeID) public view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        return registeredAt == 0 && deregisteredAt == 0;\n    }\n\n    \n    \n    function isRefundable(address _darknodeID) public view returns (bool) {\n        return isDeregistered(_darknodeID) && store.darknodeDeregisteredAt(_darknodeID) <= previousEpoch.blocktime;\n    }\n\n    \n    function isRegistered(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, currentEpoch);\n    }\n\n    \n    function isRegisteredInPreviousEpoch(address _darknodeID) public view returns (bool) {\n        return isRegisteredInEpoch(_darknodeID, previousEpoch);\n    }\n\n    \n    \n    \n    \n    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {\n        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);\n        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);\n        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocktime;\n        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocktime;\n        \n        \n        return registered && notDeregistered;\n    }\n\n    \n    \n    \n    \n    \n    function getDarknodesFromEpochs(address _start, uint256 _count, bool _usePreviousEpoch) private view returns (address[] memory) {\n        uint256 count = _count;\n        if (count == 0) {\n            count = numDarknodes;\n        }\n\n        address[] memory nodes = new address[](count);\n\n        \n        uint256 n = 0;\n        address next = _start;\n        if (next == address(0)) {\n            next = store.begin();\n        }\n\n        \n        while (n < count) {\n            if (next == address(0)) {\n                break;\n            }\n            \n            bool includeNext;\n            if (_usePreviousEpoch) {\n                includeNext = isRegisteredInPreviousEpoch(next);\n            } else {\n                includeNext = isRegistered(next);\n            }\n            if (!includeNext) {\n                next = store.next(next);\n                continue;\n            }\n            nodes[n] = next;\n            next = store.next(next);\n            n += 1;\n        }\n        return nodes;\n    }\n\n    \n    function deregisterDarknode(address _darknodeID) private {\n        \n        store.updateDarknodeDeregisteredAt(_darknodeID, currentEpoch.blocktime.add(minimumEpochInterval));\n        numDarknodesNextEpoch = numDarknodesNextEpoch.sub(1);\n\n        \n        emit LogDarknodeDeregistered(msg.sender, _darknodeID);\n    }\n}\n\ncontract DarknodePaymentStore is Claimable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n    using ERC20WithFees for ERC20;\n\n    string public VERSION; \n\n    \n    address constant public ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    \n    mapping(address => mapping(address => uint256)) public darknodeBalances;\n\n    \n    mapping(address => uint256) public lockedBalances;\n\n    \n    \n    \n    constructor(\n        string memory _VERSION\n    ) public {\n        VERSION = _VERSION;\n    }\n\n    \n    function () external payable {\n    }\n\n    \n    \n    \n    \n    function totalBalance(address _token) public view returns (uint256) {\n        if (_token == ETHEREUM) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).balanceOf(address(this));\n        }\n    }\n\n    \n    \n    \n    \n    \n    \n    function availableBalance(address _token) public view returns (uint256) {\n        return totalBalance(_token).sub(lockedBalances[_token]);\n    }\n\n    \n    \n    \n    \n    \n    \n    function incrementDarknodeBalance(address _darknode, address _token, uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"DarknodePaymentStore: invalid amount\");\n        require(availableBalance(_token) >= _amount, \"DarknodePaymentStore: insufficient contract balance\");\n\n        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);\n        lockedBalances[_token] = lockedBalances[_token].add(_amount);\n    }\n\n    \n    \n    \n    \n    \n    \n    function transfer(address _darknode, address _token, uint256 _amount, address payable _recipient) external onlyOwner {\n        require(darknodeBalances[_darknode][_token] >= _amount, \"DarknodePaymentStore: insufficient darknode balance\");\n        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);\n        lockedBalances[_token] = lockedBalances[_token].sub(_amount);\n\n        if (_token == ETHEREUM) {\n            _recipient.transfer(_amount);\n        } else {\n            ERC20(_token).safeTransfer(_recipient, _amount);\n        }\n    }\n\n}\n\ncontract DarknodePayment is Claimable {\n    using SafeMath for uint256;\n    using SafeERC20 for ERC20;\n    using ERC20WithFees for ERC20;\n\n    string public VERSION; \n\n    \n    address constant public ETHEREUM = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    DarknodeRegistry public darknodeRegistry; \n\n    \n    \n    DarknodePaymentStore public store; \n\n    \n    \n    address public cycleChanger;\n\n    uint256 public currentCycle;\n    uint256 public previousCycle;\n\n    \n    \n    \n    address[] public pendingTokens;\n\n    \n    \n    address[] public registeredTokens;\n\n    \n    \n    mapping(address => uint256) public registeredTokenIndex;\n\n    \n    \n    \n    mapping(address => uint256) public unclaimedRewards;\n\n    \n    \n    mapping(address => uint256) public previousCycleRewardShare;\n\n    \n    uint256 public cycleStartTime;\n\n    \n    uint256 public nextCyclePayoutPercent;\n\n    \n    uint256 public currentCyclePayoutPercent;\n\n    \n    \n    \n    mapping(address => mapping(uint256 => bool)) public rewardClaimed;\n\n    \n    \n    \n    event LogDarknodeClaim(address indexed _darknode, uint256 _cycle);\n\n    \n    \n    \n    \n    event LogPaymentReceived(address indexed _payer, uint256 _amount, address indexed _token);\n\n    \n    \n    \n    \n    event LogDarknodeWithdrew(address indexed _payee, uint256 _value, address indexed _token);\n\n    \n    \n    \n    event LogPayoutPercentChanged(uint256 _newPercent, uint256 _oldPercent);\n\n    \n    \n    \n    event LogCycleChangerChanged(address indexed _newCycleChanger, address indexed _oldCycleChanger);\n\n    \n    \n    event LogTokenRegistered(address indexed _token);\n\n    \n    \n    event LogTokenDeregistered(address indexed _token);\n\n    \n    \n    \n    event LogDarknodeRegistryUpdated(DarknodeRegistry indexed _previousDarknodeRegistry, DarknodeRegistry indexed _nextDarknodeRegistry);\n\n    \n    modifier onlyDarknode(address _darknode) {\n        require(darknodeRegistry.isRegistered(_darknode), \"DarknodePayment: darknode is not registered\");\n        _;\n    }\n\n    \n    modifier validPercent(uint256 _percent) {\n        require(_percent <= 100, \"DarknodePayment: invalid percentage\");\n        _;\n    }\n\n    \n    modifier onlyCycleChanger {\n        require(msg.sender == cycleChanger, \"DarknodePayment: not cycle changer\");\n        _;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    constructor(\n        string memory _VERSION,\n        DarknodeRegistry _darknodeRegistry,\n        DarknodePaymentStore _darknodePaymentStore,\n        uint256 _cyclePayoutPercent\n    ) public validPercent(_cyclePayoutPercent) {\n        VERSION = _VERSION;\n        darknodeRegistry = _darknodeRegistry;\n        store = _darknodePaymentStore;\n        nextCyclePayoutPercent = _cyclePayoutPercent;\n        \n        cycleChanger = msg.sender;\n\n        \n        (currentCycle, cycleStartTime) = darknodeRegistry.currentEpoch();\n        currentCyclePayoutPercent = nextCyclePayoutPercent;\n    }\n\n    \n    \n    \n    \n    function updateDarknodeRegistry(DarknodeRegistry _darknodeRegistry) external onlyOwner {\n        require(address(_darknodeRegistry) != address(0x0), \"DarknodePayment: invalid Darknode Registry address\");\n        DarknodeRegistry previousDarknodeRegistry = darknodeRegistry;\n        darknodeRegistry = _darknodeRegistry;\n        emit LogDarknodeRegistryUpdated(previousDarknodeRegistry, darknodeRegistry);\n    }\n\n    \n    \n    \n    \n    \n    function withdraw(address _darknode, address _token) public {\n        address payable darknodeOwner = darknodeRegistry.getDarknodeOwner(_darknode);\n        require(darknodeOwner != address(0x0), \"DarknodePayment: invalid darknode owner\");\n\n        uint256 amount = store.darknodeBalances(_darknode, _token);\n        require(amount > 0, \"DarknodePayment: nothing to withdraw\");\n\n        store.transfer(_darknode, _token, amount, darknodeOwner);\n        emit LogDarknodeWithdrew(_darknode, amount, _token);\n    }\n\n    function withdrawMultiple(address _darknode, address[] calldata _tokens) external {\n        for (uint i = 0; i < _tokens.length; i++) {\n            withdraw(_darknode, _tokens[i]);\n        }\n    }\n\n    \n    function () external payable {\n        address(store).transfer(msg.value);\n        emit LogPaymentReceived(msg.sender, msg.value, ETHEREUM);\n    }\n\n    \n    \n    function currentCycleRewardPool(address _token) external view returns (uint256) {\n        uint256 total = store.availableBalance(_token).sub(unclaimedRewards[_token]);\n        return total.div(100).mul(currentCyclePayoutPercent);\n    }\n\n    function darknodeBalances(address _darknodeID, address _token) external view returns (uint256) {\n        return store.darknodeBalances(_darknodeID, _token);\n    }\n\n    \n    function changeCycle() external onlyCycleChanger returns (uint256) {\n\n        \n        uint arrayLength = registeredTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            _snapshotBalance(registeredTokens[i]);\n        }\n\n        \n        previousCycle = currentCycle;\n        (currentCycle, cycleStartTime) = darknodeRegistry.currentEpoch();\n        currentCyclePayoutPercent = nextCyclePayoutPercent;\n\n        \n        _updateTokenList();\n        return currentCycle;\n    }\n\n    \n    \n    \n    \n    function deposit(uint256 _value, address _token) external payable {\n        uint256 receivedValue;\n        if (_token == ETHEREUM) {\n            require(_value == msg.value, \"DarknodePayment: mismatched deposit value\");\n            receivedValue = msg.value;\n            address(store).transfer(msg.value);\n        } else {\n            require(msg.value == 0, \"DarknodePayment: unexpected ether transfer\");\n            require(registeredTokenIndex[_token] != 0, \"DarknodePayment: token not registered\");\n            \n            receivedValue = ERC20(_token).safeTransferFromWithFees(msg.sender, address(store), _value);\n        }\n        emit LogPaymentReceived(msg.sender, receivedValue, _token);\n    }\n\n    \n    \n    \n    \n    function forward(address _token) external {\n        if (_token == ETHEREUM) {\n            \n            \n            \n            \n            address(store).transfer(address(this).balance);\n        } else {\n            ERC20(_token).safeTransfer(address(store), ERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n    \n    \n    function claim(address _darknode) external onlyDarknode(_darknode) {\n        require(darknodeRegistry.isRegisteredInPreviousEpoch(_darknode), \"DarknodePayment: cannot claim for this epoch\");\n        \n        _claimDarknodeReward(_darknode);\n        emit LogDarknodeClaim(_darknode, previousCycle);\n    }\n\n    \n    \n    \n    \n    function registerToken(address _token) external onlyOwner {\n        require(registeredTokenIndex[_token] == 0, \"DarknodePayment: token already registered\");\n        require(!tokenPendingRegistration(_token), \"DarknodePayment: token already pending registration\");\n        pendingTokens.push(_token);\n    }\n\n    function tokenPendingRegistration(address _token) public view returns (bool) {\n        uint arrayLength = pendingTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            if (pendingTokens[i] == _token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    \n    \n    \n    \n    function deregisterToken(address _token) external onlyOwner {\n        require(registeredTokenIndex[_token] > 0, \"DarknodePayment: token not registered\");\n        _deregisterToken(_token);\n    }\n\n    \n    \n    \n    function updateCycleChanger(address _addr) external onlyOwner {\n        require(_addr != address(0), \"DarknodePayment: invalid contract address\");\n        emit LogCycleChangerChanged(_addr, cycleChanger);\n        cycleChanger = _addr;\n    }\n\n    \n    \n    \n    function updatePayoutPercentage(uint256 _percent) external onlyOwner validPercent(_percent) {\n        uint256 oldPayoutPercent = nextCyclePayoutPercent;\n        nextCyclePayoutPercent = _percent;\n        emit LogPayoutPercentChanged(nextCyclePayoutPercent, oldPayoutPercent);\n    }\n\n    \n    \n    \n    \n    function transferStoreOwnership(DarknodePayment _newOwner) external onlyOwner {\n        store.transferOwnership(address(_newOwner));\n        _newOwner.claimStoreOwnership();\n    }\n\n    \n    \n    \n    function claimStoreOwnership() external {\n        store.claimOwnership();\n    }\n\n    \n    \n    \n    \n    \n    function _claimDarknodeReward(address _darknode) private {\n        require(!rewardClaimed[_darknode][previousCycle], \"DarknodePayment: reward already claimed\");\n        rewardClaimed[_darknode][previousCycle] = true;\n        uint arrayLength = registeredTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            address token = registeredTokens[i];\n\n            \n            if (previousCycleRewardShare[token] > 0) {\n                unclaimedRewards[token] = unclaimedRewards[token].sub(previousCycleRewardShare[token]);\n                store.incrementDarknodeBalance(_darknode, token, previousCycleRewardShare[token]);\n            }\n        }\n    }\n\n    \n    \n    \n    \n    function _snapshotBalance(address _token) private {\n        uint256 shareCount = darknodeRegistry.numDarknodesPreviousEpoch();\n        if (shareCount == 0) {\n            unclaimedRewards[_token] = 0;\n            previousCycleRewardShare[_token] = 0;\n        } else {\n            \n            uint256 total = store.availableBalance(_token);\n            unclaimedRewards[_token] = total.div(100).mul(currentCyclePayoutPercent);\n            previousCycleRewardShare[_token] = unclaimedRewards[_token].div(shareCount);\n        }\n    }\n\n    \n    \n    \n    \n    function _deregisterToken(address _token) private {\n        address lastToken = registeredTokens[registeredTokens.length.sub(1)];\n        uint256 deletedTokenIndex = registeredTokenIndex[_token].sub(1);\n        \n        registeredTokens[deletedTokenIndex] = lastToken;\n        registeredTokenIndex[lastToken] = registeredTokenIndex[_token];\n        \n        \n        registeredTokens.pop();\n        registeredTokenIndex[_token] = 0;\n\n        emit LogTokenDeregistered(_token);\n    }\n\n    \n    \n    function _updateTokenList() private {\n        \n        uint arrayLength = pendingTokens.length;\n        for (uint i = 0; i < arrayLength; i++) {\n            address token = pendingTokens[i];\n            registeredTokens.push(token);\n            registeredTokenIndex[token] = registeredTokens.length;\n            emit LogTokenRegistered(token);\n        }\n        pendingTokens.length = 0;\n    }\n\n}\n\nlibrary ECDSA {\n    \n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        \n        if (signature.length != 65) {\n            revert(\"ECDSA: signature length is invalid\");\n        }\n\n        \n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        \n        \n        \n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: signature.s is in the wrong range\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: signature.v is in the wrong range\");\n        }\n\n        \n        return ecrecover(hash, v, r, s);\n    }\n\n    \n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        \n        \n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n\nlibrary String {\n\n    \n    \n    function fromUint(uint _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    \n    function fromBytes32(bytes32 _value) internal pure returns(string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(32 * 2 + 2);\n        str[0] = '0';\n        str[1] = 'x';\n        for (uint i = 0; i < 32; i++) {\n            str[2+i*2] = alphabet[uint(uint8(_value[i] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(_value[i] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    \n    function fromAddress(address _addr) internal pure returns(string memory) {\n        bytes32 value = bytes32(uint256(_addr));\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(20 * 2 + 2);\n        str[0] = '0';\n        str[1] = 'x';\n        for (uint i = 0; i < 20; i++) {\n            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    \n    function add4(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b, c, d));\n    }\n}\n\nlibrary Compare {\n\n    function bytesEqual(bytes memory a, bytes memory b) internal pure returns (bool) {\n        if (a.length != b.length) {\n            return false;\n        }\n        for (uint i = 0; i < a.length; i ++) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nlibrary Validate {\n\n    \n    \n    \n    \n    function duplicatePropose(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash1,\n        uint256 _validRound1,\n        bytes memory _signature1,\n        bytes memory _blockhash2,\n        uint256 _validRound2,\n        bytes memory _signature2\n    ) internal pure returns (address) {\n        require(!Compare.bytesEqual(_signature1, _signature2), \"Validate: same signature\");\n        address signer1 = recoverPropose(_height, _round, _blockhash1, _validRound1, _signature1);\n        address signer2 = recoverPropose(_height, _round, _blockhash2, _validRound2, _signature2);\n        require(signer1 == signer2, \"Validate: different signer\");\n        return signer1;\n    }\n\n    function recoverPropose(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        uint256 _validRound,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return ECDSA.recover(sha256(proposeMessage(_height, _round, _blockhash, _validRound)), _signature);\n    }\n\n    function proposeMessage(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        uint256 _validRound\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            \"Propose(Height=\", String.fromUint(_height),\n            \",Round=\", String.fromUint(_round),\n            \",BlockHash=\", string(_blockhash),\n            \",ValidRound=\", String.fromUint(_validRound),\n            \")\"\n        );\n    }\n\n    \n    \n    \n    \n    function duplicatePrevote(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash1,\n        bytes memory _signature1,\n        bytes memory _blockhash2,\n        bytes memory _signature2\n    ) internal pure returns (address) {\n        require(!Compare.bytesEqual(_signature1, _signature2), \"Validate: same signature\");\n        address signer1 = recoverPrevote(_height, _round, _blockhash1, _signature1);\n        address signer2 = recoverPrevote(_height, _round, _blockhash2, _signature2);\n        require(signer1 == signer2, \"Validate: different signer\");\n        return signer1;\n    }\n\n    function recoverPrevote(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return ECDSA.recover(sha256(prevoteMessage(_height, _round, _blockhash)), _signature);\n    }\n\n    function prevoteMessage(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            \"Prevote(Height=\", String.fromUint(_height),\n            \",Round=\", String.fromUint(_round),\n            \",BlockHash=\", string(_blockhash),\n            \")\"\n        );\n    }\n\n    \n    \n    \n    \n    function duplicatePrecommit(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash1,\n        bytes memory _signature1,\n        bytes memory _blockhash2,\n        bytes memory _signature2\n    ) internal pure returns (address) {\n        require(!Compare.bytesEqual(_signature1, _signature2), \"Validate: same signature\");\n        address signer1 = recoverPrecommit(_height, _round, _blockhash1, _signature1);\n        address signer2 = recoverPrecommit(_height, _round, _blockhash2, _signature2);\n        require(signer1 == signer2, \"Validate: different signer\");\n        return signer1;\n    }\n\n    function recoverPrecommit(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return ECDSA.recover(sha256(precommitMessage(_height, _round, _blockhash)), _signature);\n    }\n\n    function precommitMessage(\n        uint256 _height,\n        uint256 _round,\n        bytes memory _blockhash\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            \"Precommit(Height=\", String.fromUint(_height),\n            \",Round=\", String.fromUint(_round),\n            \",BlockHash=\", string(_blockhash),\n            \")\"\n        );\n    }\n\n    function recoverSecret(\n        uint256 _a,\n        uint256 _b,\n        uint256 _c,\n        uint256 _d,\n        uint256 _e,\n        uint256 _f,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        return ECDSA.recover(sha256(secretMessage(_a, _b, _c, _d, _e, _f)), _signature);\n    }\n\n    function secretMessage(\n        uint256 _a,\n        uint256 _b,\n        uint256 _c,\n        uint256 _d,\n        uint256 _e,\n        uint256 _f\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            \"Secret(\",\n            \"ShamirShare(\",\n            String.fromUint(_a),\n            \",\", String.fromUint(_b),\n            \",S256N(\", String.fromUint(_c),\n            \"),\",\n            \"S256PrivKey(\",\n            \"S256N(\", String.fromUint(_d),\n            \"),\",\n            \"S256P(\", String.fromUint(_e),\n            \"),\",\n            \"S256P(\", String.fromUint(_f),\n            \")\",\n            \")\",\n            \")\",\n            \")\"\n        );\n    }\n}\n\ncontract DarknodeSlasher is Claimable {\n\n    DarknodeRegistry public darknodeRegistry;\n\n    uint256 public blacklistSlashPercent;\n    uint256 public maliciousSlashPercent;\n    uint256 public secretRevealSlashPercent;\n\n    \n    \n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public slashed;\n\n    \n    mapping(address => bool) public secretRevealed;\n\n    \n    mapping(address => bool) public blacklisted;\n\n    \n    \n    \n    event LogDarknodeRegistryUpdated(DarknodeRegistry _previousDarknodeRegistry, DarknodeRegistry _nextDarknodeRegistry);\n\n    \n    modifier validPercent(uint256 _percent) {\n        require(_percent <= 100, \"DarknodeSlasher: invalid percentage\");\n        _;\n    }\n\n    constructor(\n        DarknodeRegistry _darknodeRegistry\n    ) public {\n        darknodeRegistry = _darknodeRegistry;\n    }\n\n    \n    \n    \n    \n    function updateDarknodeRegistry(DarknodeRegistry _darknodeRegistry) external onlyOwner {\n        require(address(_darknodeRegistry) != address(0x0), \"DarknodeSlasher: invalid Darknode Registry address\");\n        DarknodeRegistry previousDarknodeRegistry = darknodeRegistry;\n        darknodeRegistry = _darknodeRegistry;\n        emit LogDarknodeRegistryUpdated(previousDarknodeRegistry, darknodeRegistry);\n    }\n\n    function setBlacklistSlashPercent(uint256 _percentage) public validPercent(_percentage) onlyOwner {\n        blacklistSlashPercent = _percentage;\n    }\n\n    function setMaliciousSlashPercent(uint256 _percentage) public validPercent(_percentage) onlyOwner {\n        maliciousSlashPercent = _percentage;\n    }\n\n    function setSecretRevealSlashPercent(uint256 _percentage) public validPercent(_percentage) onlyOwner {\n        secretRevealSlashPercent = _percentage;\n    }\n\n    function slash(address _guilty, address _challenger, uint256 _percentage)\n        external\n        onlyOwner\n    {\n        darknodeRegistry.slash(_guilty, _challenger, _percentage);\n    }\n\n    function blacklist(address _guilty) external onlyOwner {\n        require(!blacklisted[_guilty], \"DarknodeSlasher: already blacklisted\");\n        blacklisted[_guilty] = true;\n        darknodeRegistry.slash(_guilty, owner(), blacklistSlashPercent);\n    }\n\n    function slashDuplicatePropose(\n        uint256 _height,\n        uint256 _round,\n        bytes calldata _blockhash1,\n        uint256 _validRound1,\n        bytes calldata _signature1,\n        bytes calldata _blockhash2,\n        uint256 _validRound2,\n        bytes calldata _signature2\n    ) external {\n        address signer = Validate.duplicatePropose(\n            _height,\n            _round,\n            _blockhash1,\n            _validRound1,\n            _signature1,\n            _blockhash2,\n            _validRound2,\n            _signature2\n        );\n        require(!slashed[_height][_round][signer], \"DarknodeSlasher: already slashed\");\n        slashed[_height][_round][signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\n    }\n\n    function slashDuplicatePrevote(\n        uint256 _height,\n        uint256 _round,\n        bytes calldata _blockhash1,\n        bytes calldata _signature1,\n        bytes calldata _blockhash2,\n        bytes calldata _signature2\n    ) external {\n        address signer = Validate.duplicatePrevote(\n            _height,\n            _round,\n            _blockhash1,\n            _signature1,\n            _blockhash2,\n            _signature2\n        );\n        require(!slashed[_height][_round][signer], \"DarknodeSlasher: already slashed\");\n        slashed[_height][_round][signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\n    }\n\n    function slashDuplicatePrecommit(\n        uint256 _height,\n        uint256 _round,\n        bytes calldata _blockhash1,\n        bytes calldata _signature1,\n        bytes calldata _blockhash2,\n        bytes calldata _signature2\n    ) external {\n        address signer = Validate.duplicatePrecommit(\n            _height,\n            _round,\n            _blockhash1,\n            _signature1,\n            _blockhash2,\n            _signature2\n        );\n        require(!slashed[_height][_round][signer], \"DarknodeSlasher: already slashed\");\n        slashed[_height][_round][signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, maliciousSlashPercent);\n    }\n\n    function slashSecretReveal(\n        uint256 _a,\n        uint256 _b,\n        uint256 _c,\n        uint256 _d,\n        uint256 _e,\n        uint256 _f,\n        bytes calldata _signature\n    ) external {\n        address signer = Validate.recoverSecret(\n            _a,\n            _b,\n            _c,\n            _d,\n            _e,\n            _f,\n            _signature\n        );\n        require(!secretRevealed[signer], \"DarknodeSlasher: already slashed\");\n        secretRevealed[signer] = true;\n        darknodeRegistry.slash(signer, msg.sender, secretRevealSlashPercent);\n    }\n}\n\ncontract ERC20Shifted is ERC20, ERC20Detailed, Claimable, CanReclaimTokens {\n\n    \n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public ERC20Detailed(_name, _symbol, _decimals) {}\n\n    function burn(address _from, uint256 _amount) public onlyOwner {\n        _burn(_from, _amount);\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n}\n\ncontract zBTC is ERC20Shifted(\"Shifted BTC\", \"zBTC\", 8) {}\n\ncontract zZEC is ERC20Shifted(\"Shifted ZEC\", \"zZEC\", 8) {}\n\ncontract zBCH is ERC20Shifted(\"Shifted BCH\", \"zBCH\", 8) {}\n\ninterface IShifter {\n    function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes calldata _sig) external returns (uint256);\n    function shiftOut(bytes calldata _to, uint256 _amount) external returns (uint256);\n    function shiftInFee() external view returns (uint256);\n    function shiftOutFee() external view returns (uint256);\n}\n\ncontract Shifter is IShifter, Claimable, CanReclaimTokens {\n    using SafeMath for uint256;\n\n    uint8 public version = 2;\n\n    uint256 constant BIPS_DENOMINATOR = 10000;\n    uint256 public minShiftAmount;\n\n    \n    ERC20Shifted public token;\n\n    \n    address public mintAuthority;\n\n    \n    \n    \n    \n    address public feeRecipient;\n\n    \n    uint16 public shiftInFee;\n\n    \n    uint16 public shiftOutFee;\n\n    \n    mapping (bytes32=>bool) public status;\n\n    \n    \n    uint256 public nextShiftID = 0;\n\n    event LogShiftIn(\n        address indexed _to,\n        uint256 _amount,\n        uint256 indexed _shiftID,\n        bytes32 indexed _signedMessageHash\n    );\n    event LogShiftOut(\n        bytes _to,\n        uint256 _amount,\n        uint256 indexed _shiftID,\n        bytes indexed _indexedTo\n    );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _shiftInFee, uint16 _shiftOutFee, uint256 _minShiftOutAmount) public {\n        minShiftAmount = _minShiftOutAmount;\n        token = _token;\n        shiftInFee = _shiftInFee;\n        shiftOutFee = _shiftOutFee;\n        updateMintAuthority(_mintAuthority);\n        updateFeeRecipient(_feeRecipient);\n    }\n\n    \n\n    \n    \n    \n    function claimTokenOwnership() public {\n        token.claimOwnership();\n    }\n\n    \n    function transferTokenOwnership(Shifter _nextTokenOwner) public onlyOwner {\n        token.transferOwnership(address(_nextTokenOwner));\n        _nextTokenOwner.claimTokenOwnership();\n    }\n\n    \n    \n    \n    function updateMintAuthority(address _nextMintAuthority) public onlyOwner {\n        require(_nextMintAuthority != address(0), \"Shifter: mintAuthority cannot be set to address zero\");\n        mintAuthority = _nextMintAuthority;\n    }\n\n    \n    \n    \n    function updateMinimumShiftOutAmount(uint256 _minShiftOutAmount) public onlyOwner {\n        minShiftAmount = _minShiftOutAmount;\n    }\n\n    \n    \n    \n    function updateFeeRecipient(address _nextFeeRecipient) public onlyOwner {\n        \n        require(_nextFeeRecipient != address(0x0), \"Shifter: fee recipient cannot be 0x0\");\n\n        feeRecipient = _nextFeeRecipient;\n    }\n\n    \n    \n    \n    function updateShiftInFee(uint16 _nextFee) public onlyOwner {\n        shiftInFee = _nextFee;\n    }\n\n    \n    \n    \n    function updateShiftOutFee(uint16 _nextFee) public onlyOwner {\n        shiftOutFee = _nextFee;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function shiftIn(bytes32 _pHash, uint256 _amount, bytes32 _nHash, bytes memory _sig) public returns (uint256) {\n        \n        bytes32 signedMessageHash = hashForSignature(_pHash, _amount, msg.sender, _nHash);\n        require(status[signedMessageHash] == false, \"Shifter: nonce hash already spent\");\n        if (!verifySignature(signedMessageHash, _sig)) {\n            \n            \n            \n            revert(\n                String.add4(\n                    \"Shifter: invalid signature - hash: \",\n                    String.fromBytes32(signedMessageHash),\n                    \", signer: \",\n                    String.fromAddress(ECDSA.recover(signedMessageHash, _sig))\n                )\n            );\n        }\n        status[signedMessageHash] = true;\n\n        \n        uint256 absoluteFee = _amount.mul(shiftInFee).div(BIPS_DENOMINATOR);\n        uint256 receivedAmount = _amount.sub(absoluteFee);\n        token.mint(msg.sender, receivedAmount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        emit LogShiftIn(msg.sender, receivedAmount, nextShiftID, signedMessageHash);\n        nextShiftID += 1;\n\n        return receivedAmount;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    function shiftOut(bytes memory _to, uint256 _amount) public returns (uint256) {\n        \n        \n        require(_to.length != 0, \"Shifter: to address is empty\");\n        require(_amount >= minShiftAmount, \"Shifter: amount is less than the minimum shiftOut amount\");\n\n        \n        uint256 absoluteFee = _amount.mul(shiftOutFee).div(BIPS_DENOMINATOR);\n        token.burn(msg.sender, _amount);\n        token.mint(feeRecipient, absoluteFee);\n\n        \n        uint256 receivedValue = _amount.sub(absoluteFee);\n        emit LogShiftOut(_to, receivedValue, nextShiftID, _to);\n        nextShiftID += 1;\n\n        return receivedValue;\n    }\n\n    \n    \n    function verifySignature(bytes32 _signedMessageHash, bytes memory _sig) public view returns (bool) {\n        return mintAuthority == ECDSA.recover(_signedMessageHash, _sig);\n    }\n\n    \n    function hashForSignature(bytes32 _pHash, uint256 _amount, address _to, bytes32 _nHash) public view returns (bytes32) {\n        return keccak256(abi.encode(_pHash, _amount, address(token), _to, _nHash));\n    }\n}\n\ncontract BTCShifter is Shifter {\n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _shiftInFee, uint16 _shiftOutFee, uint256 _minShiftOutAmount)\n        Shifter(_token, _feeRecipient, _mintAuthority, _shiftInFee, _shiftOutFee, _minShiftOutAmount) public {\n        }\n}\n\ncontract ZECShifter is Shifter {\n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _shiftInFee, uint16 _shiftOutFee, uint256 _minShiftOutAmount)\n        Shifter(_token, _feeRecipient, _mintAuthority, _shiftInFee, _shiftOutFee, _minShiftOutAmount) public {\n        }\n}\n\ncontract BCHShifter is Shifter {\n    constructor(ERC20Shifted _token, address _feeRecipient, address _mintAuthority, uint16 _shiftInFee, uint16 _shiftOutFee, uint256 _minShiftOutAmount)\n        Shifter(_token, _feeRecipient, _mintAuthority, _shiftInFee, _shiftOutFee, _minShiftOutAmount) public {\n        }\n}\n\ncontract ShifterRegistry is Claimable, CanReclaimTokens {\n\n    \n    \n    event LogShifterRegistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _shifterAddress);\n    event LogShifterDeregistered(string _symbol, string indexed _indexedSymbol, address indexed _tokenAddress, address indexed _shifterAddress);\n    event LogShifterUpdated(address indexed _tokenAddress, address indexed _currentShifterAddress, address indexed _newShifterAddress);\n\n    \n    uint256 numShifters = 0;\n\n    \n    LinkedList.List private shifterList;\n\n    \n    LinkedList.List private shiftedTokenList;\n\n    \n    mapping (address=>address) private shifterByToken;\n\n    \n    mapping (string=>address) private tokenBySymbol;\n\n    \n    \n    \n    \n    \n    function setShifter(address _tokenAddress, address _shifterAddress) external onlyOwner {\n        \n        require(!LinkedList.isInList(shifterList, _shifterAddress), \"ShifterRegistry: shifter already registered\");\n        require(shifterByToken[_tokenAddress] == address(0x0), \"ShifterRegistry: token already registered\");\n        string memory symbol = ERC20Shifted(_tokenAddress).symbol();\n        require(tokenBySymbol[symbol] == address(0x0), \"ShifterRegistry: symbol already registered\");\n\n        \n        LinkedList.append(shifterList, _shifterAddress);\n\n        \n        LinkedList.append(shiftedTokenList, _tokenAddress);\n\n        tokenBySymbol[symbol] = _tokenAddress;\n        shifterByToken[_tokenAddress] = _shifterAddress;\n        numShifters += 1;\n\n        emit LogShifterRegistered(symbol, symbol, _tokenAddress, _shifterAddress);\n    }\n\n    \n    \n    \n    \n    \n    function updateShifter(address _tokenAddress, address _newShifterAddress) external onlyOwner {\n        \n        address currentShifter = shifterByToken[_tokenAddress];\n        require(currentShifter != address(0x0), \"ShifterRegistry: token not registered\");\n\n        \n        LinkedList.remove(shifterList, currentShifter);\n\n        \n        LinkedList.append(shifterList, _newShifterAddress);\n\n        shifterByToken[_tokenAddress] = _newShifterAddress;\n\n        emit LogShifterUpdated(_tokenAddress, currentShifter, _newShifterAddress);\n    }\n\n    \n    \n    \n    \n    function removeShifter(string calldata _symbol) external onlyOwner {\n        \n        address tokenAddress = tokenBySymbol[_symbol];\n        require(tokenAddress != address(0x0), \"ShifterRegistry: symbol not registered\");\n\n        \n        address shifterAddress = shifterByToken[tokenAddress];\n\n        \n        delete shifterByToken[tokenAddress]; \n        delete tokenBySymbol[_symbol];\n        LinkedList.remove(shifterList, shifterAddress);\n        LinkedList.remove(shiftedTokenList, tokenAddress);\n        numShifters -= 1;\n\n        emit LogShifterDeregistered(_symbol, _symbol, tokenAddress, shifterAddress);\n    }\n\n    \n    function getShifters(address _start, uint256 _count) external view returns (address[] memory) {\n        return LinkedList.elements(shifterList, _start, _count == 0 ? numShifters : _count);\n    }\n\n    \n    function getShiftedTokens(address _start, uint256 _count) external view returns (address[] memory) {\n        return LinkedList.elements(shiftedTokenList, _start, _count == 0 ? numShifters : _count);\n    }\n\n    \n    \n    \n    \n    function getShifterByToken(address _tokenAddress) external view returns (IShifter) {\n        return IShifter(shifterByToken[_tokenAddress]);\n    }\n\n    \n    \n    \n    \n    function getShifterBySymbol(string calldata _tokenSymbol) external view returns (IShifter) {\n        return IShifter(shifterByToken[tokenBySymbol[_tokenSymbol]]);\n    }\n\n    \n    \n    \n    \n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (address) {\n        return tokenBySymbol[_tokenSymbol];\n    }\n}\n\ncontract ProtocolStorage {\n\n    address public owner;\n\n    \n\n    \n    \n\n    \n    \n    DarknodeRegistry internal _darknodeRegistry;\n\n    \n    ShifterRegistry internal _shifterRegistry;\n\n}\n\ncontract ProtocolLogic is Initializable, ProtocolStorage {\n\n    modifier onlyOwner() {\n         require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function initialize(address _owner) public initializer {\n        owner = _owner;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n\n    \n\n    function darknodeRegistry() public view returns (DarknodeRegistry) {\n        return ProtocolStorage._darknodeRegistry;\n    }\n\n    function darknodeRegistryStore() public view returns (DarknodeRegistryStore) {\n        return darknodeRegistry().store();\n    }\n\n    function renToken() public view returns (RenToken) {\n        return darknodeRegistry().ren();\n    }\n\n    function darknodePayment() public view returns (DarknodePayment) {\n        return DarknodePayment(_payableAddress(address(darknodeRegistry().darknodePayment())));\n    }\n\n    function darknodePaymentStore() public view returns (DarknodePaymentStore) {\n        return darknodePayment().store();\n    }\n\n    function darknodeSlasher() public view returns (DarknodeSlasher) {\n        return DarknodeSlasher(_payableAddress(address(darknodeRegistry().slasher())));\n    }\n\n    \n\n    function shifterRegistry() public view returns (ShifterRegistry) {\n        return ProtocolStorage._shifterRegistry;\n    }\n\n    function getShifters(address _start, uint256 _count) external view returns (address[] memory) {\n        return shifterRegistry().getShifters(_start, _count);\n    }\n\n    function getShiftedTokens(address _start, uint256 _count) external view returns (address[] memory) {\n        return shifterRegistry().getShiftedTokens(_start, _count);\n    }\n\n    function getShifterByToken(address _tokenAddress) external view returns (IShifter) {\n        return shifterRegistry().getShifterByToken(_tokenAddress);\n    }\n\n    function getShifterBySymbol(string calldata _tokenSymbol) external view returns (IShifter) {\n        return shifterRegistry().getShifterBySymbol(_tokenSymbol);\n    }\n\n    function getTokenBySymbol(string calldata _tokenSymbol) external view returns (address) {\n        return shifterRegistry().getTokenBySymbol(_tokenSymbol);\n    }\n\n    \n\n    \n    \n    \n    function _updateDarknodeRegistry(DarknodeRegistry _newDarknodeRegistry) public onlyOwner {\n        ProtocolStorage._darknodeRegistry = _newDarknodeRegistry;\n    }\n\n    \n    \n    function _updateShifterRegistry(ShifterRegistry _newShifterRegistry) public onlyOwner {\n        ProtocolStorage._shifterRegistry = _newShifterRegistry;\n    }\n\n    \n\n    \n    function _payableAddress(address a) internal pure returns (address payable) {\n        return address(uint160(address(a)));\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DarknodeRegistry\",\"name\":\"_newDarknodeRegistry\",\"type\":\"address\"}],\"name\":\"_updateDarknodeRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ShifterRegistry\",\"name\":\"_newShifterRegistry\",\"type\":\"address\"}],\"name\":\"_updateShifterRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodePayment\",\"outputs\":[{\"internalType\":\"contract DarknodePayment\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodePaymentStore\",\"outputs\":[{\"internalType\":\"contract DarknodePaymentStore\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeRegistry\",\"outputs\":[{\"internalType\":\"contract DarknodeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeRegistryStore\",\"outputs\":[{\"internalType\":\"contract DarknodeRegistryStore\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"darknodeSlasher\",\"outputs\":[{\"internalType\":\"contract DarknodeSlasher\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getShiftedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getShifterBySymbol\",\"outputs\":[{\"internalType\":\"contract IShifter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getShifterByToken\",\"outputs\":[{\"internalType\":\"contract IShifter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_start\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getShifters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"getTokenBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renToken\",\"outputs\":[{\"internalType\":\"contract RenToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shifterRegistry\",\"outputs\":[{\"internalType\":\"contract ShifterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProtocolLogic","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://c53838993455ce9856182a086dcd9a44cdabd44d6332dbae5afe285e632ced41"}]}