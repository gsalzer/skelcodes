{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Interface/IERC20.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function balanceOf(address _target) external view returns (uint256);\r\n    function allowance(address _target, address _spender) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Interface/IMint.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IMint {\r\n    function mint(uint256 _value) external returns (bool);\r\n    function finishMint() external returns (bool);\r\n}\r\n\r\n// File: contracts/Interface/IBurn.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IBurn {\r\n    function burn(uint256 _value) external returns(bool);\r\n}\r\n\r\n// File: contracts/Library/Ownable.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Library/SafeMath.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Library/Freezer.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @title Freezer\r\n * @author Yoonsung\r\n * @notice This Contracts is an extension of the ERC20. Transfer\r\n * of a specific address can be blocked from by the Owner of the\r\n * Token Contract.\r\n */\r\ncontract Freezer is Ownable {\r\n    event Freezed(address dsc);\r\n    event Unfreezed(address dsc);\r\n\r\n    mapping(address => bool) public freezing;\r\n\r\n    modifier isFreezed(address src) {\r\n        require(freezing[src] == false, \"Freeze/Fronzen-Account\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice The Freeze function sets the transfer limit\r\n    * for a specific address.\r\n    * @param dsc address The specify address want to limit the transfer.\r\n    */\r\n    function freeze(address dsc) external onlyOwner {\r\n        require(dsc != address(0), \"Freeze/Zero-Address\");\r\n        require(freezing[dsc] == false, \"Freeze/Already-Freezed\");\r\n\r\n        freezing[dsc] = true;\r\n\r\n        emit Freezed(dsc);\r\n    }\r\n\r\n    /**\r\n    * @notice The Freeze function removes the transfer limit\r\n    * for a specific address.\r\n    * @param dsc address The specify address want to remove the transfer.\r\n    */\r\n    function unFreeze(address dsc) external onlyOwner {\r\n        require(freezing[dsc] == true, \"Freeze/Already-Unfreezed\");\r\n\r\n        delete freezing[dsc];\r\n\r\n        emit Unfreezed(dsc);\r\n    }\r\n}\r\n\r\n// File: contracts/Library/Pauser.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @title Pauser\r\n * @author Yoonsung\r\n * @notice This Contracts is an extension of the ERC20. Transfer\r\n * of a specific address can be blocked from by the Owner of the\r\n * Token Contract.\r\n */\r\ncontract Pauser is Ownable {\r\n    event Pause(address pauser);\r\n    event Resume(address resumer);\r\n\r\n    bool public pausing;\r\n\r\n    modifier isPause() {\r\n        require(pausing == false, \"Pause/Pause-Functionality\");\r\n        _;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        require(pausing == false, \"Pause/Already-Pausing\");\r\n\r\n        pausing = true;\r\n\r\n        emit Pause(msg.sender);\r\n    }\r\n\r\n    function resume() external onlyOwner {\r\n        require(pausing == true, \"Pause/Already-Resuming\");\r\n\r\n        pausing = false;\r\n\r\n        emit Resume(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/Library/Locker.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\ncontract Locker is Ownable {\r\n    event LockedUp(address target, uint256 value);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public lockup;\r\n\r\n    modifier isLockup(address _target, uint256 _value) {\r\n        uint256 balance = IERC20(address(this)).balanceOf(_target);\r\n        require(\r\n            balance.sub(_value, \"Locker/Underflow-Value\") >= lockup[_target],\r\n            \"Locker/Impossible-Over-Lockup\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function lock(address target, uint256 value) internal onlyOwner returns (bool) {\r\n        lockup[target] = lockup[target].add(value);\r\n        emit LockedUp(target, lockup[target]);\r\n    }\r\n\r\n    function decreaseLockup(address target, uint256 value) external onlyOwner returns (bool) {\r\n        require(lockup[target] > 0, \"Locker/Not-Lockedup\");\r\n\r\n        lockup[target] = lockup[target].sub(value, \"Locker/Impossible-Underflow\");\r\n\r\n        emit LockedUp(target, lockup[target]);\r\n    }\r\n\r\n    function deleteLockup(address target) external onlyOwner returns (bool) {\r\n        require(lockup[target] > 0, \"Locker/Not-Lockedup\");\r\n\r\n        delete lockup[target];\r\n\r\n        emit LockedUp(target, 0);\r\n    }\r\n}\r\n\r\n// File: contracts/Library/Minter.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\ncontract Minter is Ownable {\r\n    event Finished();\r\n\r\n    bool public minting;\r\n\r\n    modifier isMinting() {\r\n        require(minting == true, \"Minter/Finish-Minting\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        minting = true;\r\n    }\r\n\r\n    function finishMint() external onlyOwner returns (bool) {\r\n        require(minting == true, \"Minter/Already-Finish\");\r\n\r\n        minting = false;\r\n\r\n        emit Finished();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/Xank.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Xank\r\n * @author Yoonsung\r\n * @notice The contract implements the ERC20 specification of Xank. It implements \"Mint\"\r\n * and \"Burn\" functions incidentally. \"Mint\" can only be called by the Owner of the\r\n * corresponding Contract, and \"Burn\" can be called by any Token owner. Owner of the\r\n * contract can use \"Pauser\" to stop working, \"Freezer\" to freeze accounts and \"Locker\"\r\n * to maintain Token minimum balance for some owners.\r\n */\r\ncontract Xank is IERC20, IMint, IBurn, Ownable, Freezer, Pauser, Locker, Minter {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Xank\";\r\n    string public constant symbol = \"XANK\";\r\n    uint8 public constant decimals = 16;\r\n    uint256 public totalSupply = 1000000000;\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private approved;\r\n\r\n    constructor() public Minter() {\r\n        totalSupply = totalSupply.mul(10**uint256(decimals));\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        isFreezed(msg.sender)\r\n        isLockup(msg.sender, value)\r\n        isPause\r\n        returns (bool)\r\n    {\r\n        require(to != address(0), \"Xank/Not-Allow-Zero-Address\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferWithLockup(address to, uint256 value)\r\n        external\r\n        onlyOwner\r\n        isLockup(msg.sender, value)\r\n        isPause\r\n        returns (bool)\r\n    {\r\n        require(to != address(0), \"Xank/Not-Allow-Zero-Address\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n\r\n        lock(to, value);\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external\r\n        isFreezed(from)\r\n        isLockup(from, value)\r\n        isPause\r\n        returns (bool)\r\n    {\r\n        require(from != address(0), \"Xank/Not-Allow-Zero-Address\");\r\n        require(to != address(0), \"Xank/Not-Allow-Zero-Address\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        balances[to] = balances[to].add(value);\r\n        approved[from][msg.sender] = approved[from][msg.sender].sub(value);\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 value) external isMinting onlyOwner isPause returns (bool) {\r\n        totalSupply = totalSupply.add(value);\r\n        balances[msg.sender] = balances[msg.sender].add(value);\r\n\r\n        emit Transfer(address(0), msg.sender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value) external isPause returns (bool) {\r\n        require(value <= balances[msg.sender], \"Xank/Not-Allow-Unvalued-Burn\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n\r\n        emit Transfer(msg.sender, address(0), value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external isPause returns (bool) {\r\n        require(spender != address(0), \"Xank/Not-Allow-Zero-Address\");\r\n        approved[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address target) external view returns (uint256) {\r\n        return balances[target];\r\n    }\r\n\r\n    function allowance(address target, address spender) external view returns (uint256) {\r\n        return approved[target][spender];\r\n    }\r\n}\r\n\r\n// File: contracts/Airdropper.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\ncontract Airdropper is Ownable{\r\n    Xank internal _xank;\r\n    constructor(address xank) public {\r\n        _xank = Xank(xank);\r\n    }\r\n\r\n    function airdropNoLock(address[] memory recipient, uint256[] memory amount) onlyOwner public{\r\n        require(_xank.owner() == address(this), \"NoLock/has to be owner\");\r\n        require(recipient.length == amount.length, \"NoLock/should have same length array\");\r\n        _xank.transferFrom(msg.sender, address(this), _xank.balanceOf(msg.sender));\r\n        for(uint256 i=0; i<recipient.length; i++){\r\n            _xank.transfer(recipient[i], amount[i]);\r\n        }\r\n\r\n        _xank.transferOwnership(msg.sender);\r\n        _xank.transfer(msg.sender, _xank.balanceOf(address(this)));\r\n    }\r\n\r\n    function airdropWithLock(address[] memory recipient, uint256[] memory amount) onlyOwner public{\r\n        require(_xank.owner() == address(this), \"WithLock/has to be owner\");\r\n        require(recipient.length == amount.length, \"WithLock/should have same length array\");\r\n        _xank.transferFrom(msg.sender, address(this), _xank.balanceOf(msg.sender));\r\n        for(uint256 i=0; i<recipient.length; i++){\r\n            _xank.transferWithLockup(recipient[i], amount[i]);\r\n        }\r\n\r\n        _xank.transferOwnership(msg.sender);\r\n        _xank.transfer(msg.sender, _xank.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropNoLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropWithLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xank\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Airdropper","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"0000000000000000000000000e7f79e89ba8c4a13431129fb2db0d4f444b5b9a","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3d0ee81fd74a2840e2ac8319483b846ba61ac5246619802ee9a647ac0f00310e"}]}