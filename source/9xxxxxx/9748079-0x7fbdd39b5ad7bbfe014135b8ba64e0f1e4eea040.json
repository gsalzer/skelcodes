{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary AbstractERC20 {\r\n\r\n    function abstractReceive(IERC20 token, uint256 amount) internal returns(uint256) {\r\n        if (token == IERC20(0)) {\r\n            require(msg.value == amount);\r\n            return amount;\r\n        } else {\r\n            uint256 balance = abstractBalanceOf(token, address(this));\r\n            token.transferFrom(msg.sender, address(this), amount);\r\n            uint256 cmp_amount = abstractBalanceOf(token, address(this)) - balance;\r\n            require(cmp_amount != 0);\r\n            return cmp_amount;\r\n        }\r\n    }\r\n\r\n    function abstractTransfer(IERC20 token, address to, uint256 amount) internal returns(uint256) {\r\n        if (token == IERC20(0)) {\r\n            payable(to).transfer(amount);\r\n            return amount;\r\n        } else {\r\n            uint256 balance = abstractBalanceOf(token, address(this));\r\n            token.transfer(to, amount);\r\n            uint256 cmp_amount = balance - abstractBalanceOf(token, address(this));\r\n            require(cmp_amount != 0);\r\n            return cmp_amount;\r\n        }\r\n    }\r\n\r\n    function abstractBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (token == IERC20(0)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary Groth16Verifier {\r\n  uint constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\n  uint constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n\r\n  struct G1Point {\r\n    uint X;\r\n    uint Y;\r\n  }\r\n  // Encoding of field elements is: X[0] * z + X[1]\r\n  struct G2Point {\r\n    uint[2] X;\r\n    uint[2] Y;\r\n  }\r\n\r\n  /// @return the sum of two points of G1\r\n  function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory) {\r\n    G1Point memory t;\r\n    uint[4] memory input;\r\n    input[0] = p1.X;\r\n    input[1] = p1.Y;\r\n    input[2] = p2.X;\r\n    input[3] = p2.Y;\r\n    bool success;\r\n    /* solium-disable-next-line */\r\n    assembly {\r\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, t, 0x60)\r\n      // Use \"invalid\" to make gas estimation work\r\n      switch success case 0 { invalid() }\r\n    }\r\n    require(success);\r\n    return t;\r\n  }\r\n\r\n  /// @return the product of a point on G1 and a scalar, i.e.\r\n  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\r\n  function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory) {\r\n    if(s==0) return G1Point(0,0);\r\n    if(s==1) return p;\r\n    G1Point memory t;\r\n    uint[3] memory input;\r\n    input[0] = p.X;\r\n    input[1] = p.Y;\r\n    input[2] = s;\r\n    bool success;\r\n    /* solium-disable-next-line */\r\n    assembly {\r\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, t, 0x60)\r\n      // Use \"invalid\" to make gas estimation work\r\n      switch success case 0 { invalid() }\r\n    }\r\n    require (success);\r\n    return t;\r\n  }\r\n\r\n\r\n  function verify(uint[] memory input, uint[8] memory proof, uint[] memory vk) internal view returns (bool) {\r\n    uint nsignals = (vk.length-16)/2;\r\n    require((nsignals>0) && (input.length == nsignals) && (proof.length == 8) && (vk.length == 16 + 2*nsignals));\r\n\r\n    for(uint i=0; i<input.length; i++)\r\n      require(input[i]<r);\r\n\r\n\r\n    uint[] memory p_input = new uint[](24);\r\n\r\n    p_input[0] = proof[0];\r\n    p_input[1] = q-(proof[1]%q);  //proof.A negation\r\n    p_input[2] = proof[2];\r\n    p_input[3] = proof[3];\r\n    p_input[4] = proof[4];\r\n    p_input[5] = proof[5];\r\n\r\n    // alpha1 computation\r\n    p_input[6] = vk[0];     //vk.alfa1 == G1Point(vk[0], vk[1])\r\n    p_input[7] = vk[1];\r\n\r\n\r\n    p_input[8] = vk[2];\r\n    p_input[9] = vk[3];\r\n    p_input[10] = vk[4];\r\n    p_input[11] = vk[5];\r\n\r\n    //vk_x computation\r\n    G1Point memory t = G1Point(vk[14], vk[15]);  //vk.IC[0] == G1Point(vk[14], vk[15])\r\n    for(uint j = 0; j < nsignals; j++)\r\n      t = addition(t, scalar_mul(G1Point(vk[16+2*j], vk[17+2*j]), input[j]));  //vk.IC[j + 1] == G1Point(vk[16+2*j], vk[17+2*j])\r\n\r\n    p_input[12] = t.X;\r\n    p_input[13] = t.Y;\r\n\r\n    p_input[14] = vk[6];\r\n    p_input[15] = vk[7];\r\n    p_input[16] = vk[8];\r\n    p_input[17] = vk[9];\r\n\r\n    //C computation\r\n    p_input[18] = proof[6];   //proof.C == G1Point(proof[6], proof[7])\r\n    p_input[19] = proof[7];\r\n\r\n    p_input[20] = vk[10];\r\n    p_input[21] = vk[11];\r\n    p_input[22] = vk[12];\r\n    p_input[23] = vk[13];\r\n\r\n\r\n    uint[1] memory out;\r\n    bool success;\r\n    // solium-disable-next-line \r\n    assembly {\r\n      success := staticcall(sub(gas(), 2000), 8, add(p_input, 0x20), 768, out, 0x20)\r\n      // Use \"invalid\" to make gas estimation work\r\n      switch success case 0 { invalid() }\r\n    }\r\n\r\n    require(success);\r\n    return out[0] != 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary MerkleProof {\r\n    function keccak256MerkleProof(\r\n        bytes32[8] memory proof,\r\n        uint256 path,\r\n        bytes32 leaf\r\n    ) internal pure returns (bytes32) {\r\n        bytes32 root = leaf;\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            root = (path >> i) & 1 == 0\r\n                ? keccak256(abi.encode(leaf, proof[i]))\r\n                : keccak256(abi.encode(proof[i], leaf));\r\n        }\r\n        return root;\r\n    }\r\n\r\n    //compute merkle tree for up to 256 leaves\r\n    function keccak256MerkleTree(bytes32[] memory buff)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        uint256 buffsz = buff.length;\r\n        bytes32 last_tx = buff[buffsz - 1];\r\n        for (uint8 level = 1; level < 8; level++) {\r\n            bool buffparity = (buffsz & 1 == 0);\r\n            buffsz = (buffsz >> 1) + (buffsz & 1);\r\n\r\n            for (uint256 i = 0; i < buffsz - 1; i++) {\r\n                buff[i] = keccak256(abi.encode(buff[2 * i], buff[2 * i + 1]));\r\n            }\r\n            buff[buffsz - 1] = buffparity\r\n                ? keccak256(\r\n                    abi.encode(buff[2 * buffsz - 2], buff[2 * buffsz - 1])\r\n                )\r\n                : keccak256(abi.encode(buff[2 * buffsz - 2], last_tx));\r\n            last_tx = keccak256(abi.encode(last_tx, last_tx));\r\n        }\r\n        return buff[0];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract UnstructuredStorage {\r\n    function set_uint256(bytes32 pos, uint256 value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_uint256(bytes32 pos) internal view returns(uint256 value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n    function set_address(bytes32 pos, address value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_address(bytes32 pos) internal view returns(address value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n\r\n    function set_bool(bytes32 pos, bool value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_bool(bytes32 pos) internal view returns(bool value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n    function set_bytes32(bytes32 pos, bytes32 value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(pos, value)\r\n        }\r\n    }\r\n\r\n    function get_bytes32(bytes32 pos) internal view returns(bytes32 value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(pos)\r\n        }\r\n    }\r\n\r\n\r\n    function set_uint256(bytes32 pos, uint256 offset, uint256 value) internal {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            sstore(add(pos, offset), value)\r\n        }\r\n    }\r\n\r\n    function get_uint256(bytes32 pos, uint256 offset) internal view returns(uint256 value) {\r\n        // solium-disable-next-line\r\n        assembly {\r\n            value:=sload(add(pos, offset))\r\n        }\r\n    }\r\n\r\n    function set_uint256_list(bytes32 pos, uint256[] memory list) internal {\r\n        uint256 sz = list.length;\r\n        set_uint256(pos, sz);\r\n        for(uint256 i = 0; i<sz; i++) {\r\n            set_uint256(pos, i+1, list[i]);\r\n        }\r\n    }\r\n\r\n    function get_uint256_list(bytes32 pos) internal view returns (uint256[] memory list) {\r\n        uint256 sz = get_uint256(pos);\r\n        list = new uint256[](sz);\r\n        for(uint256 i = 0; i < sz; i++) {\r\n            list[i] = get_uint256(pos, i+1);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract OptimisticRollup is UnstructuredStorage {\r\n    struct Message {\r\n        uint256[4] data;\r\n    }\r\n\r\n    struct TxExternalFields {\r\n        address owner;\r\n        Message[2] message;\r\n    }\r\n\r\n    struct Proof {\r\n        uint256[8] data;\r\n    }\r\n\r\n    struct VK {\r\n        uint256[] data;\r\n    }\r\n\r\n    struct Tx {\r\n        uint256 rootptr;\r\n        uint256[2] nullifier;\r\n        uint256[2] utxo;\r\n        IERC20 token;\r\n        uint256 delta;\r\n        TxExternalFields ext;\r\n        Proof proof;\r\n    }\r\n\r\n    struct BlockItem {\r\n        Tx ctx;\r\n        uint256 new_root;\r\n        uint256 deposit_blocknumber;\r\n    }\r\n    struct BlockItemNote {\r\n        bytes32[8] proof;\r\n        uint256 id;\r\n        BlockItem item;\r\n    }\r\n\r\n    struct UTXO {\r\n        address owner;\r\n        IERC20 token;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct PayNote {\r\n        UTXO utxo;\r\n        uint256 blocknumber;\r\n        uint256 txhash;\r\n    }\r\n\r\n    bytes32 constant PTR_ROLLUP_BLOCK = 0xd790c52c075936677813beed5aa36e1fce5549c1b511bc0277a6ae4213ee93d8; // zeropool.instance.rollup_block\r\n    bytes32 constant PTR_DEPOSIT_STATE = 0xc9bc9b91da46ecf8158f48c23ddba2c34e9b3dffbc3fcfd2362158d58383f80b; //zeropool.instance.deposit_state\r\n    bytes32 constant PTR_WITHDRAW_STATE = 0x7ad39ce31882298a63a0da3c9e2d38db2b34986c4be4550da17577edc0078639; //zeropool.instance.withdraw_state\r\n\r\n    bytes32 constant PTR_ROLLUP_TX_NUM = 0xeeb5c14c43ac322ae6567adef70b1c44e69fe064f5d4a67d8c5f0323c138f65e; //zeropool.instance.rollup_tx_num\r\n    bytes32 constant PTR_ALIVE = 0x58feb0c2bb14ff08ed56817b2d673cf3457ba1799ad05b4e8739e57359eaecc8; //zeropool.instance.alive\r\n    bytes32 constant PTR_TX_VK = 0x08cff3e7425cd7b0e33f669dbfb21a086687d7980e87676bf3641c97139fcfd3; //zeropool.instance.tx_vk\r\n    bytes32 constant PTR_TREE_UPDATE_VK = 0xf0f9fc4bf95155a0eed7d21afd3dfd94fade350663e7e1beccf42b5109244d86; //zeropool.instance.tree_update_vk\r\n    bytes32 constant PTR_VERSION = 0x0bf0574ec126ccd99fc2670d59004335a5c88189b4dc4c4736ba2c1eced3519c; //zeropool.instance.version\r\n    bytes32 constant PTR_RELAYER = 0xa6c0702dad889760bc0a910159487cf57ece87c3aff39b866b8eaec3ef42f09b; //zeropool.instance.relayer\r\n\r\n    function get_rollup_block(uint256 x) internal view returns(bytes32 value) {\r\n        bytes32 pos = keccak256(abi.encodePacked(PTR_ROLLUP_BLOCK, x));\r\n        value = get_bytes32(pos);\r\n    }\r\n\r\n    function set_rollup_block(uint256 x, bytes32 value) internal {\r\n        bytes32 pos = keccak256(abi.encodePacked(PTR_ROLLUP_BLOCK, x));\r\n        set_bytes32(pos, value);\r\n    }\r\n\r\n    function get_deposit_state(bytes32 x) internal view returns(uint256 value) {\r\n        bytes32 pos = keccak256(abi.encodePacked(PTR_DEPOSIT_STATE, x));\r\n        value = get_uint256(pos);\r\n    }\r\n\r\n    function set_deposit_state(bytes32 x, uint256 value) internal {\r\n        bytes32 pos = keccak256(abi.encodePacked(PTR_DEPOSIT_STATE, x));\r\n        set_uint256(pos, value);\r\n    }\r\n\r\n\r\n\r\n    function get_withdraw_state(bytes32 x) internal view returns(uint256 value) {\r\n        bytes32 pos = keccak256(abi.encodePacked(PTR_WITHDRAW_STATE, x));\r\n        value = get_uint256(pos);\r\n    }\r\n\r\n    function set_withdraw_state(bytes32 x, uint256 value) internal {\r\n        bytes32 pos = keccak256(abi.encodePacked(PTR_WITHDRAW_STATE, x));\r\n        set_uint256(pos, value);\r\n    }\r\n\r\n\r\n\r\n    function get_rollup_tx_num() internal view returns(uint256 value) {\r\n        value = get_uint256(PTR_ROLLUP_TX_NUM);\r\n    }\r\n\r\n    function set_rollup_tx_num(uint256 value) internal {\r\n        set_uint256(PTR_ROLLUP_TX_NUM, value);\r\n    }\r\n\r\n    function get_alive() internal view returns(bool value) {\r\n        value = get_bool(PTR_ALIVE);\r\n    }\r\n\r\n    function set_alive(bool x) internal {\r\n        set_bool(PTR_ALIVE, x);\r\n    }\r\n\r\n    function get_tx_vk() internal view virtual returns(VK memory vk) {\r\n        vk.data = get_uint256_list(PTR_TX_VK);\r\n    }\r\n\r\n    function set_tx_vk(VK memory vk) internal {\r\n        set_uint256_list(PTR_TX_VK, vk.data);\r\n    }\r\n\r\n    function get_tree_update_vk() internal view virtual returns(VK memory vk) {\r\n        vk.data = get_uint256_list(PTR_TREE_UPDATE_VK);\r\n    }\r\n\r\n    function set_tree_update_vk(VK memory vk) internal {\r\n        set_uint256_list(PTR_TREE_UPDATE_VK, vk.data);\r\n    }\r\n\r\n    function get_version() internal view returns(uint256 value) {\r\n        value = get_uint256(PTR_VERSION);\r\n    }\r\n\r\n    function set_version(uint256 value) internal {\r\n        set_uint256(PTR_VERSION, value);\r\n    }\r\n\r\n    function get_relayer() internal view returns(address value) {\r\n        value = get_address(PTR_RELAYER);\r\n    }\r\n\r\n    function set_relayer(address value) internal {\r\n        set_address(PTR_RELAYER, value);\r\n    }\r\n\r\n\r\n    modifier onlyInitialized(uint256 version) {\r\n        require(get_version() == version, \"contract should be initialized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUninitialized(uint256 version) {\r\n        require(get_version() < version, \"contract should be uninitialized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRelayer() {\r\n        require(msg.sender == get_relayer(), \"This is relayer-only action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlive() {\r\n        require(get_alive(), \"Contract stopped\");\r\n        _;\r\n    }\r\n\r\n\r\n    function blockItemNoteVerify(BlockItemNote memory note)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        (bytes32 itemhash, ) = blockItemHash(note.item);\r\n        return\r\n            MerkleProof.keccak256MerkleProof(\r\n                note.proof,\r\n                note.id & 0xff,\r\n                itemhash\r\n            ) == get_rollup_block(note.id >> 8);\r\n    }\r\n\r\n    function blockItemNoteVerifyPair(\r\n        BlockItemNote memory note0,\r\n        BlockItemNote memory note1\r\n    ) internal view returns (bool) {\r\n        (bytes32 itemhash0,) = blockItemHash(note0.item);\r\n        (bytes32 itemhash1,) = blockItemHash(note1.item);\r\n\r\n\r\n        return\r\n            MerkleProof.keccak256MerkleProof(\r\n                note0.proof,\r\n                note0.id & 0xff,\r\n                itemhash0\r\n            ) ==\r\n            get_rollup_block(note0.id >> 8) &&\r\n            MerkleProof.keccak256MerkleProof(\r\n                note1.proof,\r\n                note1.id & 0xff,\r\n                itemhash1\r\n            ) ==\r\n            get_rollup_block(note1.id >> 8) &&\r\n            itemhash0 != itemhash1;\r\n    }\r\n\r\n    function blockItemHash(BlockItem memory item)\r\n        internal\r\n        pure\r\n        returns (bytes32 itemhash, bytes32 txhash)\r\n    {\r\n        txhash = keccak256(abi.encode(item.ctx));\r\n        itemhash = keccak256(\r\n            abi.encode(txhash, item.new_root, item.deposit_blocknumber)\r\n        );\r\n    }\r\n\r\n    function groth16verify(\r\n        VK memory vk,\r\n        Proof memory proof,\r\n        uint256[] memory inputs\r\n    ) internal view returns (bool) {\r\n        return Groth16Verifier.verify(vk.data, proof.data, inputs);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Zeropool is OptimisticRollup {\r\n    using AbstractERC20 for IERC20;\r\n\r\n    uint256 constant DEPOSIT_EXISTS = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant DEPOSIT_EXPIRES_BLOCKS = 480;\r\n    uint256 constant CHALLENGE_EXPIRES_BLOCKS = 480;\r\n    uint256 constant BN254_ORDER = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n    uint256 constant MAX_AMOUNT = 1766847064778384329583297500742918515827483896875618958121606201292619776;\r\n\r\n    uint256 constant VERSION = 1;\r\n\r\n    event Deposit();\r\n    event DepositCancel();\r\n    event NewBlockPack();\r\n    event Withdraw();\r\n\r\n    function rollup_block(uint x) external view returns(bytes32) {\r\n        return get_rollup_block(x);\r\n    }\r\n\r\n    function deposit_state(bytes32 x) external view returns(uint256) {\r\n        return get_deposit_state(x);\r\n    }\r\n\r\n    function withdraw_state(bytes32 x) external view returns(uint256) {\r\n        return get_withdraw_state(x);\r\n    }\r\n\r\n    function rollup_tx_num() external view returns(uint256) {\r\n        return get_rollup_tx_num();\r\n    }\r\n\r\n    function alive() external view returns(bool) {\r\n        return get_alive();\r\n    }\r\n\r\n    function tx_vk() external view returns(VK memory) {\r\n        return get_tx_vk();\r\n    }\r\n\r\n    function tree_update_vk() external view returns(VK memory) {\r\n        return get_tree_update_vk();\r\n    }\r\n\r\n    function relayer() external view returns(address) {\r\n        return get_relayer();\r\n    }\r\n\r\n    function initialized() external view returns(bool) {\r\n        return get_version() < VERSION;\r\n    }\r\n\r\n    function version() external view returns(uint256) {\r\n        return VERSION;\r\n    }\r\n\r\n    function challenge_expires_blocks() external view returns(uint256) {\r\n        return CHALLENGE_EXPIRES_BLOCKS;\r\n    }\r\n\r\n    function deposit_expires_blocks() external view returns(uint256) {\r\n        return DEPOSIT_EXPIRES_BLOCKS;\r\n    }\r\n\r\n    \r\n    function init(address relayer) external onlyUninitialized(VERSION) {\r\n        set_alive(true);\r\n        set_relayer(relayer);\r\n        set_version(VERSION);\r\n    }\r\n\r\n\r\n    function deposit(IERC20 token, uint256 amount, bytes32 txhash)\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        uint256 _amount = token.abstractReceive(amount);\r\n        bytes32 deposit_hash = keccak256(\r\n            abi.encode(msg.sender, token, _amount, block.number, txhash)\r\n        );\r\n        set_deposit_state(deposit_hash, DEPOSIT_EXISTS);\r\n        emit Deposit();\r\n        return true;\r\n    }\r\n\r\n    function depositCancel(PayNote memory d) public returns (bool) {\r\n        bytes32 deposit_hash = keccak256(abi.encode(d));\r\n        require(get_deposit_state(deposit_hash) >= get_rollup_tx_num());\r\n        require(d.blocknumber < block.number - DEPOSIT_EXPIRES_BLOCKS);\r\n        set_deposit_state(deposit_hash, 0);\r\n        d.utxo.token.abstractTransfer(d.utxo.owner, d.utxo.amount);\r\n        emit DepositCancel();\r\n        return true;\r\n    }\r\n\r\n    function withdraw(PayNote memory w) public returns (bool) {\r\n        bytes32 withdraw_hash = keccak256(abi.encode(w));\r\n        uint256 state = get_withdraw_state(withdraw_hash);\r\n        require(state < get_rollup_tx_num() && state != 0);\r\n        require(w.blocknumber < block.number - CHALLENGE_EXPIRES_BLOCKS);\r\n        set_withdraw_state(withdraw_hash, 0);\r\n        w.utxo.token.abstractTransfer(w.utxo.owner, w.utxo.amount);\r\n        emit Withdraw();\r\n        return true;\r\n    }\r\n\r\n    function publishBlock(\r\n        uint256 protocol_version,\r\n        BlockItem[] memory items,\r\n        uint256 rollup_cur_block_num,\r\n        uint256 blocknumber_expires\r\n    ) public onlyRelayer onlyAlive returns (bool) {\r\n        uint256 cur_rollup_tx_num = get_rollup_tx_num();\r\n\r\n        require(rollup_cur_block_num == cur_rollup_tx_num >> 8, \"wrong block number\");\r\n        require(protocol_version == get_version(), \"wrong protocol version\");\r\n        require(block.number < blocknumber_expires, \"blocknumber is already expires\");\r\n        uint256 nitems = items.length;\r\n        require(nitems > 0 && nitems <= 256, \"wrong number of items\");\r\n        bytes32[] memory hashes = new bytes32[](nitems); \r\n        for (uint256 i = 0; i < nitems; i++) {\r\n            BlockItem memory item = items[i];\r\n            bytes32 itemhash = keccak256(abi.encode(item));\r\n            if (item.ctx.delta == 0) {\r\n                require(item.deposit_blocknumber == 0, \"deposit_blocknumber should be zero in transfer case\");\r\n                require(item.ctx.token == IERC20(0), \"token should be zero in transfer case\");\r\n                require(item.ctx.ext.owner == address(0), \"owner should be zero in tranfer case\");\r\n            } else if (item.ctx.delta < MAX_AMOUNT) {\r\n                bytes32 txhash = keccak256(abi.encode(item.ctx));\r\n                bytes32 deposit_hash = keccak256(\r\n                    abi.encode(\r\n                        item.ctx.ext.owner,\r\n                        item.ctx.token,\r\n                        item.ctx.delta,\r\n                        item.deposit_blocknumber,\r\n                        txhash\r\n                    )\r\n                );\r\n                require(get_deposit_state(deposit_hash) == DEPOSIT_EXISTS, \"unexisted deposit\");\r\n                set_deposit_state(deposit_hash, cur_rollup_tx_num + i);\r\n            } else if (\r\n                item.ctx.delta > BN254_ORDER - MAX_AMOUNT &&\r\n                item.ctx.delta < BN254_ORDER\r\n            ) {\r\n                require(item.deposit_blocknumber == 0, \"deposit blocknumber should be zero\");\r\n                bytes32 txhash = keccak256(abi.encode(item.ctx));\r\n                bytes32 withdraw_hash = keccak256(\r\n                    abi.encode(\r\n                        item.ctx.ext.owner,\r\n                        item.ctx.token,\r\n                        BN254_ORDER - item.ctx.delta,\r\n                        block.number,\r\n                        txhash\r\n                    )\r\n                );\r\n                require(get_withdraw_state(withdraw_hash) == 0, \"withdrawal already published\");\r\n                set_withdraw_state(withdraw_hash, cur_rollup_tx_num + i);\r\n            } else revert(\"wrong behavior\");\r\n\r\n            hashes[i] = itemhash;\r\n        }\r\n        set_rollup_block(cur_rollup_tx_num >> 8, MerkleProof.keccak256MerkleTree(hashes));\r\n        set_rollup_tx_num(cur_rollup_tx_num+256);\r\n        emit NewBlockPack();\r\n        return true;\r\n    }\r\n\r\n    function stopRollup(uint256 lastvalid) internal returns (bool) {\r\n        set_alive(false);\r\n        if (get_rollup_tx_num() > lastvalid) set_rollup_tx_num(lastvalid);\r\n    }\r\n    \r\n    uint256 constant HARDFORK_TX_NUM = 12800;\r\n\r\n    function challengeTx(BlockItemNote memory cur, BlockItemNote memory base)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(cur.id > HARDFORK_TX_NUM && base.id > HARDFORK_TX_NUM);\r\n        require(blockItemNoteVerifyPair(cur, base));\r\n        require(cur.item.ctx.rootptr == base.id);\r\n        uint256[] memory inputs = new uint256[](8);\r\n        inputs[0] = base.item.new_root;\r\n        inputs[1] = cur.item.ctx.nullifier[0];\r\n        inputs[2] = cur.item.ctx.nullifier[1];\r\n        inputs[3] = cur.item.ctx.utxo[0];\r\n        inputs[4] = cur.item.ctx.utxo[1];\r\n        inputs[5] = uint256(address(cur.item.ctx.token));\r\n        inputs[6] = cur.item.ctx.delta;\r\n        inputs[7] = uint256(keccak256(abi.encode(cur.item.ctx.ext))) % BN254_ORDER;\r\n        require(\r\n            !groth16verify(get_tx_vk(), cur.item.ctx.proof, inputs) ||\r\n                cur.item.ctx.rootptr >= cur.id\r\n        );\r\n        stopRollup(\r\n            cur.id &\r\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function challengeUTXOTreeUpdate(\r\n        BlockItemNote memory cur,\r\n        BlockItemNote memory prev,\r\n        uint256 right_root\r\n    ) public returns (bool) {\r\n        require(blockItemNoteVerifyPair(cur, prev));\r\n        require(right_root != cur.item.new_root);\r\n        require(cur.id == prev.id + 1);\r\n        uint256[] memory inputs = new uint256[](5);\r\n        inputs[0] = prev.item.new_root;\r\n        inputs[1] = right_root;\r\n        inputs[2] = cur.id;\r\n        inputs[3] = cur.item.ctx.utxo[0];\r\n        inputs[4] = cur.item.ctx.utxo[1];\r\n        require(groth16verify(get_tree_update_vk(), cur.item.ctx.proof, inputs));\r\n        stopRollup(\r\n            cur.id &\r\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n        );\r\n        return true;\r\n    }\r\n\r\n\r\n    function challengeDoubleSpend(\r\n        BlockItemNote memory cur,\r\n        BlockItemNote memory prev\r\n    ) public returns (bool) {\r\n        require(blockItemNoteVerifyPair(cur, prev));\r\n        require(cur.id > prev.id);\r\n        require(\r\n            cur.item.ctx.nullifier[0] == prev.item.ctx.nullifier[0] ||\r\n                cur.item.ctx.nullifier[0] == prev.item.ctx.nullifier[1] ||\r\n                cur.item.ctx.nullifier[1] == prev.item.ctx.nullifier[0] ||\r\n                cur.item.ctx.nullifier[1] == prev.item.ctx.nullifier[1]\r\n        );\r\n        stopRollup(\r\n            cur.id &\r\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n        );\r\n        return true;\r\n    }\r\n\r\n// generated verification keys\r\n\r\nfunction get_tx_vk() internal view override returns(VK memory vk) {\r\n    vk.data = new uint256[](32);\r\n\tvk.data[0]=16697396276845359349763623132880681261946057173403665684116014317021563254655;\r\n\tvk.data[1]=5587233253515298594979379376112193939999977226319827083400780508947632238748;\r\n\tvk.data[2]=996344031357008752188061777727343821194999038419356867329464288563909617005;\r\n\tvk.data[3]=19290932987249234962967288959963528407103065644647211765713208264341394525627;\r\n\tvk.data[4]=8553749439216169983700315269252703464956761305522445870304892856460243321047;\r\n\tvk.data[5]=7499331826236872853986916310426702508083585717393534257027110568354271287432;\r\n\tvk.data[6]=17818442198315603854906648488684700215588900049016248299047528035268326306021;\r\n\tvk.data[7]=15742330311792086244154238527312139581390392470409527670106624318539491230639;\r\n\tvk.data[8]=15582884393435508760323520593128472668109949438533129736977260887861833544686;\r\n\tvk.data[9]=21497591859374664749646772170336511135502780606163622402006911936080711585567;\r\n\tvk.data[10]=7790006490742208514342359392548790920526758492331804655644059775462847493097;\r\n\tvk.data[11]=13129551538859899483631249619546540237894645124538636048121349380930189507838;\r\n\tvk.data[12]=4746286819103243220536118278269041624087200484408004244046357476009810846546;\r\n\tvk.data[13]=18658744770115522082166315751608350375192957102952937317896374405594493134526;\r\n\tvk.data[14]=19989489438779009436306295034063506403791061054909758505826349901018217062148;\r\n\tvk.data[15]=12423258039559374001195155548721642852023802830208605918786258373002084367632;\r\n\tvk.data[16]=7003237418971344613051082595005151675497565165987117592967572800525158824489;\r\n\tvk.data[17]=7974534769221088592950139635833940989569216922408396815015576367720824241508;\r\n\tvk.data[18]=11849446094135848442330464397836476735986056048931041670863652298683592522299;\r\n\tvk.data[19]=5688048430194407294094808809106358923767040643882276446273178191473705984722;\r\n\tvk.data[20]=15251866809401758881597063825677390012089302300318896335505843954313586308460;\r\n\tvk.data[21]=382122240772754036035492924033721102122148609052952215005785336028904779974;\r\n\tvk.data[22]=10812902853773819225346776822522835276124447801378031518741367874851505049128;\r\n\tvk.data[23]=5441632396550715758039364769225858885484351780111874540894325037632766747975;\r\n\tvk.data[24]=15786403199430745833044642273676411893860838678282184591801848247162444177171;\r\n\tvk.data[25]=8656349755733447799905795854043134530429068654454399761530913385689890843892;\r\n\tvk.data[26]=16208788594254936587671118621629101795259918519956251673155645395337803398644;\r\n\tvk.data[27]=11008397050768236649236829775384097670794106671173713047158085580508730412294;\r\n\tvk.data[28]=5000535825997546131883098495344030668482959620659549513047593209192484024554;\r\n\tvk.data[29]=6037131813824258546352206109740790709325012719822508419478741594076251165562;\r\n\tvk.data[30]=232537091421478948749164191800530205602104220622818161892691965271681780444;\r\n\tvk.data[31]=8541890110169324141024763602672843893521937974195030991302885883209417356350;\r\n\r\n}\r\n\r\nfunction get_tree_update_vk() internal view override returns(VK memory vk) {\r\n    vk.data = new uint256[](26);\r\n\tvk.data[0]=1117561174711447970699783508540835969335571306961098817222886978948744345711;\r\n\tvk.data[1]=10780325785780371097555321883689276320673547412863821024704236163981475185231;\r\n\tvk.data[2]=9190339596842207972698547696205148463284800225991013839726333455510728418061;\r\n\tvk.data[3]=2787003181019705527994114183958804481617926021310039402048478633993643050257;\r\n\tvk.data[4]=19025462432212307115968461300130326702118822938799182787816944256592782469896;\r\n\tvk.data[5]=13374329695938559341973106697972813681348489436576893374756555356012735204935;\r\n\tvk.data[6]=2391540205558897324637905451340679985349421498010435945591140422554529899138;\r\n\tvk.data[7]=4538034768061760463973814808256573325692419571060079531866609248139564624084;\r\n\tvk.data[8]=1676495264895295799704478861413793414754594619949871821864061782072790895386;\r\n\tvk.data[9]=14126847152901573392009992091969331199931177575536794424151289240625771346641;\r\n\tvk.data[10]=17538580900482196889842913547024185367722169963653894198473788114352852534451;\r\n\tvk.data[11]=8190411413825327934159222466106546022021029229252021910318976779844785663832;\r\n\tvk.data[12]=10967610977689797074852479085031480141553081046525341474335007496946965996889;\r\n\tvk.data[13]=7518076114965605632016029983105922598125144277731467379298374011599641312871;\r\n\tvk.data[14]=12707371020099695894329449101665177001847210301388750083164379479457407482586;\r\n\tvk.data[15]=9638979230410286344537095100035451133751102850514918826098902859896696414299;\r\n\tvk.data[16]=8486153680023739150613783925554306655861399968866354186425033515785337545045;\r\n\tvk.data[17]=4326081295507141428403366893493945239683826229496173558026196418081249993919;\r\n\tvk.data[18]=15025661877684012486667234299497831337050778534199450729135536609646068791727;\r\n\tvk.data[19]=10170327312676973089401561543622362963624936244289159008674890415147237746815;\r\n\tvk.data[20]=8249238187438221843102710918896640046224395740564573077618681767459880159151;\r\n\tvk.data[21]=19333329033893998261051692597725252825459050054888992926855629308261440687681;\r\n\tvk.data[22]=9410494220927663013897883141562056814411016181471810870390609726747759553716;\r\n\tvk.data[23]=6569431686535661164713601709252422249188606253902167941201140375618464568594;\r\n\tvk.data[24]=12006374143171123543831491679354588477211042045298704251427754348688205712072;\r\n\tvk.data[25]=11397989004848280683211927657137052100877146185703927010611549774118733967444;\r\n\r\n}\r\n\r\n\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewBlockPack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"alive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[8]\",\"name\":\"proof\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.BlockItemNote\",\"name\":\"cur\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[8]\",\"name\":\"proof\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.BlockItemNote\",\"name\":\"prev\",\"type\":\"tuple\"}],\"name\":\"challengeDoubleSpend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[8]\",\"name\":\"proof\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.BlockItemNote\",\"name\":\"cur\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[8]\",\"name\":\"proof\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.BlockItemNote\",\"name\":\"base\",\"type\":\"tuple\"}],\"name\":\"challengeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32[8]\",\"name\":\"proof\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.BlockItemNote\",\"name\":\"cur\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[8]\",\"name\":\"proof\",\"type\":\"bytes32[8]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem\",\"name\":\"item\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.BlockItemNote\",\"name\":\"prev\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"right_root\",\"type\":\"uint256\"}],\"name\":\"challengeUTXOTreeUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challenge_expires_blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.UTXO\",\"name\":\"utxo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txhash\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.PayNote\",\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"depositCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit_expires_blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"deposit_state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocol_version\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootptr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"nullifier\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"utxo\",\"type\":\"uint256[2]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"data\",\"type\":\"uint256[4]\"}],\"internalType\":\"struct OptimisticRollup.Message[2]\",\"name\":\"message\",\"type\":\"tuple[2]\"}],\"internalType\":\"struct OptimisticRollup.TxExternalFields\",\"name\":\"ext\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[8]\",\"name\":\"data\",\"type\":\"uint256[8]\"}],\"internalType\":\"struct OptimisticRollup.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct OptimisticRollup.Tx\",\"name\":\"ctx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"new_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_blocknumber\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.BlockItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"rollup_cur_block_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocknumber_expires\",\"type\":\"uint256\"}],\"name\":\"publishBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rollup_block\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup_tx_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree_update_vk\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OptimisticRollup.VK\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tx_vk\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"internalType\":\"struct OptimisticRollup.VK\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.UTXO\",\"name\":\"utxo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txhash\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticRollup.PayNote\",\"name\":\"w\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"withdraw_state\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Zeropool","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://c0e5e61925d221b97cee9ae2b6f4f7b4cbee26d083520308ff4a4dfdf5aad315"}]}