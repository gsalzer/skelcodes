{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity 0.4.25;\r\n\r\n    contract GODToken {\r\n\r\n        string public name;\r\n\r\n        string public symbol;\r\n\r\n        uint8 public decimals;\r\n\r\n        uint public totalSupply;\r\n\r\n        uint public supplied;\r\n\r\n        uint public surplusSupply;\r\n\r\n        uint beforeFrequency = 0;\r\n\r\n        uint centerFrequency = 300;\r\n\r\n        uint afterFrequency = 400;\r\n\r\n        address owner;\r\n\r\n        uint public usdtPrice = 10000;\r\n\r\n\r\n        address lotteryAddr;\r\n\r\n        address gameAddr;\r\n\r\n        address themisAddr;\r\n\r\n        mapping(address => uint) public balanceOf;\r\n\r\n        mapping(address => mapping(address => uint)) public allowance;\r\n\r\n        constructor(\r\n            string _name,\r\n            string _symbol,\r\n            uint8 _decimals,\r\n            uint _totalSupply,\r\n            address _owner\r\n        )  public {\r\n            name = _name;\r\n            symbol = _symbol;\r\n            decimals = _decimals;\r\n            totalSupply = _totalSupply * (10 ** uint256(decimals));\r\n            owner = _owner;\r\n            surplusSupply = totalSupply;\r\n        }\r\n\r\n        event Transfer(address indexed from, address indexed to,uint value);\r\n\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n        modifier validDestination(address _to) {\r\n            require(_to != address(0x0), \"address cannot be 0x0\");\r\n            require(_to != address(this), \"address cannot be contract address\");\r\n            _;\r\n        }\r\n\r\n        function setAuthorityAddr(address gAddr, address lAddr, address tAddr) external {\r\n            require(owner == msg.sender, \"Insufficient permissions\");\r\n            gameAddr = gAddr;\r\n            lotteryAddr = lAddr;\r\n            themisAddr = tAddr;\r\n        }\r\n\r\n        function calculationNeedGOD(uint usdtVal) external view returns(uint) {\r\n            uint godCount = SafeMath.div(SafeMath.div(usdtVal * 10 ** 8, 10), usdtPrice);\r\n            return godCount;\r\n        }\r\n\r\n        function gainGODToken(uint value, bool isCovert) external {\r\n            require(msg.sender == lotteryAddr || msg.sender == themisAddr, \"Insufficient permissions\");\r\n            require(value <= surplusSupply, \"GOD tokens are larger than the remaining supply\");\r\n            if(isCovert) {\r\n                surplusSupply = SafeMath.sub(surplusSupply, value);\r\n                supplied = SafeMath.add(supplied, value);\r\n                uint number = SafeMath.div(supplied, (10 ** uint256(decimals)) * 10 ** 4);\r\n                if(number <= 18900) {\r\n                    uint count = 0;\r\n                    if(number <= 6000) {\r\n                        count = SafeMath.div(number, 10);\r\n                        if(count > beforeFrequency) {\r\n                            for(uint i = beforeFrequency; i < count; i++) {\r\n                                usdtPrice = SafeMath.add(usdtPrice, SafeMath.div(usdtPrice, 100));\r\n                            }\r\n                            beforeFrequency = count;\r\n                        }\r\n                    }else if(number <= 12000) {\r\n                        if(beforeFrequency < 600) {\r\n                            count = 600;\r\n                            for(uint i2 = beforeFrequency; i2 < count; i2++) {\r\n                                usdtPrice = SafeMath.add(usdtPrice, SafeMath.div(usdtPrice, 100));\r\n                            }\r\n                            beforeFrequency = count;\r\n                        }\r\n                        count = SafeMath.div(number, 20);\r\n                        if(count > centerFrequency) {\r\n                            for(uint j = centerFrequency; j < count; j++) {\r\n                                usdtPrice = SafeMath.add(usdtPrice, SafeMath.div(usdtPrice, 100));\r\n                            }\r\n                            centerFrequency = count;\r\n                        }\r\n                    }else {\r\n                        if(centerFrequency < 600) {\r\n                            count = 600;\r\n                            for(uint j2 = centerFrequency; j2 < count; j2++) {\r\n                                usdtPrice = SafeMath.add(usdtPrice, SafeMath.div(usdtPrice, 100));\r\n                            }\r\n                            centerFrequency = count;\r\n                        }\r\n                        count = SafeMath.div(number, 30);\r\n                        if(count > afterFrequency) {\r\n                            for(uint k = 0; k < count; k++) {\r\n                                usdtPrice = SafeMath.add(usdtPrice, SafeMath.div(usdtPrice, 100));\r\n                            }\r\n                            afterFrequency = count;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            balanceOf[msg.sender] = SafeMath.add(balanceOf[msg.sender], value);\r\n        }\r\n\r\n        function transfer(address to, uint value) public validDestination(to) {\r\n            require(value >= 0, \"Incorrect transfer amount\");\r\n            require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n            require(balanceOf[to] + value >= balanceOf[to], \"Transfer failed\");\r\n\r\n            balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], value);\r\n            balanceOf[to] = SafeMath.add(balanceOf[to], value);\r\n\r\n            emit Transfer(msg.sender, to, value);\r\n        }\r\n\r\n        function approve(address spender, uint value) public {\r\n              require((value == 0) || (allowance[msg.sender][spender] == 0));\r\n              allowance[msg.sender][spender] = value;\r\n              emit Approval(msg.sender, spender, value);\r\n        }\r\n\r\n        function transferFrom(\r\n            address from,\r\n            address to,\r\n            uint value\r\n            )\r\n            public validDestination(to) {\r\n            require(value >= 0, \"Incorrect transfer amount\");\r\n            require(balanceOf[from] >= value, \"Insufficient balance\");\r\n            require(balanceOf[to] + value >= balanceOf[to], \"Transfer failed\");\r\n            require(value <= allowance[from][msg.sender], \"The transfer amount is higher than the available amount\");\r\n\r\n            balanceOf[from] = SafeMath.sub(balanceOf[from], value);\r\n            balanceOf[to] = SafeMath.add(balanceOf[to], value);\r\n            allowance[from][msg.sender] = SafeMath.sub(allowance[from][msg.sender], value);\r\n\r\n            emit Transfer(from, to, value);\r\n        }\r\n\r\n        function burn(address addr, uint value) public {\r\n            require(msg.sender == gameAddr, \"Insufficient permissions\");\r\n            require(balanceOf[addr] >= value, \"Insufficient GOD required\");\r\n            balanceOf[addr] = SafeMath.sub(balanceOf[addr], value);\r\n            balanceOf[address(0x0)] = SafeMath.add(balanceOf[address(0x0)], value);\r\n\r\n            emit Transfer(addr, address(0x0), value);\r\n        }\r\n    }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"gAddr\",\"type\":\"address\"},{\"name\":\"lAddr\",\"type\":\"address\"},{\"name\":\"tAddr\",\"type\":\"address\"}],\"name\":\"setAuthorityAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdtVal\",\"type\":\"uint256\"}],\"name\":\"calculationNeedGOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplied\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"isCovert\",\"type\":\"bool\"}],\"name\":\"gainGODToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surplusSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GODToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000c8458800000000000000000000000003b2c68f61a2c98bb0a4cf2ddc8cb0bec3957e1c10000000000000000000000000000000000000000000000000000000000000009474f4420546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003474f440000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e7b25cf0bc9eeca3c6190d8c9f20579aa10031f6fdba76b69d2e6fb9797f460a"}]}