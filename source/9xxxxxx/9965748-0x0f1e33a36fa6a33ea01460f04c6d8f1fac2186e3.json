{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function supplyRatePerBlock() external returns (uint256);\r\n\r\n    function borrowRatePerBlock() external returns (uint256);\r\n\r\n    function totalReserves() external returns (uint256);\r\n\r\n    function reserveFactorMantissa() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function getCash() external returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function underlying() external returns (address);\r\n\r\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\r\n}\r\ncontract CEtherInterface {\r\n    function mint() external payable;\r\n    function repayBorrow() external payable;\r\n}\r\ncontract ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n\r\n    function markets(address account) public view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n}/// @title Basic compound interactions through the DSProxy\r\ncontract CompoundBasicProxy {\r\n\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    /// @notice User deposits tokens to the Compound protocol\r\n    /// @dev User needs to approve the DSProxy to pull the _tokenAddr tokens\r\n    /// @param _tokenAddr The address of the token to be deposited\r\n    /// @param _cTokenAddr CTokens to be deposited\r\n    /// @param _amount Amount of tokens to be deposited\r\n    /// @param _inMarket True if the tokend is already in market for that address\r\n    function deposit(address _tokenAddr, address _cTokenAddr, uint _amount, bool _inMarket) public payable {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).transferFrom(msg.sender, address(this), _amount);\r\n        }\r\n\r\n        approveCToken(_tokenAddr, _cTokenAddr);\r\n\r\n        if (!_inMarket) {\r\n            enterMarket(_cTokenAddr);\r\n        }\r\n\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            require(CTokenInterface(_cTokenAddr).mint(_amount) == 0);\r\n        } else {\r\n            CEtherInterface(_cTokenAddr).mint.value(msg.value)(); // reverts on fail\r\n        }\r\n    }\r\n\r\n    /// @notice User withdraws tokens to the Compound protocol\r\n    /// @param _tokenAddr The address of the token to be withdrawn\r\n    /// @param _cTokenAddr CTokens to be withdrawn\r\n    /// @param _amount Amount of tokens to be withdrawn\r\n    /// @param _isCAmount If true _amount is cTokens if falls _amount is underlying tokens\r\n    function withdraw(address _tokenAddr, address _cTokenAddr, uint _amount, bool _isCAmount) public {\r\n\r\n        if (_isCAmount) {\r\n            require(CTokenInterface(_cTokenAddr).redeem(_amount) == 0);\r\n        } else {\r\n            require(CTokenInterface(_cTokenAddr).redeemUnderlying(_amount) == 0);\r\n        }\r\n\r\n        // withdraw funds to msg.sender\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).transfer(msg.sender, ERC20(_tokenAddr).balanceOf(address(this)));\r\n        } else {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n\r\n    }\r\n\r\n    /// @notice User borrows tokens to the Compound protocol\r\n    /// @param _tokenAddr The address of the token to be borrowed\r\n    /// @param _cTokenAddr CTokens to be borrowed\r\n    /// @param _amount Amount of tokens to be borrowed\r\n    /// @param _inMarket True if the tokend is already in market for that address\r\n    function borrow(address _tokenAddr, address _cTokenAddr, uint _amount, bool _inMarket) public {\r\n        if (!_inMarket) {\r\n            enterMarket(_cTokenAddr);\r\n        }\r\n\r\n        require(CTokenInterface(_cTokenAddr).borrow(_amount) == 0);\r\n\r\n        // withdraw funds to msg.sender\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).transfer(msg.sender, ERC20(_tokenAddr).balanceOf(address(this)));\r\n        } else {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @dev User needs to approve the DSProxy to pull the _tokenAddr tokens\r\n    /// @notice User paybacks tokens to the Compound protocol\r\n    /// @param _tokenAddr The address of the token to be paybacked\r\n    /// @param _cTokenAddr CTokens to be paybacked\r\n    /// @param _amount Amount of tokens to be payedback\r\n    /// @param _wholeDebt If true the _amount will be set to the whole amount of the debt\r\n    function payback(address _tokenAddr, address _cTokenAddr, uint _amount, bool _wholeDebt) public payable {\r\n        approveCToken(_tokenAddr, _cTokenAddr);\r\n\r\n        if (_wholeDebt) {\r\n            _amount = CTokenInterface(_cTokenAddr).borrowBalanceCurrent(address(this));\r\n        }\r\n\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).transferFrom(msg.sender, address(this), _amount);\r\n\r\n            require(CTokenInterface(_cTokenAddr).repayBorrow(_amount) == 0);\r\n        } else {\r\n            CEtherInterface(_cTokenAddr).repayBorrow.value(msg.value)();\r\n            msg.sender.transfer(address(this).balance); // send back the extra eth\r\n        }\r\n    }\r\n\r\n    /// @notice Helper method to withdraw tokens from the DSProxy\r\n    /// @param _tokenAddr Address of the token to be withdrawn\r\n    function withdrawTokens(address _tokenAddr) public {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).transfer(msg.sender, ERC20(_tokenAddr).balanceOf(address(this)));\r\n        } else {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Enters the Compound market so it can be deposited/borrowed\r\n    /// @param _cTokenAddr CToken address of the token\r\n    function enterMarket(address _cTokenAddr) public {\r\n        address[] memory markets = new address[](1);\r\n        markets[0] = _cTokenAddr;\r\n\r\n        ComptrollerInterface(COMPTROLLER).enterMarkets(markets);\r\n    }\r\n\r\n    /// @notice Exits the Compound market so it can't be deposited/borrowed\r\n    /// @param _cTokenAddr CToken address of the token\r\n    function exitMarket(address _cTokenAddr) public {\r\n        ComptrollerInterface(COMPTROLLER).exitMarket(_cTokenAddr);\r\n    }\r\n\r\n    /// @notice Approves CToken contract to pull underlying tokens from the DSProxy\r\n    /// @param _tokenAddr Token we are trying to approve\r\n    /// @param _cTokenAddr Address which will gain the approval\r\n    function approveCToken(address _tokenAddr, address _cTokenAddr) internal {\r\n        if (_tokenAddr != ETH_ADDRESS) {\r\n            ERC20(_tokenAddr).approve(_cTokenAddr, uint(-1));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_inMarket\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_inMarket\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"}],\"name\":\"enterMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wholeDebt\",\"type\":\"bool\"}],\"name\":\"payback\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCAmount\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundBasicProxy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://babdb63ee76f1b4ae8f8466f73153265c62d9446b5968e524928aa788a3916f1"}]}