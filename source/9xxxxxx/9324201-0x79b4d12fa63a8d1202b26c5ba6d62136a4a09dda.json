{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/*\r\n * 컨트랙트 개요\r\n * 1. 목적\r\n *  메인넷 운영이 시작되기 전까지 한시적인 운영을 목적으로 하고 있다.\r\n *  메인넷이 운영되면 컨트랙트의 거래는 모두 중단되며, 메인넷 코인트로 전환을 시작하며,\r\n *  전환 절차를 간단하게 수행할 수 있으며, 블록체인 내 기록을 통해 신뢰도를 얻을 수 있도록 설계 되었다.\r\n * 2. 용어 설명\r\n *  Owner : 컨트랙트를 생성한 컨트랙트의 주인\r\n *  Delegator : Owner의 Private Key를 매번 사용하기에는 보안적인 이슈가 발생할 수 있기 때문에 도입된\r\n *              일부 Owner 권한을 실행할 수 있도록 임명한 대행자\r\n *              특히, 컨트랙트의 거래가 중단된 상태에서 Delegator만 실행할 수 있는 전용 함수를 실행하여\r\n *              컨트랙트의 토큰을 회수하고, 메인넷의 코인으로 전환해주는 핵심적인 기능을 수행\r\n *  Holder : 토큰을 보유할 수 있는 Address를 가지고 있는 계정\r\n * 3. 운용\r\n *  3.1. TokenContainer Structure\r\n *   3.1.1 Charge Amount\r\n *    Charge Amount는 Holder가 구매하여 충전한 토큰량입니다.\r\n *    Owner의 경우에는 컨트랙트 전체에 충전된 토큰량. 즉, Total Supply와 같습니다.\r\n *   3.1.2 Balance\r\n *    ERC20의 Balance와 같습니다.\r\n */\r\n/*\r\n * Contract Overview \r\n * 1. Purpose\r\n *  It is intended to operate for a limited time until mainnet launch.\r\n *  When the mainnet is launched, all transactions of the contract will be suspended from that day on forward and will initiate the token swap to the mainnet.\r\n * 2. Key Definitions\r\n *  Owner : An entity from which smart contract is created\r\n *  Delegator : The appointed agent is created to prevent from using the contract owner's private key for every transaction made, since it can cause a serious security issue.  \r\n *              In particular, it performs core functons at the time of the token swap event, such as executing a dedicated, Delegator-specific function while contract transaction is under suspension and\r\n *              withdraw contract's tokens. \r\n *  Holder : An account in which tokens can be stored (also referrs to all users of the contract: Owner, Delegator, Spender, ICO buyers, ect.)\r\n * 3. Operation\r\n *  3.1. TokenContainer Structure\r\n *   3.1.1 Charge Amount\r\n *    Charge Amount is the charged token amount purcahsed by Holder.\r\n *    In case for the Owner, the total charged amount in the contract equates to the Total Supply.\r\n *   3.1.2 Balance\r\n *     Similiar to the ERC20 Balance.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\n/*\r\n * Owner의 권한 중 일부를 대신 행사할 수 있도록 대행자를 지정/해제 할 수 있는 인터페이스를 정의하고 있다.\r\n */\r\n /*\r\n * It defines an interface where the Owner can appoint / dismiss an agent that can partially excercize privileges in lieu of the Owner's \r\n */\r\ncontract Delegable is Ownable {\r\n    address private _delegator;\r\n    \r\n    event DelegateAppointed(address indexed previousDelegator, address indexed newDelegator);\r\n    \r\n    constructor () internal {\r\n        _delegator = address(0);\r\n    }\r\n    \r\n    /*\r\n     * delegator를 가져옴\r\n     */\r\n    /*\r\n     * Call-up Delegator\r\n     */\r\n    function delegator() public view returns (address) {\r\n        return _delegator;\r\n    }\r\n    \r\n    /*\r\n     * delegator만 실행 가능하도록 지정하는 접근 제한\r\n     */\r\n    /*\r\n     * Access restriction in which only appointed delegator is executable\r\n     */\r\n    modifier onlyDelegator() {\r\n        require(isDelegator());\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * owner 또는 delegator가 실행 가능하도록 지정하는 접근 제한\r\n     */\r\n    /*\r\n     * Access restriction in which only appointed delegator or Owner are executable\r\n     */\r\n    modifier ownerOrDelegator() {\r\n        require(isOwner() || isDelegator());\r\n        _;\r\n    }\r\n    \r\n    function isDelegator() public view returns (bool) {\r\n        return msg.sender == _delegator;\r\n    }\r\n    \r\n    /*\r\n     * delegator를 임명\r\n     */\r\n    /*\r\n     * Appoint the delegator\r\n     */\r\n    function appointDelegator(address delegator_) public onlyOwner returns (bool) {\r\n        require(delegator_ != address(0));\r\n        require(delegator_ != owner());\r\n        return _appointDelegator(delegator_);\r\n    }\r\n    \r\n    /*\r\n     * 지정된 delegator를 해임\r\n     */\r\n    /*\r\n     * Dimiss the appointed delegator\r\n     */\r\n    function dissmissDelegator() public onlyOwner returns (bool) {\r\n        require(_delegator != address(0));\r\n        return _appointDelegator(address(0));\r\n    }\r\n    \r\n    /*\r\n     * delegator를 변경하는 내부 함수\r\n     */\r\n    /*\r\n     * An internal function that allows delegator changes \r\n     */\r\n    function _appointDelegator(address delegator_) private returns (bool) {\r\n        require(_delegator != delegator_);\r\n        emit DelegateAppointed(_delegator, delegator_);\r\n        _delegator = delegator_;\r\n        return true;\r\n    }\r\n}\r\n\r\n/*\r\n * ERC20의 기본 인터페이스는 유지하여 일반적인 토큰 전송이 가능하면서,\r\n * 일부 추가 관리 기능을 구현하기 위한 Struct 및 함수가 추가되어 있습니다.\r\n */\r\n/*\r\n * The basic interface of ERC20 is remained untouched therefore basic functions like token transactions will be available. \r\n * On top of that, Structs and functions have been added to implement some additional management functions.\r\n */\r\ncontract ERC20Like is IERC20, Delegable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal _totalSupply;  // 총 발행량 // Total Supply\r\n    bool isLock = false;  // 계약 잠금 플래그 // Contract Lock Flag\r\n\r\n    /*\r\n     * 토큰 정보(충전량, 해금량, 가용잔액) 및 Spender 정보를 저장하는 구조체\r\n     */\r\n    /*\r\n     * Structure that stores token information (charge, unlock, balance) as well as Spender information\r\n     */\r\n    struct TokenContainer {\r\n        uint256 balance;  // 가용잔액 // available balance\r\n        mapping (address => uint256) allowed; // Spender\r\n    }\r\n\r\n    mapping (address => TokenContainer) internal _tokenContainers;\r\n    \r\n    // 총 발행량 \r\n    // Total token supply \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // 가용잔액 가져오기\r\n    // Call-up available balance\r\n    function balanceOf(address holder) public view returns (uint256) {\r\n        return _tokenContainers[holder].balance;\r\n    }\r\n\r\n    // Spender의 남은 잔액 가져오기\r\n    // Call-up Spender's remaining balance\r\n    function allowance(address holder, address spender) public view returns (uint256) {\r\n        return _tokenContainers[holder].allowed[spender];\r\n    }\r\n\r\n    // 토큰송금\r\n    // Transfer token\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    // Spender 지정 및 금액 지정\r\n    // Appoint a Spender and set an amount \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function approveDelegator(address spender, uint256 value) public onlyDelegator returns (bool) {\r\n        require(msg.sender == delegator());\r\n        _approve(owner(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Spender 토큰송금\r\n    // Transfer token via Spender \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _tokenContainers[from].allowed[msg.sender].sub(value));\r\n        return true;\r\n    }\r\n    \r\n    // delegator인 경우에는 owner의 잔액을 대신 보낼 수 있음.\r\n    function transferDelegator(address to, uint256 value) public onlyDelegator returns (bool) {\r\n        require(msg.sender == delegator());\r\n        _transfer(owner(), to, value);\r\n        return true;\r\n    }\r\n\r\n    // Spender가 할당 받은 양 증가\r\n    // Increase a Spender amount alloted by the Owner/Delegator\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(!isLock);\r\n        uint256 value = _tokenContainers[msg.sender].allowed[spender].add(addedValue);\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowanceDelegator(address spender, uint256 addedValue) public onlyDelegator returns (bool) {\r\n        require(msg.sender == delegator());\r\n        require(!isLock);\r\n        uint256 value = _tokenContainers[owner()].allowed[spender].add(addedValue);\r\n        _approve(owner(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Spender가 할당 받은 양 감소\r\n    // Decrease a Spender amount alloted by the Owner/Delegator\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(!isLock);\r\n        // 기존에 할당된 금액의 잔액보다 더 많은 금액을 줄이려고 하는 경우 할당액이 0이 되도록 처리\r\n        //// If you reduce more than the alloted amount in the balance, we made sure the alloted amount is set to zero instead of minus\r\n        if (_tokenContainers[msg.sender].allowed[spender] < subtractedValue) {\r\n            subtractedValue = _tokenContainers[msg.sender].allowed[spender];\r\n        }\r\n        \r\n        uint256 value = _tokenContainers[msg.sender].allowed[spender].sub(subtractedValue);\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowanceDelegator(address spender, uint256 subtractedValue) public onlyDelegator returns (bool) {\r\n        require(msg.sender == delegator());\r\n        require(!isLock);\r\n        // 기존에 할당된 금액의 잔액보다 더 많은 금액을 줄이려고 하는 경우 할당액이 0이 되도록 처리\r\n        //// If you reduce more than the alloted amount in the balance, we made sure the alloted amount is set to zero instead of minus\r\n        if (_tokenContainers[owner()].allowed[spender] < subtractedValue) {\r\n            subtractedValue = _tokenContainers[owner()].allowed[spender];\r\n        }\r\n        \r\n        uint256 value = _tokenContainers[owner()].allowed[spender].sub(subtractedValue);\r\n        _approve(owner(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    // 토큰송금 내부 실행 함수 \r\n    // An internal execution function for troken transfer\r\n    function _transfer(address from, address to, uint256 value) private {\r\n        require(!isLock);\r\n        // 3.1. Known vulnerabilities of ERC-20 token\r\n        // 현재 컨트랙트로는 송금할 수 없도록 예외 처리 // Exceptions were added to not allow deposits to be made in the current contract . \r\n        require(to != address(this));\r\n        require(to != address(0));\r\n\r\n        _tokenContainers[from].balance = _tokenContainers[from].balance.sub(value);\r\n        _tokenContainers[to].balance = _tokenContainers[to].balance.add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    // Spender 지정 내부 실행 함수\r\n    // Internal execution function for assigning a Spender\r\n    function _approve(address holder, address spender, uint256 value) private {\r\n        require(!isLock);\r\n        require(spender != address(0));\r\n        require(holder != address(0));\r\n\r\n        _tokenContainers[holder].allowed[spender] = value;\r\n        emit Approval(holder, spender, value);\r\n    }\r\n\r\n    // 전체 유통량 - Owner의 unlockAmount\r\n    // Total circulation supply, or the unlockAmount of the Owner's\r\n    function circulationAmount() external view returns (uint256) {\r\n        return _totalSupply.sub(_tokenContainers[owner()].balance);\r\n    }\r\n\r\n    /*\r\n     * 계약 잠금\r\n     * 계약이 잠기면 컨트랙트의 거래가 중단된 상태가 되며,\r\n     * 거래가 중단된 상태에서는 Owner와 Delegator를 포함한 모든 Holder는 거래를 할 수 없게 된다.\r\n     */\r\n    /*\r\n     * Contract lock\r\n     * If the contract is locked, all transactions will be suspended.\r\n     * All Holders including Owner and Delegator will not be able to make transaction during suspension.\r\n     */\r\n    function lock() external onlyOwner returns (bool) {\r\n        isLock = true;\r\n        return isLock;\r\n    }\r\n\r\n    /*\r\n     * 계약 잠금 해제\r\n     * 잠긴 계약을 해제할 때 사용된다.\r\n     */\r\n    /*\r\n     * Release contract lock\r\n     * The function is used to revert a locked contract to a normal state. \r\n     */\r\n    function unlock() external onlyOwner returns (bool) {\r\n        isLock = false;\r\n        return isLock;\r\n    }\r\n}\r\n\r\ncontract SymToken is ERC20Like {\r\n    string public constant name = \"SymVerse\";\r\n    string public constant symbol = \"SYM\";\r\n    uint256 public constant decimals = 18;\r\n    \r\n    event CreateToken(address indexed c_owner, string c_name, string c_symbol, uint256 c_totalSupply);\r\n\r\n    constructor () public {\r\n        _totalSupply = 1000000000 * (10 ** decimals);\r\n        _tokenContainers[msg.sender].balance = _totalSupply;\r\n        emit CreateToken(msg.sender, name, symbol, _tokenContainers[msg.sender].balance);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowanceDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulationAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dissmissDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegator_\",\"type\":\"address\"}],\"name\":\"appointDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowanceDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferDelegator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"c_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"c_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"c_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"c_totalSupply\",\"type\":\"uint256\"}],\"name\":\"CreateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDelegator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDelegator\",\"type\":\"address\"}],\"name\":\"DelegateAppointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SymToken","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://0d17e7d12dc9e752a08292c1d11cfe52515c2bec499d136e49f2d76dae1f5b9b"}]}