{"status":"1","message":"OK","result":[{"SourceCode":"{\"ATT.sol\":{\"content\":\"pragma solidity ^0.4.26;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract Token {\\n\\n    /// @return total amount of tokens\\n    function totalSupply() constant returns (uint256 supply) {}\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return The balance\\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _value) returns (bool success) {}\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\\n\\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return Whether the approval was successful or not\\n    function approve(address _spender, uint256 _value) returns (bool success) {}\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n    \\n}\\n\\n\\n\\ncontract StandardToken is Token {\\n    \\n    using SafeMath for uint256;\\n\\n    function transfer(address _to, uint256 _value) returns (bool success) {\\n        //Default assumes totalSupply can\\u0027t be over max (2^256 - 1).\\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn\\u0027t wrap.\\n        //Replace the if with this one instead.\\n        //if (balances[msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]) {\\n        // 防止假充值\\n        require(_to != address(0));\\n        require(_value \\u003e= 0);     \\n        require(_value \\u003c= balances[msg.sender]);\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n     }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\\n        //if (balances[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 balances[_to] + _value \\u003e balances[_to]) {\\n        // 防止假充值\\n        require(_to != address(0));\\n        require(_value \\u003e= 0);       \\n        require(_value \\u003c= balances[_from]);\\n        require(allowed[_from][msg.sender] \\u003e= _value);\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n        \\n    }\\n\\n    function balanceOf(address _owner) constant returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function approve(address _spender, uint256 _value) returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\\n      return allowed[_owner][_spender];\\n    }\\n\\n    mapping (address =\\u003e uint256) balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) allowed;\\n    uint256 public totalSupply;\\n}\\n\\n\\n//name this contract whatever you\\u0027d like\\ncontract ATTToken is StandardToken {\\n\\n    \\n\\n    function () {\\n        //if ether is sent to this address, send it back.\\n        throw;\\n    }\\n\\n    /* Public variables of the token */\\n\\n    /*\\n    NOTE:\\n    The following variables are OPTIONAL vanities. One does not have to include them.\\n    They allow one to customise the token contract \\u0026 in no way influences the core functionality.\\n    Some wallets/interfaces might not even bother to look at this information.\\n    */\\n    string public name;                   //fancy name: eg Simon Bucks\\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It\\u0027s like comparing 1 wei to 1 ether.\\n    string public symbol;                 //An identifier: eg SBX\\n    string public version = \\u0027H1.0\\u0027;       //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n//\\n// CHANGE THESE VALUES FOR YOUR TOKEN\\n//\\n\\n//make sure this function name matches the contract name above. So if you\\u0027re token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\\n\\n    function ATTToken(\\n        ) {\\n        balances[msg.sender] = 3000000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\\n        totalSupply = 3000000000000000000000000000;                        // Update total supply (100000 for example)\\n        name = \\\"Attila\\\";                                   // Set the name for display purposes\\n        decimals = 18;                            // Amount of decimals for display purposes\\n        symbol = \\\"ATT\\\";                               // Set the symbol for display purposes\\n    }\\n\\n    /* Approves and then calls the receiving contract */\\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n\\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn\\u0027t have to include a contract in here just for this.\\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\\n        if(!_spender.call(bytes4(bytes32(sha3(\\\"receiveApproval(address,uint256,address,bytes)\\\"))), msg.sender, _value, this, _extraData)) { throw; }\\n        return true;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.26;\\n\\n/*\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ATTToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://d20ad6941a36f1833fcff4a4f9545763705b3c64b95823e9e3a6915769e20323"}]}