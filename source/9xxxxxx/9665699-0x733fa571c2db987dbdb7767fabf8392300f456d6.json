{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n\r\n/// @notice This contract serves as an isolated execution environment for\r\n/// performing Eth-to-Dai, Dai-to-Eth, and Dharma Dai to Dharma USD Coin\r\n/// trades (with the latter in two directions). DO NOT give this contract\r\n/// any ERC20 allowances, as it will be able to steal the approved tokens.\r\n/// To trade Dai-to-Eth, instead transfer in Dai and call `tradeDaiForEth`\r\n/// (obviously, these steps must be performed atomically). For Eth-to-Dai,\r\n/// simply supply an amount of ETH alongside the call to `tradeEthForDai`.\r\n/// Be sure to include a parameter with the expected amount - this serves\r\n/// as a minimum that must end up in the contract at the end of the trade.\r\n/// Both calls will revert if the received amount is less than this value.\r\n/// @author 0age\r\ncontract EthToDaiTradeHelperV4 {\r\n    IERC20 internal constant _DAI = IERC20(\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    );\r\n \r\n    IERC20 internal constant _DDAI = IERC20(\r\n        0x00000000001876eB1444c986fD502e618c587430\r\n    );\r\n\r\n    IERC20 internal constant _DUSDC = IERC20(\r\n        0x00000000008943c65cAf789FFFCF953bE156f6f8\r\n    );\r\n    \r\n    /// @notice target is the dex to call and data is the payload\r\n    function tradeEthForDai(\r\n        uint256 daiExpected, address payable target, bytes calldata data\r\n    ) external payable returns (uint256 daiReceived) {\r\n        // Call into the provided target, supplying ETH and data.\r\n        (bool ok,) = target.call.value(address(this).balance)(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total Dai balance of this contract.\r\n        daiReceived = _DAI.balanceOf(address(this));\r\n        \r\n        // Ensure that enough Dai was received.\r\n        require(\r\n            daiReceived >= daiExpected,\r\n            \"Trade did not result in the expected amount of Dai.\"\r\n        );\r\n        \r\n        // Transfer the Dai to the caller and revert on failure.\r\n        ok = (_DAI.transfer(msg.sender, daiReceived));\r\n        require(ok, \"Dai transfer out failed.\");\r\n    }\r\n\r\n    /// @notice target is the dex to call and data is the payload\r\n    function tradeDaiForEth(\r\n        uint256 ethExpected, address target, bytes calldata data\r\n    ) external returns (uint256 ethReceived) {\r\n        // Ensure that target has allowance to transfer Dai.\r\n        if (_DAI.allowance(address(this), target) != uint256(-1)) {\r\n            _DAI.approve(target, uint256(-1));\r\n        }\r\n        \r\n        // Call into the provided target, providing data.\r\n        (bool ok,) = target.call(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total Ether balance of this contract.\r\n        ethReceived = address(this).balance;\r\n\r\n        // Ensure that enough Ether was received.\r\n        require(\r\n            ethReceived >= ethExpected,\r\n            \"Trade did not result in the expected amount of Ether.\"\r\n        );\r\n   \r\n        // Transfer the Ether to the caller and revert on failure.\r\n        (ok, ) = msg.sender.call.gas(4999).value(ethReceived)(\"\");\r\n\r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n    }\r\n\r\n    /// @notice target is the dex to call and data is the payload\r\n    function tradeDDaiForDUSDC(\r\n        uint256 dUSDCExpected, address target, bytes calldata data\r\n    ) external returns (uint256 dUSDCReceived) {\r\n        // Ensure that target has allowance to transfer dDai.\r\n        if (_DDAI.allowance(address(this), target) != uint256(-1)) {\r\n            _DDAI.approve(target, uint256(-1));\r\n        }\r\n        \r\n        // Call into the provided target, providing data.\r\n        (bool ok,) = target.call(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total dUSDC balance of this contract.\r\n        dUSDCReceived = _DUSDC.balanceOf(address(this));\r\n\r\n        // Ensure that enough dUSDC was received.\r\n        require(\r\n            dUSDCReceived >= dUSDCExpected,\r\n            \"Trade did not result in the expected amount of dUSDC.\"\r\n        );\r\n   \r\n        // Transfer the dUSDC to the caller and revert on failure.\r\n        ok = (_DUSDC.transfer(msg.sender, dUSDCReceived));\r\n        require(ok, \"dUSDC transfer out failed.\");\r\n    }\r\n\r\n    /// @notice target is the dex to call and data is the payload\r\n    function tradeDUSDCForDDai(\r\n        uint256 dDaiExpected, address target, bytes calldata data\r\n    ) external returns (uint256 dDaiReceived) {\r\n        // Ensure that target has allowance to transfer dUSDC.\r\n        if (_DUSDC.allowance(address(this), target) != uint256(-1)) {\r\n            _DUSDC.approve(target, uint256(-1));\r\n        }\r\n        \r\n        // Call into the provided target, providing data.\r\n        (bool ok,) = target.call(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total dDai balance of this contract.\r\n        dDaiReceived = _DDAI.balanceOf(address(this));\r\n\r\n        // Ensure that enough dDai was received.\r\n        require(\r\n            dDaiReceived >= dDaiExpected,\r\n            \"Trade did not result in the expected amount of dDai.\"\r\n        );\r\n   \r\n        // Transfer the dDai to the caller and revert on failure.\r\n        ok = (_DDAI.transfer(msg.sender, dDaiReceived));\r\n        require(ok, \"dDai transfer out failed.\");\r\n    }\r\n\r\n    /// @notice pass along revert reasons on external calls.\r\n    function _revertOnFailure(bool ok) internal pure {\r\n        if (!ok) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCExpected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tradeDDaiForDUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiExpected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tradeDUSDCForDDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethExpected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tradeDaiForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiExpected\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tradeEthForDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiReceived\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"EthToDaiTradeHelperV4","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://125d7fb59020528cb0f2c3bcd174db9afea9ad527c59fdcccab6d4ad6855aa85"}]}