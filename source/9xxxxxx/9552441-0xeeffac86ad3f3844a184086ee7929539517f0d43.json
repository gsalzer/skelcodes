{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nlibrary Address {\\r\\n \\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"AuthModule.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ncontract AuthModule {\\r\\n\\r\\n    address primaryAdmin;\\r\\n    address primaryIssuer;\\r\\n    address primaryExchange;\\r\\n\\r\\n    event JobshipTransferred(\\r\\n        string  strType,\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner,\\r\\n        address indexed caller\\r\\n      );\\r\\n\\r\\n    constructor(\\r\\n        address _admin, \\r\\n        address _issuer, \\r\\n        address _exchange\\r\\n    ) \\r\\n        public \\r\\n    {\\r\\n        primaryAdmin = _admin;\\r\\n        primaryIssuer = _issuer;\\r\\n        primaryExchange = _exchange;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address _admin) public view returns (bool) {\\r\\n        return primaryAdmin == _admin;\\r\\n    }\\r\\n\\r\\n    function isIssuer(address _issuer) public view returns (bool) {\\r\\n        return primaryIssuer == _issuer;\\r\\n    }\\r\\n\\r\\n    function isExchange(address _exchange) public view returns (bool) {\\r\\n        return primaryExchange == _exchange;\\r\\n    }\\r\\n\\r\\n    function transferIssuer(address _addr) public returns (bool) {\\r\\n        require (_addr != address(0) \\u0026\\u0026 _addr != primaryIssuer, \\\"_addr invalid\\\");\\r\\n        require (isIssuer(msg.sender) || isAdmin(msg.sender), \\\"only issuer or admin\\\");\\r\\n\\r\\n        emit JobshipTransferred(\\\"issuer\\\", primaryIssuer, _addr, msg.sender);\\r\\n        primaryIssuer = _addr;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferExchange(address _addr) public returns(bool) {\\r\\n        require (_addr != address(0) \\u0026\\u0026 _addr != primaryExchange, \\\"_addr invalid\\\");\\r\\n        require (isExchange(msg.sender) || isAdmin(msg.sender), \\\"only exchange or admin\\\");\\r\\n\\r\\n        emit JobshipTransferred(\\\"exchange\\\", primaryExchange, _addr, msg.sender);\\r\\n        primaryExchange = _addr;\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"Authorization.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\nimport \\\"./ContractBase.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./AuthModule.sol\\\";\\r\\n\\r\\ncontract Authorization is ContractBase, Pausable{\\r\\n    \\r\\n    constructor(address _proxy) public ContractBase(_proxy) {\\r\\n\\r\\n    }\\r\\n\\r\\n    modifier onlyInside(address _sender) {\\r\\n        require(proxy.isInsideContract(_sender), \\\"Can only be called inside\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIssuer(address _sender) {\\r\\n        AuthModule auth = AuthModule(proxy.getModule(\\\"AuthModule\\\"));\\r\\n        require(auth.isIssuer(_sender), \\\"Need to be issuer\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin(address _sender) {\\r\\n        AuthModule auth = AuthModule(proxy.getModule(\\\"AuthModule\\\"));\\r\\n        require(auth.isAdmin(_sender), \\\"Need to be admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyExchange(address _sender) {\\r\\n        AuthModule auth = AuthModule(proxy.getModule(\\\"AuthModule\\\"));\\r\\n        require(auth.isExchange(_sender), \\\"Need to be exchange\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIssuerOrExchange(address _sender) {\\r\\n        AuthModule auth = AuthModule(proxy.getModule(\\\"AuthModule\\\"));\\r\\n        require(auth.isIssuer(_sender) || auth.isExchange(_sender), \\\"Need to be issuer or exchange\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenModule(address _sender) {\\r\\n        require(_sender == proxy.getModule(\\\"TokenModule\\\"), \\\"Need to be tokenModule\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyAdmin(msg.sender)  {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function pause() public onlyAdmin(msg.sender) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n}\"},\"ContractBase.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\nimport \\\"./Proxy.sol\\\";\\r\\n\\r\\ncontract ContractBase {\\r\\n    \\r\\n    Proxy proxy;\\r\\n\\r\\n    constructor(address _proxy) public {\\r\\n        proxy = Proxy(_proxy);\\r\\n    }\\r\\n    \\r\\n}\"},\"Dividend.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IDividend.sol\\\";\\r\\nimport \\\"./Authorization.sol\\\";\\r\\n\\r\\ncontract Dividend is IDividend, Authorization {\\r\\n\\r\\n    event DividendTransferFrom(address token, address from, address[] investors, uint[] amount);\\r\\n\\r\\n    constructor(address _proxy) public Authorization(_proxy) {\\r\\n        \\r\\n    }\\r\\n\\r\\n    function transferFrom(address erc20Token, address from, address[] investors, uint[] amount) external \\r\\n    onlyIssuer(msg.sender)\\r\\n    whenNotPaused {\\r\\n        IERC20 token = IERC20(erc20Token);\\r\\n        for(uint i; i\\u003cinvestors.length; i++) {\\r\\n            token.transferFrom(from, investors[i], amount[i]);\\r\\n        }        \\r\\n        emit DividendTransferFrom(erc20Token, from, investors, amount);\\r\\n    }\\r\\n}\"},\"IDividend.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ninterface IDividend {\\r\\n    function transferFrom(address erc20Token, address from, address[] investors, uint[] amount) external;\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n    event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 value\\r\\n    );\\r\\n\\r\\n    event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ncontract Pausable {\\r\\n\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused, \\\"Contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier whenPaused() {\\r\\n        require(paused, \\\"Contract is not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _pause() internal whenNotPaused {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n    }\\r\\n\\r\\n    function _unpause() internal whenPaused {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"Proxy.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\nimport { AuthModule } from \\\"./AuthModule.sol\\\";\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\ncontract Proxy {\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(string =\\u003e address) moduleMap;\\r\\n    mapping(address =\\u003e bool) insideContracts;   // all internal contract address, used to make sure only called from inside\\r\\n\\r\\n    event AddInsideContract(address _contract);\\r\\n    event AddInsideContracts(address[] _contracts);\\r\\n    event RemoveInsideContract(address _contract);\\r\\n    event UpdateModule(string _moduleName, address _preModule, address _newModule);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        AuthModule auth = AuthModule(getModule(\\\"AuthModule\\\"));\\r\\n        require(auth.isAdmin(msg.sender), \\\"Need be admin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    constructor(address authModule) public {\\r\\n        _updateModule(\\\"AuthModule\\\", authModule, true);\\r\\n    }\\r\\n\\r\\n    function addInsideContract(address _contract) public onlyAdmin {\\r\\n        _addInsideContract(_contract);\\r\\n    }\\r\\n\\r\\n    function _addInsideContract(address _contract) private {\\r\\n        // require(insideContracts[_contract] == false, \\\"Inside contract already exists\\\");\\r\\n        insideContracts[_contract] = true;\\r\\n        emit AddInsideContract(_contract);\\r\\n    }\\r\\n    \\r\\n    function addInsideContracts(address[] _contracts) public onlyAdmin {\\r\\n        for(uint i = 0; i \\u003c _contracts.length; i++) {\\r\\n            // require(insideContracts[_contracts[i]] == false, \\\"Inside contract already exists\\\");\\r\\n            insideContracts[_contracts[i]] = true;\\r\\n        }\\r\\n        emit AddInsideContracts(_contracts);\\r\\n    }\\r\\n\\r\\n    function removeInsideContract(address _contract) public onlyAdmin {\\r\\n        _removeInsideContract(_contract);\\r\\n    }\\r\\n\\r\\n    function _removeInsideContract(address _contract) private {\\r\\n        delete insideContracts[_contract];\\r\\n        emit RemoveInsideContract(_contract);\\r\\n    }\\r\\n\\r\\n    // TODO: need to check if the address is a contract\\r\\n    function isInsideContract(address _contract) public view returns (bool) {\\r\\n        return _contract.isContract() \\u0026\\u0026 insideContracts[_contract] == true;\\r\\n    }\\r\\n\\r\\n    function updateModule(string _moduleName, address _module, bool _insideContract) public onlyAdmin {\\r\\n        _updateModule(_moduleName, _module, _insideContract);\\r\\n    }\\r\\n\\r\\n    function _updateModule(string _moduleName, address _module, bool _insideContract) private {\\r\\n        address preModule = moduleMap[_moduleName];\\r\\n        if(preModule != address(0))\\r\\n            _removeInsideContract(preModule);\\r\\n        moduleMap[_moduleName] = _module;\\r\\n        if(_insideContract \\u0026\\u0026 _module != address(0))\\r\\n            _addInsideContract(_module);\\r\\n        emit UpdateModule(_moduleName, preModule, _module);\\r\\n    }\\r\\n\\r\\n    function getModule(string _moduleName) public view returns (address) {\\r\\n        return moduleMap[_moduleName];\\r\\n    } \\r\\n    \\r\\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20Token\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"investors\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investors\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"DividendTransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"Dividend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002be753dd5f5400f5ffc896d6cad195b5db56f857","Library":"","LicenseType":"None","SwarmSource":"bzzr://e7a07372c331772163c050d9f90edab0a697a7048a04d9b938970f308ee5ce85"}]}