{"status":"1","message":"OK","result":[{"SourceCode":"{\"CGCrate.sol\":{\"content\":\"pragma solidity ^0.5.0;\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title CGCrate\\n * @dev Smart Contract for Crate Reward\\n */\\ncontract CGCrate is  Ownable {\\n\\n  // official CG site address to send ether\\n  address payable public officialSite;\\n\\n  // start time for open sale\\n  uint256 public startTime;\\n\\n  // CGC bounty ration, 0.01 ether = 1 CGC\\n  uint256 public bountyRatio = 10 finney;\\n\\n  // price for each crate\\n  uint256[9] public cratePrice = [20 ether, 13 ether, 6 ether, 4 ether, 3 ether, 250 finney, 50 finney, 500 finney, 50 finney ];\\n\\n  // remain crate counts\\n  uint[7] public crateSales = [12, 27, 52, 97, 25, 500, 2500];\\n\\n  // should use this\\n  mapping(address =\\u003e uint256) remains;\\n\\n  // event for new crate\\n  event CrateOpen(address indexed user, uint crateType, uint256 bounty);\\n\\n  constructor(address payable _officialSite, uint256 _startTime) public {\\n    officialSite = _officialSite;\\n    startTime = _startTime;\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n  * @dev update offical CG site wallet address\\n  * @param _officialSite address for new address\\n  */\\n  function updateOfficialSite(address payable _officialSite) public onlyOwnerOrController {\\n    require(_officialSite != address(0));\\n    officialSite = _officialSite;\\n  }\\n\\n  /**\\n  * @dev update bounty ratio\\n  * @param _bountyRatio uint256 for new ratio\\n  */\\n  function updateBountyRatio(uint256 _bountyRatio) public onlyOwnerOrController {\\n    require(_bountyRatio != 0);\\n    bountyRatio = _bountyRatio;\\n  }\\n\\n  /**\\n  * @dev get CrateSale counts\\n  */\\n  function getCratePrices() public view returns(uint[9] memory) {\\n    return cratePrice;\\n  }\\n\\n  /**\\n  * @dev update CrateSale\\n  * @param _type uint256 for Crate Type\\n  * @param _price uint256 for Crate Price\\n  */\\n  function updateCratePrice(uint256 _type, uint256 _price) public onlyOwnerOrController {\\n    require(_type \\u003c 9);\\n    cratePrice[_type] = _price;\\n  }\\n\\n  /**\\n  * @dev get CrateSale counts\\n  */\\n  function getCrateSales() public view returns(uint[7] memory) {\\n    return crateSales;\\n  }\\n\\n  /**\\n  * @dev update CrateSale\\n  * @param _type uint256 for Crate Type\\n  * @param _count uint256 for Crate Count\\n  */\\n  function updateCrateSale(uint256 _type, uint256 _count) public onlyOwnerOrController {\\n    require(_type \\u003c 7);\\n    crateSales[_type] = _count;\\n  }\\n\\n  /** update startTime\\n  * @dev update bounty ratio\\n  * @param _startTime uint256 for startTime\\n  */\\n  function updateStartTime(uint256 _startTime) public onlyOwnerOrController {\\n    startTime = _startTime;\\n  }\\n\\n  /**\\n  * @dev Crate Open\\n  * @param crateType uint type of Crate\\n  */\\n  function openCrate(uint crateType) public payable {\\n    require(crateType \\u003c 9);\\n    require(cratePrice[crateType] == msg.value);\\n    require(now \\u003e= startTime);\\n\\n    if(crateType\\u003c 7 \\u0026\\u0026 crateSales[crateType] == 0)\\n      revert();\\n\\n    officialSite.transfer(msg.value);\\n    uint total = remains[msg.sender] + msg.value;\\n    uint bounty = total / bountyRatio;\\n    remains[msg.sender] = total % bountyRatio;\\n\\n    if(crateType \\u003c 7)\\n      crateSales[crateType] --;\\n\\n    emit CrateOpen(msg.sender, crateType, bounty);\\n  }\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public newOwner;\\n\\n    // There can be multiple controller (designated operator) accounts.\\n    address[] internal controllers;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n   /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n   \\n    /**\\n    * @dev Throws if called by any account that\\u0027s not a controller.\\n    */\\n    modifier onlyController() {\\n        require(isController(msg.sender), \\\"only Controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrController() {\\n        require(msg.sender == owner || isController(msg.sender), \\\"only Owner Or Controller\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"sender address must be the owner\\u0027s address\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a new owner.\\n    * @param _newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(address(0) != _newOwner, \\\"new owner address must not be the owner\\u0027s address\\\");\\n        newOwner = _newOwner;\\n    }\\n\\n    /**\\n    * @dev Allows the new owner to confirm that they are taking control of the contract.\\n    */\\n    function acceptOwnership() public {\\n        require(msg.sender == newOwner, \\\"sender address must not be the new owner\\u0027s address\\\");\\n        emit OwnershipTransferred(owner, msg.sender);\\n        owner = msg.sender;\\n        newOwner = address(0);\\n    }\\n\\n    function isController(address _controller) internal view returns(bool) {\\n        for (uint8 index = 0; index \\u003c controllers.length; index++) {\\n            if (controllers[index] == _controller) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getControllers() public onlyOwner view returns(address[] memory) {\\n        return controllers;\\n    }\\n\\n    /**\\n    * @dev Allows a new controllers to be added\\n    * @param _controller The address of the controller account.\\n    */\\n    function addController(address _controller) public onlyOwner {\\n        require(address(0) != _controller, \\\"controller address must not be 0\\\");\\n        require(_controller != owner, \\\"controller address must not be the owner\\u0027s address\\\");\\n        for (uint8 index = 0; index \\u003c controllers.length; index++) {\\n            if (controllers[index] == _controller) {\\n                return;\\n            }\\n        }\\n        controllers.push(_controller);\\n    }\\n\\n    /**\\n    * @dev Remove a controller from the list\\n    * @param _controller The address of the controller account.\\n    */\\n    function removeController(address _controller) public onlyOwner {\\n        require(address(0) != _controller, \\\"controller address must not be 0\\\");\\n        for (uint8 index = 0; index \\u003c controllers.length; index++) {\\n            if (controllers[index] == _controller) {\\n                delete controllers[index];\\n            }\\n        }\\n    }\\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"updateCrateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateCratePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyRatio\",\"type\":\"uint256\"}],\"name\":\"updateBountyRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"crateType\",\"type\":\"uint256\"}],\"name\":\"openCrate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrateSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_officialSite\",\"type\":\"address\"}],\"name\":\"updateOfficialSite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cratePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialSite\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getControllers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crateSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCratePrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[9]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_officialSite\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"crateType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"CrateOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CGCrate","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006aa6940525c96324d6c3f174e15f553a4b59d8d0000000000000000000000000000000000000000000000000000000005e95c1e0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dda1ce980d4b4d83593158fdadfa36157163dcb62a6a37f1a5aba34fedb1c50c"}]}