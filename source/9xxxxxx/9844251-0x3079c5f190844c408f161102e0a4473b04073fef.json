{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/flashloan/aave/ILendingPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract ILendingPool {\r\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external;\r\n}\r\n\r\n// File: localhost/flashloan/FlashLoanLogger.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract FlashLoanLogger {\r\n    event FlashLoan(string actionType, uint256 id, uint256 loanAmount, address sender);\r\n\r\n    function logFlashLoan(\r\n        string calldata _actionType,\r\n        uint256 _id,\r\n        uint256 _loanAmount,\r\n        address _sender\r\n    ) external {\r\n        emit FlashLoan(_actionType, _loanAmount, _id, _sender);\r\n    }\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesKovan.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ConstantAddressesKovan {\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    address public constant VOX_ADDRESS = 0xBb4339c0aB5B1d9f14Bd6e3426444A1e9d86A1d9;\r\n    address public constant PETH_ADDRESS = 0xf4d791139cE033Ad35DB2B2201435fAd668B1b64;\r\n    address public constant TUB_ADDRESS = 0xa71937147b55Deb8a530C7229C442Fd3F31b7db2;\r\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\r\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    address public constant OTC_ADDRESS = 0x4A6bC4e803c62081ffEbCc8d227B5a87a58f1F8F;\r\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x4EC3570cADaAEE08Ae384779B0f3A45EF85289DE;\r\n    address public constant IDAI_ADDRESS = 0xA1e58F3B1927743393b25f261471E1f2D3D9f0F6;\r\n    address public constant CDAI_ADDRESS = 0xb6b09fBffBa6A5C4631e5F7B2e3Ee183aC259c0d;\r\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\r\n    address public constant SAI_SAVER_PROXY = 0xADB7c74bCe932fC6C27ddA3Ac2344707d2fBb0E6;\r\n\r\n    address public constant KYBER_WRAPPER = 0x68c56FF0E7BBD30AF9Ad68225479449869fC1bA0;\r\n    address public constant UNISWAP_WRAPPER = 0x2A4ee140F05f1Ba9A07A020b07CCFB76CecE4b43;\r\n    address public constant ETH2DAI_WRAPPER = 0x823cde416973a19f98Bb9C96d97F4FE6C9A7238B;\r\n    address public constant OASIS_WRAPPER = 0x0257Ba4876863143bbeDB7847beC583e4deb6fE6;\r\n\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\r\n\r\n    address public constant FACTORY_ADDRESS = 0xc72E74E474682680a414b506699bBcA44ab9a930;\r\n    //\r\n    address public constant PIP_INTERFACE_ADDRESS = 0xA944bd4b25C9F186A846fd5668941AA3d3B8425F;\r\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x64A436ae831C1672AE81F674CAb8B6775df3475C;\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n    address public constant KYBER_INTERFACE = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\r\n\r\n    address public constant SAVINGS_LOGGER_ADDRESS = 0x2aa889D809B29c608dA99767837D189dAe12a874;\r\n\r\n    // Rinkeby, when no Kovan\r\n    address public constant UNISWAP_FACTORY = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\r\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\r\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\r\n\r\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\r\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\r\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\r\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\r\n\r\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\r\n\r\n    // Our contracts\r\n    address public constant SUBSCRIPTION_ADDRESS = 0xFC41f79776061a396635aD0b9dF7a640A05063C1;\r\n    address public constant MONITOR_ADDRESS = 0xfC1Fc0502e90B7A3766f93344E1eDb906F8A75DD;\r\n\r\n    // TODO: find out what the\r\n    address public constant NEW_CDAI_ADDRESS = 0xe7bc397DBd069fC7d0109C0636d06888bb50668c;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesMainnet.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ConstantAddressesMainnet {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant IDAI_ADDRESS = 0x14094949152EDDBFcd073717200DA82fEd8dC960;\r\n    address public constant SOLO_MARGIN_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    address public constant CDAI_ADDRESS = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant VOX_ADDRESS = 0x9B0F70Df76165442ca6092939132bBAEA77f2d7A;\r\n    address public constant PETH_ADDRESS = 0xf53AD2c6851052A81B42133467480961B2321C09;\r\n    address public constant TUB_ADDRESS = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant OTC_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant KYBER_WRAPPER = 0x8F337bD3b7F2b05d9A8dC8Ac518584e833424893;\r\n    address public constant UNISWAP_WRAPPER = 0x1e30124FDE14533231216D95F7798cD0061e5cf8;\r\n    address public constant ETH2DAI_WRAPPER = 0xd7BBB1777E13b6F535Dec414f575b858ed300baF;\r\n    address public constant OASIS_WRAPPER = 0x9aBE2715D2d99246269b8E17e9D1b620E9bf6558;\r\n\r\n    address public constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    address public constant UNISWAP_FACTORY = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address public constant PIP_INTERFACE_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\r\n\r\n    address public constant PROXY_REGISTRY_INTERFACE_ADDRESS = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n\r\n    address public constant SAVINGS_LOGGER_ADDRESS = 0x89b3635BD2bAD145C6f92E82C9e83f06D5654984;\r\n    address public constant AUTOMATIC_LOGGER_ADDRESS = 0xAD32Ce09DE65971fFA8356d7eF0B783B82Fd1a9A;\r\n\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x6eC6D98e2AF940436348883fAFD5646E9cdE2446;\r\n\r\n    // Kovan addresses, not used on mainnet\r\n    address public constant COMPOUND_DAI_ADDRESS = 0x25a01a05C188DaCBCf1D61Af55D4a5B4021F7eeD;\r\n    address public constant STUPID_EXCHANGE = 0x863E41FE88288ebf3fcd91d8Dbb679fb83fdfE17;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n\r\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\r\n\r\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\r\n\r\n    // Our contracts\r\n    address public constant SUBSCRIPTION_ADDRESS = 0x83152CAA0d344a2Fd428769529e2d490A88f4393;\r\n    address public constant MONITOR_ADDRESS = 0x3F4339816EDEF8D3d3970DB2993e2e0Ec6010760;\r\n\r\n    address public constant NEW_CDAI_ADDRESS = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n    address public constant NEW_IDAI_ADDRESS = 0x493C57C4763932315A328269E1ADaD09653B9081;\r\n\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddresses.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ncontract ConstantAddresses is ConstantAddressesMainnet {}\r\n\r\n// File: localhost/mcd/maker/Join.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Join {\r\n    bytes32 public ilk;\r\n\r\n    function dec() public returns (uint);\r\n    function gem() public returns (Gem);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\n// File: localhost/mcd/maker/Manager.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Manager {\r\n    function last(address) public returns (uint);\r\n    function cdpCan(address, uint, address) public view returns (uint);\r\n    function ilks(uint) public view returns (bytes32);\r\n    function owns(uint) public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function vat() public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function give(uint, address) public;\r\n    function cdpAllow(uint, address, uint) public;\r\n    function urnAllow(address, uint) public;\r\n    function frob(uint, int, int) public;\r\n    function flux(uint, address, uint) public;\r\n    function move(uint, address, uint) public;\r\n    function exit(address, uint, address, uint) public;\r\n    function quit(uint, address) public;\r\n    function enter(address, uint) public;\r\n    function shift(uint, uint) public;\r\n}\r\n\r\n// File: localhost/DS/DSNote.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSAuthority.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\r\n}\r\n\r\n// File: localhost/DS/DSAuth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    function() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        returns (address target, bytes32 response)\r\n    {\r\n        target = cache.read(_code);\r\n        if (target == address(0)) {\r\n            // deploy contract & store its address in cache\r\n            target = cache.write(_code);\r\n        }\r\n\r\n        response = execute(target, _data);\r\n    }\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        auth\r\n        note\r\n        returns (bytes32 response)\r\n    {\r\n        require(_target != address(0));\r\n\r\n        // call contract in current context\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas, 5000),\r\n                _target,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                32\r\n            )\r\n            response := mload(0) // load delegatecall output\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n    }\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public payable auth note returns (bool) {\r\n        require(_cacheAddr != address(0)); // invalid cache address\r\n        cache = DSProxyCache(_cacheAddr); // overwrite cache\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n// File: localhost/DS/DSMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/mcd/saver_proxy/SaverProxyHelper.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Helper methods for MCDSaverProxy\r\ncontract SaverProxyHelper is DSMath {\r\n\r\n    /// @notice Returns a normalized debt _amount based on the current rate\r\n    /// @param _amount Amount of dai to be normalized\r\n    /// @param _rate Current rate of the stability fee\r\n    /// @param _daiVatBalance Balance od Dai in the Vat for that CDP\r\n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\r\n        if (_daiVatBalance < mul(_amount, RAY)) {\r\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\r\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    /// @notice Converts a number to Rad percision\r\n    /// @param _wad The input number in wad percision\r\n    function toRad(uint _wad) internal pure returns (uint) {\r\n        return mul(_wad, 10 ** 27);\r\n    }\r\n\r\n    /// @notice Converts a number to 18 decimal percision\r\n    /// @param _joinAddr Join address of the collateral\r\n    /// @param _amount Number to be converted\r\n    function convertTo18(address _joinAddr, uint256 _amount) internal returns (uint256) {\r\n        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\r\n    }\r\n\r\n    /// @notice Converts a uint to int and checks if positive\r\n    /// @param _x Number to be converted\r\n    function toPositiveInt(uint _x) internal pure returns (int y) {\r\n        y = int(_x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    /// @notice Gets Dai amount in Vat which can be added to Cdp\r\n    /// @param _vat Address of Vat contract\r\n    /// @param _urn Urn of the Cdp\r\n    /// @param _ilk Ilk of the Cdp\r\n    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\r\n        uint dai = Vat(_vat).dai(_urn);\r\n\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n\r\n        amount = toPositiveInt(dai / rate);\r\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\r\n    }\r\n\r\n    /// @notice Gets the whole debt of the CDP\r\n    /// @param _vat Address of Vat contract\r\n    /// @param _usr Address of the Dai holder\r\n    /// @param _urn Urn of the Cdp\r\n    /// @param _ilk Ilk of the Cdp\r\n    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n        uint dai = Vat(_vat).dai(_usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        daiAmount = rad / RAY;\r\n\r\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\r\n    }\r\n\r\n    /// @notice Gets the token address from the Join contract\r\n    /// @param _joinAddr Address of the Join contract\r\n    function getCollateralAddr(address _joinAddr) internal returns (address) {\r\n        return address(Join(_joinAddr).gem());\r\n    }\r\n\r\n    /// @notice Gets CDP info (collateral, debt)\r\n    /// @param _manager Manager contract\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\r\n        address vat = _manager.vat();\r\n        address urn = _manager.urns(_cdpId);\r\n\r\n        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\r\n        (,uint rate,,,) = Vat(vat).ilks(_ilk);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    /// @notice Address that owns the DSProxy that owns the CDP\r\n    /// @param _manager Manager contract\r\n    /// @param _cdpId Id of the CDP\r\n    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\r\n\r\n        return proxy.owner();\r\n    }\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchangeKovan.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ConstantAddressesExchangeKovan {\r\n    address public constant MAKER_DAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0xAaF64BFCC32d0F15873a02163e7E500671a4ffcD;\r\n    address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\r\n    address payable public constant WALLET_ID = 0x54b44C6B18fc0b4A1010B21d524c338D1f8065F6;\r\n    address public constant LOGGER_ADDRESS = 0x32d0e18f988F952Eb3524aCE762042381a2c39E5;\r\n    address public constant DISCOUNT_ADDRESS = 0x1297c1105FEDf45E0CF6C102934f32C4EB780929;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000170CcC93903185bE5A2094C870Df62;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xACA7d11e3f482418C324aAC8e90AaD0431f692A6;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x1476483dD8C35F25e568113C5f70249D3976ba21;\r\n    address public constant VAT_ADDRESS = 0xbA987bDB501d131f766fEe8180Da5d81b34b69d9;\r\n    address public constant SPOTTER_ADDRESS = 0x3a042de6413eDB15F2784f2f97cC68C7E9750b2D;\r\n    address public constant PROXY_ACTIONS = 0xd1D24637b9109B7f61459176EdcfF9Be56283a7B;\r\n\r\n    address public constant JUG_ADDRESS = 0xcbB7718c9F39d05aEEDE1c472ca8Bf804b2f1EaD;\r\n    address public constant DAI_JOIN_ADDRESS = 0x5AA71a3ae1C0bd6ac27A1f28e1415fFFB6F15B8c;\r\n    address public constant ETH_JOIN_ADDRESS = 0x775787933e92b709f2a3C70aa87999696e74A9F8;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0x433870076aBd08865f0e038dcC4Ac6450e313Bd8;\r\n\r\n    address public constant SAI_ADDRESS = 0xC4375B7De8af5a38a93548eb8453a498222C4fF2;\r\n    address public constant DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0x411B2Faa662C8e3E5cF8f01dFdae0aeE482ca7b0;\r\n\r\n    // Our contracts\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchangeMainnet.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ConstantAddressesExchangeMainnet {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0x862F3dcF1104b8a9468fBb8B843C37C31B41eF09;\r\n\r\n    // new MCD contracts\r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n\r\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\r\n\r\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\r\n\r\n    // Our contracts\r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address public constant NEW_IDAI_ADDRESS = 0x6c1E2B0f67e00c06c8e2BE7Dc681Ab785163fF4D;\r\n}\r\n\r\n// File: localhost/constants/ConstantAddressesExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n// solhint-disable-next-line no-empty-blocks\r\ncontract ConstantAddressesExchange is ConstantAddressesExchangeMainnet {}\r\n\r\n// File: localhost/interfaces/SaverExchangeInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SaverExchangeInterface {\r\n    function getBestPrice(\r\n        uint256 _amount,\r\n        address _srcToken,\r\n        address _destToken,\r\n        uint256 _exchangeType\r\n    ) public view returns (address, uint256);\r\n}\r\n\r\n// File: localhost/interfaces/TokenInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint256);\r\n\r\n    function balanceOf(address) public returns (uint256);\r\n\r\n    function approve(address, uint256) public;\r\n\r\n    function transfer(address, uint256) public returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public returns (bool);\r\n\r\n    function deposit() public payable;\r\n\r\n    function withdraw(uint256) public;\r\n}\r\n\r\n// File: localhost/mcd/saver_proxy/ExchangeHelper.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Helper methods for integration with SaverExchange\r\ncontract ExchangeHelper is ConstantAddressesExchange {\r\n\r\n    /// @notice Swaps 2 tokens on the Saver Exchange\r\n    /// @dev ETH is sent with Weth address\r\n    /// @param _data [amount, minPrice, exchangeType, 0xPrice]\r\n    /// @param _src Token address of the source token\r\n    /// @param _dest Token address of the destination token\r\n    /// @param _exchangeAddress Address of 0x exchange that should be called\r\n    /// @param _callData data to call 0x exchange with\r\n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\r\n        address wrapper;\r\n        uint price;\r\n        // [tokensReturned, tokensLeft]\r\n        uint[2] memory tokens;\r\n        bool success;\r\n\r\n        // tokensLeft is equal to amount at the beginning\r\n        tokens[1] = _data[0];\r\n\r\n        _src = wethToKyberEth(_src);\r\n        _dest = wethToKyberEth(_dest);\r\n\r\n        // use this to avoid stack too deep error\r\n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\r\n\r\n        // if _data[2] == 4 use 0x if possible\r\n        if (_data[2] == 4) {\r\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\r\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\r\n            }\r\n\r\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\r\n\r\n            // if specifically 4, then require it to be successfull\r\n            require(success && tokens[0] > 0, \"0x transaction failed\");\r\n        }\r\n\r\n        // no 0x\r\n        // if (_data[2] == 5) {\r\n        //     (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\r\n\r\n        //     require(price > _data[1], \"Slippage hit onchain price\");\r\n\r\n        //     if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\r\n        //         uint tRet;\r\n        //         (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\r\n        //         tokens[0] += tRet;\r\n        //     } else {\r\n        //         ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\r\n\r\n        //         if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\r\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\r\n        //         } else {\r\n        //             tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\r\n        //         }\r\n        //     }\r\n\r\n        //     return tokens[0];\r\n        // }\r\n\r\n        if (tokens[0] == 0) {\r\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], orderAddresses[1], orderAddresses[2], _data[2]);\r\n\r\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\r\n\r\n            // handle 0x exchange, if equal price, try 0x to use less gas\r\n            if (_data[3] >= price) {\r\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\r\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _data[0]);\r\n                }\r\n\r\n                // when selling eth its possible that some eth isn't sold and it is returned back\r\n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance, _data[0]);\r\n            }\r\n\r\n            // if there are more tokens left, try to sell them on other exchanges\r\n            if (tokens[1] > 0) {\r\n                // as it stands today, this can happend only when selling ETH\r\n                if (tokens[1] != _data[0]) {\r\n                    (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _data[2]);\r\n                }\r\n\r\n                require(price > _data[1], \"Slippage hit onchain price\");\r\n\r\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\r\n                    uint tRet;\r\n                    (tRet,) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\r\n                    tokens[0] += tRet;\r\n                } else {\r\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\r\n\r\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\r\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\r\n                    } else {\r\n                        tokens[0] += ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return tokens[0];\r\n    }\r\n\r\n    // @notice Takes order from 0x and returns bool indicating if it is successful\r\n    // @param _addresses [exchange, src, dst]\r\n    // @param _data Data to send with call\r\n    // @param _value Value to send with call\r\n    // @param _amount Amount to sell\r\n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value, uint _amount) private returns(bool, uint, uint) {\r\n        bool success;\r\n\r\n        (success, ) = _addresses[0].call.value(_value)(_data);\r\n\r\n        uint tokensLeft = _amount;\r\n        uint tokensReturned = 0;\r\n        if (success){\r\n            // check how many tokens left from _src\r\n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\r\n                tokensLeft = address(this).balance;\r\n            } else {\r\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\r\n            }\r\n\r\n            // check how many tokens are returned\r\n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\r\n                tokensReturned = address(this).balance;\r\n            } else {\r\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        return (success, tokensReturned, tokensLeft);\r\n    }\r\n\r\n    /// @notice Converts WETH -> Kybers Eth address\r\n    /// @param _src Input address\r\n    function wethToKyberEth(address _src) internal pure returns (address) {\r\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\r\n    }\r\n}\r\n\r\n// File: localhost/mcd/maker/Gem.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Gem {\r\n    function dec() public returns (uint);\r\n    function gem() public returns (Gem);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n    function allowance(address, address) public returns (uint);\r\n}\r\n\r\n// File: localhost/mcd/maker/Vat.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n\r\n    function can(address, address) public view returns (uint);\r\n    function dai(address) public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\n// File: localhost/mcd/maker/DaiJoin.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract DaiJoin {\r\n    function vat() public returns (Vat);\r\n    function dai() public returns (Gem);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\n// File: localhost/mcd/maker/Jug.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Jug {\r\n    struct Ilk {\r\n        uint256 duty;\r\n        uint256  rho;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    function drip(bytes32) public returns (uint);\r\n}\r\n\r\n// File: localhost/interfaces/PipInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PipInterface {\r\n    function read() public returns (bytes32);\r\n}\r\n\r\n// File: localhost/mcd/maker/Spotter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Spotter {\r\n    struct Ilk {\r\n        PipInterface pip;\r\n        uint256 mat;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    uint256 public par;\r\n\r\n}\r\n\r\n// File: localhost/mcd/Discount.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}\r\n\r\n// File: localhost/loggers/SaverLogger.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SaverLogger {\r\n    event Repay(\r\n        uint256 indexed cdpId,\r\n        address indexed owner,\r\n        uint256 collateralAmount,\r\n        uint256 daiAmount\r\n    );\r\n    event Boost(\r\n        uint256 indexed cdpId,\r\n        address indexed owner,\r\n        uint256 daiAmount,\r\n        uint256 collateralAmount\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LogRepay(uint256 _cdpId, address _owner, uint256 _collateralAmount, uint256 _daiAmount)\r\n        public\r\n    {\r\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\r\n    }\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LogBoost(uint256 _cdpId, address _owner, uint256 _daiAmount, uint256 _collateralAmount)\r\n        public\r\n    {\r\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\r\n    }\r\n}\r\n\r\n// File: localhost/interfaces/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// File: localhost/interfaces/ExchangeInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n//TODO: currenlty only adjusted to kyber, but should be genric interfaces for more dec. exchanges\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken(uint256 _ethAmount, address _tokenAddress, uint256 _maxAmount)\r\n        external\r\n        payable\r\n        returns (uint256, uint256);\r\n\r\n    function swapTokenToEther(address _tokenAddress, uint256 _amount, uint256 _maxAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function swapTokenToToken(address _src, address _dest, uint256 _amount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function getExpectedRate(address src, address dest, uint256 srcQty)\r\n        external\r\n        view\r\n        returns (uint256 expectedRate);\r\n}\r\n\r\n// File: localhost/mcd/saver_proxy/MCDSaverProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Implements Boost and Repay for MCD CDPs\r\ncontract MCDSaverProxy is SaverProxyHelper, ExchangeHelper {\r\n\r\n    uint public constant SERVICE_FEE = 400; // 0.25% Fee\r\n    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\r\n    bytes32 public constant USDC_ILK = 0x555344432d410000000000000000000000000000000000000000000000000000;\r\n\r\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\r\n    Vat public constant vat = Vat(VAT_ADDRESS);\r\n    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\r\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\r\n\r\n    /// @notice Checks if the collateral amount is increased after boost\r\n    /// @param _cdpId The Id of the CDP\r\n    modifier boostCheck(uint _cdpId) {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n        address urn = manager.urns(_cdpId);\r\n\r\n        (uint collateralBefore, ) = vat.urns(ilk, urn);\r\n\r\n        _;\r\n\r\n        (uint collateralAfter, ) = vat.urns(ilk, urn);\r\n\r\n        require(collateralAfter > collateralBefore);\r\n    }\r\n\r\n    /// @notice Checks if ratio is increased after repay\r\n    /// @param _cdpId The Id of the CDP\r\n    modifier repayCheck(uint _cdpId) {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n\r\n        uint beforeRatio = getRatio(_cdpId, ilk);\r\n\r\n        _;\r\n\r\n        uint afterRatio = getRatio(_cdpId, ilk);\r\n\r\n        require(afterRatio > beforeRatio || afterRatio == 0);\r\n    }\r\n\r\n    /// @notice Repay - draws collateral, converts to Dai and repays the debt\r\n    /// @dev Must be called by the DSProxy contract that owns the CDP\r\n    /// @param _data Uint array [cdpId, amount, minPrice, exchangeType, gasCost, 0xPrice]\r\n    /// @param _joinAddr Address of the join contract for the CDP collateral\r\n    /// @param _exchangeAddress Address of 0x exchange that should be called\r\n    /// @param _callData data to call 0x exchange with\r\n    function repay(\r\n        // cdpId, amount, minPrice, exchangeType, gasCost, 0xPrice\r\n        uint[6] memory _data,\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData\r\n    ) public payable repayCheck(_data[0]) {\r\n\r\n        address owner = getOwner(manager, _data[0]);\r\n        bytes32 ilk = manager.ilks(_data[0]);\r\n\r\n        // uint collDrawn;\r\n        // uint daiAmount;\r\n        // uint daiAfterFee;\r\n        uint[3] memory temp;\r\n\r\n        temp[0] = drawCollateral(_data[0], ilk, _joinAddr, _data[1]);\r\n\r\n                                // collDrawn, minPrice, exchangeType, 0xPrice\r\n        uint[4] memory swapData = [temp[0], _data[2], _data[3], _data[5]];\r\n        temp[1] = swap(swapData, getCollateralAddr(_joinAddr), DAI_ADDRESS, _exchangeAddress, _callData);\r\n        temp[2] = sub(temp[1], getFee(temp[1], _data[4], owner));\r\n\r\n        paybackDebt(_data[0], ilk, temp[2], owner);\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n\r\n        SaverLogger(LOGGER_ADDRESS).LogRepay(_data[0], owner, temp[0], temp[1]);\r\n    }\r\n\r\n    /// @notice Boost - draws Dai, converts to collateral and adds to CDP\r\n    /// @dev Must be called by the DSProxy contract that owns the CDP\r\n    /// @param _data Uint array [cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice]\r\n    /// @param _joinAddr Address of the join contract for the CDP collateral\r\n    /// @param _exchangeAddress Address of 0x exchange that should be called\r\n    /// @param _callData data to call 0x exchange with\r\n    function boost(\r\n        // cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice\r\n        uint[6] memory _data,\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData\r\n    ) public payable boostCheck(_data[0]) {\r\n        address owner = getOwner(manager, _data[0]);\r\n        bytes32 ilk = manager.ilks(_data[0]);\r\n\r\n        // uint daiDrawn;\r\n        // uint daiAfterFee;\r\n        // uint collateralAmount;\r\n        uint[3] memory temp;\r\n\r\n        temp[0] = drawDai(_data[0], ilk, _data[1]);\r\n        temp[1] = sub(temp[0], getFee(temp[0], _data[4], owner));\r\n                                // daiAfterFee, minPrice, exchangeType, 0xPrice\r\n        uint[4] memory swapData = [temp[1], _data[2], _data[3], _data[5]];\r\n        temp[2] = swap(swapData, DAI_ADDRESS, getCollateralAddr(_joinAddr), _exchangeAddress, _callData);\r\n\r\n        addCollateral(_data[0], _joinAddr, temp[2]);\r\n\r\n        // if there is some eth left (0x fee), return it to user\r\n        if (address(this).balance > 0) {\r\n            tx.origin.transfer(address(this).balance);\r\n        }\r\n\r\n        SaverLogger(LOGGER_ADDRESS).LogBoost(_data[0], owner, temp[0], temp[2]);\r\n    }\r\n\r\n    /// @notice Draws Dai from the CDP\r\n    /// @dev If _daiAmount is bigger than max available we'll draw max\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @param _daiAmount Amount of Dai to draw\r\n    function drawDai(uint _cdpId, bytes32 _ilk, uint _daiAmount) internal returns (uint) {\r\n        uint rate = Jug(JUG_ADDRESS).drip(_ilk);\r\n        uint daiVatBalance = vat.dai(manager.urns(_cdpId));\r\n\r\n        uint maxAmount = getMaxDebt(_cdpId, _ilk);\r\n\r\n        if (_daiAmount >= maxAmount) {\r\n            _daiAmount = sub(maxAmount, 1);\r\n        }\r\n\r\n        manager.frob(_cdpId, int(0), normalizeDrawAmount(_daiAmount, rate, daiVatBalance));\r\n        manager.move(_cdpId, address(this), toRad(_daiAmount));\r\n\r\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\r\n            vat.hope(DAI_JOIN_ADDRESS);\r\n        }\r\n\r\n        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\r\n\r\n        return _daiAmount;\r\n    }\r\n\r\n    /// @notice Adds collateral to the CDP\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _joinAddr Address of the join contract for the CDP collateral\r\n    /// @param _amount Amount of collateral to add\r\n    function addCollateral(uint _cdpId, address _joinAddr, uint _amount) internal {\r\n        int convertAmount = 0;\r\n\r\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\r\n            Join(_joinAddr).gem().deposit.value(_amount)();\r\n            convertAmount = toPositiveInt(_amount);\r\n        } else {\r\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\r\n        }\r\n\r\n        Join(_joinAddr).gem().approve(_joinAddr, _amount);\r\n        Join(_joinAddr).join(address(this), _amount);\r\n\r\n        vat.frob(\r\n            manager.ilks(_cdpId),\r\n            manager.urns(_cdpId),\r\n            address(this),\r\n            address(this),\r\n            convertAmount,\r\n            0\r\n        );\r\n\r\n    }\r\n\r\n    /// @notice Draws collateral and returns it to DSProxy\r\n    /// @dev If _amount is bigger than max available we'll draw max\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @param _joinAddr Address of the join contract for the CDP collateral\r\n    /// @param _amount Amount of collateral to draw\r\n    function drawCollateral(uint _cdpId, bytes32 _ilk, address _joinAddr, uint _amount) internal returns (uint) {\r\n        uint maxCollateral = getMaxCollateral(_cdpId, _ilk);\r\n\r\n        if (_amount >= maxCollateral) {\r\n            _amount = sub(maxCollateral, 1);\r\n        }\r\n\r\n        uint frobAmount = _ilk == USDC_ILK ? _amount * (10 ** 12) : _amount;\r\n\r\n        manager.frob(_cdpId, -toPositiveInt(frobAmount), 0);\r\n        manager.flux(_cdpId, address(this), frobAmount);\r\n\r\n        Join(_joinAddr).exit(address(this), _amount);\r\n\r\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\r\n            Join(_joinAddr).gem().withdraw(_amount); // Weth -> Eth\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    /// @notice Paybacks Dai debt\r\n    /// @dev If the _daiAmount is bigger than the whole debt, returns extra Dai\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @param _daiAmount Amount of Dai to payback\r\n    /// @param _owner Address that owns the DSProxy that owns the CDP\r\n    function paybackDebt(uint _cdpId, bytes32 _ilk, uint _daiAmount, address _owner) internal {\r\n        address urn = manager.urns(_cdpId);\r\n\r\n        uint wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\r\n\r\n        if (_daiAmount > wholeDebt) {\r\n            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\r\n            _daiAmount = wholeDebt;\r\n        }\r\n\r\n        daiJoin.dai().approve(DAI_JOIN_ADDRESS, _daiAmount);\r\n        daiJoin.join(urn, _daiAmount);\r\n\r\n        manager.frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\r\n    }\r\n\r\n    /// @notice Calculates the fee amount\r\n    /// @param _amount Dai amount that is converted\r\n    /// @param _gasCost Used for Monitor, estimated gas cost of tx\r\n    /// @param _owner The address that controlls the DSProxy that owns the CDP\r\n    function getFee(uint _amount, uint _gasCost, address _owner) internal returns (uint feeAmount) {\r\n        uint fee = SERVICE_FEE;\r\n\r\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_owner)) {\r\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_owner);\r\n        }\r\n\r\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\r\n\r\n        if (_gasCost != 0) {\r\n            uint ethDaiPrice = getPrice(ETH_ILK);\r\n            _gasCost = rmul(_gasCost, ethDaiPrice);\r\n\r\n            feeAmount = add(feeAmount, _gasCost);\r\n        }\r\n\r\n        // fee can't go over 20% of the whole amount\r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        ERC20(DAI_ADDRESS).transfer(WALLET_ID, feeAmount);\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of collateral available to draw\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @dev Substracts 10 wei to aviod rounding error later on\r\n    function getMaxCollateral(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice(_ilk);\r\n\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\r\n\r\n        uint maxCollateral = sub(sub(collateral, (div(mul(mat, debt), price))), 10);\r\n\r\n        uint normalizeMaxCollateral = _ilk == USDC_ILK ? maxCollateral / (10 ** 12) : maxCollateral;\r\n\r\n        return normalizeMaxCollateral;\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of debt available to generate\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @dev Substracts 10 wei to aviod rounding error later on\r\n    function getMaxDebt(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice(_ilk);\r\n\r\n        (, uint mat) = spotter.ilks(_ilk);\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        return sub(sub(div(mul(collateral, price), mat), debt), 10);\r\n    }\r\n\r\n    /// @notice Gets a price of the asset\r\n    /// @param _ilk Ilk of the CDP\r\n    function getPrice(bytes32 _ilk) public view returns (uint) {\r\n        (, uint mat) = spotter.ilks(_ilk);\r\n        (,,uint spot,,) = vat.ilks(_ilk);\r\n\r\n        return rmul(rmul(spot, spotter.par()), mat);\r\n    }\r\n\r\n    /// @notice Gets CDP ratio\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice( _ilk);\r\n\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        if (debt == 0) return 0;\r\n\r\n        return rdiv(wmul(collateral, price), debt);\r\n    }\r\n\r\n    /// @notice Gets CDP info (collateral, debt, price, ilk)\r\n    /// @param _cdpId Id of the CDP\r\n    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk) {\r\n        address urn = manager.urns(_cdpId);\r\n        ilk = manager.ilks(_cdpId);\r\n\r\n        (collateral, debt) = vat.urns(ilk, urn);\r\n        (,uint rate,,,) = vat.ilks(ilk);\r\n\r\n        debt = rmul(debt, rate);\r\n        price = getPrice(ilk);\r\n    }\r\n\r\n}\r\n\r\n// File: localhost/flashloan/aave/MCDFlashLoanTaker.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract IMCDSubscriptions {\r\n    function unsubscribe(uint256 _cdpId) external;\r\n\r\n    function subscribersPos(uint256 _cdpId) external returns (uint256, bool);\r\n}\r\n\r\n\r\ncontract MCDFlashLoanTaker is ConstantAddresses, SaverProxyHelper {\r\n\r\n    address payable public constant MCD_SAVER_FLASH_LOAN = 0x0308ACc5Edf725Dc6ba65EaDF24cbC8353a3b37B;\r\n    address payable public constant MCD_CLOSE_FLASH_LOAN = 0xc8f1d54D68CB83B353D80DB5CCF174dBb1a3C96a;\r\n    address payable public constant MCD_OPEN_FLASH_LOAN = 0x86E132932566fb7030eeF19B997C8797De13CFBD;\r\n\r\n    address public constant SUBSCRIPTION_ADDRESS_NEW = 0xC45d4f6B6bf41b6EdAA58B01c4298B8d9078269a;\r\n\r\n    bytes32 public constant USDC_ILK = 0x555344432d410000000000000000000000000000000000000000000000000000;\r\n\r\n    address public constant AAVE_DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    // address public constant MCD_CLOSE_FLASH_PROXY = 0xF6195D8d254bEF755fA8232D55Bb54B3b3eCf0Ce;\r\n    // address payable public constant MCD_OPEN_FLASH_PROXY = 0x22e37Df56cAFc7f33e9438751dff42DbD5CB8Ed6;\r\n\r\n    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\r\n    // solhint-disable-next-line const-name-snakecase\r\n    FlashLoanLogger public constant logger = FlashLoanLogger(\r\n        0xb9303686B0EE92F92f63973EF85f3105329D345c\r\n    );\r\n\r\n    // solhint-disable-next-line const-name-snakecase\r\n    Vat public constant vat = Vat(VAT_ADDRESS);\r\n    // solhint-disable-next-line const-name-snakecase\r\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\r\n\r\n    function boostWithLoan(\r\n        uint[6] memory _data, // cdpId, daiAmount, minPrice, exchangeType, gasCost, 0xPrice\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData\r\n    ) public payable {\r\n        MCD_SAVER_FLASH_LOAN.transfer(msg.value); // 0x fee\r\n\r\n        uint256 maxDebt = getMaxDebt(_data[0], manager.ilks(_data[0]));\r\n        uint256 debtAmount = _data[1];\r\n\r\n        require(debtAmount >= maxDebt, \"Amount to small for flash loan use CDP balance instead\");\r\n\r\n        uint256 loanAmount = sub(debtAmount, maxDebt);\r\n\r\n        manager.cdpAllow(_data[0], MCD_SAVER_FLASH_LOAN, 1);\r\n\r\n        bytes memory paramsData = abi.encode(_data, _joinAddr, _exchangeAddress, _callData, false);\r\n\r\n        lendingPool.flashLoan(MCD_SAVER_FLASH_LOAN, AAVE_DAI_ADDRESS, loanAmount, paramsData);\r\n\r\n        manager.cdpAllow(_data[0], MCD_SAVER_FLASH_LOAN, 0);\r\n\r\n        logger.logFlashLoan(\"Boost\", loanAmount, _data[0], msg.sender);\r\n    }\r\n\r\n    function repayWithLoan(\r\n        uint256[6] memory _data,\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData\r\n    ) public payable {\r\n        MCD_SAVER_FLASH_LOAN.transfer(msg.value); // 0x fee\r\n\r\n        uint256 maxColl = getMaxCollateral(_data[0], manager.ilks(_data[0]));\r\n\r\n        uint256 loanAmount = sub(_data[1], maxColl);\r\n\r\n        manager.cdpAllow(_data[0], MCD_SAVER_FLASH_LOAN, 1);\r\n\r\n        bytes memory paramsData = abi.encode(_data, _joinAddr, _exchangeAddress, _callData, true);\r\n        lendingPool.flashLoan(MCD_SAVER_FLASH_LOAN, getAaveCollAddr(_joinAddr), loanAmount, paramsData);\r\n\r\n        manager.cdpAllow(_data[0], MCD_SAVER_FLASH_LOAN, 0);\r\n\r\n        logger.logFlashLoan(\"Repay\", loanAmount, _data[0], msg.sender);\r\n    }\r\n\r\n    function closeWithLoan(\r\n        uint256[6] memory _data,\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData,\r\n        uint256 _minCollateral\r\n    ) public payable {\r\n        MCD_CLOSE_FLASH_LOAN.transfer(msg.value); // 0x fee\r\n\r\n        bytes32 ilk = manager.ilks(_data[0]);\r\n\r\n        uint256 maxDebt = getMaxDebt(_data[0], ilk);\r\n\r\n        (uint256 collateral, ) = getCdpInfo(manager, _data[0], ilk);\r\n\r\n        uint256 wholeDebt = getAllDebt(\r\n            VAT_ADDRESS,\r\n            manager.urns(_data[0]),\r\n            manager.urns(_data[0]),\r\n            ilk\r\n        );\r\n\r\n        require(wholeDebt > maxDebt, \"No need for a flash loan\");\r\n\r\n        manager.cdpAllow(_data[0], MCD_CLOSE_FLASH_LOAN, 1);\r\n\r\n        uint[4] memory debtData = [wholeDebt, maxDebt, collateral, _minCollateral];\r\n        bytes memory paramsData = abi.encode(_data, debtData, _joinAddr, _exchangeAddress, _callData);\r\n\r\n        lendingPool.flashLoan(MCD_CLOSE_FLASH_LOAN, AAVE_DAI_ADDRESS, wholeDebt, paramsData);\r\n\r\n        manager.cdpAllow(_data[0], MCD_CLOSE_FLASH_LOAN, 0);\r\n\r\n        // If sub. to automatic protection unsubscribe\r\n        unsubscribe(SUBSCRIPTION_ADDRESS, _data[0]);\r\n        unsubscribe(SUBSCRIPTION_ADDRESS_NEW, _data[0]);\r\n\r\n        logger.logFlashLoan(\"Close\", wholeDebt, _data[0], msg.sender);\r\n    }\r\n\r\n    function openWithLoan(\r\n        uint256[6] memory _data, // collAmount, daiAmount, minPrice, exchangeType, gasCost, 0xPrice\r\n        bytes32 _ilk,\r\n        address _collJoin,\r\n        address _exchangeAddress,\r\n        bytes memory _callData,\r\n        address _proxy,\r\n        bool _isEth\r\n    ) public payable {\r\n        if (_isEth) {\r\n            MCD_OPEN_FLASH_LOAN.transfer(msg.value);\r\n        } else {\r\n            MCD_OPEN_FLASH_LOAN.transfer(msg.value); // 0x fee\r\n\r\n            ERC20(getCollateralAddr(_collJoin)).transferFrom(msg.sender, address(this), _data[0]);\r\n            ERC20(getCollateralAddr(_collJoin)).transfer(MCD_OPEN_FLASH_LOAN, _data[0]);\r\n        }\r\n\r\n        address[3] memory addrData = [_collJoin, _exchangeAddress, _proxy];\r\n\r\n        bytes memory paramsData = abi.encode(_data, _ilk, addrData, _callData, _isEth);\r\n\r\n        lendingPool.flashLoan(MCD_OPEN_FLASH_LOAN, AAVE_DAI_ADDRESS, _data[1], paramsData);\r\n\r\n        logger.logFlashLoan(\"Open\", manager.last(_proxy), _data[1], msg.sender);\r\n    }\r\n\r\n\r\n    /// @notice Gets the maximum amount of debt available to generate\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    function getMaxDebt(uint256 _cdpId, bytes32 _ilk) public view returns (uint256) {\r\n        uint256 price = getPrice(_ilk);\r\n\r\n        (, uint256 mat) = spotter.ilks(_ilk);\r\n        (uint256 collateral, uint256 debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        return sub(wdiv(wmul(collateral, price), mat), debt);\r\n    }\r\n\r\n    /// @notice Gets the maximum amount of collateral available to draw\r\n    /// @param _cdpId Id of the CDP\r\n    /// @param _ilk Ilk of the CDP\r\n    /// @dev Substracts 10 wei to aviod rounding error later on\r\n    function getMaxCollateral(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice(_ilk);\r\n\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\r\n\r\n        uint maxCollateral = sub(sub(collateral, (div(mul(mat, debt), price))), 10);\r\n\r\n        uint normalizeMaxCollateral = _ilk == USDC_ILK ? maxCollateral / (10 ** 12) : maxCollateral;\r\n\r\n        return normalizeMaxCollateral;\r\n    }\r\n\r\n    /// @notice Gets a price of the asset\r\n    /// @param _ilk Ilk of the CDP\r\n    function getPrice(bytes32 _ilk) public view returns (uint256) {\r\n        (, uint256 mat) = spotter.ilks(_ilk);\r\n        (, , uint256 spot, , ) = vat.ilks(_ilk);\r\n\r\n        return rmul(rmul(spot, spotter.par()), mat);\r\n    }\r\n\r\n    function getAaveCollAddr(address _joinAddr) internal returns (address) {\r\n        if (_joinAddr == 0x2F0b23f53734252Bda2277357e97e1517d6B042A\r\n            || _joinAddr == 0x775787933e92b709f2a3C70aa87999696e74A9F8) {\r\n            return KYBER_ETH_ADDRESS;\r\n        } else {\r\n            return getCollateralAddr(_joinAddr);\r\n        }\r\n    }\r\n\r\n    function unsubscribe(address _subContract, uint _cdpId) internal {\r\n        (, bool isSubscribed) = IMCDSubscriptions(_subContract).subscribersPos(_cdpId);\r\n\r\n        if (isSubscribed) {\r\n            IMCDSubscriptions(_subContract).unsubscribe(_cdpId);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"AAVE_DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUTOMATIC_LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH2DAI_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_INTERFACE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCD_CLOSE_FLASH_LOAN\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCD_OPEN_FLASH_LOAN\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MCD_SAVER_FLASH_LOAN\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MONITOR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_CDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_IDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PIP_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_REGISTRY_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVINGS_LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SOLO_MARGIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STUPID_EXCHANGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUBSCRIPTION_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUBSCRIPTION_ADDRESS_NEW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUB_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ILK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VOX_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"boostWithLoan\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"}],\"name\":\"closeWithLoan\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract Manager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract Manager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract FlashLoanLogger\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract Manager\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_collJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEth\",\"type\":\"bool\"}],\"name\":\"openWithLoan\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"repayWithLoan\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract Spotter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract Vat\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MCDFlashLoanTaker","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://85fbdff6d29c86fb3c1d1572ea23ea268616569b2ed8ac00a074c5160e01956e"}]}