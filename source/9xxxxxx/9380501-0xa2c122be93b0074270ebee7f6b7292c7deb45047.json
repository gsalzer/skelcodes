{"status":"1","message":"OK","result":[{"SourceCode":"// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\npragma solidity >=0.4.24;\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n    // Logged when an operator is added or removed.\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\r\n    function setResolver(bytes32 node, address resolver) external;\r\n    function setOwner(bytes32 node, address owner) external;\r\n    function setTTL(bytes32 node, uint64 ttl) external;\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function owner(bytes32 node) external view returns (address);\r\n    function resolver(bytes32 node) external view returns (address);\r\n    function ttl(bytes32 node) external view returns (uint64);\r\n    function recordExists(bytes32 node) external view returns (bool);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/ReverseRegistrar.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Resolver {\r\n    function setName(bytes32 node, string memory name) public;\r\n}\r\n\r\ncontract ReverseRegistrar {\r\n    // namehash('addr.reverse')\r\n    bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n\r\n    ENS public ens;\r\n    Resolver public defaultResolver;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param ensAddr The address of the ENS registry.\r\n     * @param resolverAddr The address of the default reverse resolver.\r\n     */\r\n    constructor(ENS ensAddr, Resolver resolverAddr) public {\r\n        ens = ensAddr;\r\n        defaultResolver = resolverAddr;\r\n\r\n        // Assign ownership of the reverse record to our deployer\r\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\r\n        if (address(oldRegistrar) != address(0x0)) {\r\n            oldRegistrar.claim(msg.sender);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers ownership of the reverse ENS record associated with the\r\n     *      calling account.\r\n     * @param owner The address to set as the owner of the reverse record in ENS.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function claim(address owner) public returns (bytes32) {\r\n        return claimWithResolver(owner, address(0x0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the reverse ENS record associated with the\r\n     *      calling account.\r\n     * @param owner The address to set as the owner of the reverse record in ENS.\r\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\r\n        bytes32 label = sha3HexAddress(msg.sender);\r\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\r\n        address currentOwner = ens.owner(node);\r\n\r\n        // Update the resolver if required\r\n        if (resolver != address(0x0) && resolver != ens.resolver(node)) {\r\n            // Transfer the name to us first if it's not already\r\n            if (currentOwner != address(this)) {\r\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\r\n                currentOwner = address(this);\r\n            }\r\n            ens.setResolver(node, resolver);\r\n        }\r\n\r\n        // Update the owner if required\r\n        if (currentOwner != owner) {\r\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the `name()` record for the reverse ENS record associated with\r\n     * the calling account. First updates the resolver to the default reverse\r\n     * resolver if necessary.\r\n     * @param name The name to set for this address.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function setName(string memory name) public returns (bytes32) {\r\n        bytes32 node = claimWithResolver(address(this), address(defaultResolver));\r\n        defaultResolver.setName(node, name);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the node hash for a given account's reverse records.\r\n     * @param addr The address to hash\r\n     * @return The ENS node hash.\r\n     */\r\n    function node(address addr) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\r\n    }\r\n\r\n    /**\r\n     * @dev An optimised function to compute the sha3 of the lower-case\r\n     *      hexadecimal representation of an Ethereum address.\r\n     * @param addr The address to hash\r\n     * @return The SHA3 hash of the lower-case hexadecimal encoding of the\r\n     *         input address.\r\n     */\r\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\r\n        addr;\r\n        ret; // Stop warning us about unused variables\r\n        assembly {\r\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\r\n\r\n            for { let i := 40 } gt(i, 0) { } {\r\n                i := sub(i, 1)\r\n                mstore8(i, byte(and(addr, 0xf), lookup))\r\n                addr := div(addr, 0x10)\r\n                i := sub(i, 1)\r\n                mstore8(i, byte(and(addr, 0xf), lookup))\r\n                addr := div(addr, 0x10)\r\n            }\r\n\r\n            ret := keccak256(0, 40)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @ensdomains/resolver/contracts/DefaultReverseResolver.sol\r\n\r\npragma solidity >=0.4.25;\r\n\r\n\r\n\r\n/**\r\n * @dev Provides a default implementation of a resolver for reverse records,\r\n * which permits only the owner to update it.\r\n */\r\ncontract DefaultReverseResolver {\r\n    // namehash('addr.reverse')\r\n    bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n\r\n    ENS public ens;\r\n    mapping (bytes32 => string) public name;\r\n\r\n    /**\r\n     * @dev Only permits calls by the reverse registrar.\r\n     * @param node The node permission is required for.\r\n     */\r\n    modifier onlyOwner(bytes32 node) {\r\n        require(msg.sender == ens.owner(node));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor\r\n     * @param ensAddr The address of the ENS registry.\r\n     */\r\n    constructor(ENS ensAddr) public {\r\n        ens = ensAddr;\r\n\r\n        // Assign ownership of the reverse record to our deployer\r\n        ReverseRegistrar registrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\r\n        if (address(registrar) != address(0x0)) {\r\n            registrar.claim(msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the name for a node.\r\n     * @param node The node to update.\r\n     * @param _name The name to set.\r\n     */\r\n    function setName(bytes32 node, string memory _name) public onlyOwner(node) {\r\n        name[node] = _name;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DefaultReverseResolver","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e","Library":"","LicenseType":"None","SwarmSource":"bzzr://dc267d537b31c3538e97b089b0b2e4fc6ccf9312b39ce36194955127da2b50a6"}]}