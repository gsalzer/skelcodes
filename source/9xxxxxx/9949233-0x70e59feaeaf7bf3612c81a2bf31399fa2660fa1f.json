{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n\r\n\r\n\r\n\r\n███████╗████████╗██╗░░██╗███████╗██████╗░██╗░░██╗██╗███╗░░██╗░██████╗░░░░░█████╗░██╗░░░░░██╗░░░██╗██████╗░\r\n██╔════╝╚══██╔══╝██║░░██║██╔════╝██╔══██╗██║░██╔╝██║████╗░██║██╔════╝░░░░██╔══██╗██║░░░░░██║░░░██║██╔══██╗\r\n█████╗░░░░░██║░░░███████║█████╗░░██████╔╝█████═╝░██║██╔██╗██║██║░░██╗░░░░██║░░╚═╝██║░░░░░██║░░░██║██████╦╝\r\n██╔══╝░░░░░██║░░░██╔══██║██╔══╝░░██╔══██╗██╔═██╗░██║██║╚████║██║░░╚██╗░░░██║░░██╗██║░░░░░██║░░░██║██╔══██╗\r\n███████╗░░░██║░░░██║░░██║███████╗██║░░██║██║░╚██╗██║██║░╚███║╚██████╔╝██╗╚█████╔╝███████╗╚██████╔╝██████╦╝\r\n╚══════╝░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚══╝░╚═════╝░╚═╝░╚════╝░╚══════╝░╚═════╝░╚═════╝░\r\n\r\n███████████████████████▀██████████████████████████████████████████████████████████████████\r\n█▄─█─▄█▄─▄█▄─▀█▄─▄█─▄▄▄▄███─▄▄─█▄─▄▄─████▀▄─██▄─▄███▄─▄█████▄─▄▄▀██▀▄─██▄─▄▄─█▄─▄▄─█─▄▄▄▄█\r\n██─▄▀███─███─█▄▀─██─██▄─███─██─██─▄██████─▀─███─██▀██─██▀████─██─██─▀─███─▄▄▄██─▄▄▄█▄▄▄▄─█\r\n▀▄▄▀▄▄▀▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▀▀▄▄▄▄▀▄▄▄▀▀▀▀▀▄▄▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▀▀▄▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▀▄▄▄▀▀▀▄▄▄▄▄▀\r\n\r\n𝑨𝒖𝒕𝒐𝒑𝒐𝒐𝒍 | 𝑴𝒂𝒕𝒓𝒊𝒙 | 𝑮𝒂𝒎𝒊𝒏𝒈 | 𝑴𝒂𝒓𝒌𝒆𝒕𝒑𝒍𝒂𝒄𝒆 | 𝑳𝒐𝒕𝒕𝒆𝒓𝒚 | 𝑱𝒂𝒄𝒌𝒑𝒐𝒕\r\nThis product is protected under license.  Any unauthorized copy, modification, or use without\r\nexpress written consent from the creators is prohibited.\r\n\r\n\r\n                                                                ▓▓                                                               \r\n                                                              ▓▓▓▓                                                               \r\n                            ██▓▓▓▓                            ██▓▓▓▓                              ████                           \r\n                            ████▓▓                            ██░░▓▓                            ████▓▓                           \r\n                            ████▓▓▓▓                        ████░░▓▓▓▓                          ██░░▓▓                           \r\n                            ██░░░░▓▓▓▓                      ██▒▒░░░░▓▓                        ██▒▒░░▓▓                           \r\n                            ██▒▒▒▒░░▓▓▓▓                  ████▒▒▒▒░░▓▓▓▓                    ████▒▒░░▓▓                           \r\n                          ██▒▒▒▒▒▒░░░░▓▓▓▓              ████▒▒▒▒▒▒░░░░▓▓▓▓              ██████▒▒▒▒░░▓▓                           \r\n                          ██▒▒▒▒▒▒▒▒░░░░▓▓▓▓▓▓      ▓▓▓▓██▓▓▒▒▒▒▒▒▒▒░░░░▓▓▓▓▓▓      ▓▓▓▓██▓▓▓▓▓▓▒▒░░▓▓▓▓                      ▓▓ \r\n▓▓▒▒                    ▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▒▒    ████▓▓▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▓▓    ▓▓██▓▓▓▓▓▓▒▒▓▓▒▒░░░░▓▓▒▒                  ▓▓▓▓▓▓\r\n▓▓▓▓▒▒▓▓▒▒              ██▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▓▓    ░░██▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▓▓    ░░██▓▓▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▓▓            ▓▓▓▓▓▓▓▓░░\r\n  ████▒▒▓▓▓▓▓▓▓▓      ████▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▓▓▓▓        ██▓▓▒▒▒▒▒▒▒▒▒▒▒▒░░▓▓▓▓          ██▒▒▒▒▒▒▓▓▒▒▒▒▒▒░░░░▓▓      ████████░░▓▓▓▓ \r\n    ██▒▒▒▒░░░░▓▓▓▓▓▓  ██████▒▒▒▒▒▒▒▒▒▒▒▒░░▓▓            ████▒▒▒▒▒▒▒▒░░░░▓▓            ██▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▓▓  ██████▒▒▒▒░░░░▓▓   \r\n    ██▒▒▒▒░░░░░░▓▓▓▓      ██▓▓▒▒▒▒▒▒▒▒░░░░▓▓              ██▒▒▒▒▒▒▒▒░░▓▓▓▓            ████▒▒▒▒▒▒▒▒░░░░▓▓▓▓      ██▒▒▒▒▒▒░░▓▓▓▓   \r\n    ████▒▒▒▒░░░░▓▓          ██▒▒▒▒▒▒▒▒░░▓▓▓▓              ██▒▒▒▒▒▒▒▒░░▓▓                ██▒▒▒▒▒▒░░░░▓▓▓▓        ██▒▒▒▒░░░░▓▓     \r\n    ░░██▓▓▒▒▒▒░░▓▓          ████▒▒▒▒▒▒░░▓▓░░              ██▒▒▒▒▒▒▒▒░░▓▓              ▓▓██▒▒▒▒▒▒░░▓▓▓▓          ██▒▒▒▒░░▓▓▓▓     \r\n      ░░██▒▒▒▒░░▓▓          ░░██▒▒▒▒▒▒░░▓▓▒▒              ██▒▒▒▒▒▒▒▒░░▓▓              ██▓▓▒▒▒▒▒▒░░▓▓░░          ██▒▒▒▒░░▓▓░░     \r\n        ██▓▓▒▒▒▒▓▓            ██▓▓▒▒▒▒▒▒▒▒▓▓▒▒            ██▒▒▒▒▒▒▒▒░░▓▓            ▓▓██▒▒▒▒▒▒▒▒░░▓▓            ██▒▒░░▓▓▓▓       \r\n        ░░██▓▓▒▒▓▓▒▒          ░░██▒▒▒▒▒▒▒▒▒▒▓▓▒▒        ▓▓██▒▒▒▒▒▒▒▒░░▓▓▓▓          ██▓▓▓▓▒▒▒▒▒▒░░▓▓            ██▒▒░░▓▓░░       \r\n            ██▒▒▒▒▓▓▓▓        ██▒▒▒▒▒▒▒▒▒▒▒▒░░▓▓▓▓      ██▒▒▒▒▒▒▒▒▒▒░░░░▓▓        ████▒▒▒▒▒▒▒▒▒▒░░▓▓          ████░░▓▓▓▓         \r\n            ████▒▒▒▒▓▓        ██▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓▓▓██████▒▒▒▒▒▒▒▒▒▒▒▒░░▓▓▓▓▓▓██████▒▒▒▒▒▒▒▒▒▒▒▒░░▓▓        ██▒▒░░░░▓▓           \r\n              ██▒▒▒▒▓▓▓▓▓▓▓▓██▒▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒░░▒▒░░▓▓██▒▒▓▓▓▓▓▓▒▒▒▒▓▓▒▒░░▓▓▓▓▓▓▓▓▓▓██▒▒░░▓▓▓▓           \r\n              ████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▓▓▒▒▓▓▒▒▒▒▒▒▒▒▓▓▒▒▓▓▒▒▓▓▓▓▓▓▒▒▒▒▒▒░░░░▒▒▒▒▒▒▓▓▓▓▓▓▒▒▓▓▒▒░░░░░░░░▓▓██▓▓░░░░▓▓░░           \r\n                ██▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░▓▓               \r\n                  ██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▒▒▒▒▒▒▒▒░░▓▓▓▓               \r\n                  ████▒▒▒▒▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒░░▓▓                 \r\n                    ▓▓▓▓▓▓▓▓▒▒░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓                 \r\n                  ▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▒▒▒▒▒░░░░░░░░░░▒▒▒▒▓▓                 \r\n                  ▓▓▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████████████████████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░▒▒▓▓▓▓               \r\n                  ▓▓▒▒▓▓▓▓▓▓████████████████████████████████████████████████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓░░               \r\n                  ▓▓▓▓▓▓██████████████████▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓████████████████████                     \r\n                      ████████▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░██████████                     \r\n                        ▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░▓▓▓▓                     \r\n                        ▓▓▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓░░▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓░░▓▓▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░░░░▓▓                       \r\n                        ▓▓▒▒▒▒▒▒▓▓▓▓░░▓▓▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓░░▓▓▒▒▒▒░░░░▓▓                       \r\n                        ▓▓▒▒▓▓▒▒▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░░▓▓▓▓                       \r\n                        ▓▓▓▓▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒░░▓▓░░                       \r\n                        ░░▓▓▒▒▒▒▒▒▓▓▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▓▓▒▒▒▒▒▒▒▒░░▓▓                         \r\n                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████████████████████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓                         \r\n                          ▓▓▓▓████████████▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████████▓▓▓▓▓▓                         \r\n                        ████████▓▓▓▓▓▓▒▒▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒░░░░░░░░░░░░░░░░██████████                       \r\n                      ████▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░████                     \r\n                      ██▓▓▓▓▓▓▓▓▓▓▓▓▓▓████████████████████████████████████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▒▒██                     \r\n                      ██▓▓▓▓████████████                                        ████████████████████▓▓▓▓░░██                     \r\n                      ░░████░░░░░░▒▒░░░░                                        ░░░░  ░░░░░░░░░░░░░░████▓▓░░                     \r\n\r\n*/\r\npragma solidity 0.5.11;\r\n\r\n\r\ncontract EtherKingToken {\r\naddress public ownerWalletERC;\r\n    string public constant name = \"EtherKing\";\r\n    string public constant symbol = \"ETK\";\r\n    uint8 public constant decimals = 18; \r\n\r\n\r\n\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\nevent TransferFromContract(address indexed from, address indexed to, uint tokens,uint status);\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n   \r\n    uint256 totalSupply_=100000000000000000000000000000;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n   constructor() public { \r\nownerWalletERC=msg.sender;\r\nbalances[ownerWalletERC] = totalSupply_;\r\n    } \r\n\r\n    function totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n    }\r\n   \r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n   \r\n    function balanceOfOwner() public view returns (uint) {\r\n        return balances[ownerWalletERC];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n   \r\n    function transferFromOwner(address receiver, uint numTokens,uint status) internal returns (bool) {\r\n        numTokens=numTokens*1000000000000000000;\r\n        if(numTokens <= balances[ownerWalletERC]){\r\n        balances[ownerWalletERC] = balances[ownerWalletERC].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit TransferFromContract(ownerWalletERC, receiver, numTokens,status);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint numTokens) internal returns (bool) {\r\n        require(numTokens <= balances[owner]);   \r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n   \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract EtherKing is EtherKingToken{\r\n     address public ownerWallet;\r\n      uint public currUserID = 0;\r\n      uint public pool1currUserID = 0;\r\n      uint public pool2currUserID = 0;\r\n      uint public pool3currUserID = 0;\r\n       uint public jackpotcurrUserID = 0;\r\n   \r\n        uint public pool1activeUserID = 0;\r\n      uint public pool2activeUserID = 0;\r\n      uint public pool3activeUserID = 0;\r\n    \r\n     \r\n     \r\n      uint public unlimited_level_price=0;\r\n    \r\n      struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n       uint referredUsers;\r\n        mapping(uint => uint) levelExpired;\r\n        uint referredUserspool3;\r\n        uint referredUserspool1;\r\n    }\r\n   \r\n \r\n   \r\n     struct PoolUserStruct {\r\n        bool isExist;\r\n        uint id;\r\n       uint payment_received;\r\n       bool lucky_draw;\r\n       address user;\r\n    }\r\n    struct UserRegStruct{\r\n        bool isExist;\r\n        uint userid;\r\n        uint nooftime;\r\n        uint payment_received;\r\n        uint poolid;\r\n    }\r\n    mapping (address => UserStruct) public users;\r\n     mapping (uint => address) public userList;\r\n    \r\n     mapping (uint => PoolUserStruct) public pool1users;\r\n    mapping (address => UserRegStruct) public pool1userList;\r\n   \r\n     mapping (uint => PoolUserStruct) public pool2users;\r\n     mapping (address => UserRegStruct) public pool2userList;\r\n    \r\n     mapping (uint => PoolUserStruct) public pool3users;\r\n     mapping (address => UserRegStruct) public pool3userList;\r\n    \r\n  mapping (uint => address) public jackoptuserList;\r\n \r\n \r\n \r\n \r\n     uint counter =0;\r\n\r\n  uint pool_payment_amount=0.02 ether;\r\n \r\n      event getMoneyForPoolLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n     event regPoolEntry(address indexed _user,uint _level,   uint _time,uint poolid);\r\n  \r\n    \r\n    event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);\r\n    event luckydraw(uint id,address indexed _receiver, uint _level, uint _time);\r\n   event regJackpotPool(uint id,address indexed _user,uint _time);\r\n    UserStruct[] public requests;\r\n    \r\n      constructor()EtherKingToken() public {\r\n          ownerWallet = msg.sender;\r\n\r\n  \r\n  \r\n        UserStruct memory userStruct;\r\n        UserRegStruct memory pooluserreg;\r\n       \r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referredUsers:0,\r\n           referredUserspool3:0,\r\n           referredUserspool1:0\r\n        });\r\n       \r\n        users[ownerWallet] = userStruct;\r\n       userList[currUserID] = ownerWallet;\r\n      \r\n      \r\n         PoolUserStruct memory pooluserStruct;\r\n\r\n        pool1currUserID++;\r\n\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0,\r\n            lucky_draw:false,\r\n            user:msg.sender\r\n        });\r\n    pool1activeUserID=pool1currUserID;\r\n       pool1users[pool1currUserID] = pooluserStruct;\r\n      \r\n      pooluserreg = UserRegStruct({\r\n            isExist: true,\r\n            userid: currUserID,\r\n            payment_received:0,\r\n           nooftime:1,\r\n           poolid:pool1currUserID\r\n          \r\n        });\r\n       \r\n   \r\n     pool1userList[msg.sender]=pooluserreg;\r\n     \r\n       \r\n        pool2currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0,\r\n            lucky_draw:false,\r\n            user:msg.sender\r\n        });\r\n    pool2activeUserID=pool2currUserID;\r\n       pool2users[pool2currUserID] = pooluserStruct;\r\n      \r\n\r\n       \r\n    pooluserreg = UserRegStruct({\r\n            isExist: true,\r\n            userid: currUserID,\r\n           nooftime:1,\r\n           poolid:pool2currUserID,\r\n           payment_received:0\r\n        });\r\n       \r\n     pool2userList[msg.sender]=pooluserreg;\r\n      \r\n      \r\n        pool3currUserID++;\r\n        pooluserStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0,\r\n            lucky_draw:false,\r\n            user:msg.sender\r\n        });\r\n    pool3activeUserID=pool3currUserID;\r\n       pool3users[pool3currUserID] = pooluserStruct;\r\n     \r\n       pooluserreg = UserRegStruct({\r\n            isExist: true,\r\n            userid: currUserID,\r\n           nooftime:1,\r\n           poolid:pool3currUserID,\r\n           payment_received:0\r\n        });\r\n       \r\n     pool3userList[msg.sender]=pooluserreg;\r\n      \r\n      }\r\n     \r\n    \r\n     \r\n     \r\n    \r\n        function regUser(uint _referrerID) public {\r\n      \r\n      require(!users[msg.sender].isExist, \"User Exists\");\r\n      require(_referrerID > 0 && _referrerID <= currUserID, 'Incorrect referral ID');\r\n      \r\n      \r\n      if(!users[msg.sender].isExist)\r\n      {\r\n        UserStruct memory userStruct;\r\n        currUserID++;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referredUsers:0,\r\n            referredUserspool3:0,\r\n            referredUserspool1:0\r\n        });\r\n \r\n   \r\n       users[msg.sender] = userStruct;\r\n       userList[currUserID]=msg.sender;\r\n      \r\n        users[userList[users[msg.sender].referrerID]].referredUsers=users[userList[users[msg.sender].referrerID]].referredUsers+1;\r\n       \r\n        transferFromOwner(msg.sender,1000,1);\r\n         payReferral(msg.sender);\r\n         emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n      }\r\n    }\r\n  \r\n  \r\n     function payReferral( address _user) internal {\r\n        address referer;\r\n        referer = userList[users[_user].referrerID];\r\n        transferFromOwner(referer,1000,2);\r\n     }\r\n  \r\n  \r\n  \r\n   function payPoolReferral(uint _level, address _user) internal {\r\n        address referer;\r\n      \r\n        referer = userList[users[_user].referrerID];\r\n      \r\n         bool sent = false;\r\n            if(_level==1)\r\n            {\r\n                pool_payment_amount=0.04 ether;\r\n            }\r\n            else if(_level==2)\r\n            {\r\n                pool_payment_amount=0.1 ether;\r\n            }\r\n            else\r\n            {\r\n                pool_payment_amount=0.2 ether;\r\n            }\r\n            sent = address(uint160(referer)).send(pool_payment_amount);\r\n\r\n            if (sent) {\r\n                emit getMoneyForPoolLevelEvent(referer, msg.sender, _level, now);\r\n                if(_level==1)\r\n                {\r\n                    transferFromOwner(referer,4000,3);\r\n                }\r\n                else if(_level==2)\r\n                {\r\n                    transferFromOwner(referer,10000,4);\r\n                }\r\n                else\r\n                {\r\n                    transferFromOwner(referer,20000,5);\r\n                }\r\n           \r\n            }\r\n           \r\n           \r\n            if(_level==1)\r\n            {\r\n                pool_payment_amount=0.034 ether;\r\n            }\r\n            else if(_level==2)\r\n            {\r\n                pool_payment_amount=0.085 ether;\r\n            }\r\n            else\r\n            {\r\n                pool_payment_amount=0.17 ether;\r\n            }\r\n           \r\n           \r\n             if (address(uint160(ownerWallet)).send(pool_payment_amount))\r\n         {\r\n             emit getMoneyForPoolLevelEvent(referer, ownerWallet, _level, now);\r\n         }\r\n      \r\n     \r\n     }\r\n  \r\n  \r\n       function buyPool1() public payable {\r\n      require(users[msg.sender].isExist, \"User Not Registered\");\r\n        require(msg.value == 0.2 ether, 'Incorrect Value');\r\n   \r\n        PoolUserStruct memory userStruct;\r\n        UserRegStruct memory userregStruct;\r\n        pool1currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool1currUserID,\r\n            payment_received:0,\r\n            lucky_draw:false,\r\n            user:msg.sender\r\n        });\r\n       pool1users[pool1currUserID] = userStruct;\r\n\r\n      \r\n        if(pool1userList[msg.sender].isExist){\r\n            pool1userList[msg.sender].nooftime=pool1userList[msg.sender].nooftime+1;\r\n        }\r\n        else{\r\n        userregStruct=UserRegStruct({\r\n            isExist:true,\r\n            userid:users[msg.sender].id,\r\n            nooftime:1,\r\n            poolid:pool1currUserID,\r\n            payment_received:0\r\n        });\r\n        pool1userList[msg.sender]=userregStruct;\r\n        users[userList[users[msg.sender].referrerID]].referredUserspool1=users[userList[users[msg.sender].referrerID]].referredUserspool1+1;\r\n        }\r\n      \r\n       transferFromOwner(msg.sender,20000,6);\r\n      \r\n      \r\n      payPoolReferral(1,msg.sender);\r\n      uint pool1activeUserID_local=pool1activeUserID;\r\n      uint temp_i=6;\r\n      for (uint i=0; i<6; i++) {\r\n          if((pool1activeUserID_local+i)>pool1currUserID){\r\n              temp_i=i;\r\n              break;\r\n          }\r\n         uint pool1Currentuser=pool1users[pool1activeUserID_local+i].id;\r\n        \r\n      bool sent = false;\r\n      sent = address(uint160(pool1users[pool1Currentuser].user)).send(0.02 ether);\r\n\r\n            if (sent) {\r\n                pool1users[pool1Currentuser].payment_received+=1;\r\n                 pool1userList[pool1users[pool1Currentuser].user].payment_received+=1;\r\n                if(pool1users[pool1Currentuser].payment_received>=14)\r\n                {\r\n                    pool1activeUserID+=1;\r\n                }\r\n                emit getPoolPayment(msg.sender,pool1users[pool1Currentuser].user, 1, now);\r\n                transferFromOwner(pool1users[pool1Currentuser].user,2000,9);\r\n            }\r\n      \r\n      }\r\n      if(temp_i<6)\r\n      {\r\n      bool s= address(uint160(ownerWallet)).send(0.02 ether * (6-temp_i)); \r\n      if(s){}\r\n      }\r\n      emit regPoolEntry(msg.sender, 1, now,pool1currUserID);\r\n      counter=0;\r\n        if(((pool1currUserID-1)%5)==0 && pool1currUserID>=7){\r\n     luckydrawPool1();\r\n        }\r\n    }\r\n   \r\n   \r\n      function buyPool2() public payable {\r\n      require(pool1userList[msg.sender].isExist, \"Need to buy Pool 1\");   \r\n        require(msg.value == 0.5 ether, 'Incorrect Value');\r\n       \r\n      \r\n        PoolUserStruct memory userStruct;\r\n        UserRegStruct memory userregStruct;\r\n       \r\n        pool2currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool2currUserID,\r\n            payment_received:0,\r\n            lucky_draw:false,\r\n            user:msg.sender\r\n        });\r\n       pool2users[pool2currUserID] = userStruct;\r\n      \r\n         if(pool2userList[msg.sender].isExist){\r\n            pool2userList[msg.sender].nooftime=pool2userList[msg.sender].nooftime+1;\r\n        }\r\n        else{\r\n            userregStruct=UserRegStruct({\r\n                isExist:true,\r\n                userid:users[msg.sender].id,\r\n                nooftime:1,\r\n                poolid:pool2currUserID,\r\n                payment_received:0\r\n            });\r\n            pool2userList[msg.sender]=userregStruct;\r\n        }\r\n      \r\n      \r\n       transferFromOwner(msg.sender,50000,7);\r\n       payPoolReferral(2,msg.sender);\r\n       uint pool2activeUserID_local=pool2activeUserID;\r\n       uint temp_i=3;\r\n       for (uint i=0; i<3; i++) {\r\n           if((pool2activeUserID_local+i)>pool2currUserID){\r\n                temp_i=i;\r\n               break;\r\n           }\r\n         uint pool2Currentuser=pool2users[pool2activeUserID_local+i].id;\r\n        \r\n       bool sent = false;\r\n       sent = address(uint160(pool2users[pool2Currentuser].user)).send(0.1 ether);\r\n\r\n            if (sent) {\r\n                pool2users[pool2Currentuser].payment_received+=1;\r\n                 pool2userList[pool2users[pool2Currentuser].user].payment_received+=1;\r\n                if(pool2users[pool2Currentuser].payment_received>=9)\r\n                {\r\n                    pool2activeUserID+=1;\r\n                }\r\n                emit getPoolPayment(msg.sender,pool2users[pool2Currentuser].user, 2, now);\r\n                transferFromOwner(pool2users[pool2Currentuser].user,10000,10);\r\n            }\r\n      \r\n       }\r\n       if(temp_i<3)\r\n       {\r\n       bool s= address(uint160(ownerWallet)).send(0.1 ether * (3-temp_i)); \r\n       if(s){}\r\n       }\r\n       emit regPoolEntry(msg.sender, 2, now,pool2currUserID);\r\n       counter=0;\r\n        if(((pool2currUserID-1)%5)==0 && pool2currUserID>=7){\r\n     luckydrawPool2();\r\n        }\r\n      \r\n    }\r\n   \r\n    /*\r\n    Autopool3 users who have one direct referral at autopool3 are eligible for Jackpot.Jackpot fund will be reserved at 'Jackpot reserved wallet'.\r\n    Eligible user ETH wallet list will be fetched from this contract and Jackpot Smart contract will choose 'Random User' from eligible users. \r\n    */\r\n     function buyPool3() public payable {\r\n         require(pool2userList[msg.sender].isExist, \"Need to buy Pool 1 and 2\");  \r\n     \r\n        require(msg.value == 1 ether, 'Incorrect Value');\r\n      \r\n        PoolUserStruct memory userStruct;\r\n        UserRegStruct memory userregStruct;\r\n       \r\n        pool3currUserID++;\r\n        userStruct = PoolUserStruct({\r\n            isExist:true,\r\n            id:pool3currUserID,\r\n            payment_received:0,\r\n            lucky_draw:false,\r\n            user:msg.sender\r\n        });\r\n       pool3users[pool3currUserID] = userStruct;\r\n      \r\n         if(pool3userList[msg.sender].isExist){\r\n            pool3userList[msg.sender].nooftime=pool3userList[msg.sender].nooftime+1;\r\n        }\r\n        else{\r\n            userregStruct=UserRegStruct({\r\n                isExist:true,\r\n                userid:users[msg.sender].id,\r\n                nooftime:1,\r\n                poolid:pool3currUserID,\r\n                payment_received:0\r\n            });\r\n            pool3userList[msg.sender]=userregStruct;\r\n        }\r\n       \r\n       \r\n      \r\n        users[userList[users[msg.sender].referrerID]].referredUserspool3=users[userList[users[msg.sender].referrerID]].referredUserspool3+1;\r\n       \r\n        if(users[userList[users[msg.sender].referrerID]].referredUserspool3==1 && pool3users[users[msg.sender].referrerID].isExist)\r\n        {\r\n            jackpotcurrUserID++;\r\n            jackoptuserList[jackpotcurrUserID]=userList[users[msg.sender].referrerID];\r\n           \r\n             emit regJackpotPool(users[msg.sender].referrerID,userList[users[msg.sender].referrerID], now);\r\n        }\r\n       \r\n        if(users[msg.sender].referredUserspool3==1)\r\n        {\r\n            jackpotcurrUserID++;\r\n            jackoptuserList[jackpotcurrUserID]=userList[users[msg.sender].id];\r\n           emit regJackpotPool(users[msg.sender].id,userList[users[msg.sender].id], now);\r\n        }\r\n        transferFromOwner(msg.sender,100000,8);\r\n       payPoolReferral(3,msg.sender);\r\n       uint pool3activeUserID_local=pool3activeUserID;\r\n       uint temp_i=3;\r\n       for (uint i=0; i<3; i++) {\r\n           if((pool3activeUserID_local+i)>pool3currUserID){\r\n               temp_i=i;\r\n               break;\r\n           }\r\n         uint pool3Currentuser=pool3users[pool3activeUserID_local+i].id;\r\n        \r\n       bool sent = false;\r\n       sent = address(uint160(pool3users[pool3Currentuser].user)).send(0.2 ether);\r\n\r\n            if (sent) {\r\n                pool3users[pool3Currentuser].payment_received+=1;\r\n                pool3userList[pool3users[pool3Currentuser].user].payment_received+=1;\r\n               \r\n                if(pool3users[pool3Currentuser].payment_received>=10)\r\n                {\r\n                    pool3activeUserID+=1;\r\n                }\r\n                emit getPoolPayment(msg.sender,pool3users[pool3Currentuser].user, 3, now);\r\n                transferFromOwner(pool3users[pool3Currentuser].user,20000,11);\r\n            }\r\n     \r\n       }\r\n       if(temp_i<3)\r\n       {\r\n       bool s= address(uint160(ownerWallet)).send(0.2 ether * (3-temp_i)); \r\n       if(s){}\r\n       }\r\n       emit regPoolEntry(msg.sender, 3, now,pool3currUserID);\r\n       counter=0;\r\n        if(((pool3currUserID-1)%5)==0 && pool3currUserID>=7){\r\n     luckydrawPool3();\r\n        }\r\n    \r\n    }\r\n  \r\n   \r\n    function luckydrawPool1() private\r\n    {\r\n        uint lower=pool1activeUserID+6;\r\n        if(pool1currUserID >= 110)\r\n        {\r\n            lower=pool1currUserID-100;\r\n        }\r\n        uint num = (block.timestamp % ((pool1currUserID) - lower + 1)) + lower;\r\n        uint pool1Currentuser=pool1users[num].id;  \r\n        if(pool1users[pool1Currentuser].payment_received==0 && pool1users[pool1Currentuser].lucky_draw==false){\r\n            bool sent = false;\r\n            sent = address(uint160(pool1users[pool1Currentuser].user)).send(0.03 ether);\r\n\r\n            if (sent) {\r\n                pool1users[pool1Currentuser].lucky_draw=true;\r\n               emit luckydraw(num,pool1users[pool1Currentuser].user,1,now);\r\n               transferFromOwner(pool1users[pool1Currentuser].user,3000,12);\r\n            }\r\n         }\r\n         else\r\n         {\r\n             counter++;\r\n             if(counter<=(pool1currUserID- lower)){\r\n             luckydrawPool1();   \r\n             }\r\n            \r\n         }\r\n   \r\n       \r\n    }\r\n   \r\n   \r\n     function luckydrawPool2() private\r\n    {\r\n        uint lower=pool2activeUserID+6;\r\n        if(pool2currUserID >= 110)\r\n        {\r\n            lower=pool2currUserID-100;\r\n        }\r\n        uint num = (block.timestamp % ((pool2currUserID) - lower + 1)) + lower;\r\n         uint pool2Currentuser=pool2users[num].id; \r\n        if(pool2users[pool2Currentuser].payment_received==0 && pool2users[pool2Currentuser].lucky_draw==false){\r\n            bool sent = false;\r\n            sent = address(uint160(pool2users[pool2Currentuser].user)).send(0.075 ether);\r\n\r\n            if (sent) {\r\n                pool2users[pool2Currentuser].lucky_draw=true;\r\n               emit luckydraw(num,pool2users[pool2Currentuser].user,2,now);\r\n               transferFromOwner(pool2users[pool2Currentuser].user,7500,12);\r\n            }\r\n         }\r\n         else\r\n         {\r\n             counter++;\r\n             if(counter<=(pool2currUserID- lower)){\r\n             luckydrawPool2();   \r\n             }\r\n            \r\n         }\r\n   \r\n       \r\n    }\r\n   \r\n   \r\n    function luckydrawPool3() private\r\n    {\r\n        uint lower=pool3activeUserID+6;\r\n        if(pool3currUserID >= 110)\r\n        {\r\n            lower=pool3currUserID-100;\r\n        }\r\n        uint num = (block.timestamp % ((pool3currUserID) - lower + 1)) + lower;\r\n        uint pool3Currentuser=pool3users[num].id;  \r\n        if(pool3users[pool3Currentuser].payment_received==0 && pool3users[pool3Currentuser].lucky_draw==false){\r\n            bool sent = false;\r\n            sent = address(uint160(pool3users[pool3Currentuser].user)).send(0.15 ether);\r\n\r\n            if (sent) {\r\n                pool3users[pool3Currentuser].lucky_draw=true;\r\n               emit luckydraw(num,pool3users[pool3Currentuser].user,3,now);\r\n               transferFromOwner(pool3users[pool3Currentuser].user,15000,12);\r\n            }\r\n         }\r\n         else\r\n         {\r\n             counter++;\r\n             if(counter<=(pool3currUserID- lower)){\r\n             luckydrawPool3();   \r\n             }\r\n            \r\n         }\r\n   \r\n       \r\n    }\r\n   \r\n   \r\n   \r\n   \r\n    function getEthBalance() public view returns(uint) {\r\n    return address(this).balance;\r\n    }\r\n   \r\n    function viewUserReferral(address _user) public view returns(address) {\r\n        return userList[users[_user].referrerID];\r\n    }\r\n   \r\n    function checkUserExist(address _user) public view returns(bool) {\r\n        return users[_user].isExist;\r\n    }\r\n   \r\n    function checkUserPool1Exist(address _user) public view returns(bool) {\r\n        return pool1userList[_user].isExist;\r\n    }\r\n   \r\n     function checkUserPool2Exist(address _user) public view returns(bool) {\r\n        return pool2userList[_user].isExist;\r\n    }\r\n     function checkUserPool3Exist(address _user) public view returns(bool) {\r\n        return pool2userList[_user].isExist;\r\n    }\r\n   \r\n     function getCurrentJackpotId() public view returns(uint) {\r\n        return jackpotcurrUserID;\r\n    }\r\n   \r\n     function getPool3currId() public view returns(uint) {\r\n        return pool3currUserID;\r\n    }\r\n   \r\n    function getCurrentJackpotUser(uint id) public view returns(address) {\r\n        return jackoptuserList[id];\r\n    }\r\n   \r\n    function sendBalance() private\r\n    {\r\n        if(getEthBalance()>0){\r\n         if (!address(uint160(ownerWallet)).send(getEthBalance()))\r\n         {\r\n            \r\n         }\r\n        }\r\n    }\r\n  \r\n    function sendPendingBalance(uint amount) public\r\n    {\r\n         require(msg.sender==ownerWallet, \"You are not authorized\"); \r\n        if(msg.sender==ownerWallet){\r\n        if(amount>0 && amount<=getEthBalance()){\r\n         if (!address(uint160(ownerWallet)).send(amount))\r\n         {\r\n            \r\n         }\r\n        }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyPool1\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool3users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lucky_draw\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool1users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lucky_draw\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool1userList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nooftime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendPendingBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPool3currId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserPool3Exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool1currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCurrentJackpotUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool2\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlimited_level_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUserspool3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUserspool1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jackoptuserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUserspool3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referredUserspool1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool2currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyPool3\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool2userList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nooftime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3currUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserPool2Exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool2users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lucky_draw\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWalletERC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool3activeUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentJackpotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool3userList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nooftime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment_received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotcurrUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserPool1Exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getMoneyForPoolLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regLevelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"name\":\"regPoolEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getPoolPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"luckydraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"regJackpotPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"TransferFromContract\",\"type\":\"event\"}]","ContractName":"EtherKing","CompilerVersion":"v0.5.11+commit.22be8592","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eda23e6fb9f0b0893a6a2ed2009150c3b2bfeffe140af9282dbdbf45044ec31a"}]}