{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\ncontract ReentrancyGuard {\r\nbool private _notEntered;\r\nconstructor () internal {\r\n_notEntered = true;\r\n}\r\nmodifier nonReentrant() {\r\nrequire(_notEntered, \"\");\r\n_notEntered = false;\r\n_;\r\n_notEntered = true;\r\n}\r\n}\r\npragma solidity ^0.5.0;\r\ncontract Context {\r\nconstructor () internal { }\r\nfunction _msgSender() internal view returns (address payable) {\r\nreturn msg.sender;\r\n}\r\nfunction _msgData() internal view returns (bytes memory) {\r\nthis; \r\nreturn msg.data;\r\n}\r\n}\r\npragma solidity ^0.5.0;\r\ncontract Ownable is Context {\r\naddress private _owner;\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\nconstructor () internal {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\nfunction owner() public view returns (address) {\r\nreturn _owner;\r\n}\r\nmodifier onlyOwner() {\r\nrequire(isOwner(), \"\");\r\n_;\r\n}\r\nfunction isOwner() public view returns (bool) {\r\nreturn _msgSender() == _owner;\r\n}\r\nfunction renounceOwnership() public onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\n_transferOwnership(newOwner);\r\n}\r\nfunction _transferOwnership(address newOwner) internal {\r\nrequire(newOwner != address(0), \"\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\npragma solidity ^0.5.6;\r\ninterface IERC20 {\r\nfunction transfer(address to, uint256 value) external;\r\nfunction approve(address spender, uint256 value) external;\r\nfunction transferFrom(address from, address to, uint256 value) external;\r\nfunction totalSupply() external view returns (uint256);\r\nfunction balanceOf(address who) external view returns (uint256);\r\nfunction allowance(address owner, address spender)\r\nexternal\r\nview\r\nreturns (uint256);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\npragma solidity ^0.5.7;\r\ninterface ISwaps {\r\nfunction createOrder(\r\nbytes32 _id,\r\naddress _baseAddress,\r\naddress _quoteAddress,\r\nuint _baseLimit,\r\nuint _quoteLimit,\r\nuint _expirationTimestamp,\r\naddress _baseOnlyInvestor,\r\nuint _minBaseInvestment,\r\nuint _minQuoteInvestment,\r\naddress _brokerAddress,\r\nuint _brokerBasePercent,\r\nuint _brokerQuotePercent\r\n) external;\r\nfunction deposit(bytes32 _id, address _token, uint _amount)\r\nexternal\r\npayable;\r\nfunction cancel(bytes32 _id) external;\r\nfunction refund(bytes32 _id, address _token) external;\r\n}\r\npragma solidity ^0.5.7;\r\ncontract Vault is Ownable {\r\naddress public swaps;\r\nmodifier onlySwaps() {\r\nrequire(msg.sender == swaps);\r\n_;\r\n}\r\nfunction() external payable {}\r\nfunction tokenFallback(address, uint, bytes calldata) external {}\r\nfunction setSwaps(address _swaps) public onlyOwner {\r\nswaps = _swaps;\r\n}\r\nfunction withdraw(address _token, address _receiver, uint _amount)\r\npublic\r\nonlySwaps\r\n{\r\nif (_token == address(0)) {\r\naddress(uint160(_receiver)).transfer(_amount);\r\n} else {\r\nIERC20(_token).transfer(_receiver, _amount);\r\n}\r\n}\r\n}\r\npragma solidity ^0.5.0;\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c >= a, \"\");\r\nreturn c;\r\n}\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"\");\r\n}\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b <= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"\");\r\nreturn c;\r\n}\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"\");\r\n}\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b > 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn mod(a, b, \"\");\r\n}\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\nrequire(b != 0, errorMessage);\r\nreturn a % b;\r\n}\r\n}\r\ncontract Swaps is Ownable, ISwaps, ReentrancyGuard {\r\nusing SafeMath for uint;\r\nuint public MAX_INVESTORS = 10;\r\nVault public vault;\r\nmapping(bytes32 => address) public baseOnlyInvestor;\r\nmapping(bytes32 => address) public owners;\r\nmapping(bytes32 => address) public baseAddresses;\r\nmapping(bytes32 => address) public quoteAddresses;\r\nmapping(bytes32 => uint) public expirationTimestamps;\r\nmapping(bytes32 => bool) public isSwapped;\r\nmapping(bytes32 => bool) public isCancelled;\r\nmapping(bytes32 => mapping(address => uint)) public limits;\r\nmapping(bytes32 => mapping(address => uint)) public raised;\r\nmapping(bytes32 => mapping(address => address[])) public investors;\r\nmapping(bytes32 => mapping(address => mapping(address => uint))) public investments;\r\nmapping(bytes32 => mapping(address => uint)) public minInvestments;\r\nmapping(bytes32 => address[]) public brokers;\r\nmapping(bytes32 => mapping(address => mapping(address => uint))) public brokerPercents;\r\nuint public myWishBasePercent;\r\nuint public myWishQuotePercent;\r\naddress public myWishAddress;\r\nmodifier onlyInvestor(bytes32 _id, address _token) {\r\nrequire(\r\n_isInvestor(_id, _token, msg.sender),\r\n\"\"\r\n);\r\n_;\r\n}\r\nmodifier onlyWhenVaultDefined() {\r\nrequire(address(vault) != address(0), \"\");\r\n_;\r\n}\r\nmodifier onlyOrderOwner(bytes32 _id) {\r\nrequire(msg.sender == owners[_id], \"\");\r\n_;\r\n}\r\nmodifier onlyWhenOrderExists(bytes32 _id) {\r\nrequire(owners[_id] != address(0), \"\");\r\n_;\r\n}\r\nevent OrderCreated(\r\nbytes32 id,\r\naddress owner,\r\naddress baseAddress,\r\naddress quoteAddress,\r\nuint baseLimit,\r\nuint quoteLimit,\r\nuint expirationTimestamp,\r\naddress baseOnlyInvestor,\r\nuint minBaseInvestment,\r\nuint minQuoteInvestment,\r\naddress broker,\r\nuint brokerBasePercent,\r\nuint brokerQuotePercent\r\n);\r\nevent OrderCancelled(bytes32 id);\r\nevent Deposit(\r\nbytes32 id,\r\naddress token,\r\naddress user,\r\nuint amount,\r\nuint balance\r\n);\r\nevent Refund(bytes32 id, address token, address user, uint amount);\r\nevent OrderSwapped(bytes32 id, address byUser);\r\nevent SwapSend(bytes32 id, address token, address user, uint amount);\r\nevent BrokerSend(bytes32 id, address token, address broker, uint amount);\r\nevent MyWishAddressChange(\r\naddress oldMyWishAddress,\r\naddress newMyWishAddress\r\n);\r\nevent MyWishPercentsChange(\r\nuint oldBasePercent,\r\nuint oldQuotePercent,\r\nuint newBasePercent,\r\nuint newQuotePercent\r\n);\r\nfunction tokenFallback(address, uint, bytes calldata) external {}\r\nfunction createOrder(\r\nbytes32 _id,\r\naddress _baseAddress,\r\naddress _quoteAddress,\r\nuint _baseLimit,\r\nuint _quoteLimit,\r\nuint _expirationTimestamp,\r\naddress _baseOnlyInvestor,\r\nuint _minBaseInvestment,\r\nuint _minQuoteInvestment,\r\naddress _brokerAddress,\r\nuint _brokerBasePercent,\r\nuint _brokerQuotePercent\r\n) external nonReentrant onlyWhenVaultDefined {\r\nrequire(owners[_id] == address(0), \"\");\r\nrequire(\r\n_baseAddress != _quoteAddress,\r\n\"\"\r\n);\r\nrequire(_baseLimit > 0, \"\");\r\nrequire(_quoteLimit > 0, \"\");\r\nrequire(\r\n_expirationTimestamp > now,\r\n\"\"\r\n);\r\nrequire(\r\n_brokerBasePercent.add(myWishBasePercent) <= 10000,\r\n\"\"\r\n);\r\nrequire(\r\n_brokerQuotePercent.add(myWishQuotePercent) <= 10000,\r\n\"\"\r\n);\r\nowners[_id] = msg.sender;\r\nbaseAddresses[_id] = _baseAddress;\r\nquoteAddresses[_id] = _quoteAddress;\r\nexpirationTimestamps[_id] = _expirationTimestamp;\r\nlimits[_id][_baseAddress] = _baseLimit;\r\nlimits[_id][_quoteAddress] = _quoteLimit;\r\nbaseOnlyInvestor[_id] = _baseOnlyInvestor;\r\nminInvestments[_id][_baseAddress] = _minBaseInvestment;\r\nminInvestments[_id][_quoteAddress] = _minQuoteInvestment;\r\nif (_brokerAddress != address(0)) {\r\nbrokers[_id].push(_brokerAddress);\r\nbrokerPercents[_id][_baseAddress][_brokerAddress] = _brokerBasePercent;\r\nbrokerPercents[_id][_quoteAddress][_brokerAddress] = _brokerQuotePercent;\r\n}\r\nif (myWishAddress != address(0)) {\r\nbrokers[_id].push(myWishAddress);\r\nbrokerPercents[_id][_baseAddress][myWishAddress] = myWishBasePercent;\r\nbrokerPercents[_id][_quoteAddress][myWishAddress] = myWishQuotePercent;\r\n}\r\nemit OrderCreated(\r\n_id,\r\nmsg.sender,\r\n_baseAddress,\r\n_quoteAddress,\r\n_baseLimit,\r\n_quoteLimit,\r\n_expirationTimestamp,\r\n_baseOnlyInvestor,\r\n_minBaseInvestment,\r\n_minQuoteInvestment,\r\n_brokerAddress,\r\n_brokerBasePercent,\r\n_brokerQuotePercent\r\n);\r\n}\r\nfunction deposit(bytes32 _id, address _token, uint _amount)\r\nexternal\r\npayable\r\nnonReentrant\r\nonlyWhenVaultDefined\r\nonlyWhenOrderExists(_id)\r\n{\r\nif (_token == address(0)) {\r\nrequire(\r\nmsg.value == _amount,\r\n\"\"\r\n);\r\naddress(vault).transfer(msg.value);\r\n} else {\r\nrequire(msg.value == 0, \"\");\r\nuint allowance = IERC20(_token).allowance(\r\nmsg.sender,\r\naddress(this)\r\n);\r\nrequire(\r\n_amount <= allowance,\r\n\"\"\r\n);\r\nIERC20(_token).transferFrom(msg.sender, address(vault), _amount);\r\n}\r\n_deposit(_id, _token, msg.sender, _amount);\r\n}\r\nfunction cancel(bytes32 _id)\r\nexternal\r\nnonReentrant\r\nonlyOrderOwner(_id)\r\nonlyWhenVaultDefined\r\nonlyWhenOrderExists(_id)\r\n{\r\nrequire(!isCancelled[_id], \"\");\r\nrequire(!isSwapped[_id], \"\");\r\naddress[2] memory tokens = [baseAddresses[_id], quoteAddresses[_id]];\r\nfor (uint t = 0; t < tokens.length; t++) {\r\naddress token = tokens[t];\r\nfor (uint u = 0; u < investors[_id][token].length; u++) {\r\naddress user = investors[_id][token][u];\r\nuint userInvestment = investments[_id][token][user];\r\nvault.withdraw(token, user, userInvestment);\r\n}\r\n}\r\nisCancelled[_id] = true;\r\nemit OrderCancelled(_id);\r\n}\r\nfunction refund(bytes32 _id, address _token)\r\nexternal\r\nnonReentrant\r\nonlyInvestor(_id, _token)\r\nonlyWhenVaultDefined\r\nonlyWhenOrderExists(_id)\r\n{\r\nrequire(!isCancelled[_id], \"\");\r\nrequire(!isSwapped[_id], \"\");\r\naddress user = msg.sender;\r\nuint investment = investments[_id][_token][user];\r\nif (investment > 0) {\r\ndelete investments[_id][_token][user];\r\n}\r\n_removeInvestor(investors[_id][_token], user);\r\nif (investment > 0) {\r\nraised[_id][_token] = raised[_id][_token].sub(investment);\r\nvault.withdraw(_token, user, investment);\r\n}\r\nemit Refund(_id, _token, user, investment);\r\n}\r\nfunction setVault(Vault _vault) external onlyOwner {\r\nvault = _vault;\r\n}\r\nfunction setMyWishPercents(uint _basePercent, uint _quotePercent)\r\nexternal\r\nonlyOwner\r\n{\r\nrequire(_basePercent <= 10000, \"\");\r\nrequire(\r\n_quotePercent <= 10000,\r\n\"\"\r\n);\r\nemit MyWishPercentsChange(\r\nmyWishBasePercent,\r\nmyWishQuotePercent,\r\n_basePercent,\r\n_quotePercent\r\n);\r\nmyWishBasePercent = _basePercent;\r\nmyWishQuotePercent = _quotePercent;\r\n}\r\nfunction setMyWishAddress(address _myWishAddress) external onlyOwner {\r\nemit MyWishAddressChange(myWishAddress, _myWishAddress);\r\nmyWishAddress = _myWishAddress;\r\n}\r\nfunction createKey(address _owner) public view returns (bytes32 result) {\r\nuint creationTime = now;\r\nresult = 0x0000000000000000000000000000000000000000000000000000000000000000;\r\nassembly {\r\nresult := or(result, mul(_owner, 0x1000000000000000000000000))\r\nresult := or(result, and(creationTime, 0xffffffffffffffffffffffff))\r\n}\r\n}\r\nfunction allBrokersBasePercent(bytes32 _id) public view returns (uint) {\r\nreturn _allBrokersPercent(baseAddresses[_id], _id);\r\n}\r\nfunction allBrokersQuotePercent(bytes32 _id) public view returns (uint) {\r\nreturn _allBrokersPercent(quoteAddresses[_id], _id);\r\n}\r\nfunction baseLimit(bytes32 _id) public view returns (uint) {\r\nreturn limits[_id][baseAddresses[_id]];\r\n}\r\nfunction quoteLimit(bytes32 _id) public view returns (uint) {\r\nreturn limits[_id][quoteAddresses[_id]];\r\n}\r\nfunction baseRaised(bytes32 _id) public view returns (uint) {\r\nreturn raised[_id][baseAddresses[_id]];\r\n}\r\nfunction quoteRaised(bytes32 _id) public view returns (uint) {\r\nreturn raised[_id][quoteAddresses[_id]];\r\n}\r\nfunction isBaseFilled(bytes32 _id) public view returns (bool) {\r\nreturn raised[_id][baseAddresses[_id]] == limits[_id][baseAddresses[_id]];\r\n}\r\nfunction isQuoteFilled(bytes32 _id) public view returns (bool) {\r\nreturn raised[_id][quoteAddresses[_id]] == limits[_id][quoteAddresses[_id]];\r\n}\r\nfunction baseInvestors(bytes32 _id) public view returns (address[] memory) {\r\nreturn investors[_id][baseAddresses[_id]];\r\n}\r\nfunction quoteInvestors(bytes32 _id)\r\npublic\r\nview\r\nreturns (address[] memory)\r\n{\r\nreturn investors[_id][quoteAddresses[_id]];\r\n}\r\nfunction baseUserInvestment(bytes32 _id, address _user)\r\npublic\r\nview\r\nreturns (uint)\r\n{\r\nreturn investments[_id][baseAddresses[_id]][_user];\r\n}\r\nfunction quoteUserInvestment(bytes32 _id, address _user)\r\npublic\r\nview\r\nreturns (uint)\r\n{\r\nreturn investments[_id][quoteAddresses[_id]][_user];\r\n}\r\nfunction orderBrokers(bytes32 _id) public view returns (address[] memory) {\r\nreturn brokers[_id];\r\n}\r\nfunction _allBrokersPercent(address _side, bytes32 _id)\r\ninternal\r\nview\r\nreturns (uint)\r\n{\r\nuint percents;\r\nfor (uint i = 0; i < brokers[_id].length; i++) {\r\naddress broker = brokers[_id][i];\r\nuint percent = brokerPercents[_id][_side][broker];\r\npercents = percents.add(percent);\r\n}\r\nreturn percents;\r\n}\r\nfunction _swap(bytes32 _id) internal {\r\nrequire(!isSwapped[_id], \"\");\r\nrequire(!isCancelled[_id], \"\");\r\nrequire(isBaseFilled(_id), \"\");\r\nrequire(isQuoteFilled(_id), \"\");\r\nrequire(now <= expirationTimestamps[_id], \"\");\r\n_distribute(_id, baseAddresses[_id], quoteAddresses[_id]);\r\n_distribute(_id, quoteAddresses[_id], baseAddresses[_id]);\r\nisSwapped[_id] = true;\r\nemit OrderSwapped(_id, msg.sender);\r\n}\r\nfunction _distribute(bytes32 _id, address _aSide, address _bSide) internal {\r\nuint brokersPercent;\r\nfor (uint i = 0; i < brokers[_id].length; i++) {\r\naddress broker = brokers[_id][i];\r\nuint percent = brokerPercents[_id][_bSide][broker];\r\nbrokersPercent = brokersPercent.add(percent);\r\n}\r\nuint toPayBrokers = raised[_id][_bSide].mul(brokersPercent).div(10000);\r\nuint toPayInvestors = raised[_id][_bSide].sub(toPayBrokers);\r\nuint remainder = toPayInvestors;\r\nfor (uint i = 0; i < investors[_id][_aSide].length; i++) {\r\naddress user = investors[_id][_aSide][i];\r\nuint toPay;\r\n// last\r\nif (i + 1 == investors[_id][_aSide].length) {\r\ntoPay = remainder;\r\n} else {\r\nuint aSideRaised = raised[_id][_aSide];\r\nuint userInvestment = investments[_id][_aSide][user];\r\ntoPay = userInvestment.mul(toPayInvestors).div(aSideRaised);\r\nremainder = remainder.sub(toPay);\r\n}\r\nvault.withdraw(_bSide, user, toPay);\r\nemit SwapSend(_id, _bSide, user, toPay);\r\n}\r\nremainder = toPayBrokers;\r\nfor (uint i = 0; i < brokers[_id].length; i++) {\r\naddress broker = brokers[_id][i];\r\nuint toPay;\r\nif (i + 1 == brokers[_id].length) {\r\ntoPay = remainder;\r\n} else {\r\nuint percent = brokerPercents[_id][_bSide][broker];\r\ntoPay = toPayBrokers.mul(percent).div(brokersPercent);\r\nremainder = remainder.sub(toPay);\r\n}\r\nvault.withdraw(_bSide, broker, toPay);\r\nemit BrokerSend(_id, _bSide, broker, toPay);\r\n}\r\n}\r\nfunction _removeInvestor(address[] storage _array, address _investor)\r\ninternal\r\n{\r\nuint idx = _array.length - 1;\r\nfor (uint i = 0; i < _array.length - 1; i++) {\r\nif (_array[i] == _investor) {\r\nidx = i;\r\nbreak;\r\n}\r\n}\r\n_array[idx] = _array[_array.length - 1];\r\ndelete _array[_array.length - 1];\r\n_array.length--;\r\n}\r\nfunction _deposit(bytes32 _id, address _token, address _from, uint _amount)\r\ninternal\r\n{\r\nuint amount = _amount;\r\nrequire(\r\nbaseAddresses[_id] == _token || quoteAddresses[_id] == _token,\r\n\"\"\r\n);\r\nrequire(\r\nraised[_id][_token] < limits[_id][_token],\r\n\"\"\r\n);\r\nrequire(now <= expirationTimestamps[_id], \"\");\r\nif (baseAddresses[_id] == _token && baseOnlyInvestor[_id] != address(\r\n0\r\n)) {\r\nrequire(\r\nmsg.sender == baseOnlyInvestor[_id],\r\n\"\"\r\n);\r\n}\r\nif (limits[_id][_token].sub(\r\nraised[_id][_token]\r\n) > minInvestments[_id][_token]) {\r\nrequire(\r\n_amount >= minInvestments[_id][_token],\r\n\"\"\r\n);\r\n}\r\nif (!_isInvestor(_id, _token, _from)) {\r\nrequire(\r\ninvestors[_id][_token].length < MAX_INVESTORS,\r\n\"\"\r\n);\r\ninvestors[_id][_token].push(_from);\r\n}\r\nuint raisedWithOverflow = raised[_id][_token].add(amount);\r\nif (raisedWithOverflow > limits[_id][_token]) {\r\nuint overflow = raisedWithOverflow.sub(limits[_id][_token]);\r\nvault.withdraw(_token, _from, overflow);\r\namount = amount.sub(overflow);\r\n}\r\ninvestments[_id][_token][_from] = investments[_id][_token][_from].add(\r\namount\r\n);\r\nraised[_id][_token] = raised[_id][_token].add(amount);\r\nemit Deposit(\r\n_id,\r\n_token,\r\n_from,\r\namount,\r\ninvestments[_id][_token][_from]\r\n);\r\nif (isBaseFilled(_id) && isQuoteFilled(_id)) {\r\n_swap(_id);\r\n}\r\n}\r\nfunction _isInvestor(bytes32 _id, address _token, address _who)\r\ninternal\r\nview\r\nreturns (bool)\r\n{\r\nreturn investments[_id][_token][_who] > 0;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWishBasePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isSwapped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"quoteAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"expirationTimestamps\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"baseOnlyInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWishAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"quoteInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_myWishAddress\",\"type\":\"address\"}],\"name\":\"setMyWishAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"quoteRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"limits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isQuoteFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVESTORS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWishQuotePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"brokers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_baseAddress\",\"type\":\"address\"},{\"name\":\"_quoteAddress\",\"type\":\"address\"},{\"name\":\"_baseLimit\",\"type\":\"uint256\"},{\"name\":\"_quoteLimit\",\"type\":\"uint256\"},{\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"},{\"name\":\"_baseOnlyInvestor\",\"type\":\"address\"},{\"name\":\"_minBaseInvestment\",\"type\":\"uint256\"},{\"name\":\"_minQuoteInvestment\",\"type\":\"uint256\"},{\"name\":\"_brokerAddress\",\"type\":\"address\"},{\"name\":\"_brokerBasePercent\",\"type\":\"uint256\"},{\"name\":\"_brokerQuotePercent\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isCancelled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_basePercent\",\"type\":\"uint256\"},{\"name\":\"_quotePercent\",\"type\":\"uint256\"}],\"name\":\"setMyWishPercents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"allBrokersBasePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"baseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"baseInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"baseRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"brokerPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"quoteLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createKey\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"baseUserInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isBaseFilled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"quoteUserInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"baseAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"allBrokersQuotePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"orderBrokers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quoteAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quoteLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseOnlyInvestor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minBaseInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minQuoteInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"brokerBasePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"brokerQuotePercent\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"byUser\",\"type\":\"address\"}],\"name\":\"OrderSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BrokerSend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldMyWishAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newMyWishAddress\",\"type\":\"address\"}],\"name\":\"MyWishAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldBasePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldQuotePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBasePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newQuotePercent\",\"type\":\"uint256\"}],\"name\":\"MyWishPercentsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Swaps","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://9d1a01e655b9e7e1fe7215b20a9199843e6ec6faf8d970e648285f2300c763ce"}]}