{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.5.13;\r\ncontract NetworkManagerContract {\r\n\r\n    uint nodeCounter;\r\n\r\n    struct NodeDetails {\r\n        string nodeName;\r\n        string role;\r\n        string publickey;\r\n        string enode;\r\n        string ip;\r\n    }\r\n\r\n    mapping (string => NodeDetails)nodes;\r\n    string[] enodeList;\r\n\r\n    event print(string nodeName, string role,string publickey, string enode, string ip);\r\n\r\n    function registerNode(string memory n, string memory r, string memory p, string memory e, string memory ip) public {\r\n\r\n        nodes[e].publickey = p;\r\n        nodes[e].nodeName = n;\r\n        nodes[e].role = r;\r\n        nodes[e].ip = ip;\r\n        enodeList.push(e);\r\n        emit print(n, r, p, e, ip);\r\n\r\n    }\r\n\r\n    function getNodeDetails(uint16 _index) public view returns (string memory n, string memory r, string memory p, string memory ip, string memory e, uint i) {\r\n        NodeDetails memory nodeInfo = nodes[enodeList[_index]];\r\n        return (\r\n            nodeInfo.nodeName,\r\n            nodeInfo.role,\r\n            nodeInfo.publickey,\r\n            nodeInfo.ip,\r\n            enodeList[_index],\r\n            _index\r\n        );\r\n    }\r\n\r\n    function getNodesCounter() public view  returns (uint) {\r\n        return enodeList.length;\r\n    }\r\n\r\n    function updateNode(string memory n, string memory r, string memory p, string memory e, string memory ip) public {\r\n\r\n        nodes[e].publickey = p;\r\n        nodes[e].nodeName = n;\r\n        nodes[e].role = r;\r\n        nodes[e].ip = ip;\r\n        emit print(n, r, p, e, ip);\r\n    }\r\n\r\n    function getNodeList(uint16 i)  public  view   returns (string memory n, string memory r,string memory p,string memory ip,string memory e) {\r\n\r\n        NodeDetails memory nodeInfo = nodes[enodeList[i]];\r\n        return (\r\n            nodeInfo.nodeName,\r\n            nodeInfo.role,\r\n            nodeInfo.publickey,\r\n\t        nodeInfo.ip,\r\n            enodeList[i]\r\n        );\r\n    }\r\n\r\n    function get_signature_hash_from_notary(uint256 notary_block, address[] memory miners,\r\n                                  uint32[] memory blocks_mined, address[] memory users,\r\n                                  uint64[] memory user_gas, uint64 largest_tx)\r\n                                      public pure returns (bytes32) {\r\n       return keccak256(abi.encodePacked(notary_block, miners, blocks_mined, users, user_gas, largest_tx));\r\n    }\r\n\r\n    struct signatures {\r\n       uint8[] vs;\r\n       bytes32[] rs;\r\n       bytes32[] ss;\r\n    }\r\n\r\n    mapping (uint256 => signatures) sigs;\r\n\r\n    function store_signature(uint256 block_no, uint8 v, bytes32 r, bytes32 s) public {\r\n       sigs[block_no].vs.push(v);\r\n       sigs[block_no].rs.push(r);\r\n       sigs[block_no].ss.push(s);\r\n    }\r\n\r\n    function get_signatures_count(uint256 block_no) public view returns (uint256) {\r\n       return sigs[block_no].vs.length;\r\n    }\r\n\r\n    function get_signatures(uint256 block_no, uint256 index) public view returns (uint8 v, bytes32 r, bytes32 s) {\r\n       v = sigs[block_no].vs[index];\r\n       r = sigs[block_no].rs[index];\r\n       s = sigs[block_no].ss[index];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nodeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"publickey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"enode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"print\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getNodeDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"r\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"p\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"e\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"i\",\"type\":\"uint16\"}],\"name\":\"getNodeList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"r\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"p\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"e\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodesCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notary_block\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"miners\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"blocks_mined\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"user_gas\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"largest_tx\",\"type\":\"uint64\"}],\"name\":\"get_signature_hash_from_notary\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"block_no\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get_signatures\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"block_no\",\"type\":\"uint256\"}],\"name\":\"get_signatures_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"r\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"p\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"e\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"registerNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"block_no\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"store_signature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"r\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"p\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"e\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"updateNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NetworkManagerContract","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://4e602dd0273a104000bb625ef0b1efa0faeca36d2c26f72c08f72d0a9c5258b3"}]}