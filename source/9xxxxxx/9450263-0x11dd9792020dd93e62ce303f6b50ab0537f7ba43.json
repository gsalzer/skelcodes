{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Initializable, Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize(address sender) public initializer {\n        _owner = sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev ERC20 interface, taken from Kyber workshop examples. We use this\n * instead of the OpenZeppelin interface because it contains two functions,\n * `allowance` and `decimals`, not included with the OpenZeppelin interface.\n * Source: https://github.com/KyberNetwork/workshop/blob/master/contracts/ERC20Interface.sol\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint supply);\n  function balanceOf(address _owner) external view returns (uint balance);\n  function transfer(address _to, uint _value) external returns (bool success);\n  function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n  function approve(address _spender, uint _value) external returns (bool success);\n  function allowance(address _owner, address _spender) external view returns (uint remaining);\n  function decimals() external view returns(uint digits);\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n// File: contracts/IChai.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Chai interface\n */\ninterface IChai {\n  // ERC20 functions\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address account) external view returns (uint256);\n  function transfer(address recipient, uint256 amount) external returns (bool);\n  function allowance(address owner, address spender) external view returns (uint256);\n  function approve(address spender, uint256 amount) external returns (bool);\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  // Chai-specific functions\n  function dai(address usr) external returns (uint wad);\n  function join(address dst, uint wad) external;\n  function exit(address src, uint wad) external;\n  function draw(address src, uint wad) external;\n  function move(address src, address dst, uint wad) external returns (bool);\n}\n\n// File: contracts/IKyberNetworkProxy.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Kyber Network Interface\n */\ninterface IKyberNetworkProxy {\n  function getExpectedRate(IERC20 src, IERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\n  function swapEtherToToken(IERC20 token, uint minRate) external payable returns (uint);\n  function swapTokenToToken(IERC20 src, uint srcAmount, IERC20 dest, uint minConversionRate) external returns(uint);\n}\n\n// File: contracts/Forwarder.sol\n\npragma solidity 0.5.12;\n\n\n\n\n\n\n\n\n/**\n * @notice This contract is used as the receiving address for a user.\n * All Ether or tokens sent to this contract can only be removed by\n * converting them to Chai and sending them to the owner, where the\n * owner is the user.\n *\n * @dev WARNING: DO NOT CHANGE THE ORDER OF INHERITANCE\n * Because this is an upgradable contract, doing so changes the order of the\n * state variables in the parent contracts, which can lead to the storage\n * values getting mixed up\n */\ncontract Forwarder is Initializable, Ownable {\n\n  using Address for address payable;  // enables OpenZeppelin's sendValue() function\n\n  // =============================================================================================\n  //                                    Storage Variables\n  // =============================================================================================\n\n  // Floatify server\n  address public floatify;\n\n  // Contract version\n  uint256 public version;\n\n  // Contract addresses and interfaces\n  IERC20 public daiContract;\n  IChai public chaiContract;\n  IKyberNetworkProxy public knpContract;\n  IERC20 constant public ETH_TOKEN_ADDRESS = IERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n  // =============================================================================================\n  //                                        Events\n  // =============================================================================================\n\n  /**\n   * @dev Emitted when Chai is successfully minted from Dai held by the contract\n   */\n  event ChaiSent(uint256 indexed amountInDai);\n\n  /**\n   * @dev Emitted when Ether is swapped for Dai\n   */\n  event SwapEther(uint256 indexed amountInDai, uint256 indexed amountInEther);\n\n  /**\n   * @dev Emitted when a token is swapped for Dai\n   */\n  event SwapToken(uint256 indexed amountInDai, uint256 indexed amountInToken, address token);\n\n  /**\n   * @dev Emitted when a token is withdrawn without being converted to Chai\n   */\n  event RawTokensSent(uint256 indexed amount, address token);\n\n  /**\n   * @dev Emitted when Ether is withdrawn without being converted to Chai\n   */\n  event RawEtherSent(uint256 indexed amount);\n\n  /**\n   * @dev Emitted when saved addresses are updated\n   */\n  event FloatifyAddressChanged(address indexed previousAddress, address indexed newAddress);\n  event DaiAddressChanged(address indexed previousAddress, address indexed newAddress);\n  event ChaiAddressChanged(address indexed previousAddress, address indexed newAddress);\n  event KyberAddressChanged(address indexed previousAddress, address indexed newAddress);\n\n\n  // ===============================================================================================\n  //                                      Constructor\n  // ===============================================================================================\n\n  /**\n   * @notice Constructor\n   * @dev Calls other constructors, can only be called once due to initializer modifier\n   * @param _recipient The user address that should receive all funds from this contract\n   * @param _floatify Floatify address\n   */\n  function initialize(address _recipient, address _floatify) public initializer {\n    // Call constructors of contracts we inherit from\n    Ownable.initialize(_recipient);\n\n    // Set variables\n    floatify = _floatify;\n    version = 1;\n\n    // Set contract addresses and interfaces\n    daiContract = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    chaiContract = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\n    knpContract = IKyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\n\n    // Approve the Chai contract to spend this contract's DAI balance\n    approveChaiToSpendDai();\n  }\n\n  // ===============================================================================================\n  //                                       Helpers\n  // ===============================================================================================\n\n  /**\n   * @dev Throws if called by any account other than floatify\n   */\n  modifier onlyFloatify() {\n    require(_msgSender() == floatify, \"Forwarder: caller is not the floatify address\");\n    _;\n  }\n\n\n  /**\n   * @notice Approve the Chai contract to spend our Dai\n   */\n  function approveChaiToSpendDai() private {\n    bool result = daiContract.approve(address(chaiContract), uint256(-1));\n    require(result, \"Forwarder: failed to approve Chai contract to spend Dai\");\n  }\n\n\n  /**\n   * @notice Remove allowance of Chai contract to prevent it from spending Dai\n   */\n  function resetChaiAllowance() private {\n    bool result = daiContract.approve(address(chaiContract), 0);\n    require(result, \"Forwarder: failed to remove allowance of Chai contract to spend Dai\");\n  }\n\n\n  // ===============================================================================================\n  //                                    Updating Addresses\n  // ===============================================================================================\n\n  /**\n   * @dev Allows the floatify address to be changed\n   * @param _newAddress new address\n   */\n  function updateFloatifyAddress(address _newAddress) external onlyFloatify {\n    require(_newAddress != address(0), \"Forwarder: new floatify address is the zero address\");\n    emit FloatifyAddressChanged(floatify, _newAddress);\n    floatify = _newAddress;\n  }\n\n  /**\n   * @dev Allows the Dai contract address to be changed\n   * @param _newAddress new address\n   */\n  function updateDaiAddress(address _newAddress) external onlyFloatify {\n    // Reset allowance for old address to zero\n    resetChaiAllowance();\n    // Set new allowance\n    emit DaiAddressChanged(address(daiContract), _newAddress);\n    daiContract = IERC20(_newAddress);\n    approveChaiToSpendDai();\n  }\n\n  /**\n   * @dev Allows the Chai contract address to be changed\n   * @param _newAddress new address\n   */\n  function updateChaiAddress(address _newAddress) external onlyFloatify {\n    // Reset allowance for old address to zero\n    resetChaiAllowance();\n    // Set new allowance\n    emit ChaiAddressChanged(address(chaiContract), _newAddress);\n    chaiContract = IChai(_newAddress);\n    approveChaiToSpendDai();\n  }\n\n  /**\n   * @dev Allows the Kyber Proxy contract address to be changed\n   * @param _newAddress new address\n   */\n  function updateKyberAddress(address _newAddress) external onlyFloatify {\n    emit KyberAddressChanged(address(knpContract), _newAddress);\n    knpContract = IKyberNetworkProxy(_newAddress);\n  }\n\n\n  // ===============================================================================================\n  //                               Handling Received Ether/Tokens\n  // ===============================================================================================\n\n  /**\n   * @notice Convert Dai in this contract to Chai and send it to the owner\n   */\n  function mintAndSendChai() public {\n    // Get Dai balance of this contract\n    uint256 _daiBalance = daiContract.balanceOf(address(this));\n    // Mint and send Chai\n    emit ChaiSent(_daiBalance);\n    chaiContract.join(owner(), _daiBalance);\n  }\n\n\n  /**\n   * @notice Covert _srcTokenAddress to Chai and send it to the owner\n   * @param _srcTokenAddress address of token to send\n   */\n  function convertAndSendToken(address _srcTokenAddress) external {\n    // TODO convert token to Dai\n    //   Use \"Loose Token Conversion\" as shown here\n    //   https://developer.kyber.network/docs/DappsGuide/#scenario-1-loose-token-conversion\n\n    // Get token parameters and contract balance\n    IERC20 _srcTokenContract = IERC20(_srcTokenAddress);\n    uint256 _srcTokenBalance = _srcTokenContract.balanceOf(address(this));\n\n    // Mitigate ERC20 Approve front-running attack, by initially setting allowance to 0\n    require(_srcTokenContract.approve(address(knpContract), 0), \"Forwarder: first approval failed\");\n\n    // Approve tokens so network can take them during the swap\n    require(_srcTokenContract.approve(address(knpContract), _srcTokenBalance), \"Forwarder: second approval failed\");\n\n    // Use slippage rate as the minimum conversion rate\n    uint256 minRate;\n    (, minRate) = knpContract.getExpectedRate(_srcTokenContract, daiContract, _srcTokenBalance);\n\n    // Swap the ERC20 token for Dai\n    knpContract.swapTokenToToken(_srcTokenContract, _srcTokenBalance, daiContract, minRate);\n\n    // Log the event\n    uint256 daiBalance = daiContract.balanceOf(address(this));\n    emit SwapToken(daiBalance, _srcTokenBalance, _srcTokenAddress);\n\n    // Mint and send Chai\n    mintAndSendChai();\n  }\n\n\n  /**\n   * @notice Upon receiving Ether, convert it to Chai and send it to the owner\n   */\n  function convertAndSendEth() external {\n    uint256 etherBalance = address(this).balance;\n\n    // Use slippage rate as the minimum conversion rate\n    uint256 minRate;\n    (, minRate) = knpContract.getExpectedRate(ETH_TOKEN_ADDRESS, daiContract, etherBalance);\n\n    // Swap Ether for Dai, and receive back tokens to this contract's address\n    knpContract.swapEtherToToken.value(etherBalance)(daiContract, minRate);\n\n    // Log the event\n    uint256 daiBalance = daiContract.balanceOf(address(this));\n    emit SwapEther(daiBalance, etherBalance);\n\n    // Convert to Chai and send to owner\n    mintAndSendChai();\n  }\n\n  // ===============================================================================================\n  //                                          Escape Hatches\n  // ===============================================================================================\n\n  /**\n   * @notice Forwards all tokens to owner\n   * @dev This is useful if tokens get stuck, e.g. if Kyber is down somehow\n   * @param _tokenAddress address of token to send\n   */\n  function sendRawTokens(address _tokenAddress) external {\n    require(msg.sender == owner() || msg.sender == floatify, \"Forwarder: caller must be owner or floatify\");\n\n    IERC20 _token = IERC20(_tokenAddress);\n    uint256 _balance = _token.balanceOf(address(this));\n    emit RawTokensSent(_balance, _tokenAddress);\n\n    _token.transfer(owner(), _balance);\n  }\n\n  /**\n   * @notice Forwards all Ether to owner\n   * @dev This is useful if Ether get stuck, e.g. if Kyber is down somehow\n   */\n  function sendRawEther() external {\n    require(msg.sender == owner() || msg.sender == floatify, \"Forwarder: caller must be owner or floatify\");\n\n    uint256 _balance = address(this).balance;\n    emit RawEtherSent(_balance);\n\n    // Convert `address` to `address payable`\n    address payable _recipient = address(uint160(address(owner())));\n\n    // Transfer Ether with OpenZeppelin's sendValue() for reasons explained in below links.\n    //   https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\n    //   https://docs.openzeppelin.com/contracts/2.x/api/utils#Address-sendValue-address-payable-uint256-\n    // Note: Even though this transfers control to the recipient, we do not have to worry\n    // about reentrancy here. This is because:\n    //   1. This function can only be called by the contract owner or floatify\n    //   2. All Ether sent to this contract belongs to the owner anyway, so there is no\n    //      way for reentrancy to enable the owner/attacker to send more Ether to themselves.\n    _recipient.sendValue(_balance);\n  }\n\n  /**\n   * @dev Fallback function to receive Ether\n   */\n  function() external payable {}\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChaiAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInDai\",\"type\":\"uint256\"}],\"name\":\"ChaiSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DaiAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FloatifyAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"KyberAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RawEtherSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RawTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInDai\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInEther\",\"type\":\"uint256\"}],\"name\":\"SwapEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInDai\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountInToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SwapToken\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chaiContract\",\"outputs\":[{\"internalType\":\"contract IChai\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"convertAndSendEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcTokenAddress\",\"type\":\"address\"}],\"name\":\"convertAndSendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floatify\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_floatify\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"knpContract\",\"outputs\":[{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintAndSendChai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendRawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"sendRawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateChaiAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateDaiAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFloatifyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateKyberAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Forwarder","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://8a8c6b2c66c91b9ab71c3c8d2c5766580ad9b94e0e3abe12e127bbfbd3be4828"}]}