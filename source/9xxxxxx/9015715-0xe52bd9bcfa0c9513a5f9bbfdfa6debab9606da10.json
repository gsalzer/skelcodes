{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nFair gambling. No admin backdoor. No etherscan bugs. No shit. Just fair play.\r\nDeposit and wait for deposit multiplication. If you dare.\r\n\r\nDeposit will grow up to x2 during 100 blocks.\r\nIf you failed withdraw attempt, deposit will disappear.\r\nIf you wait more then 100 blocks, deposit will disappear.\r\n\r\nYou may use any bots/automation except calling from smart-contract.\r\n*/\r\n\r\npragma solidity ^0.5;\r\n\r\ncontract FairDare {\r\n    mapping (address => uint) depositAmount;\r\n    mapping (address => uint) depositBlock;\r\n    \r\n    function() external payable {\r\n        depositBlock[msg.sender] = block.number;\r\n        depositAmount[msg.sender] = msg.value;\r\n    }\r\n    \r\n    function withdraw() public {\r\n        require(tx.origin == msg.sender, \"calling from smart is not allowed\");\r\n\r\n        uint blocksPast = block.number - depositBlock[msg.sender];\r\n        \r\n        if (blocksPast <= 100) {\r\n            uint amountToWithdraw = depositAmount[msg.sender] * (100 + blocksPast) / 100;\r\n            \r\n            if ((amountToWithdraw > 0) && (amountToWithdraw <= address(this).balance)) {\r\n                msg.sender.transfer(amountToWithdraw);\r\n                depositAmount[msg.sender] = 0;\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FairDare","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://34600973fca4c6f6dc815c8006fb833ff8a6bfd040a4468bcc66d43f16cb4435"}]}