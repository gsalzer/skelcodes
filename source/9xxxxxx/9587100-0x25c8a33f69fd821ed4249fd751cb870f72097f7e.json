{"status":"1","message":"OK","result":[{"SourceCode":"{\"Exchanger.sol\":{\"content\":\"pragma solidity ^0.6.3;\\n\\nimport \\\"./TokenEXD.sol\\\";\\n\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"caller is not owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"new owner must be a valid address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n}\\n\\ncontract TokenHolder is Ownable {\\n\\n    function withdrawTokens(HumanStandardToken _token, address _to, uint256 _amount)\\n        public\\n        onlyOwner\\n    {\\n        require(_to != address(0));\\n        require(_to != address(this));\\n        assert(_token.transfer(_to, _amount));\\n    }\\n}\\n\\ncontract ExodusExchanger is TokenHolder {\\n    uint256 public price = 1;\\n    HumanStandardToken public tokenContract;\\n\\n    constructor(uint256 _price, HumanStandardToken _tokenContract) public {\\n        price = _price;\\n        tokenContract = _tokenContract;\\n\\n    }\\n\\n    function setPrice(uint256 newPrice) public onlyOwner {\\n        require(newPrice \\u003e 0, \\\"inva1id price\\\");\\n        price = newPrice;\\n    }\\n\\n    receive() external payable {\\n        require(msg.value \\u003e 0, \\\"no eth received\\\");\\n        exchangeToken(msg.sender);\\n    }\\n\\n    // from safemath\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        assert(a == 0 || c / a == b);\\n        return c;\\n    }\\n\\n    function exchangeToken(address _buyer) public payable {\\n        uint256 amount = mul(msg.value, price);\\n        tokenContract.transfer(_buyer, amount);\\n    }\\n\\n}\\n\"},\"TokenEXD.sol\":{\"content\":\"pragma solidity ^0.6.3;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract ERC20 is IERC20 {\\n    mapping(address =\\u003e uint256) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\n\\n    uint256 public totalSupply;\\n\\n    function balanceOf(address _owner) external view override returns (uint256 balance) {\\n        return balances[_owner];\\n    }\\n\\n    function transfer(address _to, uint256 _value)\\n        external\\n        override\\n        returns (bool success)\\n    {\\n        if (balances[msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0) {\\n            balances[msg.sender] -= _value;\\n            balances[_to] += _value;\\n            emit Transfer(msg.sender, _to, _value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function allowance(address _owner, address _spender)\\n        external\\n        view\\n        override\\n        returns (uint256 remaining)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _value) external override returns (bool success) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        override\\n        returns (bool success)\\n    {\\n        if (\\n            balances[_from] \\u003e= _value \\u0026\\u0026\\n            allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026\\n            _value \\u003e 0\\n        ) {\\n            balances[_to] += _value;\\n            balances[_from] -= _value;\\n            allowed[_from][msg.sender] -= _value;\\n            emit Transfer(_from, _to, _value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\\ncontract HumanStandardToken is ERC20 {\\n    fallback() external {\\n        revert();\\n    }\\n\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol; \\n\\n    constructor (\\n        uint256 _initialAmount,\\n        string memory _tokenName,\\n        uint8 _decimalUnits,\\n        string memory _tokenSymbol\\n    ) public {\\n        balances[msg.sender] = _initialAmount; \\n        totalSupply = _initialAmount; \\n        name = _tokenName; \\n        decimals = _decimalUnits;\\n        symbol = _tokenSymbol;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"contract HumanStandardToken\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"exchangeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract HumanStandardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract HumanStandardToken\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ExodusExchanger","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000384000000000000000000000000cc0ec876191558de23c8d122483f30382651674f","Library":"","LicenseType":"None","SwarmSource":"ipfs://ef46525f1a6d47e6c423a842a0b38f42e391a07872e0d86505f5943644630ead"}]}