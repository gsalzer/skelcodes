{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract Erc20 {\r\n    function balanceOf(address owner) view external returns(uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\r\n}\r\n\r\ncontract iErc20 is Erc20 {\r\n    function tokenPrice() view external returns(uint256);\r\n    function burnToEther(address receiver, uint256 burnAmount) external returns(uint256); \r\n}\r\n\r\ncontract FulcrumEmergencyEjection {\r\n    Erc20 constant wEth = Erc20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    iErc20 constant iEth = iErc20(0x77f973FCaF871459aa58cd81881Ce453759281bC);\r\n\r\n    function corona(uint256 dustAmount, uint256 userBalance) external returns(uint256 outAmount) {\r\n        uint256 wEthAmount = wEth.balanceOf(0x77f973FCaF871459aa58cd81881Ce453759281bC);\r\n        if (wEthAmount > dustAmount) {\r\n            uint256 iEthTokenPrice = iEth.tokenPrice();\r\n            uint256 availableBurnAmount = wEthAmount * 1e18 / iEthTokenPrice;\r\n            availableBurnAmount = userBalance < availableBurnAmount ? userBalance : availableBurnAmount;\r\n            iEth.transferFrom(msg.sender, address(this), availableBurnAmount);\r\n            return iEth.burnToEther(msg.sender, availableBurnAmount);\r\n        }\r\n        return 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"}],\"name\":\"corona\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FulcrumEmergencyEjection","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://dd7a9c9e01c402dcbc46ec27f618ea173a0699cfcc356d3797d8353a16b2d3af"}]}