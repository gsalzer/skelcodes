{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapSwapper.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface IUniswapSwapper {\r\n    event Swap(\r\n        address caller,\r\n        address guy,\r\n        address inputToken,\r\n        address outputToken,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount,\r\n        uint256 inputTokenSpent\r\n    );\r\n\r\n    function init(address _factoryAddress) external returns (bool);\r\n\r\n    function isDestroyed() external view returns (bool);\r\n\r\n    function swap(\r\n        address payable guy,\r\n        address inputTokenAddress,\r\n        address outputTokenAddress,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount\r\n    ) external;\r\n\r\n    function swapEth(address payable guy, address outputTokenAddress, uint256 outputTokenAmount)\r\n        external\r\n        payable;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapFactory.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IUniswapFactory {\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Init factory\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapExchange.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IUniswapExchange {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline)\r\n        external\r\n        returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold)\r\n        external\r\n        view\r\n        returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought)\r\n        external\r\n        view\r\n        returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold)\r\n        external\r\n        view\r\n        returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought)\r\n        external\r\n        view\r\n        returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient)\r\n        external\r\n        payable\r\n        returns (uint256 tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient)\r\n        external\r\n        payable\r\n        returns (uint256 eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline)\r\n        external\r\n        returns (uint256 eth_bought);\r\n    function tokenToEthTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_eth,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline)\r\n        external\r\n        returns (uint256 tokens_sold);\r\n    function tokenToEthTransferOutput(\r\n        uint256 eth_bought,\r\n        uint256 max_tokens,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n    function tokenToTokenTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n    function tokenToTokenSwapOutput(\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 max_eth_sold,\r\n        uint256 deadline,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_sold);\r\n    function tokenToTokenTransferOutput(\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 max_eth_sold,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address exchange_addr\r\n    ) external returns (uint256 tokens_bought);\r\n    function tokenToExchangeTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address exchange_addr\r\n    ) external returns (uint256 tokens_bought);\r\n    function tokenToExchangeSwapOutput(\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 max_eth_sold,\r\n        uint256 deadline,\r\n        address exchange_addr\r\n    ) external returns (uint256 tokens_sold);\r\n    function tokenToExchangeTransferOutput(\r\n        uint256 tokens_bought,\r\n        uint256 max_tokens_sold,\r\n        uint256 max_eth_sold,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address exchange_addr\r\n    ) external returns (uint256 tokens_sold);\r\n}\r\n\r\n// File: contracts/UniswapSwapper.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract UniswapSwapper is IUniswapSwapper {\r\n    using SafeMath for uint256;\r\n\r\n    bool internal destroyed;\r\n    bool isTemplate;\r\n\r\n    address internal factoryAddress;\r\n\r\n    uint16 constant DEADLINE_TIME_LENGTH = 300;\r\n\r\n    event Swap(\r\n        address caller,\r\n        address guy,\r\n        address inputToken,\r\n        address outputToken,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount,\r\n        uint256 inputTokenSpent,\r\n        address factoryAddress\r\n    );\r\n\r\n    constructor() public {\r\n        isTemplate = true;\r\n    }\r\n\r\n    function init(address _factoryAddress) external notTemplate returns (bool) {\r\n        require(factoryAddress == address(0), \"factory already init\");\r\n        factoryAddress = _factoryAddress;\r\n        return true;\r\n    }\r\n\r\n    modifier notTemplate() {\r\n        require(isTemplate == false, \"is template contract\");\r\n        require(destroyed == false, \"this contract will selfdestruct\");\r\n        _;\r\n    }\r\n\r\n    function swapTokenToTokenOutput(\r\n        address caller,\r\n        address guy,\r\n        address inputTokenAddress,\r\n        address outputTokenAddress,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount\r\n    ) internal returns (uint256) {\r\n        // Prevent DDOS erc20 attack by calculating balance offset, so if one maliciuous user sends 1 WEI\r\n        // of ERC20 to a precomputed address, it still works.\r\n        uint256 inputBalancePriorOps = IERC20(inputTokenAddress).balanceOf(address(this));\r\n        uint256 outputBalancePriorOps = IERC20(outputTokenAddress).balanceOf(address(this));\r\n        require(\r\n            IERC20(inputTokenAddress).transferFrom(msg.sender, address(this), inputTokenAmount),\r\n            \"error transfer input token to swap\"\r\n        );\r\n        IUniswapExchange exchange = IUniswapExchange(\r\n            IUniswapFactory(factoryAddress).getExchange(inputTokenAddress)\r\n        );\r\n        require(address(exchange) != address(0), \"exchange can not be 0 address\");\r\n        IERC20(inputTokenAddress).approve(address(exchange), inputTokenAmount);\r\n        uint256 inputTokenSpent = exchange.tokenToTokenSwapOutput(\r\n            outputTokenAmount,\r\n            inputTokenAmount, // at least prevent to consume more input tokens than the transfer\r\n            uint256(-1), // do not check how much eth is sold prior the swap: input token --> eth --> output token\r\n            block.timestamp.add(DEADLINE_TIME_LENGTH), // prevent swap to go throught if is not mined after deadline\r\n            outputTokenAddress\r\n        );\r\n        require(inputTokenSpent > 0, \"Swap not spent input token\");\r\n        require(\r\n            IERC20(inputTokenAddress).transfer(guy, inputTokenAmount.sub(inputTokenSpent)),\r\n            \"error transfer remaining input\"\r\n        );\r\n        require(\r\n            IERC20(outputTokenAddress).transfer(caller, outputTokenAmount),\r\n            \"error transfer remaining output\"\r\n        );\r\n        require(\r\n            IERC20(inputTokenAddress).balanceOf(address(this)) == inputBalancePriorOps,\r\n            \"input token still here\"\r\n        );\r\n        require(\r\n            IERC20(outputTokenAddress).balanceOf(address(this)) == outputBalancePriorOps,\r\n            \"output token still here\"\r\n        );\r\n        return inputTokenSpent;\r\n    }\r\n\r\n    function isDestroyed() external view returns (bool) {\r\n        return destroyed;\r\n    }\r\n\r\n    function swapEth(address payable guy, address outputTokenAddress, uint256 outputTokenAmount)\r\n        external\r\n        payable\r\n        notTemplate\r\n    {\r\n        require(factoryAddress != address(0), \"factory address not init\");\r\n        require(guy != address(0), \"guy address can not be 0\");\r\n        require(outputTokenAddress != address(0), \"output token can not be 0\");\r\n        require(msg.value > 0, \"ETH value amount can not be 0\");\r\n        require(outputTokenAmount > 0, \"output token amount can not be 0\");\r\n\r\n        // Prevent DDOS erc20 attack by calculating balance offset, so if one maliciuous user sends 1 WEI\r\n        // of ERC20 to a precomputed address, it still works.\r\n        uint256 outputBalancePriorOps = IERC20(outputTokenAddress).balanceOf(address(this));\r\n        IUniswapExchange exchange = IUniswapExchange(\r\n            IUniswapFactory(factoryAddress).getExchange(outputTokenAddress)\r\n        );\r\n        require(address(exchange) != address(0), \"exchange can not be 0 address\");\r\n        uint256 ethCost = exchange.getEthToTokenOutputPrice(outputTokenAmount);\r\n        require(ethCost <= msg.value, \"Eth costs greater than input\");\r\n        uint256 ethSpent = exchange.ethToTokenSwapOutput.value(ethCost)(\r\n            outputTokenAmount,\r\n            block.timestamp.add(DEADLINE_TIME_LENGTH) // prevent swap to go throught if is not mined after deadline\r\n        );\r\n        require(ethSpent > 0, \"ETH not spent\");\r\n        require(\r\n            IERC20(outputTokenAddress).balanceOf(address(this)) ==\r\n                outputBalancePriorOps.add(outputTokenAmount),\r\n            \"no output token from uniswap\"\r\n        );\r\n        require(\r\n            IERC20(outputTokenAddress).transfer(msg.sender, outputTokenAmount),\r\n            \"error transfer remaining output\"\r\n        );\r\n        require(\r\n            IERC20(outputTokenAddress).balanceOf(address(this)) == outputBalancePriorOps,\r\n            \"output token still here\"\r\n        );\r\n        emit Swap(\r\n            msg.sender,\r\n            guy,\r\n            address(0),\r\n            outputTokenAddress,\r\n            msg.value,\r\n            outputTokenAmount,\r\n            ethSpent,\r\n            factoryAddress\r\n        );\r\n        // mark this contract as destroyed, so external contract can know this contract is being selfdestruct\r\n        // during this tx, also prevents to call this function again during the transaction\r\n        destroyed = true;\r\n        // Self destruct this contract and send the remaining eth to the user\r\n        selfdestruct(guy);\r\n    }\r\n\r\n    function swap(\r\n        address payable guy,\r\n        address inputTokenAddress,\r\n        address outputTokenAddress,\r\n        uint256 inputTokenAmount,\r\n        uint256 outputTokenAmount\r\n    ) external notTemplate {\r\n        require(factoryAddress != address(0), \"factory address not init\");\r\n        require(guy != address(0), \"depositor address can not be 0\");\r\n        require(inputTokenAddress != address(0), \"input address can not be 0\");\r\n        require(outputTokenAddress != address(0), \"output token can not be 0\");\r\n        require(inputTokenAmount > 0, \"input token amount can not be 0\");\r\n        require(outputTokenAmount > 0, \"output token amount can not be 0\");\r\n        uint256 inputTokenSpent = swapTokenToTokenOutput(\r\n            msg.sender,\r\n            guy,\r\n            inputTokenAddress,\r\n            outputTokenAddress,\r\n            inputTokenAmount,\r\n            outputTokenAmount\r\n        );\r\n        emit Swap(\r\n            msg.sender,\r\n            guy,\r\n            inputTokenAddress,\r\n            outputTokenAddress,\r\n            inputTokenAmount,\r\n            outputTokenAmount,\r\n            inputTokenSpent,\r\n            factoryAddress\r\n        );\r\n        // mark this contract as destroyed, so external contract can know this contract is being selfdestruct\r\n        // during this tx, also prevents to call this function again during the transaction\r\n        destroyed = true;\r\n        // Self destruct this contract\r\n        selfdestruct(guy);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenSpent\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDestroyed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"UniswapSwapper","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://be0d2681bb9ce508dc6fb53e0605fc4096401dbccd6be30596e3b02faac05128"}]}