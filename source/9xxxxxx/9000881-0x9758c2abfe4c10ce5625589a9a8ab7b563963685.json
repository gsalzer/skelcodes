{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\ncontract ADM312 {\r\n\r\n  address public COO;\r\n  address public CTO;\r\n  address public CFO;\r\n  address private coreAddress;\r\n  address public logicAddress;\r\n  address public superAddress;\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == COO || msg.sender == CTO || msg.sender == CFO);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyContract() {\r\n    require(msg.sender == coreAddress || msg.sender == logicAddress || msg.sender == superAddress);\r\n    _;\r\n  }\r\n    \r\n  modifier onlyContractAdmin() {\r\n    require(msg.sender == coreAddress || msg.sender == logicAddress || msg.sender == superAddress || msg.sender == COO || msg.sender == CTO || msg.sender == CFO);\r\n     _;\r\n  }\r\n  \r\n  function transferAdmin(address _newAdminAddress1, address _newAdminAddress2) public onlyAdmin {\r\n    if(msg.sender == COO)\r\n    {\r\n        CTO = _newAdminAddress1;\r\n        CFO = _newAdminAddress2;\r\n    }\r\n    if(msg.sender == CTO)\r\n    {\r\n        COO = _newAdminAddress1;\r\n        CFO = _newAdminAddress2;\r\n    }\r\n    if(msg.sender == CFO)\r\n    {\r\n        COO = _newAdminAddress1;\r\n        CTO = _newAdminAddress2;\r\n    }\r\n  }\r\n  \r\n  function transferContract(address _newCoreAddress, address _newLogicAddress, address _newSuperAddress) external onlyAdmin {\r\n    coreAddress  = _newCoreAddress;\r\n    logicAddress = _newLogicAddress;\r\n    superAddress = _newSuperAddress;\r\n    SetCoreInterface(_newLogicAddress).setCoreContract(_newCoreAddress);\r\n    SetCoreInterface(_newSuperAddress).setCoreContract(_newCoreAddress);\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function totalSupply() public view returns (uint256 total);\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  \r\n}\r\n\r\ncontract SetCoreInterface {\r\n   function setCoreContract(address _neWCoreAddress) external; \r\n}\r\n\r\ncontract CaData is ADM312, ERC721 {\r\n    \r\n    function CaData() public {\r\n        COO = msg.sender;\r\n        CTO = msg.sender;\r\n        CFO = msg.sender;\r\n        createCustomAtom(0,0,4,0,0,0,0);\r\n    }\r\n    \r\n    function kill() external\r\n\t{\r\n\t    require(msg.sender == COO);\r\n\t\tselfdestruct(msg.sender);\r\n\t}\r\n    \r\n    function() public payable{}\r\n    \r\n    uint public randNonce  = 0;\r\n    \r\n    struct Atom \r\n    {\r\n      uint64   dna;\r\n      uint8    gen;\r\n      uint8    lev;\r\n      uint8    cool;\r\n      uint32   sons;\r\n      uint64   fath;\r\n\t  uint64   moth;\r\n\t  uint128  isRent;\r\n\t  uint128  isBuy;\r\n\t  uint32   isReady;\r\n    }\r\n    \r\n    Atom[] public atoms;\r\n    \r\n    mapping (uint64  => bool) public dnaExist;\r\n    mapping (address => bool) public bonusReceived;\r\n    mapping (address => uint) public ownerAtomsCount;\r\n    mapping (uint => address) public atomOwner;\r\n    \r\n    event NewWithdraw(address sender, uint balance);\r\n\r\n    \r\n    //ADMIN\r\n    \r\n    function createCustomAtom(uint64 _dna, uint8 _gen, uint8 _lev, uint8 _cool, uint128 _isRent, uint128 _isBuy, uint32 _isReady) public onlyAdmin {\r\n        require(dnaExist[_dna]==false && _cool+_lev>=4);\r\n        Atom memory newAtom = Atom(_dna, _gen, _lev, _cool, 0, 2**50, 2**50, _isRent, _isBuy, _isReady);\r\n        uint id = atoms.push(newAtom) - 1;\r\n        atomOwner[id] = msg.sender;\r\n        ownerAtomsCount[msg.sender]++;\r\n        dnaExist[_dna] = true;\r\n    }\r\n    \r\n    function withdrawBalance() public payable onlyAdmin {\r\n\t\tNewWithdraw(msg.sender, address(this).balance);\r\n        CFO.transfer(address(this).balance);\r\n    }\r\n    \r\n    //MAPPING_SETTERS\r\n    \r\n    function incRandNonce() external onlyContract {\r\n        randNonce++;\r\n    }\r\n    \r\n    function setDnaExist(uint64 _dna, bool _newDnaLocking) external onlyContractAdmin {\r\n        dnaExist[_dna] = _newDnaLocking;\r\n    }\r\n    \r\n    function setBonusReceived(address _add, bool _newBonusLocking) external onlyContractAdmin {\r\n        bonusReceived[_add] = _newBonusLocking;\r\n    }\r\n    \r\n    function setOwnerAtomsCount(address _owner, uint _newCount) external onlyContract {\r\n        ownerAtomsCount[_owner] = _newCount;\r\n    }\r\n    \r\n    function setAtomOwner(uint _atomId, address _owner) external onlyContract {\r\n        atomOwner[_atomId] = _owner;\r\n    }\r\n    \r\n    //ATOM_SETTERS\r\n    \r\n    function pushAtom(uint64 _dna, uint8 _gen, uint8 _lev, uint8 _cool, uint32 _sons, uint64 _fathId, uint64 _mothId, uint128 _isRent, uint128 _isBuy, uint32 _isReady) external onlyContract returns (uint id) {\r\n        Atom memory newAtom = Atom(_dna, _gen, _lev, _cool, _sons, _fathId, _mothId, _isRent, _isBuy, _isReady);\r\n        id = atoms.push(newAtom) -1;\r\n    }\r\n\t\r\n\tfunction setAtomDna(uint _atomId, uint64 _dna) external onlyAdmin {\r\n        atoms[_atomId].dna = _dna;\r\n    }\r\n\t\r\n\tfunction setAtomGen(uint _atomId, uint8 _gen) external onlyAdmin {\r\n        atoms[_atomId].gen = _gen;\r\n    }\r\n    \r\n    function setAtomLev(uint _atomId, uint8 _lev) external onlyContract {\r\n        atoms[_atomId].lev = _lev;\r\n    }\r\n    \r\n    function setAtomCool(uint _atomId, uint8 _cool) external onlyContract {\r\n        atoms[_atomId].cool = _cool;\r\n    }\r\n    \r\n    function setAtomSons(uint _atomId, uint32 _sons) external onlyContract {\r\n        atoms[_atomId].sons = _sons;\r\n    }\r\n    \r\n    function setAtomFath(uint _atomId, uint64 _fath) external onlyContract {\r\n        atoms[_atomId].fath = _fath;\r\n    }\r\n    \r\n    function setAtomMoth(uint _atomId, uint64 _moth) external onlyContract {\r\n        atoms[_atomId].moth = _moth;\r\n    }\r\n    \r\n    function setAtomIsRent(uint _atomId, uint128 _isRent) external onlyContract {\r\n        atoms[_atomId].isRent = _isRent;\r\n    }\r\n    \r\n    function setAtomIsBuy(uint _atomId, uint128 _isBuy) external onlyContract {\r\n        atoms[_atomId].isBuy = _isBuy;\r\n    }\r\n    \r\n    function setAtomIsReady(uint _atomId, uint32 _isReady) external onlyContractAdmin {\r\n        atoms[_atomId].isReady = _isReady;\r\n    }\r\n    \r\n    //ERC721\r\n    \r\n    mapping (uint => address) tokenApprovals;\r\n    \r\n    function totalSupply() public view returns (uint256 total){\r\n  \t    return atoms.length;\r\n  \t}\r\n  \t\r\n  \tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return ownerAtomsCount[_owner];\r\n    }\r\n    \r\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\r\n        return atomOwner[_tokenId];\r\n    }\r\n      \r\n    function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n        atoms[_tokenId].isBuy  = 0;\r\n        atoms[_tokenId].isRent = 0;\r\n        ownerAtomsCount[_to]++;\r\n        ownerAtomsCount[_from]--;\r\n        atomOwner[_tokenId] = _to;\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n  \r\n    function transfer(address _to, uint256 _tokenId) public {\r\n        require(msg.sender == atomOwner[_tokenId]);\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function approve(address _to, uint256 _tokenId) public {\r\n        require(msg.sender == atomOwner[_tokenId]);\r\n        tokenApprovals[_tokenId] = _to;\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n    \r\n    function takeOwnership(uint256 _tokenId) public {\r\n        require(tokenApprovals[_tokenId] == msg.sender);\r\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n    }\r\n    \r\n}\r\n\r\ncontract CaBattleInterface {\r\n    function arenaKinds(uint8, uint) public returns (uint8);\r\n    function calculateArenaParams(uint8, uint8, uint24) external returns (uint8[4], uint128);\r\n    function calculateAtomAttack(uint56) external returns (uint16, uint16);\r\n    function calculateBattle(bool, uint56, uint) external;\r\n}\r\n\r\ncontract CaArena{\r\n    \r\n    function CaArena() public {\r\n        _createArena(0,0, msg.sender);\r\n    }\r\n    \r\n    address public CaDataAddress = 0x9b3554e6fc4f81531f6d43b611258bd1058ef6d5;\r\n    CaData public CaDataContract = CaData(CaDataAddress);\r\n    CaBattleInterface private CaBattleContract;\r\n    \r\n    function kill() external\r\n\t{\r\n\t    require(msg.sender == CaDataContract.COO());\r\n\t\tselfdestruct(msg.sender);\r\n\t}\r\n\t\r\n\tevent NewJoinArena(address sender, uint56 atom, uint arena);\r\n\tevent NewUnJoinArena(address sender, uint56 atom, uint arena);\r\n\tevent NewCloseArena(address sender, uint56 winner, uint arena, address winner_addr, address holder, uint128 amount, uint arena1, uint arena2, uint arena3, uint arena4);\r\n\tevent NewBuyBonus(address sender, uint8 attacks);\r\n\t\r\n\tfunction() public payable{}\r\n\t\r\n    struct Arena\r\n    {\r\n      bool      active;\r\n      uint8     kind;\r\n      uint8     atm_num;\r\n      uint24    rank;\r\n      uint128   fee;\r\n      uint128   prize;\r\n      uint56    winner;\r\n      address   holder;\r\n    }\r\n    \r\n    Arena[] public arenas;\r\n\r\n    uint[] bonusFees = [3 finney, 25 finney, 50 finney, 0, 0, 0, 0, 0];\r\n    uint8[] bonusAttacks = [1, 10, 25, 0, 0, 0, 0, 0];\r\n    \r\n    mapping (uint => mapping (uint8 => uint56)) public arenaAtoms;\r\n    mapping (uint => mapping (uint8 => uint16)) arenaAttacks;\r\n    mapping (uint56 => bool) public atomBattleBusy;\r\n    mapping (uint56 => uint) public atomJoins;\r\n    mapping (uint56 => uint) public atomWins;\r\n    mapping (address => uint8) public addrToBonus;\r\n    mapping (uint => mapping (uint8 => bool)) public arenaToBonus;\r\n\r\n\r\n    modifier onlyAdmin() {\r\n      require(msg.sender == CaDataContract.COO() || msg.sender == CaDataContract.CFO() || msg.sender == CaDataContract.CTO());\r\n      _;\r\n     }\r\n    \r\n    modifier onlyOwnerOf(uint56 _atomId) {\r\n        require(msg.sender == CaDataContract.atomOwner(uint(_atomId)));\r\n        _;\r\n    }\r\n\r\n    //ADMIN FUNCTION\r\n    \r\n    function createArena(uint8 _kind, uint128 _fee) external onlyAdmin {\r\n        _createArena(_kind, _fee, msg.sender);\r\n    }\r\n    \r\n    function setBattleContract(address _newBattleAddress) external onlyAdmin {\r\n        CaBattleContract = CaBattleInterface(_newBattleAddress);\r\n    }\r\n    \r\n  \tfunction setAttackBonusParams(uint _newBonusFee, uint8 _newBonusAttack, uint8 index) external onlyAdmin {\r\n        bonusFees[index] = _newBonusFee;\r\n        bonusAttacks[index] = _newBonusAttack;\r\n  \t}\r\n  \t\r\n  \tfunction setAttackBonus(uint8 _attacks, address _address) external onlyAdmin {\r\n  \t    addrToBonus[_address] = _attacks;\r\n  \t}\r\n    \r\n    //INTERNAL FUNCTION\r\n    \r\n    function _createArena(uint8 _kind, uint128 _fee, address _holder) private returns (uint id){\r\n        Arena memory newArena = Arena(true, _kind, 0, 0, _fee, 0, 2**50, _holder);\r\n        id = arenas.push(newArena) -1;\r\n    }\r\n    \r\n    function _closeArena(uint _arenaId) private {\r\n        require(arenas[_arenaId].active);\r\n        require(arenas[_arenaId].atm_num>1);\r\n        uint56 winner;\r\n        uint16 winner_attack;\r\n        uint128 winFee;\r\n        uint[4] memory arenasId;\r\n        uint8[4] memory winKind;\r\n        uint8 award = CaBattleContract.arenaKinds(arenas[_arenaId].kind,6);\r\n        for (uint8 i = 0; i < arenas[_arenaId].atm_num; i++)\r\n        {\r\n            atomBattleBusy[arenaAtoms[_arenaId][i]] = false;\r\n            if(arenaAttacks[_arenaId][i] > winner_attack)\r\n            {\r\n                winner = arenaAtoms[_arenaId][i];\r\n                winner_attack = arenaAttacks[_arenaId][i];\r\n            }\r\n        }\r\n        (winKind, winFee) = CaBattleContract.calculateArenaParams(arenas[_arenaId].kind, arenas[_arenaId].atm_num, arenas[_arenaId].rank);\r\n        if(arenas[_arenaId].atm_num < 8)\r\n        {\r\n            award = 1;\r\n        }\r\n        for (i = 0; i < award; i++)\r\n        {\r\n           arenasId[i] = _createArena(winKind[i], arenas[_arenaId].fee+winFee, CaDataContract.atomOwner(uint(winner)));\r\n        }\r\n        atomWins[winner]++;\r\n        arenas[_arenaId].winner = winner;\r\n        arenas[_arenaId].holder.transfer(arenas[_arenaId].prize);\r\n        arenas[_arenaId].active = false;\r\n        NewCloseArena(msg.sender, winner, _arenaId, CaDataContract.atomOwner(uint(winner)), arenas[_arenaId].holder, arenas[_arenaId].prize, arenasId[0], arenasId[1], arenasId[2], arenasId[3]);\r\n    }\r\n    \r\n    function _compValue(uint64 _dna) private pure returns (uint8 compCount) {\r\n        require(_dna < 2 ** 50);\r\n        for (uint8 i = 0; i < 50; i++) \r\n        {\r\n            if(_dna % 2 == 1) {compCount += 2;}\r\n            _dna /= 2;\r\n        }\r\n    }\r\n    \r\n    //USER FUNCTIONS\r\n    \r\n    function joinArenaByAtom(uint56 _atomId, uint _arenaId) external payable onlyOwnerOf(_atomId) {\r\n        require(arenas[_arenaId].active);\r\n        require(arenas[_arenaId].fee == msg.value);\r\n        require(atomBattleBusy[_atomId] == false);\r\n        uint64 dna;\r\n        uint8 gen;\r\n        (dna,gen,,,,,,,,) = CaDataContract.atoms(_atomId);\r\n        uint8 comp = _compValue(dna);\r\n        require(gen>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,0));\r\n        require(gen<=CaBattleContract.arenaKinds(arenas[_arenaId].kind,1));\r\n        require(comp>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,2));\r\n        require(comp<=CaBattleContract.arenaKinds(arenas[_arenaId].kind,3));\r\n        require(atomJoins[_atomId]>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,4));\r\n        require(atomWins[_atomId]>=CaBattleContract.arenaKinds(arenas[_arenaId].kind,5));\r\n        uint16 rank;\r\n        uint8 bonus = addrToBonus[msg.sender];\r\n        atomBattleBusy[_atomId] = true;\r\n        atomJoins[_atomId]++;\r\n        arenaAtoms[_arenaId][arenas[_arenaId].atm_num] = _atomId;\r\n        (arenaAttacks[_arenaId][arenas[_arenaId].atm_num],rank) = CaBattleContract.calculateAtomAttack(_atomId);\r\n        if(bonus > 0)\r\n        {\r\n            arenaAttacks[_arenaId][arenas[_arenaId].atm_num] = arenaAttacks[_arenaId][arenas[_arenaId].atm_num] + arenaAttacks[_arenaId][arenas[_arenaId].atm_num]/10;\r\n            addrToBonus[msg.sender] = addrToBonus[msg.sender]-1;\r\n            arenaToBonus[_arenaId][arenas[_arenaId].atm_num] = true;\r\n        }\r\n        arenas[_arenaId].rank = arenas[_arenaId].rank + rank;\r\n        arenas[_arenaId].atm_num++;\r\n        arenas[_arenaId].prize = arenas[_arenaId].prize + arenas[_arenaId].fee - arenas[_arenaId].fee/2;\r\n        CaDataAddress.transfer(arenas[_arenaId].fee/2);\r\n        CaBattleContract.calculateBattle(true,_atomId,_arenaId);\r\n\t\tNewJoinArena(msg.sender,_atomId,_arenaId);\r\n        if(arenas[_arenaId].atm_num==8)\r\n        {\r\n            _closeArena(_arenaId);\r\n            CaBattleContract.calculateBattle(true,0,_arenaId);\r\n        }\r\n  \t}\r\n  \t\r\n    function unJoinArenaByAtom(uint56 _atomId, uint _arenaId) external onlyOwnerOf(_atomId) {\r\n        require(arenas[_arenaId].active);\r\n        require(atomBattleBusy[_atomId] == true);\r\n        uint8 lev;\r\n        (,,lev,,,,,,,) = CaDataContract.atoms(_atomId);\r\n\t\trequire(lev > 2);\r\n        bool finder;\r\n        uint16 rank;\r\n        (,rank) = CaBattleContract.calculateAtomAttack(_atomId);\r\n        atomBattleBusy[_atomId] = false;\r\n        atomJoins[_atomId]--;\r\n        for(uint8 i = 0; i < arenas[_arenaId].atm_num; i++)\r\n        {\r\n            if(finder || arenaAtoms[_arenaId][i]==_atomId)\r\n            {\r\n               arenaAtoms[_arenaId][i] = arenaAtoms[_arenaId][i+1];\r\n               arenaAttacks[_arenaId][i] = arenaAttacks[_arenaId][i+1];\r\n               finder = true; \r\n            }\r\n        }\r\n        arenas[_arenaId].rank = arenas[_arenaId].rank - rank;\r\n        arenas[_arenaId].atm_num--;\r\n        CaBattleContract.calculateBattle(false,_atomId,_arenaId);\r\n        NewUnJoinArena(msg.sender,_atomId,_arenaId);\r\n  \t}\r\n  \t\r\n  \tfunction closeArena(uint _arenaId) external payable {\r\n  \t    require(arenas[_arenaId].holder == msg.sender);\r\n  \t    _closeArena(_arenaId);\r\n  \t    CaBattleContract.calculateBattle(false,0,_arenaId);\r\n  \t}\r\n\r\n  \tfunction buyAttackBonus(uint8 _bonusCode) external payable {\r\n  \t    require(_bonusCode < bonusAttacks.length);\r\n  \t    require(msg.value == bonusFees[_bonusCode]);\r\n  \t    require(addrToBonus[msg.sender] + bonusAttacks[_bonusCode] < 2 ** 8);\r\n  \t    addrToBonus[msg.sender] = addrToBonus[msg.sender] + bonusAttacks[_bonusCode];\r\n  \t    CaDataAddress.transfer(msg.value);\r\n  \t    NewBuyBonus(msg.sender, bonusAttacks[_bonusCode]);\r\n  \t}\r\n  \t\r\n  \t//VIEW FUNCTIONS\r\n\r\n  \tfunction arenaAttack(uint _arenaId, uint8 _index) public view returns (uint16 attack){\r\n  \t    if(!arenas[_arenaId].active)\r\n  \t    {\r\n  \t        attack = arenaAttacks[_arenaId][_index];\r\n  \t    }\r\n  \t}\r\n  \t\r\n  \tfunction arenaBonus(uint _arenaId, uint8 _index) public view returns (bool){\r\n        return arenaToBonus[_arenaId][_index];\r\n  \t}\r\n  \t\r\n  \tfunction arenaAtmNum(uint _arenaId) public view returns (uint8){\r\n  \t    return arenas[_arenaId].atm_num;\r\n  \t}\r\n  \t\r\n  \tfunction arenaSupply() public view returns (uint256){\r\n  \t    return arenas.length;\r\n  \t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_attacks\",\"type\":\"uint8\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAttackBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBattleAddress\",\"type\":\"address\"}],\"name\":\"setBattleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusCode\",\"type\":\"uint8\"}],\"name\":\"buyAttackBonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arenaSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint56\"},{\"name\":\"_arenaId\",\"type\":\"uint256\"}],\"name\":\"joinArenaByAtom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_arenaId\",\"type\":\"uint256\"}],\"name\":\"arenaAtmNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arenaId\",\"type\":\"uint256\"}],\"name\":\"closeArena\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint56\"}],\"name\":\"atomBattleBusy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CaDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBonusFee\",\"type\":\"uint256\"},{\"name\":\"_newBonusAttack\",\"type\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"setAttackBonusParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_arenaId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"arenaBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"arenaToBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CaDataAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arenas\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"kind\",\"type\":\"uint8\"},{\"name\":\"atm_num\",\"type\":\"uint8\"},{\"name\":\"rank\",\"type\":\"uint24\"},{\"name\":\"fee\",\"type\":\"uint128\"},{\"name\":\"prize\",\"type\":\"uint128\"},{\"name\":\"winner\",\"type\":\"uint56\"},{\"name\":\"holder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint56\"}],\"name\":\"atomJoins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kind\",\"type\":\"uint8\"},{\"name\":\"_fee\",\"type\":\"uint128\"}],\"name\":\"createArena\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"arenaAtoms\",\"outputs\":[{\"name\":\"\",\"type\":\"uint56\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint56\"}],\"name\":\"atomWins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_arenaId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"arenaAttack\",\"outputs\":[{\"name\":\"attack\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atomId\",\"type\":\"uint56\"},{\"name\":\"_arenaId\",\"type\":\"uint256\"}],\"name\":\"unJoinArenaByAtom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrToBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint56\"},{\"indexed\":false,\"name\":\"arena\",\"type\":\"uint256\"}],\"name\":\"NewJoinArena\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"atom\",\"type\":\"uint56\"},{\"indexed\":false,\"name\":\"arena\",\"type\":\"uint256\"}],\"name\":\"NewUnJoinArena\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"uint56\"},{\"indexed\":false,\"name\":\"arena\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"arena1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"arena2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"arena3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"arena4\",\"type\":\"uint256\"}],\"name\":\"NewCloseArena\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"attacks\",\"type\":\"uint8\"}],\"name\":\"NewBuyBonus\",\"type\":\"event\"}]","ContractName":"CaArena","CompilerVersion":"v0.4.24-nightly.2018.5.16+commit.7f965c86","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2f9a9fea3b55e64a470e570a5221fb5f300c7a899cb2a4bb7ae145966ad866a3"}]}