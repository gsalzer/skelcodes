{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Developed by The Flowchain Foundation\r\n *\r\n * The Flowchain tokens (FLC v2) smart contract\r\n */\r\npragma solidity 0.5.16;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender != address(0));\r\n        require(msg.sender == newOwner);\r\n        _;\r\n    }\r\n    \r\n    function isOwner(address account) public view returns (bool) {\r\n        if( account == owner ){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public onlyNewOwner {\r\n        emit OwnershipTransferred(owner, newOwner);        \r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev The Pausable can pause and unpause the token transfers.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }    \r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\n * @title The mintable FLC tokens.\r\n */\r\ncontract Mintable {\r\n    /**\r\n     * @dev Mint a amount of tokens and the funds to the user.\r\n     */\r\n    function mintToken(address to, uint256 amount) public returns (bool success);  \r\n\r\n    /**\r\n     * @dev Setup a mintable address that can mint or mine tokens.\r\n     */    \r\n    function setupMintableAddress(address _mintable) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title The off-chain issuable FLC tokens.\r\n */\r\ncontract OffchainIssuable {\r\n    /**\r\n     * The minimal withdraw ammount.\r\n     */\r\n    uint256 public MIN_WITHDRAW_AMOUNT = 100;\r\n\r\n    /**\r\n     * @dev Suspend the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function setMinWithdrawAmount(uint256 amount) public returns (bool success);\r\n\r\n    /**\r\n     * @dev Resume the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function getMinWithdrawAmount() public view returns (uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens redeemed to `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountRedeemOf(address _owner) public view returns (uint256 amount);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens withdrawn by `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountWithdrawOf(address _owner) public view returns (uint256 amount);\r\n\r\n    /**\r\n     * @dev Redeem the value of tokens to the address 'msg.sender'\r\n     * @param to The user that will receive the redeemed token.\r\n     * @param amount Number of tokens to redeem.\r\n     */\r\n    function redeem(address to, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n     * @dev The user withdraw API.\r\n     * @param amount Number of tokens to redeem.\r\n     */\r\n    function withdraw(uint256 amount) public returns (bool success);   \r\n}\r\n\r\n/**\r\n * @dev The ERC20 standard as defined in the EIP.\r\n */\r\ncontract Token {\r\n    /**\r\n     * @dev The total amount of tokens.\r\n     */\r\n    uint256 public totalSupply;\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev send `_value` token to `_to` from `msg.sender`\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of wei to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @dev The ERC20 standard implementation of FLC. \r\n */\r\ncontract StandardToken is Token {\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        \r\n        // Ensure not overflow\r\n        require(balances[_to] + _value >= balances[_to]);\r\n        \r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n        \r\n        // Ensure not overflow\r\n        require(balances[_to] + _value >= balances[_to]);          \r\n\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] -= _value;\r\n        }  \r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true; \r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of ERC-20 that adds off-chain issuable and mintable tokens.\r\n * It allows miners to mint (create) new FLC tokens.\r\n *\r\n * At construction, the contract `_mintableAddress` is the only token minter.\r\n */\r\ncontract FlowchainToken is StandardToken, Mintable, OffchainIssuable, Ownable, Pausable {\r\n\r\n    /* Public variables of the token */\r\n    string public name = \"Flowchain\";\r\n    string public symbol = \"FLC\";    \r\n    uint8 public decimals = 18;\r\n    string public version = \"2.0\";\r\n    address public mintableAddress;\r\n    address public multiSigWallet;\r\n\r\n    bool internal _isIssuable;\r\n\r\n    event Freeze(address indexed account);\r\n    event Unfreeze(address indexed account);\r\n\r\n    mapping (address => uint256) private _amountMinted;\r\n    mapping (address => uint256) private _amountRedeem;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    modifier notFrozen(address _account) {\r\n        require(!frozenAccount[_account]);\r\n        _;\r\n    }\r\n\r\n    constructor(address _multiSigWallet) public {\r\n        // 1 billion tokens + 18 decimals\r\n        totalSupply = 10**27;\r\n\r\n        // The multisig wallet that holds the unissued tokens\r\n        multiSigWallet = _multiSigWallet;\r\n\r\n        // Give the multisig wallet all initial tokens (unissued tokens)\r\n        balances[multiSigWallet] = totalSupply;  \r\n\r\n        emit Transfer(address(0), multiSigWallet, totalSupply);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public notFrozen(msg.sender) whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }   \r\n\r\n    function transferFrom(address from, address to, uint256 value) public notFrozen(from) whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Suspend the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function suspendIssuance() external onlyOwner {\r\n        _isIssuable = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Resume the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function resumeIssuance() external onlyOwner {\r\n        _isIssuable = true;\r\n    }\r\n\r\n    /**\r\n     * @return bool return 'true' if tokens can still be issued by the issuer, \r\n     * 'false' if they can't anymore.\r\n     */\r\n    function isIssuable() public view returns (bool success) {\r\n        return _isIssuable;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens redeemed to `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountRedeemOf(address _owner) public view returns (uint256 amount) {\r\n        return _amountRedeem[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens withdrawn by `_owner`.\r\n     * @param _owner The address from which the amount will be retrieved\r\n     * @return The amount\r\n     */\r\n    function amountWithdrawOf(address _owner) public view returns (uint256 amount) {\r\n        return _amountMinted[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem user mintable tokens. Only the mining contract can redeem tokens.\r\n     * @param to The user that will receive the redeemed token.     \r\n     * @param amount The amount of tokens to be withdrawn\r\n     * @return The result of the redeem\r\n     */\r\n    function redeem(address to, uint256 amount) external returns (bool success) {\r\n        require(msg.sender == mintableAddress);    \r\n        require(_isIssuable == true);\r\n        require(amount > 0);\r\n\r\n        // The total amount of redeem tokens to the user.\r\n        _amountRedeem[to] += amount;\r\n\r\n        // Mint new tokens and send the funds to the account `mintableAddress`\r\n        // Users can withdraw funds.\r\n        mintToken(mintableAddress, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev The user can withdraw his minted tokens.\r\n     * @param amount The amount of tokens to be withdrawn\r\n     * @return The result of the withdraw\r\n     */\r\n    function withdraw(uint256 amount) public returns (bool success) {\r\n        require(_isIssuable == true);\r\n\r\n        // Safety check\r\n        require(amount > 0);        \r\n        require(amount <= _amountRedeem[msg.sender]);\r\n        require(amount >= MIN_WITHDRAW_AMOUNT);\r\n\r\n        // Transfer the amount of tokens in the mining contract `mintableAddress` to the user account\r\n        require(balances[mintableAddress] >= amount);\r\n\r\n        // The balance of the user redeemed tokens.\r\n        _amountRedeem[msg.sender] -= amount;\r\n\r\n        // Keep track of the tokens minted by the user.\r\n        _amountMinted[msg.sender] += amount;\r\n\r\n        balances[mintableAddress] -= amount;\r\n        balances[msg.sender] += amount;\r\n        \r\n        emit Transfer(mintableAddress, msg.sender, amount);\r\n        return true;               \r\n    }\r\n\r\n    /**\r\n     * @dev Setup the contract address that can mint tokens\r\n     * @param _mintable The address of the smart contract\r\n     * @return The result of the setup\r\n     */\r\n    function setupMintableAddress(address _mintable) public onlyOwner returns (bool success) {\r\n        mintableAddress = _mintable;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint an amount of tokens and transfer to the user\r\n     * @param to The address of the user who will receive the tokens\r\n     * @param amount The amount of rewarded tokens\r\n     * @return The result of token transfer\r\n     */\r\n    function mintToken(address to, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == mintableAddress);\r\n        require(balances[multiSigWallet] >= amount);\r\n\r\n        balances[multiSigWallet] -= amount;\r\n        balances[to] += amount;\r\n\r\n        emit Transfer(multiSigWallet, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Suspend the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function setMinWithdrawAmount(uint256 amount) public onlyOwner returns (bool success) {\r\n        require(amount > 0);\r\n        MIN_WITHDRAW_AMOUNT = amount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Resume the issuance of new tokens.\r\n     * Once set to false, '_isIssuable' can never be set to 'true' again.\r\n     */\r\n    function getMinWithdrawAmount() public view returns (uint256 amount) {\r\n        return MIN_WITHDRAW_AMOUNT;\r\n    }\r\n\r\n    /**\r\n     * @dev Freeze an user\r\n     * @param account The address of the user who will be frozen\r\n     * @return The result of freezing an user\r\n     */\r\n    function freezeAccount(address account) public onlyOwner returns (bool) {\r\n        require(!frozenAccount[account]);\r\n        frozenAccount[account] = true;\r\n        emit Freeze(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze an user\r\n     * @param account The address of the user who will be unfrozen\r\n     * @return The result of unfreezing an user\r\n     */\r\n    function unfreezeAccount(address account) public onlyOwner returns (bool) {\r\n        require(frozenAccount[account]);\r\n        frozenAccount[account] = false;\r\n        emit Unfreeze(account);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This function makes it easy to get the creator of the tokens\r\n     * @return The address of token creator\r\n     */\r\n    function getCreator() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev This function makes it easy to get the mintableAddress\r\n     * @return The address of token creator\r\n     */\r\n    function getMintableAddress() external view returns (address) {\r\n        return mintableAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_WITHDRAW_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"amountRedeemOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"amountWithdrawOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIssuable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSigWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintable\",\"type\":\"address\"}],\"name\":\"setupMintableAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"suspendIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreezeAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FlowchainToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009581973c54fce63d0f5c4c706020028af20ff723","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ecc29fdafff014f98ed0411bd03484c1ac04ef6f48fc3066800ee1224b32bdd2"}]}