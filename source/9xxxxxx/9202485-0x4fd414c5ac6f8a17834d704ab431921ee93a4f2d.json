{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.15;\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/******************************************/\r\n/*       nerveShares starts here          */\r\n/******************************************/\r\n\r\ncontract nerveShares {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public totalDividends;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) public allowance;\r\n    mapping (address => uint256) internal lastDividends;\r\n    mapping (address => bool) public lockedAccounts;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Claim(address indexed _from, uint256 value);\r\n    event Locked(address indexed _from, bool state);\r\n\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public\r\n    {\r\n        decimals = 18;                              // decimals  \r\n        totalSupply = 1000000*10**18;               // initialSupply\r\n        name = \"Nerve\";                             // Set the name for display purposes\r\n        symbol = \"NRV\";                             // Set the symbol for display purposes\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the current dividends of a user. Take prior payoffs into account.\r\n    * @param account The address of the user.\r\n    */\r\n    function dividendBalanceOf(address account) public view returns (uint256) \r\n    {\r\n        uint256 newDividends = totalDividends.sub(lastDividends[account]);\r\n        uint256 product = balanceOf[account].mul(newDividends);\r\n        return product.div(totalSupply);\r\n    }   \r\n\r\n    /**\r\n    * @dev Internal dividendBalanceOf.\r\n    * @param account The address of the user.\r\n    */\r\n    function internalDividendBalanceOf(address account, uint256 tempLastDividends) internal view returns (uint256) \r\n    {\r\n        uint256 newDividends = totalDividends.sub(tempLastDividends);\r\n        uint256 product = balanceOf[account].mul(newDividends);\r\n        return product.div(totalSupply);\r\n    }   \r\n\r\n    /**\r\n    * @dev Claim dividends. Restrict dividends to new income.\r\n    */\r\n    function claimDividend() external \r\n    {\r\n        uint256 tempLastDividends = lastDividends[msg.sender];\r\n        lastDividends[msg.sender] = totalDividends;\r\n        uint256 owing = internalDividendBalanceOf(msg.sender, tempLastDividends);\r\n\r\n        require(owing > 0, \"No dividends to claim.\");\r\n\r\n        msg.sender.transfer(owing);\r\n        \r\n        emit Claim(msg.sender, owing);\r\n    }\r\n\r\n    /**\r\n    * @dev Open or close sending address for trade.\r\n    * @param lock True -> can't send or receive NRV.\r\n    */\r\n    function lockToken(bool lock) external\r\n    {\r\n        lockedAccounts[msg.sender] = lock;\r\n        \r\n        emit Locked(msg.sender, lock);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens.\r\n    * @param to The address of the recipient.\r\n    * @param value The amount to send.\r\n    */\r\n    function transfer(address payable to, uint256 value) external returns(bool success)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens. Spread open dividends across all users.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address payable from, address payable to, uint256 value) internal\r\n    {   \r\n        require(value > 0, \"Transferred value has to be grater than 0.\");\r\n        require(to != address(0), \"0x00 address not allowed.\");\r\n        require(lockedAccounts[to] == false, \"Target address is locked.\");\r\n        require(lockedAccounts[from] == false, \"Sending address is locked.\");\r\n        require(value <= balanceOf[from], \"Not enough funds on sender address.\");\r\n        require(balanceOf[to] + value >= balanceOf[to], \"Overflow protection.\");\r\n \r\n        uint256 fromOwing = dividendBalanceOf(from);\r\n        uint256 toOwing = dividendBalanceOf(to);\r\n\r\n        lastDividends[to] = totalDividends;\r\n        lastDividends[from] = totalDividends;\r\n\r\n        totalDividends = totalDividends.add(fromOwing);\r\n        totalDividends = totalDividends.add(toOwing);\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n \r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev ERC20 transferFrom.\r\n    * @param from Address to transfer from.\r\n    * @param to Address to transfer to.\r\n    * @param value Amount to transfer.\r\n    * @return success of transfer.\r\n    */\r\n    function transferFrom(address payable from, address payable to, uint value) external returns (bool success)\r\n    {     \r\n        require(allowance[from][msg.sender] >= value, \"Funds not approved.\"); \r\n        require(balanceOf[from] >= value, \"Not enough funds on sender address.\");\r\n        require(balanceOf[to] + value >= balanceOf[to], \"Overflow protection.\");\r\n\r\n        allowance[from][msg.sender] -= value;\r\n  \r\n        _transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev `msg.sender` approves `addr` to spend `value` tokens.\r\n    * @param spender The address of the account able to transfer the tokens.\r\n    * @param value The amount of wei to be approved for transfer.\r\n    */\r\n    function approve(address spender, uint value) external returns (bool) \r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n   \r\n    /**\r\n    * @dev Get contract ETH amount. \r\n    */ \r\n    function contractBalance() external view returns(uint256 amount)\r\n    {\r\n        return (address(this).balance);\r\n    }\r\n    \r\n    /**\r\n    * @dev Receive ETH from CONTRACT and increase the total historic amount of dividend eligible earnings.\r\n    */\r\n    function receiveETH() external payable\r\n    {\r\n        totalDividends = totalDividends.add(msg.value);\r\n    }\r\n    \r\n    /**\r\n    * @dev Receive ETH and increase the total historic amount of dividend eligible earnings.\r\n    */\r\n    function () external payable \r\n    {\r\n        totalDividends = totalDividends.add(msg.value);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"lockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"nerveShares","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://5817791d0082a51b34175c665f74e85efc5e50f5ae0bdb8ef55c6f9eb4a794f7"}]}