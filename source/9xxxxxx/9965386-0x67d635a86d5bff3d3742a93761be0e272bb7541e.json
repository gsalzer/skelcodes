{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n* Logic: Permitetd addresses can write to this contract types of converted tokens\r\n*\r\n* Motivation:\r\n* Due fact tokens can be different like Uniswap/Bancor pool, Synthetix, Compound ect\r\n* we need a certain method for convert a certain token.\r\n* so we mark type for new token once after success convert\r\n*/\r\n\r\n\r\n\r\ncontract TokensTypeStorage is Ownable {\r\n  // check if token alredy registred\r\n  mapping(address => bool) public isRegistred;\r\n  // tokens types\r\n  mapping(address => bytes32) public getType;\r\n  // addresses which can write to this contract\r\n  mapping(address => bool) public isPermittedAddress;\r\n\r\n  // all available types\r\n  string[] public allTypes;\r\n\r\n  modifier onlyPermitted() {\r\n    require(isPermittedAddress[msg.sender], \"Sender not have permition for edit this contract\");\r\n    _;\r\n  }\r\n\r\n  // allow add new token type from trade portals\r\n  function addNewTokenType(address _token, string _type) public onlyPermitted {\r\n    // Don't add if alredy registred\r\n    if(isRegistred[_token])\r\n      return;\r\n\r\n    // Add\r\n    getType[_token] = stringToBytes32(_type);\r\n    isRegistred[_token] = true;\r\n    allTypes.push(_type);\r\n  }\r\n\r\n\r\n  // allow update token type from owner wallet\r\n  function setTokenTypeAsOwner(address _token, string _type) public onlyOwner{\r\n    // get previos type\r\n    bytes32 prevType = getType[_token];\r\n\r\n    // Update type\r\n    getType[_token] = stringToBytes32(_type);\r\n    isRegistred[_token] = true;\r\n\r\n    // if new type unique add it to the list\r\n    if(stringToBytes32(_type) != prevType)\r\n       allTypes.push(_type);\r\n  }\r\n\r\n  function addNewPermittedAddress(address _permitted) public onlyOwner {\r\n    isPermittedAddress[_permitted] = true;\r\n  }\r\n\r\n  function removePermittedAddress(address _permitted) public onlyOwner {\r\n    isPermittedAddress[_permitted] = false;\r\n  }\r\n\r\n  // helper for convert dynamic string size to fixed bytes32 size\r\n  function stringToBytes32(string memory source) private pure returns (bytes32 result) {\r\n    bytes memory tempEmptyStringTest = bytes(source);\r\n    if (tempEmptyStringTest.length == 0) {\r\n        return 0x0;\r\n    }\r\n\r\n    assembly {\r\n        result := mload(add(source, 32))\r\n    }\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_permitted\",\"type\":\"address\"}],\"name\":\"addNewPermittedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistred\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permitted\",\"type\":\"address\"}],\"name\":\"removePermittedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"setTokenTypeAsOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"addNewTokenType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPermittedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"getType\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokensTypeStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://bb17eecc529f536f4eae6d15e63a373ec00d00191b7a1131489c03f2d1813912"}]}