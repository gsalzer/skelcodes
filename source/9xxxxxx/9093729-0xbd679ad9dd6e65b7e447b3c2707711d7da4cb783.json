{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/rbac/Roles.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/rbac/RBAC.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Whitelist.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/v2/interfaces/IKODAV2SelfServiceEditionCuration.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IKODAV2SelfServiceEditionCuration {\r\n\r\n  function createActiveEdition(\r\n    uint256 _editionNumber,\r\n    bytes32 _editionData,\r\n    uint256 _editionType,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    address _artistAccount,\r\n    uint256 _artistCommission,\r\n    uint256 _priceInWei,\r\n    string _tokenUri,\r\n    uint256 _totalAvailable\r\n  ) external returns (bool);\r\n\r\n  function artistsEditions(address _artistsAccount) external returns (uint256[1] _editionNumbers);\r\n\r\n  function totalAvailableEdition(uint256 _editionNumber) external returns (uint256);\r\n\r\n  function highestEditionNumber() external returns (uint256);\r\n\r\n  function updateOptionalCommission(uint256 _editionNumber, uint256 _rate, address _recipient) external;\r\n\r\n  function updateStartDate(uint256 _editionNumber, uint256 _startDate) external;\r\n\r\n  function updateEndDate(uint256 _editionNumber, uint256 _endDate) external;\r\n\r\n  function updateEditionType(uint256 _editionNumber, uint256 _editionType) external;\r\n}\r\n\r\n// File: contracts/v2/interfaces/IKODAAuction.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IKODAAuction {\r\n  function setArtistsControlAddressAndEnabledEdition(uint256 _editionNumber, address _address) external;\r\n}\r\n\r\n// File: contracts/v2/interfaces/ISelfServiceAccessControls.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface ISelfServiceAccessControls {\r\n\r\n  function isEnabledForAccount(address account) public view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/v2/interfaces/ISelfServiceFrequencyControls.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface ISelfServiceFrequencyControls {\r\n\r\n  /*\r\n   * Checks is the given artist can create another edition\r\n   * @param artist - the edition artist\r\n   * @param totalAvailable - the edition size\r\n   * @param priceInWei - the edition price in wei\r\n   */\r\n  function canCreateNewEdition(address artist) external view returns (bool);\r\n\r\n  /*\r\n   * Records that an edition has been created\r\n   * @param artist - the edition artist\r\n   * @param totalAvailable - the edition size\r\n   * @param priceInWei - the edition price in wei\r\n   */\r\n  function recordSuccessfulMint(address artist, uint256 totalAvailable, uint256 priceInWei) external returns (bool);\r\n}\r\n\r\n// File: contracts/v2/self-service/SelfServiceEditionCurationV4.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// One invocation per time-period\r\ncontract SelfServiceEditionCurationV4 is Whitelist, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  event SelfServiceEditionCreated(\r\n    uint256 indexed _editionNumber,\r\n    address indexed _creator,\r\n    uint256 _priceInWei,\r\n    uint256 _totalAvailable,\r\n    bool _enableAuction\r\n  );\r\n\r\n  // Calling address\r\n  IKODAV2SelfServiceEditionCuration public kodaV2;\r\n  IKODAAuction public auction;\r\n  ISelfServiceAccessControls public accessControls;\r\n  ISelfServiceFrequencyControls public frequencyControls;\r\n\r\n  // Default KO commission\r\n  uint256 public koCommission = 15;\r\n\r\n  // Config which enforces editions to not be over this size\r\n  uint256 public maxEditionSize = 100;\r\n\r\n  // Config the minimum price per edition\r\n  uint256 public minPricePerEdition = 0.01 ether;\r\n\r\n  /**\r\n   * @dev Construct a new instance of the contract\r\n   */\r\n  constructor(\r\n    IKODAV2SelfServiceEditionCuration _kodaV2,\r\n    IKODAAuction _auction,\r\n    ISelfServiceAccessControls _accessControls,\r\n    ISelfServiceFrequencyControls _frequencyControls\r\n  ) public {\r\n    super.addAddressToWhitelist(msg.sender);\r\n    kodaV2 = _kodaV2;\r\n    auction = _auction;\r\n    accessControls = _accessControls;\r\n    frequencyControls = _frequencyControls;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by artists, create new edition on the KODA platform\r\n   */\r\n  function createEdition(\r\n    bool _enableAuction,\r\n    address _optionalSplitAddress,\r\n    uint256 _optionalSplitRate,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    uint256 _artistCommission,\r\n    uint256 _editionType,\r\n    string _tokenUri\r\n  )\r\n  public\r\n  whenNotPaused\r\n  returns (uint256 _editionNumber)\r\n  {\r\n    require(frequencyControls.canCreateNewEdition(msg.sender), 'Sender currently frozen out of creation');\r\n    require(_artistCommission.add(_optionalSplitRate).add(koCommission) <= 100, \"Total commission exceeds 100\");\r\n\r\n    uint256 editionNumber = _createEdition(\r\n      msg.sender,\r\n      _enableAuction,\r\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\r\n      _tokenUri\r\n    );\r\n\r\n    if (_optionalSplitRate > 0 && _optionalSplitAddress != address(0)) {\r\n      kodaV2.updateOptionalCommission(editionNumber, _optionalSplitRate, _optionalSplitAddress);\r\n    }\r\n\r\n    frequencyControls.recordSuccessfulMint(msg.sender, _totalAvailable, _priceInWei);\r\n\r\n    return editionNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by artists, create new edition on the KODA platform, single commission split between artists and KO only\r\n   */\r\n  function createEditionSimple(\r\n    bool _enableAuction,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    uint256 _artistCommission,\r\n    uint256 _editionType,\r\n    string _tokenUri\r\n  )\r\n  public\r\n  whenNotPaused\r\n  returns (uint256 _editionNumber)\r\n  {\r\n    require(frequencyControls.canCreateNewEdition(msg.sender), 'Sender currently frozen out of creation');\r\n    require(_artistCommission.add(koCommission) <= 100, \"Total commission exceeds 100\");\r\n\r\n    uint256 editionNumber = _createEdition(\r\n      msg.sender,\r\n      _enableAuction,\r\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\r\n      _tokenUri\r\n    );\r\n\r\n    frequencyControls.recordSuccessfulMint(msg.sender, _totalAvailable, _priceInWei);\r\n\r\n    return editionNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev Caller by owner, can create editions for other artists\r\n   * @dev Only callable from owner regardless of pause state\r\n   */\r\n  function createEditionFor(\r\n    address _artist,\r\n    bool _enableAuction,\r\n    address _optionalSplitAddress,\r\n    uint256 _optionalSplitRate,\r\n    uint256 _totalAvailable,\r\n    uint256 _priceInWei,\r\n    uint256 _startDate,\r\n    uint256 _endDate,\r\n    uint256 _artistCommission,\r\n    uint256 _editionType,\r\n    string _tokenUri\r\n  )\r\n  public\r\n  onlyIfWhitelisted(msg.sender)\r\n  returns (uint256 _editionNumber)\r\n  {\r\n    require(_artistCommission.add(_optionalSplitRate).add(koCommission) <= 100, \"Total commission exceeds 100\");\r\n\r\n    uint256 editionNumber = _createEdition(\r\n      _artist,\r\n      _enableAuction,\r\n      [_totalAvailable, _priceInWei, _startDate, _endDate, _artistCommission, _editionType],\r\n      _tokenUri\r\n    );\r\n\r\n    if (_optionalSplitRate > 0 && _optionalSplitAddress != address(0)) {\r\n      kodaV2.updateOptionalCommission(editionNumber, _optionalSplitRate, _optionalSplitAddress);\r\n    }\r\n\r\n    frequencyControls.recordSuccessfulMint(_artist, _totalAvailable, _priceInWei);\r\n\r\n    return editionNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for edition creation\r\n   */\r\n  function _createEdition(\r\n    address _artist,\r\n    bool _enableAuction,\r\n    uint256[6] memory _params,\r\n    string _tokenUri\r\n  )\r\n  internal\r\n  returns (uint256 _editionNumber) {\r\n\r\n    uint256 _totalAvailable = _params[0];\r\n    uint256 _priceInWei = _params[1];\r\n\r\n    // Enforce edition size\r\n    require(msg.sender == owner || (_totalAvailable > 0 && _totalAvailable <= maxEditionSize), \"Invalid edition size\");\r\n\r\n    // Enforce min price\r\n    require(msg.sender == owner || _priceInWei >= minPricePerEdition, \"Invalid price\");\r\n\r\n    // If we are the owner, skip this artists check\r\n    require(msg.sender == owner || accessControls.isEnabledForAccount(_artist), \"Not allowed to create edition\");\r\n\r\n    // Find the next edition number we can use\r\n    uint256 editionNumber = getNextAvailableEditionNumber();\r\n\r\n    require(\r\n      kodaV2.createActiveEdition(\r\n        editionNumber,\r\n        0x0, // _editionData - no edition data\r\n        _params[5], //_editionType,\r\n        _params[2], // _startDate,\r\n        _params[3], //_endDate,\r\n        _artist,\r\n        _params[4], // _artistCommission - defaults to artistCommission if optional commission split missing\r\n        _priceInWei,\r\n        _tokenUri,\r\n        _totalAvailable\r\n      ),\r\n      \"Failed to create new edition\"\r\n    );\r\n\r\n    // Enable the auction if desired\r\n    if (_enableAuction) {\r\n      auction.setArtistsControlAddressAndEnabledEdition(editionNumber, _artist);\r\n    }\r\n\r\n    // Trigger event\r\n    emit SelfServiceEditionCreated(editionNumber, _artist, _priceInWei, _totalAvailable, _enableAuction);\r\n\r\n    return editionNumber;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for dynamically generating the next KODA edition number\r\n   */\r\n  function getNextAvailableEditionNumber() internal returns (uint256 editionNumber) {\r\n\r\n    // Get current highest edition and total in the edition\r\n    uint256 highestEditionNumber = kodaV2.highestEditionNumber();\r\n    uint256 totalAvailableEdition = kodaV2.totalAvailableEdition(highestEditionNumber);\r\n\r\n    // Add the current highest plus its total, plus 1 as tokens start at 1 not zero\r\n    uint256 nextAvailableEditionNumber = highestEditionNumber.add(totalAvailableEdition).add(1);\r\n\r\n    // Round up to next 100, 1000 etc based on max allowed size\r\n    return ((nextAvailableEditionNumber + maxEditionSize - 1) / maxEditionSize) * maxEditionSize;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setKodavV2(IKODAV2SelfServiceEditionCuration _kodaV2) onlyIfWhitelisted(msg.sender) public {\r\n    kodaV2 = _kodaV2;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA auction\r\n   * @dev Only callable from owner\r\n   */\r\n  function setAuction(IKODAAuction _auction) onlyIfWhitelisted(msg.sender) public {\r\n    auction = _auction;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the default KO commission for each edition\r\n   * @dev Only callable from owner\r\n   */\r\n  function setKoCommission(uint256 _koCommission) onlyIfWhitelisted(msg.sender) public {\r\n    koCommission = _koCommission;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the max edition size\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMaxEditionSize(uint256 _maxEditionSize) onlyIfWhitelisted(msg.sender) public {\r\n    maxEditionSize = _maxEditionSize;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets minimum price per edition\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMinPricePerEdition(uint256 _minPricePerEdition) onlyIfWhitelisted(msg.sender) public {\r\n    minPricePerEdition = _minPricePerEdition;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account is currently frozen out\r\n   */\r\n  function isFrozen(address account) public view returns (bool) {\r\n    return frequencyControls.canCreateNewEdition(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function isEnabledForAccount(address account) public view returns (bool) {\r\n    return accessControls.isEnabledForAccount(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks to see if the account can create editions\r\n   */\r\n  function canCreateAnotherEdition(address account) public view returns (bool) {\r\n    if (!accessControls.isEnabledForAccount(account)) {\r\n      return false;\r\n    }\r\n    return frequencyControls.canCreateNewEdition(account);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for the ability to extract stuck ether\r\n   * @dev Only callable from owner\r\n   */\r\n  function withdrawStuckEther(address _withdrawalAccount) onlyIfWhitelisted(msg.sender) public {\r\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\r\n    _withdrawalAccount.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalAccount\",\"type\":\"address\"}],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnabledForAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enableAuction\",\"type\":\"bool\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"createEditionSimple\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_koCommission\",\"type\":\"uint256\"}],\"name\":\"setKoCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPricePerEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"koCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxEditionSize\",\"type\":\"uint256\"}],\"name\":\"setMaxEditionSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kodaV2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEditionSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frequencyControls\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enableAuction\",\"type\":\"bool\"},{\"name\":\"_optionalSplitAddress\",\"type\":\"address\"},{\"name\":\"_optionalSplitRate\",\"type\":\"uint256\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"createEdition\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canCreateAnotherEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPricePerEdition\",\"type\":\"uint256\"}],\"name\":\"setMinPricePerEdition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kodaV2\",\"type\":\"address\"}],\"name\":\"setKodavV2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_artist\",\"type\":\"address\"},{\"name\":\"_enableAuction\",\"type\":\"bool\"},{\"name\":\"_optionalSplitAddress\",\"type\":\"address\"},{\"name\":\"_optionalSplitRate\",\"type\":\"uint256\"},{\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint256\"},{\"name\":\"_endDate\",\"type\":\"uint256\"},{\"name\":\"_artistCommission\",\"type\":\"uint256\"},{\"name\":\"_editionType\",\"type\":\"uint256\"},{\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"createEditionFor\",\"outputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kodaV2\",\"type\":\"address\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_accessControls\",\"type\":\"address\"},{\"name\":\"_frequencyControls\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_enableAuction\",\"type\":\"bool\"}],\"name\":\"SelfServiceEditionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SelfServiceEditionCurationV4","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d000000000000000000000000848b0ea643e5a352d78e2c0c12a2dd8c96fec639000000000000000000000000ec133df5d806a9069aee513b8be01eeee2f03ff0000000000000000000000000971d5a272b671c7936d03b66ab89da76c0f8dc38","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://3e913125f3be0cc8e674f20a38ffb4cfe39ee0dff4d44636591e57f149761d9b"}]}