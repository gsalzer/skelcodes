{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Project Society Construction and Terraforming Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka)\r\n *\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Core Blockchain Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka) by\r\n * [Basic Agreement](ipfs/QmaCiXUmSrP16Gz8Jdzq6AJESY1EAANmmwha15uR3c1bsS)).\r\n * \r\n * üåé Galt Project is an international decentralized land and real estate property registry\r\n * governed by DAO (Decentralized autonomous organization) and self-governance platform for communities\r\n * of homeowners on Ethereum.\r\n * \r\n * üè° https://galtproject.io\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\ncontract IPPDepositHolder {\r\n  event Deposit(address indexed tokenContract, uint256 indexed tokenId, uint256 amount);\r\n  event Withdrawal(address indexed tokenContract, uint256 indexed tokenId, uint256 total);\r\n  event Payout(address indexed tokenContract, uint256 indexed tokenId, uint256 amount, address to);\r\n\r\n  function deposit(address _tokenContract, uint256 _tokenId, uint256 _amount) external;\r\n  function withdraw(address _tokenContract, uint256 _tokenId) external;\r\n  function payout(address _tokenContract, uint256 _tokenId, address _to) external;\r\n  function balanceOf(address _tokenContract, uint256 _tokenId) external view returns (uint256);\r\n  function isInsufficient(address _tokenContract, uint256 _tokenId, uint256 _minimalDeposit)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\nlibrary MathUtils {\r\n  int256 constant public longer_fixed_log_e_1_5 = 405465108108164381978013115464349137;\r\n  int256 constant public longer_fixed_1 = 1000000000000000000000000000000000000;\r\n  int256 constant public longer_fixed_log_e_10 = 2302585092994045684017991454684364208;\r\n\r\n  int256 constant fixed_1 = 1000000000000000000;\r\n  int256 constant fixed_e = 2718281828459045400;\r\n\r\n  int256 constant ln_2 = 693147180559945300;\r\n  int256 constant ln_10 = 2302585092994046000;\r\n\r\n  uint256 constant e = 2718281828459045000;\r\n\r\n  function INT256_MIN() internal pure returns (int256) {\r\n    return int256((uint256(1) << 255));\r\n  }\r\n\r\n  function INT256_MAX() internal pure returns (int256) {\r\n    return int256(~((uint256(1) << 255)));\r\n  }\r\n\r\n  function UINT256_MIN() internal pure returns (uint256) {\r\n    return 0;\r\n  }\r\n\r\n  function UINT256_MAX() internal pure returns (uint256) {\r\n    return ~uint256(0);\r\n  }\r\n\r\n  function EPS() internal pure returns (int256) {\r\n    return 1000000000;\r\n  }\r\n\r\n  function abs(int number) internal pure returns (int) {\r\n    return number > 0 ? number : number * (- 1);\r\n  }\r\n\r\n  function between(int a, int b, int c) internal pure returns (bool) {\r\n    return (a - EPS() <= b) && (b <= c + EPS());\r\n  }\r\n\r\n  function minInt(int a, int b) internal pure returns (int) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function maxInt(int a, int b) internal pure returns (int) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  /**\r\n  * Limitations:\r\n  * - positive values\r\n  **/\r\n  function sqrt(int x) internal pure returns (int y) {\r\n    int z = (x + 1) / 2;\r\n    y = x;\r\n    while (abs(z) < abs(y)) {\r\n      y = z;\r\n      z = (x / z + z) / 2;\r\n    }\r\n    y *= 10 ** 9;\r\n  }\r\n\r\n  function floorInt(int x) internal pure returns (int) {\r\n    return (x / 1 ether) * 1 ether;\r\n  }\r\n\r\n  function toFixedInt(int x, int precision) internal pure returns (int) {\r\n    if (precision == 18) {\r\n      return x;\r\n    }\r\n    return (x / int(10 ** uint(18 - precision))) * int(10 ** uint(18 - precision));\r\n  }\r\n\r\n  /**\r\n  * Limitations:\r\n  * - positive values\r\n  **/\r\n  function logE(int256 x) internal pure returns (int256) {\r\n    if (x > 1.999 ether) {\r\n      int256 newX = x;\r\n      int256 power = 0;\r\n      while (newX > 1.999 ether) {\r\n        newX /= 10;\r\n        power += 1;\r\n      }\r\n      return logOfAroundOne(newX) + power * ln_10;\r\n    } else {\r\n      return logOfAroundOne(x);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Limitations:\r\n  * - positive values\r\n  * - no more than 1.999(9) ether\r\n  **/\r\n  function logOfAroundOne(int256 x) internal pure returns (int256) {\r\n    int256 r = 0;\r\n    int256 v = x;\r\n    while (v <= fixed_1 / 10) {\r\n      v = v * 10;\r\n      r -= longer_fixed_log_e_10;\r\n    }\r\n    while (v >= 10 * fixed_1) {\r\n      v = v / 10;\r\n      r += longer_fixed_log_e_10;\r\n    }\r\n    while (v < fixed_1) {\r\n      v = v * fixed_e;\r\n      r -= longer_fixed_1;\r\n    }\r\n    while (v > fixed_e) {\r\n      v = v / fixed_e;\r\n      r += longer_fixed_1;\r\n    }\r\n    if (v == fixed_1) {\r\n      return round_off(r) / fixed_1;\r\n    }\r\n    if (v == fixed_e) {\r\n      return fixed_1 + round_off(r) / fixed_1;\r\n    }\r\n    v *= fixed_1;\r\n    v = v - 3 * longer_fixed_1 / 2;\r\n    r = r + longer_fixed_log_e_1_5;\r\n    int256 m = longer_fixed_1 * v / (v + 3 * longer_fixed_1);\r\n    r = r + 2 * m;\r\n    int256 m_2 = m * m / longer_fixed_1;\r\n    int256 i = 3;\r\n    while (true) {\r\n      m = m * m_2 / longer_fixed_1;\r\n      r = r + 2 * m / i;\r\n      i += 2;\r\n      if (i >= 3 + 2 * 18)\r\n        break;\r\n    }\r\n    return round_off(r) / fixed_1;\r\n  }\r\n\r\n  function logAny(int256 v, int256 base) internal pure returns (int256) {\r\n    return (logE(v) * 1 ether) / logE(base);\r\n  }\r\n\r\n  // https://solidity.readthedocs.io/en/v0.5.3/assembly.html\r\n  /**\r\n  * Limitations:\r\n  * - positive values\r\n  **/\r\n  function log2(int256 v) internal pure returns (int256) {\r\n    return (logE(v) * 1 ether) / ln_2;\r\n  }\r\n\r\n  /**\r\n  * Limitations:\r\n  * - positive values\r\n  **/\r\n  function log10(int256 v) internal pure returns (int256) {\r\n    return (logE(v) * 1 ether) / ln_10;\r\n  }\r\n\r\n  function round_off(int256 x) public pure returns (int256) {\r\n    int8 sign = 1;\r\n    int v = x;\r\n    if (v < 0) {\r\n      sign = - 1;\r\n      v = - v;\r\n    }\r\n    if (v % fixed_1 >= fixed_1 / 2)\r\n      v = v + fixed_1 - v % fixed_1;\r\n    return v * sign;\r\n  }\r\n\r\n  /**\r\n  * Limitations: positive values\r\n  **/\r\n  function exp(int x) internal pure returns (int) {\r\n    int sum = 1 ether;\r\n    sum = 1 ether + x * sum / 14 ether;\r\n    sum = 1 ether + x * sum / 13 ether;\r\n    sum = 1 ether + x * sum / 12 ether;\r\n    sum = 1 ether + x * sum / 11 ether;\r\n    sum = 1 ether + x * sum / 10 ether;\r\n    sum = 1 ether + x * sum / 9 ether;\r\n    sum = 1 ether + x * sum / 8 ether;\r\n    sum = 1 ether + x * sum / 7 ether;\r\n    sum = 1 ether + x * sum / 6 ether;\r\n    sum = 1 ether + x * sum / 5 ether;\r\n    sum = 1 ether + x * sum / 4 ether;\r\n    sum = 1 ether + x * sum / 3 ether;\r\n    sum = 1 ether + x * sum / 2 ether;\r\n    sum = 1 ether + x * sum / 1 ether;\r\n\r\n    return sum;\r\n  }\r\n}\r\n\r\nlibrary PointUtils {\r\n\r\n  int256 internal constant EPS = 1000000000;\r\n\r\n  function comparePoints(int[2] memory a, int[2] memory b) internal pure returns (int8) {\r\n    if (a[0] - b[0] > EPS || (MathUtils.abs(a[0] - b[0]) < EPS && a[1] - b[1] > EPS)) {\r\n      return 1;\r\n    } else if (b[0] - a[0] > EPS || (MathUtils.abs(a[0] - b[0]) < EPS && b[1] - a[1] > EPS)) {\r\n      return - 1;\r\n    } else if (MathUtils.abs(a[0] - b[0]) < EPS && MathUtils.abs(a[1] - b[1]) < EPS) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function isEqual(int[2] memory a, int[2] memory b) internal pure returns (bool) {\r\n    return a[0] == b[0] && a[1] == b[1];\r\n  }\r\n\r\n  function isEqualEPS(int[2] memory a, int[2] memory b) internal pure returns (bool) {\r\n    return MathUtils.abs(a[0] - b[0]) < EPS && MathUtils.abs(a[1] - b[1]) < EPS;\r\n  }\r\n}\r\n\r\nlibrary VectorUtils {\r\n  function onSegment(int[2] memory a, int[2] memory b, int[2] memory c) internal pure returns (bool) {\r\n    /* solium-disable-next-line */\r\n    return (MathUtils.minInt(a[0], b[0]) <= c[0]) && (c[0] <= MathUtils.maxInt(a[0], b[0])) &&\r\n    /* solium-disable-next-line */\r\n    (MathUtils.minInt(a[1], b[1]) <= c[1]) && (c[1] <= MathUtils.maxInt(a[1], b[1]));\r\n  }\r\n\r\n  function direction(int[2] memory a, int[2] memory b, int[2] memory c) internal pure returns (int256) {\r\n    return (c[0] - a[0]) * (b[1] - a[1]) - (b[0] - a[0]) * (c[1] - a[1]);\r\n  }\r\n}\r\n\r\nlibrary SegmentUtils {\r\n\r\n  int256 internal constant EPS = 1000000000;\r\n  int256 internal constant POS_EPS = 10000000000000000000000;\r\n\r\n  enum Position {\r\n    BEFORE,\r\n    AFTER\r\n  }\r\n\r\n  struct Sweepline {\r\n    int256 x;\r\n    Position position;\r\n  }\r\n\r\n  function segmentsIntersect(int[2][2] memory a, int[2][2] memory b) internal pure returns (bool) {\r\n    int256 d1 = VectorUtils.direction(b[0], b[1], a[0]);\r\n    int256 d2 = VectorUtils.direction(b[0], b[1], a[1]);\r\n    int256 d3 = VectorUtils.direction(a[0], a[1], b[0]);\r\n    int256 d4 = VectorUtils.direction(a[0], a[1], b[1]);\r\n\r\n    if (((d1 > 0 && d2 < 0) || (d1 < 0 && d2 > 0)) && ((d3 > 0 && d4 < 0) || (d3 < 0 && d4 > 0))) {\r\n      return true;\r\n    } else if (d1 == 0 && VectorUtils.onSegment(b[0], b[1], a[0])) {\r\n      return true;\r\n    } else if (d2 == 0 && VectorUtils.onSegment(b[0], b[1], a[1])) {\r\n      return true;\r\n    } else if (d3 == 0 && VectorUtils.onSegment(a[0], a[1], b[0])) {\r\n      return true;\r\n    } else if (d4 == 0 && VectorUtils.onSegment(a[0], a[1], b[1])) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function findSegmentsIntersection(int[2][2] memory a, int[2][2] memory b) internal pure returns (int256[2] memory) {\r\n    int xDivide = ((a[0][0] - a[1][0]) * (b[0][1] - b[1][1]) - (a[0][1] - a[1][1]) * (b[0][0] - b[1][0]));\r\n    if (xDivide == 0) {\r\n      return int256[2]([int256(0), 0]);\r\n    }\r\n\r\n    int x = ((a[0][0] * a[1][1] - a[0][1] * a[1][0]) * (b[0][0] - b[1][0]) - (a[0][0] - a[1][0]) * (b[0][0] * b[1][1] - b[0][1] * b[1][0])) /\r\n    xDivide;\r\n\r\n    int yDivide = ((a[0][0] - a[1][0]) * (b[0][1] - b[1][1]) - (a[0][1] - a[1][1]) * (b[0][0] - b[1][0]));\r\n    if (yDivide == 0) {\r\n      return int256[2]([int256(0), 0]);\r\n    }\r\n\r\n    int y = ((a[0][0] * a[1][1] - a[0][1] * a[1][0]) * (b[0][1] - b[1][1]) - (a[0][1] - a[1][1]) * (b[0][0] * b[1][1] - b[0][1] * b[1][0])) /\r\n    yDivide;\r\n\r\n    if (a[0][0] >= a[1][0]) {\r\n      if (!MathUtils.between(a[1][0], x, a[0][0])) {return int256[2]([int256(0), 0]);}\r\n    } else {\r\n      if (!MathUtils.between(a[0][0], x, a[1][0])) {return int256[2]([int256(0), 0]);}\r\n    }\r\n    if (a[0][1] >= a[1][1]) {\r\n      if (!MathUtils.between(a[1][1], y, a[0][1])) {return int256[2]([int256(0), 0]);}\r\n    } else {\r\n      if (!MathUtils.between(a[0][1], y, a[1][1])) {return int256[2]([int256(0), 0]);}\r\n    }\r\n    if (b[0][0] >= b[1][0]) {\r\n      if (!MathUtils.between(b[1][0], x, b[0][0])) {return int256[2]([int256(0), 0]);}\r\n    } else {\r\n      if (!MathUtils.between(b[0][0], x, b[1][0])) {return int256[2]([int256(0), 0]);}\r\n    }\r\n    if (b[0][1] >= b[1][1]) {\r\n      if (!MathUtils.between(b[1][1], y, b[0][1])) {return int256[2]([int256(0), 0]);}\r\n    } else {\r\n      if (!MathUtils.between(b[0][1], y, b[1][1])) {return int256[2]([int256(0), 0]);}\r\n    }\r\n    return [x, y];\r\n  }\r\n\r\n  function isEqual(int[2][2] memory a, int[2][2] memory b) internal pure returns (bool) {\r\n    return b[0][0] == a[0][0] && b[0][1] != a[0][1] && b[1][0] == a[1][0] && b[1][1] != a[1][1];\r\n  }\r\n\r\n  function compareSegments(Sweepline storage sweepline, int[2][2] memory a, int[2][2] memory b) internal view returns (int8) {\r\n    if (isEqual(a, b)) {\r\n      return int8(0);\r\n    }\r\n\r\n    int deltaY = getY(a, sweepline.x) - getY(b, sweepline.x);\r\n\r\n    if (MathUtils.abs(deltaY) > EPS) {\r\n      return deltaY < 0 ? int8(- 1) : int8(1);\r\n    } else {\r\n      int aSlope = getSlope(a);\r\n      int bSlope = getSlope(b);\r\n\r\n      if (aSlope != bSlope) {\r\n        if (sweepline.position == Position.BEFORE) {\r\n          return aSlope > bSlope ? int8(- 1) : int8(1);\r\n        } else {\r\n          return aSlope > bSlope ? int8(1) : int8(- 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (a[0][0] - b[0][0] != 0) {\r\n      return a[0][0] - b[0][0] < 0 ? int8(- 1) : int8(1);\r\n    }\r\n\r\n    if (a[1][0] - b[1][0] != 0) {\r\n      return a[1][0] - b[1][0] < 0 ? int8(- 1) : int8(1);\r\n    }\r\n\r\n    return int8(0);\r\n  }\r\n\r\n  function getSlope(int[2][2] memory segment) internal pure returns (int) {\r\n    if (segment[0][0] == segment[1][0]) {\r\n      return (segment[0][1] < segment[1][1]) ? MathUtils.INT256_MAX() : MathUtils.INT256_MIN();\r\n    } else {\r\n      return (segment[1][1] - segment[0][1]) / (segment[1][0] - segment[0][0]);\r\n    }\r\n  }\r\n\r\n  function getY(int[2][2] memory segment, int x) internal pure returns (int) {\r\n    if (x <= segment[0][0]) {\r\n      return segment[0][1];\r\n    } else if (x >= segment[1][0]) {\r\n      return segment[1][1];\r\n    }\r\n\r\n    if ((x - segment[0][0]) > (segment[1][0] - x)) {\r\n      int ifac = 1 ether * (x - segment[0][0]) / (segment[1][0] - segment[0][0]);\r\n      return ((segment[0][1] * (1 ether - ifac)) / 1 ether) + ((segment[1][1] * ifac) / 1 ether);\r\n    } else {\r\n      int fac = 1 ether * (segment[1][0] - x) / (segment[1][0] - segment[0][0]);\r\n      return ((segment[0][1] * fac) / 1 ether) + ((segment[1][1] * (1 ether - fac)) / 1 ether);\r\n    }\r\n  }\r\n\r\n  function cmp(int x, int y) internal pure returns (int) {\r\n    if (x == y) {\r\n      return 0;\r\n    }\r\n    if (x < y) {\r\n      return - 1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  function pointOnSegment(int[2] memory point, int[2] memory sp1, int[2] memory sp2) internal pure returns (bool) {\r\n    // compare versus epsilon for floating point values, or != 0 if using integers\r\n    if (MathUtils.abs((point[1] - sp1[1]) * (sp2[0] - sp1[0]) - (point[0] - sp1[0]) * (sp2[1] - sp1[1])) > POS_EPS) {\r\n      return false;\r\n    }\r\n\r\n    int dotproduct = (point[0] - sp1[0]) * (sp2[0] - sp1[0]) + (point[1] - sp1[1]) * (sp2[1] - sp1[1]);\r\n    if (dotproduct < 0) {\r\n      return false;\r\n    }\r\n\r\n    int squaredlengthba = (sp2[0] - sp1[0]) * (sp2[0] - sp1[0]) + (sp2[1] - sp1[1]) * (sp2[1] - sp1[1]);\r\n    if (dotproduct > squaredlengthba) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nlibrary GeohashUtils {\r\n  uint256 constant C1_GEOHASH = 31;\r\n  uint256 constant C2_GEOHASH = 1023;\r\n  uint256 constant C3_GEOHASH = 32767;\r\n  uint256 constant C4_GEOHASH = 1048575;\r\n  uint256 constant C5_GEOHASH = 33554431;\r\n  uint256 constant C6_GEOHASH = 1073741823;\r\n  uint256 constant C7_GEOHASH = 34359738367;\r\n  uint256 constant C8_GEOHASH = 1099511627775;\r\n  uint256 constant C9_GEOHASH = 35184372088831;\r\n  uint256 constant C10_GEOHASH = 1125899906842623;\r\n  uint256 constant C11_GEOHASH = 36028797018963967;\r\n  uint256 constant C12_GEOHASH = 1152921504606846975;\r\n\r\n  // bytes32(\"0123456789bcdefghjkmnpqrstuvwxyz\")\r\n  bytes32 constant GEOHASH5_MASK = 0x30313233343536373839626364656667686a6b6d6e707172737475767778797a;\r\n\r\n  uint256 constant Z_RESERVED_MASK = uint256(0x0000000000000000000000000000000ffffffffffffffffffffffffffffffff);\r\n  uint256 constant Z_HEIGHT_MASK =   uint256(0x0000000000000000000000000000000ffffffff000000000000000000000000);\r\n  uint256 constant Z_INT32_MASK =    uint256(0xfffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000);\r\n  uint256 constant Z_GEOHASH5_MASK = uint256(0x000000000000000000000000000000000000000ffffffffffffffffffffffff);\r\n\r\n  // -2_147_483_648\r\n  int256 constant Z_MIN = int256(-2147483648);\r\n  // 2_147_483_647\r\n  int256 constant Z_MAX = int256(2147483647);\r\n\r\n  function geohash5Precision(uint256 _geohash5) internal pure returns (uint8) {\r\n    if (_geohash5 == 0) {\r\n      return 0;\r\n    } else if (_geohash5 <= C1_GEOHASH) {\r\n      return 1;\r\n    } else if (_geohash5 <= C2_GEOHASH) {\r\n      return 2;\r\n    } else if (_geohash5 <= C3_GEOHASH) {\r\n      return 3;\r\n    } else if (_geohash5 <= C4_GEOHASH) {\r\n      return 4;\r\n    } else if (_geohash5 <= C5_GEOHASH) {\r\n      return 5;\r\n    } else if (_geohash5 <= C6_GEOHASH) {\r\n      return 6;\r\n    } else if (_geohash5 <= C7_GEOHASH) {\r\n      return 7;\r\n    } else if (_geohash5 <= C8_GEOHASH) {\r\n      return 8;\r\n    } else if (_geohash5 <= C9_GEOHASH) {\r\n      return 9;\r\n    } else if (_geohash5 <= C10_GEOHASH) {\r\n      return 10;\r\n    } else if (_geohash5 <= C11_GEOHASH) {\r\n      return 11;\r\n    } else if (_geohash5 <= C12_GEOHASH) {\r\n      return 12;\r\n    } else {\r\n      revert(\"Invalid geohash5\");\r\n    }\r\n  }\r\n\r\n  function geohash5ToGeohashString(uint256 _input) pure internal returns (bytes32) {\r\n    if (_input > C12_GEOHASH) {\r\n      revert(\"Number exceeds the limit\");\r\n    }\r\n\r\n    uint256 num = _input;\r\n    bytes32 output;\r\n    bytes32 fiveOn = bytes32(uint256(31));\r\n    uint8 counter = 0;\r\n\r\n    while (num != 0) {\r\n      output = output >> 8;\r\n      uint256 d = uint256(bytes32(num) & fiveOn);\r\n      output = output ^ (bytes1(GEOHASH5_MASK[d]));\r\n      num = num >> 5;\r\n      counter++;\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  function geohash5ToGeohash5z(int256 _height, uint256 _geohash5) pure internal returns (uint256) {\r\n    requireHeightValid(_height);\r\n    uint256 shiftedHeight = uint256(_height) << 96;\r\n\r\n    return (_geohash5 | shiftedHeight) & Z_RESERVED_MASK;\r\n  }\r\n\r\n  function geohash5ToGeohash5zBytes32(int256 _height, uint256 _geohash5) pure internal returns (bytes32) {\r\n    return bytes32(geohash5ToGeohash5z(_height, _geohash5));\r\n  }\r\n\r\n  function geohash5zToHeightAndGeohash5(uint256 _geohash5z) pure internal returns (int256 height, uint256 geohash5) {\r\n    height = int32((_geohash5z & Z_HEIGHT_MASK) >> 96);\r\n    geohash5 = _geohash5z & Z_GEOHASH5_MASK;\r\n  }\r\n\r\n  function geohash5zToGeohash5(uint256 _geohash5z) pure internal returns (uint256) {\r\n    return _geohash5z & Z_GEOHASH5_MASK;\r\n  }\r\n\r\n  function geohash5zToHeight(uint256 _geohash5z) pure internal returns (int256) {\r\n    return int32((_geohash5z & Z_HEIGHT_MASK) >> 96);\r\n  }\r\n\r\n  function geohash5zToHeightAndGeohash5Bytes32(\r\n    uint256 _geohash5z\r\n  )\r\n    pure\r\n    internal\r\n    returns (bytes32 height, bytes32 geohash5)\r\n  {\r\n    (int256 x, uint256 y) = geohash5zToHeightAndGeohash5(_geohash5z);\r\n    return (bytes32(x), bytes32(y));\r\n  }\r\n\r\n  function requireHeightValid(int256 _height) pure internal {\r\n    require(Z_MIN <= _height && _height <= Z_MAX, \"GeohashUtils: height overflow\");\r\n  }\r\n\r\n  function isHeightValid(int256 _height) pure internal returns (bool) {\r\n    return (Z_MIN <= _height && _height <= Z_MAX);\r\n  }\r\n\r\n  function maxGeohashNumber() internal pure returns (uint256) {\r\n    return C12_GEOHASH;\r\n  }\r\n}\r\n\r\nlibrary TrigonometryUtils {\r\n  int constant PI = 3141592653589793300;\r\n  int constant ONEQTR_PI = 785398163397448300;\r\n  int constant THRQTR_PI = 2356194490192345000;\r\n\r\n  function getSinOfRad(int256 x) internal pure returns (int256) {\r\n    int q;\r\n    int s = 0;\r\n    int N = 100;\r\n    int n;\r\n    q = x;\r\n    for (n = 1; n <= N; n++) {\r\n      s += q;\r\n\r\n      q *= ((- 1) * x * x) / ((2 * n) * (2 * n + 1) * 1 ether);\r\n      q /= 1 ether;\r\n      if (q == 0) {\r\n        return s;\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n\r\n  function getSinOfDegree(int256 degree) internal pure returns (int256) {\r\n    int q;\r\n    int s = 0;\r\n    int N = 100;\r\n    int n;\r\n\r\n    int x = degree * (PI / 180) / 1 ether;\r\n    q = x;\r\n\r\n    for (n = 1; n <= N; n++) {\r\n      s += q;\r\n\r\n      q *= ((- 1) * x * x) / ((2 * n) * (2 * n + 1) * 1 ether);\r\n      q /= 1 ether;\r\n      if (q == 0) {\r\n        return s;\r\n      }\r\n    }\r\n    return s;\r\n  }\r\n\r\n  function sin(int256 radians) internal pure returns (int256) {\r\n    return getSinOfRad(radians);\r\n  }\r\n\r\n  function cos(int256 radians) internal pure returns (int256) {\r\n    return getSinOfRad(radians + (PI / 2));\r\n  }\r\n\r\n  function tan(int256 radians) internal pure returns (int256) {\r\n    return (sin(radians) * 1 ether) / cos(radians);\r\n  }\r\n\r\n  function atan(int256 input) internal pure returns (int256) {\r\n    int sign = 1 ether;\r\n    int y = 0;\r\n    int x = input;\r\n    if (x == 0) {\r\n      return 0;\r\n    }\r\n    if (x > 0) {\r\n      x = div((x - 1 ether), (x + 1 ether));\r\n      y = mul(x, x);\r\n      x = mul((mul((mul((mul((mul((mul((mul((mul((mul(2866225700000000, y) - 16165736699999998), y) + 42909613800000000), y) - 75289640000000000), y) + 106562639300000000), y) - 142088994400000000), y) + 199935508500000000), y) - 333331452800000000), y) + 1 ether), x);\r\n      x = 785398163397000000 + mul(sign, x);\r\n    } else {\r\n      int a = 0;\r\n      // 1st term\r\n      int sum = 0;\r\n      int n = 50;\r\n\r\n      // special cases\r\n      if (x == 1)\r\n        return PI / 4;\r\n      if (x == - 1)\r\n        return - PI / 4;\r\n\r\n      if (n > 0) {\r\n        if ((x < - 1 ether) || (x > 1 ether)) {\r\n          // constant term\r\n          if (x > 1)\r\n            sum = PI / 2;\r\n          else\r\n            sum = - PI / 2;\r\n          // initial value of a\r\n          a = - (1 ether ** 2) / x;\r\n          for (int i = 1; i <= n; i++) {\r\n            sum += a;\r\n            a *= - 1 * ((2 * i - 1) * 1 ether ** 2) / ((2 * i + 1) * ((x * x) / 1 ether));\r\n            a /= 1 ether;\r\n            if (a == 0) {\r\n              break;\r\n            }\r\n            // next term from last\r\n          }\r\n        } else {// -1 < x < 1\r\n          // constant term\r\n          sum = 0;\r\n          // initial value of a\r\n          a = x;\r\n          for (int j = 1; j <= n; j++) {\r\n            sum += a;\r\n            a *= - 1 * (2 * j - 1) * ((x * x) / 1 ether) / (2 * j + 1);\r\n            a /= 1 ether;\r\n            if (a == 0) {\r\n              break;\r\n            }\r\n            // next term from last\r\n          }\r\n        }\r\n      }\r\n      return sum;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  function mul(int a, int b) internal pure returns(int) {\r\n    return (a * b) / 1 ether;\r\n  }\r\n\r\n  function div(int a, int b) internal pure returns(int) {\r\n    return (a * 1 ether) / b;\r\n  }\r\n\r\n  function atan2(int256 y, int256 x) internal pure returns (int256) {\r\n    int u = atan((y * 1 ether) / x);\r\n    if (x < 0) {// 2nd, 3rd quadrant\r\n      if (u > 0) // will go to 3rd quadrant\r\n        u -= PI;\r\n      else\r\n        u += PI;\r\n    }\r\n    return u;\r\n  }\r\n\r\n  /**\r\n  * Limitations:\r\n  * - no more than 0.999(9) eth\r\n  **/\r\n  function atanh(int256 x) internal pure returns (int256) {\r\n    return MathUtils.logE(((1 ether + x) * 1 ether) / (1 ether - x)) / 2;\r\n  }\r\n\r\n  function cosh(int256 radians) internal pure returns (int256) {\r\n    int256 y = MathUtils.exp(radians);\r\n    return (y + (1 ether * 1 ether) / y) / 2;\r\n  }\r\n\r\n  function sinh(int256 radians) internal pure returns (int256) {\r\n    int256 y = MathUtils.exp(radians);\r\n    return (y - (1 ether * 1 ether) / y) / 2;\r\n  }\r\n\r\n  function asinh(int256 x) internal pure returns (int256) {\r\n    return MathUtils.logE(x + MathUtils.sqrt((x * x) / 1 ether + 1 ether));\r\n  }\r\n\r\n  function degreeToRad(int256 degree) internal pure returns (int256) {\r\n    return degree * (PI / 180) / 1 ether;\r\n  }\r\n\r\n  function radToDegree(int256 radians) internal pure returns (int256) {\r\n    return radians * (180 / PI) * 1 ether;\r\n  }\r\n}\r\n\r\nlibrary LandUtils {\r\n\r\n  struct LatLonData {\r\n    mapping(uint256 => int256[2]) latLonByGeohash;\r\n    mapping(bytes32 => mapping(uint8 => uint256)) geohashByLatLonHash;\r\n\r\n    mapping(uint256 => int256[3]) utmByGeohash;\r\n    mapping(bytes32 => int256[3]) utmByLatLonHash;\r\n  }\r\n\r\n  function latLonIntervalToLatLon(\r\n    int256[2] memory latInterval,\r\n    int256[2] memory lonInterval\r\n  )\r\n    public\r\n    pure\r\n    returns (int256 lat, int256 lon)\r\n  {\r\n    lat = (latInterval[0] + latInterval[1]) / 2;\r\n    lon = (lonInterval[0] + lonInterval[1]) / 2;\r\n  }\r\n\r\n  function geohash5ToLatLonArr(uint256 _geohash5) public pure returns (int256[2] memory) {\r\n    (int256 lat, int256 lon) = geohash5ToLatLon(_geohash5);\r\n    return [lat, lon];\r\n  }\r\n\r\n  /**\r\n    Decode the geohash to its exact values, including the error\r\n    margins of the result.  Returns four float values: latitude,\r\n    longitude, the plus/minus error for latitude (as a positive\r\n    number) and the plus/minus error for longitude (as a positive\r\n    number).\r\n  **/\r\n  function geohash5ToLatLon(uint256 _geohash5) public pure returns (int256 lat, int256 lon) {\r\n    if (_geohash5 > GeohashUtils.maxGeohashNumber()) {\r\n      revert(\"Number exceeds the limit\");\r\n    }\r\n\r\n    int256[2] memory lat_interval = [int256(- 90 ether), int256(90 ether)];\r\n    int256[2] memory lon_interval = [int256(- 180 ether), int256(180 ether)];\r\n\r\n    uint8[5] memory mask_arr = [16, 8, 4, 2, 1];\r\n\r\n    bool is_even = true;\r\n\r\n    uint256 capacity = GeohashUtils.geohash5Precision(_geohash5);\r\n    uint256 num;\r\n    uint256 cd;\r\n    uint8 mask;\r\n\r\n    while (capacity > 0) {\r\n      capacity--;\r\n\r\n      num = _geohash5 >> 5 * capacity;\r\n      cd = uint256(bytes32(uint256(num)) & bytes32(uint256(31)));\r\n\r\n      for (uint8 i = 0; i < mask_arr.length; i++) {\r\n        mask = mask_arr[i];\r\n\r\n        if (is_even) {\r\n          // adds longitude info\r\n          if (cd & mask != 0) {\r\n            lon_interval[0] = (lon_interval[0] + lon_interval[1]) / 2;\r\n          } else {\r\n            lon_interval[1] = (lon_interval[0] + lon_interval[1]) / 2;\r\n          }\r\n        } else {\r\n          // adds latitude info\r\n          if (cd & mask != 0) {\r\n            lat_interval[0] = (lat_interval[0] + lat_interval[1]) / 2;\r\n          } else {\r\n            lat_interval[1] = (lat_interval[0] + lat_interval[1]) / 2;\r\n          }\r\n        }\r\n\r\n        is_even = !is_even;\r\n      }\r\n    }\r\n\r\n    return latLonIntervalToLatLon(lat_interval, lon_interval);\r\n  }\r\n\r\n  function latLonToGeohash5(int256 _lat, int256 _lon, uint8 _precision) public pure returns (uint256) {\r\n    int256[2] memory lat_interval = [int256(- 90 ether), int256(90 ether)];\r\n    int256[2] memory lon_interval = [int256(- 180 ether), int256(180 ether)];\r\n\r\n    uint8[5] memory bits = [16, 8, 4, 2, 1];\r\n\r\n    uint8 bit = 0;\r\n    uint8 ch = 0;\r\n\r\n    int256 mid;\r\n    bool even = true;\r\n\r\n    uint256 geohash;\r\n    uint8 precision = _precision;\r\n    while (precision > 0) {\r\n      if (even) {\r\n        mid = (lon_interval[0] + lon_interval[1]) / 2;\r\n        if (_lon > mid) {\r\n          ch |= bits[bit];\r\n          lon_interval[0] = mid;\r\n        } else {\r\n          lon_interval[1] = mid;\r\n        }\r\n      } else {\r\n        mid = (lat_interval[0] + lat_interval[1]) / 2;\r\n        if (_lat > mid) {\r\n          ch |= bits[bit];\r\n          lat_interval[0] = mid;\r\n        } else {\r\n          lat_interval[1] = mid;\r\n        }\r\n      }\r\n\r\n      even = !even;\r\n\r\n      if (bit < 4) {\r\n        bit += 1;\r\n      } else {\r\n        precision -= 1;\r\n        geohash += uint256(bytes32(uint256(ch)) & bytes32(uint256(31))) << 5 * precision;\r\n        bit = 0;\r\n        ch = 0;\r\n      }\r\n    }\r\n    return geohash;\r\n  }\r\n\r\n  function UtmUncompress(int[3] memory compressedUtm) internal pure returns (int x, int y, int scale, int latBand, int zone, int isNorth) {\r\n    x = compressedUtm[0];\r\n    y = compressedUtm[1];\r\n\r\n    latBand = compressedUtm[2] / (1 ether * 10 ** 9);\r\n    isNorth = compressedUtm[2] / (1 ether * 10 ** 6) - latBand * 10 ** 3;\r\n    zone = compressedUtm[2] / (1 ether * 10 ** 3) - isNorth * 10 ** 3 - latBand * 10 ** 6;\r\n    scale = compressedUtm[2] - (zone * 1 ether * 10 ** 3) - (isNorth * 1 ether * 10 ** 6) - (latBand * 1 ether * 10 ** 9);\r\n  }\r\n\r\n  function latLonToUtmCompressed(int _lat, int _lon) public pure returns (int[3] memory) {\r\n    (int x, int y, int scale, int latBand, int zone, bool isNorth) = latLonToUtm(_lat, _lon);\r\n\r\n    return [x, y, scale + (zone * 1 ether * 10 ** 3) + (int(isNorth ? 1 : 0) * 1 ether * 10 ** 6) + (latBand * 1 ether * 10 ** 9)];\r\n  }\r\n\r\n  // WGS 84: a = 6378137, b = 6356752.314245, f = 1/298.257223563;\r\n  int constant ellipsoidalA = 6378137000000000000000000;\r\n  int constant ellipsoidalB = 6356752314245000000000000;\r\n  int constant ellipsoidalF = 3352810664747481;\r\n\r\n  int constant falseEasting = 500000 ether;\r\n  int constant falseNorthing = 10000000 ether;\r\n  int constant k0 = 999600000000000000;\r\n\r\n  // 2œÄA is the circumference of a meridian\r\n  int constant A = 6367449145823415000000000;\r\n  int constant AmulK0 = 6364902166165086000000000;\r\n  // eccentricity\r\n  int constant eccentricity = 81819190842621490;\r\n\r\n  // UTM scale on the central meridian\r\n  // latitude ¬± from equator\r\n  // longitude ¬± from central meridian\r\n  function latLonToUtm(int256 _lat, int256 _lon)\r\n    public\r\n    pure\r\n    returns\r\n    (\r\n      int x,\r\n      int y,\r\n      int scale,\r\n      int latBand,\r\n      int zone,\r\n      bool isNorth\r\n    )\r\n  {\r\n    require(- 80 ether <= _lat && _lat <= 84 ether, \"Outside UTM limits\");\r\n\r\n    int L0;\r\n    (zone, L0, latBand) = getUTM_L0_zone(_lat, _lon);\r\n\r\n    // note a is one-based array (6th order Kr√ºger expressions)\r\n    int[7] memory a = [int(0), 837731820624470, 760852777357, 1197645503, 2429171, 5712, 15];\r\n    int[39] memory variables;\r\n\r\n    //  variables[0] - F\r\n    //  variables[1] - t\r\n    //  variables[2] - o\r\n    //  variables[3] - ti\r\n    variables[0] = TrigonometryUtils.degreeToRad(_lat);\r\n    variables[1] = TrigonometryUtils.tan(variables[0]);\r\n    // t ‚â° tanF, ti ‚â° tanF π; prime ( π) indicates angles on the conformal sphere\r\n    variables[14] = MathUtils.sqrt(1 ether + (variables[1] * variables[1]) / 1 ether);\r\n    variables[2] = TrigonometryUtils.sinh((eccentricity * TrigonometryUtils.atanh((eccentricity * variables[1]) / variables[14])) / 1 ether);\r\n    variables[3] = (variables[1] * MathUtils.sqrt(1 ether + (variables[2] * variables[2]) / 1 ether)) / 1 ether - (variables[2] * variables[14]) / 1 ether;\r\n\r\n    //  variables[4] - tanL\r\n    //  variables[5] - MathUtils.sqrt(((ti * ti) / 1 ether) + ((cosL * cosL) / 1 ether))\r\n    //  variables[6] - Ei\r\n    //  variables[7] - ni\r\n    (variables[4], variables[6], variables[7], variables[5]) = getUTM_tanL_Ei_ni(_lon, L0, variables[3]);\r\n\r\n    variables[15] = TrigonometryUtils.sin(2 * 1 * variables[6]);\r\n    variables[16] = TrigonometryUtils.sin(2 * 2 * variables[6]);\r\n    variables[17] = TrigonometryUtils.sin(2 * 3 * variables[6]);\r\n    variables[18] = TrigonometryUtils.sin(2 * 4 * variables[6]);\r\n    variables[19] = TrigonometryUtils.sin(2 * 5 * variables[6]);\r\n    variables[20] = TrigonometryUtils.sin(2 * 6 * variables[6]);\r\n\r\n    variables[21] = TrigonometryUtils.cosh(2 * 1 * variables[7]);\r\n    variables[22] = TrigonometryUtils.cosh(2 * 2 * variables[7]);\r\n    variables[23] = TrigonometryUtils.cosh(2 * 3 * variables[7]);\r\n    variables[24] = TrigonometryUtils.cosh(2 * 4 * variables[7]);\r\n    variables[25] = TrigonometryUtils.cosh(2 * 5 * variables[7]);\r\n    variables[26] = TrigonometryUtils.cosh(2 * 6 * variables[7]);\r\n\r\n    variables[27] = TrigonometryUtils.cos(2 * 1 * variables[6]);\r\n    variables[28] = TrigonometryUtils.cos(2 * 2 * variables[6]);\r\n    variables[29] = TrigonometryUtils.cos(2 * 3 * variables[6]);\r\n    variables[30] = TrigonometryUtils.cos(2 * 4 * variables[6]);\r\n    variables[31] = TrigonometryUtils.cos(2 * 5 * variables[6]);\r\n    variables[32] = TrigonometryUtils.cos(2 * 6 * variables[6]);\r\n\r\n    variables[33] = TrigonometryUtils.sinh(2 * 1 * variables[7]);\r\n    variables[34] = TrigonometryUtils.sinh(2 * 2 * variables[7]);\r\n    variables[35] = TrigonometryUtils.sinh(2 * 3 * variables[7]);\r\n    variables[36] = TrigonometryUtils.sinh(2 * 4 * variables[7]);\r\n    variables[37] = TrigonometryUtils.sinh(2 * 5 * variables[7]);\r\n    variables[38] = TrigonometryUtils.sinh(2 * 6 * variables[7]);\r\n\r\n    //  variables[8] - E\r\n    /* solium-disable-next-line */\r\n    variables[8] = variables[6]\r\n    + (a[1] * (variables[15] * variables[21]) / 1 ether) / 1 ether\r\n    + (a[2] * (variables[16] * variables[22]) / 1 ether) / 1 ether\r\n    + (a[3] * (variables[17] * variables[23]) / 1 ether) / 1 ether\r\n    + (a[4] * (variables[18] * variables[24]) / 1 ether) / 1 ether\r\n    + (a[5] * (variables[19] * variables[25]) / 1 ether) / 1 ether\r\n    /* solium-disable-next-line */\r\n    + (a[6] * (variables[20] * variables[26]) / 1 ether) / 1 ether;\r\n\r\n    //  variables[9] - n\r\n    /* solium-disable-next-line */\r\n    variables[9] = variables[7]\r\n    + (a[1] * ((variables[27] * variables[33]) / 1 ether)) / 1 ether\r\n    + (a[2] * ((variables[28] * variables[34]) / 1 ether)) / 1 ether\r\n    + (a[3] * ((variables[29] * variables[35]) / 1 ether)) / 1 ether\r\n    + (a[4] * ((variables[30] * variables[36]) / 1 ether)) / 1 ether\r\n    + (a[5] * ((variables[31] * variables[37]) / 1 ether)) / 1 ether\r\n    /* solium-disable-next-line */\r\n    + (a[6] * ((variables[32] * variables[38]) / 1 ether)) / 1 ether;\r\n\r\n\r\n    x = (AmulK0 * variables[9]) / 1 ether;\r\n    y = (AmulK0 * variables[8]) / 1 ether;\r\n    // ------------\r\n\r\n    // shift x/y to false origins\r\n    x = x + falseEasting;\r\n    // make x relative to false easting\r\n    if (y < 0) {\r\n      y = y + falseNorthing;\r\n      // make y in southern hemisphere relative to false northing\r\n    }\r\n\r\n    // round to reasonable precision\r\n    x = MathUtils.toFixedInt(x, 6);\r\n    // nm precision\r\n    y = MathUtils.toFixedInt(y, 6);\r\n\r\n    // ---- convergence: Karney 2011 Eq 23, 24\r\n\r\n    //  variables[10] - pi\r\n    //  variables[11] - qi\r\n    //  variables[12] - V\r\n    /* solium-disable-next-line */\r\n    variables[10] = 1 ether\r\n    + 2 * 1 * ((a[1] * (variables[27] * variables[21]) / 1 ether) / 1 ether)\r\n    + 2 * 2 * ((a[2] * (variables[28] * variables[22]) / 1 ether) / 1 ether)\r\n    + 2 * 3 * ((a[3] * (variables[29] * variables[23]) / 1 ether) / 1 ether)\r\n    + 2 * 4 * ((a[4] * (variables[30] * variables[24]) / 1 ether) / 1 ether)\r\n    + 2 * 5 * ((a[5] * (variables[31] * variables[25]) / 1 ether) / 1 ether)\r\n    /* solium-disable-next-line */\r\n    + 2 * 6 * ((a[6] * (variables[32] * variables[26]) / 1 ether) / 1 ether);\r\n\r\n    /* solium-disable-next-line */\r\n    variables[11] = 2 * 1 * ((a[1] * ((variables[15] * variables[33]) / 1 ether)) / 1 ether)\r\n    + 2 * 2 * ((a[2] * ((variables[16] * variables[34]) / 1 ether)) / 1 ether)\r\n    + 2 * 3 * ((a[3] * ((variables[17] * variables[35]) / 1 ether)) / 1 ether)\r\n    + 2 * 4 * ((a[4] * ((variables[18] * variables[36]) / 1 ether)) / 1 ether)\r\n    + 2 * 5 * ((a[5] * ((variables[19] * variables[37]) / 1 ether)) / 1 ether)\r\n    /* solium-disable-next-line */\r\n    + 2 * 6 * ((a[6] * ((variables[20] * variables[38]) / 1 ether)) / 1 ether);\r\n\r\n    variables[12] = getUTM_V(variables[3], variables[4], variables[11], variables[10]);\r\n\r\n    // ---- scale: Karney 2011 Eq 25\r\n\r\n    //  variables[13] - k\r\n    variables[13] = getUTM_k(variables[0], variables[14], variables[11], variables[10], variables[5]);\r\n\r\n    //    convergence = MathUtils.toFixedInt(TrigonometryUtils.radToDegree(variables[12]), 9);\r\n    scale = MathUtils.toFixedInt(variables[13], 12);\r\n\r\n    isNorth = _lat >= 0;\r\n    // hemisphere\r\n  }\r\n\r\n  // TrigonometryUtils.degreeToRad(6 ether)\r\n  int constant sixDegreeRad = 104719755119659776;\r\n\r\n  // TrigonometryUtils.degreeToRad(((zone - 1) * 6 ether) - 180 ether + 3 ether)\r\n  function L0byZone() public pure returns (int[61] memory) {\r\n    return [int(- 3193952531149623000), - 3089232776029963300, - 2984513020910303000, - 2879793265790643700, - 2775073510670984000, - 2670353755551324000, - 2565634000431664600, - 2460914245312004000, - 2356194490192345000, - 2251474735072684800, - 2146754979953025500, - 2042035224833365500, - 1937315469713705700, - 1832595714594046200, - 1727875959474386400, - 1623156204354726400, - 1518436449235066600, - 1413716694115406800, - 1308996938995747300, - 1204277183876087300, - 1099557428756427600, - 994837673636767700, - 890117918517108000, - 785398163397448300, - 680678408277788400, - 575958653158128800, - 471238898038469000, - 366519142918809200, - 261799387799149400, - 157079632679489660, - 52359877559829880, 52359877559829880, 157079632679489660, 261799387799149400, 366519142918809200, 471238898038469000, 575958653158128800, 680678408277788400, 785398163397448300, 890117918517108000, 994837673636767700, 1099557428756427600, 1204277183876087300, 1308996938995747300, 1413716694115406800, 1518436449235066600, 1623156204354726400, 1727875959474386400, 1832595714594046200, 1937315469713705700, 2042035224833365500, 2146754979953025500, 2251474735072684800, 2356194490192345000, 2460914245312004000, 2565634000431664600, 2670353755551324000, 2775073510670984000, 2879793265790643700, 2984513020910303000, 3089232776029963300];\r\n  }\r\n\r\n  function getUTM_L0_zone(int _lat, int _lon) public pure returns (int zone, int L0, int latBand) {\r\n    zone = ((_lon + 180 ether) / 6 ether) + 1;\r\n    // longitudinal zone\r\n    L0 = TrigonometryUtils.degreeToRad(((zone - 1) * 6 ether) - 180 ether + 3 ether);\r\n    // longitude of central meridian\r\n\r\n    // ---- handle Norway/Svalbard exceptions\r\n    // grid zones are 8¬∞ tall; 0¬∞N is offset 10 into latitude bands array\r\n    latBand = _lat / 8 ether + 10;\r\n\r\n    // adjust zone & central meridian for Norway\r\n    if (zone == 31 && latBand == 17 && _lon >= 3) {\r\n      zone++;\r\n      L0 += sixDegreeRad;\r\n    }\r\n    // adjust zone & central meridian for Svalbard\r\n    if (zone == 32 && (latBand == 19 || latBand == 20) && _lon < 9 ether) {\r\n      zone--;\r\n      L0 -= sixDegreeRad;\r\n    }\r\n    if (zone == 32 && (latBand == 19 || latBand == 20) && _lon >= 9 ether) {\r\n      zone++;\r\n      L0 += sixDegreeRad;\r\n    }\r\n    if (zone == 34 && (latBand == 19 || latBand == 20) && _lon < 21 ether) {\r\n      zone--;\r\n      L0 -= sixDegreeRad;\r\n    }\r\n    if (zone == 34 && (latBand == 19 || latBand == 20) && _lon >= 21 ether) {\r\n      zone++;\r\n      L0 += sixDegreeRad;\r\n    }\r\n    if (zone == 36 && (latBand == 19 || latBand == 20) && _lon < 33 ether) {\r\n      zone--;\r\n      L0 -= sixDegreeRad;\r\n    }\r\n    if (zone == 36 && (latBand == 19 || latBand == 20) && _lon >= 33 ether) {\r\n      zone++;\r\n      L0 += sixDegreeRad;\r\n    }\r\n  }\r\n\r\n  function getUTM_tanL_Ei_ni(int _lon, int L0, int ti) public pure returns (int tanL, int Ei, int ni, int si) {\r\n    int L = TrigonometryUtils.degreeToRad(_lon) - L0;\r\n    int cosL = TrigonometryUtils.cos(L);\r\n    tanL = TrigonometryUtils.tan(L);\r\n\r\n    Ei = TrigonometryUtils.atan2(ti, cosL);\r\n    si = MathUtils.sqrt(((ti * ti) / 1 ether) + ((cosL * cosL) / 1 ether));\r\n    ni = TrigonometryUtils.asinh((TrigonometryUtils.sin(L) * 1 ether) / si);\r\n  }\r\n\r\n  function getUTM_V(int ti, int tanL, int qi, int pi) public pure returns (int) {\r\n    return TrigonometryUtils.atan((((ti * 1 ether) / MathUtils.sqrt(1 ether + (ti * ti) / 1 ether)) * tanL) / 1 ether) + TrigonometryUtils.atan2(qi, pi);\r\n  }\r\n\r\n  function getUTM_k(int F, int st, int pi, int qi, int si) public pure returns (int) {\r\n    int sinF = TrigonometryUtils.sin(F);\r\n    return (k0 * (\r\n    /* solium-disable-next-line */\r\n    (((((MathUtils.sqrt(1 ether - (((eccentricity * eccentricity) / 1 ether) * ((sinF * sinF) / 1 ether)) / 1 ether) * st) / si) * A) / ellipsoidalA)\r\n    * MathUtils.sqrt((pi * pi) / 1 ether + (qi * qi) / 1 ether)) / 1 ether\r\n    )) / 1 ether;\r\n  }\r\n}\r\n\r\nlibrary PolygonUtils {\r\n\r\n  int256 public constant RADIUS = 6378137;\r\n  int256 public constant PI = 3141592653589793300;\r\n\r\n  struct LatLonData {\r\n    mapping(uint => int256[2]) latLonByGeohash;\r\n  }\r\n\r\n  struct CoorsPolygon {\r\n    int256[2][] points;\r\n  }\r\n\r\n  struct UtmPolygon {\r\n    int256[3][] points;\r\n  }\r\n\r\n  function geohash5ToLatLonArr(LatLonData storage self, uint256 _geohash5) internal returns (int256[2] memory) {\r\n    (int256 lat, int256 lon) = geohash5ToLatLon(self, _geohash5);\r\n    return [lat, lon];\r\n  }\r\n\r\n  function geohash5ToLatLon(LatLonData storage self, uint256 _geohash5) internal returns (int256 lat, int256 lon) {\r\n    if (self.latLonByGeohash[_geohash5][0] == 0) {\r\n      self.latLonByGeohash[_geohash5] = LandUtils.geohash5ToLatLonArr(_geohash5);\r\n    }\r\n\r\n    return (self.latLonByGeohash[_geohash5][0], self.latLonByGeohash[_geohash5][1]);\r\n  }\r\n\r\n  function isInside(LatLonData storage self, uint _geohash5, uint256[] memory _polygon) public returns (bool) {\r\n    (int256 x, int256 y) = geohash5ToLatLon(self, _geohash5);\r\n\r\n    bool inside = false;\r\n    uint256 j = _polygon.length - 1;\r\n\r\n    for (uint256 i = 0; i < _polygon.length; i++) {\r\n      (int256 xi, int256 yi) = geohash5ToLatLon(self, _polygon[i]);\r\n      (int256 xj, int256 yj) = geohash5ToLatLon(self, _polygon[j]);\r\n\r\n      bool intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n      j = i;\r\n    }\r\n\r\n    return inside;\r\n  }\r\n\r\n  function isInsideWithoutCache(\r\n    uint256 _geohash5,\r\n    uint256[] memory _polygon\r\n  )\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    (int256 x, int256 y) = LandUtils.geohash5ToLatLon(_geohash5);\r\n\r\n    bool inside = false;\r\n    uint256 j = _polygon.length - 1;\r\n\r\n    for (uint256 i = 0; i < _polygon.length; i++) {\r\n      (int256 xi, int256 yi) = LandUtils.geohash5ToLatLon(_polygon[i]);\r\n      (int256 xj, int256 yj) = LandUtils.geohash5ToLatLon(_polygon[j]);\r\n\r\n      bool intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n      j = i;\r\n    }\r\n\r\n    return inside;\r\n  }\r\n\r\n  function isInsideCoors(int256[2] memory _point, CoorsPolygon storage _polygon) internal view returns (bool) {\r\n    bool inside = false;\r\n    uint256 j = _polygon.points.length - 1;\r\n\r\n    for (uint256 i = 0; i < _polygon.points.length; i++) {\r\n      bool intersect = ((_polygon.points[i][1] > _point[1]) != (_polygon.points[j][1] > _point[1])) && (_point[0] < (_polygon.points[j][0] - _polygon.points[i][0]) * (_point[1] - _polygon.points[i][1]) / (_polygon.points[j][1] - _polygon.points[i][1]) + _polygon.points[i][0]);\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n      j = i;\r\n    }\r\n\r\n    return inside;\r\n  }\r\n\r\n  function isClockwise(int[2] memory firstPoint, int[2] memory secondPoint, int[2] memory thirdPoint) internal pure returns (bool) {\r\n    return (((secondPoint[0] - firstPoint[0]) * (secondPoint[1] + firstPoint[1])) +\r\n    ((thirdPoint[0] - secondPoint[0]) * (thirdPoint[1] + secondPoint[1]))) > 0;\r\n  }\r\n\r\n  function getUtmArea(UtmPolygon memory _polygon) internal pure returns (uint result) {\r\n    int area = 0;\r\n    // Accumulates area in the loop\r\n    uint j = _polygon.points.length - 1;\r\n    // The last vertex is the 'previous' one to the first\r\n\r\n    int scaleSum = 0;\r\n    int firstScale;\r\n    bool differentScales = false;\r\n    int firstPointZone;\r\n    for (uint i = 0; i < _polygon.points.length; i++) {\r\n      area += ((_polygon.points[j][0] + _polygon.points[i][0]) * (_polygon.points[j][1] - _polygon.points[i][1])) / 1 ether;\r\n\r\n      (,, int scale,, int zone,) = LandUtils.UtmUncompress(_polygon.points[i]);\r\n\r\n      if (i == 0) {\r\n        firstPointZone = zone;\r\n        firstScale = (scale / int(10 ** 13)) * int(10 ** 13);\r\n      } else {\r\n        if (!differentScales) {\r\n          differentScales = firstScale != (scale / int(10 ** 13)) * int(10 ** 13);\r\n        }\r\n      }\r\n\r\n      require(zone == firstPointZone, \"All points should belongs to same zone\");\r\n\r\n      scaleSum += scale;\r\n      j = i;\r\n      //j is previous vertex to i\r\n    }\r\n    if (area < 0) {\r\n      area *= - 1;\r\n    }\r\n\r\n    if (differentScales) {\r\n      // if scale is different with 0.00001 accuracy - apply scale\r\n      result = (uint(area * 1 ether) / (uint(scaleSum / int(_polygon.points.length)) ** uint(2)) / 1 ether) / 2;\r\n    } else {\r\n      // else if scale the same - don't apply scale\r\n      result = uint(area / 2);\r\n    }\r\n  }\r\n\r\n  function rad(int angle) internal pure returns (int) {\r\n    return angle * PI / 180 / 1 ether;\r\n  }\r\n\r\n  function isSelfIntersected(CoorsPolygon storage _polygon) public view returns (bool) {\r\n    for (uint256 i = 0; i < _polygon.points.length; i++) {\r\n      int256[2] storage iaPoint = _polygon.points[i];\r\n      uint256 ibIndex = i == _polygon.points.length - 1 ? 0 : i + 1;\r\n      int256[2] storage ibPoint = _polygon.points[ibIndex];\r\n\r\n      for (uint256 k = 0; k < _polygon.points.length; k++) {\r\n        int256[2] storage kaPoint = _polygon.points[k];\r\n        uint256 kbIndex = k == _polygon.points.length - 1 ? 0 : k + 1;\r\n        int256[2] storage kbPoint = _polygon.points[kbIndex];\r\n\r\n        int256[2] memory intersectionPoint = SegmentUtils.findSegmentsIntersection([iaPoint, ibPoint], [kaPoint, kbPoint]);\r\n        if (intersectionPoint[0] == 0 && intersectionPoint[1] == 0) {\r\n          continue;\r\n        }\r\n        /* solium-disable-next-line */\r\n        if (PointUtils.isEqual(intersectionPoint, iaPoint) || PointUtils.isEqual(intersectionPoint, ibPoint)\r\n        || PointUtils.isEqual(intersectionPoint, kaPoint) || PointUtils.isEqual(intersectionPoint, kbPoint)) {\r\n          continue;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\ninterface IACL {\r\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\r\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\r\n}\r\n\r\ninterface IPPGlobalRegistry {\r\n  function setContract(bytes32 _key, address _value) external;\r\n\r\n  // GETTERS\r\n  function getContract(bytes32 _key) external view returns (address);\r\n  function getACL() external view returns (IACL);\r\n  function getGaltTokenAddress() external view returns (address);\r\n  function getPPTokenRegistryAddress() external view returns (address);\r\n  function getPPLockerRegistryAddress() external view returns (address);\r\n  function getPPMarketAddress() external view returns (address);\r\n}\r\n\r\ninterface IPPTokenController {\r\n  event Mint(address indexed to, uint256 indexed tokenId);\r\n  event SetGeoDataManager(address indexed geoDataManager);\r\n  event SetContourVerificationManager(address indexed contourVerificationManager);\r\n  event SetFeeManager(address indexed feeManager);\r\n  event SetFeeCollector(address indexed feeCollector);\r\n  event ReportCVMisbehaviour(uint256 tokenId);\r\n  event NewProposal(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId,\r\n    address indexed creator\r\n  );\r\n  event ProposalExecuted(uint256 indexed proposalId);\r\n  event ProposalExecutionFailed(uint256 indexed proposalId);\r\n  event ProposalApproval(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalRejection(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalCancellation(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event SetMinter(address indexed minter);\r\n  event SetBurner(address indexed burner);\r\n  event SetBurnTimeout(uint256 indexed tokenId, uint256 timeout);\r\n  event InitiateTokenBurn(uint256 indexed tokenId, uint256 timeoutAt);\r\n  event BurnTokenByTimeout(uint256 indexed tokenId);\r\n  event CancelTokenBurn(uint256 indexed tokenId);\r\n  event SetFee(bytes32 indexed key, uint256 value);\r\n  event WithdrawEth(address indexed to, uint256 amount);\r\n  event WithdrawErc20(address indexed to, address indexed tokenAddress, uint256 amount);\r\n  event UpdateContourUpdatedAt(uint256 indexed tokenId, uint256 timestamp);\r\n  event UpdateDetailsUpdatedAt(uint256 indexed tokenId, uint256 timestamp);\r\n\r\n  enum PropertyInitialSetupStage {\r\n    PENDING,\r\n    DETAILS,\r\n    DONE\r\n  }\r\n\r\n  function contourVerificationManager() external view returns (address);\r\n  function fees(bytes32) external view returns (uint256);\r\n  function setBurner(address _burner) external;\r\n  function setGeoDataManager(address _geoDataManager) external;\r\n  function setFeeManager(address _feeManager) external;\r\n  function setFeeCollector(address _feeCollector) external;\r\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external;\r\n  function setFee(bytes32 _key, uint256 _value) external;\r\n  function withdrawErc20(address _tokenAddress, address _to) external;\r\n  function withdrawEth(address payable _to) external;\r\n  function initiateTokenBurn(uint256 _tokenId) external;\r\n  function cancelTokenBurn(uint256 _tokenId) external;\r\n  function burnTokenByTimeout(uint256 _tokenId) external;\r\n  function reportCVMisbehaviour(uint256 _tokenId) external;\r\n  function propose(bytes calldata _data, string calldata _dataLink) external payable;\r\n  function approve(uint256 _proposalId) external;\r\n  function execute(uint256 _proposalId) external;\r\n  function fetchTokenId(bytes calldata _data) external pure returns (uint256 tokenId);\r\n  function() external payable;\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ninterface IPPToken {\r\n  event SetBaseURI(string baseURI);\r\n  event SetContractDataLink(string indexed dataLink);\r\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\r\n  event SetController(address indexed controller);\r\n  event SetDetails(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetContour(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetHumanAddress(uint256 indexed tokenId, string humanAddress);\r\n  event SetDataLink(uint256 indexed tokenId, string dataLink);\r\n  event SetLedgerIdentifier(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexRootHash(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexStorageLink(uint256 indexed tokenId, string vertexStorageLink);\r\n  event SetArea(uint256 indexed tokenId, uint256 area, AreaSource areaSource);\r\n  event SetExtraData(bytes32 indexed key, bytes32 value);\r\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\r\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\r\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\r\n\r\n  enum AreaSource {\r\n    USER_INPUT,\r\n    CONTRACT\r\n  }\r\n\r\n  enum TokenType {\r\n    NULL,\r\n    LAND_PLOT,\r\n    BUILDING,\r\n    ROOM,\r\n    PACKAGE\r\n  }\r\n\r\n  struct Property {\r\n    uint256 setupStage;\r\n\r\n    // (LAND_PLOT,BUILDING,ROOM) Type cannot be changed after token creation\r\n    TokenType tokenType;\r\n    // Geohash5z (x,y,z)\r\n    uint256[] contour;\r\n    // Meters above the sea\r\n    int256 highestPoint;\r\n\r\n    // USER_INPUT or CONTRACT\r\n    AreaSource areaSource;\r\n    // Calculated either by contract (for land plots and buildings) or by manual input\r\n    // in sq. meters (1 sq. meter == 1 eth)\r\n    uint256 area;\r\n\r\n    bytes32 ledgerIdentifier;\r\n    string humanAddress;\r\n    string dataLink;\r\n\r\n    // Reserved for future use\r\n    bytes32 vertexRootHash;\r\n    string vertexStorageLink;\r\n  }\r\n\r\n  // PERMISSIONED METHODS\r\n\r\n  function setContractDataLink(string calldata _dataLink) external;\r\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\r\n  function setController(address payable _controller) external;\r\n  function setDetails(\r\n    uint256 _tokenId,\r\n    TokenType _tokenType,\r\n    AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink\r\n  )\r\n    external;\r\n\r\n  function setContour(\r\n    uint256 _tokenId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external;\r\n\r\n  function setArea(uint256 _tokenId, uint256 _area, AreaSource _areaSource) external;\r\n  function setLedgerIdentifier(uint256 _tokenId, bytes32 _ledgerIdentifier) external;\r\n  function setDataLink(uint256 _tokenId, string calldata _dataLink) external;\r\n  function setVertexRootHash(uint256 _tokenId, bytes32 _vertexRootHash) external;\r\n  function setVertexStorageLink(uint256 _tokenId, string calldata _vertexStorageLink) external;\r\n  function setExtraData(bytes32 _key, bytes32 _value) external;\r\n  function setPropertyExtraData(uint256 _tokenId, bytes32 _key, bytes32 _value) external;\r\n\r\n  function incrementSetupStage(uint256 _tokenId) external;\r\n\r\n  function mint(address _to) external returns (uint256);\r\n  function burn(uint256 _tokenId) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  // GETTERS\r\n  function controller() external view returns (address payable);\r\n  function extraData(bytes32 _key) external view returns (bytes32);\r\n  function propertyExtraData(uint256 _tokenId, bytes32 _key) external view returns (bytes32);\r\n  function propertyCreatedAt(uint256 _tokenId) external view returns (uint256);\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function exists(uint256 _tokenId) external view returns (bool);\r\n  function getType(uint256 _tokenId) external view returns (TokenType);\r\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\r\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\r\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\r\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\r\n  function getArea(uint256 _tokenId) external view returns (uint256);\r\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\r\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\r\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\r\n  function getVertexRootHash(uint256 _tokenId) external view returns (bytes32);\r\n  function getVertexStorageLink(uint256 _tokenId) external view returns (string memory);\r\n  function getSetupStage(uint256 _tokenId) external view returns (uint256);\r\n  function getDetails(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (\r\n      TokenType tokenType,\r\n      uint256[] memory contour,\r\n      int256 highestPoint,\r\n      AreaSource areaSource,\r\n      uint256 area,\r\n      bytes32 ledgerIdentifier,\r\n      string memory humanAddress,\r\n      string memory dataLink,\r\n      uint256 setupStage,\r\n      bytes32 vertexRootHash,\r\n      string memory vertexStorageLink\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract PPTokenController is IPPTokenController, Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public constant VERSION = 3;\r\n\r\n  bytes32 public constant PROPOSAL_GALT_FEE_KEY = bytes32(\"CONTROLLER_PROPOSAL_GALT\");\r\n  bytes32 public constant PROPOSAL_ETH_FEE_KEY = bytes32(\"CONTROLLER_PROPOSAL_ETH\");\r\n  bytes32 public constant DETAILS_UPDATED_EXTRA_KEY = bytes32(\"DETAILS_UPDATED_AT\");\r\n  bytes32 public constant CONTOUR_UPDATED_EXTRA_KEY = bytes32(\"CONTOUR_UPDATED_AT\");\r\n  bytes32 public constant CLAIM_UNIQUENESS_KEY = bytes32(\"CLAIM_UNIQUENESS\");\r\n\r\n  // setDetails(uint256,uint8,uint8,uint256,bytes32,string,string)\r\n  bytes32 internal constant TOKEN_SET_DETAILS_SIGNATURE = 0x18212fc600000000000000000000000000000000000000000000000000000000;\r\n  // setContour(uint256,uint256[],int256)\r\n  bytes32 internal constant TOKEN_SET_CONTOUR_SIGNATURE = 0x89e8915f00000000000000000000000000000000000000000000000000000000;\r\n\r\n  enum ProposalStatus {\r\n    NULL,\r\n    PENDING,\r\n    APPROVED,\r\n    EXECUTED,\r\n    REJECTED,\r\n    CANCELLED\r\n  }\r\n\r\n  struct Proposal {\r\n    address creator;\r\n    ProposalStatus status;\r\n    bool tokenOwnerApproved;\r\n    bool geoDataManagerApproved;\r\n    bytes data;\r\n    string dataLink;\r\n  }\r\n\r\n  IPPGlobalRegistry public globalRegistry;\r\n  IPPToken public tokenContract;\r\n  address public contourVerificationManager;\r\n  address public geoDataManager;\r\n  address public feeManager;\r\n  address public feeCollector;\r\n  address public minter;\r\n  address public burner;\r\n  uint256 public defaultBurnTimeoutDuration;\r\n  uint256 internal idCounter;\r\n\r\n  mapping(uint256 => Proposal) public proposals;\r\n  // tokenId => timeoutDuration (in seconds)\r\n  mapping(uint256 => uint256) public burnTimeoutDuration;\r\n  // tokenId => burnTimeoutAt\r\n  mapping(uint256 => uint256) public burnTimeoutAt;\r\n  // key => fee\r\n  mapping(bytes32 => uint256) public fees;\r\n\r\n  modifier onlyMinter() {\r\n    require(msg.sender == minter, \"Only minter allowed\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyContourVerifier() {\r\n    require(msg.sender == contourVerificationManager, \"Only contourVerifier allowed\");\r\n\r\n    _;\r\n  }\r\n\r\n  constructor(IPPGlobalRegistry _globalRegistry, IPPToken _tokenContract, uint256 _defaultBurnTimeoutDuration) public {\r\n    require(_defaultBurnTimeoutDuration > 0, \"Invalid burn timeout duration\");\r\n\r\n    defaultBurnTimeoutDuration = _defaultBurnTimeoutDuration;\r\n    tokenContract = _tokenContract;\r\n    globalRegistry = _globalRegistry;\r\n  }\r\n\r\n  function() external payable {\r\n  }\r\n\r\n  // CONTRACT OWNER INTERFACE\r\n\r\n  function setContourVerificationManager(address _contourVerificationManager) external onlyOwner {\r\n    contourVerificationManager = _contourVerificationManager;\r\n\r\n    emit SetContourVerificationManager(_contourVerificationManager);\r\n  }\r\n\r\n  function setGeoDataManager(address _geoDataManager) external onlyOwner {\r\n    geoDataManager = _geoDataManager;\r\n\r\n    emit SetGeoDataManager(_geoDataManager);\r\n  }\r\n\r\n  function setFeeManager(address _feeManager) external onlyOwner {\r\n    feeManager = _feeManager;\r\n\r\n    emit SetFeeManager(_feeManager);\r\n  }\r\n\r\n  function setFeeCollector(address _feeCollector) external onlyOwner {\r\n    feeCollector = _feeCollector;\r\n\r\n    emit SetFeeCollector(_feeCollector);\r\n  }\r\n\r\n  function setMinter(address _minter) external onlyOwner {\r\n    minter = _minter;\r\n\r\n    emit SetMinter(_minter);\r\n  }\r\n\r\n  function setBurner(address _burner) external onlyOwner {\r\n    burner = _burner;\r\n\r\n    emit SetBurner(_burner);\r\n  }\r\n\r\n  function withdrawErc20(address _tokenAddress, address _to) external {\r\n    require(msg.sender == feeCollector, \"Missing permissions\");\r\n\r\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n\r\n    IERC20(_tokenAddress).transfer(_to, balance);\r\n\r\n    emit WithdrawErc20(_to, _tokenAddress, balance);\r\n  }\r\n\r\n  function withdrawEth(address payable _to) external {\r\n    require(msg.sender == feeCollector, \"Missing permissions\");\r\n\r\n    uint256 balance = address(this).balance;\r\n\r\n    _to.transfer(balance);\r\n\r\n    emit WithdrawEth(_to, balance);\r\n  }\r\n\r\n  function setFee(bytes32 _key, uint256 _value) external {\r\n    require(msg.sender == feeManager, \"Missing permissions\");\r\n\r\n    fees[_key] = _value;\r\n    emit SetFee(_key, _value);\r\n  }\r\n\r\n  // BURNER INTERFACE\r\n\r\n  function initiateTokenBurn(uint256 _tokenId) external {\r\n    require(msg.sender == burner, \"Only burner allowed\");\r\n    require(burnTimeoutAt[_tokenId] == 0, \"Burn already initiated\");\r\n    require(tokenContract.ownerOf(_tokenId) != address(0), \"Token doesn't exists\");\r\n\r\n    uint256 duration = burnTimeoutDuration[_tokenId];\r\n    if (duration == 0) {\r\n      duration = defaultBurnTimeoutDuration;\r\n    }\r\n\r\n    uint256 timeoutAt = block.timestamp.add(duration);\r\n    burnTimeoutAt[_tokenId] = timeoutAt;\r\n\r\n    emit InitiateTokenBurn(_tokenId, timeoutAt);\r\n  }\r\n\r\n  // MINTER INTERFACE\r\n  function mint(address _to) external onlyMinter {\r\n    uint256 _tokenId = tokenContract.mint(_to);\r\n\r\n    emit Mint(_to, _tokenId);\r\n  }\r\n\r\n  // CONTOUR VERIFICATION INTERFACE\r\n\r\n  function reportCVMisbehaviour(uint256 _tokenId) external onlyContourVerifier {\r\n    tokenContract.burn(_tokenId);\r\n\r\n    emit ReportCVMisbehaviour(_tokenId);\r\n  }\r\n\r\n  // CONTROLLER INTERFACE\r\n\r\n  function setInitialDetails(\r\n    uint256 _privatePropertyId,\r\n    IPPToken.TokenType _tokenType,\r\n    IPPToken.AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink,\r\n    bool _claimUniqueness\r\n  )\r\n    external\r\n    onlyMinter\r\n  {\r\n    // Will REVERT if there is no owner assigned to the token\r\n    tokenContract.ownerOf(_privatePropertyId);\r\n\r\n    uint256 setupStage = tokenContract.getSetupStage(_privatePropertyId);\r\n    require(setupStage == uint256(PropertyInitialSetupStage.PENDING), \"Requires PENDING setup stage\");\r\n\r\n    tokenContract.setDetails(_privatePropertyId, _tokenType, _areaSource, _area, _ledgerIdentifier, _humanAddress, _dataLink);\r\n\r\n    tokenContract.incrementSetupStage(_privatePropertyId);\r\n\r\n    _updateDetailsUpdatedAt(_privatePropertyId);\r\n\r\n    tokenContract.setPropertyExtraData(_privatePropertyId, CLAIM_UNIQUENESS_KEY, bytes32(uint256(_claimUniqueness ? 1 : 0)));\r\n  }\r\n\r\n  function setInitialContour(\r\n    uint256 _privatePropertyId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external\r\n    onlyMinter\r\n  {\r\n    uint256 setupStage = tokenContract.getSetupStage(_privatePropertyId);\r\n\r\n    require(setupStage == uint256(PropertyInitialSetupStage.DETAILS), \"Requires DETAILS setup stage\");\r\n\r\n    tokenContract.setContour(_privatePropertyId, _contour, _highestPoint);\r\n\r\n    tokenContract.incrementSetupStage(_privatePropertyId);\r\n\r\n    _updateContourUpdatedAt(_privatePropertyId);\r\n  }\r\n\r\n  // TOKEN OWNER INTERFACE\r\n\r\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external {\r\n    require(tokenContract.ownerOf(_tokenId) == msg.sender, \"Only token owner allowed\");\r\n    require(_duration > 0, \"Invalid timeout duration\");\r\n\r\n    burnTimeoutDuration[_tokenId] = _duration;\r\n\r\n    emit SetBurnTimeout(_tokenId, _duration);\r\n  }\r\n\r\n  function cancelTokenBurn(uint256 _tokenId) external {\r\n    require(burnTimeoutAt[_tokenId] != 0, \"Burn not initiated\");\r\n    require(tokenContract.ownerOf(_tokenId) == msg.sender, \"Only token owner allowed\");\r\n\r\n    burnTimeoutAt[_tokenId] = 0;\r\n\r\n    emit CancelTokenBurn(_tokenId);\r\n  }\r\n\r\n  // COMMON INTERFACE\r\n\r\n  function propose(\r\n    bytes calldata _data,\r\n    string calldata _dataLink\r\n  )\r\n    external\r\n    payable\r\n  {\r\n    address msgSender = msg.sender;\r\n    uint256 tokenId = fetchTokenId(_data);\r\n    uint256 proposalId = _nextId();\r\n\r\n    Proposal storage p = proposals[proposalId];\r\n\r\n    if (msgSender == geoDataManager) {\r\n      p.geoDataManagerApproved = true;\r\n    } else if (msgSender == tokenContract.ownerOf(tokenId)) {\r\n      _acceptProposalFee();\r\n      p.tokenOwnerApproved = true;\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    p.creator = msgSender;\r\n    p.data = _data;\r\n    p.dataLink = _dataLink;\r\n    p.status = ProposalStatus.PENDING;\r\n\r\n    emit NewProposal(proposalId, tokenId, msg.sender);\r\n  }\r\n\r\n  function approve(uint256 _proposalId) external {\r\n    Proposal storage p = proposals[_proposalId];\r\n    uint256 tokenId = fetchTokenId(p.data);\r\n\r\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\r\n\r\n    if (p.geoDataManagerApproved == true) {\r\n      require(msg.sender == tokenContract.ownerOf(tokenId), \"Missing permissions\");\r\n      p.tokenOwnerApproved = true;\r\n    } else if (p.tokenOwnerApproved == true) {\r\n      require(msg.sender == geoDataManager, \"Missing permissions\");\r\n      p.geoDataManagerApproved = true;\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    emit ProposalApproval(_proposalId, tokenId);\r\n\r\n    p.status = ProposalStatus.APPROVED;\r\n\r\n    execute(_proposalId);\r\n  }\r\n\r\n  function reject(uint256 _proposalId) external {\r\n    Proposal storage p = proposals[_proposalId];\r\n    uint256 tokenId = fetchTokenId(p.data);\r\n\r\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\r\n\r\n    if (p.geoDataManagerApproved == true) {\r\n      require(msg.sender == tokenContract.ownerOf(tokenId), \"Missing permissions\");\r\n    } else if (p.tokenOwnerApproved == true) {\r\n      require(msg.sender == geoDataManager, \"Missing permissions\");\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    p.status = ProposalStatus.REJECTED;\r\n\r\n    emit ProposalRejection(_proposalId, tokenId);\r\n  }\r\n\r\n  function cancel(uint256 _proposalId) external {\r\n    Proposal storage p = proposals[_proposalId];\r\n    uint256 tokenId = fetchTokenId(p.data);\r\n\r\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\r\n\r\n    if (msg.sender == geoDataManager) {\r\n      require(p.geoDataManagerApproved == true, \"Only own proposals can be cancelled\");\r\n    } else if (msg.sender == tokenContract.ownerOf(tokenId)) {\r\n      require(p.tokenOwnerApproved == true, \"Only own proposals can be cancelled\");\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    p.status = ProposalStatus.CANCELLED;\r\n\r\n    emit ProposalCancellation(_proposalId, tokenId);\r\n  }\r\n\r\n  // PERMISSIONLESS INTERFACE\r\n\r\n  function execute(uint256 _proposalId) public {\r\n    Proposal storage p = proposals[_proposalId];\r\n\r\n    require(p.tokenOwnerApproved == true, \"Token owner approval required\");\r\n    require(p.geoDataManagerApproved == true, \"GeoDataManager approval required\");\r\n    require(p.status == ProposalStatus.APPROVED, \"Expect APPROVED status\");\r\n\r\n    _preExecuteHook(p.data);\r\n\r\n    p.status = ProposalStatus.EXECUTED;\r\n\r\n    (bool ok,) = address(tokenContract)\r\n      .call\r\n      .gas(gasleft().sub(50000))(p.data);\r\n\r\n    if (ok == false) {\r\n      emit ProposalExecutionFailed(_proposalId);\r\n      p.status = ProposalStatus.APPROVED;\r\n    } else {\r\n      emit ProposalExecuted(_proposalId);\r\n    }\r\n  }\r\n\r\n  function _preExecuteHook(bytes memory data) internal {\r\n    bytes32 signature = fetchSignature(data);\r\n    uint256 tokenId = fetchTokenId(data);\r\n\r\n    if (signature == TOKEN_SET_DETAILS_SIGNATURE) {\r\n      _updateDetailsUpdatedAt(tokenId);\r\n    } else if (signature == TOKEN_SET_CONTOUR_SIGNATURE) {\r\n      _updateContourUpdatedAt(tokenId);\r\n    }\r\n  }\r\n\r\n  function burnTokenByTimeout(uint256 _tokenId) external {\r\n    require(burnTimeoutAt[_tokenId] != 0, \"Timeout not set\");\r\n    require(block.timestamp > burnTimeoutAt[_tokenId], \"Timeout has not passed yet\");\r\n    require(tokenContract.ownerOf(_tokenId) != address(0), \"Token already burned\");\r\n\r\n    tokenContract.burn(_tokenId);\r\n\r\n    emit BurnTokenByTimeout(_tokenId);\r\n  }\r\n\r\n  // @dev Assuming that a tokenId is always the first argument in a method\r\n  function fetchTokenId(bytes memory _data) public pure returns (uint256 tokenId) {\r\n    assembly {\r\n      tokenId := mload(add(_data, 0x24))\r\n    }\r\n\r\n    require(tokenId > 0, \"Failed fetching tokenId from encoded data\");\r\n  }\r\n\r\n  function fetchSignature(bytes memory _data) public pure returns (bytes32 signature) {\r\n    assembly {\r\n      signature := and(mload(add(_data, 0x20)), 0xffffffff00000000000000000000000000000000000000000000000000000000)\r\n    }\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _nextId() internal returns (uint256) {\r\n    idCounter += 1;\r\n    return idCounter;\r\n  }\r\n\r\n  function _galtToken() internal view returns (IERC20) {\r\n    return IERC20(globalRegistry.getGaltTokenAddress());\r\n  }\r\n\r\n  function _acceptProposalFee() internal {\r\n    if (msg.value == 0) {\r\n      _galtToken().transferFrom(msg.sender, address(this), fees[PROPOSAL_GALT_FEE_KEY]);\r\n    } else {\r\n      require(msg.value == fees[PROPOSAL_ETH_FEE_KEY], \"Invalid fee\");\r\n    }\r\n  }\r\n\r\n  function _updateDetailsUpdatedAt(uint256 _tokenId) internal {\r\n    bytes32 value = bytes32(now);\r\n\r\n    tokenContract.setPropertyExtraData(_tokenId, DETAILS_UPDATED_EXTRA_KEY, value);\r\n\r\n    emit UpdateDetailsUpdatedAt(_tokenId, now);\r\n  }\r\n\r\n  function _updateContourUpdatedAt(uint256 _tokenId) internal {\r\n    bytes32 value = bytes32(now);\r\n\r\n    tokenContract.setPropertyExtraData(_tokenId, CONTOUR_UPDATED_EXTRA_KEY, value);\r\n\r\n    emit UpdateDetailsUpdatedAt(_tokenId, now);\r\n  }\r\n\r\n  // GETTERS\r\n\r\n  function getDetailsUpdatedAt(uint256 _tokenId) public view returns (uint256) {\r\n    return uint256(tokenContract.propertyExtraData(_tokenId, DETAILS_UPDATED_EXTRA_KEY));\r\n  }\r\n\r\n  function getContourUpdatedAt(uint256 _tokenId) public view returns (uint256) {\r\n    return uint256(tokenContract.propertyExtraData(_tokenId, CONTOUR_UPDATED_EXTRA_KEY));\r\n  }\r\n\r\n  function getClaimUniquenessFlag(uint256 _tokenId) public view returns (bool) {\r\n    return tokenContract.propertyExtraData(_tokenId, CLAIM_UNIQUENESS_KEY) != 0x0;\r\n  }\r\n}\r\n\r\nlibrary CPointUtils {\r\n\r\n  uint256 public constant XYZ_MASK =    uint256(0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff);\r\n  uint256 public constant XY_MASK =     uint256(0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff);\r\n  uint256 public constant HEIGHT_MASK = uint256(0x000000000000000000000000ffffffff00000000000000000000000000000000);\r\n  uint256 public constant LAT_MASK =    uint256(0x00000000000000000000000000000000ffffffffffffffff0000000000000000);\r\n  uint256 public constant LON_MASK =    uint256(0x000000000000000000000000000000000000000000000000ffffffffffffffff);\r\n  uint256 public constant INT64_MASK =  uint256(0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000);\r\n  uint256 public constant INT32_MASK =  uint256(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000);\r\n\r\n  // -2_147_483_648\r\n  int256 constant Z_MIN = int256(-2147483648);\r\n  // 2_147_483_647\r\n  int256 constant Z_MAX = int256(2147483647);\r\n\r\n  int256 constant DECIMALS = 10 ** 8;\r\n\r\n  // LAT/LON/HEIGHT\r\n\r\n  function cPointToLat(uint256 _cPoint) internal pure returns (int256) {\r\n    return int256(int64(((_cPoint & LAT_MASK) >> 64) ^ INT64_MASK)) * DECIMALS;\r\n  }\r\n\r\n  function cPointToLon(uint256 _cPoint) internal pure returns (int256) {\r\n    return int256(int64((_cPoint & LON_MASK) ^ INT64_MASK)) * DECIMALS;\r\n  }\r\n\r\n  function cPointToHeight(uint256 _cPoint) internal pure returns (int256) {\r\n    return int32(((_cPoint & HEIGHT_MASK) >> 128) ^ INT32_MASK);\r\n  }\r\n\r\n  // COMBINATIONS\r\n\r\n  function cPointToLatLonHeight(uint256 _cPoint) internal pure returns (int256 lat, int256 lon, int256 height) {\r\n    lat = cPointToLat(_cPoint);\r\n    lon = cPointToLon(_cPoint);\r\n    height = cPointToHeight(_cPoint);\r\n  }\r\n\r\n  function cPointToLatLonArr(uint256 _cPoint) internal pure returns (int256[2] memory) {\r\n    return [\r\n      cPointToLat(_cPoint),\r\n      cPointToLon(_cPoint)\r\n    ];\r\n  }\r\n\r\n  function cPointToLatLon(uint256 _cPoint) internal pure returns (int256 lat, int256 lon) {\r\n    lat = cPointToLat(_cPoint);\r\n    lon = cPointToLon(_cPoint);\r\n  }\r\n\r\n  function latLonHeightToCPoint(int256 _lat, int256 _lon, int256 _height) internal pure returns (uint256 cPoint) {\r\n    requireHeightValid(_height);\r\n\r\n    int256 lat = (_lat / DECIMALS) << 64;\r\n    int256 height = _height << 128;\r\n\r\n    return uint256(((((bytes32(_lon / DECIMALS) & bytes32(LON_MASK)) ^ bytes32(lat)) & bytes32(XY_MASK)) ^ bytes32(height)) & bytes32(XYZ_MASK));\r\n  }\r\n\r\n  function requireHeightValid(int256 _height) pure internal {\r\n    require(Z_MIN <= _height && _height <= Z_MAX, \"CPointUtils: height overflow\");\r\n  }\r\n\r\n  function isHeightValid(int256 _height) pure internal returns (bool) {\r\n    return (Z_MIN <= _height && _height <= Z_MAX);\r\n  }\r\n}\r\n\r\nlibrary PPContourVerificationLib {\r\n  enum InclusionType {\r\n    A_POINT_INSIDE_B,\r\n    B_POINT_INSIDE_A\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if two given contour segment intersect each other\r\n   * @param _excludeCollinear will return false if two segments are collinear\r\n   */\r\n  function contourSegmentsIntersects(\r\n    uint256[] memory _contourA,\r\n    uint256[] memory _contourB,\r\n    uint256 _aSegmentFirstPointIndex,\r\n    uint256 _bSegmentFirstPointIndex,\r\n    bool _excludeCollinear\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    uint contourAlen = _contourA.length;\r\n    uint contourBlen = _contourB.length;\r\n\r\n    uint256 _aSegmentFirstPoint = _contourA[_aSegmentFirstPointIndex];\r\n    uint256 _aSegmentSecondPoint = _aSegmentFirstPointIndex + 1 == contourAlen ? _contourA[0] : _contourA[_aSegmentFirstPointIndex + 1];\r\n\r\n    uint256 _bSegmentFirstPoint = _contourB[_bSegmentFirstPointIndex];\r\n    uint256 _bSegmentSecondPoint = _bSegmentFirstPointIndex + 1 == contourBlen ? _contourB[0] : _contourB[_bSegmentFirstPointIndex + 1];\r\n\r\n    bool isCollinear = segmentsAreCollinear(\r\n      _aSegmentFirstPoint,\r\n      _aSegmentSecondPoint,\r\n      _bSegmentSecondPoint,\r\n      _bSegmentFirstPoint\r\n    );\r\n\r\n    if (_excludeCollinear && isCollinear) {\r\n      return false;\r\n    }\r\n\r\n    return SegmentUtils.segmentsIntersect(\r\n      getLatLonSegment(\r\n        _aSegmentFirstPoint,\r\n        _aSegmentSecondPoint\r\n      ),\r\n      getLatLonSegment(\r\n        _bSegmentFirstPoint,\r\n        _bSegmentSecondPoint\r\n      )\r\n    );\r\n  }\r\n\r\n  function pointInsideContour(\r\n    uint256[] memory _contourA,\r\n    uint256[] memory _contourB,\r\n    uint256 _includingPoint\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return isInsideWithoutCache(_includingPoint, _contourA, true) && isInsideWithoutCache(_includingPoint, _contourB, true);\r\n  }\r\n\r\n  function isInsideWithoutCache(\r\n    uint256 _cPoint,\r\n    uint256[] memory _polygon,\r\n    bool _excludeCollinear\r\n  )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n  {\r\n    (int256 x, int256 y) = CPointUtils.cPointToLatLon(_cPoint);\r\n\r\n    bool inside = false;\r\n    uint256 j = _polygon.length - 1;\r\n\r\n    for (uint256 i = 0; i < _polygon.length; i++) {\r\n      (int256 xi, int256 yi) = CPointUtils.cPointToLatLon(_polygon[i]);\r\n      (int256 xj, int256 yj) = CPointUtils.cPointToLatLon(_polygon[j]);\r\n\r\n      bool intersect = ((yi > y) != (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n      if (_excludeCollinear) {\r\n        if (SegmentUtils.pointOnSegment([x, y], [xi, yi], [xj, yj])) {\r\n          return false;\r\n        }\r\n      }\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n      j = i;\r\n    }\r\n\r\n    return inside;\r\n  }\r\n\r\n  function segmentsAreCollinear(\r\n    uint256 _a1,\r\n    uint256 _b1,\r\n    uint256 _a2,\r\n    uint256 _b2\r\n  )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n  {\r\n    int256[2] memory a1 = toLatLonPoint(_a1);\r\n    int256[2] memory b1 = toLatLonPoint(_b1);\r\n    int256[2] memory a2 = toLatLonPoint(_a2);\r\n    int256[2] memory b2 = toLatLonPoint(_b2);\r\n\r\n    return SegmentUtils.pointOnSegment(a2, a1, b1) ||\r\n    SegmentUtils.pointOnSegment(b2, a1, b1) ||\r\n    SegmentUtils.pointOnSegment(a1, b1, b2) ||\r\n    SegmentUtils.pointOnSegment(a2, b1, b2) ||\r\n    SegmentUtils.pointOnSegment(b1, a1, a2) ||\r\n    SegmentUtils.pointOnSegment(b2, a1, a2);\r\n  }\r\n\r\n  function getLatLonSegment(\r\n    uint256 _aPoint,\r\n    uint256 _bPoint\r\n  )\r\n    internal\r\n    pure\r\n    returns (int256[2][2] memory)\r\n  {\r\n    return int256[2][2]([\r\n      toLatLonPoint(_aPoint),\r\n      toLatLonPoint(_bPoint)\r\n    ]);\r\n  }\r\n\r\n  function toLatLonPoint(\r\n    uint256 _cPoint\r\n  )\r\n    internal\r\n    pure\r\n    returns (int256[2] memory)\r\n  {\r\n    return CPointUtils.cPointToLatLonArr(_cPoint);\r\n  }\r\n\r\n  function checkForRoomVerticalIntersection(\r\n    uint256[] memory _validContour,\r\n    uint256[] memory _invalidContour,\r\n    int256 _vHP,\r\n    int256 _iHP\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    int256 vLP = getLowestElevation(_validContour);\r\n    int256 iLP = getLowestElevation(_invalidContour);\r\n\r\n    return checkVerticalIntersection(_vHP, vLP, _iHP, iLP);\r\n  }\r\n\r\n  function getLowestElevation(\r\n    uint256[] memory _contour\r\n  )\r\n    internal\r\n    pure\r\n    returns (int256)\r\n  {\r\n    uint256 len = _contour.length;\r\n    require(len > 2, \"Empty contour passed in\");\r\n\r\n    int256 theLowest = CPointUtils.cPointToHeight(_contour[0]);\r\n\r\n    for (uint256 i = 1; i < len; i++) {\r\n      int256 elevation = CPointUtils.cPointToHeight(_contour[i]);\r\n      if (elevation < theLowest) {\r\n        theLowest = elevation;\r\n      }\r\n    }\r\n\r\n    return theLowest;\r\n  }\r\n\r\n  function checkVerticalIntersection(int256 _aHP, int256 _aLP, int256 _bHP, int256 _bLP) internal pure returns (bool) {\r\n    if (_aHP == _bHP && _aLP == _bLP) {\r\n      return true;\r\n    }\r\n\r\n    if (_aHP < _bHP && _aHP > _bLP) {\r\n      return true;\r\n    }\r\n\r\n    if (_bHP < _aHP && _bHP > _aLP) {\r\n      return true;\r\n    }\r\n\r\n    if (_aLP < _bHP && _aLP > _bLP) {\r\n      return true;\r\n    }\r\n\r\n    if (_bLP < _aHP && _bLP > _aLP) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\ncontract PPContourVerificationPublicLib {\r\n  function contourSegmentsIntersects(\r\n    uint256[] memory _contourA,\r\n    uint256[] memory _contourB,\r\n    uint256 _aSegmentFirstPointIndex,\r\n    uint256 _bSegmentFirstPointIndex,\r\n    bool _excludeCollinear\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return PPContourVerificationLib.contourSegmentsIntersects(\r\n      _contourA,\r\n      _contourB,\r\n      _aSegmentFirstPointIndex,\r\n      _bSegmentFirstPointIndex,\r\n      _excludeCollinear\r\n    );\r\n  }\r\n\r\n  function checkForRoomVerticalIntersection(\r\n    uint256[] memory _validContour,\r\n    uint256[] memory _invalidContour,\r\n    int256 _vHP,\r\n    int256 _iHP\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return PPContourVerificationLib.checkForRoomVerticalIntersection(\r\n      _validContour,\r\n      _invalidContour,\r\n      _vHP,\r\n      _iHP\r\n    );\r\n  }\r\n\r\n  function pointInsideContour(\r\n    uint256[] memory _contourA,\r\n    uint256[] memory _contourB,\r\n    uint256 _includingPoint\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return PPContourVerificationLib.pointInsideContour(_contourA, _contourB, _includingPoint);\r\n  }\r\n\r\n  function segmentsAreCollinear(\r\n    uint256 _a1g,\r\n    uint256 _b1g,\r\n    uint256 _a2g,\r\n    uint256 _b2g\r\n  )\r\n    public\r\n    view\r\n    returns(bool)\r\n  {\r\n    return PPContourVerificationLib.segmentsAreCollinear(\r\n      _a1g,\r\n      _b1g,\r\n      _a2g,\r\n      _b2g\r\n    );\r\n  }\r\n\r\n  function getLowestElevation(uint256[] memory _contour) public pure returns (int256) {\r\n    return PPContourVerificationLib.getLowestElevation(_contour);\r\n  }\r\n\r\n  function checkVerticalIntersection(int256 _aHP, int256 _aLP, int256 _bHP, int256 _bLP) public pure returns (bool) {\r\n    return PPContourVerificationLib.checkVerticalIntersection(_aHP, _aLP, _bHP, _bLP);\r\n  }\r\n}\r\ncontract PPContourVerification is Ownable {\r\n  event EnableVerification(uint256 minimalDeposit, uint256 activeFrom);\r\n  event DisableVerification();\r\n  event ReportNoDeposit(address indexed reporter, uint256 token);\r\n  event ReportIntersection(address indexed reporter, uint256 indexed validTokenId, uint256 indexed invalidTokenId);\r\n  event ReportInclusion(address indexed reporter, uint256 indexed validTokenId, uint256 indexed invalidTokenId);\r\n\r\n  bytes32 public constant PPGR_DEPOSIT_HOLDER_KEY = bytes32(\"deposit_holder\");\r\n\r\n  PPContourVerificationPublicLib public lib;\r\n  PPTokenController public controller;\r\n  // 0 if disabled\r\n  uint256 public activeFrom;\r\n  // 0 if disabled, in GALT\r\n  uint256 public minimalDeposit;\r\n  uint256 public minimalTimeout;\r\n  uint256 public newTokenTimeout;\r\n\r\n  modifier onlyActiveVerification() {\r\n    require(activeFrom != 0 && now >= activeFrom, \"Verification is disabled\");\r\n\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    PPTokenController _controller,\r\n    PPContourVerificationPublicLib _lib,\r\n    uint256 _minimalTimeout,\r\n    uint256 _newTokenTimeout\r\n  )\r\n    public\r\n  {\r\n    controller = _controller;\r\n    lib = _lib;\r\n    minimalTimeout = _minimalTimeout;\r\n    newTokenTimeout = _newTokenTimeout;\r\n  }\r\n\r\n  // OWNER INTERFACE\r\n\r\n  function enableVerification(uint256 _minimalDeposit, uint256 _timeout) external onlyOwner {\r\n    require(activeFrom == 0, \"Verification is already enabled\");\r\n    require(_timeout >= minimalTimeout, \"Timeout is not big enough\");\r\n\r\n    uint256 _activeFrom = now + _timeout;\r\n\r\n    minimalDeposit = _minimalDeposit;\r\n    activeFrom = _activeFrom;\r\n\r\n    emit EnableVerification(_minimalDeposit, _activeFrom);\r\n  }\r\n\r\n  function disableVerification() external onlyOwner {\r\n    require(minimalDeposit != 0 && activeFrom != 0, \"Verification is already disabled\");\r\n\r\n    minimalDeposit = 0;\r\n    activeFrom = 0;\r\n\r\n    emit DisableVerification();\r\n  }\r\n\r\n  // PUBLIC INTERFACE\r\n\r\n  function reportNoDeposit(uint256 _tokenId) external onlyActiveVerification {\r\n\r\n    uint256 propertyCreatedAt = _tokenContract().propertyCreatedAt(_tokenId);\r\n    require(now >= propertyCreatedAt + newTokenTimeout, \"newTokenTimeout not passed yet\");\r\n\r\n    require(_tokenContract().exists(_tokenId), \"Token doesn't exist\");\r\n\r\n    address tokenContractAddress = address(_tokenContract());\r\n    IPPDepositHolder depositHolder = _depositHolder();\r\n    bool isSufficient = depositHolder.isInsufficient(tokenContractAddress, _tokenId, minimalDeposit);\r\n\r\n    require(isSufficient == false, \"The deposit is sufficient\");\r\n\r\n    if (depositHolder.balanceOf(tokenContractAddress, _tokenId) > 0) {\r\n      depositHolder.payout(tokenContractAddress, _tokenId, msg.sender);\r\n    }\r\n    controller.reportCVMisbehaviour(_tokenId);\r\n\r\n    emit ReportNoDeposit(msg.sender, _tokenId);\r\n  }\r\n\r\n  function reportInclusion(\r\n    uint256 _validTokenId,\r\n    uint256 _invalidTokenId,\r\n    uint256 _includingPoint\r\n  )\r\n    external\r\n    onlyActiveVerification\r\n  {\r\n    _ensureInvalidity(_validTokenId, _invalidTokenId);\r\n\r\n    IPPToken tokenContract = _tokenContract();\r\n\r\n    uint256[] memory validContour = tokenContract.getContour(_validTokenId);\r\n    uint256[] memory invalidContour = tokenContract.getContour(_invalidTokenId);\r\n\r\n    bool isInside = lib.pointInsideContour(validContour, invalidContour, _includingPoint);\r\n\r\n    if (isInside == true) {\r\n      if (tokenContract.getType(_validTokenId) == IPPToken.TokenType.ROOM) {\r\n        bool uniquenessValidToken = controller.getClaimUniquenessFlag(_validTokenId);\r\n        bool uniquenessInvalidToken = controller.getClaimUniquenessFlag(_invalidTokenId);\r\n        if (!uniquenessValidToken || !uniquenessInvalidToken) {\r\n          _requireVerticalIntersection(_validTokenId, _invalidTokenId, validContour, invalidContour);\r\n        }\r\n      }\r\n    } else {\r\n      revert(\"Inclusion not found\");\r\n    }\r\n\r\n    _depositHolder().payout(address(tokenContract), _invalidTokenId, msg.sender);\r\n    controller.reportCVMisbehaviour(_invalidTokenId);\r\n\r\n    emit ReportInclusion(msg.sender, _validTokenId, _invalidTokenId);\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _tokenContract() internal returns (IPPToken) {\r\n    return controller.tokenContract();\r\n  }\r\n\r\n  function _depositHolder() internal view returns(IPPDepositHolder) {\r\n    return IPPDepositHolder(controller.globalRegistry().getContract(PPGR_DEPOSIT_HOLDER_KEY));\r\n  }\r\n\r\n  function _requireVerticalIntersection(\r\n    uint256 _validTokenId,\r\n    uint256 _invalidTokenId,\r\n    uint256[] memory _validContour,\r\n    uint256[] memory _invalidContour\r\n  )\r\n    internal\r\n  {\r\n    IPPToken tokenContract = controller.tokenContract();\r\n\r\n    require(\r\n      lib.checkForRoomVerticalIntersection(\r\n        _validContour,\r\n        _invalidContour,\r\n        tokenContract.getHighestPoint(_validTokenId),\r\n        tokenContract.getHighestPoint(_invalidTokenId)\r\n      ) == true,\r\n      \"Contour intersects, but not the heights\"\r\n    );\r\n  }\r\n\r\n  function _ensureInvalidity(uint256 _validToken, uint256 _invalidToken) internal {\r\n    IPPToken tokenContract = controller.tokenContract();\r\n\r\n    require(tokenContract.exists(_validToken) == true, \"Valid token doesn't exist\");\r\n    require(tokenContract.exists(_invalidToken) == true, \"Invalid token doesn't exist\");\r\n\r\n    IPPToken.TokenType validTokenType = tokenContract.getType(_validToken);\r\n    require(\r\n      validTokenType == tokenContract.getType(_invalidToken),\r\n      \"Tokens type mismatch\"\r\n    );\r\n\r\n    bool uniquenessValidToken = controller.getClaimUniquenessFlag(_validToken);\r\n    bool uniquenessInvalidToken = controller.getClaimUniquenessFlag(_invalidToken);\r\n\r\n    if (uniquenessValidToken && uniquenessInvalidToken && validTokenType == IPPToken.TokenType.ROOM) {\r\n      bytes32 validHumanAddressHash = keccak256(abi.encodePacked(tokenContract.getHumanAddress(_validToken)));\r\n      bytes32 invalidHumanAddressHash = keccak256(abi.encodePacked(tokenContract.getHumanAddress(_invalidToken)));\r\n      require(validHumanAddressHash == invalidHumanAddressHash, \"Both tokens have uniqueness flag and different human addresses\");\r\n    }\r\n\r\n    uint256 validLatestTimestamp = controller.getContourUpdatedAt(_validToken);\r\n    if (validLatestTimestamp == 0) {\r\n      validLatestTimestamp = tokenContract.propertyCreatedAt(_validToken);\r\n    }\r\n    assert(validLatestTimestamp > 0);\r\n\r\n    uint256 invalidLatestTimestamp = controller.getContourUpdatedAt(_invalidToken);\r\n    if (invalidLatestTimestamp == 0) {\r\n      invalidLatestTimestamp = tokenContract.propertyCreatedAt(_invalidToken);\r\n    }\r\n    assert(invalidLatestTimestamp > 0);\r\n\r\n    // Matching timestamps\r\n    require(\r\n      invalidLatestTimestamp >= validLatestTimestamp,\r\n      // solium-disable-next-line error-reason\r\n      \"Expression 'invalidTimestamp >= validTimestamp' doesn't satisfied\"\r\n    );\r\n  }\r\n}\r\n\r\ncontract PPContourVerificationFactory {\r\n  event NewPPContourVerification(address contourVerificationContract);\r\n\r\n  PPContourVerificationPublicLib public lib;\r\n\r\n  constructor(PPContourVerificationPublicLib _lib) public {\r\n    lib = _lib;\r\n  }\r\n\r\n  function build(\r\n    PPTokenController _controller,\r\n    uint256 _minimalTimeout,\r\n    uint256 _newTokenTimeout\r\n  )\r\n    external\r\n    returns (PPContourVerification)\r\n  {\r\n    PPContourVerification cv = new PPContourVerification(_controller, lib, _minimalTimeout, _newTokenTimeout);\r\n\r\n    emit NewPPContourVerification(address(cv));\r\n\r\n    cv.transferOwnership(msg.sender);\r\n\r\n    return cv;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract PPContourVerificationPublicLib\",\"name\":\"_lib\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contourVerificationContract\",\"type\":\"address\"}],\"name\":\"NewPPContourVerification\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PPTokenController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimalTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTokenTimeout\",\"type\":\"uint256\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"contract PPContourVerification\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lib\",\"outputs\":[{\"internalType\":\"contract PPContourVerificationPublicLib\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PPContourVerificationFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008ef1f0d76c06b5a38a8e9997b7fe0b00e64ec3ba","Library":"","LicenseType":"None","SwarmSource":"bzzr://9a1c1530e3301574133da3f68c8c0839d11d96d5aef07bf11e3c363cdd055a71"}]}