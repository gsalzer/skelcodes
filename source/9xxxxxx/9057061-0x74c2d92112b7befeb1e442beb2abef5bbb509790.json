{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    function sq(uint256 x) internal pure returns (uint256) {\r\n        return (mul(x,x));\r\n    }\r\n    function pwr(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Token {\r\n  function balanceOf(address owner) public returns (uint256);\r\n  function transfer(address to, uint256 tokens) public returns (bool);\r\n  function transferFrom(address from, address to, uint256 tokens) public returns(bool);\r\n}\r\n\r\ncontract DeFi {\r\n  using SafeMath for uint256;\r\n\r\n  address public admin = msg.sender;\r\n  address public zeroAddr = address(0);\r\n  address public metContractAddr = 0x686e5ac50D9236A9b7406791256e47feDDB26AbA;\r\n  address public metTokenAddr = 0xa3d58c4E56fedCae3a7c43A725aeE9A71F0ece4e;\r\n\r\n  uint256 public delta;\r\n  uint256 public baseRate;\r\n\r\n  struct Market {\r\n    uint256 marketOpen;\r\n    uint256 totalLoans;\r\n    uint256 totalPaidLoans;\r\n    uint256 totalCollateral;\r\n    uint256 totalUsedCollateral;\r\n    uint256 totalLoanBlocks;\r\n    uint256 totalPaidLoanBlocks;\r\n    uint256 totalPoolSize;\r\n    uint256 totalPoolWithdrawals;\r\n  }\r\n\r\n  struct Lender {\r\n    uint256 balance;\r\n    uint256 checkpoint;\r\n  }\r\n\r\n  struct Borrower {\r\n    uint256 totalLoans;\r\n    uint256 checkpoint;\r\n  }\r\n\r\n  struct Collateral {\r\n    uint256 balance;\r\n    uint256 checkpoint;\r\n  }\r\n\r\n  mapping(address => Market) public markets;\r\n  mapping(address => mapping(address => Lender)) public lenders;\r\n  mapping(address => mapping(address => Borrower)) public borrowers;\r\n  mapping(address => mapping(address => Collateral)) public collateral;\r\n\r\n  modifier onlyAdmin() {\r\n      require(msg.sender == admin);\r\n      _;\r\n  }\r\n\r\n  constructor(uint256 _delta, uint256 _baseRate) public {\r\n    delta = _delta;\r\n    baseRate = _baseRate;\r\n  }\r\n\r\n  function withdrawArbitraryToken(address _token, uint256 _amount) public onlyAdmin() {\r\n    require(_token != metTokenAddr);\r\n     require(Token(_token).transfer(admin, _amount));\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) private {\r\n    require(Token(metTokenAddr).transferFrom(_from,_to,_amount));\r\n  }\r\n\r\n  function transfer(address _to, uint256 _amount) private {\r\n    require(Token(metTokenAddr).transfer(_to,_amount));\r\n  }\r\n\r\n  function getMetPrice() public returns(uint256) {\r\n    uint256 ethBalance_ = address(metContractAddr).balance;\r\n    uint256 tokenBalance_ = Token(metTokenAddr).balanceOf(metContractAddr);\r\n    require(tokenBalance_ > 0, \"ERROR\");\r\n    return ((tokenBalance_.mul(1e18)).div(ethBalance_)).div(1e18);\r\n  }\r\n\r\n  function getMarketInterestRate(address _token) public view returns(uint256) {\r\n    uint256 netCollateral_ = markets[_token].totalCollateral.sub(markets[_token].totalUsedCollateral);\r\n    uint256 netPoolSize_ = markets[_token].totalPoolSize.sub(markets[_token].totalPoolWithdrawals);\r\n    uint256 netLoans_ = markets[_token].totalLoans.sub(markets[_token].totalPaidLoans);\r\n    uint256 utilizationRatio_ = (netLoans_.mul(1e18))\r\n                                          .div((netPoolSize_.add(netCollateral_)).add(netLoans_))\r\n                                          .div(1e18);\r\n    return baseRate.add(utilizationRatio_.mul(delta));\r\n  }\r\n\r\n  function getTotalInterest(address _token) public view returns(uint256) {\r\n    uint256 netLoans_ = markets[_token].totalLoans.sub(markets[_token].totalPaidLoans);\r\n    uint256 netLoansBlocks_ = markets[_token].totalLoanBlocks.sub(markets[_token].totalPaidLoanBlocks);\r\n    uint256 interestRate_ = getMarketInterestRate(_token);\r\n    uint256 compoundedRate_ = (uint256(1).add(interestRate_.div(2102400))\r\n                                         .pwr(netLoansBlocks_));\r\n    return netLoans_.mul(compoundedRate_);\r\n  }\r\n\r\n  function getLenderInterest(address _token, uint256 _amount) public view returns(uint256) {\r\n    uint256 totalInterest_ = getTotalInterest(_token);\r\n    uint256 lenderBalance_ = lenders[msg.sender][_token].balance;\r\n    uint256 netBorrowingBlocks_ = block.number.sub(markets[_token].marketOpen);\r\n    uint256 numOfBlocksLender_ = block.number.sub(lenders[msg.sender][_token].checkpoint);\r\n    uint256 nOfBlocksAdjusted_ = (_amount.mul(numOfBlocksLender_)).div(lenderBalance_);\r\n    uint256 netPoolSize_ = markets[_token].totalPoolSize.sub(markets[_token].totalPoolWithdrawals);\r\n    uint256 netCollateral_ = markets[_token].totalCollateral\r\n                             .sub(markets[_token].totalUsedCollateral);\r\n    uint256 totalPool_ = netPoolSize_.add(netCollateral_);\r\n    uint256 userInterest_ = (totalInterest_.div(netBorrowingBlocks_))\r\n                             .mul(nOfBlocksAdjusted_)\r\n                             .mul(lenderBalance_.div(totalPool_));\r\n    return userInterest_;\r\n  }\r\n\r\n  function getCollateralInterest(address _token, uint256 _amount) public view returns(uint256) {\r\n    uint256 totalInterest_ = getTotalInterest(_token);\r\n    uint256 netCollateral_ = markets[_token].totalCollateral\r\n                             .sub(markets[_token].totalUsedCollateral);\r\n    uint256 lenderCollateral_ = collateral[msg.sender][_token].balance;\r\n    uint256 netBorrowingBlocks_ = block.number.sub(markets[_token].marketOpen);\r\n    uint256 numOfBlocksCollateral_ = block.number.sub(collateral[msg.sender][_token].checkpoint);\r\n    uint256 nOfBlocksAdjusted_ = (_amount.mul(numOfBlocksCollateral_)).div(lenderCollateral_);\r\n    uint256 netPoolSize_ = markets[_token].totalPoolSize.sub(markets[_token].totalPoolWithdrawals);\r\n    uint256 totalPool_ = netPoolSize_.add(netCollateral_);\r\n    uint256 userInterest_ = (totalInterest_.div(netBorrowingBlocks_))\r\n                             .mul(nOfBlocksAdjusted_)\r\n                             .mul(lenderCollateral_.div(totalPool_));\r\n    return userInterest_;\r\n  }\r\n\r\n  function loansAreCollateralized(address _token) public returns(bool) {\r\n    uint256 metPrice_ = getMetPrice();\r\n    address borrowToken_ = _token == zeroAddr ? metTokenAddr : zeroAddr;\r\n    uint256 amountBorrowed_ = borrowers[msg.sender][_token].totalLoans;\r\n    uint256 outstandingLoans_ = borrowToken_ == metTokenAddr ? amountBorrowed_.div(metPrice_) : amountBorrowed_.mul(metPrice_);\r\n    uint256 totalCollateral_ = getCollateralValue(msg.sender, metTokenAddr);\r\n    return totalCollateral_ > (outstandingLoans_.mul(15e17)).div(1e18);\r\n  }\r\n\r\n  function withdrawCollateral(address _token, uint256 _amount) public {\r\n    require(loansAreCollateralized(_token));\r\n    uint256 collateral_ = collateral[msg.sender][_token].balance;\r\n    require(_amount <= collateral_);\r\n    uint256 netCollateral_ = markets[_token].totalCollateral\r\n                             .sub(markets[_token].totalUsedCollateral.add(_amount));\r\n    uint256 netPoolSize_ = markets[_token].totalPoolSize\r\n                           .sub(markets[_token].totalPoolWithdrawals);\r\n    uint256 totalPool_ = netPoolSize_.add(netCollateral_);\r\n    if(totalPool_ == 0) {\r\n      markets[_token].marketOpen = 0;\r\n    }\r\n    uint256 accruedInterest_ = getCollateralInterest(_token, _amount);\r\n    uint256 totalWithdrawal_ = _amount.add(accruedInterest_);\r\n    uint256 checkpoint_ = collateral[msg.sender][_token].checkpoint;\r\n    uint256 numOfBlocksCollateral_ = block.number.sub(checkpoint_);\r\n    uint256 nOfBlocksAdjusted_ = (_amount.mul(numOfBlocksCollateral_)).div(collateral_);\r\n    collateral[msg.sender][_token].balance = collateral_.sub(_amount);\r\n    collateral[msg.sender][_token].checkpoint = checkpoint_.add(nOfBlocksAdjusted_);\r\n    markets[_token].totalUsedCollateral = markets[_token].totalUsedCollateral.add(_amount);\r\n    if(_token == zeroAddr) {\r\n        (bool success, ) = msg.sender.call.value(totalWithdrawal_)(\"\");\r\n        if(!success) {\r\n            revert();\r\n        }\r\n    }\r\n    else {\r\n        transfer(msg.sender, totalWithdrawal_);\r\n    }\r\n  }\r\n\r\n  function withdraw(address _token, uint256 _amount) public {\r\n    uint256 balance_ = lenders[msg.sender][_token].balance;\r\n    require(_amount <= balance_);\r\n    uint256 netCollateral_ = markets[_token].totalCollateral\r\n                             .sub(markets[_token].totalUsedCollateral);\r\n    uint256 netPoolSize_ = markets[_token].totalPoolSize\r\n                           .sub(markets[_token].totalPoolWithdrawals.add(_amount));\r\n    if(netPoolSize_.add(netCollateral_) == 0) {\r\n      markets[_token].marketOpen = 0;\r\n    }\r\n    uint256 accruedInterest_ = getLenderInterest(_token, _amount);\r\n    uint256 totalWithdrawal_ = _amount.add(accruedInterest_);\r\n    uint256 checkpoint_ = lenders[msg.sender][_token].checkpoint;\r\n    uint256 numOfBlocksLender_ = block.number.sub(checkpoint_);\r\n    uint256 nOfBlocksAdjusted_ = (_amount.mul(numOfBlocksLender_)).div(balance_);\r\n    lenders[msg.sender][_token].balance = balance_.sub(_amount);\r\n    lenders[msg.sender][_token].checkpoint = checkpoint_.add(nOfBlocksAdjusted_);\r\n    markets[_token].totalPoolWithdrawals = markets[_token].totalPoolWithdrawals.add(_amount);\r\n    if(_token == zeroAddr) {\r\n        (bool success, ) = msg.sender.call.value(totalWithdrawal_)(\"\");\r\n        if(!success) {\r\n            revert();\r\n        }\r\n    }\r\n    else {\r\n        transfer(msg.sender, totalWithdrawal_);\r\n    }\r\n  }\r\n\r\n  function initMarketOpen(address _token) private {\r\n    if(markets[_token].marketOpen == 0) {\r\n      markets[_token].marketOpen = block.number;\r\n    }\r\n  }\r\n\r\n  function initLenderCheckpoint(address _token) private {\r\n    if(lenders[msg.sender][_token].checkpoint == 0) {\r\n      lenders[msg.sender][_token].checkpoint = block.number;\r\n    }\r\n  }\r\n\r\n  function initCollateralCheckpoint(address _token) private {\r\n    if(collateral[msg.sender][_token].checkpoint == 0) {\r\n       collateral[msg.sender][_token].checkpoint = block.number;\r\n     }\r\n }\r\n\r\n   function initBorrowerCheckpoint(address _token) private {\r\n     if(borrowers[msg.sender][_token].checkpoint == 0) {\r\n        borrowers[msg.sender][_token].checkpoint = block.number;\r\n      }\r\n  }\r\n\r\n  function addEthToPool() private {\r\n    lenders[msg.sender][zeroAddr].balance = lenders[msg.sender][zeroAddr].balance.add(msg.value);\r\n    markets[zeroAddr].totalPoolSize = markets[zeroAddr].totalPoolSize.add(msg.value);\r\n  }\r\n\r\n  function addMetToPool(uint256 _amount) private {\r\n    lenders[msg.sender][metTokenAddr].balance = lenders[msg.sender][metTokenAddr].balance.add(_amount);\r\n    markets[metTokenAddr].totalPoolSize = markets[metTokenAddr].totalPoolSize.add(_amount);\r\n    transferFrom(msg.sender, address(this), _amount);\r\n  }\r\n\r\n  function lendEth() public payable {\r\n    initMarketOpen(zeroAddr);\r\n    initLenderCheckpoint(zeroAddr);\r\n    addEthToPool();\r\n  }\r\n\r\n  function lendMet(uint256 _amount) public {\r\n    initMarketOpen(metTokenAddr);\r\n    initLenderCheckpoint(metTokenAddr);\r\n    addMetToPool(_amount);\r\n  }\r\n\r\n  function addMetLoans(uint256 _amount) private {\r\n   borrowers[msg.sender][metTokenAddr].totalLoans = borrowers[msg.sender][metTokenAddr].totalLoans.add(_amount);\r\n   markets[metTokenAddr].totalLoans = markets[metTokenAddr].totalLoans.add(_amount);\r\n  }\r\n\r\n  function addEthLoans() private {\r\n   borrowers[msg.sender][zeroAddr].totalLoans = borrowers[msg.sender][zeroAddr].totalLoans.add(msg.value);\r\n   markets[zeroAddr].totalLoans = markets[zeroAddr].totalLoans.add(msg.value);\r\n  }\r\n\r\n  function addEthCollateralToPool() private {\r\n    collateral[msg.sender][zeroAddr].balance = collateral[msg.sender][zeroAddr].balance.add(msg.value);\r\n    markets[zeroAddr].totalCollateral = markets[zeroAddr].totalCollateral.add(msg.value);\r\n  }\r\n\r\n  function addMetCollateralToPool(uint256 _amount) private {\r\n    collateral[msg.sender][metTokenAddr].balance = collateral[msg.sender][metTokenAddr].balance.add(_amount);\r\n    markets[metTokenAddr].totalCollateral = markets[metTokenAddr].totalCollateral.add(_amount);\r\n  }\r\n\r\n  function addMetCollateral(uint256 _amount) public {\r\n    addMetCollateralToPool(_amount);\r\n    initCollateralCheckpoint(metTokenAddr);\r\n    transferFrom(msg.sender, address(this), _amount);\r\n  }\r\n\r\n  function addEthCollateral() public {\r\n    addEthCollateralToPool();\r\n    initCollateralCheckpoint(zeroAddr);\r\n  }\r\n\r\n  function borrowEth(uint256 _amount) public {\r\n    uint256 metPrice_ = getMetPrice();\r\n    uint256 collateral_ = borrowers[msg.sender][zeroAddr].totalLoans;\r\n    uint256 interest_ = getCollateralInterest(zeroAddr, collateral_);\r\n    uint256 totalCollateral_ = collateral_.add(interest_);\r\n    uint256 collateralRequirement_ = ((_amount.div(metPrice_)).mul(15e17)).div(1e18);\r\n    require(totalCollateral_ >= collateralRequirement_);\r\n    initBorrowerCheckpoint(zeroAddr);\r\n    addEthLoans();\r\n  }\r\n\r\n  function borrowMet(uint256 _amount) public {\r\n    uint256 metPrice_ = getMetPrice();\r\n    uint256 collateral_ = borrowers[msg.sender][metTokenAddr].totalLoans;\r\n    uint256 interest_ = getCollateralInterest(metTokenAddr, collateral_);\r\n    uint256 totalCollateral_ = collateral_.add(interest_);\r\n    uint256 collateralRequirement_ = ((_amount.mul(metPrice_)).mul(15e17)).div(1e18);\r\n    require(totalCollateral_ >= collateralRequirement_);\r\n    initBorrowerCheckpoint(metTokenAddr);\r\n    addMetLoans(_amount);\r\n  }\r\n\r\n  function getOwedInterest(address _token) public view returns(uint256) {\r\n    uint256 balance_ = borrowers[msg.sender][_token].totalLoans;\r\n    uint256 numberOfBlocksBorrower_ = block.number.sub(borrowers[msg.sender][_token].checkpoint);\r\n    uint256 interestRate_ = getMarketInterestRate(_token);\r\n    uint256 compoundedRate_ = (uint256(1).add(interestRate_.div(2102400))\r\n                                         .pwr(numberOfBlocksBorrower_));\r\n    return balance_.mul(compoundedRate_);\r\n  }\r\n\r\n  function getOwedInterestPartial(address _token, uint256 _amount) public view returns(uint256) {\r\n    uint256 balance_ = borrowers[msg.sender][_token].totalLoans;\r\n    require(_amount <= balance_);\r\n    uint256 checkpoint_ = borrowers[msg.sender][_token].checkpoint;\r\n    uint256 numberOfBlocksBorrower_ = block.number.sub(checkpoint_);\r\n    uint256 nOfBlocksAdjusted_ = (_amount.div(balance_)).mul(numberOfBlocksBorrower_);\r\n    uint256 interestRate_ = getMarketInterestRate(_token);\r\n    uint256 compoundedRate_ = (uint256(1).add(interestRate_.div(2102400))\r\n                                       .pwr(nOfBlocksAdjusted_));\r\n    return _amount.mul(compoundedRate_);\r\n  }\r\n\r\n  function updateLoansStatus(address _token, uint256 _amount) private {\r\n    uint256 loanAmount_ = borrowers[msg.sender][_token].totalLoans;\r\n    uint256 netBlocks_ = block.number.sub(borrowers[msg.sender][_token].checkpoint);\r\n    uint256 adjustedNetBlocks_ = (_amount.mul(netBlocks_)).div(loanAmount_);\r\n    markets[_token].totalPaidLoans = markets[_token].totalPaidLoans.add(_amount);\r\n    markets[_token].totalLoanBlocks = markets[_token].totalLoanBlocks.add(adjustedNetBlocks_);\r\n    borrowers[msg.sender][_token].checkpoint = borrowers[msg.sender][_token].checkpoint.add(adjustedNetBlocks_);\r\n  }\r\n\r\n  function repayEth(uint256 _amount) public payable {\r\n    uint256 accruedInterest_ = getOwedInterestPartial(zeroAddr, _amount);\r\n    uint256 totalRepayment_ = _amount.add(accruedInterest_);\r\n    require(msg.value == totalRepayment_);\r\n    updateLoansStatus(zeroAddr, _amount);\r\n  }\r\n\r\n  function repayMet(uint256 _amount) public {\r\n    uint256 accruedInterest_ = getOwedInterestPartial(metTokenAddr, _amount);\r\n    uint256 totalRepayment_ = _amount.add(accruedInterest_);\r\n    updateLoansStatus(metTokenAddr, _amount);\r\n    transferFrom(msg.sender, address(this), totalRepayment_);\r\n  }\r\n\r\n  function updateLiquidatedLoansStatus(address _borrower, address _token) private {\r\n    uint256 balance_ = borrowers[_borrower][_token].totalLoans;\r\n    uint256 collateral_ = collateral[_borrower][_token].balance;\r\n    uint256 netBlocks_ = block.number.sub(borrowers[_borrower][_token].checkpoint);\r\n    borrowers[_borrower][_token].totalLoans = 0;\r\n    collateral[_borrower][_token].balance = 0;\r\n    borrowers[_borrower][_token].checkpoint = 0;\r\n    collateral[_borrower][_token].checkpoint = 0;\r\n    markets[_token].totalPaidLoans = markets[_token].totalPaidLoans.add(balance_);\r\n    markets[_token].totalLoanBlocks = markets[_token].totalLoanBlocks.add(netBlocks_);\r\n    markets[_token].totalUsedCollateral = markets[_token].totalUsedCollateral.add(collateral_);\r\n  }\r\n\r\n  function getCollateralValue(address _borrower, address _token) public view returns(uint256) {\r\n    uint256 collateral_ = collateral[_borrower][_token].balance;\r\n    uint256 interest_ = getCollateralInterest(_token, collateral_);\r\n    uint256 totalCollateral_ = collateral_.add(interest_);\r\n    return totalCollateral_;\r\n  }\r\n\r\n  function liquidateEth(address _borrower) public {\r\n    uint256 metPrice_ = getMetPrice();\r\n    uint256 amountBorrowed_ = borrowers[_borrower][zeroAddr].totalLoans;\r\n    uint256 totalCollateral_ = getCollateralValue(_borrower, metTokenAddr);\r\n    require(totalCollateral_ < ((amountBorrowed_.mul(metPrice_)).mul(15e17)).div(1e18));\r\n    uint256 fee_ = amountBorrowed_.div(20);\r\n    updateLiquidatedLoansStatus(_borrower, zeroAddr);\r\n    transfer(msg.sender, fee_);\r\n    transfer(_borrower, totalCollateral_.sub(fee_));\r\n  }\r\n\r\n  function liquidateMet(address payable _borrower) public {\r\n    uint256 metPrice_ = getMetPrice();\r\n    uint256 amountBorrowed_ = borrowers[_borrower][metTokenAddr].totalLoans;\r\n    uint256 totalCollateral_ = getCollateralValue(_borrower, zeroAddr);\r\n    require(totalCollateral_ < ((amountBorrowed_.div(metPrice_)).mul(15e17)).div(1e18));\r\n    uint256 fee_ = amountBorrowed_.div(20);\r\n    updateLiquidatedLoansStatus(_borrower, metTokenAddr);\r\n    (bool collateralSent, ) = _borrower.call.value(totalCollateral_.sub(fee_))(\"\");\r\n    if(!collateralSent) {\r\n      revert();\r\n    } else {\r\n        (bool feeSent, ) =  msg.sender.call.value(fee_)(\"\");\r\n        if(!feeSent) {\r\n            revert();\r\n        }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"loansAreCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCollateralInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOwedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidateEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTotalInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLenderInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lendEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLoanBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidLoanBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoolWithdrawals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidateMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zeroAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMarketInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addMetCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getOwedInterestPartial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEthCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metContractAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawArbitraryToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lendMet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DeFi","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000000008e1bc9bf040000","Library":"","LicenseType":"None","SwarmSource":"bzzr://cdacbea72fe61d230a6a452a83ed5bfe49e9411417aeeba6bba42417d2a424d7"}]}