{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the Nordic Energy smart contract.\r\n     * @notice Renouncing to ownership will leave the smart contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the smart contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the smart contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of Nordic Energy tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of Nordic Energy tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of Nordic Energy tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer Nordic Energy token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of Nordic Energy tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of Nordic Energy tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer Nordic Energy tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of Nordic Energy tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of Nordic Energy tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of Nordic Energy tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of Nordic Energy tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of Nordic Energy tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer Nordic Energy token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the Nordic Energy token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created Nordic Energy tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the Nordic Energy token of a given\r\n     * account.\r\n     * @param account The account whose Nordic Energy tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the Nordic Energy token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose Nordic Energy tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Burns a specific amount of Nordic Energy tokens.\r\n     * @param value The amount of Nordic Energy token to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n        _burn(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of Nordic Energy tokens from the target address and decrements allowance\r\n     * @param from address The address which you want to send tokens from\r\n     * @param value uint256 The amount of Nordic Energy token to be burned\r\n     */\r\n    function burnFrom(address from, uint256 value) public {\r\n        _burnFrom(from, value);\r\n    }\r\n}\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the smart contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Pausable is ERC20, Pausable {\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n}\r\n\r\n\r\ncontract MintableAndPausableToken is ERC20Pausable, Ownable {\r\n    uint8 public constant decimals = 18;\r\n    uint256 public maxTokenSupply = 185000000 * 10 ** uint256(decimals);\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    event MintStarted();\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier checkMaxSupply(uint256 _amount) {\r\n        require(maxTokenSupply >= totalSupply().add(_amount));\r\n        _;\r\n    }\r\n\r\n    modifier cannotMint() {\r\n        require(mintingFinished);\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n        canMint\r\n        checkMaxSupply (_amount)\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        super._mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount)\r\n        internal\r\n        canMint\r\n        checkMaxSupply (_amount)\r\n    {\r\n        super._mint(_to, _amount);\r\n    }\r\n\r\n    function finishMinting() external onlyOwner canMint returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function startMinting() external onlyOwner cannotMint returns (bool) {\r\n        mintingFinished = false;\r\n        emit MintStarted();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Token upgrader interface inspired by Lunyr.\r\n *\r\n * Token upgrader transfers previous version Nordic Energy tokens to a newer version.\r\n * Token upgrader itself can be the Nordic Energy token smart contract, or just a middle man contract doing the heavy lifting.\r\n */\r\ncontract TokenUpgrader {\r\n    uint public originalSupply;\r\n\r\n    /** Interface marker */\r\n    function isTokenUpgrader() external pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\n\r\n\r\ncontract UpgradeableToken is MintableAndPausableToken {\r\n    // Contract or person who can set the upgrade path.\r\n    address public upgradeMaster;\r\n    \r\n    // Bollean value needs to be true to start upgrades\r\n    bool private upgradesAllowed;\r\n\r\n    // The next smart contract where the Nordic Energy tokens will be migrated.\r\n    TokenUpgrader public tokenUpgrader;\r\n\r\n    // How many Nordic Energy tokens we have upgraded by now.\r\n    uint public totalUpgraded;\r\n\r\n    /**\r\n    * Upgrade states.\r\n    * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\r\n    * - Waiting: Nordic Energy allows upgrade, but we don't have a new Nordic Energy token version\r\n    * - ReadyToUpgrade: The Nordic Energy token version is set, but not a single Nordic Energy token has been upgraded yet\r\n    * - Upgrading: Nordic Energy token upgrader is set and the balance holders can upgrade Nordic Energy tokens\r\n    */\r\n    enum UpgradeState { NotAllowed, Waiting, ReadyToUpgrade, Upgrading }\r\n\r\n    // Somebody has upgraded some of his Nordic Energy tokens.\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // New token version available.\r\n    event TokenUpgraderIsSet(address _newToken);\r\n\r\n    modifier onlyUpgradeMaster {\r\n        // Only a master can designate the next token\r\n        require(msg.sender == upgradeMaster);\r\n        _;\r\n    }\r\n\r\n    modifier notInUpgradingState {\r\n        // Upgrade has already begun for Nordic Energy token\r\n        require(getUpgradeState() != UpgradeState.Upgrading);\r\n        _;\r\n    }\r\n\r\n    // Do not allow construction without upgrade master set.\r\n    constructor(address _upgradeMaster) public {\r\n        upgradeMaster = _upgradeMaster;\r\n    }\r\n\r\n    // set a Nordic Energy token upgrader\r\n    function setTokenUpgrader(address _newToken)\r\n        external\r\n        onlyUpgradeMaster\r\n        notInUpgradingState\r\n    {\r\n        require(canUpgrade());\r\n        require(_newToken != address(0));\r\n\r\n        tokenUpgrader = TokenUpgrader(_newToken);\r\n\r\n        // Handle bad interface\r\n        require(tokenUpgrader.isTokenUpgrader());\r\n\r\n        // Make sure that Nordic Energy token supplies match in source and target\r\n        require(tokenUpgrader.originalSupply() == totalSupply());\r\n\r\n        emit TokenUpgraderIsSet(address(tokenUpgrader));\r\n    }\r\n\r\n    // Allow the Nordic Energy token holder to upgrade some of our tokens to a new smart contract.\r\n    function upgrade(uint _value) external {\r\n        UpgradeState state = getUpgradeState();\r\n        \r\n        // Check upgrate state \r\n        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\r\n        // Validate input value\r\n        require(_value != 0);\r\n\r\n        //balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // Take Nordic Energy tokens out from circulation\r\n        //totalSupply_ = totalSupply_.sub(_value);\r\n        //the _burn method emits the Transfer event\r\n        _burn(msg.sender, _value);\r\n\r\n        totalUpgraded = totalUpgraded.add(_value);\r\n\r\n        // Token Upgrader reissues the Nordic Energy tokens\r\n        tokenUpgrader.upgradeFrom(msg.sender, _value);\r\n        emit Upgrade(msg.sender, address(tokenUpgrader), _value);\r\n    }\r\n\r\n    /**\r\n    * Change the upgrade master.\r\n    * This allows us to set a new owner for the upgrade mechanism.\r\n    */\r\n    function setUpgradeMaster(address _newMaster) external onlyUpgradeMaster {\r\n        require(_newMaster != address(0));\r\n        upgradeMaster = _newMaster;\r\n    }\r\n\r\n    // To be overriden to add functionality\r\n    function allowUpgrades() external onlyUpgradeMaster () {\r\n        upgradesAllowed = true;\r\n    }\r\n\r\n    // To be overriden to add functionality\r\n    function rejectUpgrades() external onlyUpgradeMaster () {\r\n        require(!(totalUpgraded > 0));\r\n        upgradesAllowed = false;\r\n    }\r\n\r\n    // Get the state of the Nordic Energy token upgrade.\r\n    function getUpgradeState() public view returns(UpgradeState) {\r\n        if (!canUpgrade()) return UpgradeState.NotAllowed;\r\n        else if (address(tokenUpgrader) == address(0)) return UpgradeState.Waiting;\r\n        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\r\n        else return UpgradeState.Upgrading;\r\n    }\r\n\r\n    // To be overriden to add functionality\r\n    function canUpgrade() public view returns(bool) {\r\n        return upgradesAllowed;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Token is UpgradeableToken, ERC20Burnable {\r\n    string public name;\r\n    string public symbol;\r\n\r\n    // For patient incentive programs\r\n    uint256 public INITIAL_SUPPLY;\r\n    uint256 public holdPremiumCap;\r\n    uint256 public holdPremiumMinted;\r\n\r\n    // After 180 days you get a constant maximum bonus of 25% of Nordic Energy tokens transferred\r\n    // Before that it is spread out linearly(from 0% to 25%) starting from the\r\n    // contribution time till 180 days after that\r\n    uint256 constant maxBonusDuration = 180 days;\r\n\r\n    struct Bonus {\r\n        uint256 holdTokens;\r\n        uint256 contributionTime;\r\n        uint256 buybackTokens;\r\n    }\r\n\r\n    mapping( address => Bonus ) public holdPremium;\r\n\r\n    IERC20 stablecoin;\r\n    address stablecoinPayer;\r\n\r\n    uint256 public signupWindowStart;\r\n    uint256 public signupWindowEnd;\r\n\r\n    uint256 public refundWindowStart;\r\n    uint256 public refundWindowEnd;\r\n\r\n    event UpdatedTokenInformation(string newName, string newSymbol);\r\n    event holdPremiumSet(address beneficiary, uint256 tokens, uint256 contributionTime);\r\n    event holdPremiumCapSet(uint256 newholdPremiumCap);\r\n    event RegisteredForRefund( address holder, uint256 tokens );\r\n\r\n    constructor (address _litWallet, address _upgradeMaster, uint256 _INITIAL_SUPPLY, uint256 _holdPremiumCap)\r\n        public\r\n        UpgradeableToken(_upgradeMaster)\r\n        Ownable()\r\n    {\r\n        require(maxTokenSupply >= _INITIAL_SUPPLY.mul(10 ** uint256(decimals)));\r\n        INITIAL_SUPPLY = _INITIAL_SUPPLY.mul(10 ** uint256(decimals));\r\n        setholdPremiumCap(_holdPremiumCap)  ;\r\n        _mint(_litWallet, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n    * Owner can update Nordic Energy token/stablecoin information here\r\n    */\r\n    function setTokenInformation(string calldata _name, string calldata _symbol) external onlyOwner {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        emit UpdatedTokenInformation(name, symbol);\r\n    }\r\n\r\n    function setRefundSignupDetails( uint256 _startTime,  uint256 _endTime, ERC20 _stablecoin, address _payer ) public onlyOwner {\r\n        require( _startTime < _endTime );\r\n        stablecoin = _stablecoin;\r\n        stablecoinPayer = _payer;\r\n        signupWindowStart = _startTime;\r\n        signupWindowEnd = _endTime;\r\n        refundWindowStart = signupWindowStart + 182 days;\r\n        refundWindowEnd = signupWindowEnd + 182 days;\r\n        require( refundWindowStart > signupWindowEnd);\r\n    }\r\n\r\n    function signUpForRefund( uint256 _value ) public {\r\n        require( holdPremium[msg.sender].holdTokens != 0 || holdPremium[msg.sender].buybackTokens != 0, \"You must be ICO/STOs user to sign up\" ); //the user was registered in ICO/STOs\r\n        require( block.timestamp >= signupWindowStart&& block.timestamp <= signupWindowEnd, \"Cannot sign up at this time\" );\r\n        uint256 value = _value;\r\n        value = value.add(holdPremium[msg.sender].buybackTokens);\r\n\r\n        if( value > balanceOf(msg.sender)) //cannot register more than he or she has; since refund has to happen while Nordic Energy token is paused, we don't need to check anything else\r\n            value = balanceOf(msg.sender);\r\n\r\n        holdPremium[ msg.sender].buybackTokens = value;\r\n        //buyback cancels hold highway\r\n        if( holdPremium[msg.sender].holdTokens > 0 ){\r\n            holdPremium[msg.sender].holdTokens = 0;\r\n            emit holdPremiumSet( msg.sender, 0, holdPremium[msg.sender].contributionTime );\r\n        }\r\n\r\n        emit RegisteredForRefund(msg.sender, value);\r\n    }\r\n\r\n    function refund( uint256 _value ) public {\r\n        require( block.timestamp >= refundWindowStart && block.timestamp <= refundWindowEnd, \"cannot refund now\" );\r\n        require( holdPremium[msg.sender].buybackTokens >= _value, \"not enough tokens in refund program\" );\r\n        require( balanceOf(msg.sender) >= _value, \"not enough tokens\" ); //this check is probably redundant to those in _burn, but better check twice\r\n        holdPremium[msg.sender].buybackTokens = holdPremium[msg.sender].buybackTokens.sub(_value);\r\n        _burn( msg.sender, _value );\r\n        require( stablecoin.transferFrom( stablecoinPayer, msg.sender, _value.div(20) ), \"transfer failed\" ); //we pay 1/20 = 0.05 DAI for 1 LIT\r\n    }\r\n\r\n    function setholdPremiumCap(uint256 newholdPremiumCap) public onlyOwner {\r\n        require(newholdPremiumCap > 0);\r\n        holdPremiumCap = newholdPremiumCap;\r\n        emit holdPremiumCapSet(holdPremiumCap);\r\n    }\r\n\r\n    /**\r\n    * Owner can burn Nordic Energy tokens here\r\n    */\r\n    function burn(uint256 _value) public onlyOwner {\r\n        super.burn(_value);\r\n    }\r\n\r\n    function setholdPremium(\r\n        address beneficiary,\r\n        uint256 value,\r\n        uint256 contributionTime\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(beneficiary != address(0) && value > 0 && contributionTime > 0, \"Not eligible for hold Premium\");\r\n\r\n        if (holdPremium[beneficiary].holdTokens != 0) {\r\n            holdPremium[beneficiary].holdTokens = holdPremium[beneficiary].holdTokens.add(value);\r\n            emit holdPremiumSet(beneficiary, holdPremium[beneficiary].holdTokens, holdPremium[beneficiary].contributionTime);\r\n        } else {\r\n            holdPremium[beneficiary] = Bonus(value, contributionTime, 0);\r\n            emit holdPremiumSet(beneficiary, value, contributionTime);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balanceOf(msg.sender));\r\n\r\n        if (holdPremiumMinted < holdPremiumCap && holdPremium[msg.sender].holdTokens > 0) {\r\n            uint256 amountForBonusCalculation = calculateAmountForBonus(msg.sender, _value);\r\n            uint256 bonus = calculateBonus(msg.sender, amountForBonusCalculation);\r\n\r\n            //subtract the tokens token into account here to avoid the above calculations in the future, e.g. in case I withdraw everything in 0 days (bonus 0), and then refund, I shall not be eligible for any bonuses\r\n            holdPremium[msg.sender].holdTokens = holdPremium[msg.sender].holdTokens.sub(amountForBonusCalculation);\r\n            if ( bonus > 0) {\r\n                //balances[msg.sender] = balances[msg.sender].add(bonus);\r\n                _mint( msg.sender, bonus );\r\n                //emit Transfer(address(0), msg.sender, bonus);\r\n            }\r\n        }\r\n\r\n        ERC20Pausable.transfer( _to, _value );\r\n//        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n//        balances[_to] = balances[_to].add(_value);\r\n//        emit Transfer(msg.sender, _to, _value);\r\n\r\n        //TODO: optimize to avoid setting values outside of buyback window\r\n        if( balanceOf(msg.sender) < holdPremium[msg.sender].buybackTokens )\r\n            holdPremium[msg.sender].buybackTokens = balanceOf(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n\r\n        if (holdPremiumMinted < holdPremiumCap && holdPremium[_from].holdTokens > 0) {\r\n            uint256 amountForBonusCalculation = calculateAmountForBonus(_from, _value);\r\n            uint256 bonus = calculateBonus(_from, amountForBonusCalculation);\r\n\r\n            //subtract the tokens token into account here to avoid the above calculations in the future, e.g. in case I withdraw everything in 0 days (bonus 0), and then refund, I shall not be eligible for any bonuses\r\n            holdPremium[_from].holdTokens = holdPremium[_from].holdTokens.sub(amountForBonusCalculation);\r\n            if ( bonus > 0) {\r\n                //balances[_from] = balances[_from].add(bonus);\r\n                _mint( _from, bonus );\r\n                //emit Transfer(address(0), _from, bonus);\r\n            }\r\n        }\r\n\r\n        ERC20Pausable.transferFrom( _from, _to, _value);\r\n        if( balanceOf(_from) < holdPremium[_from].buybackTokens )\r\n            holdPremium[_from].buybackTokens = balanceOf(_from);\r\n        return true;\r\n    }\r\n\r\n    function calculateBonus(address beneficiary, uint256 amount) internal returns (uint256) {\r\n        uint256 bonusAmount;\r\n\r\n        uint256 contributionTime = holdPremium[beneficiary].contributionTime;\r\n        uint256 bonusPeriod;\r\n        if (now <= contributionTime) {\r\n            bonusPeriod = 0;\r\n        } else if (now.sub(contributionTime) >= maxBonusDuration) {\r\n            bonusPeriod = maxBonusDuration;\r\n        } else {\r\n            bonusPeriod = now.sub(contributionTime);\r\n        }\r\n\r\n        if (bonusPeriod != 0) {\r\n            bonusAmount = (((bonusPeriod.mul(amount)).div(maxBonusDuration)).mul(25)).div(100);\r\n            if (holdPremiumMinted.add(bonusAmount) > holdPremiumCap) {\r\n                bonusAmount = holdPremiumCap.sub(holdPremiumMinted);\r\n                holdPremiumMinted = holdPremiumCap;\r\n            } else {\r\n                holdPremiumMinted = holdPremiumMinted.add(bonusAmount);\r\n            }\r\n\r\n            if( totalSupply().add(bonusAmount) > maxTokenSupply )\r\n                bonusAmount = maxTokenSupply.sub(totalSupply());\r\n        }\r\n\r\n        return bonusAmount;\r\n    }\r\n\r\n    function calculateAmountForBonus(address beneficiary, uint256 _value) internal view returns (uint256) {\r\n        uint256 amountForBonusCalculation;\r\n\r\n        if(_value >= holdPremium[beneficiary].holdTokens) {\r\n            amountForBonusCalculation = holdPremium[beneficiary].holdTokens;\r\n        } else {\r\n            amountForBonusCalculation = _value;\r\n        }\r\n\r\n        return amountForBonusCalculation;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract TestToken is ERC20{\r\n    constructor ( uint256 _balance)public {\r\n        _mint(msg.sender, _balance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20Burnable","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://21e7746bc2b390874d6267bde81f7a841491cc7535c08ce5a7413b2d43116c79"}]}