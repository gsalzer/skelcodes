{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     \n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    \n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    \n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\ncontract Ticket365 {\n    ERC20 token = ERC20(0x00f87271ff78a3de23bb7a6fbd3c7080199f6ae82b);\n    address public owner;\n    string public ticketId;\n    uint256 public tokenBorrow;\n    uint256 public tokenBalance;\n    uint256 public tokenBack;\n    uint256 public tokenGuarantee;\n    uint public createDate;\n    uint depositCount;\n    uint redeemCount;\n    address[]  backerAddresses;\n    mapping (address => bool) backerAddressesMapping;\n    struct order {\n        uint redeemPeriod;\n        uint256 amount;\n        uint redeemDate;\n        bool redeemStatus;\n        uint256 benifit;\n    }\n    mapping(address => order[]) public orders;\n    event DepositTokenGuarantee(address from, address to, uint256 amount);\n    event Deposit(address from, address to, uint256 amount);\n    event Withdraw(address from, address to, uint256 amount);\n    event Redeem(address from, address to, uint256 amount, uint no);\n    event RedeemTo(address from, address to, uint256 amount, uint no);\n    constructor(string memory _ticketId,  uint256 _tokenBorrow) public {\n        owner = msg.sender;\n        ticketId = _ticketId;\n        tokenBorrow = _tokenBorrow;\n        tokenBalance = _tokenBorrow;\n        createDate = now;\n    }\n    modifier onlyOwner() {\n        require (msg.sender == owner, \"Only owner\");\n        _;\n    }\n    function depositTokenGuarantee (uint256 _amount) public  onlyOwner{\n        require(_amount > 0, \"Invalid Amount\");\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Insufficient funds\");\n        tokenGuarantee += _amount;\n        emit DepositTokenGuarantee(msg.sender,  address(this), _amount);\n    }\n    function deposit (uint _redeemPeriod, uint256 _amount)  public  {\n        require(tokenBalance > 0, \"Ticket complete already\");\n        require(_amount <= tokenBalance, \"Amount too much\");\n        require(_redeemPeriod == 365, \"Invalid redeemPeriod\");\n        require(token.transferFrom(msg.sender, address(this), _amount), \"Insufficient funds\");\n        if(backerAddressesMapping[msg.sender] == false){\n            backerAddresses.push(msg.sender);\n            backerAddressesMapping[msg.sender] = true;\n        }\n        uint _redeemDate = now + (_redeemPeriod * 86400);\n        uint256 benifit = calBenifit(_amount);\n        orders[msg.sender].push(order(_redeemPeriod, _amount, _redeemDate, false, benifit));\n        tokenBack += _amount;\n        tokenBalance = tokenBorrow - tokenBack;\n        depositCount++;\n        emit Deposit(msg.sender,  address(this), _amount);\n    }\n    function withdraw() public  onlyOwner{\n        uint256 _balances = token.balanceOf(address(this));\n        require(_balances > 0, \"Insufficient funds\");\n        require(redeemCount == depositCount, \"Can not withdraw during this period\");\n        token.transfer(owner, _balances);\n        emit Withdraw(address(this), owner, _balances);\n    }\n    function redeem(uint _no) public {\n        uint256 _balances = token.balanceOf(address(this));\n        require(_balances > 0, \"Insufficient funds\");\n        require(checkOrderRedeem(msg.sender, _no, _balances) == true, \"Invalid redeem\");\n        uint256 _amount = getAmountRedeem(msg.sender, _no);\n        token.transfer(msg.sender, _amount);\n        redeemCount++;\n        orders[msg.sender][_no].redeemStatus = true;\n        emit Redeem(address(this), msg.sender, _amount, _no);\n    }\n    function redeemTo(address _backer, uint _no) public  onlyOwner{\n        uint256 _balances = token.balanceOf(address(this));\n        require(_balances > 0, \"Insufficient funds\");\n        require(checkOrderRedeem(_backer, _no, _balances) == true, \"Invalid redeem\");\n        uint256 _amount = getAmountRedeem(_backer, _no);\n        token.transfer(_backer, _amount);\n        redeemCount++;\n        orders[_backer][_no].redeemStatus = true;\n        emit RedeemTo(address(this), _backer, _amount, _no);\n    }\n    function checkOrderRedeem(address _backer, uint _no, uint256 balances) internal view returns (bool isRedeem){\n        if(orders[_backer].length <= 0 || _no >= orders[_backer].length){\n            return false;\n        }\n        if(orders[_backer][_no].redeemStatus == true || now < orders[_backer][_no].redeemDate || balances < orders[_backer][_no].benifit){\n            return false;\n        }\n        return true;\n    }\n    function getAmountRedeem(address _backer, uint _no) internal view returns (uint256 _amount){\n        return orders[_backer][_no].benifit;\n    }\n    function getCountOrders(address _backer) public view returns (uint){\n        return orders[_backer].length;\n    }\n    function getAllBacker() public view returns (address[] memory){\n        return backerAddresses;\n    }\n    function balanceOf() public view returns(uint256){\n        return token.balanceOf(address(this));\n    }\n    function calBenifit(uint256 _amount) internal pure returns (uint256 benefit){\n        return _amount + ((_amount * 2500) / 10000);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenGuarantee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBack\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBorrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_backer\",\"type\":\"address\"},{\"name\":\"_no\",\"type\":\"uint256\"}],\"name\":\"redeemTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokenGuarantee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_backer\",\"type\":\"address\"}],\"name\":\"getCountOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"redeemPeriod\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"redeemDate\",\"type\":\"uint256\"},{\"name\":\"redeemStatus\",\"type\":\"bool\"},{\"name\":\"benifit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllBacker\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_no\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redeemPeriod\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ticketId\",\"type\":\"string\"},{\"name\":\"_tokenBorrow\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositTokenGuarantee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"RedeemTo\",\"type\":\"event\"}]","ContractName":"Ticket365","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000069e10de76676d080000000000000000000000000000000000000000000000000000000000000000000094b6174696e447261670000000000000000000000000000000000000000000000","Library":"","LicenseType":"","SwarmSource":"bzzr://cc0b72afb5c542b251ec71d6dbdaf1929a15053f9437f196edebc014c87741f5"}]}