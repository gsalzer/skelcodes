{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: Loopring Foundation (Loopring Project Ltd)\n*/\n\npragma solidity ^0.5.11;\n\n\nlibrary AddressUtil {\n    using AddressUtil for *;\n\n    function isContract(\n        address addr\n        )\n        internal\n        view\n        returns (bool)\n    {\n        uint32 size;\n        assembly { size := extcodesize(addr) }\n        return (size > 0);\n    }\n\n    function toPayable(\n        address addr\n        )\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(addr));\n    }\n\n    \n    \n    function sendETH(\n        address to,\n        uint    amount,\n        uint    gasLimit\n        )\n        internal\n        returns (bool success)\n    {\n        if (amount == 0) {\n            return true;\n        }\n        address payable recipient = to.toPayable();\n        \n        (success, ) = recipient.call.value(amount).gas(gasLimit)(\"\");\n    }\n\n    \n    \n    function sendETHAndVerify(\n        address to,\n        uint    amount,\n        uint    gasLimit\n        )\n        internal\n        returns (bool success)\n    {\n        success = to.sendETH(amount, gasLimit);\n        require(success, \"TRANSFER_FAILURE\");\n    }\n}\n\nlibrary ERC20SafeTransfer {\n    function safeTransferAndVerify(\n        address token,\n        address to,\n        uint    value\n        )\n        internal\n    {\n        safeTransferWithGasLimitAndVerify(\n            token,\n            to,\n            value,\n            gasleft()\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint    value\n        )\n        internal\n        returns (bool)\n    {\n        return safeTransferWithGasLimit(\n            token,\n            to,\n            value,\n            gasleft()\n        );\n    }\n\n    function safeTransferWithGasLimitAndVerify(\n        address token,\n        address to,\n        uint    value,\n        uint    gasLimit\n        )\n        internal\n    {\n        require(\n            safeTransferWithGasLimit(token, to, value, gasLimit),\n            \"TRANSFER_FAILURE\"\n        );\n    }\n\n    function safeTransferWithGasLimit(\n        address token,\n        address to,\n        uint    value,\n        uint    gasLimit\n        )\n        internal\n        returns (bool)\n    {\n        \n        \n        \n\n        \n        bytes memory callData = abi.encodeWithSelector(\n            bytes4(0xa9059cbb),\n            to,\n            value\n        );\n        (bool success, ) = token.call.gas(gasLimit)(callData);\n        return checkReturnValue(success);\n    }\n\n    function safeTransferFromAndVerify(\n        address token,\n        address from,\n        address to,\n        uint    value\n        )\n        internal\n    {\n        safeTransferFromWithGasLimitAndVerify(\n            token,\n            from,\n            to,\n            value,\n            gasleft()\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint    value\n        )\n        internal\n        returns (bool)\n    {\n        return safeTransferFromWithGasLimit(\n            token,\n            from,\n            to,\n            value,\n            gasleft()\n        );\n    }\n\n    function safeTransferFromWithGasLimitAndVerify(\n        address token,\n        address from,\n        address to,\n        uint    value,\n        uint    gasLimit\n        )\n        internal\n    {\n        bool result = safeTransferFromWithGasLimit(\n            token,\n            from,\n            to,\n            value,\n            gasLimit\n        );\n        require(result, \"TRANSFER_FAILURE\");\n    }\n\n    function safeTransferFromWithGasLimit(\n        address token,\n        address from,\n        address to,\n        uint    value,\n        uint    gasLimit\n        )\n        internal\n        returns (bool)\n    {\n        \n        \n        \n\n        \n        bytes memory callData = abi.encodeWithSelector(\n            bytes4(0x23b872dd),\n            from,\n            to,\n            value\n        );\n        (bool success, ) = token.call.gas(gasLimit)(callData);\n        return checkReturnValue(success);\n    }\n\n    function checkReturnValue(\n        bool success\n        )\n        internal\n        pure\n        returns (bool)\n    {\n        \n        \n        \n        if (success) {\n            assembly {\n                switch returndatasize()\n                \n                case 0 {\n                    success := 1\n                }\n                \n                case 32 {\n                    returndatacopy(0, 0, 32)\n                    success := mload(0)\n                }\n                \n                default {\n                    success := 0\n                }\n            }\n        }\n        return success;\n    }\n}\n\nlibrary MathUint {\n    function mul(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a * b;\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\n    }\n\n    function sub(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint)\n    {\n        require(b <= a, \"SUB_UNDERFLOW\");\n        return a - b;\n    }\n\n    function add(\n        uint a,\n        uint b\n        )\n        internal\n        pure\n        returns (uint c)\n    {\n        c = a + b;\n        require(c >= a, \"ADD_OVERFLOW\");\n    }\n\n    function decodeFloat(\n        uint f\n        )\n        internal\n        pure\n        returns (uint value)\n    {\n        uint numBitsMantissa = 23;\n        uint exponent = f >> numBitsMantissa;\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\n        value = mantissa * (10 ** exponent);\n    }\n}\n\nlibrary Cloneable {\n    function clone(address a)\n        external\n        returns (address)\n    {\n\n    \n        address retval;\n        assembly{\n            mstore(0x0, or (0x5880730000000000000000000000000000000000000000803b80938091923cF3 ,mul(a,0x1000000000000000000)))\n            retval := create(0,0, 32)\n        }\n        return retval;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    \n    \n    constructor()\n        public\n    {\n        owner = msg.sender;\n    }\n\n    \n    modifier onlyOwner()\n    {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n        _;\n    }\n\n    \n    \n    \n    function transferOwnership(\n        address newOwner\n        )\n        public\n        onlyOwner\n    {\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function renounceOwnership()\n        public\n        onlyOwner\n    {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n}\n\ncontract Claimable is Ownable\n{\n    address public pendingOwner;\n\n    \n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\n        _;\n    }\n\n    \n    \n    function transferOwnership(\n        address newOwner\n        )\n        public\n        onlyOwner\n    {\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\n        pendingOwner = newOwner;\n    }\n\n    \n    function claimOwnership()\n        public\n        onlyPendingOwner\n    {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\ncontract ReentrancyGuard {\n    \n    uint private _guardValue;\n\n    \n    modifier nonReentrant()\n    {\n        \n        require(_guardValue == 0, \"REENTRANCY\");\n\n        \n        _guardValue = 1;\n\n        \n        _;\n\n        \n        _guardValue = 0;\n    }\n}\n\ncontract IExchange is Claimable, ReentrancyGuard\n{\n    string constant public version = \"\"; \n\n    event Cloned (address indexed clone);\n\n    \n    \n    function clone()\n        external\n        nonReentrant\n        returns (address cloneAddress)\n    {\n        address origin = address(this);\n        cloneAddress = Cloneable.clone(origin);\n\n        assert(cloneAddress != origin);\n        assert(cloneAddress != address(0));\n\n        emit Cloned(cloneAddress);\n    }\n}\n\ncontract IExchangeV3 is IExchange\n{\n    \n    \n    \n    event AccountCreated(\n        address indexed owner,\n        uint24  indexed id,\n        uint            pubKeyX,\n        uint            pubKeyY\n    );\n\n    event AccountUpdated(\n        address indexed owner,\n        uint24  indexed id,\n        uint            pubKeyX,\n        uint            pubKeyY\n    );\n\n    event TokenRegistered(\n        address indexed token,\n        uint16  indexed tokenId\n    );\n\n    event OperatorChanged(\n        uint    indexed exchangeId,\n        address         oldOperator,\n        address         newOperator\n    );\n\n    event AddressWhitelistChanged(\n        uint    indexed exchangeId,\n        address         oldAddressWhitelist,\n        address         newAddressWhitelist\n    );\n\n    event FeesUpdated(\n        uint    indexed exchangeId,\n        uint            accountCreationFeeETH,\n        uint            accountUpdateFeeETH,\n        uint            depositFeeETH,\n        uint            withdrawalFeeETH\n    );\n\n    event Shutdown(\n        uint            timestamp\n    );\n\n    event BlockCommitted(\n        uint    indexed blockIdx,\n        bytes32 indexed publicDataHash\n    );\n\n    event BlockVerified(\n        uint    indexed blockIdx\n    );\n\n    event BlockFinalized(\n        uint    indexed blockIdx\n    );\n\n    event Revert(\n        uint    indexed blockIdx\n    );\n\n    event DepositRequested(\n        uint    indexed depositIdx,\n        uint24  indexed accountID,\n        uint16  indexed tokenID,\n        uint96          amount,\n        uint            pubKeyX,\n        uint            pubKeyY\n    );\n\n    event BlockFeeWithdrawn(\n        uint    indexed blockIdx,\n        uint            amount\n    );\n\n    event WithdrawalRequested(\n        uint    indexed withdrawalIdx,\n        uint24  indexed accountID,\n        uint16  indexed tokenID,\n        uint96          amount\n    );\n\n    event WithdrawalCompleted(\n        uint24  indexed accountID,\n        uint16  indexed tokenID,\n        address         to,\n        uint96          amount\n    );\n\n    event WithdrawalFailed(\n        uint24  indexed accountID,\n        uint16  indexed tokenID,\n        address         to,\n        uint96          amount\n    );\n\n    event ProtocolFeesUpdated(\n        uint8 takerFeeBips,\n        uint8 makerFeeBips,\n        uint8 previousTakerFeeBips,\n        uint8 previousMakerFeeBips\n    );\n\n    event TokenNotOwnedByUsersWithdrawn(\n        address sender,\n        address token,\n        address feeVault,\n        uint    amount\n    );\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function initialize(\n        address loopringAddress,\n        address owner,\n        uint    exchangeId,\n        address payable operator,\n        bool    onchainDataAvailability\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function getConstants()\n        external\n        pure\n        returns(uint[20] memory);\n\n    \n    \n    \n    function isInWithdrawalMode()\n        external\n        view\n        returns (bool);\n\n    \n    \n    function isShutdown()\n        external\n        view\n        returns (bool);\n\n    \n    \n    function isInMaintenance()\n        external\n        view\n        returns (bool);\n\n    \n\n    \n    \n    function getNumAccounts()\n        external\n        view\n        returns (uint);\n\n    \n    \n    \n    \n    \n    function getAccount(\n        address owner\n        )\n        external\n        view\n        returns (\n            uint24 accountID,\n            uint   pubKeyX,\n            uint   pubKeyY\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function createOrUpdateAccount(\n        uint  pubKeyX,\n        uint  pubKeyY,\n        bytes calldata permission\n        )\n        external\n        payable\n        returns (\n            uint24 accountID,\n            bool   isAccountNew,\n            bool   isAccountUpdated\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function isAccountBalanceCorrect(\n        uint     merkleRoot,\n        uint24   accountID,\n        uint16   tokenID,\n        uint     pubKeyX,\n        uint     pubKeyY,\n        uint32   nonce,\n        uint96   balance,\n        uint     tradeHistoryRoot,\n        uint[30] calldata accountMerkleProof,\n        uint[12] calldata balanceMerkleProof\n        )\n        external\n        pure\n        returns (bool);\n\n    \n\n    \n    \n    function getLRCFeeForRegisteringOneMoreToken()\n        external\n        view\n        returns (uint feeLRC);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function registerToken(\n        address tokenAddress\n        )\n        external\n        returns (uint16 tokenID);\n\n    \n    \n    \n    function getTokenID(\n        address tokenAddress\n        )\n        external\n        view\n        returns (uint16 tokenID);\n\n    \n    \n    \n    function getTokenAddress(\n        uint16 tokenID\n        )\n        external\n        view\n        returns (address tokenAddress);\n\n    \n    \n    \n    function disableTokenDeposit(\n        address tokenAddress\n        )\n        external;\n\n    \n    \n    \n    function enableTokenDeposit(\n        address tokenAddress\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    function getExchangeStake()\n        external\n        view\n        returns (uint);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawExchangeStake(\n        address recipient\n        )\n        external\n        returns (uint);\n\n    \n    \n    \n    \n    function withdrawTokenNotOwnedByUsers(\n        address tokenAddress\n        )\n        external\n        returns (uint);\n\n    \n    \n    \n    \n    \n    function withdrawProtocolFeeStake(\n        address recipient,\n        uint    amount\n        )\n        external;\n\n    \n    \n    \n    \n    \n    function burnExchangeStake()\n        external;\n\n    \n    \n    \n    \n    function getBlockHeight()\n        external\n        view\n        returns (uint);\n\n    \n    \n    function getNumBlocksFinalized()\n        external\n        view\n        returns (uint);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function getBlock(\n        uint blockIdx\n        )\n        external\n        view\n        returns (\n            bytes32 merkleRoot,\n            bytes32 publicDataHash,\n            uint8   blockState,\n            uint8   blockType,\n            uint16  blockSize,\n            uint32  timestamp,\n            uint32  numDepositRequestsCommitted,\n            uint32  numWithdrawalRequestsCommitted,\n            bool    blockFeeWithdrawn,\n            uint16  numWithdrawalsDistributed\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function commitBlock(\n        uint8  blockType,\n        uint16 blockSize,\n        uint8  blockVersion,\n        bytes  calldata data,\n        bytes  calldata offchainData\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function verifyBlocks(\n        uint[] calldata blockIndices,\n        uint[] calldata proofs\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function revertBlock(\n        uint blockIdx\n        )\n        external;\n\n    \n    \n    \n    \n    \n    function getNumDepositRequestsProcessed()\n        external\n        view\n        returns (uint);\n\n    \n    \n    function getNumAvailableDepositSlots()\n        external\n        view\n        returns (uint);\n\n    \n    \n    \n    \n    \n    function getDepositRequest(\n        uint index\n        )\n        external\n        view\n        returns (\n          bytes32 accumulatedHash,\n          uint    accumulatedFee,\n          uint32  timestamp\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function updateAccountAndDeposit(\n        uint    pubKeyX,\n        uint    pubKeyY,\n        address tokenAddress,\n        uint96  amount,\n        bytes   calldata permission\n        )\n        external\n        payable\n        returns (\n            uint24 accountID,\n            bool   isAccountNew,\n            bool   isAccountUpdated\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function deposit(\n        address tokenAddress,\n        uint96  amount\n        )\n        external\n        payable;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function depositTo(\n        address recipient,\n        address tokenAddress,\n        uint96  amount\n        )\n        external\n        payable;\n\n    \n\n    \n    \n    \n    \n    function getNumWithdrawalRequestsProcessed()\n        external\n        view\n        returns (uint);\n\n    \n    \n    function getNumAvailableWithdrawalSlots(\n        )\n        external\n        view\n        returns (uint);\n\n    \n    \n    \n    \n    \n    function getWithdrawRequest(\n        uint index\n        )\n        external\n        view\n        returns (\n            bytes32 accumulatedHash,\n            uint    accumulatedFee,\n            uint32  timestamp\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdraw(\n        address tokenAddress,\n        uint96  amount\n        )\n        external\n        payable;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawProtocolFees(\n        address tokenAddress\n        )\n        external\n        payable;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawFromMerkleTree(\n        address  token,\n        uint     pubKeyX,\n        uint     pubKeyY,\n        uint32   nonce,\n        uint96   balance,\n        uint     tradeHistoryRoot,\n        uint[30] calldata accountMerkleProof,\n        uint[12] calldata balanceMerkleProof\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawFromMerkleTreeFor(\n        address  owner,\n        address  token,\n        uint     pubKeyX,\n        uint     pubKeyY,\n        uint32   nonce,\n        uint96   balance,\n        uint     tradeHistoryRoot,\n        uint[30] calldata accountMerkleProof,\n        uint[12] calldata balanceMerkleProof\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawFromDepositRequest(\n        uint depositIdx\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawFromApprovedWithdrawal(\n        uint blockIdx,\n        uint slotIdx\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function withdrawBlockFee(\n        uint    blockIdx,\n        address payable feeRecipient\n        )\n        external\n        returns (uint feeAmount);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function distributeWithdrawals(\n        uint blockIdx,\n        uint maxNumWithdrawals\n        )\n        external;\n\n    \n\n    \n    \n    \n    function setOperator(\n        address payable _operator\n        )\n        external\n        returns (address payable oldOperator);\n\n    \n    \n    \n    \n    function setAddressWhitelist(\n        address _addressWhitelist\n        )\n        external\n        returns (address oldAddressWhitelist);\n\n    \n    \n    \n    \n    \n    \n    function setFees(\n        uint _accountCreationFeeETH,\n        uint _accountUpdateFeeETH,\n        uint _depositFeeETH,\n        uint _withdrawalFeeETH\n        )\n        external;\n\n    \n    \n    \n    \n    \n    function getFees()\n        external\n        view\n        returns (\n            uint _accountCreationFeeETH,\n            uint _accountUpdateFeeETH,\n            uint _depositFeeETH,\n            uint _withdrawalFeeETH\n        );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function startOrContinueMaintenanceMode(\n        uint durationMinutes\n        )\n        external;\n\n    \n    \n    \n    function stopMaintenanceMode()\n        external;\n\n    \n    \n    function getRemainingDowntime()\n        external\n        view\n        returns (uint durationMinutes);\n\n    \n    \n    function getDowntimeCostLRC(\n        uint durationMinutes\n        )\n        external\n        view\n        returns (uint costLRC);\n\n    \n    \n    function getTotalTimeInMaintenanceSeconds()\n        external\n        view\n        returns (uint timeInSeconds);\n\n    \n    \n    function getExchangeCreationTimestamp()\n        external\n        view\n        returns (uint timestamp);\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function shutdown()\n        external\n        returns (bool success);\n\n    \n    \n    \n    \n    \n    function getRequestStats()\n        external\n        view\n        returns(\n            uint numDepositRequestsProcessed,\n            uint numAvailableDepositSlots,\n            uint numWithdrawalRequestsProcessed,\n            uint numAvailableWithdrawalSlots\n        );\n\n    \n    \n    \n    \n    \n    \n    function getProtocolFeeValues()\n        external\n        view\n        returns (\n            uint32 timestamp,\n            uint8 takerFeeBips,\n            uint8 makerFeeBips,\n            uint8 previousTakerFeeBips,\n            uint8 previousMakerFeeBips\n        );\n}\n\ncontract ILoopring is Claimable, ReentrancyGuard\n{\n    string  constant public version = \"\"; \n\n    uint    public exchangeCreationCostLRC;\n    address public universalRegistry;\n    address public lrcAddress;\n\n    event ExchangeInitialized(\n        uint    indexed exchangeId,\n        address indexed exchangeAddress,\n        address indexed owner,\n        address         operator,\n        bool            onchainDataAvailability\n    );\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function initializeExchange(\n        address exchangeAddress,\n        uint    exchangeId,\n        address owner,\n        address payable operator,\n        bool    onchainDataAvailability\n        )\n        external;\n}\n\ncontract ILoopringV3 is ILoopring\n{\n    \n\n    event ExchangeStakeDeposited(\n        uint    indexed exchangeId,\n        uint            amount\n    );\n\n    event ExchangeStakeWithdrawn(\n        uint    indexed exchangeId,\n        uint            amount\n    );\n\n    event ExchangeStakeBurned(\n        uint    indexed exchangeId,\n        uint            amount\n    );\n\n    event ProtocolFeeStakeDeposited(\n        uint    indexed exchangeId,\n        uint            amount\n    );\n\n    event ProtocolFeeStakeWithdrawn(\n        uint    indexed exchangeId,\n        uint            amount\n    );\n\n    event SettingsUpdated(\n        uint            time\n    );\n\n    \n    struct Exchange\n    {\n        address exchangeAddress;\n        uint    exchangeStake;\n        uint    protocolFeeStake;\n    }\n\n    mapping (uint => Exchange) internal exchanges;\n\n    string  constant public version = \"3.1\";\n\n    address public wethAddress;\n    uint    public totalStake;\n    address public blockVerifierAddress;\n    address public downtimeCostCalculator;\n    uint    public maxWithdrawalFee;\n    uint    public withdrawalFineLRC;\n    uint    public tokenRegistrationFeeLRCBase;\n    uint    public tokenRegistrationFeeLRCDelta;\n    uint    public minExchangeStakeWithDataAvailability;\n    uint    public minExchangeStakeWithoutDataAvailability;\n    uint    public revertFineLRC;\n    uint8   public minProtocolTakerFeeBips;\n    uint8   public maxProtocolTakerFeeBips;\n    uint8   public minProtocolMakerFeeBips;\n    uint8   public maxProtocolMakerFeeBips;\n    uint    public targetProtocolTakerFeeStake;\n    uint    public targetProtocolMakerFeeStake;\n\n    address payable public protocolFeeVault;\n\n    \n    \n    \n    \n    \n    \n    function updateSettings(\n        address payable _protocolFeeVault,   \n        address _blockVerifierAddress,       \n        address _downtimeCostCalculator,     \n        uint    _exchangeCreationCostLRC,\n        uint    _maxWithdrawalFee,\n        uint    _tokenRegistrationFeeLRCBase,\n        uint    _tokenRegistrationFeeLRCDelta,\n        uint    _minExchangeStakeWithDataAvailability,\n        uint    _minExchangeStakeWithoutDataAvailability,\n        uint    _revertFineLRC,\n        uint    _withdrawalFineLRC\n        )\n        external;\n\n    \n    \n    \n    \n    \n    function updateProtocolFeeSettings(\n        uint8 _minProtocolTakerFeeBips,\n        uint8 _maxProtocolTakerFeeBips,\n        uint8 _minProtocolMakerFeeBips,\n        uint8 _maxProtocolMakerFeeBips,\n        uint  _targetProtocolTakerFeeStake,\n        uint  _targetProtocolMakerFeeStake\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function canExchangeCommitBlocks(\n        uint exchangeId,\n        bool onchainDataAvailability\n        )\n        external\n        view\n        returns (bool);\n\n    \n    \n    \n    function getExchangeStake(\n        uint exchangeId\n        )\n        public\n        view\n        returns (uint stakedLRC);\n\n    \n    \n    \n    \n    \n    function burnExchangeStake(\n        uint exchangeId,\n        uint amount\n        )\n        external\n        returns (uint burnedLRC);\n\n    \n    \n    \n    \n    function depositExchangeStake(\n        uint exchangeId,\n        uint amountLRC\n        )\n        external\n        returns (uint stakedLRC);\n\n    \n    \n    \n    \n    \n    \n    function withdrawExchangeStake(\n        uint    exchangeId,\n        address recipient,\n        uint    requestedAmount\n        )\n        external\n        returns (uint amount);\n\n    \n    \n    \n    \n    function depositProtocolFeeStake(\n        uint exchangeId,\n        uint amountLRC\n        )\n        external\n        returns (uint stakedLRC);\n\n    \n    \n    \n    \n    \n    function withdrawProtocolFeeStake(\n        uint    exchangeId,\n        address recipient,\n        uint    amount\n        )\n        external;\n\n    \n    \n    \n    \n    \n    \n    function getProtocolFeeValues(\n        uint exchangeId,\n        bool onchainDataAvailability\n        )\n        external\n        view\n        returns (\n            uint8 takerFeeBips,\n            uint8 makerFeeBips\n        );\n\n    \n    \n    \n    function getProtocolFeeStake(\n        uint exchangeId\n        )\n        external\n        view\n        returns (uint protocolFeeStake);\n}\n\ncontract LoopringV3 is ILoopringV3\n{\n    using AddressUtil       for address payable;\n    using MathUint          for uint;\n    using ERC20SafeTransfer for address;\n\n    \n    constructor(\n        address _universalRegistry,\n        address _lrcAddress,\n        address _wethAddress,\n        address payable _protocolFeeVault,\n        address _blockVerifierAddress,\n        address _downtimeCostCalculator\n        )\n        Claimable()\n        public\n    {\n        require(address(0) != _universalRegistry, \"ZERO_ADDRESS\");\n        require(address(0) != _lrcAddress, \"ZERO_ADDRESS\");\n        require(address(0) != _wethAddress, \"ZERO_ADDRESS\");\n\n        universalRegistry = _universalRegistry;\n        lrcAddress = _lrcAddress;\n        wethAddress = _wethAddress;\n\n        updateSettingsInternal(\n            _protocolFeeVault,\n            _blockVerifierAddress,\n            _downtimeCostCalculator,\n            0, 0, 0, 0, 0, 0, 0, 0\n        );\n    }\n\n    \n\n    modifier onlyUniversalRegistry()\n    {\n        require(msg.sender == universalRegistry, \"UNAUTHORIZED\");\n        _;\n    }\n\n    function initializeExchange(\n        address exchangeAddress,\n        uint    exchangeId,\n        address owner,\n        address payable operator,\n        bool    onchainDataAvailability\n        )\n        external\n        nonReentrant\n        onlyUniversalRegistry\n    {\n        require(exchangeId != 0, \"ZERO_ID\");\n        require(exchangeAddress != address(0), \"ZERO_ADDRESS\");\n        require(owner != address(0), \"ZERO_ADDRESS\");\n        require(operator != address(0), \"ZERO_ADDRESS\");\n        require(exchanges[exchangeId].exchangeAddress == address(0), \"ID_USED_ALREADY\");\n\n        IExchangeV3 exchange = IExchangeV3(exchangeAddress);\n\n        \n        exchange.initialize(\n            address(this),\n            owner,\n            exchangeId,\n            operator,\n            onchainDataAvailability\n        );\n\n        exchanges[exchangeId] = Exchange(exchangeAddress, 0, 0);\n\n        emit ExchangeInitialized(\n            exchangeId,\n            exchangeAddress,\n            owner,\n            operator,\n            onchainDataAvailability\n        );\n    }\n\n    \n    function updateSettings(\n        address payable _protocolFeeVault,\n        address _blockVerifierAddress,\n        address _downtimeCostCalculator,\n        uint    _exchangeCreationCostLRC,\n        uint    _maxWithdrawalFee,\n        uint    _tokenRegistrationFeeLRCBase,\n        uint    _tokenRegistrationFeeLRCDelta,\n        uint    _minExchangeStakeWithDataAvailability,\n        uint    _minExchangeStakeWithoutDataAvailability,\n        uint    _revertFineLRC,\n        uint    _withdrawalFineLRC\n        )\n        external\n        onlyOwner\n    {\n        updateSettingsInternal(\n            _protocolFeeVault,\n            _blockVerifierAddress,\n            _downtimeCostCalculator,\n            _exchangeCreationCostLRC,\n            _maxWithdrawalFee,\n            _tokenRegistrationFeeLRCBase,\n            _tokenRegistrationFeeLRCDelta,\n            _minExchangeStakeWithDataAvailability,\n            _minExchangeStakeWithoutDataAvailability,\n            _revertFineLRC,\n            _withdrawalFineLRC\n        );\n    }\n\n    function updateProtocolFeeSettings(\n        uint8 _minProtocolTakerFeeBips,\n        uint8 _maxProtocolTakerFeeBips,\n        uint8 _minProtocolMakerFeeBips,\n        uint8 _maxProtocolMakerFeeBips,\n        uint  _targetProtocolTakerFeeStake,\n        uint  _targetProtocolMakerFeeStake\n        )\n        external\n        onlyOwner\n    {\n        minProtocolTakerFeeBips = _minProtocolTakerFeeBips;\n        maxProtocolTakerFeeBips = _maxProtocolTakerFeeBips;\n        minProtocolMakerFeeBips = _minProtocolMakerFeeBips;\n        maxProtocolMakerFeeBips = _maxProtocolMakerFeeBips;\n        targetProtocolTakerFeeStake = _targetProtocolTakerFeeStake;\n        targetProtocolMakerFeeStake = _targetProtocolMakerFeeStake;\n\n        emit SettingsUpdated(now);\n    }\n\n    function canExchangeCommitBlocks(\n        uint exchangeId,\n        bool onchainDataAvailability\n        )\n        external\n        view\n        returns (bool)\n    {\n        uint amountStaked = getExchangeStake(exchangeId);\n        if (onchainDataAvailability) {\n            return amountStaked >= minExchangeStakeWithDataAvailability;\n        } else {\n            return amountStaked >= minExchangeStakeWithoutDataAvailability;\n        }\n    }\n\n    function getExchangeStake(\n        uint exchangeId\n        )\n        public\n        view\n        returns (uint)\n    {\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n        return exchange.exchangeStake;\n    }\n\n    function burnExchangeStake(\n        uint exchangeId,\n        uint amount\n        )\n        external\n        nonReentrant\n        returns (uint burnedLRC)\n    {\n        Exchange storage exchange = exchanges[exchangeId];\n        address exchangeAddress = exchange.exchangeAddress;\n\n        require(exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n        require(exchangeAddress == msg.sender, \"UNAUTHORIZED\");\n\n        burnedLRC = exchange.exchangeStake;\n\n        if (amount < burnedLRC) {\n            burnedLRC = amount;\n        }\n        if (burnedLRC > 0) {\n            lrcAddress.safeTransferAndVerify(protocolFeeVault, burnedLRC);\n            exchange.exchangeStake = exchange.exchangeStake.sub(burnedLRC);\n            totalStake = totalStake.sub(burnedLRC);\n        }\n        emit ExchangeStakeBurned(exchangeId, burnedLRC);\n    }\n\n    function depositExchangeStake(\n        uint exchangeId,\n        uint amountLRC\n        )\n        external\n        nonReentrant\n        returns (uint stakedLRC)\n    {\n        require(amountLRC > 0, \"ZERO_VALUE\");\n\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n\n        lrcAddress.safeTransferFromAndVerify(msg.sender, address(this), amountLRC);\n\n        stakedLRC = exchange.exchangeStake.add(amountLRC);\n        exchange.exchangeStake = stakedLRC;\n        totalStake = totalStake.add(amountLRC);\n\n        emit ExchangeStakeDeposited(exchangeId, amountLRC);\n    }\n\n    function withdrawExchangeStake(\n        uint    exchangeId,\n        address recipient,\n        uint    requestedAmount\n        )\n        external\n        nonReentrant\n        returns (uint amountLRC)\n    {\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n        require(exchange.exchangeAddress == msg.sender, \"UNAUTHORIZED\");\n\n        amountLRC = (exchange.exchangeStake > requestedAmount) ?\n            requestedAmount : exchange.exchangeStake;\n\n        if (amountLRC > 0) {\n            lrcAddress.safeTransferAndVerify(recipient, amountLRC);\n            exchange.exchangeStake = exchange.exchangeStake.sub(amountLRC);\n            totalStake = totalStake.sub(amountLRC);\n        }\n\n        emit ExchangeStakeWithdrawn(exchangeId, amountLRC);\n    }\n\n    function depositProtocolFeeStake(\n        uint exchangeId,\n        uint amountLRC\n        )\n        external\n        nonReentrant\n        returns (uint stakedLRC)\n    {\n        require(amountLRC > 0, \"ZERO_VALUE\");\n\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n\n        lrcAddress.safeTransferFromAndVerify(msg.sender, address(this), amountLRC);\n\n        stakedLRC = exchange.protocolFeeStake.add(amountLRC);\n        exchange.protocolFeeStake = stakedLRC;\n        totalStake = totalStake.add(amountLRC);\n\n        emit ProtocolFeeStakeDeposited(exchangeId, amountLRC);\n    }\n\n    function withdrawProtocolFeeStake(\n        uint    exchangeId,\n        address recipient,\n        uint    amountLRC\n        )\n        external\n        nonReentrant\n    {\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n        require(exchange.exchangeAddress == msg.sender, \"UNAUTHORIZED\");\n        require(amountLRC <= exchange.protocolFeeStake, \"INSUFFICIENT_STAKE\");\n\n        if (amountLRC > 0) {\n            lrcAddress.safeTransferAndVerify(recipient, amountLRC);\n            exchange.protocolFeeStake = exchange.protocolFeeStake.sub(amountLRC);\n            totalStake = totalStake.sub(amountLRC);\n        }\n        emit ProtocolFeeStakeWithdrawn(exchangeId, amountLRC);\n    }\n\n    function getProtocolFeeValues(\n        uint exchangeId,\n        bool onchainDataAvailability\n        )\n        external\n        view\n        returns (\n            uint8 takerFeeBips,\n            uint8 makerFeeBips\n        )\n    {\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n\n        \n        uint stake = 0;\n        if (onchainDataAvailability && exchange.exchangeStake > minExchangeStakeWithDataAvailability) {\n            stake = exchange.exchangeStake - minExchangeStakeWithDataAvailability;\n        } else if (!onchainDataAvailability && exchange.exchangeStake > minExchangeStakeWithoutDataAvailability) {\n            stake = exchange.exchangeStake - minExchangeStakeWithoutDataAvailability;\n        }\n\n        \n        \n        uint protocolFeeStake = stake.add(exchange.protocolFeeStake / 2);\n\n        takerFeeBips = calculateProtocolFee(\n            minProtocolTakerFeeBips, maxProtocolTakerFeeBips, protocolFeeStake, targetProtocolTakerFeeStake\n        );\n        makerFeeBips = calculateProtocolFee(\n            minProtocolMakerFeeBips, maxProtocolMakerFeeBips, protocolFeeStake, targetProtocolMakerFeeStake\n        );\n    }\n\n    function getProtocolFeeStake(\n        uint exchangeId\n        )\n        external\n        view\n        returns (uint)\n    {\n        Exchange storage exchange = exchanges[exchangeId];\n        require(exchange.exchangeAddress != address(0), \"INVALID_EXCHANGE_ID\");\n        return exchange.protocolFeeStake;\n    }\n\n    \n    function updateSettingsInternal(\n        address payable  _protocolFeeVault,\n        address _blockVerifierAddress,\n        address _downtimeCostCalculator,\n        uint    _exchangeCreationCostLRC,\n        uint    _maxWithdrawalFee,\n        uint    _tokenRegistrationFeeLRCBase,\n        uint    _tokenRegistrationFeeLRCDelta,\n        uint    _minExchangeStakeWithDataAvailability,\n        uint    _minExchangeStakeWithoutDataAvailability,\n        uint    _revertFineLRC,\n        uint    _withdrawalFineLRC\n        )\n        private\n    {\n        require(address(0) != _protocolFeeVault, \"ZERO_ADDRESS\");\n        require(address(0) != _blockVerifierAddress, \"ZERO_ADDRESS\");\n        require(address(0) != _downtimeCostCalculator, \"ZERO_ADDRESS\");\n\n        protocolFeeVault = _protocolFeeVault;\n        blockVerifierAddress = _blockVerifierAddress;\n        downtimeCostCalculator = _downtimeCostCalculator;\n        exchangeCreationCostLRC = _exchangeCreationCostLRC;\n        maxWithdrawalFee = _maxWithdrawalFee;\n        tokenRegistrationFeeLRCBase = _tokenRegistrationFeeLRCBase;\n        tokenRegistrationFeeLRCDelta = _tokenRegistrationFeeLRCDelta;\n        minExchangeStakeWithDataAvailability = _minExchangeStakeWithDataAvailability;\n        minExchangeStakeWithoutDataAvailability = _minExchangeStakeWithoutDataAvailability;\n        revertFineLRC = _revertFineLRC;\n        withdrawalFineLRC = _withdrawalFineLRC;\n\n        emit SettingsUpdated(now);\n    }\n\n    function calculateProtocolFee(\n        uint minFee,\n        uint maxFee,\n        uint stake,\n        uint targetStake\n        )\n        internal\n        pure\n        returns (uint8)\n    {\n        if (targetStake > 0) {\n            \n            uint maxReduction = maxFee.sub(minFee);\n            uint reduction = maxReduction.mul(stake) / targetStake;\n            if (reduction > maxReduction) {\n                reduction = maxReduction;\n            }\n            return uint8(maxFee.sub(reduction));\n        } else {\n            return uint8(minFee);\n        }\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProtocolMakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProtocolTakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetProtocolMakerFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalFineLRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"canExchangeCommitBlocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minProtocolTakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxProtocolTakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_minProtocolMakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxProtocolMakerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_targetProtocolTakerFeeStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetProtocolMakerFeeStake\",\"type\":\"uint256\"}],\"name\":\"updateProtocolFeeSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"universalRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"downtimeCostCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lrcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRegistrationFeeLRCDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"name\":\"depositExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetProtocolTakerFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"name\":\"depositProtocolFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeCreationCostLRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLRC\",\"type\":\"uint256\"}],\"name\":\"withdrawProtocolFeeStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"getProtocolFeeValues\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"takerFeeBips\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makerFeeBips\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnedLRC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockVerifierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRegistrationFeeLRCBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFeeVault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExchangeStakeWithDataAvailability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExchangeStakeWithoutDataAvailability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_protocolFeeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_downtimeCostCalculator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeCreationCostLRC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRegistrationFeeLRCBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRegistrationFeeLRCDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeStakeWithDataAvailability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExchangeStakeWithoutDataAvailability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revertFineLRC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalFineLRC\",\"type\":\"uint256\"}],\"name\":\"updateSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"getExchangeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minProtocolTakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"getProtocolFeeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minProtocolMakerFeeBips\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"initializeExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revertFineLRC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_universalRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lrcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_protocolFeeVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_downtimeCostCalculator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeStakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeStakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeStakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeStakeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeStakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"onchainDataAvailability\",\"type\":\"bool\"}],\"name\":\"ExchangeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LoopringV3","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000036f568ef555df25be4b6e15d16994f3a8374214e000000000000000000000000bbbbca6a901c926f240b89eacb641d8aec7aeafd000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005bb8ef8efd18c6034ec9277daca9a5e29b1f1cb100000000000000000000000040598b41cc17a7e56dd72f415e8223aacca94cf7000000000000000000000000873685f032c6aa1572766401f3198a1f09a5c221","Library":"","LicenseType":"","SwarmSource":"bzzr://9ff37361c711394ff483096f39d2c4b7de0405c94ca733047ec50002f4655769"}]}