{"status":"1","message":"OK","result":[{"SourceCode":"//see contract at https://etherscan.io/address/0x52ace72c3f3536c7cd79cd8e514cd1965f68b827\r\npragma solidity >=0.4.26;\r\n\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes hint) external payable returns(uint);\r\n\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\r\n\r\n\r\n}\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\n\r\ncontract Trader{\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    KyberNetworkProxyInterface public proxy = KyberNetworkProxyInterface(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    OrFeedInterface orfeed= OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);  \r\n    address saiAddress = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; // this is SAI (old DAI) address\r\n    bytes  PERM_HINT = \"PERM\";\r\n    address owner;\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n     owner = msg.sender;\r\n    }\r\n\r\n   function swapEtherToToken1 (KyberNetworkProxyInterface _kyberNetworkProxy, ERC20 token) internal returns (uint){\r\n\r\n    uint minRate;\r\n    (, minRate) = _kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, token, msg.value);\r\n\r\n    //will send back tokens to this contract's address\r\n    uint destAmount = _kyberNetworkProxy.swapEtherToToken.value(msg.value)(token, minRate);\r\n\r\n    //send received tokens to destination address\r\n    //require(token.transfer(destAddress, destAmount));\r\n    return destAmount; \r\n\r\n    }\r\n\r\n    function swapTokenToEther1 (ERC20 token, uint tokenQty) internal returns (uint) {\r\n\r\n       // uint minRate =1;\r\n        //(, minRate) = _kyberNetworkProxy.getExpectedRate(token, ETH_TOKEN_ADDRESS, tokenQty);\r\n\r\n        // Check that the token transferFrom has succeeded\r\n        //token.transferFrom(msg.sender, this, tokenQty);\r\n\r\n        // Mitigate ERC20 Approve front-running attack, by initially setting\r\n        // allowance to 0\r\n\r\n       //token.approve(proxy, 0);\r\n\r\n        // Approve tokens so network can take them during the swap\r\n       token.approve(address(proxy), tokenQty);\r\n\r\n       uint destAmount = proxy.tradeWithHint(ERC20(saiAddress), tokenQty, ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee), this, 8000000000000000000000000000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000004, PERM_HINT);\r\n\r\n       return destAmount;\r\n      //uint destAmount = proxy.swapTokenToEther(token, tokenQty, minRate);\r\n\r\n     // Send received ethers to destination address\r\n     //  destAddress.transfer(destAmount);\r\n    }\r\n\r\n    // buy ETH from Kyber and sell it on Uniswap \r\n     function kyberToUniSwapArb(address fromAddress, address uniSwapContract, uint theAmount) public payable onlyOwner returns (bool){\r\n\r\n        address theAddress = uniSwapContract;\r\n        UniswapExchangeInterface usi = UniswapExchangeInterface(theAddress);\r\n\r\n        ERC20 address1 = ERC20(fromAddress);\r\n\r\n        uint ethBack = swapTokenToEther1(address1 , theAmount);\r\n\r\n        usi.ethToTokenSwapInput.value(ethBack)(1, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n    \r\n     // sell ETH on Kyber and buy it on Uniswap\r\n     function uniswapToKyberArb(address fromAddress, address uniSwapContract) public payable onlyOwner returns (bool){\r\n\r\n        address theAddress = uniSwapContract;\r\n        UniswapExchangeInterface usi = UniswapExchangeInterface(theAddress);\r\n\r\n        ERC20 address1 = ERC20(fromAddress);\r\n\r\n        uint tokenAmt = swapEtherToToken1 (proxy, address1); \r\n\r\n        //usi.ethToTokenSwapInput.value(ethBack)(1, block.timestamp);\r\n        uint ethBack = usi.tokenToEthSwapInput(tokenAmt, 1, block.timestamp);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function () external payable  {\r\n\r\n    }\r\n\r\n    function withdrawETHAndTokens() public onlyOwner{\r\n        //withsdraw all the tokens out\r\n        msg.sender.transfer(address(this).balance);\r\n         ERC20 daiToken = ERC20(saiAddress);\r\n        uint256 currentTokenBalance = daiToken.balanceOf(this);\r\n        daiToken.transfer(msg.sender, currentTokenBalance);\r\n\r\n    }\r\n\r\n\r\n    function getKyberSellPrice() public view returns (uint256){\r\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", \"SAI\", \"SELL-KYBER-EXCHANGE\", 1000000000000000000); //DAI\r\n        return currentPrice;\r\n    }\r\n\r\n\r\n    function getUniswapBuyPrice() public view returns (uint256){\r\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", \"SAI\", \"BUY-UNISWAP-EXCHANGE\", 1000000000000000000); //DAI\r\n        return currentPrice;\r\n    }\r\n\r\n    function getKyberBuyPrice() public view returns (uint256){\r\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", \"SAI\", \"BUY-KYBER-EXCHANGE\", 1000000000000000000); //DAI\r\n        return currentPrice;\r\n    }\r\n\r\n\r\n     function getUniswapSellPrice() public view returns (uint256){\r\n       uint256 currentPrice =  orfeed.getExchangeRate(\"ETH\", \"SAI\", \"SELL-UNISWAP-EXCHANGE\", 1000000000000000000); //DAI\r\n        return currentPrice;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUniswapSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKyberBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getKyberSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETHAndTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddress\",\"type\":\"address\"},{\"name\":\"uniSwapContract\",\"type\":\"address\"},{\"name\":\"theAmount\",\"type\":\"uint256\"}],\"name\":\"kyberToUniSwapArb\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddress\",\"type\":\"address\"},{\"name\":\"uniSwapContract\",\"type\":\"address\"}],\"name\":\"uniswapToKyberArb\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Trader","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://51e52040aace330b082ab39de702a89d08930cf56fc1fb891cae74c01f7e7d18"}]}