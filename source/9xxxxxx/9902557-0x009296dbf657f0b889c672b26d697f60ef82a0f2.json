{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface OasisInterface {\r\n    function getMinSell(TokenInterface pay_gem) external view returns (uint);\r\n    function getBuyAmount(address dest, address src, uint srcAmt) external view returns(uint);\r\n\tfunction getPayAmount(address src, address dest, uint destAmt) external view returns (uint);\r\n\tfunction sellAllAmount(\r\n        address src,\r\n        uint srcAmt,\r\n        address dest,\r\n        uint minDest\r\n    ) external returns (uint destAmt);\r\n\tfunction buyAllAmount(\r\n        address dest,\r\n        uint destAmt,\r\n        address src,\r\n        uint maxSrc\r\n    ) external returns (uint srcAmt);\r\n\r\n    function offer(\r\n        uint pay_amt,\r\n        TokenInterface pay_gem,\r\n        uint buy_amt,\r\n        TokenInterface buy_gem,\r\n        uint pos\r\n    ) external returns (uint);\r\n    function cancel(uint id) external returns (bool success);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address _user) external view returns (bool);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n}\r\n\r\n\r\ncontract OasisHelpers is Helpers {\r\n    /**\r\n     * @dev Return WETH address\r\n     */\r\n    function getAddressWETH() internal pure returns (address) {\r\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev Return Oasis Address\r\n     */\r\n    function getOasisAddr() internal pure returns (address) {\r\n        return 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(buy);\r\n        _sell = sell == getAddressETH() ? TokenInterface(getAddressWETH()) : TokenInterface(sell);\r\n    }\r\n\r\n    function convertEthToWeth(TokenInterface token, uint amount) internal {\r\n        if(address(token) == getAddressWETH()) {\r\n            token.deposit.value(amount)();\r\n        } else {\r\n            token.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function convertWethToEth(TokenInterface token, uint amount) internal {\r\n       if(address(token) == getAddressWETH()) {\r\n            token.approve(getAddressWETH(), amount);\r\n            token.withdraw(amount);\r\n            msg.sender.transfer(amount);\r\n        } else {\r\n            token.transfer(msg.sender, amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract OasisResolver is OasisHelpers {\r\n    event LogBuy(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    event LogSell(\r\n        address indexed buyToken,\r\n        address indexed sellToken,\r\n        uint256 buyAmt,\r\n        uint256 sellAmt,\r\n        uint256 getId,\r\n        uint256 setId\r\n    );\r\n\r\n    function buy(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint buyAmt,\r\n        uint sellAmt,\r\n        uint slippage,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _buyAmt = buyAmt;\r\n\r\n        uint _sellAmt = _buyAmt == buyAmt ? sellAmt : wmul(sellAmt, wdiv(_buyAmt, buyAmt));\r\n\r\n        OasisInterface oasisContract = OasisInterface(getOasisAddr());\r\n\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        require(oasisContract.getMinSell(_sellAddr) <= _sellAmt, \"less-than-min-pay-amt\");\r\n\r\n        uint _slippageAmt = wmul(_sellAmt, add(WAD, slippage));\r\n        uint _expectedAmt = oasisContract.getPayAmount(address(_sellAddr), address(_buyAddr), _buyAmt);\r\n        require(_slippageAmt >= _expectedAmt, \"Too much slippage\");\r\n\r\n        convertEthToWeth(_sellAddr, _expectedAmt);\r\n        _sellAddr.approve(getOasisAddr(), _expectedAmt);\r\n\r\n        _sellAmt = oasisContract.buyAllAmount(\r\n            address(_buyAddr),\r\n            buyAmt,\r\n            address(_sellAddr),\r\n            _slippageAmt\r\n        );\r\n\r\n        convertWethToEth(_buyAddr, buyAmt);\r\n        assert(false);\r\n\r\n        emit LogBuy(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, getId, setId);\r\n    }\r\n\r\n    function sell(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint buyAmt,\r\n        uint sellAmt,\r\n        uint slippage,\r\n        uint getId,\r\n        uint setId\r\n    ) external payable {\r\n        uint _sellAmt = sellAmt;\r\n\r\n        uint _buyAmt = _sellAmt == sellAmt ? buyAmt : wmul(buyAmt, wdiv(_sellAmt, sellAmt));\r\n\r\n        OasisInterface oasisContract = OasisInterface(getOasisAddr());\r\n\r\n        (TokenInterface _buyAddr, TokenInterface _sellAddr) = changeEthAddress(buyAddr, sellAddr);\r\n        require(oasisContract.getMinSell(_sellAddr) <= _sellAmt, \"less-than-min-pay-amt\");\r\n\r\n        uint _slippageAmt = wdiv(_buyAmt, add(WAD, slippage));\r\n        uint _expectedAmt = oasisContract.getBuyAmount(address(_buyAddr), address(_sellAddr), sellAmt);\r\n        require(_slippageAmt <= _expectedAmt, \"Too much slippage\");\r\n\r\n        convertEthToWeth(_sellAddr, sellAmt);\r\n        _sellAddr.approve(getOasisAddr(), _sellAmt);\r\n\r\n        _buyAmt = oasisContract.sellAllAmount(\r\n            address(_sellAddr),\r\n            _sellAmt,\r\n            address(_buyAddr),\r\n           _slippageAmt\r\n        );\r\n\r\n        convertWethToEth(_buyAddr, _buyAmt);\r\n        assert(false);\r\n        emit LogSell(address(_buyAddr), address(_sellAddr), buyAmt, sellAmt, getId, setId);\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectOasis is OasisResolver {\r\n    string public name = \"Oasis-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectOasis","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://4f87e925175a2f863f8eb846101ba6125e17db523562caa6d047d42d9e413932"}]}