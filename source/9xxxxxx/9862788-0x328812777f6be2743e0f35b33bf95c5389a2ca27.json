{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\r\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\r\n * it), and not Whitelisteds themselves.\r\n */\r\ncontract WhitelistedRole is WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/FundsSplitterV2.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract FundsSplitterV2 is WhitelistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public platform;\r\n    address payable public partner;\r\n\r\n    uint256 public partnerRate = 15;\r\n\r\n    constructor (address payable _platform, address payable _partner) public {\r\n        platform = _platform;\r\n        partner = _partner;\r\n    }\r\n\r\n    function splitFunds(uint256 _totalPrice) internal {\r\n        if (msg.value > 0) {\r\n            uint256 refund = msg.value.sub(_totalPrice);\r\n\r\n            // overpaid...\r\n            if (refund > 0) {\r\n                msg.sender.transfer(refund);\r\n            }\r\n\r\n            // work out the amount to split and send it\r\n            uint256 partnerAmount = _totalPrice.div(100).mul(partnerRate);\r\n            partner.transfer(partnerAmount);\r\n\r\n            // send remaining amount to blockCities wallet\r\n            uint256 remaining = _totalPrice.sub(partnerAmount);\r\n            platform.transfer(remaining);\r\n        }\r\n    }\r\n\r\n    function updatePartnerAddress(address payable _partner) onlyWhitelisted public {\r\n        partner = _partner;\r\n    }\r\n\r\n    function updatePartnerRate(uint256 _techPartnerRate) onlyWhitelisted public {\r\n        partnerRate = _techPartnerRate;\r\n    }\r\n\r\n    function updatePlatformAddress(address payable _platform) onlyWhitelisted public {\r\n        platform = _platform;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/Strings.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary Strings {\r\n\r\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        uint i = 0;\r\n        for (i = 0; i < _ba.length; i++) {\r\n            babcde[k++] = _ba[i];\r\n        }\r\n        for (i = 0; i < _bb.length; i++) {\r\n            babcde[k++] = _bb[i];\r\n        }\r\n        for (i = 0; i < _bc.length; i++) {\r\n            babcde[k++] = _bc[i];\r\n        }\r\n        for (i = 0; i < _bd.length; i++) {\r\n            babcde[k++] = _bd[i];\r\n        }\r\n        for (i = 0; i < _be.length; i++) {\r\n            babcde[k++] = _be[i];\r\n        }\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/IBlockCitiesCreator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IBlockCitiesCreator {\r\n    function createBuilding(\r\n        uint256 _exteriorColorway,\r\n        uint256 _backgroundColorway,\r\n        uint256 _city,\r\n        uint256 _building,\r\n        uint256 _base,\r\n        uint256 _body,\r\n        uint256 _roof,\r\n        uint256 _special,\r\n        address _architect\r\n    ) external returns (uint256 _tokenId);\r\n}\r\n\r\n// File: contracts/validators/IValidator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IValidator {\r\n    function validate(uint256 _building, uint256 _base, uint256 _body, uint256 _roof, uint256 _exterior) external view returns (bool);\r\n}\r\n\r\n// File: contracts/LimitedVendingMachine.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LimitedVendingMachine is FundsSplitterV2, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    event VendingMachineTriggered(\r\n        uint256 indexed _tokenId,\r\n        address indexed _architect\r\n    );\r\n\r\n    event CreditAdded(address indexed _to, uint256 _amount);\r\n\r\n    event PriceStepInWeiChanged(\r\n        uint256 _oldPriceStepInWei,\r\n        uint256 _newPriceStepInWei\r\n    );\r\n\r\n    event FloorPricePerBuildingInWeiChanged(\r\n        uint256 _oldFloorPricePerBuildingInWei,\r\n        uint256 _newFloorPricePerBuildingInWei\r\n    );\r\n\r\n    event CeilingPricePerBuildingInWeiChanged(\r\n        uint256 _oldCeilingPricePerBuildingInWei,\r\n        uint256 _newCeilingPricePerBuildingInWei\r\n    );\r\n\r\n    event BlockStepChanged(\r\n        uint256 _oldBlockStep,\r\n        uint256 _newBlockStep\r\n    );\r\n\r\n    event LastSaleBlockChanged(\r\n        uint256 _oldLastSaleBlock,\r\n        uint256 _newLastSaleBlock\r\n    );\r\n\r\n    event LastSalePriceChanged(\r\n        uint256 _oldLastSalePrice,\r\n        uint256 _newLastSalePrice\r\n    );\r\n\r\n    IBlockCitiesCreator public blockCities;\r\n    IValidator public validator;\r\n\r\n    mapping(address => uint256) public credits;\r\n\r\n    uint256 public totalPurchasesInWei = 0;\r\n\r\n    uint256 public floorPricePerBuildingInWei = 0.05 ether;\r\n\r\n    uint256 public ceilingPricePerBuildingInWei = 0.15 ether;\r\n\r\n    uint256 public priceStepInWei = 0.0003 ether;\r\n\r\n    uint256 public blockStep = 10;\r\n\r\n    uint256 public lastSaleBlock = 0;\r\n    uint256 public lastSalePrice = 0.075 ether;\r\n\r\n    uint256 public buildingMintLimit;\r\n    uint256 public totalBuildings;\r\n    uint256 public city;\r\n\r\n    mapping(bytes32 => bool) public buildingRegistry;\r\n\r\n    constructor (\r\n        IBlockCitiesCreator _blockCities,\r\n        IValidator _validator,\r\n        address payable _platform,\r\n        address payable _partnerAddress,\r\n        uint256 _buildingMintLimit,\r\n        uint256 _city\r\n    ) public FundsSplitterV2(_platform, _partnerAddress) {\r\n        blockCities = _blockCities;\r\n        validator = _validator;\r\n\r\n        lastSaleBlock = block.number;\r\n\r\n        buildingMintLimit = _buildingMintLimit;\r\n\r\n        super.addWhitelisted(msg.sender);\r\n\r\n        city = _city;\r\n    }\r\n\r\n    function mintBuilding(\r\n        uint256 _building,\r\n        uint256 _base,\r\n        uint256 _body,\r\n        uint256 _roof,\r\n        uint256 _exteriorColorway,\r\n        uint256 _backgroundColorway\r\n    ) whenNotPaused public payable returns (uint256 _tokenId) {\r\n        uint256 currentPrice = totalPrice();\r\n        require(\r\n            credits[msg.sender] > 0 || msg.value >= currentPrice,\r\n            \"Must supply at least the required minimum purchase value or have credit\"\r\n        );\r\n\r\n        _reconcileCreditsAndFunds(currentPrice);\r\n\r\n        // always pass a special value of zero; as specials created via own function\r\n        uint256 tokenId = _generate(_building, _base, _body, _roof, 0, _exteriorColorway, _backgroundColorway);\r\n\r\n        _stepIncrease();\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function mintSpecial(\r\n        uint256 _special\r\n    ) onlyWhitelisted public returns (uint256 _tokenId) {\r\n        require(totalBuildings < buildingMintLimit, \"The building mint limit has been reached\");\r\n\r\n        uint256 tokenId = blockCities.createBuilding(\r\n            0,\r\n            0,\r\n            city,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            _special,\r\n            msg.sender\r\n        );\r\n\r\n        totalBuildings = totalBuildings.add(1);\r\n\r\n        emit VendingMachineTriggered(tokenId, msg.sender);\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function premintBuilding(\r\n        uint256 _building,\r\n        uint256 _base,\r\n        uint256 _body,\r\n        uint256 _roof,\r\n        uint256 _exteriorColorway,\r\n        uint256 _backgroundColorway\r\n    ) onlyWhitelisted public returns (uint256 _tokenId) {\r\n        // always pass a special value of zero; as specials created via own function\r\n        return _generate(_building, _base, _body, _roof, 0, _exteriorColorway, _backgroundColorway);\r\n    }\r\n\r\n    function _generate(\r\n        uint256 _building,\r\n        uint256 _base,\r\n        uint256 _body,\r\n        uint256 _roof,\r\n        uint256 _special,\r\n        uint256 _exteriorColorway,\r\n        uint256 _backgroundColorway\r\n    ) internal returns (uint256 _tokenId) {\r\n        require(totalBuildings < buildingMintLimit, \"The building mint limit has been reached\");\r\n\r\n        // validate building can be built at this time\r\n        bool valid = validator.validate(_building, _base, _body, _roof, _exteriorColorway);\r\n        require(valid, \"Building must be valid\");\r\n\r\n        // check unique and not already built\r\n        bytes32 buildingAndColorwayHash = keccak256(abi.encode(_building, _base, _body, _roof, _special, _exteriorColorway));\r\n        require(!buildingRegistry[buildingAndColorwayHash], \"Building already exists\");\r\n\r\n        uint256 tokenId = blockCities.createBuilding(\r\n            _exteriorColorway,\r\n            _backgroundColorway,\r\n            city,\r\n            _building,\r\n            _base,\r\n            _body,\r\n            _roof,\r\n            _special,\r\n            msg.sender\r\n        );\r\n\r\n        // add to registry to avoid dupes\r\n        buildingRegistry[buildingAndColorwayHash] = true;\r\n\r\n        totalBuildings = totalBuildings.add(1);\r\n\r\n        emit VendingMachineTriggered(tokenId, msg.sender);\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function built(uint256 _building, uint256 _base, uint256 _body, uint256 _roof, uint256 _special, uint256 _exteriorColorway, uint256 _backgroundColorway) public view returns (bool) {\r\n        bytes32 buildingAndColorwayHash = keccak256(abi.encode(_building, _base, _body, _roof, _special, _exteriorColorway, _backgroundColorway));\r\n        return buildingRegistry[buildingAndColorwayHash];\r\n    }\r\n\r\n    function _reconcileCreditsAndFunds(uint256 _currentPrice) internal {\r\n        // use credits first\r\n        if (credits[msg.sender] >= 1) {\r\n            credits[msg.sender] = credits[msg.sender].sub(1);\r\n\r\n            // refund msg.value when using up credits\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n        } else {\r\n            splitFunds(_currentPrice);\r\n            totalPurchasesInWei = totalPurchasesInWei.add(_currentPrice);\r\n        }\r\n    }\r\n\r\n    function _stepIncrease() internal {\r\n\r\n        lastSalePrice = totalPrice().add(priceStepInWei);\r\n        lastSaleBlock = block.number;\r\n\r\n        if (lastSalePrice >= ceilingPricePerBuildingInWei) {\r\n            lastSalePrice = ceilingPricePerBuildingInWei;\r\n        }\r\n    }\r\n\r\n    function totalPrice() public view returns (uint256) {\r\n\r\n        uint256 calculatedPrice = lastSalePrice;\r\n\r\n        uint256 blocksPassed = block.number - lastSaleBlock;\r\n        uint256 reduce = blocksPassed.div(blockStep).mul(priceStepInWei);\r\n\r\n        if (reduce > calculatedPrice) {\r\n            calculatedPrice = floorPricePerBuildingInWei;\r\n        }\r\n        else {\r\n            calculatedPrice = calculatedPrice.sub(reduce);\r\n\r\n            if (calculatedPrice < floorPricePerBuildingInWei) {\r\n                calculatedPrice = floorPricePerBuildingInWei;\r\n            }\r\n        }\r\n\r\n        return calculatedPrice;\r\n    }\r\n\r\n    function setPriceStepInWei(uint256 _priceStepInWei) public onlyWhitelisted returns (bool) {\r\n        emit PriceStepInWeiChanged(priceStepInWei, _priceStepInWei);\r\n        priceStepInWei = _priceStepInWei;\r\n        return true;\r\n    }\r\n\r\n    function addCredit(address _to) public onlyWhitelisted returns (bool) {\r\n        credits[_to] = credits[_to].add(1);\r\n\r\n        emit CreditAdded(_to, 1);\r\n\r\n        return true;\r\n    }\r\n\r\n    function addCreditAmount(address _to, uint256 _amount) public onlyWhitelisted returns (bool) {\r\n        credits[_to] = credits[_to].add(_amount);\r\n\r\n        emit CreditAdded(_to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setFloorPricePerBuildingInWei(uint256 _floorPricePerBuildingInWei) public onlyWhitelisted returns (bool) {\r\n        emit FloorPricePerBuildingInWeiChanged(floorPricePerBuildingInWei, _floorPricePerBuildingInWei);\r\n        floorPricePerBuildingInWei = _floorPricePerBuildingInWei;\r\n        return true;\r\n    }\r\n\r\n    function setCeilingPricePerBuildingInWei(uint256 _ceilingPricePerBuildingInWei) public onlyWhitelisted returns (bool) {\r\n        emit CeilingPricePerBuildingInWeiChanged(ceilingPricePerBuildingInWei, _ceilingPricePerBuildingInWei);\r\n        ceilingPricePerBuildingInWei = _ceilingPricePerBuildingInWei;\r\n        return true;\r\n    }\r\n\r\n    function setBlockStep(uint256 _blockStep) public onlyWhitelisted returns (bool) {\r\n        emit BlockStepChanged(blockStep, _blockStep);\r\n        blockStep = _blockStep;\r\n        return true;\r\n    }\r\n\r\n    function setLastSaleBlock(uint256 _lastSaleBlock) public onlyWhitelisted returns (bool) {\r\n        emit LastSaleBlockChanged(lastSaleBlock, _lastSaleBlock);\r\n        lastSaleBlock = _lastSaleBlock;\r\n        return true;\r\n    }\r\n\r\n    function setLastSalePrice(uint256 _lastSalePrice) public onlyWhitelisted returns (bool) {\r\n        emit LastSalePriceChanged(lastSalePrice, _lastSalePrice);\r\n        lastSalePrice = _lastSalePrice;\r\n        return true;\r\n    }\r\n\r\n    function buildingsMintAllowanceRemaining() external view returns (uint256) {\r\n        return buildingMintLimit.sub(totalBuildings);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBlockCitiesCreator\",\"name\":\"_blockCities\",\"type\":\"address\"},{\"internalType\":\"contract IValidator\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buildingMintLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_city\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldBlockStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBlockStep\",\"type\":\"uint256\"}],\"name\":\"BlockStepChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldCeilingPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newCeilingPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"CeilingPricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFloorPricePerBuildingInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFloorPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"FloorPricePerBuildingInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLastSaleBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLastSaleBlock\",\"type\":\"uint256\"}],\"name\":\"LastSaleBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldLastSalePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLastSalePrice\",\"type\":\"uint256\"}],\"name\":\"LastSalePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPriceStepInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPriceStepInWei\",\"type\":\"uint256\"}],\"name\":\"PriceStepInWeiChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_architect\",\"type\":\"address\"}],\"name\":\"VendingMachineTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCreditAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockCities\",\"outputs\":[{\"internalType\":\"contract IBlockCitiesCreator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buildingMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"buildingRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buildingsMintAllowanceRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_building\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roof\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_special\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exteriorColorway\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_backgroundColorway\",\"type\":\"uint256\"}],\"name\":\"built\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceilingPricePerBuildingInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"city\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floorPricePerBuildingInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSaleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_building\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roof\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exteriorColorway\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_backgroundColorway\",\"type\":\"uint256\"}],\"name\":\"mintBuilding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_special\",\"type\":\"uint256\"}],\"name\":\"mintSpecial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_building\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_body\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roof\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exteriorColorway\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_backgroundColorway\",\"type\":\"uint256\"}],\"name\":\"premintBuilding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStepInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockStep\",\"type\":\"uint256\"}],\"name\":\"setBlockStep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ceilingPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setCeilingPricePerBuildingInWei\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_floorPricePerBuildingInWei\",\"type\":\"uint256\"}],\"name\":\"setFloorPricePerBuildingInWei\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastSaleBlock\",\"type\":\"uint256\"}],\"name\":\"setLastSaleBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastSalePrice\",\"type\":\"uint256\"}],\"name\":\"setLastSalePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceStepInWei\",\"type\":\"uint256\"}],\"name\":\"setPriceStepInWei\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuildings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPurchasesInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_techPartnerRate\",\"type\":\"uint256\"}],\"name\":\"updatePartnerRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatformAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract IValidator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LimitedVendingMachine","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002f2d5aa0efdb9ca3c9bb789693d06bebea88792f00000000000000000000000059a4fe4683b5e027e99974a23459b2cd01f4704e00000000000000000000000064c971d7e3c0483fa97a7714ec55d1e1943731c7000000000000000000000000860e21abcc3b9c10635a65c8a3bc7f1ba692211c00000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"None","SwarmSource":"bzzr://4b54b61b33e8819e19f5f0bd55543701ce82f73f2a08e7ff1c7a286e0c6a6007"}]}