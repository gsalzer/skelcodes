{"status":"1","message":"OK","result":[{"SourceCode":"// File: browser/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: browser/Module.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ninterface Module {\r\n\r\n    /**\r\n     * @dev Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external;\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n\r\n    /**\r\n    * @dev Utility method to recover any ERC20 token that was sent to the\r\n    * module by mistake. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external;\r\n}\r\n// File: browser/BaseWallet.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\n\r\n/**\r\n * @title BaseWallet\r\n */\r\ncontract BaseWallet {\r\n\r\n    // The owner\r\n    address public owner;\r\n    // The number of modules\r\n    uint public modules;\r\n    // The authorised modules/devices\r\n    mapping (address => bool) public authorised;\r\n    // The enabled static calls\r\n    mapping (bytes4 => address) public enabled;\r\n\r\n    event AuthorisedModule(address indexed module, bool value);\r\n    event EnabledStaticCall(address indexed module, bytes4 indexed method);\r\n    event Invoked(address indexed module, address indexed target, uint indexed value, bytes data);\r\n    event OwnerChanged(address owner);\r\n    event Received(uint indexed value, address indexed sender, bytes data);\r\n    event WithdrawToOwner(address owner, address token, uint256 amount);\r\n    /**\r\n     * @dev Throws if the sender is not an authorised module.\r\n     */\r\n    modifier moduleOnly {\r\n        require(authorised[msg.sender], \"BW: msg.sender not an authorized module\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the wallet by setting the owner and authorising a list of modules.\r\n     * @param _owner The owner.\r\n     * @param _modules The modules to authorise.\r\n     */\r\n    function init(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        address _target,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n    {\r\n        require(owner == address(0) && modules == 0, \"BW: wallet already initialised\");\r\n        require(_modules.length > 0, \"BW: construction requires at least 1 module\");\r\n        owner = _owner;\r\n        modules = _modules.length;\r\n        for(uint256 i = 0; i < _modules.length; i++) {\r\n            require(authorised[_modules[i]] == false, \"BW: module is already added\");\r\n            authorised[_modules[i]] = true;\r\n            Module(_modules[i]).init(this);\r\n            emit AuthorisedModule(_modules[i], true);\r\n        }\r\n    }\r\n    /**\r\n     * @dev invokes call towards targetAddress with targetData on behalf of user wallet.\r\n     * @param _target The calling address.\r\n     * @param _data Call data for the transaction.\r\n     */\r\n    function invokeTargetWithData(\r\n        address _target,\r\n        bytes memory _data\r\n    )\r\n        public\r\n    {\r\n        if (_target != address(0) && _data.length > 0) {\r\n            _invoke(_target, 0, _data);\r\n        }\r\n    }\r\n\r\n    /**\r\n    @dev returns funds withdraw from contract wallet to owner address\r\n    @param _token The token to be transfered back.\r\n    @param _amount The amount to be transfered back.\r\n     */\r\n    function withdrawToOwner(\r\n        address _token,\r\n        uint256 _amount\r\n        )\r\n        external\r\n        moduleOnly\r\n        {\r\n        IERC20(_token).transfer(owner, _amount);\r\n        emit WithdrawToOwner(owner, _token, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables/Disables a module.\r\n     * @param _module The target module.\r\n     * @param _value Set to true to authorise the module.\r\n     */\r\n    function authoriseModule(\r\n        address _module,\r\n        bool _value\r\n    )\r\n        external\r\n        moduleOnly\r\n    {\r\n        if (authorised[_module] != _value) {\r\n            if(_value == true) {\r\n                modules += 1;\r\n                authorised[_module] = true;\r\n                Module(_module).init(this);\r\n            }\r\n            else {\r\n                modules -= 1;\r\n                require(modules > 0, \"BW: wallet must have at least one module\");\r\n                delete authorised[_module];\r\n            }\r\n            emit AuthorisedModule(_module, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Enables a static method by specifying the target module to which the call\r\n    * must be delegated.\r\n    * @param _module The target module.\r\n    * @param _method The static method signature.\r\n    */\r\n    function enableStaticCall(\r\n        address _module,\r\n        bytes4 _method\r\n    )\r\n        external\r\n        moduleOnly\r\n    {\r\n        require(authorised[_module], \"BW: must be an authorised module for static call\");\r\n        enabled[_method] = _module;\r\n        emit EnabledStaticCall(_module, _method);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new owner for the wallet.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function setOwner(address _newOwner)\r\n        external\r\n        moduleOnly\r\n    {\r\n        require(_newOwner != address(0), \"BW: address cannot be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n    \r\n    /**\r\n     * @dev Performs a generic transaction.\r\n     * @param _target The address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     * @return the result data of the forwarded call.\r\n     */\r\n    function invoke(\r\n        address _target,\r\n        uint _value,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        moduleOnly\r\n        returns (bytes memory)\r\n    {\r\n        return _invoke(_target, _value, _data);\r\n    }\r\n\r\n    function _invoke(\r\n        address _target,\r\n        uint _value,\r\n        bytes memory _data\r\n    )\r\n        private\r\n        returns (bytes memory)\r\n    {\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory result) = _target.call.value(_value)(_data);\r\n        require(success, \"BW: call to target failed\");\r\n        emit Invoked(msg.sender, _target, _value, _data);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev This method makes it possible for the wallet to comply to interfaces expecting the wallet to\r\n     * implement specific static methods. It delegates the static call to a target contract if the data corresponds\r\n     * to an enabled method, or logs the call otherwise.\r\n     */\r\n    function() external payable {\r\n        if(msg.data.length > 0) {\r\n            address module = enabled[msg.sig];\r\n            if(module == address(0)) {\r\n                emit Received(msg.value, msg.sender, msg.data);\r\n            }\r\n            else {\r\n                require(authorised[module], \"BW: must be an authorised module for static call\");\r\n                // solium-disable-next-line security/no-inline-assembly\r\n                assembly {\r\n                    calldatacopy(0, 0, calldatasize())\r\n                    let result := staticcall(gas, module, 0, calldatasize(), 0, 0)\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    switch result\r\n                    case 0 {revert(0, returndatasize())}\r\n                    default {return (0, returndatasize())}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"},{\"name\":\"_method\",\"type\":\"bytes4\"}],\"name\":\"enableStaticCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"authoriseModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"invokeTargetWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"invoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorised\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"modules\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AuthorisedModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"method\",\"type\":\"bytes4\"}],\"name\":\"EnabledStaticCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Invoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToOwner\",\"type\":\"event\"}]","ContractName":"BaseWallet","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://7ab26633a47147402d73621e66cb60ac78907b2fa83d7b34b858801c595b162c"}]}