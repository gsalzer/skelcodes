{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/court/contracts/lib/os/ERC20.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/token/ERC20.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/court/contracts/arbitration/IArbitrator.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ninterface IArbitrator {\r\n    /**\r\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\r\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\r\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\r\n    * @return Dispute identification number\r\n    */\r\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Close the evidence period of a dispute\r\n    * @param _disputeId Identification number of the dispute to close its evidence submitting period\r\n    */\r\n    function closeEvidencePeriod(uint256 _disputeId) external;\r\n\r\n    /**\r\n    * @dev Execute the Arbitrable associated to a dispute based on its final ruling\r\n    * @param _disputeId Identification number of the dispute to be executed\r\n    */\r\n    function executeRuling(uint256 _disputeId) external;\r\n\r\n    /**\r\n    * @dev Tell the dispute fees information to create a dispute\r\n    * @return recipient Address where the corresponding dispute fees must be transferred to\r\n    * @return feeToken ERC20 token used for the fees\r\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n    */\r\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\r\n\r\n    /**\r\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\r\n    * @param _subscriber Address of the account paying the subscription fees for\r\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\r\n    * @return feeToken ERC20 token used for the subscription fees\r\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n    */\r\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\r\n}\r\n\r\n// File: @aragon/court/contracts/standards/ERC165.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\ninterface ERC165 {\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool);\r\n}\r\n\r\n// File: @aragon/court/contracts/arbitration/IArbitrable.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\ncontract IArbitrable is ERC165 {\r\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\r\n    bytes4 internal constant ARBITRABLE_INTERFACE_ID = bytes4(0x88f3ee69);\r\n\r\n    /**\r\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\r\n    * @param arbitrator IArbitrator instance ruling the dispute\r\n    * @param disputeId Identification number of the dispute being ruled by the arbitrator\r\n    * @param ruling Ruling given by the arbitrator\r\n    */\r\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\r\n\r\n    /**\r\n    * @dev Emitted when new evidence is submitted for the IArbitrable instance's dispute\r\n    * @param disputeId Identification number of the dispute receiving new evidence\r\n    * @param submitter Address of the account submitting the evidence\r\n    * @param evidence Data submitted for the evidence of the dispute\r\n    * @param finished Whether or not the submitter has finished submitting evidence\r\n    */\r\n    event EvidenceSubmitted(uint256 indexed disputeId, address indexed submitter, bytes evidence, bool finished);\r\n\r\n    /**\r\n    * @dev Submit evidence for a dispute\r\n    * @param _disputeId Id of the dispute in the Court\r\n    * @param _evidence Data submitted for the evidence related to the dispute\r\n    * @param _finished Whether or not the submitter has finished submitting evidence\r\n    */\r\n    function submitEvidence(uint256 _disputeId, bytes calldata _evidence, bool _finished) external;\r\n\r\n    /**\r\n    * @dev Give a ruling for a certain dispute, the account calling it must have rights to rule on the contract\r\n    * @param _disputeId Identification number of the dispute to be ruled\r\n    * @param _ruling Ruling given by the arbitrator, where 0 is reserved for \"refused to make a decision\"\r\n    */\r\n    function rule(uint256 _disputeId, uint256 _ruling) external;\r\n\r\n    /**\r\n    * @dev ERC165 - Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if this contract supports the given interface, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\r\n        return _interfaceId == ARBITRABLE_INTERFACE_ID || _interfaceId == ERC165_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/treasury/ITreasury.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ninterface ITreasury {\r\n    /**\r\n    * @dev Assign a certain amount of tokens to an account\r\n    * @param _token ERC20 token to be assigned\r\n    * @param _to Address of the recipient that will be assigned the tokens to\r\n    * @param _amount Amount of tokens to be assigned to the recipient\r\n    */\r\n    function assign(ERC20 _token, address _to, uint256 _amount) external;\r\n\r\n    /**\r\n    * @dev Withdraw a certain amount of tokens\r\n    * @param _token ERC20 token to be withdrawn\r\n    * @param _to Address of the recipient that will receive the tokens\r\n    * @param _amount Amount of tokens to be withdrawn from the sender\r\n    */\r\n    function withdraw(ERC20 _token, address _to, uint256 _amount) external;\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/os/IsContract.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/IsContract.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/os/SafeMath64.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/math/SafeMath64.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev Math operations for uint64 with safety checks that revert on error\r\n */\r\nlibrary SafeMath64 {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint256 c = uint256(_a) * uint256(_b);\r\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\r\n\r\n        return uint64(c);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint64 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint64 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint64 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/os/Uint256Helpers.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/Uint256Helpers.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT8 = uint8(-1);\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_UINT8_NUMBER_TOO_BIG = \"UINT8_NUMBER_TOO_BIG\";\r\n    string private constant ERROR_UINT64_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint8(uint256 a) internal pure returns (uint8) {\r\n        require(a <= MAX_UINT8, ERROR_UINT8_NUMBER_TOO_BIG);\r\n        return uint8(a);\r\n    }\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_UINT64_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/os/TimeHelpers.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/TimeHelpers.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/court/clock/IClock.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\ninterface IClock {\r\n    /**\r\n    * @dev Ensure that the current term of the clock is up-to-date\r\n    * @return Identification number of the current term\r\n    */\r\n    function ensureCurrentTerm() external returns (uint64);\r\n\r\n    /**\r\n    * @dev Transition up to a certain number of terms to leave the clock up-to-date\r\n    * @param _maxRequestedTransitions Max number of term transitions allowed by the sender\r\n    * @return Identification number of the term ID after executing the heartbeat transitions\r\n    */\r\n    function heartbeat(uint64 _maxRequestedTransitions) external returns (uint64);\r\n\r\n    /**\r\n    * @dev Ensure that a certain term has its randomness set\r\n    * @return Randomness of the current term\r\n    */\r\n    function ensureCurrentTermRandomness() external returns (bytes32);\r\n\r\n    /**\r\n    * @dev Tell the last ensured term identification number\r\n    * @return Identification number of the last ensured term\r\n    */\r\n    function getLastEnsuredTermId() external view returns (uint64);\r\n\r\n    /**\r\n    * @dev Tell the current term identification number. Note that there may be pending term transitions.\r\n    * @return Identification number of the current term\r\n    */\r\n    function getCurrentTermId() external view returns (uint64);\r\n\r\n    /**\r\n    * @dev Tell the number of terms the clock should transition to be up-to-date\r\n    * @return Number of terms the clock should transition to be up-to-date\r\n    */\r\n    function getNeededTermTransitions() external view returns (uint64);\r\n\r\n    /**\r\n    * @dev Tell the information related to a term based on its ID\r\n    * @param _termId ID of the term being queried\r\n    * @return startTime Term start time\r\n    * @return randomnessBN Block number used for randomness in the requested term\r\n    * @return randomness Randomness computed for the requested term\r\n    */\r\n    function getTerm(uint64 _termId) external view returns (uint64 startTime, uint64 randomnessBN, bytes32 randomness);\r\n\r\n    /**\r\n    * @dev Tell the randomness of a term even if it wasn't computed yet\r\n    * @param _termId Identification number of the term being queried\r\n    * @return Randomness of the requested term\r\n    */\r\n    function getTermRandomness(uint64 _termId) external view returns (bytes32);\r\n}\r\n\r\n// File: @aragon/court/contracts/court/clock/CourtClock.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\n\r\ncontract CourtClock is IClock, TimeHelpers {\r\n    using SafeMath64 for uint64;\r\n\r\n    string private constant ERROR_TERM_DOES_NOT_EXIST = \"CLK_TERM_DOES_NOT_EXIST\";\r\n    string private constant ERROR_TERM_DURATION_TOO_LONG = \"CLK_TERM_DURATION_TOO_LONG\";\r\n    string private constant ERROR_TERM_RANDOMNESS_NOT_YET = \"CLK_TERM_RANDOMNESS_NOT_YET\";\r\n    string private constant ERROR_TERM_RANDOMNESS_UNAVAILABLE = \"CLK_TERM_RANDOMNESS_UNAVAILABLE\";\r\n    string private constant ERROR_BAD_FIRST_TERM_START_TIME = \"CLK_BAD_FIRST_TERM_START_TIME\";\r\n    string private constant ERROR_TOO_MANY_TRANSITIONS = \"CLK_TOO_MANY_TRANSITIONS\";\r\n    string private constant ERROR_INVALID_TRANSITION_TERMS = \"CLK_INVALID_TRANSITION_TERMS\";\r\n    string private constant ERROR_CANNOT_DELAY_STARTED_COURT = \"CLK_CANNOT_DELAY_STARTED_COURT\";\r\n    string private constant ERROR_CANNOT_DELAY_PAST_START_TIME = \"CLK_CANNOT_DELAY_PAST_START_TIME\";\r\n\r\n    // Maximum number of term transitions a callee may have to assume in order to call certain functions that require the Court being up-to-date\r\n    uint64 internal constant MAX_AUTO_TERM_TRANSITIONS_ALLOWED = 1;\r\n\r\n    // Max duration in seconds that a term can last\r\n    uint64 internal constant MAX_TERM_DURATION = 365 days;\r\n\r\n    // Max time until first term starts since contract is deployed\r\n    uint64 internal constant MAX_FIRST_TERM_DELAY_PERIOD = 2 * MAX_TERM_DURATION;\r\n\r\n    struct Term {\r\n        uint64 startTime;              // Timestamp when the term started\r\n        uint64 randomnessBN;           // Block number for entropy\r\n        bytes32 randomness;            // Entropy from randomnessBN block hash\r\n    }\r\n\r\n    // Duration in seconds for each term of the Court\r\n    uint64 private termDuration;\r\n\r\n    // Last ensured term id\r\n    uint64 private termId;\r\n\r\n    // List of Court terms indexed by id\r\n    mapping (uint64 => Term) private terms;\r\n\r\n    event Heartbeat(uint64 previousTermId, uint64 currentTermId);\r\n    event StartTimeDelayed(uint64 previousStartTime, uint64 currentStartTime);\r\n\r\n    /**\r\n    * @dev Ensure a certain term has already been processed\r\n    * @param _termId Identification number of the term to be checked\r\n    */\r\n    modifier termExists(uint64 _termId) {\r\n        require(_termId <= termId, ERROR_TERM_DOES_NOT_EXIST);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    * @param _termParams Array containing:\r\n    *        0. _termDuration Duration in seconds per term\r\n    *        1. _firstTermStartTime Timestamp in seconds when the court will open (to give time for juror on-boarding)\r\n    */\r\n    constructor(uint64[2] memory _termParams) public {\r\n        uint64 _termDuration = _termParams[0];\r\n        uint64 _firstTermStartTime = _termParams[1];\r\n\r\n        require(_termDuration < MAX_TERM_DURATION, ERROR_TERM_DURATION_TOO_LONG);\r\n        require(_firstTermStartTime >= getTimestamp64() + _termDuration, ERROR_BAD_FIRST_TERM_START_TIME);\r\n        require(_firstTermStartTime <= getTimestamp64() + MAX_FIRST_TERM_DELAY_PERIOD, ERROR_BAD_FIRST_TERM_START_TIME);\r\n\r\n        termDuration = _termDuration;\r\n\r\n        // No need for SafeMath: we already checked values above\r\n        terms[0].startTime = _firstTermStartTime - _termDuration;\r\n    }\r\n\r\n    /**\r\n    * @notice Ensure that the current term of the Court is up-to-date. If the Court is outdated by more than `MAX_AUTO_TERM_TRANSITIONS_ALLOWED`\r\n    *         terms, the heartbeat function must be called manually instead.\r\n    * @return Identification number of the current term\r\n    */\r\n    function ensureCurrentTerm() external returns (uint64) {\r\n        return _ensureCurrentTerm();\r\n    }\r\n\r\n    /**\r\n    * @notice Transition up to `_maxRequestedTransitions` terms\r\n    * @param _maxRequestedTransitions Max number of term transitions allowed by the sender\r\n    * @return Identification number of the term ID after executing the heartbeat transitions\r\n    */\r\n    function heartbeat(uint64 _maxRequestedTransitions) external returns (uint64) {\r\n        return _heartbeat(_maxRequestedTransitions);\r\n    }\r\n\r\n    /**\r\n    * @notice Ensure that a certain term has its randomness set. As we allow to draft disputes requested for previous terms, if there\r\n    *      were mined more than 256 blocks for the current term, the blockhash of its randomness BN is no longer available, given\r\n    *      round will be able to be drafted in the following term.\r\n    * @return Randomness of the current term\r\n    */\r\n    function ensureCurrentTermRandomness() external returns (bytes32) {\r\n        // If the randomness for the given term was already computed, return\r\n        uint64 currentTermId = termId;\r\n        Term storage term = terms[currentTermId];\r\n        bytes32 termRandomness = term.randomness;\r\n        if (termRandomness != bytes32(0)) {\r\n            return termRandomness;\r\n        }\r\n\r\n        // Compute term randomness\r\n        bytes32 newRandomness = _computeTermRandomness(currentTermId);\r\n        require(newRandomness != bytes32(0), ERROR_TERM_RANDOMNESS_UNAVAILABLE);\r\n        term.randomness = newRandomness;\r\n        return newRandomness;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the term duration of the Court\r\n    * @return Duration in seconds of the Court term\r\n    */\r\n    function getTermDuration() external view returns (uint64) {\r\n        return termDuration;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the last ensured term identification number\r\n    * @return Identification number of the last ensured term\r\n    */\r\n    function getLastEnsuredTermId() external view returns (uint64) {\r\n        return _lastEnsuredTermId();\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the current term identification number. Note that there may be pending term transitions.\r\n    * @return Identification number of the current term\r\n    */\r\n    function getCurrentTermId() external view returns (uint64) {\r\n        return _currentTermId();\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the number of terms the Court should transition to be up-to-date\r\n    * @return Number of terms the Court should transition to be up-to-date\r\n    */\r\n    function getNeededTermTransitions() external view returns (uint64) {\r\n        return _neededTermTransitions();\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the information related to a term based on its ID. Note that if the term has not been reached, the\r\n    *      information returned won't be computed yet. This function allows querying future terms that were not computed yet.\r\n    * @param _termId ID of the term being queried\r\n    * @return startTime Term start time\r\n    * @return randomnessBN Block number used for randomness in the requested term\r\n    * @return randomness Randomness computed for the requested term\r\n    */\r\n    function getTerm(uint64 _termId) external view returns (uint64 startTime, uint64 randomnessBN, bytes32 randomness) {\r\n        Term storage term = terms[_termId];\r\n        return (term.startTime, term.randomnessBN, term.randomness);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the randomness of a term even if it wasn't computed yet\r\n    * @param _termId Identification number of the term being queried\r\n    * @return Randomness of the requested term\r\n    */\r\n    function getTermRandomness(uint64 _termId) external view termExists(_termId) returns (bytes32) {\r\n        return _computeTermRandomness(_termId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to ensure that the current term of the Court is up-to-date. If the Court is outdated by more than\r\n    *      `MAX_AUTO_TERM_TRANSITIONS_ALLOWED` terms, the heartbeat function must be called manually.\r\n    * @return Identification number of the resultant term ID after executing the corresponding transitions\r\n    */\r\n    function _ensureCurrentTerm() internal returns (uint64) {\r\n        // Check the required number of transitions does not exceeds the max allowed number to be processed automatically\r\n        uint64 requiredTransitions = _neededTermTransitions();\r\n        require(requiredTransitions <= MAX_AUTO_TERM_TRANSITIONS_ALLOWED, ERROR_TOO_MANY_TRANSITIONS);\r\n\r\n        // If there are no transitions pending, return the last ensured term id\r\n        if (uint256(requiredTransitions) == 0) {\r\n            return termId;\r\n        }\r\n\r\n        // Process transition if there is at least one pending\r\n        return _heartbeat(requiredTransitions);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to transition the Court terms up to a requested number of terms\r\n    * @param _maxRequestedTransitions Max number of term transitions allowed by the sender\r\n    * @return Identification number of the resultant term ID after executing the requested transitions\r\n    */\r\n    function _heartbeat(uint64 _maxRequestedTransitions) internal returns (uint64) {\r\n        // Transition the minimum number of terms between the amount requested and the amount actually needed\r\n        uint64 neededTransitions = _neededTermTransitions();\r\n        uint256 transitions = uint256(_maxRequestedTransitions < neededTransitions ? _maxRequestedTransitions : neededTransitions);\r\n        require(transitions > 0, ERROR_INVALID_TRANSITION_TERMS);\r\n\r\n        uint64 blockNumber = getBlockNumber64();\r\n        uint64 previousTermId = termId;\r\n        uint64 currentTermId = previousTermId;\r\n        for (uint256 transition = 1; transition <= transitions; transition++) {\r\n            // Term IDs are incremented by one based on the number of time periods since the Court started. Since time is represented in uint64,\r\n            // even if we chose the minimum duration possible for a term (1 second), we can ensure terms will never reach 2^64 since time is\r\n            // already assumed to fit in uint64.\r\n            Term storage previousTerm = terms[currentTermId++];\r\n            Term storage currentTerm = terms[currentTermId];\r\n            _onTermTransitioned(currentTermId);\r\n\r\n            // Set the start time of the new term. Note that we are using a constant term duration value to guarantee\r\n            // equally long terms, regardless of heartbeats.\r\n            currentTerm.startTime = previousTerm.startTime.add(termDuration);\r\n\r\n            // In order to draft a random number of jurors in a term, we use a randomness factor for each term based on a\r\n            // block number that is set once the term has started. Note that this information could not be known beforehand.\r\n            currentTerm.randomnessBN = blockNumber + 1;\r\n        }\r\n\r\n        termId = currentTermId;\r\n        emit Heartbeat(previousTermId, currentTermId);\r\n        return currentTermId;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to delay the first term start time only if it wasn't reached yet\r\n    * @param _newFirstTermStartTime New timestamp in seconds when the court will open\r\n    */\r\n    function _delayStartTime(uint64 _newFirstTermStartTime) internal {\r\n        require(_currentTermId() == 0, ERROR_CANNOT_DELAY_STARTED_COURT);\r\n\r\n        Term storage term = terms[0];\r\n        uint64 currentFirstTermStartTime = term.startTime.add(termDuration);\r\n        require(_newFirstTermStartTime > currentFirstTermStartTime, ERROR_CANNOT_DELAY_PAST_START_TIME);\r\n\r\n        // No need for SafeMath: we already checked above that `_newFirstTermStartTime` > `currentFirstTermStartTime` >= `termDuration`\r\n        term.startTime = _newFirstTermStartTime - termDuration;\r\n        emit StartTimeDelayed(currentFirstTermStartTime, _newFirstTermStartTime);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to notify when a term has been transitioned. This function must be overridden to provide custom behavior.\r\n    * @param _termId Identification number of the new current term that has been transitioned\r\n    */\r\n    function _onTermTransitioned(uint64 _termId) internal;\r\n\r\n    /**\r\n    * @dev Internal function to tell the last ensured term identification number\r\n    * @return Identification number of the last ensured term\r\n    */\r\n    function _lastEnsuredTermId() internal view returns (uint64) {\r\n        return termId;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to tell the current term identification number. Note that there may be pending term transitions.\r\n    * @return Identification number of the current term\r\n    */\r\n    function _currentTermId() internal view returns (uint64) {\r\n        return termId.add(_neededTermTransitions());\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to tell the number of terms the Court should transition to be up-to-date\r\n    * @return Number of terms the Court should transition to be up-to-date\r\n    */\r\n    function _neededTermTransitions() internal view returns (uint64) {\r\n        // Note that the Court is always initialized providing a start time for the first-term in the future. If that's the case,\r\n        // no term transitions are required.\r\n        uint64 currentTermStartTime = terms[termId].startTime;\r\n        if (getTimestamp64() < currentTermStartTime) {\r\n            return uint64(0);\r\n        }\r\n\r\n        // No need for SafeMath: we already know that the start time of the current term is in the past\r\n        return (getTimestamp64() - currentTermStartTime) / termDuration;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to compute the randomness that will be used to draft jurors for the given term. This\r\n    *      function assumes the given term exists. To determine the randomness factor for a term we use the hash of a\r\n    *      block number that is set once the term has started to ensure it cannot be known beforehand. Note that the\r\n    *      hash function being used only works for the 256 most recent block numbers.\r\n    * @param _termId Identification number of the term being queried\r\n    * @return Randomness computed for the given term\r\n    */\r\n    function _computeTermRandomness(uint64 _termId) internal view returns (bytes32) {\r\n        Term storage term = terms[_termId];\r\n        require(getBlockNumber64() > term.randomnessBN, ERROR_TERM_RANDOMNESS_NOT_YET);\r\n        return blockhash(term.randomnessBN);\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/court/config/IConfig.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ninterface IConfig {\r\n\r\n    /**\r\n    * @dev Tell the full Court configuration parameters at a certain term\r\n    * @param _termId Identification number of the term querying the Court config of\r\n    * @return token Address of the token used to pay for fees\r\n    * @return fees Array containing:\r\n    *         0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *         1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *         2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *         0. evidenceTerms Max submitting evidence period duration in terms\r\n    *         1. commitTerms Commit period duration in terms\r\n    *         2. revealTerms Reveal period duration in terms\r\n    *         3. appealTerms Appeal period duration in terms\r\n    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @return pcts Array containing:\r\n    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @return roundParams Array containing params for rounds:\r\n    *         0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *         1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    * @return appealCollateralParams Array containing params for appeal collateral:\r\n    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\r\n    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\r\n    * @return minActiveBalance Minimum amount of tokens jurors have to activate to participate in the Court\r\n    */\r\n    function getConfig(uint64 _termId) external view\r\n        returns (\r\n            ERC20 feeToken,\r\n            uint256[3] memory fees,\r\n            uint64[5] memory roundStateDurations,\r\n            uint16[2] memory pcts,\r\n            uint64[4] memory roundParams,\r\n            uint256[2] memory appealCollateralParams,\r\n            uint256 minActiveBalance\r\n        );\r\n\r\n    /**\r\n    * @dev Tell the draft config at a certain term\r\n    * @param _termId Identification number of the term querying the draft config of\r\n    * @return feeToken Address of the token used to pay for fees\r\n    * @return draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    */\r\n    function getDraftConfig(uint64 _termId) external view returns (ERC20 feeToken, uint256 draftFee, uint16 penaltyPct);\r\n\r\n    /**\r\n    * @dev Tell the min active balance config at a certain term\r\n    * @param _termId Term querying the min active balance config of\r\n    * @return Minimum amount of tokens jurors have to activate to participate in the Court\r\n    */\r\n    function getMinActiveBalance(uint64 _termId) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Tell whether a certain holder accepts automatic withdrawals of tokens or not\r\n    * @return True if the given holder accepts automatic withdrawals of their tokens, false otherwise\r\n    */\r\n    function areWithdrawalsAllowedFor(address _holder) external view returns (bool);\r\n}\r\n\r\n// File: @aragon/court/contracts/court/config/CourtConfigData.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ncontract CourtConfigData {\r\n    struct Config {\r\n        FeesConfig fees;                        // Full fees-related config\r\n        DisputesConfig disputes;                // Full disputes-related config\r\n        uint256 minActiveBalance;               // Minimum amount of tokens jurors have to activate to participate in the Court\r\n    }\r\n\r\n    struct FeesConfig {\r\n        ERC20 token;                            // ERC20 token to be used for the fees of the Court\r\n        uint16 finalRoundReduction;             // Permyriad of fees reduction applied for final appeal round (‱ - 1/10,000)\r\n        uint256 jurorFee;                       // Amount of tokens paid to draft a juror to adjudicate a dispute\r\n        uint256 draftFee;                       // Amount of tokens paid per round to cover the costs of drafting jurors\r\n        uint256 settleFee;                      // Amount of tokens paid per round to cover the costs of slashing jurors\r\n    }\r\n\r\n    struct DisputesConfig {\r\n        uint64 evidenceTerms;                   // Max submitting evidence period duration in terms\r\n        uint64 commitTerms;                     // Committing period duration in terms\r\n        uint64 revealTerms;                     // Revealing period duration in terms\r\n        uint64 appealTerms;                     // Appealing period duration in terms\r\n        uint64 appealConfirmTerms;              // Confirmation appeal period duration in terms\r\n        uint16 penaltyPct;                      // Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n        uint64 firstRoundJurorsNumber;          // Number of jurors drafted on first round\r\n        uint64 appealStepFactor;                // Factor in which the jurors number is increased on each appeal\r\n        uint64 finalRoundLockTerms;             // Period a coherent juror in the final round will remain locked\r\n        uint256 maxRegularAppealRounds;         // Before the final appeal\r\n        uint256 appealCollateralFactor;         // Permyriad multiple of dispute fees required to appeal a preliminary ruling (‱ - 1/10,000)\r\n        uint256 appealConfirmCollateralFactor;  // Permyriad multiple of dispute fees required to confirm appeal (‱ - 1/10,000)\r\n    }\r\n\r\n    struct DraftConfig {\r\n        ERC20 feeToken;                         // ERC20 token to be used for the fees of the Court\r\n        uint16 penaltyPct;                      // Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n        uint256 draftFee;                       // Amount of tokens paid per round to cover the costs of drafting jurors\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/os/SafeMath.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/math/SafeMath.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/PctHelpers.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\nlibrary PctHelpers {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant PCT_BASE = 10000; // ‱ (1 / 10,000)\r\n\r\n    function isValid(uint16 _pct) internal pure returns (bool) {\r\n        return _pct <= PCT_BASE;\r\n    }\r\n\r\n    function pct(uint256 self, uint16 _pct) internal pure returns (uint256) {\r\n        return self.mul(uint256(_pct)) / PCT_BASE;\r\n    }\r\n\r\n    function pct256(uint256 self, uint256 _pct) internal pure returns (uint256) {\r\n        return self.mul(_pct) / PCT_BASE;\r\n    }\r\n\r\n    function pctIncrease(uint256 self, uint16 _pct) internal pure returns (uint256) {\r\n        // No need for SafeMath: for addition note that `PCT_BASE` is lower than (2^256 - 2^16)\r\n        return self.mul(PCT_BASE + uint256(_pct)) / PCT_BASE;\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/court/config/CourtConfig.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CourtConfig is IConfig, CourtConfigData {\r\n    using SafeMath64 for uint64;\r\n    using PctHelpers for uint256;\r\n\r\n    string private constant ERROR_TOO_OLD_TERM = \"CONF_TOO_OLD_TERM\";\r\n    string private constant ERROR_INVALID_PENALTY_PCT = \"CONF_INVALID_PENALTY_PCT\";\r\n    string private constant ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT = \"CONF_INVALID_FINAL_ROUND_RED_PCT\";\r\n    string private constant ERROR_INVALID_MAX_APPEAL_ROUNDS = \"CONF_INVALID_MAX_APPEAL_ROUNDS\";\r\n    string private constant ERROR_LARGE_ROUND_PHASE_DURATION = \"CONF_LARGE_ROUND_PHASE_DURATION\";\r\n    string private constant ERROR_BAD_INITIAL_JURORS_NUMBER = \"CONF_BAD_INITIAL_JURORS_NUMBER\";\r\n    string private constant ERROR_BAD_APPEAL_STEP_FACTOR = \"CONF_BAD_APPEAL_STEP_FACTOR\";\r\n    string private constant ERROR_ZERO_COLLATERAL_FACTOR = \"CONF_ZERO_COLLATERAL_FACTOR\";\r\n    string private constant ERROR_ZERO_MIN_ACTIVE_BALANCE = \"CONF_ZERO_MIN_ACTIVE_BALANCE\";\r\n\r\n    // Max number of terms that each of the different adjudication states can last (if lasted 1h, this would be a year)\r\n    uint64 internal constant MAX_ADJ_STATE_DURATION = 8670;\r\n\r\n    // Cap the max number of regular appeal rounds\r\n    uint256 internal constant MAX_REGULAR_APPEAL_ROUNDS_LIMIT = 10;\r\n\r\n    // Future term ID in which a config change has been scheduled\r\n    uint64 private configChangeTermId;\r\n\r\n    // List of all the configs used in the Court\r\n    Config[] private configs;\r\n\r\n    // List of configs indexed by id\r\n    mapping (uint64 => uint256) private configIdByTerm;\r\n\r\n    // Holders opt-in config for automatic withdrawals\r\n    mapping (address => bool) private withdrawalsAllowed;\r\n\r\n    event NewConfig(uint64 fromTermId, uint64 courtConfigId);\r\n    event AutomaticWithdrawalsAllowedChanged(address indexed holder, bool allowed);\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    * @param _feeToken Address of the token contract that is used to pay for fees\r\n    * @param _fees Array containing:\r\n    *        0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *        1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *        2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *        0. evidenceTerms Max submitting evidence period duration in terms\r\n    *        1. commitTerms Commit period duration in terms\r\n    *        2. revealTerms Reveal period duration in terms\r\n    *        3. appealTerms Appeal period duration in terms\r\n    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @param _pcts Array containing:\r\n    *        0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @param _roundParams Array containing params for rounds:\r\n    *        0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *        1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    *        3. finalRoundLockTerms Number of terms that a coherent juror in a final round is disallowed to withdraw (to prevent 51% attacks)\r\n    * @param _appealCollateralParams Array containing params for appeal collateral:\r\n    *        0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\r\n    *        1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\r\n    * @param _minActiveBalance Minimum amount of juror tokens that can be activated\r\n    */\r\n    constructor(\r\n        ERC20 _feeToken,\r\n        uint256[3] memory _fees,\r\n        uint64[5] memory _roundStateDurations,\r\n        uint16[2] memory _pcts,\r\n        uint64[4] memory _roundParams,\r\n        uint256[2] memory _appealCollateralParams,\r\n        uint256 _minActiveBalance\r\n    )\r\n        public\r\n    {\r\n        // Leave config at index 0 empty for non-scheduled config changes\r\n        configs.length = 1;\r\n        _setConfig(\r\n            0,\r\n            0,\r\n            _feeToken,\r\n            _fees,\r\n            _roundStateDurations,\r\n            _pcts,\r\n            _roundParams,\r\n            _appealCollateralParams,\r\n            _minActiveBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Set the automatic withdrawals config for the sender to `_allowed`\r\n    * @param _allowed Whether or not the automatic withdrawals are allowed by the sender\r\n    */\r\n    function setAutomaticWithdrawals(bool _allowed) external {\r\n        withdrawalsAllowed[msg.sender] = _allowed;\r\n        emit AutomaticWithdrawalsAllowedChanged(msg.sender, _allowed);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the full Court configuration parameters at a certain term\r\n    * @param _termId Identification number of the term querying the Court config of\r\n    * @return token Address of the token used to pay for fees\r\n    * @return fees Array containing:\r\n    *         0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *         1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *         2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *         0. evidenceTerms Max submitting evidence period duration in terms\r\n    *         1. commitTerms Commit period duration in terms\r\n    *         2. revealTerms Reveal period duration in terms\r\n    *         3. appealTerms Appeal period duration in terms\r\n    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @return pcts Array containing:\r\n    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @return roundParams Array containing params for rounds:\r\n    *         0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *         1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    * @return appealCollateralParams Array containing params for appeal collateral:\r\n    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\r\n    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\r\n    * @return minActiveBalance Minimum amount of tokens jurors have to activate to participate in the Court\r\n    */\r\n    function getConfig(uint64 _termId) external view\r\n        returns (\r\n            ERC20 feeToken,\r\n            uint256[3] memory fees,\r\n            uint64[5] memory roundStateDurations,\r\n            uint16[2] memory pcts,\r\n            uint64[4] memory roundParams,\r\n            uint256[2] memory appealCollateralParams,\r\n            uint256 minActiveBalance\r\n        );\r\n\r\n    /**\r\n    * @dev Tell the draft config at a certain term\r\n    * @param _termId Identification number of the term querying the draft config of\r\n    * @return feeToken Address of the token used to pay for fees\r\n    * @return draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    */\r\n    function getDraftConfig(uint64 _termId) external view returns (ERC20 feeToken, uint256 draftFee, uint16 penaltyPct);\r\n\r\n    /**\r\n    * @dev Tell the min active balance config at a certain term\r\n    * @param _termId Term querying the min active balance config of\r\n    * @return Minimum amount of tokens jurors have to activate to participate in the Court\r\n    */\r\n    function getMinActiveBalance(uint64 _termId) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Tell whether a certain holder accepts automatic withdrawals of tokens or not\r\n    * @param _holder Address of the token holder querying if withdrawals are allowed for\r\n    * @return True if the given holder accepts automatic withdrawals of their tokens, false otherwise\r\n    */\r\n    function areWithdrawalsAllowedFor(address _holder) external view returns (bool) {\r\n        return withdrawalsAllowed[_holder];\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the term identification number of the next scheduled config change\r\n    * @return Term identification number of the next scheduled config change\r\n    */\r\n    function getConfigChangeTermId() external view returns (uint64) {\r\n        return configChangeTermId;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal to make sure to set a config for the new term, it will copy the previous term config if none\r\n    * @param _termId Identification number of the new current term that has been transitioned\r\n    */\r\n    function _ensureTermConfig(uint64 _termId) internal {\r\n        // If the term being transitioned had no config change scheduled, keep the previous one\r\n        uint256 currentConfigId = configIdByTerm[_termId];\r\n        if (currentConfigId == 0) {\r\n            uint256 previousConfigId = configIdByTerm[_termId.sub(1)];\r\n            configIdByTerm[_termId] = previousConfigId;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Assumes that sender it's allowed (either it's from governor or it's on init)\r\n    * @param _termId Identification number of the current Court term\r\n    * @param _fromTermId Identification number of the term in which the config will be effective at\r\n    * @param _feeToken Address of the token contract that is used to pay for fees.\r\n    * @param _fees Array containing:\r\n    *        0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *        1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *        2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *        0. evidenceTerms Max submitting evidence period duration in terms\r\n    *        1. commitTerms Commit period duration in terms\r\n    *        2. revealTerms Reveal period duration in terms\r\n    *        3. appealTerms Appeal period duration in terms\r\n    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @param _pcts Array containing:\r\n    *        0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @param _roundParams Array containing params for rounds:\r\n    *        0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *        1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    *        3. finalRoundLockTerms Number of terms that a coherent juror in a final round is disallowed to withdraw (to prevent 51% attacks)\r\n    * @param _appealCollateralParams Array containing params for appeal collateral:\r\n    *        0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\r\n    *        1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\r\n    * @param _minActiveBalance Minimum amount of juror tokens that can be activated\r\n    */\r\n    function _setConfig(\r\n        uint64 _termId,\r\n        uint64 _fromTermId,\r\n        ERC20 _feeToken,\r\n        uint256[3] memory _fees,\r\n        uint64[5] memory _roundStateDurations,\r\n        uint16[2] memory _pcts,\r\n        uint64[4] memory _roundParams,\r\n        uint256[2] memory _appealCollateralParams,\r\n        uint256 _minActiveBalance\r\n    )\r\n        internal\r\n    {\r\n        // If the current term is not zero, changes must be scheduled at least after the current period.\r\n        // No need to ensure delays for on-going disputes since these already use their creation term for that.\r\n        require(_termId == 0 || _fromTermId > _termId, ERROR_TOO_OLD_TERM);\r\n\r\n        // Make sure appeal collateral factors are greater than zero\r\n        require(_appealCollateralParams[0] > 0 && _appealCollateralParams[1] > 0, ERROR_ZERO_COLLATERAL_FACTOR);\r\n\r\n        // Make sure the given penalty and final round reduction pcts are not greater than 100%\r\n        require(PctHelpers.isValid(_pcts[0]), ERROR_INVALID_PENALTY_PCT);\r\n        require(PctHelpers.isValid(_pcts[1]), ERROR_INVALID_FINAL_ROUND_REDUCTION_PCT);\r\n\r\n        // Disputes must request at least one juror to be drafted initially\r\n        require(_roundParams[0] > 0, ERROR_BAD_INITIAL_JURORS_NUMBER);\r\n\r\n        // Prevent that further rounds have zero jurors\r\n        require(_roundParams[1] > 0, ERROR_BAD_APPEAL_STEP_FACTOR);\r\n\r\n        // Make sure the max number of appeals allowed does not reach the limit\r\n        uint256 _maxRegularAppealRounds = _roundParams[2];\r\n        bool isMaxAppealRoundsValid = _maxRegularAppealRounds > 0 && _maxRegularAppealRounds <= MAX_REGULAR_APPEAL_ROUNDS_LIMIT;\r\n        require(isMaxAppealRoundsValid, ERROR_INVALID_MAX_APPEAL_ROUNDS);\r\n\r\n        // Make sure each adjudication round phase duration is valid\r\n        for (uint i = 0; i < _roundStateDurations.length; i++) {\r\n            require(_roundStateDurations[i] > 0 && _roundStateDurations[i] < MAX_ADJ_STATE_DURATION, ERROR_LARGE_ROUND_PHASE_DURATION);\r\n        }\r\n\r\n        // Make sure min active balance is not zero\r\n        require(_minActiveBalance > 0, ERROR_ZERO_MIN_ACTIVE_BALANCE);\r\n\r\n        // If there was a config change already scheduled, reset it (in that case we will overwrite last array item).\r\n        // Otherwise, schedule a new config.\r\n        if (configChangeTermId > _termId) {\r\n            configIdByTerm[configChangeTermId] = 0;\r\n        } else {\r\n            configs.length++;\r\n        }\r\n\r\n        uint64 courtConfigId = uint64(configs.length - 1);\r\n        Config storage config = configs[courtConfigId];\r\n\r\n        config.fees = FeesConfig({\r\n            token: _feeToken,\r\n            jurorFee: _fees[0],\r\n            draftFee: _fees[1],\r\n            settleFee: _fees[2],\r\n            finalRoundReduction: _pcts[1]\r\n        });\r\n\r\n        config.disputes = DisputesConfig({\r\n            evidenceTerms: _roundStateDurations[0],\r\n            commitTerms: _roundStateDurations[1],\r\n            revealTerms: _roundStateDurations[2],\r\n            appealTerms: _roundStateDurations[3],\r\n            appealConfirmTerms: _roundStateDurations[4],\r\n            penaltyPct: _pcts[0],\r\n            firstRoundJurorsNumber: _roundParams[0],\r\n            appealStepFactor: _roundParams[1],\r\n            maxRegularAppealRounds: _maxRegularAppealRounds,\r\n            finalRoundLockTerms: _roundParams[3],\r\n            appealCollateralFactor: _appealCollateralParams[0],\r\n            appealConfirmCollateralFactor: _appealCollateralParams[1]\r\n        });\r\n\r\n        config.minActiveBalance = _minActiveBalance;\r\n\r\n        configIdByTerm[_fromTermId] = courtConfigId;\r\n        configChangeTermId = _fromTermId;\r\n\r\n        emit NewConfig(_fromTermId, courtConfigId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to get the Court config for a given term\r\n    * @param _termId Identification number of the term querying the Court config of\r\n    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\r\n    * @return token Address of the token used to pay for fees\r\n    * @return fees Array containing:\r\n    *         0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *         1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *         2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *         0. evidenceTerms Max submitting evidence period duration in terms\r\n    *         1. commitTerms Commit period duration in terms\r\n    *         2. revealTerms Reveal period duration in terms\r\n    *         3. appealTerms Appeal period duration in terms\r\n    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @return pcts Array containing:\r\n    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @return roundParams Array containing params for rounds:\r\n    *         0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *         1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    *         3. finalRoundLockTerms Number of terms that a coherent juror in a final round is disallowed to withdraw (to prevent 51% attacks)\r\n    * @return appealCollateralParams Array containing params for appeal collateral:\r\n    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\r\n    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\r\n    * @return minActiveBalance Minimum amount of juror tokens that can be activated\r\n    */\r\n    function _getConfigAt(uint64 _termId, uint64 _lastEnsuredTermId) internal view\r\n        returns (\r\n            ERC20 feeToken,\r\n            uint256[3] memory fees,\r\n            uint64[5] memory roundStateDurations,\r\n            uint16[2] memory pcts,\r\n            uint64[4] memory roundParams,\r\n            uint256[2] memory appealCollateralParams,\r\n            uint256 minActiveBalance\r\n        )\r\n    {\r\n        Config storage config = _getConfigFor(_termId, _lastEnsuredTermId);\r\n\r\n        FeesConfig storage feesConfig = config.fees;\r\n        feeToken = feesConfig.token;\r\n        fees = [feesConfig.jurorFee, feesConfig.draftFee, feesConfig.settleFee];\r\n\r\n        DisputesConfig storage disputesConfig = config.disputes;\r\n        roundStateDurations = [\r\n            disputesConfig.evidenceTerms,\r\n            disputesConfig.commitTerms,\r\n            disputesConfig.revealTerms,\r\n            disputesConfig.appealTerms,\r\n            disputesConfig.appealConfirmTerms\r\n        ];\r\n        pcts = [disputesConfig.penaltyPct, feesConfig.finalRoundReduction];\r\n        roundParams = [\r\n            disputesConfig.firstRoundJurorsNumber,\r\n            disputesConfig.appealStepFactor,\r\n            uint64(disputesConfig.maxRegularAppealRounds),\r\n            disputesConfig.finalRoundLockTerms\r\n        ];\r\n        appealCollateralParams = [disputesConfig.appealCollateralFactor, disputesConfig.appealConfirmCollateralFactor];\r\n\r\n        minActiveBalance = config.minActiveBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the draft config at a certain term\r\n    * @param _termId Identification number of the term querying the draft config of\r\n    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\r\n    * @return feeToken Address of the token used to pay for fees\r\n    * @return draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    */\r\n    function _getDraftConfig(uint64 _termId,  uint64 _lastEnsuredTermId) internal view\r\n        returns (ERC20 feeToken, uint256 draftFee, uint16 penaltyPct)\r\n    {\r\n        Config storage config = _getConfigFor(_termId, _lastEnsuredTermId);\r\n        return (config.fees.token, config.fees.draftFee, config.disputes.penaltyPct);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to get the min active balance config for a given term\r\n    * @param _termId Identification number of the term querying the min active balance config of\r\n    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\r\n    * @return Minimum amount of juror tokens that can be activated at the given term\r\n    */\r\n    function _getMinActiveBalance(uint64 _termId, uint64 _lastEnsuredTermId) internal view returns (uint256) {\r\n        Config storage config = _getConfigFor(_termId, _lastEnsuredTermId);\r\n        return config.minActiveBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to get the Court config for a given term\r\n    * @param _termId Identification number of the term querying the min active balance config of\r\n    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\r\n    * @return Court config for the given term\r\n    */\r\n    function _getConfigFor(uint64 _termId, uint64 _lastEnsuredTermId) internal view returns (Config storage) {\r\n        uint256 id = _getConfigIdFor(_termId, _lastEnsuredTermId);\r\n        return configs[id];\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to get the Court config ID for a given term\r\n    * @param _termId Identification number of the term querying the Court config of\r\n    * @param _lastEnsuredTermId Identification number of the last ensured term of the Court\r\n    * @return Identification number of the config for the given terms\r\n    */\r\n    function _getConfigIdFor(uint64 _termId, uint64 _lastEnsuredTermId) internal view returns (uint256) {\r\n        // If the given term is lower or equal to the last ensured Court term, it is safe to use a past Court config\r\n        if (_termId <= _lastEnsuredTermId) {\r\n            return configIdByTerm[_termId];\r\n        }\r\n\r\n        // If the given term is in the future but there is a config change scheduled before it, use the incoming config\r\n        uint64 scheduledChangeTermId = configChangeTermId;\r\n        if (scheduledChangeTermId <= _termId) {\r\n            return configIdByTerm[scheduledChangeTermId];\r\n        }\r\n\r\n        // If no changes are scheduled, use the Court config of the last ensured term\r\n        return configIdByTerm[_lastEnsuredTermId];\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/court/controller/Controller.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\n\r\ncontract Controller is IsContract, CourtClock, CourtConfig {\r\n    string private constant ERROR_SENDER_NOT_GOVERNOR = \"CTR_SENDER_NOT_GOVERNOR\";\r\n    string private constant ERROR_INVALID_GOVERNOR_ADDRESS = \"CTR_INVALID_GOVERNOR_ADDRESS\";\r\n    string private constant ERROR_IMPLEMENTATION_NOT_CONTRACT = \"CTR_IMPLEMENTATION_NOT_CONTRACT\";\r\n    string private constant ERROR_INVALID_IMPLS_INPUT_LENGTH = \"CTR_INVALID_IMPLS_INPUT_LENGTH\";\r\n\r\n    address private constant ZERO_ADDRESS = address(0);\r\n\r\n    // DisputeManager module ID - keccak256(abi.encodePacked(\"DISPUTE_MANAGER\"))\r\n    bytes32 internal constant DISPUTE_MANAGER = 0x14a6c70f0f6d449c014c7bbc9e68e31e79e8474fb03b7194df83109a2d888ae6;\r\n\r\n    // Treasury module ID - keccak256(abi.encodePacked(\"TREASURY\"))\r\n    bytes32 internal constant TREASURY = 0x06aa03964db1f7257357ef09714a5f0ca3633723df419e97015e0c7a3e83edb7;\r\n\r\n    // Voting module ID - keccak256(abi.encodePacked(\"VOTING\"))\r\n    bytes32 internal constant VOTING = 0x7cbb12e82a6d63ff16fe43977f43e3e2b247ecd4e62c0e340da8800a48c67346;\r\n\r\n    // JurorsRegistry module ID - keccak256(abi.encodePacked(\"JURORS_REGISTRY\"))\r\n    bytes32 internal constant JURORS_REGISTRY = 0x3b21d36b36308c830e6c4053fb40a3b6d79dde78947fbf6b0accd30720ab5370;\r\n\r\n    // Subscriptions module ID - keccak256(abi.encodePacked(\"SUBSCRIPTIONS\"))\r\n    bytes32 internal constant SUBSCRIPTIONS = 0x2bfa3327fe52344390da94c32a346eeb1b65a8b583e4335a419b9471e88c1365;\r\n\r\n    /**\r\n    * @dev Governor of the whole system. Set of three addresses to recover funds, change configuration settings and setup modules\r\n    */\r\n    struct Governor {\r\n        address funds;      // This address can be unset at any time. It is allowed to recover funds from the ControlledRecoverable modules\r\n        address config;     // This address is meant not to be unset. It is allowed to change the different configurations of the whole system\r\n        address modules;    // This address can be unset at any time. It is allowed to plug/unplug modules from the system\r\n    }\r\n\r\n    // Governor addresses of the system\r\n    Governor private governor;\r\n\r\n    // List of modules registered for the system indexed by ID\r\n    mapping (bytes32 => address) internal modules;\r\n\r\n    event ModuleSet(bytes32 id, address addr);\r\n    event FundsGovernorChanged(address previousGovernor, address currentGovernor);\r\n    event ConfigGovernorChanged(address previousGovernor, address currentGovernor);\r\n    event ModulesGovernorChanged(address previousGovernor, address currentGovernor);\r\n\r\n    /**\r\n    * @dev Ensure the msg.sender is the funds governor\r\n    */\r\n    modifier onlyFundsGovernor {\r\n        require(msg.sender == governor.funds, ERROR_SENDER_NOT_GOVERNOR);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Ensure the msg.sender is the modules governor\r\n    */\r\n    modifier onlyConfigGovernor {\r\n        require(msg.sender == governor.config, ERROR_SENDER_NOT_GOVERNOR);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Ensure the msg.sender is the modules governor\r\n    */\r\n    modifier onlyModulesGovernor {\r\n        require(msg.sender == governor.modules, ERROR_SENDER_NOT_GOVERNOR);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    * @param _termParams Array containing:\r\n    *        0. _termDuration Duration in seconds per term\r\n    *        1. _firstTermStartTime Timestamp in seconds when the court will open (to give time for juror on-boarding)\r\n    * @param _governors Array containing:\r\n    *        0. _fundsGovernor Address of the funds governor\r\n    *        1. _configGovernor Address of the config governor\r\n    *        2. _modulesGovernor Address of the modules governor\r\n    * @param _feeToken Address of the token contract that is used to pay for fees\r\n    * @param _fees Array containing:\r\n    *        0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *        1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *        2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *        0. evidenceTerms Max submitting evidence period duration in terms\r\n    *        1. commitTerms Commit period duration in terms\r\n    *        2. revealTerms Reveal period duration in terms\r\n    *        3. appealTerms Appeal period duration in terms\r\n    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @param _pcts Array containing:\r\n    *        0. penaltyPct Permyriad of min active tokens balance to be locked to each drafted jurors (‱ - 1/10,000)\r\n    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @param _roundParams Array containing params for rounds:\r\n    *        0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *        1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    *        3. finalRoundLockTerms Number of terms that a coherent juror in a final round is disallowed to withdraw (to prevent 51% attacks)\r\n    * @param _appealCollateralParams Array containing params for appeal collateral:\r\n    *        1. appealCollateralFactor Permyriad multiple of dispute fees required to appeal a preliminary ruling\r\n    *        2. appealConfirmCollateralFactor Permyriad multiple of dispute fees required to confirm appeal\r\n    * @param _minActiveBalance Minimum amount of juror tokens that can be activated\r\n    */\r\n    constructor(\r\n        uint64[2] memory _termParams,\r\n        address[3] memory _governors,\r\n        ERC20 _feeToken,\r\n        uint256[3] memory _fees,\r\n        uint64[5] memory _roundStateDurations,\r\n        uint16[2] memory _pcts,\r\n        uint64[4] memory _roundParams,\r\n        uint256[2] memory _appealCollateralParams,\r\n        uint256 _minActiveBalance\r\n    )\r\n        public\r\n        CourtClock(_termParams)\r\n        CourtConfig(_feeToken, _fees, _roundStateDurations, _pcts, _roundParams, _appealCollateralParams, _minActiveBalance)\r\n    {\r\n        _setFundsGovernor(_governors[0]);\r\n        _setConfigGovernor(_governors[1]);\r\n        _setModulesGovernor(_governors[2]);\r\n    }\r\n\r\n    /**\r\n    * @notice Change Court configuration params\r\n    * @param _fromTermId Identification number of the term in which the config will be effective at\r\n    * @param _feeToken Address of the token contract that is used to pay for fees\r\n    * @param _fees Array containing:\r\n    *        0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *        1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *        2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @param _roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *        0. evidenceTerms Max submitting evidence period duration in terms\r\n    *        1. commitTerms Commit period duration in terms\r\n    *        2. revealTerms Reveal period duration in terms\r\n    *        3. appealTerms Appeal period duration in terms\r\n    *        4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @param _pcts Array containing:\r\n    *        0. penaltyPct Permyriad of min active tokens balance to be locked to each drafted jurors (‱ - 1/10,000)\r\n    *        1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @param _roundParams Array containing params for rounds:\r\n    *        0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *        1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *        2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    *        3. finalRoundLockTerms Number of terms that a coherent juror in a final round is disallowed to withdraw (to prevent 51% attacks)\r\n    * @param _appealCollateralParams Array containing params for appeal collateral:\r\n    *        1. appealCollateralFactor Permyriad multiple of dispute fees required to appeal a preliminary ruling\r\n    *        2. appealConfirmCollateralFactor Permyriad multiple of dispute fees required to confirm appeal\r\n    * @param _minActiveBalance Minimum amount of juror tokens that can be activated\r\n    */\r\n    function setConfig(\r\n        uint64 _fromTermId,\r\n        ERC20 _feeToken,\r\n        uint256[3] calldata _fees,\r\n        uint64[5] calldata _roundStateDurations,\r\n        uint16[2] calldata _pcts,\r\n        uint64[4] calldata _roundParams,\r\n        uint256[2] calldata _appealCollateralParams,\r\n        uint256 _minActiveBalance\r\n    )\r\n        external\r\n        onlyConfigGovernor\r\n    {\r\n        uint64 currentTermId = _ensureCurrentTerm();\r\n        _setConfig(\r\n            currentTermId,\r\n            _fromTermId,\r\n            _feeToken,\r\n            _fees,\r\n            _roundStateDurations,\r\n            _pcts,\r\n            _roundParams,\r\n            _appealCollateralParams,\r\n            _minActiveBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Delay the Court start time to `_newFirstTermStartTime`\r\n    * @param _newFirstTermStartTime New timestamp in seconds when the court will open\r\n    */\r\n    function delayStartTime(uint64 _newFirstTermStartTime) external onlyConfigGovernor {\r\n        _delayStartTime(_newFirstTermStartTime);\r\n    }\r\n\r\n    /**\r\n    * @notice Change funds governor address to `_newFundsGovernor`\r\n    * @param _newFundsGovernor Address of the new funds governor to be set\r\n    */\r\n    function changeFundsGovernor(address _newFundsGovernor) external onlyFundsGovernor {\r\n        require(_newFundsGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);\r\n        _setFundsGovernor(_newFundsGovernor);\r\n    }\r\n\r\n    /**\r\n    * @notice Change config governor address to `_newConfigGovernor`\r\n    * @param _newConfigGovernor Address of the new config governor to be set\r\n    */\r\n    function changeConfigGovernor(address _newConfigGovernor) external onlyConfigGovernor {\r\n        require(_newConfigGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);\r\n        _setConfigGovernor(_newConfigGovernor);\r\n    }\r\n\r\n    /**\r\n    * @notice Change modules governor address to `_newModulesGovernor`\r\n    * @param _newModulesGovernor Address of the new governor to be set\r\n    */\r\n    function changeModulesGovernor(address _newModulesGovernor) external onlyModulesGovernor {\r\n        require(_newModulesGovernor != ZERO_ADDRESS, ERROR_INVALID_GOVERNOR_ADDRESS);\r\n        _setModulesGovernor(_newModulesGovernor);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove the funds governor. Set the funds governor to the zero address.\r\n    * @dev This action cannot be rolled back, once the funds governor has been unset, funds cannot be recovered from recoverable modules anymore\r\n    */\r\n    function ejectFundsGovernor() external onlyFundsGovernor {\r\n        _setFundsGovernor(ZERO_ADDRESS);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove the modules governor. Set the modules governor to the zero address.\r\n    * @dev This action cannot be rolled back, once the modules governor has been unset, system modules cannot be changed anymore\r\n    */\r\n    function ejectModulesGovernor() external onlyModulesGovernor {\r\n        _setModulesGovernor(ZERO_ADDRESS);\r\n    }\r\n\r\n    /**\r\n    * @notice Set module `_id` to `_addr`\r\n    * @param _id ID of the module to be set\r\n    * @param _addr Address of the module to be set\r\n    */\r\n    function setModule(bytes32 _id, address _addr) external onlyModulesGovernor {\r\n        _setModule(_id, _addr);\r\n    }\r\n\r\n    /**\r\n    * @notice Set many modules at once\r\n    * @param _ids List of ids of each module to be set\r\n    * @param _addresses List of addressed of each the module to be set\r\n    */\r\n    function setModules(bytes32[] calldata _ids, address[] calldata _addresses) external onlyModulesGovernor {\r\n        require(_ids.length == _addresses.length, ERROR_INVALID_IMPLS_INPUT_LENGTH);\r\n\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            _setModule(_ids[i], _addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the full Court configuration parameters at a certain term\r\n    * @param _termId Identification number of the term querying the Court config of\r\n    * @return token Address of the token used to pay for fees\r\n    * @return fees Array containing:\r\n    *         0. jurorFee Amount of fee tokens that is paid per juror per dispute\r\n    *         1. draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    *         2. settleFee Amount of fee tokens per juror to cover round settlement cost\r\n    * @return roundStateDurations Array containing the durations in terms of the different phases of a dispute:\r\n    *         0. evidenceTerms Max submitting evidence period duration in terms\r\n    *         1. commitTerms Commit period duration in terms\r\n    *         2. revealTerms Reveal period duration in terms\r\n    *         3. appealTerms Appeal period duration in terms\r\n    *         4. appealConfirmationTerms Appeal confirmation period duration in terms\r\n    * @return pcts Array containing:\r\n    *         0. penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    *         1. finalRoundReduction Permyriad of fee reduction for the last appeal round (‱ - 1/10,000)\r\n    * @return roundParams Array containing params for rounds:\r\n    *         0. firstRoundJurorsNumber Number of jurors to be drafted for the first round of disputes\r\n    *         1. appealStepFactor Increasing factor for the number of jurors of each round of a dispute\r\n    *         2. maxRegularAppealRounds Number of regular appeal rounds before the final round is triggered\r\n    *         3. finalRoundLockTerms Number of terms that a coherent juror in a final round is disallowed to withdraw (to prevent 51% attacks)\r\n    * @return appealCollateralParams Array containing params for appeal collateral:\r\n    *         0. appealCollateralFactor Multiple of dispute fees required to appeal a preliminary ruling\r\n    *         1. appealConfirmCollateralFactor Multiple of dispute fees required to confirm appeal\r\n    */\r\n    function getConfig(uint64 _termId) external view\r\n        returns (\r\n            ERC20 feeToken,\r\n            uint256[3] memory fees,\r\n            uint64[5] memory roundStateDurations,\r\n            uint16[2] memory pcts,\r\n            uint64[4] memory roundParams,\r\n            uint256[2] memory appealCollateralParams,\r\n            uint256 minActiveBalance\r\n        )\r\n    {\r\n        uint64 lastEnsuredTermId = _lastEnsuredTermId();\r\n        return _getConfigAt(_termId, lastEnsuredTermId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the draft config at a certain term\r\n    * @param _termId Identification number of the term querying the draft config of\r\n    * @return feeToken Address of the token used to pay for fees\r\n    * @return draftFee Amount of fee tokens per juror to cover the drafting cost\r\n    * @return penaltyPct Permyriad of min active tokens balance to be locked for each drafted juror (‱ - 1/10,000)\r\n    */\r\n    function getDraftConfig(uint64 _termId) external view returns (ERC20 feeToken, uint256 draftFee, uint16 penaltyPct) {\r\n        uint64 lastEnsuredTermId = _lastEnsuredTermId();\r\n        return _getDraftConfig(_termId, lastEnsuredTermId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the min active balance config at a certain term\r\n    * @param _termId Identification number of the term querying the min active balance config of\r\n    * @return Minimum amount of tokens jurors have to activate to participate in the Court\r\n    */\r\n    function getMinActiveBalance(uint64 _termId) external view returns (uint256) {\r\n        uint64 lastEnsuredTermId = _lastEnsuredTermId();\r\n        return _getMinActiveBalance(_termId, lastEnsuredTermId);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the funds governor\r\n    * @return Address of the funds governor\r\n    */\r\n    function getFundsGovernor() external view returns (address) {\r\n        return governor.funds;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the config governor\r\n    * @return Address of the config governor\r\n    */\r\n    function getConfigGovernor() external view returns (address) {\r\n        return governor.config;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the modules governor\r\n    * @return Address of the modules governor\r\n    */\r\n    function getModulesGovernor() external view returns (address) {\r\n        return governor.modules;\r\n    }\r\n\r\n    /**\r\n    * @dev Tell address of a module based on a given ID\r\n    * @param _id ID of the module being queried\r\n    * @return Address of the requested module\r\n    */\r\n    function getModule(bytes32 _id) external view returns (address) {\r\n        return _getModule(_id);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the DisputeManager module\r\n    * @return Address of the DisputeManager module\r\n    */\r\n    function getDisputeManager() external view returns (address) {\r\n        return _getDisputeManager();\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the Treasury module\r\n    * @return Address of the Treasury module\r\n    */\r\n    function getTreasury() external view returns (address) {\r\n        return _getModule(TREASURY);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the Voting module\r\n    * @return Address of the Voting module\r\n    */\r\n    function getVoting() external view returns (address) {\r\n        return _getModule(VOTING);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the JurorsRegistry module\r\n    * @return Address of the JurorsRegistry module\r\n    */\r\n    function getJurorsRegistry() external view returns (address) {\r\n        return _getModule(JURORS_REGISTRY);\r\n    }\r\n\r\n    /**\r\n    * @dev Tell the address of the Subscriptions module\r\n    * @return Address of the Subscriptions module\r\n    */\r\n    function getSubscriptions() external view returns (address) {\r\n        return _getSubscriptions();\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to set the address of the funds governor\r\n    * @param _newFundsGovernor Address of the new config governor to be set\r\n    */\r\n    function _setFundsGovernor(address _newFundsGovernor) internal {\r\n        emit FundsGovernorChanged(governor.funds, _newFundsGovernor);\r\n        governor.funds = _newFundsGovernor;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to set the address of the config governor\r\n    * @param _newConfigGovernor Address of the new config governor to be set\r\n    */\r\n    function _setConfigGovernor(address _newConfigGovernor) internal {\r\n        emit ConfigGovernorChanged(governor.config, _newConfigGovernor);\r\n        governor.config = _newConfigGovernor;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to set the address of the modules governor\r\n    * @param _newModulesGovernor Address of the new modules governor to be set\r\n    */\r\n    function _setModulesGovernor(address _newModulesGovernor) internal {\r\n        emit ModulesGovernorChanged(governor.modules, _newModulesGovernor);\r\n        governor.modules = _newModulesGovernor;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to set a module\r\n    * @param _id Id of the module to be set\r\n    * @param _addr Address of the module to be set\r\n    */\r\n    function _setModule(bytes32 _id, address _addr) internal {\r\n        require(isContract(_addr), ERROR_IMPLEMENTATION_NOT_CONTRACT);\r\n        modules[_id] = _addr;\r\n        emit ModuleSet(_id, _addr);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to notify when a term has been transitioned\r\n    * @param _termId Identification number of the new current term that has been transitioned\r\n    */\r\n    function _onTermTransitioned(uint64 _termId) internal {\r\n        _ensureTermConfig(_termId);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to tell the address of the DisputeManager module\r\n    * @return Address of the DisputeManager module\r\n    */\r\n    function _getDisputeManager() internal view returns (address) {\r\n        return _getModule(DISPUTE_MANAGER);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to tell the address of the Subscriptions module\r\n    * @return Address of the Subscriptions module\r\n    */\r\n    function _getSubscriptions() internal view returns (address) {\r\n        return _getModule(SUBSCRIPTIONS);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to tell address of a module based on a given ID\r\n    * @param _id ID of the module being queried\r\n    * @return Address of the requested module\r\n    */\r\n    function _getModule(bytes32 _id) internal view returns (address) {\r\n        return modules[_id];\r\n    }\r\n}\r\n\r\n// File: @aragon/court/contracts/lib/os/SafeERC20.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/SafeERC20.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(address(_token), transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(address(_token), approveCallData);\r\n    }\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata) private returns (bool) {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n            // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                // Only return success if returned data was true\r\n                // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n// File: contracts/PrecedenceCampaignArbitrable.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PrecedenceCampaignArbitrable is IArbitrable {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string public constant ERROR_SENDER_NOT_ALLOWED = \"PCA_SENDER_NOT_ALLOWED\";\r\n    string public constant ERROR_RECOVER_FUNDS_FAILED = \"PCA_RECOVER_FUNDS_FAILED\";\r\n\r\n    address public owner;\r\n    IArbitrator public arbitrator;\r\n\r\n    modifier only(address _who) {\r\n        require(msg.sender == _who, ERROR_SENDER_NOT_ALLOWED);\r\n        _;\r\n    }\r\n\r\n    constructor (address _owner, IArbitrator _arbitrator) public {\r\n        owner = _owner;\r\n        arbitrator = _arbitrator;\r\n    }\r\n\r\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external only(owner) returns (uint256) {\r\n        return _createDispute(_possibleRulings, _metadata);\r\n    }\r\n\r\n    function submitEvidence(uint256 _disputeId, bytes calldata _evidence, bool _finished) external only(owner) {\r\n        _submitEvidence(_disputeId, msg.sender, _evidence, _finished);\r\n    }\r\n\r\n    function submitEvidenceFor(uint256 _disputeId, address _submitter, bytes calldata _evidence, bool _finished) external only(owner) {\r\n        _submitEvidence(_disputeId, _submitter, _evidence, _finished);\r\n    }\r\n\r\n    function createAndSubmit(\r\n        uint256 _possibleRulings,\r\n        bytes calldata _metadata,\r\n        address _submitter1,\r\n        address _submitter2,\r\n        bytes calldata _evidence1,\r\n        bytes calldata _evidence2\r\n    )\r\n        external\r\n        only(owner)\r\n        returns (uint256)\r\n    {\r\n        uint256 disputeId = _createDispute(_possibleRulings, _metadata);\r\n        _submitEvidence(disputeId, _submitter1, _evidence1, false);\r\n        _submitEvidence(disputeId, _submitter2, _evidence2, false);\r\n\r\n        return disputeId;\r\n    }\r\n\r\n    function closeEvidencePeriod(uint256 _disputeId) external only(owner) {\r\n        arbitrator.closeEvidencePeriod(_disputeId);\r\n    }\r\n\r\n    function rule(uint256 _disputeId, uint256 _ruling) external only(address(arbitrator)) {\r\n        emit Ruled(IArbitrator(msg.sender), _disputeId, _ruling);\r\n    }\r\n\r\n    function setOwner(address _owner) external only(owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function withdraw(ERC20 _token, address _to, uint256 _amount) external only(owner) {\r\n        ITreasury treasury = ITreasury(Controller(address(arbitrator)).getTreasury());\r\n        treasury.withdraw(_token, _to, _amount);\r\n    }\r\n\r\n    function recoverFunds(address _token, address payable _to, uint256 _amount) external only(owner) {\r\n        require(ERC20(_token).safeTransfer(_to, _amount), ERROR_RECOVER_FUNDS_FAILED);\r\n    }\r\n\r\n    function _createDispute(uint256 _possibleRulings, bytes memory _metadata) internal returns (uint256) {\r\n        (address recipient, ERC20 feeToken, uint256 disputeFees) = arbitrator.getDisputeFees();\r\n        feeToken.approve(recipient, disputeFees);\r\n        return arbitrator.createDispute(_possibleRulings, _metadata);\r\n    }\r\n\r\n    function _submitEvidence(uint256 _disputeId, address _submitter, bytes memory _evidence, bool _finished) internal {\r\n        emit EvidenceSubmitted(_disputeId, _submitter, _evidence, _finished);\r\n        if (_finished) {\r\n            arbitrator.closeEvidencePeriod(_disputeId);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_SENDER_NOT_ALLOWED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_possibleRulings\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"},{\"name\":\"_submitter1\",\"type\":\"address\"},{\"name\":\"_submitter2\",\"type\":\"address\"},{\"name\":\"_evidence1\",\"type\":\"bytes\"},{\"name\":\"_evidence2\",\"type\":\"bytes\"}],\"name\":\"createAndSubmit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"closeEvidencePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_evidence\",\"type\":\"bytes\"},{\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_RECOVER_FUNDS_FAILED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_possibleRulings\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_submitter\",\"type\":\"address\"},{\"name\":\"_evidence\",\"type\":\"bytes\"},{\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"submitEvidenceFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ruling\",\"type\":\"uint256\"}],\"name\":\"Ruled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"evidence\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"EvidenceSubmitted\",\"type\":\"event\"}]","ContractName":"PrecedenceCampaignArbitrable","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000d5931f0a36fe76845a5330f6d0cd7a378401e34d000000000000000000000000ee4650cbe7a2b23701d416f58b41d8b76b617797","Library":"","LicenseType":"None","SwarmSource":"bzzr://e153ef17183b80347544de60f850e00ee77ea16e20955f6728eb6305254fcad6"}]}