{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721/el/forging/ForgePathCatalog.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\ncontract ForgePathCatalog is Ownable {    \r\n\r\n    // Forge Types\r\n    // 1 - EL Gen 1 Token + EL Gen 1 Token = EL Gen 1 Token\r\n    // 2 - ERC721 Address + ERC721 Address = EL Gen 1 Token\r\n    // 3 - ERC721 Address + EL Gen 1 Token = EL Gen 1 Token\r\n    // 4 - ERC1155 Token + ERC1155 Token = EL Gen 1 Token\r\n    // 5 - ERC1155 Token + EL Gen 1 Token = EL Gen 1 Token\r\n    // 6 - ERC1155 Token + ERC721 Address = EL Gen 1 Token\r\n\r\n    struct ForgePathDataCommon {\r\n      uint8 forgeType;\r\n      uint256 weiCost;\r\n      uint256 elementeumCost;\r\n      uint256 forgedItem;\r\n    }\r\n\r\n    uint256 private nextForgePathIndex = 0;\r\n    string[] public forgePathNames;\r\n    mapping (uint256 => uint256) private forgePathIndexMap;\r\n    mapping (string => uint256) private forgePathNameIdMap;    \r\n    mapping (uint256 => string) private forgePathIdNameMap;    \r\n\r\n    mapping (uint256 => ForgePathDataCommon) internal forgePathMapCommon;\r\n\r\n    constructor() public \r\n      Ownable()\r\n    {      \r\n    }    \r\n\r\n    function() external payable {\r\n        revert(\"Fallback function is not permitted.\");\r\n    }\r\n\r\n    function destroyContract() external {\r\n        _requireOnlyOwner();\r\n        address payable payableOwner = address(uint160(owner()));\r\n        selfdestruct(payableOwner);\r\n    }\r\n\r\n    function hasPathDefinitionByName(string calldata pathName) external view returns (bool) {\r\n        return _hasPathDefinitionByName(pathName);\r\n    }\r\n\r\n    function hasPathDefinition(uint256 pathId) external view returns (bool) {\r\n        return _hasPathDefinition(pathId);\r\n    }\r\n\r\n    function getNumberOfPathDefinitions() external view returns (uint256) {\r\n        return forgePathNames.length;\r\n    }        \r\n\r\n    function getForgePathId(string memory pathName) public view returns (uint256) {\r\n      require(_hasPathDefinitionByName(pathName), \"path not defined\");\r\n      return forgePathNameIdMap[pathName];\r\n    }\r\n\r\n    function getForgePathNameAtIndex(uint256 index) external view returns (string memory) {\r\n      require(index < forgePathNames.length, \"Index Out Of Range\");\r\n      string memory pathName = forgePathNames[index]; \r\n      require(_hasPathDefinitionByName(pathName), \"path not defined\");\r\n      return pathName;\r\n    }\r\n\r\n    function getForgePathIdAtIndex(uint256 index) external view returns (uint256) {\r\n      require(index < forgePathNames.length, \"Index Out Of Range\");\r\n      string memory pathName = forgePathNames[index]; \r\n      require(_hasPathDefinitionByName(pathName), \"path not defined\");\r\n      return forgePathNameIdMap[pathName];\r\n    }    \r\n\r\n    function getForgeType(uint256 pathId) external view returns (uint8) {\r\n      return _getForgeType(pathId);\r\n    }    \r\n\r\n    function getForgePathDetailsCommon(uint256 pathId) external view returns (uint256, uint256, uint256) {\r\n      ForgePathDataCommon memory forgePathDataCommon = _getForgePathDataCommon(pathId);\r\n      return \r\n      (\r\n        forgePathDataCommon.weiCost,\r\n        forgePathDataCommon.elementeumCost,\r\n        forgePathDataCommon.forgedItem\r\n      );\r\n    }\r\n\r\n    function _hasPathDefinitionByName(string memory pathName) internal view returns (bool) {\r\n        return forgePathNameIdMap[pathName] != 0;\r\n    }\r\n\r\n    function _hasPathDefinition(uint256 pathId) internal view returns (bool) {\r\n        bytes memory tempEmptyStringTest = bytes(forgePathIdNameMap[pathId]);\r\n        return tempEmptyStringTest.length != 0;\r\n    }\r\n\r\n    function _getForgePathNameAtIndex(uint256 pathIndex) internal view returns (string memory) {\r\n        return forgePathNames[pathIndex];\r\n    }\r\n\r\n    function _getForgeType(uint256 pathId) internal view returns (uint8) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      return forgePathMapCommon[pathId].forgeType;\r\n    }\r\n\r\n    function registerForgePathCommon(string memory pathName, uint8 forgeType, uint256 weiCost, uint256 elementeumCost, uint256 forgedItem) internal {\r\n        _requireOnlyOwner();\r\n        require(!_hasPathDefinitionByName(pathName), \"path already defined\");\r\n        require(bytes(pathName).length < 32, \"path name may not exceed 31 characters\");\r\n\r\n        nextForgePathIndex++;\r\n        forgePathIndexMap[nextForgePathIndex] = forgePathNames.length;\r\n        forgePathNameIdMap[pathName] = nextForgePathIndex;\r\n        forgePathIdNameMap[nextForgePathIndex] = pathName;\r\n        forgePathNames.push(pathName);\r\n\r\n        forgePathMapCommon[nextForgePathIndex].forgeType = forgeType;\r\n        forgePathMapCommon[nextForgePathIndex].weiCost = weiCost;\r\n        forgePathMapCommon[nextForgePathIndex].elementeumCost = elementeumCost;\r\n        forgePathMapCommon[nextForgePathIndex].forgedItem = forgedItem;\r\n    }\r\n\r\n    function unregisterForgePathCommon(string memory pathName) internal {\r\n        _requireOnlyOwner();\r\n        require(_hasPathDefinitionByName(pathName), \"path not defined\");\r\n\r\n        uint256 pathId = forgePathNameIdMap[pathName];      \r\n        uint256 pathIndex = forgePathIndexMap[pathId];\r\n\r\n        delete forgePathIndexMap[pathId];\r\n        delete forgePathNameIdMap[pathName];\r\n        delete forgePathIdNameMap[pathId];\r\n        delete forgePathMapCommon[pathId];\r\n\r\n        string memory tmp = _getForgePathNameAtIndex(pathIndex);      \r\n        string memory priorLastPathName = _getForgePathNameAtIndex(forgePathNames.length - 1);\r\n        uint256 priorLastPathId = forgePathNameIdMap[priorLastPathName];      \r\n        forgePathNames[pathIndex] = forgePathNames[forgePathNames.length - 1];\r\n        forgePathNames[forgePathNames.length - 1] = tmp;\r\n        forgePathIndexMap[priorLastPathId] = pathIndex;\r\n        delete forgePathNames[forgePathNames.length - 1];\r\n        forgePathNames.length--;     \r\n    }                \r\n\r\n    function _getForgePathDataCommon(uint256 pathId) internal view returns (ForgePathDataCommon memory) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      return forgePathMapCommon[pathId];\r\n    }\r\n\r\n    function _requireOnlyOwner() internal view {\r\n      require(isOwner(), \"Ownable: caller is not the owner\");\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721/el/forging/IForgePathCatalogCombined.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IForgePathCatalogCombined {        \r\n    function getNumberOfPathDefinitions() external view returns (uint256);\r\n    function getForgePathNameAtIndex(uint256 index) external view returns (string memory);\r\n    function getForgePathIdAtIndex(uint256 index) external view returns (uint256);\r\n\r\n    function getForgeType(uint256 pathId) external view returns (uint8);\r\n    function getForgePathDetailsCommon(uint256 pathId) external view returns (uint256, uint256, uint256);\r\n    function getForgePathDetailsTwoGen1Tokens(uint256 pathId) external view returns (uint256, uint256, bool, bool);\r\n    function getForgePathDetailsTwoERC721Addresses(uint256 pathId) external view returns (address, address);\r\n    function getForgePathDetailsERC721AddressWithGen1Token(uint256 pathId) external view returns (address, uint256, bool);\r\n    function getForgePathDetailsTwoERC1155Tokens(uint256 pathId) external view returns (uint256, uint256, bool, bool, bool, bool);\r\n    function getForgePathDetailsERC1155WithGen1Token(uint256 pathId) external view returns (uint256, uint256, bool, bool, bool);\r\n    function getForgePathDetailsERC1155WithERC721Address(uint256 pathId) external view returns (uint256, address, bool, bool);\r\n}\r\n\r\n// File: contracts/ERC721/el/forging/ForgePathCatalogCombined.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\ncontract ForgePathCatalogCombined is IForgePathCatalogCombined, ForgePathCatalog {    \r\n\r\n    struct ForgePathDataTwoGen1Tokens {\r\n      uint256 material1;\r\n      uint256 material2;\r\n      bool burnMaterial1;\r\n      bool burnMaterial2;\r\n    }\r\n\r\n    struct ForgePathDataTwoERC721Addresses {\r\n      address material1;\r\n      address material2;\r\n    }\r\n\r\n    struct ForgePathDataERC721AddressWithGen1Token {\r\n      address material1;\r\n      uint256 material2;\r\n      bool burnMaterial2;\r\n    }\r\n\r\n    struct ForgePathDataTwoERC1155Tokens {\r\n      uint256 material1;\r\n      uint256 material2;\r\n      bool meltMaterial1;\r\n      bool meltMaterial2;\r\n      bool material1IsNonFungible;\r\n      bool material2IsNonFungible;\r\n    }\r\n\r\n    struct ForgePathDataERC1155WithGen1Token {\r\n      uint256 material1;\r\n      uint256 material2;\r\n      bool meltMaterial1;\r\n      bool burnMaterial2;\r\n      bool material1IsNonFungible;      \r\n    }\r\n\r\n    struct ForgePathDataERC1155WithERC721Address {\r\n      uint256 material1;\r\n      address material2;\r\n      bool meltMaterial1;\r\n      bool material1IsNonFungible;\r\n    }\r\n\r\n    mapping (uint256 => ForgePathDataTwoGen1Tokens) private forgePathMapTwoGen1Tokens;\r\n    mapping (uint256 => ForgePathDataTwoERC721Addresses) private forgePathMapTwoERC721Addresses;\r\n    mapping (uint256 => ForgePathDataERC721AddressWithGen1Token) private forgePathMapERC721AddressWithGen1Token;\r\n    mapping (uint256 => ForgePathDataTwoERC1155Tokens) private forgePathMapTwoERC1155Tokens;\r\n    mapping (uint256 => ForgePathDataERC1155WithGen1Token) private forgePathMapERC1155WithGen1Token;\r\n    mapping (uint256 => ForgePathDataERC1155WithERC721Address) private forgePathMapERC1155WithERC721Address;\r\n\r\n    constructor() public \r\n      ForgePathCatalog()\r\n    {      \r\n    }    \r\n\r\n    function unregisterForgePath(string calldata pathName) external {        \r\n        uint256 forgePathId = getForgePathId(pathName);\r\n        uint8 forgeType = _getForgeType(forgePathId);        \r\n        unregisterForgePathCommon(pathName);      \r\n\r\n        if(forgeType == 1) {\r\n          delete forgePathMapTwoGen1Tokens[forgePathId];    \r\n        } else if(forgeType == 2) {\r\n          delete forgePathMapTwoERC721Addresses[forgePathId];    \r\n        } else if(forgeType == 3) {\r\n          delete forgePathMapERC721AddressWithGen1Token[forgePathId];    \r\n        } else if(forgeType == 4) {\r\n          delete forgePathMapTwoERC1155Tokens[forgePathId];    \r\n        } else if(forgeType == 5) {\r\n          delete forgePathMapERC1155WithGen1Token[forgePathId];     \r\n        } else if(forgeType == 6) {\r\n          delete forgePathMapERC1155WithERC721Address[forgePathId];    \r\n        } else {\r\n          revert(\"Non-existent forge type\");\r\n        }\r\n    }    \r\n\r\n    function registerForgePathTwoGen1Tokens(\r\n      string calldata pathName,\r\n      uint256 weiCost,\r\n      uint256 elementeumCost,\r\n      uint256 forgedItem, \r\n      uint256 material1, \r\n      uint256 material2,       \r\n      bool burnMaterial1,       \r\n      bool burnMaterial2) \r\n      external {\r\n        registerForgePathCommon(pathName, 1, weiCost, elementeumCost, forgedItem);\r\n        uint256 forgePathId = getForgePathId(pathName);             \r\n        \r\n        forgePathMapTwoGen1Tokens[forgePathId].material1 = material1;\r\n        forgePathMapTwoGen1Tokens[forgePathId].material2 = material2;\r\n        forgePathMapTwoGen1Tokens[forgePathId].burnMaterial1 = burnMaterial1;\r\n        forgePathMapTwoGen1Tokens[forgePathId].burnMaterial2 = burnMaterial2;        \r\n    }        \r\n\r\n    function getForgePathDetailsTwoGen1Tokens(uint256 pathId) external view returns (uint256, uint256, bool, bool) {              \r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      ForgePathDataTwoGen1Tokens memory forgePathData = forgePathMapTwoGen1Tokens[pathId];\r\n      return \r\n      (\r\n        forgePathData.material1,\r\n        forgePathData.material2,\r\n        forgePathData.burnMaterial1,\r\n        forgePathData.burnMaterial2        \r\n      );\r\n    }    \r\n\r\n    function registerForgePathTwoERC721Addresses(\r\n      string calldata pathName,\r\n      uint256 weiCost,\r\n      uint256 elementeumCost,\r\n      uint256 forgedItem, \r\n      address material1, \r\n      address material2) \r\n      external {\r\n        registerForgePathCommon(pathName, 2, weiCost, elementeumCost, forgedItem);\r\n        uint256 forgePathId = getForgePathId(pathName);             \r\n        \r\n        forgePathMapTwoERC721Addresses[forgePathId].material1 = material1;\r\n        forgePathMapTwoERC721Addresses[forgePathId].material2 = material2;\r\n    }        \r\n\r\n    function getForgePathDetailsTwoERC721Addresses(uint256 pathId) external view returns (address, address) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      ForgePathDataTwoERC721Addresses memory forgePathData = forgePathMapTwoERC721Addresses[pathId];\r\n      return \r\n      (\r\n        forgePathData.material1,\r\n        forgePathData.material2\r\n      );\r\n    }\r\n\r\n    function registerForgePathERC721AddressWithGen1Token(\r\n      string calldata pathName,\r\n      uint256 weiCost,\r\n      uint256 elementeumCost,\r\n      uint256 forgedItem,\r\n      address material1, \r\n      uint256 material2,             \r\n      bool burnMaterial2) \r\n      external {\r\n        registerForgePathCommon(pathName, 3, weiCost, elementeumCost, forgedItem);\r\n        uint256 forgePathId = getForgePathId(pathName);\r\n\r\n        forgePathMapERC721AddressWithGen1Token[forgePathId].material1 = material1;\r\n        forgePathMapERC721AddressWithGen1Token[forgePathId].material2 = material2;\r\n        forgePathMapERC721AddressWithGen1Token[forgePathId].burnMaterial2 = burnMaterial2;\r\n    }    \r\n\r\n    function getForgePathDetailsERC721AddressWithGen1Token(uint256 pathId) external view returns (address, uint256, bool) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      ForgePathDataERC721AddressWithGen1Token memory forgePathData = forgePathMapERC721AddressWithGen1Token[pathId];\r\n      return \r\n      (\r\n        forgePathData.material1,\r\n        forgePathData.material2,\r\n        forgePathData.burnMaterial2\r\n      );\r\n    }\r\n\r\n    function registerForgePathTwoERC1155Tokens(\r\n      string calldata pathName,\r\n      uint256 weiCost,\r\n      uint256 elementeumCost,\r\n      uint256 forgedItem, \r\n      uint256 material1, \r\n      uint256 material2,       \r\n      bool meltMaterial1, \r\n      bool meltMaterial2, \r\n      bool material1IsNonFungible, \r\n      bool material2IsNonFungible) \r\n      external {\r\n        registerForgePathCommon(pathName, 4, weiCost, elementeumCost, forgedItem);\r\n        uint256 forgePathId = getForgePathId(pathName);                \r\n\r\n        forgePathMapTwoERC1155Tokens[forgePathId].material1 = material1;\r\n        forgePathMapTwoERC1155Tokens[forgePathId].material2 = material2;\r\n        forgePathMapTwoERC1155Tokens[forgePathId].meltMaterial1 = meltMaterial1;\r\n        forgePathMapTwoERC1155Tokens[forgePathId].meltMaterial2 = meltMaterial2;\r\n        forgePathMapTwoERC1155Tokens[forgePathId].material1IsNonFungible = material1IsNonFungible;\r\n        forgePathMapTwoERC1155Tokens[forgePathId].material2IsNonFungible = material2IsNonFungible;\r\n    }  \r\n\r\n    function getForgePathDetailsTwoERC1155Tokens(uint256 pathId) external view returns (uint256, uint256, bool, bool, bool, bool) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      ForgePathDataTwoERC1155Tokens memory forgePathData = forgePathMapTwoERC1155Tokens[pathId];\r\n      return \r\n      (\r\n        forgePathData.material1,\r\n        forgePathData.material2,\r\n        forgePathData.meltMaterial1,\r\n        forgePathData.meltMaterial2,\r\n        forgePathData.material1IsNonFungible,\r\n        forgePathData.material2IsNonFungible\r\n      );\r\n    }\r\n\r\n    function registerForgePathERC1155WithGen1Token(\r\n      string calldata pathName,\r\n      uint256 weiCost,\r\n      uint256 elementeumCost,\r\n      uint256 forgedItem, \r\n      uint256 material1, \r\n      uint256 material2,       \r\n      bool meltMaterial1, \r\n      bool burnMaterial2,\r\n      bool material1IsNonFungible) \r\n      external {\r\n        registerForgePathCommon(pathName, 5, weiCost, elementeumCost, forgedItem);\r\n        uint256 forgePathId = getForgePathId(pathName);             \r\n\r\n        forgePathMapERC1155WithGen1Token[forgePathId].material1 = material1;\r\n        forgePathMapERC1155WithGen1Token[forgePathId].material2 = material2;\r\n        forgePathMapERC1155WithGen1Token[forgePathId].meltMaterial1 = meltMaterial1;\r\n        forgePathMapERC1155WithGen1Token[forgePathId].burnMaterial2 = burnMaterial2;\r\n        forgePathMapERC1155WithGen1Token[forgePathId].material1IsNonFungible = material1IsNonFungible;        \r\n    }        \r\n\r\n    function getForgePathDetailsERC1155WithGen1Token(uint256 pathId) external view returns (uint256, uint256, bool, bool, bool) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      ForgePathDataERC1155WithGen1Token memory forgePathData = forgePathMapERC1155WithGen1Token[pathId];\r\n      return \r\n      (\r\n        forgePathData.material1,\r\n        forgePathData.material2,\r\n        forgePathData.meltMaterial1,\r\n        forgePathData.burnMaterial2,\r\n        forgePathData.material1IsNonFungible\r\n      );\r\n    }\r\n\r\n    function registerForgePathERC1155WithERC721Address(\r\n      string calldata pathName,\r\n      uint256 weiCost,\r\n      uint256 elementeumCost,\r\n      uint256 forgedItem, \r\n      uint256 material1, \r\n      address material2, \r\n      bool meltMaterial1, \r\n      bool material1IsNonFungible) \r\n      external {\r\n        registerForgePathCommon(pathName, 6, weiCost, elementeumCost, forgedItem);\r\n        uint256 forgePathId = getForgePathId(pathName);            \r\n\r\n        forgePathMapERC1155WithERC721Address[forgePathId].material1 = material1;\r\n        forgePathMapERC1155WithERC721Address[forgePathId].material2 = material2;\r\n        forgePathMapERC1155WithERC721Address[forgePathId].meltMaterial1 = meltMaterial1;\r\n        forgePathMapERC1155WithERC721Address[forgePathId].material1IsNonFungible = material1IsNonFungible;\r\n    }        \r\n\r\n    function getForgePathDetailsERC1155WithERC721Address(uint256 pathId) external view returns (uint256, address, bool, bool) {\r\n      require(_hasPathDefinition(pathId), \"path not defined\");\r\n      ForgePathDataERC1155WithERC721Address memory forgePathData = forgePathMapERC1155WithERC721Address[pathId];\r\n      return \r\n      (\r\n        forgePathData.material1,\r\n        forgePathData.material2,\r\n        forgePathData.meltMaterial1,\r\n        forgePathData.material1IsNonFungible\r\n      );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"}],\"name\":\"unregisterForgePath\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forgePathNames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"}],\"name\":\"getForgePathId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfPathDefinitions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"elementeumCost\",\"type\":\"uint256\"},{\"name\":\"forgedItem\",\"type\":\"uint256\"},{\"name\":\"material1\",\"type\":\"uint256\"},{\"name\":\"material2\",\"type\":\"uint256\"},{\"name\":\"burnMaterial1\",\"type\":\"bool\"},{\"name\":\"burnMaterial2\",\"type\":\"bool\"}],\"name\":\"registerForgePathTwoGen1Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsTwoERC721Addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"}],\"name\":\"hasPathDefinitionByName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsERC721AddressWithGen1Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"elementeumCost\",\"type\":\"uint256\"},{\"name\":\"forgedItem\",\"type\":\"uint256\"},{\"name\":\"material1\",\"type\":\"address\"},{\"name\":\"material2\",\"type\":\"uint256\"},{\"name\":\"burnMaterial2\",\"type\":\"bool\"}],\"name\":\"registerForgePathERC721AddressWithGen1Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsERC1155WithGen1Token\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"elementeumCost\",\"type\":\"uint256\"},{\"name\":\"forgedItem\",\"type\":\"uint256\"},{\"name\":\"material1\",\"type\":\"uint256\"},{\"name\":\"material2\",\"type\":\"uint256\"},{\"name\":\"meltMaterial1\",\"type\":\"bool\"},{\"name\":\"meltMaterial2\",\"type\":\"bool\"},{\"name\":\"material1IsNonFungible\",\"type\":\"bool\"},{\"name\":\"material2IsNonFungible\",\"type\":\"bool\"}],\"name\":\"registerForgePathTwoERC1155Tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgeType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"elementeumCost\",\"type\":\"uint256\"},{\"name\":\"forgedItem\",\"type\":\"uint256\"},{\"name\":\"material1\",\"type\":\"address\"},{\"name\":\"material2\",\"type\":\"address\"}],\"name\":\"registerForgePathTwoERC721Addresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsTwoERC1155Tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsTwoGen1Tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getForgePathIdAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"elementeumCost\",\"type\":\"uint256\"},{\"name\":\"forgedItem\",\"type\":\"uint256\"},{\"name\":\"material1\",\"type\":\"uint256\"},{\"name\":\"material2\",\"type\":\"address\"},{\"name\":\"meltMaterial1\",\"type\":\"bool\"},{\"name\":\"material1IsNonFungible\",\"type\":\"bool\"}],\"name\":\"registerForgePathERC1155WithERC721Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsCommon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getForgePathNameAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pathName\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"elementeumCost\",\"type\":\"uint256\"},{\"name\":\"forgedItem\",\"type\":\"uint256\"},{\"name\":\"material1\",\"type\":\"uint256\"},{\"name\":\"material2\",\"type\":\"uint256\"},{\"name\":\"meltMaterial1\",\"type\":\"bool\"},{\"name\":\"burnMaterial2\",\"type\":\"bool\"},{\"name\":\"material1IsNonFungible\",\"type\":\"bool\"}],\"name\":\"registerForgePathERC1155WithGen1Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"getForgePathDetailsERC1155WithERC721Address\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"hasPathDefinition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForgePathCatalogCombined","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7bd4b4f60b1b5b274671f56de77b595229bc8f88a9e6a6890b1c88f2220d7c53"}]}