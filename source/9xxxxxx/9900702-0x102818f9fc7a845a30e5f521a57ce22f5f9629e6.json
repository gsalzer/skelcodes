{"status":"1","message":"OK","result":[{"SourceCode":"contract Ophir:\r\n    def mint(_to : address, _value : uint256): modifying\r\n\r\nChangePrice: event({_value: uint256})\r\nTokenPurchase: event({_to: indexed(address), _value: uint256})\r\nTokenUpdate: event({_to: indexed(address)})\r\nUpdateEthUsd: event({_value: uint256})\r\nSaleLock: event({_locked: bool})\r\n    \r\nusdPrice : uint256\r\nophirAddress: address\r\nethUsd : uint256\r\n\r\nlocked : bool\r\noperator : address\r\n        \r\n@public\r\ndef __init__(_tokenAddress : address, _salePrice: uint256, _saleDecimal : uint256):\r\n    \"\"\"\r\n    @dev connect crowdsale contract to eth/usd price and token\r\n    @param _sourceAddress ETH/USD feed source \r\n    @param _tokenAddress token contract address \r\n    @param _salePrice initial sales price in USD\r\n    \"\"\"\r\n    \r\n    assert _saleDecimal <= 18\r\n    \r\n    self.usdPrice = _salePrice * 10 ** (18 - _saleDecimal)\r\n    self.ophirAddress = _tokenAddress\r\n    self.locked = False\r\n    self.operator = msg.sender\r\n\r\n@public\r\n@constant\r\ndef getRate() -> uint256:\r\n    \"\"\"\r\n    @dev returns USD sale price, 18 decimals\r\n    \"\"\"\r\n    return self.usdPrice\r\n    \r\n@private\r\ndef _priceDivide(_x : uint256, _y : uint256) -> uint256:\r\n\r\n    numerator : uint256 = _x * 10 ** 3\r\n    result : uint256 = ((numerator / _y) + 5) / 10\r\n    \r\n    return result\r\n    \r\n@private\r\ndef _priceMultiply(_x : uint256, _y : uint256) -> uint256:\r\n    \r\n    factorX : uint256 = _x\r\n    factorY : uint256 = _y \r\n    \r\n    result : uint256 = factorX * factorY\r\n    return result\r\n\r\n@public\r\n@constant\r\ndef lockedContract() -> bool:\r\n    \"\"\"\r\n    @dev displays if smart contract is locked or otherwise\r\n    \"\"\"\r\n    return self.locked\r\n\r\n@public\r\ndef setRate(_price : uint256, _decimals : uint256):\r\n    \"\"\"\r\n    @dev sets new USD sale price, logs event\r\n    @param _price price in USD, from values $1-$999999\r\n    @param _decimals decimals in the _price param\r\n    \"\"\"\r\n    \r\n    assert msg.sender == self.operator\r\n    assert _price > 0\r\n    assert _decimals <= 18\r\n    \r\n    self.usdPrice = _price * 10 ** (18 - _decimals)\r\n    log.ChangePrice(self.usdPrice)\r\n    \r\n@public\r\ndef setEthUsd(_value: uint256, _decimals : uint256):\r\n    \r\n    assert msg.sender == self.operator\r\n    assert _value > 0 \r\n    assert _decimals <= 18\r\n    \r\n    self.ethUsd = _value * 10 ** (18 - _decimals)\r\n    log.UpdateEthUsd(self.ethUsd)\r\n    \r\n@public\r\ndef lockContract() -> bool:\r\n    \"\"\"\r\n    @dev locks or unlocks the smart contract from new purchases\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    \r\n    if(self.locked):\r\n        self.locked = False\r\n        log.SaleLock(False)\r\n        return False\r\n    if(self.locked == False):\r\n        self.locked = True\r\n        log.SaleLock(True)\r\n        return True\r\n    return True\r\n\r\n@public\r\ndef modifyToken(_tokenAddress : address):\r\n    \"\"\"\r\n    @dev changes token contract address in an event of contract modification\r\n    @param _tokenAddress token contract address \r\n    \"\"\"\r\n    \r\n    assert msg.sender == self.operator\r\n    \r\n    self.ophirAddress = _tokenAddress\r\n    log.TokenUpdate(_tokenAddress)\r\n\r\n@public\r\n@constant\r\ndef getEthUsd() -> uint256:\r\n    return self.ethUsd \r\n\r\n@public\r\n@payable\r\ndef tokenPurchase() -> uint256:\r\n    \"\"\"\r\n    @dev executes the purchase and generation of new ophir tokens \r\n    1. Reads ETHUSD Oracle\r\n    2. Parse into uint256 \r\n    3. Calculate rate for OPR/ETH \r\n    4. Calculate token amount rate * amount\r\n    5. Send/Mint Tokens to Buyer\r\n    6. Log Token Purchase\r\n    \"\"\"\r\n    assert msg.value > 0\r\n    assert self.locked == False\r\n    \r\n    opreth : uint256 = self._priceDivide(self.ethUsd, self.usdPrice)\r\n    received : uint256 = as_unitless_number(msg.value)\r\n    amtTok : uint256 = self._priceMultiply(opreth, received) / (10 ** 18)\r\n    \r\n    assert amtTok >= 1\r\n    \r\n    send(self.operator, msg.value)\r\n    Ophir(self.ophirAddress).mint(msg.sender, amtTok)\r\n    \r\n    return amtTok\r\n    \r\n@public \r\ndef destroy():\r\n    assert msg.sender == self.operator\r\n    selfdestruct(self.operator)","ABI":"[{\"name\":\"ChangePrice\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenPurchase\",\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenUpdate\",\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateEthUsd\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SaleLock\",\"inputs\":[{\"type\":\"bool\",\"name\":\"_locked\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_tokenAddress\"},{\"type\":\"uint256\",\"name\":\"_salePrice\"},{\"type\":\"uint256\",\"name\":\"_saleDecimal\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"getRate\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1151},{\"name\":\"lockedContract\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1241},{\"name\":\"setRate\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_price\"},{\"type\":\"uint256\",\"name\":\"_decimals\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":39271},{\"name\":\"setEthUsd\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_value\"},{\"type\":\"uint256\",\"name\":\"_decimals\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":39301},{\"name\":\"lockContract\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":60927},{\"name\":\"modifyToken\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_tokenAddress\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":37597},{\"name\":\"getEthUsd\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1391},{\"name\":\"tokenPurchase\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"constant\":false,\"payable\":true,\"type\":\"function\",\"gas\":45269},{\"name\":\"destroy\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":27302}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b17","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"00000000000000000000000023d42fad1b5c601020068f855424655a78366c6600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":""}]}