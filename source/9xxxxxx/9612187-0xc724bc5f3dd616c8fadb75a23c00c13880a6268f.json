{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/token/interfaces/IERC20Token.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {this;}\r\n    function symbol() public view returns (string) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/utility/interfaces/IWhitelist.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IBancorConverter.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Bancor Converter interface\r\n*/\r\ncontract IBancorConverter {\r\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256, uint256);\r\n    function convert2(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public returns (uint256);\r\n    function quickConvert2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public payable returns (uint256);\r\n    function conversionWhitelist() public view returns (IWhitelist) {this;}\r\n    function conversionFee() public view returns (uint32) {this;}\r\n    function reserves(address _address) public view returns (uint256, uint32, bool, bool, bool) {_address; this;}\r\n    function getReserveBalance(IERC20Token _reserveToken) public view returns (uint256);\r\n    function reserveTokens(uint256 _index) public view returns (IERC20Token) {_index; this;}\r\n\r\n    // deprecated, backward compatibility\r\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\r\n    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\r\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool);\r\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\r\n    function connectorTokens(uint256 _index) public view returns (IERC20Token);\r\n    function connectorTokenCount() public view returns (uint16);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IBancorConverterUpgrader.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/*\r\n    Bancor Converter Upgrader interface\r\n*/\r\ncontract IBancorConverterUpgrader {\r\n    function upgrade(bytes32 _version) public;\r\n    function upgrade(uint16 _version) public;\r\n}\r\n\r\n// File: contracts/utility/interfaces/IOwned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n// File: contracts/token/interfaces/ISmartToken.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken is IOwned, IERC20Token {\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/converter/interfaces/IBancorConverterFactory.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/*\r\n    Bancor Converter Factory interface\r\n*/\r\ncontract IBancorConverterFactory {\r\n    function createConverter(\r\n        ISmartToken _token,\r\n        IContractRegistry _registry,\r\n        uint32 _maxConversionFee,\r\n        IERC20Token _reserveToken,\r\n        uint32 _reserveRatio\r\n    )\r\n    public returns (address);\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      * \r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      * \r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Utils.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n      * constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/utility/ContractRegistryClient.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Base contract for ContractRegistry clients\r\n*/\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_FEATURES = \"ContractFeatures\";\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 internal constant BANCOR_CONVERTER_FACTORY = \"BancorConverterFactory\";\r\n    bytes32 internal constant BANCOR_CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant BANCOR_CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant BANCOR_CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n\r\n    IContractRegistry public registry;      // address of the current contract-registry\r\n    IContractRegistry public prevRegistry;  // address of the previous contract-registry\r\n    bool public onlyOwnerCanUpdateRegistry; // only an owner can update the contract-registry\r\n\r\n    /**\r\n      * @dev verifies that the caller is mapped to the given contract name\r\n      * \r\n      * @param _contractName    contract name\r\n    */\r\n    modifier only(bytes32 _contractName) {\r\n        require(msg.sender == addressOf(_contractName));\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev initializes a new ContractRegistryClient instance\r\n      * \r\n      * @param  _registry   address of a contract-registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) internal validAddress(_registry) {\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n      * @dev updates to the new contract-registry\r\n     */\r\n    function updateRegistry() public {\r\n        // verify that this function is permitted\r\n        require(msg.sender == owner || !onlyOwnerCanUpdateRegistry);\r\n\r\n        // get the new contract-registry\r\n        address newRegistry = addressOf(CONTRACT_REGISTRY);\r\n\r\n        // verify that the new contract-registry is different and not zero\r\n        require(newRegistry != address(registry) && newRegistry != address(0));\r\n\r\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\r\n        require(IContractRegistry(newRegistry).addressOf(CONTRACT_REGISTRY) != address(0));\r\n\r\n        // save a backup of the current contract-registry before replacing it\r\n        prevRegistry = registry;\r\n\r\n        // replace the current contract-registry with the new contract-registry\r\n        registry = IContractRegistry(newRegistry);\r\n    }\r\n\r\n    /**\r\n      * @dev restores the previous contract-registry\r\n    */\r\n    function restoreRegistry() public ownerOnly {\r\n        // restore the previous contract-registry\r\n        registry = prevRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restricts the permission to update the contract-registry\r\n      * \r\n      * @param _onlyOwnerCanUpdateRegistry  indicates whether or not permission is restricted to owner only\r\n    */\r\n    function restrictRegistryUpdate(bool _onlyOwnerCanUpdateRegistry) ownerOnly public {\r\n        // change the permission to update the contract-registry\r\n        onlyOwnerCanUpdateRegistry = _onlyOwnerCanUpdateRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the address associated with the given contract name\r\n      * \r\n      * @param _contractName    contract name\r\n      * \r\n      * @return contract address\r\n    */\r\n    function addressOf(bytes32 _contractName) internal view returns (address) {\r\n        return registry.addressOf(_contractName);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractFeatures.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Contract Features interface\r\n*/\r\ncontract IContractFeatures {\r\n    function isSupported(address _contract, uint256 _features) public view returns (bool);\r\n    function enableFeatures(uint256 _features, bool _enable) public;\r\n}\r\n\r\n// File: contracts/FeatureIds.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Id definitions for bancor contract features\r\n  * \r\n  * Can be used to query the ContractFeatures contract to check whether a certain feature is supported by a contract\r\n*/\r\ncontract FeatureIds {\r\n    // converter features\r\n    uint256 public constant CONVERTER_CONVERSION_WHITELIST = 1 << 0;\r\n}\r\n\r\n// File: contracts/converter/BancorConverterUpgrader.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Bancor converter dedicated interface\r\n*/\r\ncontract IBancorConverterExtended is IBancorConverter, IOwned {\r\n    function token() public view returns (ISmartToken) {this;}\r\n    function maxConversionFee() public view returns (uint32) {this;}\r\n    function conversionFee() public view returns (uint32) {this;}\r\n    function connectorTokenCount() public view returns (uint16);\r\n    function reserveTokenCount() public view returns (uint16);\r\n    function connectorTokens(uint256 _index) public view returns (IERC20Token) {_index; this;}\r\n    function reserveTokens(uint256 _index) public view returns (IERC20Token) {_index; this;}\r\n    function setConversionWhitelist(IWhitelist _whitelist) public;\r\n    function transferTokenOwnership(address _newOwner) public;\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n    function acceptTokenOwnership() public;\r\n    function setConversionFee(uint32 _conversionFee) public;\r\n    function addConnector(IERC20Token _token, uint32 _weight, bool _enableVirtualBalance) public;\r\n    function updateConnector(IERC20Token _connectorToken, uint32 _weight, bool _enableVirtualBalance, uint256 _virtualBalance) public;\r\n}\r\n\r\n/**\r\n  * @dev Bancor Converter Upgrader\r\n  * \r\n  * The Bancor converter upgrader contract allows upgrading an older Bancor converter contract (0.4 and up)\r\n  * to the latest version.\r\n  * To begin the upgrade process, simply execute the 'upgrade' function.\r\n  * At the end of the process, the ownership of the newly upgraded converter will be transferred\r\n  * back to the original owner and the original owner will need to execute the 'acceptOwnership' function.\r\n  * \r\n  * The address of the new converter is available in the ConverterUpgrade event.\r\n  * \r\n  * Note that for older converters that don't yet have the 'upgrade' function, ownership should first\r\n  * be transferred manually to the ConverterUpgrader contract using the 'transferOwnership' function\r\n  * and then the upgrader 'upgrade' function should be executed directly.\r\n*/\r\ncontract BancorConverterUpgrader is IBancorConverterUpgrader, ContractRegistryClient, FeatureIds {\r\n    string public version = '0.3';\r\n\r\n    /**\r\n      * @dev triggered when the contract accept a converter ownership\r\n      * \r\n      * @param _converter   converter address\r\n      * @param _owner       new owner - local upgrader address\r\n    */\r\n    event ConverterOwned(address indexed _converter, address indexed _owner);\r\n\r\n    /**\r\n      * @dev triggered when the upgrading process is done\r\n      * \r\n      * @param _oldConverter    old converter address\r\n      * @param _newConverter    new converter address\r\n    */\r\n    event ConverterUpgrade(address indexed _oldConverter, address indexed _newConverter);\r\n\r\n    /**\r\n      * @dev initializes a new BancorConverterUpgrader instance\r\n      * \r\n      * @param _registry    address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) ContractRegistryClient(_registry) public {\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * can only be called by a converter\r\n      * \r\n      * @param _version old converter version\r\n    */\r\n    function upgrade(bytes32 _version) public {\r\n        upgradeOld(IBancorConverter(msg.sender), _version);\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * can only be called by a converter\r\n      * \r\n      * @param _version old converter version\r\n    */\r\n    function upgrade(uint16 _version) public {\r\n        upgradeOld(IBancorConverter(msg.sender), bytes32(_version));\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades an old converter to the latest version\r\n      * will throw if ownership wasn't transferred to the upgrader before calling this function.\r\n      * ownership of the new converter will be transferred back to the original owner.\r\n      * fires the ConverterUpgrade event upon success.\r\n      * \r\n      * @param _converter   old converter contract address\r\n      * @param _version     old converter version\r\n    */\r\n    function upgradeOld(IBancorConverter _converter, bytes32 _version) public {\r\n        _version;\r\n        IBancorConverterExtended converter = IBancorConverterExtended(_converter);\r\n        address prevOwner = converter.owner();\r\n        acceptConverterOwnership(converter);\r\n        IBancorConverterExtended newConverter = createConverter(converter);\r\n        copyConnectors(converter, newConverter);\r\n        copyConversionFee(converter, newConverter);\r\n        transferConnectorsBalances(converter, newConverter);                \r\n        ISmartToken token = converter.token();\r\n\r\n        if (token.owner() == address(converter)) {\r\n            converter.transferTokenOwnership(newConverter);\r\n            newConverter.acceptTokenOwnership();\r\n        }\r\n\r\n        converter.transferOwnership(prevOwner);\r\n        newConverter.transferOwnership(prevOwner);\r\n\r\n        emit ConverterUpgrade(address(converter), address(newConverter));\r\n    }\r\n\r\n    /**\r\n      * @dev the first step when upgrading a converter is to transfer the ownership to the local contract.\r\n      * the upgrader contract then needs to accept the ownership transfer before initiating\r\n      * the upgrade process.\r\n      * fires the ConverterOwned event upon success\r\n      * \r\n      * @param _oldConverter       converter to accept ownership of\r\n    */\r\n    function acceptConverterOwnership(IBancorConverterExtended _oldConverter) private {\r\n        _oldConverter.acceptOwnership();\r\n        emit ConverterOwned(_oldConverter, this);\r\n    }\r\n\r\n    /**\r\n      * @dev creates a new converter with same basic data as the original old converter\r\n      * the newly created converter will have no connectors at this step.\r\n      * \r\n      * @param _oldConverter    old converter contract address\r\n      * \r\n      * @return the new converter  new converter contract address\r\n    */\r\n    function createConverter(IBancorConverterExtended _oldConverter) private returns(IBancorConverterExtended) {\r\n        IWhitelist whitelist;\r\n        ISmartToken token = _oldConverter.token();\r\n        uint32 maxConversionFee = _oldConverter.maxConversionFee();\r\n\r\n        IBancorConverterFactory converterFactory = IBancorConverterFactory(addressOf(BANCOR_CONVERTER_FACTORY));\r\n        address converterAddress = converterFactory.createConverter(\r\n            token,\r\n            registry,\r\n            maxConversionFee,\r\n            IERC20Token(address(0)),\r\n            0\r\n        );\r\n\r\n        IBancorConverterExtended converter = IBancorConverterExtended(converterAddress);\r\n        converter.acceptOwnership();\r\n\r\n        // get the contract features address from the registry\r\n        IContractFeatures features = IContractFeatures(addressOf(CONTRACT_FEATURES));\r\n\r\n        if (features.isSupported(_oldConverter, FeatureIds.CONVERTER_CONVERSION_WHITELIST)) {\r\n            whitelist = _oldConverter.conversionWhitelist();\r\n            if (whitelist != address(0))\r\n                converter.setConversionWhitelist(whitelist);\r\n        }\r\n\r\n        return converter;\r\n    }\r\n\r\n    /**\r\n      * @dev copies the connectors from the old converter to the new one.\r\n      * note that this will not work for an unlimited number of connectors due to block gas limit constraints.\r\n      * \r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function copyConnectors(IBancorConverterExtended _oldConverter, IBancorConverterExtended _newConverter)\r\n        private\r\n    {\r\n        uint256 virtualBalance;\r\n        uint32 weight;\r\n        bool isVirtualBalanceEnabled;\r\n        uint16 connectorTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        for (uint16 i = 0; i < connectorTokenCount; i++) {\r\n            address connectorAddress = _oldConverter.connectorTokens(i);\r\n            (virtualBalance, weight, isVirtualBalanceEnabled, , ) = _oldConverter.connectors(connectorAddress);\r\n\r\n            IERC20Token connectorToken = IERC20Token(connectorAddress);\r\n            _newConverter.addConnector(connectorToken, weight, isVirtualBalanceEnabled);\r\n\r\n            if (isVirtualBalanceEnabled)\r\n                _newConverter.updateConnector(connectorToken, weight, isVirtualBalanceEnabled, virtualBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev copies the conversion fee from the old converter to the new one\r\n      * \r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function copyConversionFee(IBancorConverterExtended _oldConverter, IBancorConverterExtended _newConverter) private {\r\n        uint32 conversionFee = _oldConverter.conversionFee();\r\n        _newConverter.setConversionFee(conversionFee);\r\n    }\r\n\r\n    /**\r\n      * @dev transfers the balance of each connector in the old converter to the new one.\r\n      * note that the function assumes that the new converter already has the exact same number of\r\n      * also, this will not work for an unlimited number of connectors due to block gas limit constraints.\r\n      * \r\n      * @param _oldConverter    old converter contract address\r\n      * @param _newConverter    new converter contract address\r\n    */\r\n    function transferConnectorsBalances(IBancorConverterExtended _oldConverter, IBancorConverterExtended _newConverter)\r\n        private\r\n    {\r\n        uint256 connectorBalance;\r\n        uint16 connectorTokenCount = _oldConverter.connectorTokenCount();\r\n\r\n        for (uint16 i = 0; i < connectorTokenCount; i++) {\r\n            address connectorAddress = _oldConverter.connectorTokens(i);\r\n            IERC20Token connector = IERC20Token(connectorAddress);\r\n            connectorBalance = connector.balanceOf(_oldConverter);\r\n            _oldConverter.withdrawTokens(connector, address(_newConverter), connectorBalance);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_onlyOwnerCanUpdateRegistry\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyOwnerCanUpdateRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONVERTER_CONVERSION_WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_converter\",\"type\":\"address\"},{\"name\":\"_version\",\"type\":\"bytes32\"}],\"name\":\"upgradeOld\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_converter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ConverterOwned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldConverter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newConverter\",\"type\":\"address\"}],\"name\":\"ConverterUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"BancorConverterUpgrader","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4","Library":"","LicenseType":"None","SwarmSource":"bzzr://0683d5fe9d2c8f02bf0ed680b41767464447751cc1071217d0cd66ed480975a6"}]}