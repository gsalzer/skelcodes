{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CTokenInterface {\r\n    function exchangeRateStored() external view returns (uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function borrowBalanceStored(address) external view returns (uint);\r\n\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface OrcaleComp {\r\n    function getUnderlyingPrice(address) external view returns (uint);\r\n}\r\n\r\ninterface RegistryInterface {\r\n    function proxies(address owner) external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get ethereum address for trade\r\n     */\r\n    function getAddressETH() public pure returns (address eth) {\r\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getComptrollerAddress() public pure returns (address troller) {\r\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n        // troller = 0x2EAa9D77AE4D8f9cdD9FAAcd44016E746485bddb; // Rinkeby\r\n        // troller = 0x3CA5a0E85aD80305c2d2c4982B2f2756f1e747a5; // Kovan\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Orcale Address\r\n     */\r\n    function getOracleAddress() public pure returns (address oracle) {\r\n        oracle = 0xe7664229833AE4Abf4E269b8F23a86B657E2338D;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getInstaRegistry() public pure returns (address addr) {\r\n        addr = 0x498b3BfaBE9F73db90D252bCD4Fa9548Cd0Fd981;\r\n    }\r\n\r\n    struct CompData {\r\n        uint tokenPrice;\r\n        uint exchangeRateCurrent;\r\n        uint balanceOfUser;\r\n        uint balanceOfWallet;\r\n        uint borrowBalanceCurrentUser;\r\n        uint borrowBalanceCurrentWallet;\r\n        uint supplyRatePerBlock;\r\n        uint borrowRatePerBlock;\r\n    }\r\n}\r\n\r\n\r\ncontract InstaCompRead is Helpers {\r\n    function getCompTokenData(address owner, address[] memory cAddress) public view returns (CompData[] memory) {\r\n        address userWallet = RegistryInterface(getInstaRegistry()).proxies(owner);\r\n        CompData[] memory tokensData = new CompData[](cAddress.length);\r\n        for (uint i = 0; i < cAddress.length; i++) {\r\n            CTokenInterface cToken = CTokenInterface(cAddress[i]);\r\n            tokensData[i] = CompData(\r\n                OrcaleComp(getOracleAddress()).getUnderlyingPrice(cAddress[i]),\r\n                cToken.exchangeRateStored(),\r\n                cToken.balanceOf(owner),\r\n                cToken.balanceOf(userWallet),\r\n                cToken.borrowBalanceStored(owner),\r\n                cToken.borrowBalanceStored(userWallet),\r\n                cToken.supplyRatePerBlock(),\r\n                cToken.borrowRatePerBlock()\r\n            );\r\n        }\r\n        return tokensData;\r\n    }\r\n\r\n    function getProxyAddress(address owner) public view returns (address proxy) {\r\n        proxy = RegistryInterface(getInstaRegistry()).proxies(owner);\r\n    }\r\n\r\n    function getTokenData(address owner, address cAddress) public view returns (\r\n        uint tokenPrice,\r\n        uint exRate,\r\n        uint balUser,\r\n        uint balWallet,\r\n        uint borrowBalUser,\r\n        uint borrowBalWallet,\r\n        uint supplyRate,\r\n        uint borrowRate\r\n    )\r\n    {\r\n        address userWallet = RegistryInterface(getInstaRegistry()).proxies(owner);\r\n        tokenPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cAddress);\r\n        CTokenInterface cToken = CTokenInterface(cAddress);\r\n        exRate = cToken.exchangeRateStored();\r\n        balUser = cToken.balanceOf(owner);\r\n        balWallet = cToken.balanceOf(userWallet);\r\n        borrowBalUser = cToken.borrowBalanceStored(owner);\r\n        borrowBalWallet = cToken.borrowBalanceStored(userWallet);\r\n        supplyRate = cToken.supplyRatePerBlock();\r\n        borrowRate = cToken.borrowRatePerBlock();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cAddress\",\"type\":\"address\"}],\"name\":\"getTokenData\",\"outputs\":[{\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"name\":\"exRate\",\"type\":\"uint256\"},{\"name\":\"balUser\",\"type\":\"uint256\"},{\"name\":\"balWallet\",\"type\":\"uint256\"},{\"name\":\"borrowBalUser\",\"type\":\"uint256\"},{\"name\":\"borrowBalWallet\",\"type\":\"uint256\"},{\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComptrollerAddress\",\"outputs\":[{\"name\":\"troller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInstaRegistry\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cAddress\",\"type\":\"address[]\"}],\"name\":\"getCompTokenData\",\"outputs\":[{\"components\":[{\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"name\":\"exchangeRateCurrent\",\"type\":\"uint256\"},{\"name\":\"balanceOfUser\",\"type\":\"uint256\"},{\"name\":\"balanceOfWallet\",\"type\":\"uint256\"},{\"name\":\"borrowBalanceCurrentUser\",\"type\":\"uint256\"},{\"name\":\"borrowBalanceCurrentWallet\",\"type\":\"uint256\"},{\"name\":\"supplyRatePerBlock\",\"type\":\"uint256\"},{\"name\":\"borrowRatePerBlock\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"name\":\"oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getProxyAddress\",\"outputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaCompRead","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://82d7555fd5cdf1094040c8da1ffdbef1a2e0c0e3391f1778ef800e01069edb95"}]}