{"status":"1","message":"OK","result":[{"SourceCode":"// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: browser/ContractorETH.sol\r\n\r\npragma solidity >0.6.1 <0.7.0;\r\n\r\n\r\n\r\n\r\ncontract Token is ERC20{}\r\n\r\n/**\r\n * \r\n * Master contract to handle all children team contracts\r\n * Author: Lastraum K.\r\n * Creation Date: 3.11.20\r\n * Version: 1.0\r\n * \r\n */\r\ncontract MetaZoneMasterPaymentsContract is Ownable{\r\n    using Roles for Roles.Role;\r\n    Roles.Role private _adminmnz;\r\n    \r\n    mapping(address => address) public allTeams;\r\n    mapping(address => address[]) public mateAllTeamAddresses;\r\n    \r\n    address[] public allTeamAddresses;\r\n    \r\n    uint256 platformFee = 0;\r\n    uint256 public teamCount = 0;\r\n    \r\n    event NewTeam(address teamAddress, address[] teammates);\r\n    \r\n    constructor(address[] memory adminmnz)public{\r\n        for (uint256 i = 0; i < adminmnz.length; ++i) {\r\n            _adminmnz.add(adminmnz[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Create a new child team with a team name, specific teammates, and their percentage splits\r\n     * \r\n     */\r\n    function newTeam(string memory name, address[] memory newmembers, uint256[] memory splits)public returns(address){\r\n        \r\n        Team team = new Team(name, newmembers, splits, platformFee);\r\n        allTeamAddresses.push(address(team));\r\n        allTeams[address(team)] = address(team);\r\n        \r\n        for(uint i = 0; i < newmembers.length; i++){\r\n            mateAllTeamAddresses[newmembers[i]].push(address(team));\r\n        }\r\n        teamCount = teamCount + 1;\r\n        \r\n        emit NewTeam(address(team), newmembers);\r\n        return address(team);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Return all child team addresses for a given address\r\n     * \r\n     */\r\n    function getAllTeamAddressesForMate(address mate)public view returns(address[] memory){\r\n        return mateAllTeamAddresses[mate];\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Withdraw supplied token parameter from all teams that correspond to the caller\r\n     * \r\n     */\r\n    function withdrawAllTokenForMate(string memory tokenSymbol)public{\r\n        require(mateAllTeamAddresses[msg.sender].length > 0, \"Sender is not a part of any teams\");\r\n        address[] memory mateTeams = mateAllTeamAddresses[msg.sender];\r\n        for(uint i = 0; i < mateTeams.length; i++){\r\n            Team team = Team(payable(mateTeams[i]));\r\n            if(team.getMateAmount(msg.sender,tokenSymbol) > 0){\r\n               team.specificMateWithdrawSpecificToken(msg.sender, tokenSymbol); \r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Return all team addresses stored in the master contract\r\n     * \r\n     */\r\n    function getAllTeamAddresses()public view returns(address[] memory teamAddresses){\r\n        return allTeamAddresses;\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Admin fail safe function to withdraw a supplied token parameter from a given team address to manually transfer to teammates\r\n     * \r\n     */\r\n    function salvageTokenFromTeam(address teamAddress, string memory tokenSymbol)public{\r\n        require(_adminmnz.has(msg.sender), \"Does not have admin role\");\r\n        require(allTeams[teamAddress] != address(0), \"Team address does not exist.\");\r\n        \r\n        Team team = Team(payable(allTeams[teamAddress]));\r\n        team.adminWithdrawalOfToken(msg.sender, tokenSymbol);\r\n    }\r\n    \r\n}\r\n\r\n    /**\r\n     *\r\n     * A specific team contract made up of mates and their percentage split of the transfers into the team contract\r\n     * \r\n     */\r\ncontract Team is Ownable{\r\nusing SafeMath for uint256;\r\n\r\n    struct AcceptedToken{\r\n        string symbol;\r\n        address tokenAddress;\r\n    }\r\n    \r\n    AcceptedToken[] public acceptedTokens;\r\n    \r\n    mapping (address => Teammate) mates;\r\n    mapping (uint => address) mateIndex;\r\n    address[] matesAddresses;\r\n    \r\n    struct Teammate{\r\n        address userID;\r\n        uint256 percentage;\r\n        uint256[] amounts;\r\n        bool accepted;\r\n    }\r\n    \r\n    bool allocating = false;\r\n    bool distributing = false;\r\n    \r\n    mapping (string => AcceptedToken) acceptedTokenBySymbol;\r\n    mapping (address => address) acceptedTokenAddresses;\r\n    mapping (string => uint) acceptedTokenGetIndexBySymbol;\r\n    \r\n    uint256 public memberCount;\r\n    \r\n    uint256[] public allocatedAmounts;\r\n    \r\n    string public nextPayout;\r\n    string public teamName;\r\n    \r\n    event AllocatedAmounts(uint256 amount, string tokenSymbol);\r\n    \r\n    //TODO\r\n    //add/remove mates\r\n    //voting and verification system\r\n    constructor(string memory name, address[] memory newmembers, uint256[] memory splits, uint256 platformFee) public {\r\n        \r\n        teamName = name;\r\n        \r\n        uint256 percentageCheck;\r\n        for(uint i =0; i < newmembers.length; i++)\r\n        {\r\n            mates[newmembers[i]].userID = newmembers[i];\r\n            if(newmembers[i] == msg.sender)\r\n            {\r\n                mates[newmembers[i]].accepted = true;\r\n            }\r\n            else\r\n            {\r\n                mates[newmembers[i]].accepted = false;\r\n            }\r\n            \r\n            ///add a check if the platform fee is zero to not add the platform contract\r\n            mates[newmembers[i]].percentage = splits[i];\r\n            mateIndex[i] = newmembers[i];\r\n            percentageCheck = percentageCheck + splits[i];\r\n            matesAddresses.push(newmembers[i]);\r\n            memberCount = memberCount + 1;\r\n        }\r\n        \r\n        mates[address(msg.sender)].userID = address(msg.sender);\r\n        mates[address(msg.sender)].accepted = false;\r\n        mates[address(msg.sender)].percentage = platformFee;\r\n        matesAddresses.push(msg.sender);\r\n        mateIndex[memberCount] = address(msg.sender);\r\n        \r\n        memberCount = memberCount + 1;\r\n        \r\n        require(percentageCheck <= 100, \"percentages are over 100%\");\r\n        \r\n        percentageCheck = percentageCheck + platformFee;\r\n        if(percentageCheck < 100)\r\n        {\r\n            mates[address(msg.sender)].percentage = mates[address(msg.sender)].percentage + (100 - percentageCheck);\r\n        }\r\n        \r\n        _addAcceptedToken(address(0),\"ETH\");\r\n        _addAcceptedToken(address(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942),\"MANA\");\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Returns an amount allocated of a supplied token parameter for a given mate address\r\n     * \r\n     */\r\n    function getMateAmount(address mate, string memory _tokenSymbol) public view returns (uint256){\r\n        return(mates[mate].amounts[acceptedTokenGetIndexBySymbol[_tokenSymbol]]);\r\n    }\r\n    \r\n    \r\n    /**\r\n     *\r\n     * Returns a mate array for the spplied address parameter\r\n     * \r\n     */\r\n    function getMateByAddress(address mate) public view returns (address,uint256,bool,uint256[] memory){\r\n        return(\r\n            mates[mate].userID,\r\n            mates[mate].percentage,\r\n            mates[mate].accepted,\r\n            mates[mate].amounts);\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Return the total team allocated amount for a supplied token parameter\r\n     * \r\n     */\r\n    function getAllocationForSymbol(string memory tokenSymbol) public view returns (uint256){\r\n        return allocatedAmounts[acceptedTokenGetIndexBySymbol[tokenSymbol]];\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Update the team contract to manage and allocate the newly supplied ERC20 token\r\n     * \r\n     */\r\n    function addAcceptedToken(address t, string memory s) public onlyOwner{\r\n        _addAcceptedToken(t,s);\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * internal function for the above token addition\r\n     * \r\n     */\r\n    function _addAcceptedToken(address t, string memory s) internal {\r\n        AcceptedToken memory token = AcceptedToken({\r\n            symbol: s,\r\n            tokenAddress: t\r\n        });\r\n        acceptedTokens.push(token);\r\n        acceptedTokenAddresses[t] = t;\r\n        acceptedTokenGetIndexBySymbol[s] = acceptedTokens.length-1;\r\n        allocatedAmounts.push(0);\r\n        acceptedTokenBySymbol[s] = token;\r\n        for(uint i = 0; i < memberCount; i++)\r\n        {\r\n            mates[mateIndex[i]].amounts.push(0);\r\n        }\r\n    }\r\n    \r\n    /** add a sync method if tokens get sent but the contract doesn't have them stored in the arrays\r\n     * might need to be manual to check which tokens were received and then add that token to array and\r\n     * loop through members to allocate the balance\r\n     */\r\n    \r\n    /**\r\n     *\r\n     * function to allocation a supplied token parameter to all mates of the team contract\r\n     * \r\n     */\r\n    function allocateTokenToMates(string memory tokenSymbol) public{\r\n        //require(!allocating);\r\n        //allocating = true;\r\n        \r\n        if((keccak256(abi.encodePacked(tokenSymbol)) == (keccak256(abi.encodePacked(\"ETH\")))))\r\n        {\r\n            _allocateETH();\r\n        }\r\n        else\r\n        {\r\n            //require(msg.sender == mates[msg.sender].userID, \"sender is not a part of this team\");\r\n            require((keccak256(abi.encodePacked(tokenSymbol)) == keccak256(abi.encodePacked(acceptedTokenBySymbol[tokenSymbol].symbol))));\r\n\r\n            bool assignable = false;\r\n            \r\n            Token token = Token(address(acceptedTokenBySymbol[tokenSymbol].tokenAddress));\r\n            \r\n            uint256 contractBalance = token.balanceOf(address(this));\r\n            uint acceptedTokenIndex = acceptedTokenGetIndexBySymbol[tokenSymbol];\r\n            uint256 contractAllocationAmount = allocatedAmounts[acceptedTokenIndex];\r\n            \r\n            if(contractAllocationAmount != contractBalance)\r\n            {\r\n                allocatedAmounts[acceptedTokenIndex] = contractBalance - contractAllocationAmount;\r\n                assignable = true;\r\n            }\r\n            \r\n            if(assignable)\r\n            {\r\n                for(uint256 i = 0; i < memberCount;i++){\r\n                uint256 allocatedAmount = allocatedAmounts[acceptedTokenIndex];\r\n                uint256 percentage = mates[matesAddresses[i]].percentage;\r\n                mates[matesAddresses[i]].amounts[acceptedTokenIndex] =  mates[matesAddresses[i]].amounts[acceptedTokenIndex]  + (allocatedAmount * percentage /100);\r\n                }   \r\n                allocatedAmounts[acceptedTokenIndex] = contractBalance;\r\n                \r\n                emit AllocatedAmounts(allocatedAmounts[acceptedTokenIndex], tokenSymbol);\r\n            }\r\n            \r\n        }    \r\n        //allocating = false;\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * allow this contract to receive ETH\r\n     * \r\n     */\r\n    receive() external payable{\r\n        _allocateETH();\r\n    }    \r\n    \r\n    /**\r\n     *\r\n     * internal function for the above ETH receipt\r\n     * \r\n     */\r\n    function _allocateETH() internal {\r\n        //require(!allocating);\r\n        //allocating = true;\r\n        bool assignETH = false;\r\n        \r\n        uint256 balance = address(this).balance;\r\n        \r\n        if(allocatedAmounts[0] != balance)\r\n        {\r\n            allocatedAmounts[0] = balance - allocatedAmounts[0];\r\n            assignETH = true;\r\n        }\r\n        \r\n        if(assignETH)\r\n        {\r\n            for(uint256 i = 0; i < memberCount;i++){\r\n            uint256 percentage = mates[matesAddresses[i]].percentage;\r\n            uint256 mateCurrentAmount = mates[matesAddresses[i]].amounts[0];\r\n            mates[matesAddresses[i]].amounts[0] = mateCurrentAmount + (allocatedAmounts[0] * percentage /100);\r\n            }   \r\n        }        \r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Return the total balance of a supplied token parameter for the entire team contract\r\n     * \r\n     */\r\n    function getBalanceOfTokenBySymbol(string memory symbol) public view returns (uint256) {\r\n        require((keccak256(abi.encodePacked(symbol)) == keccak256(abi.encodePacked(acceptedTokenBySymbol[symbol].symbol))), \"token is not accepted for this contract\");\r\n        if((keccak256(abi.encodePacked(symbol)) == (keccak256(abi.encodePacked(\"ETH\")))))\r\n        {\r\n            return address(this).balance;\r\n        }\r\n        else\r\n        {\r\n            return Token(address(acceptedTokenBySymbol[symbol].tokenAddress)).balanceOf(address(this));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Function to extract all eth from the team contract and set each mate's allocation to 0. This is used by admins for manual fallback payments\r\n     * \r\n     */\r\n    function adminWithdrawalOfToken(address admin, string memory tokenSymbol) public onlyOwner {\r\n        if((keccak256(abi.encodePacked(tokenSymbol)) == (keccak256(abi.encodePacked(\"ETH\")))))\r\n        {\r\n            _adminWithdrawalETH(admin);\r\n        }\r\n        else\r\n        {\r\n            require((keccak256(abi.encodePacked(tokenSymbol)) == keccak256(abi.encodePacked(acceptedTokenBySymbol[tokenSymbol].symbol))));\r\n\r\n            Token token = Token(address(acceptedTokenBySymbol[tokenSymbol].tokenAddress));\r\n            \r\n            allocatedAmounts[acceptedTokenGetIndexBySymbol[tokenSymbol]] = 0;\r\n            for(uint i = 0; i < memberCount; i++)\r\n            {\r\n                mates[mateIndex[i]].amounts[acceptedTokenGetIndexBySymbol[tokenSymbol]] = 0;\r\n            }\r\n            \r\n            uint256 disbursement = token.balanceOf(address(this));\r\n            token.transfer(admin,disbursement);\r\n        }  \r\n    }\r\n    \r\n    /**\r\n     *\r\n     * internal function for the above admin withdrawal of ETH\r\n     * \r\n     */\r\n    function _adminWithdrawalETH(address admin) internal returns(address) {\r\n        uint256 currentBalance = (address(this).balance);\r\n        address payable paymember = payable(admin);\r\n        paymember.transfer(currentBalance);\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Function called from the master contract to distrube and transfer a supplied token parameter to all mates for this team contract\r\n     * \r\n     */\r\n    function distributeSpecificToken(string memory tokenSymbol) public onlyOwner{\r\n        for(uint i = 0; i < memberCount; i++)\r\n        {\r\n            //check if they have accepted or not\r\n            _distributeSpecificToken(mateIndex[i], tokenSymbol);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * internal function to distribute and transfer of all supplied token parameter\r\n     * \r\n     */\r\n    function _distributeSpecificToken(address mate, string memory tokenSymbol) internal{\r\n        //require(!distributing);\r\n        //require(!allocating);\r\n        //distributing = true;\r\n        if((keccak256(abi.encodePacked(tokenSymbol)) == (keccak256(abi.encodePacked(\"ETH\")))))\r\n        {\r\n            _distributeETH(mate);\r\n        }\r\n        else\r\n        {\r\n            require((keccak256(abi.encodePacked(tokenSymbol)) == keccak256(abi.encodePacked(acceptedTokenBySymbol[tokenSymbol].symbol))));\r\n\r\n            uint256 disbursement = mates[mate].amounts[acceptedTokenGetIndexBySymbol[tokenSymbol]];\r\n            mates[mate].amounts[acceptedTokenGetIndexBySymbol[tokenSymbol]] = 0;    \r\n            \r\n            Token token = Token(address(acceptedTokenBySymbol[tokenSymbol].tokenAddress));\r\n            token.transfer(mate,disbursement);\r\n            allocatedAmounts[acceptedTokenGetIndexBySymbol[tokenSymbol]] = allocatedAmounts[acceptedTokenGetIndexBySymbol[tokenSymbol]] - disbursement;\r\n        }       \r\n        //distributing = false;\r\n    }\r\n    \r\n    /**\r\n     *\r\n     * internal function to distribute and transfer of all eth to the supplied mate address\r\n     * \r\n     */\r\n    function _distributeETH(address mate)internal{\r\n        address payable paymember = payable(mate);\r\n        paymember.transfer(mates[mate].amounts[0]);\r\n        mates[mate].amounts[0] = 0;            \r\n    }\r\n    \r\n    /**\r\n     *\r\n     * Function called by master contract to withdraw a supplied token from the team contract to a supplied mate address\r\n     * \r\n     */\r\n    function specificMateWithdrawSpecificToken(address mate, string memory ttokenSymbol)public onlyOwner{\r\n        ///require the sender to be the owner of this contract aka the global contract\r\n        _distributeSpecificToken(mate, ttokenSymbol);\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adminmnz\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"teammates\",\"type\":\"address[]\"}],\"name\":\"NewTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTeamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allTeams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTeamAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"teamAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mate\",\"type\":\"address\"}],\"name\":\"getAllTeamAddressesForMate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mateAllTeamAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"newmembers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"splits\",\"type\":\"uint256[]\"}],\"name\":\"newTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"salvageTokenFromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"withdrawAllTokenForMate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaZoneMasterPaymentsContract","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000060652cc133c8e7e703059a046b19947d43939f7c000000000000000000000000c0c8ccd29f5b8bd38812e331947ee40ccf7695bc000000000000000000000000b2a505fed3932046b446ea6c5d00de355055291e000000000000000000000000aabe0ecfaf9e028d63cf7ea7e772cf52d662691a000000000000000000000000d2c2b103b500d35b45c79f106ceaf11bc9e8afdb","Library":"","LicenseType":"None","SwarmSource":"ipfs://27895e39dcf439cdc226fe20fca3dd11f49ddde38a6a3c76f081d4a8efeb1fb0"}]}