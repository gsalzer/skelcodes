{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IGST2.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface IGST2 {\r\n\r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function mint(uint256 value) external;\r\n}\r\n\r\n// File: contracts/TokenTransferProxy.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Allows owner of the contract to transfer tokens on behalf of user.\r\n* User will need to approve this contract to spend tokens on his/her behalf\r\n* on Paraswap platform\r\n*/\r\ncontract TokenTransferProxy is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer tokens on user's behalf\r\n    * @dev Swapper contract will be the owner of this contract\r\n    * @param token Address of the token\r\n    * @param from Address from which tokens will be transferred\r\n    * @param to Receipent address of the tokens\r\n    * @param amount Amount of tokens to transfer\r\n    */\r\n    function transferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20(token).safeTransferFrom(from, to, amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IWETH.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/AugustusSwapper.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev The contract will allow swap of one token for another across multiple exchanges in one atomic transaction\r\n* Kyber, Uniswap and Bancor are supported in phase-01\r\n*/\r\ncontract AugustusSwapper is ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    //Ether token address used when to or from in swap is Ether\r\n    address constant private ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    //External call is allowed to whitelisted addresses only.\r\n    //Contract address of all supported exchanges must be put in whitelist\r\n    mapping(address => bool) private _whitelisteds;\r\n\r\n    //for 2% enter 200. For 0.2% enter 20. Supports upto 2 decimal places\r\n    uint256 private _fee;\r\n\r\n    address payable private _feeWallet;\r\n\r\n    IGST2 private _gasToken;\r\n\r\n    bool private _paused;\r\n\r\n    TokenTransferProxy private _tokenTransferProxy;\r\n\r\n    event WhitelistAdded(address indexed account);\r\n    event WhitelistRemoved(address indexed account);\r\n    event Swapped(\r\n        address indexed user,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        string referrer\r\n    );\r\n\r\n    event Payed(\r\n        address indexed to,\r\n        address indexed srcToken,\r\n        address indexed destToken,\r\n        uint256 srcAmount,\r\n        uint256 receivedAmount,\r\n        string referrer\r\n    );\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    modifier onlySelf() {\r\n        require(\r\n            msg.sender == address(this),\r\n            \"AugustusSwapper: Invalid access!!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * It will whitelist the contarct itself\r\n    */\r\n    constructor(address payable feeWallet, address gasToken) public {\r\n        require(feeWallet != address(0), \"Invalid address!!\");\r\n        require(gasToken != address(0), \"Invalid gas token!!\");\r\n\r\n        _feeWallet = feeWallet;\r\n        _gasToken = IGST2(gasToken);\r\n\r\n        _whitelisteds[address(this)] = true;\r\n        _tokenTransferProxy = new TokenTransferProxy();\r\n\r\n        emit WhitelistAdded(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback method to allow exchanges to transfer back ethers for a particular swap\r\n    * It will only allow contracts to send funds to it\r\n    */\r\n    function() external payable whenNotPaused {\r\n        address account = msg.sender;\r\n        require(\r\n            account.isContract(),\r\n            \"Sender is not a contract\"\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Returns address of TokenTransferProxy Contract\r\n    */\r\n    function getTokenTransferProxy() external view returns (address) {\r\n        return address(_tokenTransferProxy);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner to change fee wallet\r\n    * @param feeWallet Address of the new fee wallet\r\n    */\r\n    function changeFeeWallet(address payable feeWallet) external onlyOwner {\r\n        _feeWallet = feeWallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the fee wallet address\r\n    */\r\n    function getFeeWallet() external view returns (address) {\r\n        return _feeWallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner to change fee\r\n    * @param fee New fee percentage\r\n    */\r\n    function changeFee(uint256 fee) external onlyOwner {\r\n        _fee = fee;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the current fee percentage\r\n    */\r\n    function getFee() external view returns (uint256) {\r\n        return _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to whitelist an address\r\n    * @param account Address of the account to be whitelisted\r\n    */\r\n    function addWhitelisted(address account) external onlyOwner {\r\n        _whitelisteds[account] = true;\r\n        emit WhitelistAdded(account);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to remove address from a whitelist\r\n    * @param account Address of the account the be removed\r\n    */\r\n    function removeWhitelistes(address account) external onlyOwner {\r\n        _whitelisteds[account] = false;\r\n        emit WhitelistRemoved(account);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows onwers of the contract to whitelist addresses in bulk\r\n    * @param accounts An array of addresses to be whitelisted\r\n    */\r\n    function addWhitelistedBulk(\r\n        address[] calldata accounts\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _whitelisteds[accounts[i]] = true;\r\n            emit WhitelistAdded(accounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows this contract to make approve call for a token\r\n    * This method is expected to be called using externalCall method.\r\n    * @param token The address of the token\r\n    * @param to The address of the spender\r\n    * @param amount The amount to be approved\r\n    */\r\n    function approve(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n    external\r\n    onlySelf\r\n    {\r\n        require(amount > 0, \"Amount should be greater than 0!!\");\r\n        //1. Check for valid whitelisted address\r\n        require(\r\n            isWhitelisted(to),\r\n            \"AugustusSwapper: Not a whitelisted address!!\"\r\n        );\r\n\r\n        //2. Check for ETH address\r\n        if (token != ETH_ADDRESS) {\r\n            //3. Approve\r\n            IERC20 _token = IERC20(token);\r\n            _token.safeApprove(to, amount);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to transfer tokens any tokens which are assigned to the contract\r\n    * This method is for saftey if by any chance tokens or ETHs are assigned to the contract by mistake\r\n    * @dev token Address of the token to be transferred\r\n    * @dev destination Recepient of the token\r\n    * @dev amount Amount of tokens to be transferred\r\n    */\r\n    function ownerTransferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    external\r\n    onlyOwner\r\n    {\r\n        transferTokens(token, destination, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows owner of the contract to mint more gas tokens\r\n    * @param amount Amount of gas tokens to mint\r\n    */\r\n    function mintGasTokens(uint256 amount) external onlyOwner {\r\n        _gasToken.mint(amount);\r\n    }\r\n\r\n    /**\r\n   * @dev This function sends the WETH returned during the exchange to the user.\r\n   * @param token: The WETH Address\r\n   */\r\n    function withdrawAllWETH(IWETH token) external {\r\n        uint256 amount = token.balanceOf(address(this));\r\n        token.withdraw(amount);\r\n    }\r\n\r\n    function pay(\r\n        address payable receiver,\r\n        address sourceToken,\r\n        address destinationToken,\r\n        uint256 sourceAmount,\r\n        uint256 destinationAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        string memory referrer,\r\n        uint256 mintPrice\r\n    )\r\n    public\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant\r\n    {\r\n        uint receivedAmount = performSwap(\r\n            sourceToken,\r\n            destinationToken,\r\n            sourceAmount,\r\n            destinationAmount,\r\n            callees,\r\n            exchangeData,\r\n            startIndexes,\r\n            values,\r\n            mintPrice\r\n        );\r\n\r\n        address payable payer = msg.sender;\r\n\r\n        transferTokens(destinationToken, receiver, destinationAmount);\r\n\r\n        //Transfers the rest of destinationToken, if any, to the sender\r\n        if (receivedAmount > destinationAmount) {\r\n            uint rest = receivedAmount.sub(destinationAmount);\r\n\r\n            transferTokens(destinationToken, payer, rest);\r\n        }\r\n\r\n        emit Payed(\r\n            receiver,\r\n            sourceToken,\r\n            destinationToken,\r\n            sourceAmount,\r\n            receivedAmount,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    /**\r\n   * @dev The function which performs the actual swap.\r\n   * The call data to the actual exchanges must be built offchain\r\n   * and then sent to this method. It will be call those external exchanges using\r\n   * data passed through externalCall function\r\n   * It is a nonreentrant function\r\n   * @param sourceToken Address of the source token\r\n   * @param destinationToken Address of the destination token\r\n   * @param sourceAmount Amount of source tokens to be swapped\r\n   * @param minDestinationAmount Minimu destination token amount expected out of this swap\r\n   * @param callees Address of the external callee. This will also contain address of exchanges\r\n   * where actual swap will happen\r\n   * @param exchangeData Concatenated data to be sent in external call to the above callees\r\n   * @param startIndexes start index of calldata in above data structure for each callee\r\n   * @param values Amount of ethers to be sent in external call to each callee\r\n   * @param mintPrice Price of gas at the time of minting of gas tokens, if any. In wei\r\n   */\r\n    function swap(\r\n        address sourceToken,\r\n        address destinationToken,\r\n        uint256 sourceAmount,\r\n        uint256 minDestinationAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        string memory referrer,\r\n        uint256 mintPrice\r\n    )\r\n    public\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant\r\n    {\r\n        uint receivedAmount = performSwap(\r\n            sourceToken,\r\n            destinationToken,\r\n            sourceAmount,\r\n            minDestinationAmount,\r\n            callees,\r\n            exchangeData,\r\n            startIndexes,\r\n            values,\r\n            mintPrice\r\n        );\r\n\r\n        transferTokens(destinationToken, msg.sender, receivedAmount);\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            sourceToken,\r\n            destinationToken,\r\n            sourceAmount,\r\n            receivedAmount,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function performSwap(\r\n        address sourceToken,\r\n        address destinationToken,\r\n        uint256 sourceAmount,\r\n        uint256 minDestinationAmount,\r\n        address[] memory callees,\r\n        bytes memory exchangeData,\r\n        uint256[] memory startIndexes,\r\n        uint256[] memory values,\r\n        uint256 mintPrice\r\n    )\r\n    private\r\n    returns (uint)\r\n    {\r\n        //Basic sanity check\r\n        require(minDestinationAmount > 0, \"minDestinationAmount is too low\");\r\n        require(callees.length > 0, \"No callee provided!!\");\r\n        require(exchangeData.length > 0, \"No exchangeData provided!!\");\r\n        require(\r\n            callees.length + 1 == startIndexes.length,\r\n            \"Start indexes must be 1 greater then number of callees!!\"\r\n        );\r\n        require(sourceToken != address(0), \"Invalid source token!!\");\r\n        require(destinationToken != address(0), \"Inavlid destination address\");\r\n\r\n        uint initialGas = gasleft();\r\n\r\n        //If source token is not ETH than transfer required amount of tokens\r\n        //from sender to this contract\r\n        if (sourceToken != ETH_ADDRESS) {\r\n            _tokenTransferProxy.transferFrom(\r\n                sourceToken,\r\n                msg.sender,\r\n                address(this),\r\n                sourceAmount\r\n            );\r\n        }\r\n\r\n        for (uint256 i = 0; i < callees.length; i++) {\r\n\r\n            require(isWhitelisted(callees[i]), \"Callee is not whitelisted!!\");\r\n            require(\r\n                callees[i] != address(_tokenTransferProxy),\r\n                \"Can not call TokenTransferProxy Contract !!\"\r\n            );\r\n\r\n            bool result = externalCall(\r\n                callees[i], //destination\r\n                values[i], //value to send\r\n                startIndexes[i], // start index of call data\r\n                startIndexes[i + 1].sub(startIndexes[i]), // length of calldata\r\n                exchangeData// total calldata\r\n            );\r\n            require(result, \"External call failed!!\");\r\n        }\r\n\r\n        uint256 receivedAmount = tokenBalance(destinationToken, address(this));\r\n\r\n        require(\r\n            receivedAmount >= minDestinationAmount,\r\n            \"Received amount of tokens are less then expected!!\"\r\n        );\r\n\r\n        require(\r\n            tokenBalance(sourceToken, address(this)) == 0,\r\n            \"The transaction wasn't entirely executed\"\r\n        );\r\n\r\n        uint256 fee = calculateFee(\r\n            sourceToken,\r\n            receivedAmount,\r\n            callees.length\r\n        );\r\n\r\n        if (fee > 0) {\r\n            receivedAmount = receivedAmount.sub(fee);\r\n            transferTokens(destinationToken, _feeWallet, fee);\r\n        }\r\n\r\n        if (mintPrice > 0) {\r\n            refundGas(initialGas, mintPrice);\r\n        }\r\n\r\n        return receivedAmount;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether given addresses is whitelisted or not\r\n    * @param account The account to be checked\r\n    * @return bool\r\n    */\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds[account];\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to refund gas using gas tokens\r\n    */\r\n    function refundGas(uint256 initialGas, uint256 mintPrice) private {\r\n\r\n        uint256 mintBase = 32254;\r\n        uint256 mintToken = 36543;\r\n        uint256 freeBase = 14154;\r\n        uint256 freeToken = 6870;\r\n        uint256 reimburse = 24000;\r\n\r\n        uint256 tokens = initialGas.sub(\r\n            gasleft()).add(freeBase).div(reimburse.mul(2).sub(freeToken)\r\n        );\r\n\r\n        uint256 mintCost = mintBase.add(tokens.mul(mintToken));\r\n        uint256 freeCost = freeBase.add(tokens.mul(freeToken));\r\n        uint256 maxreimburse = tokens.mul(reimburse);\r\n\r\n        uint256 efficiency = maxreimburse.mul(tx.gasprice).mul(100).div(\r\n            mintCost.mul(mintPrice).add(freeCost.mul(tx.gasprice))\r\n        );\r\n\r\n        if (efficiency > 100) {\r\n            freeGasTokens(tokens);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to free gas tokens\r\n    */\r\n    function freeGasTokens(uint256 tokens) private {\r\n\r\n        uint256 tokensToFree = tokens;\r\n        uint256 safeNumTokens = 0;\r\n        uint256 gas = gasleft();\r\n\r\n        if (gas >= 27710) {\r\n            safeNumTokens = gas.sub(27710).div(1148 + 5722 + 150);\r\n        }\r\n\r\n        if (tokensToFree > safeNumTokens) {\r\n            tokensToFree = safeNumTokens;\r\n        }\r\n\r\n        uint256 gasTokenBal = _gasToken.balanceOf(address(this));\r\n\r\n        if (tokensToFree > 0 && gasTokenBal >= tokensToFree) {\r\n            _gasToken.freeUpTo(tokensToFree);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Helper function to transfer tokens to the destination\r\n    * @dev token Address of the token to be transferred\r\n    * @dev destination Recepient of the token\r\n    * @dev amount Amount of tokens to be transferred\r\n    */\r\n    function transferTokens(\r\n        address token,\r\n        address payable destination,\r\n        uint256 amount\r\n    )\r\n    private\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            destination.transfer(amount);\r\n        }\r\n        else {\r\n            IERC20(token).safeTransfer(destination, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to calculate fees\r\n    * @param receivedAmount Received amount of tokens\r\n    */\r\n    function calculateFee(\r\n        address sourceToken,\r\n        uint256 receivedAmount,\r\n        uint256 calleesLength\r\n    )\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 fee = 0;\r\n        if (sourceToken == ETH_ADDRESS && calleesLength == 1) {\r\n            return 0;\r\n        }\r\n\r\n        else if (sourceToken != ETH_ADDRESS && calleesLength == 2) {\r\n            return 0;\r\n        }\r\n\r\n        if (_fee > 0) {\r\n            fee = receivedAmount.mul(_fee).div(10000);\r\n        }\r\n        return fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Source take from GNOSIS MultiSigWallet\r\n    * @dev https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n    */\r\n    function externalCall(\r\n        address destination,\r\n        uint256 value,\r\n        uint256 dataOffset,\r\n        uint dataLength,\r\n        bytes memory data\r\n    )\r\n    private\r\n    returns (bool)\r\n    {\r\n        bool result = false;\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n            sub(gas, 34710), // 34710 is the value that solidity is currently emitting\r\n            // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n            // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n            destination,\r\n            value,\r\n            add(d, dataOffset),\r\n            dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n            x,\r\n            0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Helper function to returns balance of a user for a token\r\n    * @param token Tokend address\r\n    * @param account Account whose balances has to be returned\r\n    */\r\n    function tokenBalance(\r\n        address token,\r\n        address account\r\n    )\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (token == ETH_ADDRESS) {\r\n            return account.balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(account);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"changeFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelistedBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintGasTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenTransferProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerTransferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"sourceToken\",\"type\":\"address\"},{\"name\":\"destinationToken\",\"type\":\"address\"},{\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"name\":\"destinationAmount\",\"type\":\"uint256\"},{\"name\":\"callees\",\"type\":\"address[]\"},{\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"referrer\",\"type\":\"string\"},{\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAllWETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sourceToken\",\"type\":\"address\"},{\"name\":\"destinationToken\",\"type\":\"address\"},{\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"name\":\"minDestinationAmount\",\"type\":\"uint256\"},{\"name\":\"callees\",\"type\":\"address[]\"},{\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"name\":\"startIndexes\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"referrer\",\"type\":\"string\"},{\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"feeWallet\",\"type\":\"address\"},{\"name\":\"gasToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AugustusSwapper","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000005182E579FDfCf69E4390c3411D8FeA1fb6467cf0000000000000000000000000000000000b3f879cb30fe243b4dfee438691c04","Library":"","LicenseType":"BSD-3-Clause","SwarmSource":"bzzr://a414e7ebbd4e22e20905576e075c51708f507cc3b4782f370cdcb29302473dd4"}]}