{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n/// @author 0age\r\ncontract EthToDaiTradeHelperV2 {\r\n    IERC20 internal constant _DAI = IERC20(\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    );\r\n    \r\n    function trade(\r\n        address payable target, bytes calldata data\r\n    ) external payable returns (uint256 daiReceived) {\r\n        // Call into the provided target, supplying ETH and data.\r\n        (bool ok,) = target.call.value(address(this).balance)(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total Dai balance of this contract.\r\n        daiReceived = _DAI.balanceOf(address(this));\r\n        \r\n        // Transfer the Dai to the caller and revert on failure.\r\n        ok = (_DAI.transfer(msg.sender, daiReceived));\r\n        require(ok, \"Dai transfer out failed.\");\r\n    }\r\n    \r\n    function _revertOnFailure(bool ok) internal pure {\r\n        if (!ok) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiReceived\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"EthToDaiTradeHelperV2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://e42bbbdaf6c931cb5d7982816559bde993bfc58538a1ea8fb5eab1b65f03d9c6"}]}