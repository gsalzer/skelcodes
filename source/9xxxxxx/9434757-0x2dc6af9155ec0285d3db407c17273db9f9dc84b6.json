{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.8;\r\n\r\ninterface ERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract ERC20HTLCLite {\r\n\tstruct Swap {\r\n\t\tuint256 outAmount; //The ERC20 Pra amount to swap out\r\n\t\tuint256 expireHeight; //The height of blocks to wait before the asset can be returned to sender\r\n\t\tbytes32 randomNumberHash;\r\n\t\tuint64 timestamp;\r\n\t\taddress senderAddr; //The swap creator address\r\n\t\tuint256 senderChainType;\r\n\t\tuint256 receiverChainType;\r\n\t\taddress recipientAddr; //The ethereum address to lock swapped assets, counter-party of senderAddr\r\n\t\tstring receiverAddr; //The PRA address (DID) to swap out\r\n\t}\r\n\r\n\tenum States {INVALID, OPEN, COMPLETED, EXPIRED}\r\n\r\n\tenum ChainTypes {ETH, PRA}\r\n\r\n\t// Events\r\n\tevent HTLC(\r\n\t\taddress indexed _msgSender,\r\n\t\taddress indexed _recipientAddr,\r\n\t\tbytes32 indexed _swapID,\r\n\t\tbytes32 _randomNumberHash,\r\n\t\tuint64 _timestamp,\r\n\t\tuint256 _expireHeight,\r\n\t\tuint256 _outAmount,\r\n\t\tuint256 _praAmount,\r\n\t\tstring _receiverAddr\r\n\t);\r\n\tevent Claimed(\r\n\t\taddress indexed _msgSender,\r\n\t\taddress indexed _recipientAddr,\r\n\t\tbytes32 indexed _swapID,\r\n\t\tbytes32 _randomNumber,\r\n\t\tstring _receiverAddr\r\n\t);\r\n\tevent Refunded(\r\n\t\taddress indexed _msgSender,\r\n\t\taddress indexed _recipientAddr,\r\n\t\tbytes32 indexed _swapID,\r\n\t\tbytes32 _randomNumberHash,\r\n\t\tstring _receiverAddr\r\n\t);\r\n\r\n\t// Storage, key: swapID\r\n\tmapping(bytes32 => Swap) private swaps;\r\n\tmapping(bytes32 => States) private swapStates;\r\n\r\n\taddress public praContractAddr;\r\n\taddress public praRecipientAddr;\r\n\taddress public owner;\r\n\taddress public admin;\r\n\r\n\t// whether the contract is paused\r\n    bool public paused = false;\r\n\r\n\t/// @param _praContract The PRA contract address\r\n\tconstructor(address _praContract) public {\r\n\t\tpraContractAddr = _praContract;\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/// @notice Throws if the msg.sender is not admin or owner.\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == admin || msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @notice Modifier to allow actions only when the contract IS NOT paused\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @notice Modifier to allow actions only when the contract IS paused\r\n\tmodifier whenPaused {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @notice to pause the contract.\r\n\tfunction pause() public onlyAdmin whenNotPaused returns (bool) {\r\n\t\tpaused = true;\r\n\t\treturn paused;\r\n\t}\r\n\r\n\t/// @notice to unpause the contract.\r\n\tfunction unpause() public onlyAdmin whenPaused returns (bool) {\r\n\t\tpaused = false;\r\n\t\treturn paused;\r\n\t}\r\n\r\n\t/// @notice setAdmin set new admin address.\r\n\t///\r\n\t/// @param _new_admin The new admin address.\r\n\tfunction setAdmin(address _new_admin) public onlyAdmin {\r\n\t\trequire(_new_admin != address(0));\r\n\t\tadmin = _new_admin;\r\n\t}\r\n\r\n\t/// @notice setPraAddress set new PRA-ERC20 contract address.\r\n\t///\r\n\t/// @param _praContract The new PRA-ERC20 contract address.\r\n\tfunction setPraAddress(address _praContract) public onlyAdmin {\r\n\t\tpraContractAddr = _praContract;\r\n\t}\r\n\r\n\t/// @notice setRecipientAddr set new PRA-ERC20 recipient address.\r\n\t///\r\n\t/// @param _recipientAddr The new PRA-ERC20 recipient address.\r\n\tfunction setRecipientAddr(address _recipientAddr) public onlyAdmin {\r\n\t\tpraRecipientAddr = _recipientAddr;\r\n\t}\r\n\r\n\t// swap may only be built through the htlc function\r\n\tfunction() external payable { revert();\t}\r\n\r\n\t//TODO: init set recipientAddr\r\n\r\n\t/// @notice htlt locks asset to contract address and create an atomic swap.\r\n\t///\r\n\t/// @param _randomNumberHash The hash of the random number and timestamp\r\n\t/// @param _timestamp Counted by second\r\n\t/// @param _heightSpan The number of blocks to wait before the asset can be returned to sender\r\n\t/// @param _outAmount PRA ERC20 asset to swap out, precision is 18\r\n\t/// @param _praAmount PRA asset to swap in, precision is 18\r\n\t/// @param _receiverAddr PRA DID to swap in.\r\n\tfunction htlc(\r\n\t\tbytes32 _randomNumberHash,\r\n\t\tuint64 _timestamp,\r\n\t\tuint256 _heightSpan,\r\n\t\tuint256 _outAmount,\r\n\t\tuint256 _praAmount,\r\n\t\tstring memory _receiverAddr\r\n\t) public whenNotPaused returns (bool) {\r\n\t\tbytes32 swapID = calSwapID(_randomNumberHash, _receiverAddr);\r\n\t\trequire(swapStates[swapID] == States.INVALID, \"swap is opened previously\");\r\n\t\t// Assume average eth block time interval is 15 second\r\n\t\t// The heightSpan period should be more than 15 minutes\r\n\t\trequire(_heightSpan >= 60 && _heightSpan <= 60480, \"_heightSpan should be in [60, 60480]\");\r\n\t\trequire(_outAmount >= 100000000000000000, \"_outAmount must be more than 0.1\");\r\n\t\trequire(\r\n\t\t\t_timestamp > now - 1800 && _timestamp < now + 1800,\r\n\t\t\t\"Timestamp must be 30 minutes between current time\"\r\n\t\t);\r\n\t\trequire(_outAmount == _praAmount, \"_outAmount must be equal _praAmount\");\r\n\r\n\t\t// Store the details of the swap.\r\n\t\tSwap memory swap = Swap({\r\n\t\t\toutAmount: _outAmount,\r\n\t\t\texpireHeight: _heightSpan + block.number,\r\n\t\t\trandomNumberHash: _randomNumberHash,\r\n\t\t\ttimestamp: _timestamp,\r\n\t\t\tsenderAddr: msg.sender,\r\n\t\t\tsenderChainType: uint256(ChainTypes.ETH),\r\n\t\t\treceiverAddr: _receiverAddr,\r\n\t\t\treceiverChainType: uint256(ChainTypes.PRA),\r\n\t\t\trecipientAddr: praRecipientAddr\r\n\t\t});\r\n\r\n\t\t//step 1: Init\r\n\t\tswaps[swapID] = swap;\r\n\t\tswapStates[swapID] = States.OPEN;\r\n\r\n\t\t// Transfer pra token to the swap contract\r\n\t\trequire(\r\n\t\t\tERC20(praContractAddr).transferFrom(msg.sender, address(this), _outAmount),\r\n\t\t\t\"failed to transfer client asset to swap contract\"\r\n\t\t);\r\n\r\n\t\t// Emit initialization event\r\n\t\temit HTLC(\r\n\t\t\tmsg.sender,\r\n\t\t\tpraRecipientAddr,\r\n\t\t\tswapID,\r\n\t\t\t_randomNumberHash,\r\n\t\t\t_timestamp,\r\n\t\t\tswap.expireHeight,\r\n\t\t\t_outAmount,\r\n\t\t\t_praAmount,\r\n\t\t\t_receiverAddr\r\n\t\t);\r\n\r\n\t\t//step 2: Claim\r\n\t\t// Complete the swap.\r\n\t\tswapStates[swapID] = States.COMPLETED;\r\n\r\n\t\t// Pay erc20 token to recipient\r\n\t\trequire(\r\n\t\t\tERC20(praContractAddr).transfer(praRecipientAddr, _outAmount),\r\n\t\t\t\"Failed to transfer locked asset to recipient\"\r\n\t\t);\r\n\r\n\t\t// delete closed swap\r\n\t\tdelete swaps[swapID];\r\n\r\n\t\t// Emit completion event\r\n\t\temit Claimed(msg.sender, praRecipientAddr, swapID, _randomNumberHash, _receiverAddr);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/// @notice query an atomic swap by randomNumberHash\r\n\t///\r\n\t/// @param _swapID The hash of randomNumberHash, swap creator and swap recipient\r\n\tfunction queryOpenSwap(bytes32 _swapID)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tbytes32 _randomNumberHash,\r\n\t\t\tuint64 _timestamp,\r\n\t\t\tuint256 _expireHeight,\r\n\t\t\tuint256 _outAmount,\r\n\t\t\taddress _sender,\r\n\t\t\taddress _recipient\r\n\t\t)\r\n\t{\r\n\t\tSwap memory swap = swaps[_swapID];\r\n\t\treturn (\r\n\t\t\tswap.randomNumberHash,\r\n\t\t\tswap.timestamp,\r\n\t\t\tswap.expireHeight,\r\n\t\t\tswap.outAmount,\r\n\t\t\tswap.senderAddr,\r\n\t\t\tswap.recipientAddr\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice Checks whether a swap with specified swapID exist\r\n\t///\r\n\t/// @param _swapID The hash of randomNumberHash, swap creator and swap recipient\r\n\tfunction isSwapExist(bytes32 _swapID) external view returns (bool) {\r\n\t\treturn (swapStates[_swapID] != States.INVALID);\r\n\t}\r\n\r\n\t/// @notice Calculate the swapID from randomNumberHash and swapCreator\r\n\t///\r\n\t/// @param _randomNumberHash The hash of random number and timestamp.\r\n\t/// @param receiverAddr The PRA address (DID) to swap out\r\n\tfunction calSwapID(bytes32 _randomNumberHash, string memory receiverAddr) public pure returns (bytes32) {\r\n\t\treturn sha256(abi.encodePacked(_randomNumberHash, receiverAddr));\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"praContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"praRecipientAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"isSwapExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipientAddr\",\"type\":\"address\"}],\"name\":\"setRecipientAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_swapID\",\"type\":\"bytes32\"}],\"name\":\"queryOpenSwap\",\"outputs\":[{\"name\":\"_randomNumberHash\",\"type\":\"bytes32\"},{\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"name\":\"_expireHeight\",\"type\":\"uint256\"},{\"name\":\"_outAmount\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_praContract\",\"type\":\"address\"}],\"name\":\"setPraAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_randomNumberHash\",\"type\":\"bytes32\"},{\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"name\":\"_heightSpan\",\"type\":\"uint256\"},{\"name\":\"_outAmount\",\"type\":\"uint256\"},{\"name\":\"_praAmount\",\"type\":\"uint256\"},{\"name\":\"_receiverAddr\",\"type\":\"string\"}],\"name\":\"htlc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_randomNumberHash\",\"type\":\"bytes32\"},{\"name\":\"receiverAddr\",\"type\":\"string\"}],\"name\":\"calSwapID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_praContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipientAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_randomNumberHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_expireHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_outAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_praAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_receiverAddr\",\"type\":\"string\"}],\"name\":\"HTLC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipientAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_randomNumber\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_receiverAddr\",\"type\":\"string\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_recipientAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_randomNumberHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_receiverAddr\",\"type\":\"string\"}],\"name\":\"Refunded\",\"type\":\"event\"}]","ContractName":"ERC20HTLCLite","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009041fe5b3fdea0f5e4afdc17e75180738d877a01","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://9dcc0c2f2ccd73b472ed05a17ac8f62cac9f9b0177ebb759f27a845a86add075"}]}