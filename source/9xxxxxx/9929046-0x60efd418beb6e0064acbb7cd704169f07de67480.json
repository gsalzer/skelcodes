{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title An Unlock Protocol scanner\r\n * @author Maarten Zuidhoorn\r\n */\r\ncontract UnlockScanner {\r\n  /**\r\n  * @notice Get expiration timestamp for a single address\r\n  * @param owner The address to get the timestamps for\r\n  * @param unlockContract The address of the Unlock Protocol contract\r\n  * @return timestamp The expiration timestamp, or zero if the address is not a contract, or does not implement the `keyExpirationTimestampFor` function\r\n*/\r\n  function unlockTimestamp(address owner, address unlockContract) external returns (uint256 timestamp) {\r\n    timestamp = 0;\r\n    uint256 size = codeSize(unlockContract);\r\n\r\n    if (size > 0) {\r\n      (bool success, bytes memory data) = unlockContract.call(abi.encodeWithSelector(bytes4(0xabdf82ce), owner));\r\n      if (success) {\r\n        (timestamp) = abi.decode(data, (uint256));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get expiration timestamp for multiple contracts, for multiple addresses\r\n   * @param addresses The addresses to get the timestamps for\r\n   * @param contracts The addresses of the Unlock Protocol contracts\r\n   * @return timestamps The timestamps in the same order as the addresses specified\r\n   */\r\n  function unlockTimestamps(address[] calldata addresses, address[] calldata contracts) external returns (uint256[][] memory timestamps) {\r\n    timestamps = new uint256[][](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      timestamps[i] = new uint256[](contracts.length);\r\n      for (uint256 j = 0; j < contracts.length; j++) {\r\n        timestamps[i][j] = this.unlockTimestamp(addresses[i], contracts[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get code size of an address\r\n    * @param _address The address to get code size for\r\n    * @return size The size of the code\r\n   */\r\n  function codeSize(address _address) internal view returns (uint256 size) {\r\n    assembly {\r\n      size := extcodesize(_address)\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unlockContract\",\"type\":\"address\"}],\"name\":\"unlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"unlockTimestamps\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"timestamps\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UnlockScanner","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://c7625a6692fde24500708ccc93dcc80d8d1a79740c27e9b8d3a5f1ef78b06367"}]}