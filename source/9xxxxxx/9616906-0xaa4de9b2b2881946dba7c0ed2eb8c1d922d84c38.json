{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n//\r\n//   Copyright 2018-2019 Fetch.AI Limited\r\n//\r\n//   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n//   you may not use this file except in compliance with the License.\r\n//   You may obtain a copy of the License at\r\n//\r\n//       http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n//   Unless required by applicable law or agreed to in writing, software\r\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n//   See the License for the specific language governing permissions and\r\n//   limitations under the License.\r\n//\r\n//------------------------------------------------------------------------------\r\ncontract NativeToEthMigration is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Swap {\r\n        bytes32 fetTxHash;\r\n        address ethAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct Records {\r\n        uint256 migFETAmountSealed;\r\n        uint256 migFETAmountEpoch;\r\n        uint256 sealedSwpId;\r\n        uint256 numSuccMigrationsSealed;\r\n        uint128 numSuccMigrationsEpoch;\r\n        uint128 epochLength;\r\n    }\r\n\r\n    // swap id => swap\r\n    mapping(uint256 => Swap) public swaps;\r\n    // fet tx hash => swapID\r\n    mapping(bytes32 => uint256) public processedFetTxs;\r\n    mapping(address => bool) public delegates;\r\n    ERC20 public token;\r\n    Records public records;\r\n    uint256 public pausedSinceSwapId;\r\n\r\n    /* Simple length check. Length of FET addresses seem to be either 49 or\r\n        50 bytes. Adding a slight margin to this. A proper checksum validation would require a base58\r\n        decoder.*/\r\n    modifier isFetchAddress(string memory _address) {\r\n        require(bytes(_address).length > 47, \"Address too short\");\r\n        require(bytes(_address).length < 52, \"Address too long\");\r\n        _;\r\n    }\r\n\r\n    /* Only callable by owner or delegate */\r\n    modifier onlyDelegate() {\r\n        require(isOwner() || delegates[msg.sender], \"Caller is neither owner nor delegate\");\r\n        _;\r\n    }\r\n\r\n    event Migration(uint256 indexed swapID, bytes32 indexed fetTxHash, address indexed ethAddress, string fetAddress, uint256 amount);\r\n    event PauseSince(uint256 swapID);\r\n    event EpochSealed(uint256 sealedSwpId);\r\n    event ChangeDelegate(address delegate, bool isDelegate);\r\n    event TokenWithdrawal(address targetAddress, uint256 amount);\r\n    event DeleteContract();\r\n\r\n    /*******************\r\n    Contract start\r\n    *******************/\r\n    /**\r\n     * @param ERC20Address address of the ERC20 contract\r\n     * @param epochLength length of an epoch. Etch contract uses 64\r\n     */\r\n    constructor(address ERC20Address, uint128 epochLength) public {\r\n        token = ERC20(ERC20Address);\r\n        pausedSinceSwapId = 2**255;\r\n        // keep possible epochLengths small enough to ensure migFETAmountEpoch can never overflow\r\n        require(epochLength <= 256, \"Epoch length too high\");\r\n        records.epochLength = epochLength;\r\n    }\r\n\r\n    function _updateMigrationStatusAtSeal()\r\n    internal\r\n    {\r\n        records.sealedSwpId = records.sealedSwpId.add(records.epochLength);\r\n        records.numSuccMigrationsSealed = records.numSuccMigrationsSealed.add(records.numSuccMigrationsEpoch);\r\n        records.migFETAmountSealed = records.migFETAmountSealed.add(records.migFETAmountEpoch);\r\n\r\n        records.numSuccMigrationsEpoch = 0;\r\n        records.migFETAmountEpoch = 0;\r\n\r\n        emit EpochSealed(records.sealedSwpId);\r\n    }\r\n\r\n    function _updateMigrationStatus(uint256 amount)\r\n    internal\r\n    {\r\n        require(records.numSuccMigrationsEpoch + 1 <= records.epochLength, \"Number of successful swaps in epoch exceeds predefined epoch length\");\r\n\r\n        // could safe a little gas by not increasing this here if _updateMigrationStatusAtSeal() is\r\n        // but savings don't seem to justify reduced readibility\r\n        records.numSuccMigrationsEpoch += 1;\r\n        records.migFETAmountEpoch += amount;\r\n\r\n        if (records.numSuccMigrationsEpoch == records.epochLength){\r\n            _updateMigrationStatusAtSeal();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Record a swap and transfer the erc20 tokens.\r\n     */\r\n    function migrate(uint256 swapID,\r\n                     bytes32 fetTxHash,\r\n                     address ethAddress,\r\n                     string calldata fetAddress,\r\n                     uint256 amount,\r\n                     uint256 expirationBlock)\r\n    external\r\n    onlyDelegate()\r\n    isFetchAddress(fetAddress)\r\n    {\r\n        require(block.number <= expirationBlock, \"Transaction expired\");\r\n        // boundary checks\r\n        require(swapID < pausedSinceSwapId, \"Contract is paused since earlier swap_id\");\r\n        require(swapID >= records.sealedSwpId, \"SwapId is below sealedSwpId\");\r\n        require(swapID < records.sealedSwpId.add(records.epochLength), \"SwapId is out of epoch range\");\r\n        // input checks\r\n        require(swaps[swapID].ethAddress == address(0), \"Swap already recorded\");\r\n        require(ethAddress != address(0), \"null ethAddress\");\r\n        require(fetTxHash != \"\", \"null fetTxHash\");\r\n        require((processedFetTxs[fetTxHash] == 0) && (fetTxHash != swaps[0].fetTxHash), \"fetTxHash already recorded for a swap\");\r\n\r\n        processedFetTxs[fetTxHash] = swapID;\r\n        // not storing the fetAddress on-chain: no simple way to slice the first 32 bytes out of the\r\n        // address and can be easily derived from the fetTxHash. Does get logged in the event.\r\n        swaps[swapID] = Swap({fetTxHash: fetTxHash,\r\n                              ethAddress: ethAddress,\r\n                              amount: amount});\r\n\r\n        _updateMigrationStatus(amount);\r\n\r\n        require(token.transfer(ethAddress, amount));\r\n\r\n        emit Migration(swapID, fetTxHash, ethAddress, fetAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Manually seal the epoch\r\n     * @dev Only required if some swaps in the epoch have been rejected\r\n     */\r\n    function sealEpoch(uint256 newEpochSwapID,\r\n                       uint128 expectedNumberOfSuccessfulMigrationInEpoch,\r\n                       uint256 expectedMigratedFetAmountInEpoch)\r\n    external\r\n    onlyDelegate()\r\n    {\r\n        require(records.sealedSwpId.add(records.epochLength) == newEpochSwapID, \"Unexpected swapID for epoch sealing\");\r\n        require(records.numSuccMigrationsEpoch == expectedNumberOfSuccessfulMigrationInEpoch, \"Unexpected number of successful migrations in epoch\");\r\n        require(records.migFETAmountEpoch == expectedMigratedFetAmountInEpoch, \"Unexpected amount of migrated FET in epoch\");\r\n\r\n        require(newEpochSwapID <= pausedSinceSwapId, \"Contract is paused since earlier swap_id\");\r\n        _updateMigrationStatusAtSeal();\r\n    }\r\n\r\n    /**\r\n     * @notice Pause the migrate method, not allowing new migrations\r\n     * @param swapID disallow migrations with a swapID >= swapID\r\n     * @dev Delegate only\r\n     */\r\n    function pauseSince(uint256 swapID)\r\n    external\r\n    onlyDelegate()\r\n    {\r\n        pausedSinceSwapId = swapID;\r\n        emit PauseSince(swapID);\r\n    }\r\n\r\n    /**\r\n     * @notice Add or remove a delegate address that is allowed to confirm and reject transactions\r\n     * @param _address address of the delegate\r\n     * @param isDelegate whether to add or remove the address from the delegates set\r\n     * @dev Owner only\r\n     */\r\n    function setDelegate(address _address, bool isDelegate)\r\n    external\r\n    onlyOwner()\r\n    {\r\n        delegates[_address] = isDelegate;\r\n        emit ChangeDelegate(_address, isDelegate);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw token balance\r\n     * @param amount amount to withdraw\r\n     * @param targetAddress address to send the tokens to\r\n     * @dev to topup the contract simply send tokens to the contract address\r\n     */\r\n    function withDrawTokens(uint256 amount, address payable targetAddress)\r\n    external\r\n    onlyOwner()\r\n    {\r\n        require(token.transfer(targetAddress, amount));\r\n        emit TokenWithdrawal(targetAddress, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Delete the contract, transfers the remaining token and ether balance to the specified\r\n       payoutAddress\r\n     * @param payoutAddress address to transfer the balances to. Ensure that this is able to handle ERC20 tokens\r\n     * @dev owner only\r\n     */\r\n    function deleteContract(address payable payoutAddress)\r\n    external\r\n    onlyOwner()\r\n    {\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(token.transfer(payoutAddress, contractBalance));\r\n        emit DeleteContract();\r\n        selfdestruct(payoutAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Address\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"}],\"name\":\"ChangeDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DeleteContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sealedSwpId\",\"type\":\"uint256\"}],\"name\":\"EpochSealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fetTxHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapID\",\"type\":\"uint256\"}],\"name\":\"PauseSince\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"deleteContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"fetTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"fetAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapID\",\"type\":\"uint256\"}],\"name\":\"pauseSince\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedSinceSwapId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedFetTxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"migFETAmountSealed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"migFETAmountEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sealedSwpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSuccMigrationsSealed\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"numSuccMigrationsEpoch\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"epochLength\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEpochSwapID\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"expectedNumberOfSuccessfulMigrationInEpoch\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"expectedMigratedFetAmountInEpoch\",\"type\":\"uint256\"}],\"name\":\"sealEpoch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fetTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"withDrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NativeToEthMigration","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001d287cc25dad7ccaf76a26bc660c5f7c8e2a05bd0000000000000000000000000000000000000000000000000000000000000040","Library":"","LicenseType":"None","SwarmSource":"bzzr://a42d1229985f193bcfbadbafe199aaa539579f06a09f7eee3f1ce7831bdfaf9c"}]}