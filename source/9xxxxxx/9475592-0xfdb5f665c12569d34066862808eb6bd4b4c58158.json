{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/court/contracts/lib/os/ERC20.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/token/ERC20.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/court/contracts/arbitration/IArbitrator.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\ninterface IArbitrator {\r\n    /**\r\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\r\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\r\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\r\n    * @return Dispute identification number\r\n    */\r\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Close the evidence period of a dispute\r\n    * @param _disputeId Identification number of the dispute to close its evidence submitting period\r\n    */\r\n    function closeEvidencePeriod(uint256 _disputeId) external;\r\n\r\n    /**\r\n    * @dev Execute the Arbitrable associated to a dispute based on its final ruling\r\n    * @param _disputeId Identification number of the dispute to be executed\r\n    */\r\n    function executeRuling(uint256 _disputeId) external;\r\n\r\n    /**\r\n    * @dev Tell the dispute fees information to create a dispute\r\n    * @return recipient Address where the corresponding dispute fees must be transferred to\r\n    * @return feeToken ERC20 token used for the fees\r\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n    */\r\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\r\n\r\n    /**\r\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\r\n    * @param _subscriber Address of the account paying the subscription fees for\r\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\r\n    * @return feeToken ERC20 token used for the subscription fees\r\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n    */\r\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\r\n}\r\n\r\n// File: @aragon/court/contracts/standards/ERC165.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\ninterface ERC165 {\r\n    /**\r\n    * @dev Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool);\r\n}\r\n\r\n// File: @aragon/court/contracts/arbitration/IArbitrable.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\ncontract IArbitrable is ERC165 {\r\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\r\n    bytes4 internal constant ARBITRABLE_INTERFACE_ID = bytes4(0x88f3ee69);\r\n\r\n    /**\r\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\r\n    * @param arbitrator IArbitrator instance ruling the dispute\r\n    * @param disputeId Identification number of the dispute being ruled by the arbitrator\r\n    * @param ruling Ruling given by the arbitrator\r\n    */\r\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\r\n\r\n    /**\r\n    * @dev Emitted when new evidence is submitted for the IArbitrable instance's dispute\r\n    * @param disputeId Identification number of the dispute receiving new evidence\r\n    * @param submitter Address of the account submitting the evidence\r\n    * @param evidence Data submitted for the evidence of the dispute\r\n    * @param finished Whether or not the submitter has finished submitting evidence\r\n    */\r\n    event EvidenceSubmitted(uint256 indexed disputeId, address indexed submitter, bytes evidence, bool finished);\r\n\r\n    /**\r\n    * @dev Submit evidence for a dispute\r\n    * @param _disputeId Id of the dispute in the Court\r\n    * @param _evidence Data submitted for the evidence related to the dispute\r\n    * @param _finished Whether or not the submitter has finished submitting evidence\r\n    */\r\n    function submitEvidence(uint256 _disputeId, bytes calldata _evidence, bool _finished) external;\r\n\r\n    /**\r\n    * @dev Give a ruling for a certain dispute, the account calling it must have rights to rule on the contract\r\n    * @param _disputeId Identification number of the dispute to be ruled\r\n    * @param _ruling Ruling given by the arbitrator, where 0 is reserved for \"refused to make a decision\"\r\n    */\r\n    function rule(uint256 _disputeId, uint256 _ruling) external;\r\n\r\n    /**\r\n    * @dev ERC165 - Query if a contract implements a certain interface\r\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\r\n    * @return True if this contract supports the given interface, false otherwise\r\n    */\r\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\r\n        return _interfaceId == ARBITRABLE_INTERFACE_ID || _interfaceId == ERC165_INTERFACE_ID;\r\n    }\r\n}\r\n\r\n// File: contracts/PrecedenceCampaignArbitrable.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\n\r\n\r\ncontract PrecedenceCampaignArbitrable is IArbitrable {\r\n    //bytes4 public constant ERC165_INTERFACE = ERC165_INTERFACE_ID;\r\n    //bytes4 public constant ARBITRABLE_INTERFACE = ARBITRABLE_INTERFACE_ID;\r\n    string public constant ERROR_SENDER_NOT_ALLOWED = \"PCA_SENDER_NOT_ALLOWED\";\r\n\r\n    address public owner;\r\n    IArbitrator public arbitrator;\r\n\r\n    modifier only(address _who) {\r\n        require(msg.sender == _who, ERROR_SENDER_NOT_ALLOWED);\r\n        _;\r\n    }\r\n\r\n    constructor (address _owner, IArbitrator _arbitrator) public {\r\n        owner = _owner;\r\n        arbitrator = _arbitrator;\r\n    }\r\n\r\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external only(owner) returns (uint256) {\r\n        return _createDispute(_possibleRulings, _metadata);\r\n    }\r\n\r\n    function submitEvidence(uint256 _disputeId, bytes calldata _evidence, bool _finished) external only(owner) {\r\n        _submitEvidence(_disputeId, msg.sender, _evidence, _finished);\r\n    }\r\n\r\n    function submitEvidenceFor(uint256 _disputeId, address _submitter, bytes calldata _evidence, bool _finished) external only(owner) {\r\n        _submitEvidence(_disputeId, _submitter, _evidence, _finished);\r\n    }\r\n\r\n    function createAndSubmit(\r\n        uint256 _possibleRulings,\r\n        bytes calldata _metadata,\r\n        address _submitter1,\r\n        address _submitter2,\r\n        bytes calldata _evidence1,\r\n        bytes calldata _evidence2\r\n    )\r\n        external\r\n        only(owner)\r\n        returns (uint256)\r\n    {\r\n        uint256 disputeId = _createDispute(_possibleRulings, _metadata);\r\n        _submitEvidence(disputeId, _submitter1, _evidence1, false);\r\n        _submitEvidence(disputeId, _submitter2, _evidence2, false);\r\n\r\n        return disputeId;\r\n    }\r\n\r\n    function closeEvidencePeriod(uint256 _disputeId) external only(owner) {\r\n        arbitrator.closeEvidencePeriod(_disputeId);\r\n    }\r\n\r\n    function rule(uint256 _disputeId, uint256 _ruling) external only(address(arbitrator)) {\r\n        emit Ruled(IArbitrator(msg.sender), _disputeId, _ruling);\r\n    }\r\n\r\n    function setOwner(address _owner) external only(owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function _createDispute(uint256 _possibleRulings, bytes memory _metadata) internal returns (uint256) {\r\n        (address recipient, ERC20 feeToken, uint256 disputeFees) = arbitrator.getDisputeFees();\r\n        feeToken.approve(recipient, disputeFees);\r\n        return arbitrator.createDispute(_possibleRulings, _metadata);\r\n    }\r\n\r\n    function _submitEvidence(uint256 _disputeId, address _submitter, bytes memory _evidence, bool _finished) internal {\r\n        emit EvidenceSubmitted(_disputeId, _submitter, _evidence, _finished);\r\n        if (_finished) {\r\n            arbitrator.closeEvidencePeriod(_disputeId);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERROR_SENDER_NOT_ALLOWED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_possibleRulings\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"},{\"name\":\"_submitter1\",\"type\":\"address\"},{\"name\":\"_submitter2\",\"type\":\"address\"},{\"name\":\"_evidence1\",\"type\":\"bytes\"},{\"name\":\"_evidence2\",\"type\":\"bytes\"}],\"name\":\"createAndSubmit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"closeEvidencePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_evidence\",\"type\":\"bytes\"},{\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_possibleRulings\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_submitter\",\"type\":\"address\"},{\"name\":\"_evidence\",\"type\":\"bytes\"},{\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"submitEvidenceFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ruling\",\"type\":\"uint256\"}],\"name\":\"Ruled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"evidence\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"EvidenceSubmitted\",\"type\":\"event\"}]","ContractName":"PrecedenceCampaignArbitrable","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000004cb3fd420555a09ba98845f0b816e45cfb230983000000000000000000000000ee4650cbe7a2b23701d416f58b41d8b76b617797","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://8b5a78eec4763f4f9d14d4fb88195d3fb53ace3c0cd964d912a5588730a9a057"}]}