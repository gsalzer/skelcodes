{"status":"1","message":"OK","result":[{"SourceCode":"interface OrFeedInterface {\r\n    function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n    function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n    function getTokenAddress ( string symbol ) external view returns ( address );\r\n    function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n    function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Roulette {\r\n    OrFeedInterface orfeed = OrFeedInterface(0x8316b082621cfedab95bf4a44a1d4b64a6ffc336);\r\n    using SafeMath for uint256;\r\n    address owner;\r\n    uint256 maxBet = 110000000000000000;\r\n    \r\n    modifier onlyOwner() {\r\n        assert (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public payable {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function play(string oddOrEven) payable returns (uint256 result){\r\n        \r\n        require(msg.value <= maxBet, \"You must bet less than the maxBet\");\r\n        require(msg.value >  0, \"You cant bet zero\");\r\n        require(this.balance >= msg.value.mul(2), \"There is not enough in the house to allow this bet to take place\");\r\n        \r\n        string memory theColor = toLower(oddOrEven);\r\n        bool userInputBool;\r\n       if (equal(theColor, \"even\")){\r\n           userInputBool = true;\r\n       }\r\n       else{\r\n           theColor = \"odd\";\r\n           userInputBool = false;\r\n       }\r\n       \r\n       uint256 number = getSpinResult();\r\n         bool theResult = checkEven(number);\r\n         \r\n        if(number == 0){\r\n            Result(userInputBool, theResult, theColor, number, \"LOSE\");\r\n            return number;\r\n        }\r\n        \r\n       \r\n        \r\n        if(userInputBool == theResult ){\r\n            msg.sender.transfer(msg.value.mul(2));\r\n            Result(userInputBool, theResult, theColor, number, \"WIN\");\r\n            return number;\r\n        }\r\n        else{\r\n            Result(userInputBool, theResult, theColor, number, \"LOSE\");\r\n            return number;\r\n        }\r\n        \r\n    }\r\n    \r\n    function () onlyOwner payable{\r\n        //add funds to house\r\n    }\r\n    \r\n    function checkEven(uint256 testNo) constant internal returns(bool){\r\n        uint256 remainder = testNo % 2;\r\n        if(remainder == 0){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\nfunction compare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    \r\n    function equal(string _a, string _b) internal returns (bool) {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n    \r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0]) // found the first char of b\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n    function toLower(string str) internal returns (string) {\r\n    bytes memory bStr = bytes(str);\r\n    bytes memory bLower = new bytes(bStr.length);\r\n    for (uint i = 0; i < bStr.length; i++) {\r\n      if ((bStr[i] >= 65) && (bStr[i] <= 90)) {\r\n        bLower[i] = bytes1(int(bStr[i]) + 32);\r\n      } else {\r\n        bLower[i] = bStr[i];\r\n      }\r\n    }\r\n    return string(bLower);\r\n  }\r\n  \r\n  function withdrawBalance(uint256 amount) onlyOwner returns(bool) {\r\n      \r\n        msg.sender.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n    \r\n    function withdrawFullBalance() onlyOwner returns(bool) {\r\n        uint amount = this.balance;\r\n        msg.sender.transfer(amount);\r\n        return true;\r\n\r\n    }\r\n    \r\n    \r\n    function changeMaxBet(uint256 newMax) onlyOwner returns(bool){\r\n          maxBet = newMax;\r\n          return true;\r\n      }\r\n      \r\n     function getBlockNumber() constant returns(uint256){\r\n         return block.number;\r\n     }\r\n     \r\n     function getSpinResult() constant returns(uint256){\r\n         uint256 number = orfeed.getExchangeRate(\"0\", \"36\", \"random\", 0);\r\n         return number;\r\n     }\r\n      \r\n    \r\nevent Result(bool inputBool, bool isNumEvenBool, string bet, uint256 numb, string result);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFullBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oddOrEven\",\"type\":\"string\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpinResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"changeMaxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"inputBool\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"isNumEvenBool\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"numb\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"string\"}],\"name\":\"Result\",\"type\":\"event\"}]","ContractName":"Roulette","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b52b653c6de890e2b3d2840aa42f460d843696d18a0bacff8333ad6842630d0d"}]}