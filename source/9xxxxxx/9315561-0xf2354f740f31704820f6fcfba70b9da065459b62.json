{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-01-31\r\n*/\r\npragma solidity >0.4.99 <0.6.0;\r\n\r\ncontract Context {\r\n  function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    \r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n        ERC20Basic _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal\r\n    {\r\n        require(_token.transfer(_to, _value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        ERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal\r\n    {\r\n        require(_token.transferFrom(_from, _to, _value));\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 _token,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal\r\n    {\r\n        require(_token.approve(_spender, _value));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\t/**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if(a == 0) {\r\n            return 0;\r\n\t\t}\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\t/**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic, Context {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n    \r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0),\"[transfer]is not valid address\");\r\n        require(_value <= balances[_msgSender()], \"[transfer]value is too much\");\r\n        balances[_msgSender()] = balances[_msgSender()].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n\t/**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom (\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][_msgSender()]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][_msgSender()] = allowed[_from][_msgSender()].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[_msgSender()][_spender] = _value;\r\n        \r\n        emit Approval(_msgSender(), _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance (\r\n        address _owner,\r\n        address _spender\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\t/**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n        allowed[_msgSender()][_spender] = (\r\n        allowed[_msgSender()][_spender].add(_addedValue));\r\n        \r\n        emit Approval(_msgSender(), _spender, allowed[_msgSender()][_spender]);\r\n        \r\n        return true;\r\n    }\r\n\r\n\t/**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n\t) public returns (bool)\r\n\t{\r\n        uint256 oldValue = allowed[_msgSender()][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[_msgSender()][_spender] = 0;\r\n\t\t} else {\r\n            allowed[_msgSender()][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n        \r\n        emit Approval(_msgSender(), _spender, allowed[_msgSender()][_spender]);\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MultiOwnable {\r\n    uint8 constant MAX_BURN = 3;\r\n    uint8 constant MAX_OWNER = 15;\r\n    uint8 constant MAX_JUDGE = 3;\r\n    address payable public hiddenOwner;\r\n    address payable public superOwner;\r\n    address payable public reclaimer;\r\n    address payable public tokenManager;\r\n    address payable public withdrawalWallet;\r\n    address payable public bank;\r\n    address[MAX_JUDGE] public chkJudgeList;\r\n    address[MAX_BURN] public chkBurnerList;\r\n    address[MAX_OWNER] public chkOwnerList;\r\n\r\n    mapping(address => bool) public judges;\r\n    mapping(address => bool) public depositWallet;\r\n    mapping(address => bool) public burners;\r\n    mapping (address => bool) public owners;\r\n\r\n    event AddedBurner(address indexed newBurner);\r\n    event AddedOwner(address indexed newOwner);\r\n    event DeletedOwner(address indexed toDeleteOwner);\r\n    event DeletedBurner(address indexed toDeleteBurner);\r\n    event ChangedReclaimer(address indexed newReclaimer);\r\n    event ChangedBank(address indexed newBank);\r\n    event ChangedSuperOwner(address indexed newSuperOwner);\r\n    event ChangedHiddenOwner(address indexed newHiddenOwner);\r\n    event ChangedTokenManager(address indexed newTokenManager);\r\n    event ChangedWithdrawalWallet(address indexed newWithdrawalWallet);\r\n    event SetDepositWallet(address indexed _wallet);\r\n    event DelDepositWallet(address indexed _wallet);\r\n    event AddedJudge(address indexed _newJudge, uint8 _number);\r\n    event DeletedJudge(address indexed _newJudge, uint8 _number);\r\n\r\n    constructor() public {\r\n        hiddenOwner = msg.sender;\r\n        superOwner = msg.sender;\r\n        reclaimer = msg.sender;\r\n        owners[msg.sender] = true;\r\n        chkOwnerList[0] = msg.sender;\r\n        withdrawalWallet = msg.sender;\r\n    }\r\n\r\n    modifier onlySuperOwner() {\r\n        require(superOwner == msg.sender, \"[mdf]is not SuperOwner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyJudge(address _from) {\r\n        require(judges[_from] == true, \"[mdf]is not Judge\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBank() {\r\n        require(bank == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyNotBank(address _from) {\r\n        require(bank != _from);\r\n        _;\r\n    }\r\n\r\n    modifier onlyReclaimer() {\r\n        require(reclaimer == msg.sender, \"[mdf]is not Reclaimer\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyHiddenOwner() {\r\n        require(hiddenOwner == msg.sender, \"[mdf]is not HiddenOwner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender], \"[mdf]is not Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBurner(){\r\n        require(burners[msg.sender], \"[mdf]is not Burner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDepositWallet(address _who) {\r\n      require(depositWallet[_who] == true, \"[mdf]is not DepositWallet\");\r\n      _;\r\n    }\r\n\r\n    modifier onlyNotDepositWallet(address _who) {\r\n      require(depositWallet[_who] == false, \"[mdf]is DepositWallet\");\r\n      _;\r\n    }\r\n\r\n    modifier onlyTokenManager() {\r\n      require(msg.sender == tokenManager, \"[mdf]is not tokenManager\");\r\n      _;\r\n    }\r\n\r\n    modifier onlyNotwWallet() {\r\n      require(msg.sender != withdrawalWallet, \"[mdf]is withdrawalWallet\");\r\n      _;\r\n    }\r\n\r\n    function transferWithdrawalWallet(address payable _wallet) public onlySuperOwner returns (bool) {\r\n        \r\n        require(withdrawalWallet != _wallet);\r\n        \r\n        withdrawalWallet = _wallet;\r\n        \r\n        emit ChangedWithdrawalWallet(_wallet);\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n    function transferTokenManagerRole(address payable _newTokenManager) public onlySuperOwner returns (bool) {\r\n        require(tokenManager != _newTokenManager);\r\n\r\n        tokenManager = _newTokenManager;\r\n\r\n        emit ChangedTokenManager(_newTokenManager);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferBankOwnership(address payable _newBank) public onlySuperOwner returns (bool) {\r\n        \r\n        require(bank != _newBank);\r\n        \r\n        bank = _newBank;\r\n        \r\n        emit ChangedBank(_newBank);\r\n        \r\n        return true;\r\n        \r\n    }\r\n\r\n    function addJudge(address _newJudge, uint8 _num) public onlySuperOwner returns (bool) {\r\n        require(_num < MAX_JUDGE);\r\n        require(_newJudge != address(0));\r\n        require(chkJudgeList[_num] == address(0));\r\n        require(judges[_newJudge] == false);\r\n\r\n        judges[_newJudge] = true;\r\n        chkJudgeList[_num] = _newJudge;\r\n        \r\n        emit AddedJudge(_newJudge, _num);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function deleteJudge(address _toDeleteJudge, uint8 _num) public\r\n    onlySuperOwner returns (bool) {\r\n        require(_num < MAX_JUDGE);\r\n        require(_toDeleteJudge != address(0));\r\n        require(chkJudgeList[_num] == _toDeleteJudge);\r\n        \r\n        judges[_toDeleteJudge] = false;\r\n\r\n        chkJudgeList[_num] = address(0);\r\n        \r\n        emit DeletedJudge(_toDeleteJudge, _num);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function setDepositWallet(address _depositWallet) public\r\n    onlyTokenManager returns (bool) {\r\n        \r\n        require(depositWallet[_depositWallet] == false);\r\n        \r\n        depositWallet[_depositWallet] = true;\r\n        \r\n        emit SetDepositWallet(_depositWallet);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function delDepositWallet(address _depositWallet) public\r\n    onlyTokenManager returns (bool) {\r\n        \r\n        require(depositWallet[_depositWallet] == true);\r\n        \r\n        depositWallet[_depositWallet] = false;\r\n        \r\n        emit DelDepositWallet(_depositWallet);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function changeSuperOwnership(address payable newSuperOwner) public onlyHiddenOwner returns(bool) {\r\n        require(newSuperOwner != address(0));\r\n        \r\n        superOwner = newSuperOwner;\r\n        \r\n        emit ChangedSuperOwner(superOwner);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function changeHiddenOwnership(address payable newHiddenOwner) public onlyHiddenOwner returns(bool) {\r\n        require(newHiddenOwner != address(0));\r\n        \r\n        hiddenOwner = newHiddenOwner;\r\n        \r\n        emit ChangedHiddenOwner(hiddenOwner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function changeReclaimer(address payable newReclaimer) public onlySuperOwner returns(bool) {\r\n        require(newReclaimer != address(0));\r\n        reclaimer = newReclaimer;\r\n        \r\n        emit ChangedReclaimer(reclaimer);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function addBurner(address burner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_BURN);\r\n        require(burner != address(0));\r\n        require(chkBurnerList[num] == address(0));\r\n        require(burners[burner] == false);\r\n\r\n        burners[burner] = true;\r\n        chkBurnerList[num] = burner;\r\n        \r\n        emit AddedBurner(burner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function deleteBurner(address burner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_BURN);\r\n        require(burner != address(0));\r\n        require(chkBurnerList[num] == burner);\r\n        \r\n        burners[burner] = false;\r\n\r\n        chkBurnerList[num] = address(0);\r\n        \r\n        emit DeletedBurner(burner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_OWNER);\r\n        require(owner != address(0));\r\n        require(chkOwnerList[num] == address(0));\r\n        require(owners[owner] == false);\r\n        \r\n        owners[owner] = true;\r\n        chkOwnerList[num] = owner;\r\n        \r\n        emit AddedOwner(owner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_OWNER);\r\n        require(owner != address(0));\r\n        require(chkOwnerList[num] == owner);\r\n\r\n        owners[owner] = false;\r\n\r\n        chkOwnerList[num] = address(0);\r\n        \r\n        emit DeletedOwner(owner);\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title HasNoEther\r\n */\r\ncontract HasNoEther is MultiOwnable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event ReclaimToken(address _token);\r\n    \r\n    /**\r\n    * @dev Constructor that rejects incoming Ether\r\n    * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n    * we could use assembly to access msg.value.\r\n    */\r\n    constructor() public payable {\r\n        require(msg.value == 0);\r\n    }\r\n    /**\r\n    * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n    */\r\n    function() external {\r\n\r\n    }\r\n    \r\n    function reclaimToken(ERC20Basic _token) external onlyReclaimer returns(bool){\r\n        \r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        _token.safeTransfer(superOwner, balance);\r\n        \r\n        emit ReclaimToken(address(_token));\r\n    \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Blacklist is MultiOwnable {\r\n\r\n    mapping(address => bool) blacklisted;\r\n\r\n    event Blacklisted(address indexed blacklist);\r\n    event Whitelisted(address indexed whitelist);\r\n    \r\n    modifier whenPermitted(address node) {\r\n        require(!blacklisted[node]);\r\n        _;\r\n    }\r\n    \r\n    function isPermitted(address node) public view returns (bool) {\r\n        return !blacklisted[node];\r\n    }\r\n\r\n    function blacklist(address node) public onlyOwner returns (bool) {\r\n        require(!blacklisted[node]);\r\n\r\n        blacklisted[node] = true;\r\n        emit Blacklisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n   \r\n    function unblacklist(address node) public onlySuperOwner returns (bool) {\r\n        require(blacklisted[node]);\r\n\r\n        blacklisted[node] = false;\r\n        emit Whitelisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n}\r\n\r\ncontract Burnlist is Blacklist {\r\n    mapping(address => bool) public isburnlist;\r\n\r\n    event Burnlisted(address indexed burnlist, bool signal);\r\n\r\n    modifier isBurnlisted(address who) {\r\n        require(isburnlist[who]);\r\n        _;\r\n    }\r\n\r\n    function addBurnlist(address node) public onlyOwner returns (bool) {\r\n        require(!isburnlist[node]);\r\n        \r\n        isburnlist[node] = true;\r\n        \r\n        emit Burnlisted(node, true);\r\n        \r\n        return isburnlist[node];\r\n    }\r\n\r\n    function delBurnlist(address node) public onlyOwner returns (bool) {\r\n        require(isburnlist[node]);\r\n        \r\n        isburnlist[node] = false;\r\n        \r\n        emit Burnlisted(node, false);\r\n        \r\n        return isburnlist[node];\r\n    }\r\n}\r\n\r\n\r\ncontract PausableToken is StandardToken, HasNoEther, Burnlist {\r\n  \r\n    bool public paused = false;\r\n  \r\n    event Paused(address addr);\r\n    event Unpaused(address addr);\r\n\r\n    constructor() public {\r\n\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!paused || owners[_msgSender()]);\r\n        _;\r\n    }\r\n   \r\n    function pause() public onlyOwner returns (bool) {\r\n        \r\n        require(!paused);\r\n\r\n        paused = true;\r\n        \r\n        emit Paused(_msgSender());\r\n\r\n        return paused;\r\n    }\r\n\r\n    function unpause() public onlySuperOwner returns (bool) {\r\n        require(paused);\r\n\r\n        paused = false;\r\n        \r\n        emit Unpaused(_msgSender());\r\n\r\n        return paused;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ISDT\r\n *\r\n */\r\ncontract Isdt is PausableToken {\r\n    \r\n    event Withdrawed(address indexed _tokenManager, address indexed _withdrawedWallet, address indexed _to, uint256 _value);\r\n    event Burnt(address indexed burner, uint256 value);\r\n    event Mint(address indexed minter, uint256 value);\r\n    struct VotedResult {\r\n        bool result;\r\n    }\r\n\r\n    mapping(address => VotedResult) public voteBox;\r\n\r\n    string public constant name = \"ISTARDUST\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant symbol = \"ISDT\";\r\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals));\r\n    uint256 public constant granularity = 1e18;\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        \r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function destory() public onlyHiddenOwner returns (bool) {\r\n        selfdestruct(superOwner);\r\n        return true;\r\n    }\r\n    \r\n    function mint(uint256 _amount) public onlyHiddenOwner returns (bool) {\r\n        \r\n        require(INITIAL_SUPPLY >= totalSupply_.add(_amount));\r\n        \r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        \r\n        balances[superOwner] = balances[superOwner].add(_amount);\r\n\r\n        emit Mint(superOwner, _amount);\r\n        \r\n        emit Transfer(address(0), superOwner, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function burn(address _to,uint256 _value) public onlyBurner isBurnlisted(_to) returns(bool) {\r\n\r\n        _burn(_to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal returns(bool) {\r\n        require(_value <= balances[_who]);\r\n        \r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n    \r\n        emit Burnt(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _vacummClean(address _from) internal\r\n    onlyDepositWallet(_from)\r\n    returns (bool) {\r\n      require(_from != address(0));\r\n\r\n      uint256 _fromBalance = balances[_from];\r\n      require(_fromBalance <= balances[_from]);\r\n\r\n      balances[_from] = balances[_from].sub(_fromBalance);\r\n      balances[withdrawalWallet] = balances[withdrawalWallet].add(_fromBalance);\r\n\r\n      emit Transfer(_from, withdrawalWallet, _fromBalance);\r\n      return true;\r\n    }\r\n    \r\n    function vacummClean(address[] memory _from) public onlyTokenManager\r\n    returns (bool) {\r\n      for(uint256 i = 0; i < _from.length; i++) {\r\n        _vacummClean(_from[i]);\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function withdraw(address _to, uint256 _value) public\r\n    onlyTokenManager whenNotPaused checkGranularity(_value)\r\n    returns (bool) {\r\n    \r\n        require(_to != address(0));\r\n        require(_value <= balances[withdrawalWallet]);\r\n        \r\n        balances[withdrawalWallet] = balances[withdrawalWallet].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(withdrawalWallet, _to, _value);\r\n        \r\n        emit Withdrawed(_msgSender(), withdrawalWallet, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public\r\n    onlyNotwWallet whenNotPaused whenPermitted(_msgSender()) onlyNotBank(_msgSender())\r\n    onlyNotDepositWallet(_msgSender()) checkGranularity(_value)\r\n    returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    modifier checkGranularity(uint256 _amount) {\r\n        require(_amount % granularity == 0, \"[mdf]Unable to modify token balances at this granularity\");\r\n        _;\r\n    }\r\n\r\n    function agree() public onlyJudge(_msgSender()) returns (bool) {\r\n        require(voteBox[_msgSender()].result == false, \"voted result already is true\");\r\n        voteBox[_msgSender()].result = true;\r\n        \r\n        return true;\r\n    }\r\n\r\n    function disagree() public onlyJudge(_msgSender()) returns (bool) {\r\n        require(voteBox[_msgSender()].result == true, \"voted result already is false\");\r\n        voteBox[_msgSender()].result = false;\r\n        return true;\r\n    }\r\n\r\n    function _voteResult() internal returns (bool) {\r\n        require(chkJudgeList[0] != address(0), \"judge0 is not setted\");\r\n        require(chkJudgeList[1] != address(0), \"judge1 is not setted\");\r\n        require(chkJudgeList[2] != address(0), \"judge2 is not setted\");\r\n        uint8 chk = 0;\r\n        for(uint8 i = 0; i < MAX_JUDGE; i++) {\r\n            if(voteBox[chkJudgeList[i]].result == true) {\r\n                voteBox[chkJudgeList[i]].result = false;\r\n                chk++;\r\n            }\r\n        }\r\n        if(chk >= 2) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused onlyNotwWallet\r\n    onlyNotBank(_from) onlyNotBank(_msgSender())\r\n    whenPermitted(_msgSender()) whenPermitted(_from)\r\n    onlyNotDepositWallet(_from) checkGranularity(_value)\r\n    returns (bool)\r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function depositToBank(uint256 _value) public onlySuperOwner\r\n    returns (bool) {\r\n        super.transfer(bank, _value);\r\n        return true;\r\n    }\r\n\r\n    function withdrawFromBank(uint256 _value) public onlyBank\r\n    returns (bool) {\r\n        require(_voteResult(), \"_voteResult is not valid\");\r\n        super.transfer(superOwner, _value);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toDeleteJudge\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint8\"}],\"name\":\"deleteJudge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositWallet\",\"type\":\"address\"}],\"name\":\"delDepositWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkBurnerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenManager\",\"type\":\"address\"}],\"name\":\"transferTokenManagerRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isburnlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawFromBank\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"delBurnlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"transferWithdrawalWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkJudgeList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newJudge\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint8\"}],\"name\":\"addJudge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBank\",\"type\":\"address\"}],\"name\":\"transferBankOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"addBurnlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depositWallet\",\"type\":\"address\"}],\"name\":\"setDepositWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disagree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositToBank\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address[]\"}],\"name\":\"vacummClean\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"judges\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteBox\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"agree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkOwnerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReclaimer\",\"type\":\"address\"}],\"name\":\"changeReclaimer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenManager\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_withdrawedWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burnlist\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signal\",\"type\":\"bool\"}],\"name\":\"Burnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ReclaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"AddedBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toDeleteOwner\",\"type\":\"address\"}],\"name\":\"DeletedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toDeleteBurner\",\"type\":\"address\"}],\"name\":\"DeletedBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newReclaimer\",\"type\":\"address\"}],\"name\":\"ChangedReclaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBank\",\"type\":\"address\"}],\"name\":\"ChangedBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"ChangedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"ChangedHiddenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newTokenManager\",\"type\":\"address\"}],\"name\":\"ChangedTokenManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newWithdrawalWallet\",\"type\":\"address\"}],\"name\":\"ChangedWithdrawalWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"SetDepositWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"DelDepositWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newJudge\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint8\"}],\"name\":\"AddedJudge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newJudge\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint8\"}],\"name\":\"DeletedJudge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Isdt","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ed44156263610ac19988f2ca67afa85e7668bfe2433d7a1ead991b0879721a8f"}]}