{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract KyberNetworkProxy {\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty)\r\n    public view\r\n    returns(uint expectedRate, uint slippageRate);\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function decimals() public view returns(uint digits);\r\n}\r\n\r\ncontract buyNagemonFosil is Ownable {\r\n    using SafeMath for uint256;\r\n    KyberNetworkProxy public kyberNetworkProxyContract = KyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    //    KyberNetworkProxy public kyberNetworkProxyContract = KyberNetworkProxy(0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D); //kovan;\r\n    address payable public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\r\n    address public technical = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\r\n    ERC20 public nagemonToken = ERC20(0xF63C5639786E7ce7C35B3D2b97E74bf7af63eEEA);\r\n    //    ERC20 public nagemonToken = ERC20(0xD1C6FC24f30c7664e7f04aE62dB3FAE21dB002cb); // kovan\r\n    ERC20 constant internal DAI_TOKEN_ADDRESS = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    //    ERC20 constant internal DAI_TOKEN_ADDRESS = ERC20(0xC4375B7De8af5a38a93548eb8453a498222C4fF2); //kovan\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the ceo address.\r\n     */\r\n    modifier onlyCeoAddress() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n    modifier onlyTechnicalAddress() {\r\n        require(msg.sender == technical);\r\n        _;\r\n    }\r\n    event received(address _from, ERC20 _token, uint256 _amountToken, uint _amountFosil);\r\n    function getConversionRates(ERC20 srcToken, uint srcQty) public view returns (uint, uint) {\r\n        uint minConversionRate;\r\n        uint spl;\r\n        ERC20 _srcToken = srcToken;\r\n        uint256 _srcQty = srcQty;\r\n        if(nagemonToken == srcToken) {\r\n            _srcToken = DAI_TOKEN_ADDRESS;\r\n            _srcQty = srcQty.div(100).mul(1 ether);\r\n        }\r\n        (minConversionRate,spl) = kyberNetworkProxyContract.getExpectedRate(_srcToken, DAI_TOKEN_ADDRESS, _srcQty);\r\n\r\n        return (minConversionRate, spl);\r\n    }\r\n    // @dev fallback function to exchange the ether for Monster fossil\r\n    function buyMonsterFossil() public payable {\r\n\r\n        uint256 minConversionRate;\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(ETH_TOKEN_ADDRESS, DAI_TOKEN_ADDRESS, msg.value);\r\n        uint256 maxConversionRate;\r\n\r\n        require(msg.value > 0);\r\n        maxConversionRate = msg.value <= 1 ether ? minConversionRate : minConversionRate.div(1 ether).mul(msg.value);\r\n\r\n        emit received(msg.sender, ETH_TOKEN_ADDRESS, msg.value, maxConversionRate);\r\n    }\r\n    function buyMonsterFossilByERC20(ERC20 srcToken, uint srcQty) public {\r\n\r\n        uint256 minConversionRate;\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(srcToken, DAI_TOKEN_ADDRESS, srcQty);\r\n        uint256 maxConversionRate;\r\n\r\n        require(srcToken.transferFrom(msg.sender, address(this), srcQty));\r\n        uint decimal = 10 ** srcToken.decimals();\r\n        maxConversionRate = srcQty <= decimal ? minConversionRate : minConversionRate.div(decimal).mul(srcQty);\r\n\r\n        emit received(msg.sender, srcToken, srcQty, maxConversionRate);\r\n    }\r\n    function buyMonsterFossilByNagemon(uint srcQty) public {\r\n\r\n        require(nagemonToken.transferFrom(msg.sender, address(this), srcQty));\r\n\r\n        emit received(msg.sender, nagemonToken, srcQty, srcQty);\r\n    }\r\n    function config(address _technical) public onlyOwner returns (address){\r\n        technical = _technical;\r\n        return (technical);\r\n    }\r\n    function changeCeo(address payable _address) public onlyCeoAddress {\r\n        require(_address != address(0));\r\n        ceoAddress = _address;\r\n\r\n    }\r\n    function _withdraw(uint256 amount) internal {\r\n        require(address(this).balance >= amount);\r\n        if(amount > 0) {\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n    function withdraw(uint256 _ethAmount, address[] memory _tokens, uint256[] memory _tokenAdmounts) public onlyCeoAddress {\r\n        require(_tokens.length == _tokenAdmounts.length);\r\n        _withdraw(_ethAmount);\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            ERC20 erc20 = ERC20(_tokens[i]);\r\n            erc20.transfer(msg.sender, _tokenAdmounts[i]);\r\n        }\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountFosil\",\"type\":\"uint256\"}],\"name\":\"received\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyMonsterFossil\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"buyMonsterFossilByERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"buyMonsterFossilByNagemon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeCeo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_technical\",\"type\":\"address\"}],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getConversionRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxyContract\",\"outputs\":[{\"internalType\":\"contract KyberNetworkProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nagemonToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"technical\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAdmounts\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"buyNagemonFosil","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://0d2300c24834a92bee2c219f817459508030cb110f07bdbf2962e81857a46728"}]}