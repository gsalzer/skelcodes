{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\ncontract SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n    function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(uint quotient) {\r\n        uint _numerator  = numerator * 10 ** (precision+1);\r\n        uint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n        return (value*_quotient/1000000000000000000);\r\n    }\r\n}\r\n\r\ncontract Canistoken is SafeMath {\r\n    string public constant name     \t\t            = \"Canistoken\";                     // Name of the token\r\n    string public constant symbol   \t\t            = \"CNTK\";                           // Symbol of token\r\n    uint256 public constant decimals  \t\t            = 18;                               // Decimal of token\r\n    uint256 public constant _minbalance       \t\t    = 10000 * 10 ** decimals;           // 10000 tokens min balance to minting\r\n    uint256 public constant _mintransfer       \t\t    = 1000 * 10 ** decimals;            // 1000 tokens min amount for transfer to consider in minting\r\n    uint256 public constant _totalsupply        \t\t= 500000000 * 10 ** decimals;       // 500 million total supply\r\n    uint256 public constant _premined       \t\t    = 400000000 * 10 ** decimals;       // 400 million premined tokens\r\n    uint256 public constant _rewardperweek \t\t        = 162037 * 10 ** decimals;          // Tokens reward per week\r\n    uint256 public _mined       \t\t                = 0;                                // Mined tokens\r\n    uint256 public _mintuserCount       \t\t        = 0;                                // Count of user started minting\r\n    uint256 public _totaltransactioncount       \t\t= 0;                                // Total transaction count for session\r\n    uint256 public _intdate       \t\t                = now;                              // Time of contract deploy\r\n    uint256 public _expdate       \t\t                = now + 4380 days;                  // Time of closing minting function after 12 years\r\n    address public owner                                = msg.sender;                       // Owner of smart contract\r\n    address public admin                                = 0x00260EEA23db5a3dd06b164A62F26f60bA238B93;// Admin of smart contract \r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (bytes32 => uint256) transactioncount;\r\n    mapping (bytes32 => uint256) mintingTime;\r\n    mapping (bytes32 => address) mintingUsersList;\r\n    uint32 mintingUsers;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    // Only owner can access the function\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Only admin can access the function\r\n    modifier onlyAdmin() {\r\n        if (msg.sender != admin) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        balances[msg.sender]        = _premined;\r\n        emit Transfer(0, msg.sender, _premined);\r\n    }\r\n    \r\n    // Token minting function\r\n    function mint() public returns (bool success) {\r\n        address _customerAddress    = msg.sender;\r\n        uint256 userBalance         = balances[_customerAddress];\r\n        bytes32 userAdd             = keccak256(abi.encodePacked(mintingUsers, _customerAddress));\r\n        require(userBalance >= _minbalance);                                                // Sender balance should be >= 10000 tokens\r\n        require(_totalsupply > (add(_premined, _mined)));                                   // Total supply should be > premined token and mined token combined\r\n        require(_expdate >= now);                                                           // Last date of minting should be >= current time\r\n        require(mintingTime[userAdd] == 0);                                                 // User can minting only one time in 7 days\r\n    // If all OK go ahed\r\n        _mintuserCount              = add(_mintuserCount, 1);\r\n        bytes32 userAddbyCount      = keccak256(abi.encodePacked(mintingUsers, _mintuserCount));\r\n        mintingUsersList[userAddbyCount] = _customerAddress;\r\n        mintingTime[userAdd]        = now;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    // Show token balance of address owner\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    // Transfer mined tokens to admin for distribution\r\n    function transferMined() external onlyAdmin {\r\n        balances[admin]             = add(balances[admin], _rewardperweek);\r\n        emit Transfer(0, admin, _rewardperweek);\r\n    }\r\n    \r\n    // Token transfer function\r\n    // Token amount should be in 18 decimals (eg. 199 * 10 ** 18)\r\n    function transfer(address _to, uint256 _amount ) public {\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender]            = sub(balances[msg.sender], _amount);\r\n        balances[_to]                   = add(balances[_to], _amount);\r\n        // If user started minting and amount is >= 1000 tokens\r\n        bytes32 userAdd = keccak256(abi.encodePacked(mintingUsers, msg.sender));\r\n        if(mintingTime[userAdd] > 0 && _amount >= _mintransfer) {\r\n            transactioncount[userAdd]   = add(transactioncount[userAdd], 1);                // Transaction count for user\r\n            _totaltransactioncount      = add(_totaltransactioncount, 1);                   // Total transaction count\r\n        }\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        \r\n    }\r\n    \r\n    // Get minting users list \r\n    function getmintingUsersList(uint _index) external view returns(address) {\r\n        bytes32 userAddbyCount      = keccak256(abi.encodePacked(mintingUsers, _index));\r\n        return mintingUsersList[userAddbyCount];\r\n    }\r\n    \r\n    // Get user transaction count\r\n    function getUserTransactionCount(address _useraddress) external view returns(uint256) {\r\n        bytes32 userAddbyCount      = keccak256(abi.encodePacked(mintingUsers, _useraddress));\r\n        return transactioncount[userAddbyCount];\r\n    }\r\n    \r\n    // Reset minting users\r\n    function resetMintingUsers() external onlyAdmin {\r\n        mintingUsers++;\r\n        _mintuserCount              = 0;\r\n        _totaltransactioncount      = 0;\r\n        _mined                      = add(_mined, _rewardperweek);\r\n    }\r\n    \r\n    // Transfer ETH to owners wallet address\r\n    function drain() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    // Total Supply of Canistoken\r\n    function totalSupply() public pure returns (uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n    \r\n    // Change Admin of this contract\r\n    function changeAdmin(address _newAdminAddress) external onlyOwner {\r\n        admin = _newAdminAddress;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_intdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferMined\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintuserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_minbalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdminAddress\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rewardperweek\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_premined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getmintingUsersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_expdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_useraddress\",\"type\":\"address\"}],\"name\":\"getUserTransactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetMintingUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totaltransactioncount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Canistoken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f8802c64f168ce743795f788dc8c1dcddd67f436df765e8777354d70ca42d342"}]}