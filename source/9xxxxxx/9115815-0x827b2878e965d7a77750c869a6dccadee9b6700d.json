{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-09-01\r\n*/\r\n\r\npragma solidity 0.5.8; \r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/BetProtocolToken.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\ncontract DistributionContract is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public decimals = 1 ether;\r\n    address[] public tokenOwners ; /* Tracks distributions mapping (iterable) */\r\n    uint256 public TGEDate = 0; /* Date From where the distribution starts (TGE) */\r\n    uint256 constant public daysLockWhenDaily = 365;\r\n    uint256 constant public month = 30 days;\r\n    uint256 constant public year = 365 days;\r\n    uint256 public lastDateDistribution = 0;\r\n    uint256 public daysPassed = 0;\r\n  \r\n    \r\n    mapping(address => DistributionStep[]) public distributions; /* Distribution object */\r\n    \r\n    ERC20 public erc20;\r\n\r\n    struct DistributionStep {\r\n        uint256 amountAllocated;\r\n        uint256 currentAllocated;\r\n        uint256 unlockDay;\r\n        uint256 amountSent;\r\n        bool isDaily;\r\n    }\r\n    \r\n    constructor() public{\r\n        \r\n        /* Ecosystem Tokens */\r\n        setInitialDistribution(0x9ac2009901a88302D344ba3fA75682919bb7372a, 440000000, year, false);\r\n        setInitialDistribution(0x9ac2009901a88302D344ba3fA75682919bb7372a, 440000000, year.add(3 * month), false);\r\n        setInitialDistribution(0x9ac2009901a88302D344ba3fA75682919bb7372a, 440000000, year.add(6 * month), false);\r\n        setInitialDistribution(0x9ac2009901a88302D344ba3fA75682919bb7372a, 440000000, year.add(9 * month), false);\r\n        setInitialDistribution(0x9ac2009901a88302D344ba3fA75682919bb7372a, 440000000, year.add(12 * month), false);\r\n        /* Foundation Tokens */\r\n        setInitialDistribution(0x6714d41094a264BB4b8fCB74713B42cFEe6B4F74, 515000000, year, false);\r\n        setInitialDistribution(0x6714d41094a264BB4b8fCB74713B42cFEe6B4F74, 515000000, year.add(3 * month), false);\r\n        setInitialDistribution(0x6714d41094a264BB4b8fCB74713B42cFEe6B4F74, 515000000, year.add(6 * month), false);\r\n        setInitialDistribution(0x6714d41094a264BB4b8fCB74713B42cFEe6B4F74, 515000000, year.add(9 * month), false);\r\n        setInitialDistribution(0x6714d41094a264BB4b8fCB74713B42cFEe6B4F74, 515000000, year.add(12 * month), false);\r\n        /* Partners Tokens */\r\n        setInitialDistribution(0x76338947e861bbd44C13C6402cA502DD61f3Fe90, 120000000, 6 * month, false);\r\n        setInitialDistribution(0x76338947e861bbd44C13C6402cA502DD61f3Fe90, 120000000, 9 * month, false);\r\n        setInitialDistribution(0x76338947e861bbd44C13C6402cA502DD61f3Fe90, 120000000, year, false);\r\n        setInitialDistribution(0x76338947e861bbd44C13C6402cA502DD61f3Fe90, 120000000, year.add(3 * month), false);\r\n        setInitialDistribution(0x76338947e861bbd44C13C6402cA502DD61f3Fe90, 120000000, year.add(6 * month), false);\r\n        /* Team 1 Tokens */\r\n        setInitialDistribution(0x59662241cB102B2A49250AE0a4332C1D81f7A35a, 140000000, 6 * month, false);\r\n        setInitialDistribution(0x59662241cB102B2A49250AE0a4332C1D81f7A35a, 140000000, 9 * month, false);\r\n        setInitialDistribution(0x59662241cB102B2A49250AE0a4332C1D81f7A35a, 140000000, year, false);\r\n        setInitialDistribution(0x59662241cB102B2A49250AE0a4332C1D81f7A35a, 140000000, year.add(3 * month), false);\r\n        setInitialDistribution(0x59662241cB102B2A49250AE0a4332C1D81f7A35a, 140000000, year.add(6 * month), false);\r\n        /* Team 2 Tokens */\r\n        setInitialDistribution(0x3cBC0B3e2A45932436ECbe35a4f2f267837BF093, 140000000, 6 * month, false);\r\n        setInitialDistribution(0x3cBC0B3e2A45932436ECbe35a4f2f267837BF093, 140000000, 9 * month, false);\r\n        setInitialDistribution(0x3cBC0B3e2A45932436ECbe35a4f2f267837BF093, 140000000, year, false);\r\n        setInitialDistribution(0x3cBC0B3e2A45932436ECbe35a4f2f267837BF093, 140000000, year.add(3 * month), false);\r\n        setInitialDistribution(0x3cBC0B3e2A45932436ECbe35a4f2f267837BF093, 140000000, year.add(6 * month), false);\r\n        /* Team 3 Tokens */\r\n        setInitialDistribution(0xA91335CC09A4Ab1dFfF466AF5f34f7647c842Fa4, 140000000, 6 * month, false);\r\n        setInitialDistribution(0xA91335CC09A4Ab1dFfF466AF5f34f7647c842Fa4, 140000000, 9 * month, false);\r\n        setInitialDistribution(0xA91335CC09A4Ab1dFfF466AF5f34f7647c842Fa4, 140000000, year, false);\r\n        setInitialDistribution(0xA91335CC09A4Ab1dFfF466AF5f34f7647c842Fa4, 140000000, year.add(3 * month), false);\r\n        setInitialDistribution(0xA91335CC09A4Ab1dFfF466AF5f34f7647c842Fa4, 140000000, year.add(6 * month), false);\r\n\r\n        /* Developer Bootstrap */\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 150000000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 150000000, 3 * month, false);\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 150000000, 6 * month, false);\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 150000000, 9 * month, false);\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 150000000, year, false);\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 150000000, year.add(3 * month), false);\r\n        setInitialDistribution(0xbca236d9F3f4c247fAC1854ad92EB3cE25847F2e, 100000000, year.add(6 * month), false);\r\n\r\n        /* Investor 1 */\r\n        setInitialDistribution(0xafa64cCa337eFEE0AD827F6C2684e69275226e90, 22500000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0xafa64cCa337eFEE0AD827F6C2684e69275226e90, 90000000, month, true);\r\n        /* Investor 2 */\r\n        setInitialDistribution(0x4a9fA34da6d2378c8f3B9F6b83532B169beaEDFc, 1500000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0x4a9fA34da6d2378c8f3B9F6b83532B169beaEDFc, 6000000, month, true);\r\n        /* Investor 3 */\r\n        setInitialDistribution(0x149D6b149cCF5A93a19b62f6c8426dc104522A48, 900000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0x149D6b149cCF5A93a19b62f6c8426dc104522A48, 3600000, month, true);\r\n        /* Investor 4 */\r\n        setInitialDistribution(0x004988aCd23524303B999A6074424ADf3f929eA1, 7500000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0x004988aCd23524303B999A6074424ADf3f929eA1, 30000000, month, true);\r\n        /* Investor 5 */\r\n        setInitialDistribution(0xe3b7C5A000FCd6EfEa699c67F59419c7826f4A33, 70500000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0xe3b7C5A000FCd6EfEa699c67F59419c7826f4A33, 282000000, month, true);\r\n        /* Investor 6 */\r\n        setInitialDistribution(0x9A17D8ad0906D1dfcd79337512eF7Dc20caB5790, 50000000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0x9A17D8ad0906D1dfcd79337512eF7Dc20caB5790, 200000000, month, true);\r\n        /* Investor 7 */\r\n        setInitialDistribution(0x1299b87288e3A997165C738d898ebc6572Fb3905, 30000000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0x1299b87288e3A997165C738d898ebc6572Fb3905, 120000000, month, true);\r\n        /* Investor 8 */\r\n        setInitialDistribution(0xeF26a8cdD11127E5E6E2c324EC001159651aBa6e, 15000000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0xeF26a8cdD11127E5E6E2c324EC001159651aBa6e, 60000000, month, true);\r\n        /* Investor 9 */\r\n        setInitialDistribution(0xE6A21B21355D43754EB6166b266C033f4bc172A4, 102100000, 0 /* No Lock */, false);\r\n        setInitialDistribution(0xE6A21B21355D43754EB6166b266C033f4bc172A4, 408400000, month, true);\r\n       \r\n        /* Public Sale */\r\n        setInitialDistribution(0xa8Ff08339F023Ea7B66F32586882c31DB4f35576, 25000000, 0 /* No Lock */, false);\r\n\r\n    }\r\n\r\n    function setTokenAddress(address _tokenAddress) external onlyOwner whenNotPaused  {\r\n        erc20 = ERC20(_tokenAddress);\r\n    }\r\n    \r\n    function safeGuardAllTokens(address _address) external onlyOwner whenPaused  { /* In case of needed urgency for the sake of contract bug */\r\n        require(erc20.transfer(_address, erc20.balanceOf(address(this))));\r\n    }\r\n\r\n    function setTGEDate(uint256 _time) external onlyOwner whenNotPaused  {\r\n        TGEDate = _time;\r\n    }\r\n\r\n    /**\r\n    *   Should allow any address to trigger it, but since the calls are atomic it should do only once per day\r\n     */\r\n\r\n    function triggerTokenSend() external whenNotPaused  {\r\n        /* Require TGE Date already been set */\r\n        require(TGEDate != 0, \"TGE date not set yet\");\r\n        /* TGE has not started */\r\n        require(block.timestamp > TGEDate, \"TGE still hasn´t started\");\r\n        /* Test that the call be only done once per day */\r\n        require(block.timestamp.sub(lastDateDistribution) > 1 days, \"Can only be called once a day\");\r\n        lastDateDistribution = block.timestamp;\r\n        /* Go thru all tokenOwners */\r\n        for(uint i = 0; i < tokenOwners.length; i++) {\r\n            /* Get Address Distribution */\r\n            DistributionStep[] memory d = distributions[tokenOwners[i]];\r\n            /* Go thru all distributions array */\r\n            for(uint j = 0; j < d.length; j++){\r\n                if( (block.timestamp.sub(TGEDate) > d[j].unlockDay) /* Verify if unlockDay has passed */\r\n                    && (d[j].currentAllocated > 0) /* Verify if currentAllocated > 0, so that address has tokens to be sent still */\r\n                ){\r\n                    /* Check if is Daily of Normal Withdrawal */\r\n                    bool isDaily = d[j].isDaily;\r\n                    uint256 sendingAmount;\r\n                    if(!isDaily){\r\n                        /* Non Daily */\r\n                        sendingAmount = d[j].currentAllocated;\r\n                    }else{\r\n                        /* Daily */\r\n                        if(daysPassed >= 365){\r\n                            /* Last Day */\r\n                            sendingAmount = d[j].currentAllocated;\r\n                        }else{\r\n                            sendingAmount = d[j].amountAllocated.div(daysLockWhenDaily); \r\n                        }\r\n                        daysPassed = daysPassed.add(1);\r\n                    }\r\n\r\n                    distributions[tokenOwners[i]][j].currentAllocated = distributions[tokenOwners[i]][j].currentAllocated.sub(sendingAmount);\r\n                    distributions[tokenOwners[i]][j].amountSent = distributions[tokenOwners[i]][j].amountSent.add(sendingAmount);\r\n                    require(erc20.transfer(tokenOwners[i], sendingAmount));\r\n                }\r\n            }\r\n        }   \r\n    }\r\n\r\n    function setInitialDistribution(address _address, uint256 _tokenAmount, uint256 _unlockDays, bool _isDaily) internal onlyOwner whenNotPaused {\r\n        /* Add tokenOwner to Eachable Mapping */\r\n        bool isAddressPresent = false;\r\n\r\n        /* Verify if tokenOwner was already added */\r\n        for(uint i = 0; i < tokenOwners.length; i++) {\r\n            if(tokenOwners[i] == _address){\r\n                isAddressPresent = true;\r\n            }\r\n        }\r\n        /* Create DistributionStep Object */\r\n        DistributionStep memory distributionStep = DistributionStep(_tokenAmount * decimals, _tokenAmount * decimals, _unlockDays, 0, _isDaily);\r\n        /* Attach */\r\n        distributions[_address].push(distributionStep);\r\n\r\n        /* If Address not present in array of iterable token owners */\r\n        if(!isAddressPresent){\r\n            tokenOwners.push(_address);\r\n        }\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributions\",\"outputs\":[{\"name\":\"amountAllocated\",\"type\":\"uint256\"},{\"name\":\"currentAllocated\",\"type\":\"uint256\"},{\"name\":\"unlockDay\",\"type\":\"uint256\"},{\"name\":\"amountSent\",\"type\":\"uint256\"},{\"name\":\"isDaily\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTGEDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"month\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDateDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daysLockWhenDaily\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"triggerTokenSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"safeGuardAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TGEDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"year\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daysPassed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DistributionContract","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://354c895fe51eed4b40cab91a509f08511145ccae764b6d2ee2d77c3916685fa3"}]}