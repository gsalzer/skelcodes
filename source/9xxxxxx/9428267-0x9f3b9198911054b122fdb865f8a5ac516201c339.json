{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IVaultRecoverable {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        if (_token == ETH) {\r\n            vault.transfer(address(this).balance);\r\n        } else {\r\n            uint256 amount = ERC20(_token).balanceOf(this);\r\n            ERC20(_token).transfer(vault, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_EXECUTION_REVERTED = \"EVMRUN_EXECUTION_REVERTED\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n        require(address(executor).delegatecall(data), ERROR_EXECUTION_REVERTED);\r\n\r\n        bytes memory output = returnedDataDecoded();\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n    * @dev copies and returns last's call data. Needs to ABI decode first\r\n    */\r\n    function returnedDataDecoded() internal pure returns (bytes ret) {\r\n        assembly {\r\n            let size := returndatasize\r\n            switch size\r\n            case 0 {}\r\n            default {\r\n                ret := mload(0x40) // free mem ptr get\r\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\r\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {}\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\r\n// that they are automatically usable by subclassing contracts\r\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with _params and a new length, and _params becomes invalid from this point forward\r\n        bytes memory how;\r\n        uint256 byteLength = _params.length * 32;\r\n        assembly {\r\n            how := _params\r\n            mstore(how, byteLength)\r\n        }\r\n        return linkedKernel.hasPermission(_sender, address(this), _role, how);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n}\r\n\r\n// File: contracts/acl/IACLOracle.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACLOracle {\r\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\r\n}\r\n\r\n// File: contracts/acl/ACL.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* solium-disable function-order */\r\n// Allow public initialize() to be first\r\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\"CREATE_PERMISSIONS_ROLE\");\r\n    */\r\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\r\n\r\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\r\n\r\n    struct Param {\r\n        uint8 id;\r\n        uint8 op;\r\n        uint240 value; // even though value is an uint240 it can store addresses\r\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\r\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\r\n    }\r\n\r\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\r\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\r\n    // 202 is unused\r\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\r\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\r\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\r\n    // TODO: Add execution times param type?\r\n\r\n    /* Hardcoded constant to save gas\r\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\r\n    */\r\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\r\n    bytes32 public constant NO_PERMISSION = bytes32(0);\r\n    address public constant ANY_ENTITY = address(-1);\r\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \"no permission manager\"\r\n\r\n    string private constant ERROR_AUTH_INIT_KERNEL = \"ACL_AUTH_INIT_KERNEL\";\r\n    string private constant ERROR_AUTH_NO_MANAGER = \"ACL_AUTH_NO_MANAGER\";\r\n    string private constant ERROR_EXISTENT_MANAGER = \"ACL_EXISTENT_MANAGER\";\r\n\r\n    // Whether someone has a permission\r\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\r\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\r\n\r\n    // Who is the manager of a permission\r\n    mapping (bytes32 => address) internal permissionManager;\r\n\r\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\r\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\r\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\r\n\r\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\r\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\r\n        _;\r\n    }\r\n\r\n    modifier noPermissionManager(address _app, bytes32 _role) {\r\n        // only allow permission creation (or re-creation) when there is no manager\r\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\r\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\r\n    * @param _permissionsCreator Entity that will be given permission over createPermission\r\n    */\r\n    function initialize(address _permissionsCreator) public onlyInit {\r\n        initialized();\r\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\r\n\r\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\r\n    }\r\n\r\n    /**\r\n    * @dev Creates a permission that wasn't previously set and managed.\r\n    *      If a created permission is removed it is possible to reset it with createPermission.\r\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\r\n    *      have a manager.\r\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\r\n    *      state-changing external functions, as they all require the sender to be a manager.\r\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\r\n    * @param _role Identifier for the group of actions in app given access to perform\r\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\r\n    */\r\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\r\n        external\r\n        auth(CREATE_PERMISSIONS_ROLE)\r\n        noPermissionManager(_app, _role)\r\n    {\r\n        _createPermission(_entity, _app, _role, _manager);\r\n    }\r\n\r\n    /**\r\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\r\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\r\n    * @param _role Identifier for the group of actions in app given access to perform\r\n    */\r\n    function grantPermission(address _entity, address _app, bytes32 _role)\r\n        external\r\n    {\r\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\r\n    }\r\n\r\n    /**\r\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\r\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\r\n    * @param _role Identifier for the group of actions in app given access to perform\r\n    * @param _params Permission parameters\r\n    */\r\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\r\n        public\r\n        onlyPermissionManager(_app, _role)\r\n    {\r\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\r\n        _setPermission(_entity, _app, _role, paramsHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\r\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\r\n    * @param _entity Address of the whitelisted entity to revoke access from\r\n    * @param _app Address of the app in which the role will be revoked\r\n    * @param _role Identifier for the group of actions in app being revoked\r\n    */\r\n    function revokePermission(address _entity, address _app, bytes32 _role)\r\n        external\r\n        onlyPermissionManager(_app, _role)\r\n    {\r\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\r\n    }\r\n\r\n    /**\r\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\r\n    * @param _newManager Address for the new manager\r\n    * @param _app Address of the app in which the permission management is being transferred\r\n    * @param _role Identifier for the group of actions being transferred\r\n    */\r\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\r\n        external\r\n        onlyPermissionManager(_app, _role)\r\n    {\r\n        _setPermissionManager(_newManager, _app, _role);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove the manager of `_role` in `_app`\r\n    * @param _app Address of the app in which the permission is being unmanaged\r\n    * @param _role Identifier for the group of actions being unmanaged\r\n    */\r\n    function removePermissionManager(address _app, bytes32 _role)\r\n        external\r\n        onlyPermissionManager(_app, _role)\r\n    {\r\n        _setPermissionManager(address(0), _app, _role);\r\n    }\r\n\r\n    /**\r\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\r\n    * @param _app Address of the app in which the permission is being burned\r\n    * @param _role Identifier for the group of actions being burned\r\n    */\r\n    function createBurnedPermission(address _app, bytes32 _role)\r\n        external\r\n        auth(CREATE_PERMISSIONS_ROLE)\r\n        noPermissionManager(_app, _role)\r\n    {\r\n        _setPermissionManager(BURN_ENTITY, _app, _role);\r\n    }\r\n\r\n    /**\r\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\r\n    * @param _app Address of the app in which the permission is being burned\r\n    * @param _role Identifier for the group of actions being burned\r\n    */\r\n    function burnPermissionManager(address _app, bytes32 _role)\r\n        external\r\n        onlyPermissionManager(_app, _role)\r\n    {\r\n        _setPermissionManager(BURN_ENTITY, _app, _role);\r\n    }\r\n\r\n    /**\r\n     * @notice Get parameters for permission array length\r\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n     * @param _app Address of the app\r\n     * @param _role Identifier for a group of actions in app\r\n     * @return Length of the array\r\n     */\r\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\r\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\r\n    }\r\n\r\n    /**\r\n    * @notice Get parameter for permission\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app\r\n    * @param _role Identifier for a group of actions in app\r\n    * @param _index Index of parameter in the array\r\n    * @return Parameter (id, op, value)\r\n    */\r\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\r\n        external\r\n        view\r\n        returns (uint8, uint8, uint240)\r\n    {\r\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\r\n        return (param.id, param.op, param.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Get manager for permission\r\n    * @param _app Address of the app\r\n    * @param _role Identifier for a group of actions in app\r\n    * @return address of the manager for the permission\r\n    */\r\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\r\n        return permissionManager[roleHash(_app, _role)];\r\n    }\r\n\r\n    /**\r\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\r\n    * @param _who Sender of the original call\r\n    * @param _where Address of the app\r\n    * @param _where Identifier for a group of actions in app\r\n    * @param _how Permission parameters\r\n    * @return boolean indicating whether the ACL allows the role or not\r\n    */\r\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with _how and a new length, and _how becomes invalid from this point forward\r\n        uint256[] memory how;\r\n        uint256 intsLength = _how.length / 32;\r\n        assembly {\r\n            how := _how\r\n            mstore(how, intsLength)\r\n        }\r\n\r\n        return hasPermission(_who, _where, _what, how);\r\n    }\r\n\r\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\r\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\r\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\r\n            return true;\r\n        }\r\n\r\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\r\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\r\n        uint256[] memory empty = new uint256[](0);\r\n        return hasPermission(_who, _where, _what, empty);\r\n    }\r\n\r\n    function evalParams(\r\n        bytes32 _paramsHash,\r\n        address _who,\r\n        address _where,\r\n        bytes32 _what,\r\n        uint256[] _how\r\n    ) public view returns (bool)\r\n    {\r\n        if (_paramsHash == EMPTY_PARAM_HASH) {\r\n            return true;\r\n        }\r\n\r\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\r\n    */\r\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\r\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\r\n        _setPermissionManager(_manager, _app, _role);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function called to actually save the permission\r\n    */\r\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\r\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\r\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\r\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\r\n\r\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\r\n        if (permissionHasParams) {\r\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\r\n        }\r\n    }\r\n\r\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\r\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\r\n        Param[] storage params = permissionParams[paramHash];\r\n\r\n        if (params.length == 0) { // params not saved before\r\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\r\n                uint256 encodedParam = _encodedParams[i];\r\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\r\n                params.push(param);\r\n            }\r\n        }\r\n\r\n        return paramHash;\r\n    }\r\n\r\n    function _evalParam(\r\n        bytes32 _paramsHash,\r\n        uint32 _paramId,\r\n        address _who,\r\n        address _where,\r\n        bytes32 _what,\r\n        uint256[] _how\r\n    ) internal view returns (bool)\r\n    {\r\n        if (_paramId >= permissionParams[_paramsHash].length) {\r\n            return false; // out of bounds\r\n        }\r\n\r\n        Param memory param = permissionParams[_paramsHash][_paramId];\r\n\r\n        if (param.id == LOGIC_OP_PARAM_ID) {\r\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\r\n        }\r\n\r\n        uint256 value;\r\n        uint256 comparedTo = uint256(param.value);\r\n\r\n        // get value\r\n        if (param.id == ORACLE_PARAM_ID) {\r\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\r\n            comparedTo = 1;\r\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\r\n            value = getBlockNumber();\r\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\r\n            value = getTimestamp();\r\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\r\n            value = uint256(param.value);\r\n        } else {\r\n            if (param.id >= _how.length) {\r\n                return false;\r\n            }\r\n            value = uint256(uint240(_how[param.id])); // force lost precision\r\n        }\r\n\r\n        if (Op(param.op) == Op.RET) {\r\n            return uint256(value) > 0;\r\n        }\r\n\r\n        return compare(value, Op(param.op), comparedTo);\r\n    }\r\n\r\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (Op(_param.op) == Op.IF_ELSE) {\r\n            uint32 conditionParam;\r\n            uint32 successParam;\r\n            uint32 failureParam;\r\n\r\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\r\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\r\n\r\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\r\n        }\r\n\r\n        uint32 param1;\r\n        uint32 param2;\r\n\r\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\r\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\r\n\r\n        if (Op(_param.op) == Op.NOT) {\r\n            return !r1;\r\n        }\r\n\r\n        if (r1 && Op(_param.op) == Op.OR) {\r\n            return true;\r\n        }\r\n\r\n        if (!r1 && Op(_param.op) == Op.AND) {\r\n            return false;\r\n        }\r\n\r\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\r\n\r\n        if (Op(_param.op) == Op.XOR) {\r\n            return r1 != r2;\r\n        }\r\n\r\n        return r2; // both or and and depend on result of r2 after checks\r\n    }\r\n\r\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\r\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\r\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\r\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\r\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\r\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\r\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\r\n        return false;\r\n    }\r\n\r\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\r\n        bytes4 sig = _oracleAddr.canPerform.selector;\r\n\r\n        // a raw call is required so we can return false if the call reverts, rather than reverting\r\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\r\n\r\n        bool ok;\r\n        assembly {\r\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\r\n            // note that we are currently guaranteed to still have some gas after the call from\r\n            // EIP-150's 63/64 gas forward rule\r\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\r\n        }\r\n\r\n        if (!ok) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := returndatasize }\r\n        if (size != 32) {\r\n            return false;\r\n        }\r\n\r\n        bool result;\r\n        assembly {\r\n            let ptr := mload(0x40)       // get next free memory ptr\r\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\r\n            result := mload(ptr)         // read data at ptr and set it to result\r\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that sets management\r\n    */\r\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\r\n        permissionManager[roleHash(_app, _role)] = _newManager;\r\n        emit ChangePermissionManager(_app, _role, _newManager);\r\n    }\r\n\r\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"ROLE\", _where, _what));\r\n    }\r\n\r\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"PERMISSION\", _who, _where, _what));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"createBurnedPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"burnPermissionManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"grantPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"getPermissionParamsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"uint256[]\"}],\"name\":\"evalParams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO_PERMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_PERMISSIONS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"grantPermissionP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"revokePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPermissionParam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint240\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ANY_ENTITY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"removePermissionManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"setPermissionManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"getPermissionManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"createPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionsCreator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EMPTY_PARAM_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ENTITY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"uint256[]\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"bytes\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SetPermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"name\":\"SetPermissionParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ChangePermissionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"}]","ContractName":"ACL","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://6412024817e0c96c4d51751f657dd8d3f184d95a90605096d0395eb3a79f0705"}]}