{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract PerfectLife {\r\n\t/* https://perfectlife.cc */\r\n\r\n\tuint ethWei = 1 ether;\r\n\taddress payable private scAddr = address(0x3BE2Ebf293D1C143C55c418bbBdDff06320763b2);\r\n\taddress payable private qcAddr = address(0xf4243a31536243D76F7400e3A94105075E3184fE);\r\n\taddress payable private payAddr = address(0xD74b0891493a27AbcAF7AB5D1277aa1D5c807017);\r\n\taddress payable private interestAddr = address(0x2c166a85672504F79efB2dedB443AD3474081208);\r\n    address payable private mainAddr = address(0xFecC74EA9E8e6354c5b0DEEeF3caf2BdcFbfd8bC);\r\n\t\r\n\tstruct User {\r\n\t\tuint id;\r\n\t\taddress userAddress;\r\n\t\tuint freeAmount;\r\n\t\tuint freezeAmount;\r\n\t\tuint lineAmount;\r\n\t\tuint inviteAmonut;\r\n\t\tuint dayBonusAmount;\r\n\t\tuint bonusAmount;\r\n\t\tuint level;\r\n\t\tuint lineLevel;\r\n\t\tuint resTime;\r\n\t\tuint investTimes;\r\n\t\tstring inviteCode;\r\n\t\tstring beCode;\r\n\t\tuint rewardIndex;\r\n\t\tuint lastRwTime;\r\n\t}\r\n\r\n\tstruct UserGlobal {\r\n\t\tuint id;\r\n\t\taddress userAddress;\r\n\t\tstring inviteCode;\r\n\t\tstring beCode;\r\n\t\tuint status;\r\n\t}\r\n\r\n\tstruct AwardData {\r\n\t\tuint oneInvAmount;\r\n\t\tuint twoInvAmount;\r\n\t\tuint threeInvAmount;\r\n\t}\r\n\r\n\tuint startTime;\r\n\tuint lineStatus = 0;\r\n\tmapping(uint => uint) rInvestCount;\r\n\tmapping(uint => uint) rInvestMoney;\r\n\tuint period = 1 days;\r\n\tuint uid = 0;\r\n\tuint rid = 1;\r\n\tmapping(uint => uint[]) lineArrayMapping;\r\n\tmapping(uint => mapping(address => User)) userRoundMapping;\r\n\tmapping(address => UserGlobal) userMapping;\r\n\tmapping(string => address) addressMapping;\r\n\tmapping(uint => address) indexMapping;\r\n\tmapping(uint => mapping(address => mapping(uint => AwardData))) userAwardDataMapping;\r\n\tuint bonuslimit = 15 ether;\r\n\tuint sendLimit = 100 ether;\r\n\tuint withdrawLimit = 15 ether;\r\n\tuint canImport = 1;\r\n\tuint canSetStartTime = 1;\r\n\r\n\tmodifier isHuman() {\r\n\t\taddress addr = msg.sender;\r\n\t\tuint codeLength;\r\n\t\tassembly {codeLength := extcodesize(addr)}\r\n\t\trequire(codeLength == 0, \"sorry humans only\");\r\n\t\trequire(tx.origin == msg.sender, \"sorry, humans only\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor () public {\r\n\t}\r\n\r\n\tfunction() external payable {\r\n\t}\r\n\r\n\r\n\tfunction verydangerous(uint time) external  {\r\n\t\trequire(canSetStartTime == 1, \"verydangerous, limited!\");\r\n\t\trequire(time > now, \"no, verydangerous\");\r\n\t\tstartTime = time;\r\n\t\tcanSetStartTime = 0;\r\n\t}\r\n\r\n\tfunction donnotimitate() public view returns (bool) {\r\n\t\treturn startTime != 0 && now > startTime;\r\n\t}\r\n\r\n\r\n\tfunction isLine() private view returns (bool) {\r\n\t\treturn lineStatus != 0;\r\n\t}\r\n\r\n\tfunction actAllLimit(uint bonusLi, uint sendLi, uint withdrawLi) external {\r\n\t\trequire(bonusLi >= 15 ether && sendLi >= 100 ether && withdrawLi >= 15 ether, \"invalid amount\");\r\n\t\tbonuslimit = bonusLi;\r\n\t\tsendLimit = sendLi;\r\n\t\twithdrawLimit = withdrawLi;\r\n\t}\r\n\r\n\tfunction stopImport() external  {\r\n\t\tcanImport = 0;\r\n\t}\r\n\r\n\tfunction exit(string memory inviteCode, string memory beCode) public isHuman() payable {\r\n\t\trequire(donnotimitate(), \"no, donnotimitate\");\r\n\t\trequire(msg.value >= 1 * ethWei && msg.value <= 15 * ethWei, \"between 1 and 15\");\r\n\t\t\r\n\t\tUserGlobal storage userGlobal = userMapping[msg.sender];\r\n\t\tif (userGlobal.id == 0) {\r\n\t\t\taddress beCodeAddr = addressMapping[beCode];\r\n\t\t\trequire(isUsed(beCode), \"beCode not exist\");\r\n\t\t\trequire(beCodeAddr != msg.sender, \"beCodeAddr can't be self\");\r\n\t\t\trequire(!isUsed(inviteCode), \"invite code is used\");\r\n\t\t\tregisterUser(msg.sender, inviteCode, beCode);\r\n\t\t}\r\n\t\tuint investAmout;\r\n\t\tuint lineAmount;\r\n\t\tif (isLine()) {\r\n\t\t\tlineAmount = msg.value;\r\n\t\t} else {\r\n\t\t\tinvestAmout = msg.value;\r\n\t\t}\r\n\t\tUser storage user = userRoundMapping[rid][msg.sender];\r\n\t\tif (user.id != 0) {\r\n\t\t\tuser.freezeAmount = investAmout;\r\n\t\t\tuser.lineAmount = lineAmount;\r\n\t\t} else {\r\n\t\t\tuser.id = userGlobal.id;\r\n\t\t\tuser.userAddress = msg.sender;\r\n\t\t\tuser.freezeAmount = investAmout;\r\n\t\t\tuser.lineAmount = lineAmount;\r\n\t\t    user.inviteCode = userGlobal.inviteCode;\r\n\t\t\tuser.beCode = userGlobal.beCode;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction happy() public isHuman() {\r\n\t\trequire(donnotimitate(), \"no donnotimitate\");\r\n\t\tUser storage user = userRoundMapping[rid][msg.sender];\r\n\t\trequire(user.id != 0, \"user not exist\");\r\n\t\tuint sendMoney = user.freeAmount + user.lineAmount;\r\n\t\tbool isEnough = false;\r\n\t\tuint resultMoney = 0;\r\n\r\n\t\t(isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n\r\n\t\tif (resultMoney > 0 && resultMoney <= withdrawLimit) {\r\n\t\t\tsendMoneyToUser(msg.sender, resultMoney);\r\n\t\t\tuser.freeAmount = 0;\r\n\t\t\tuser.lineAmount = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n\t\tif (sendMoney >= address(this).balance) {\r\n\t\t\treturn (false, address(this).balance);\r\n\t\t} else {\r\n\t\t\treturn (true, sendMoney);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction sendMoneyToUser(address payable userAddress, uint money) private {\r\n\t\tif (money > 0) {\r\n\t\t\tuserAddress.transfer(money);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction isUsed(string memory code) public view returns (bool) {\r\n\t\taddress addr = addressMapping[code];\r\n\t\treturn uint(addr) != 0;\r\n\t}\r\n\r\n\tfunction getUserAddressByCode(string memory code) public view returns (address) {\r\n\t\r\n\t\treturn addressMapping[code];\r\n\t}\r\n\r\n\tfunction registerUser(address addr, string memory inviteCode, string memory beCode) private {\r\n\t\tUserGlobal storage userGlobal = userMapping[addr];\r\n\t\tuid++;\r\n\t\tuserGlobal.id = uid;\r\n\t\tuserGlobal.userAddress = addr;\r\n\t\tuserGlobal.inviteCode = inviteCode;\r\n\t\tuserGlobal.beCode = beCode;\r\n\r\n\t\taddressMapping[inviteCode] = addr;\r\n\t\tindexMapping[uid] = addr;\r\n\t}\r\n\r\n\r\n\r\n\tfunction donnottouch() public view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n\t\treturn (\r\n\t\trid,\r\n\t\tuid,\r\n\t\tstartTime,\r\n\t\trInvestCount[rid],\r\n\t\trInvestMoney[rid],\r\n\t\tbonuslimit,\r\n\t\tsendLimit,\r\n\t\twithdrawLimit,\r\n\t\tcanImport,\r\n\t\tlineStatus,\r\n\t\tlineArrayMapping[rid].length,\r\n\t\tcanSetStartTime\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getUserByAddress(address addr, uint roundId) public view returns (uint[14] memory info, string memory inviteCode, string memory beCode) {\r\n\t\t\r\n\t\tif (roundId == 0) {\r\n\t\t\troundId = rid;\r\n\t\t}\r\n\r\n\t\tUserGlobal memory userGlobal = userMapping[addr];\r\n\t\tUser memory user = userRoundMapping[roundId][addr];\r\n\t\tinfo[0] = userGlobal.id;\r\n\t\tinfo[1] = user.lineAmount;\r\n\t\tinfo[2] = user.freeAmount;\r\n\t\tinfo[3] = user.freezeAmount;\r\n\t\tinfo[4] = user.inviteAmonut;\r\n\t\tinfo[5] = user.bonusAmount;\r\n\t\tinfo[6] = user.lineLevel;\r\n\t\tinfo[7] = user.dayBonusAmount;\r\n\t\tinfo[8] = user.rewardIndex;\r\n\t\tinfo[9] = user.investTimes;\r\n\t\tinfo[10] = user.level;\r\n\t\tuint grantAmount = 0;\r\n\t\tif (user.id > 0 && user.freezeAmount >= 1 ether && user.freezeAmount <= bonuslimit && user.investTimes < 5 && userGlobal.status != 1) {\r\n\t\t\tgrantAmount += user.dayBonusAmount;\r\n\t\t}\r\n\t\r\n\t\tinfo[11] = grantAmount;\r\n\t\tinfo[12] = user.lastRwTime;\r\n\t\tinfo[13] = userGlobal.status;\r\n\r\n\t\treturn (info, userGlobal.inviteCode, userGlobal.beCode);\r\n\t}\r\n\r\n\tfunction getUserAddressById(uint id) public view returns (address) {\r\n\t\treturn indexMapping[id];\r\n\t}\r\n\r\n\tfunction getLineUserId(uint index, uint rouId) public view returns (uint) {\r\n\t\tif (rouId == 0) {\r\n\t\t\trouId = rid;\r\n\t\t}\r\n\t\treturn lineArrayMapping[rid][index];\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beCode\",\"type\":\"string\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopImport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"name\":\"info\",\"type\":\"uint256[14]\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"beCode\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"rouId\",\"type\":\"uint256\"}],\"name\":\"getLineUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"verydangerous\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donnottouch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserAddressById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getUserAddressByCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonusLi\",\"type\":\"uint256\"},{\"name\":\"sendLi\",\"type\":\"uint256\"},{\"name\":\"withdrawLi\",\"type\":\"uint256\"}],\"name\":\"actAllLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"happy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"donnotimitate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PerfectLife","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://ddda3c4bc1de7842d18b5031860143be946736f0ca84c2cc82c325c1fa042f0b"}]}