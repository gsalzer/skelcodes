{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @title Multicall2 - Aggregate results from multiple read-only function calls. Allow failures\r\n/// @author Michael Elliot <mike@makerdao.com>\r\n/// @author Joshua Levine <joshua@makerdao.com>\r\n/// @author Nick Johnson <arachnid@notdot.net>\r\n/// @author Bryan Stitt <bryan@satoshiandkin.com>\r\n\r\ncontract Multicall2 {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n    struct Result {\r\n        bool success;\r\n        bytes returnData;\r\n    }\r\n\r\n    // Multiple calls in one! (Replaced by block_and_aggregate and try_block_and_aggregate)\r\n    // Reverts if any call fails.\r\n    function aggregate(Call[] memory calls)\r\n        public\r\n        returns (uint256 blockNumber, bytes[] memory returnData)\r\n    {\r\n        blockNumber = block.number;\r\n        returnData = new bytes[](calls.length);\r\n        for(uint256 i = 0; i < calls.length; i++) {\r\n            // we use low level calls to intionally allow calling arbitrary functions.\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\r\n            require(success, \"Multicall2 aggregate: call failed\");\r\n            returnData[i] = ret;\r\n        }\r\n    }\r\n\r\n    // Multiple calls in one!\r\n    // Reverts if any call fails.\r\n    // Use when you are querying the latest block and need all the calls to succeed.\r\n    // Check the hash to protect yourself from re-orgs!\r\n    function block_and_aggregate(Call[] memory calls)\r\n        public\r\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData)\r\n    {\r\n        (blockNumber, blockHash, returnData) = try_block_and_aggregate(true, calls);\r\n    }\r\n\r\n    // Multiple calls in one!\r\n    // If `require_success == true`, this revert if a call fails.\r\n    // If `require_success == false`, failures are allowed. Check the success bool before using the returnData.\r\n    // Use when you are querying the latest block.\r\n    // Returns the block and hash so you can protect yourself from re-orgs.\r\n    function try_block_and_aggregate(bool require_success, Call[] memory calls)\r\n        public\r\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData)\r\n    {\r\n        blockNumber = block.number;\r\n        blockHash = blockhash(blockNumber);\r\n        returnData = try_aggregate(require_success, calls);\r\n    }\r\n\r\n    // Multiple calls in one!\r\n    // If `require_success == true`, this revert if a call fails.\r\n    // If `require_success == false`, failures are allowed. Check the success bool before using the returnData.\r\n    // Use when you are querying a specific block number and hash.\r\n    function try_aggregate(bool require_success, Call[] memory calls)\r\n        public\r\n        returns (Result[] memory returnData)\r\n    {\r\n        returnData = new Result[](calls.length);\r\n\r\n        for(uint256 i = 0; i < calls.length; i++) {\r\n            // we use low level calls to intionally allow calling arbitrary functions.\r\n            // solium-disable-next-line security/no-low-level-calls\r\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\r\n\r\n            if (require_success) {\r\n                // TODO: give a more useful message about specifically which call failed\r\n                require(success, \"Multicall2 aggregate: call failed\");\r\n            }\r\n\r\n            returnData[i] = Result(success, ret);\r\n        }\r\n    }\r\n\r\n\r\n    // Helper functions\r\n    function getBlockHash() public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(block.number);\r\n    }\r\n    function getBlockNumber() public view returns (uint256 blockNumber) {\r\n        blockNumber = block.number;\r\n    }\r\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\r\n        coinbase = block.coinbase;\r\n    }\r\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\r\n        difficulty = block.difficulty;\r\n    }\r\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\r\n        gaslimit = block.gaslimit;\r\n    }\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        // solium-disable-next-line security/no-block-members\r\n        timestamp = block.timestamp;\r\n    }\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(block.number - 1);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"block_and_aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"require_success\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"try_aggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"require_success\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"try_block_and_aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Multicall2","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4964a569897c40b8538c627c4eb9688ca5a652bbe506c635bd8135b27b0290ab"}]}