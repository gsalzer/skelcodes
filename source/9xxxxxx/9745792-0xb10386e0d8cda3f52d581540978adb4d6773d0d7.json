{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.0 <0.6.0;\r\n \r\n interface tokenToTransfer {\r\n        function transfer(address to, uint256 value) external;\r\n        function transferFrom(address from, address to, uint256 value) external;\r\n        function balanceOf(address owner) external returns (uint256);\r\n    }\r\n    \r\n    contract Ownable {\r\n        address private _owner;\r\n        \r\n        constructor() public {\r\n            _owner = msg.sender;\r\n        }\r\n        \r\n        modifier onlyOwner() {\r\n            require(isOwner());\r\n            _;\r\n         }\r\n          \r\n        function isOwner() public view returns(bool) {\r\n            return msg.sender == _owner;\r\n         }\r\n          \r\n        function transferOwnership(address newOwner) public onlyOwner {\r\n            _transferOwnership(newOwner);\r\n        }\r\n        \r\n        function _transferOwnership(address newOwner) internal {\r\n            require(newOwner != address(0));\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    contract StakeImperial is Ownable {\r\n    //Setup of public variables for maintaing between contract transactions\r\n    address ImperialAddress = address(0xA20DF70f6f5935ecde3ED789bc6f7c19fef14087);\r\n    tokenToTransfer public sendtTransaction;\r\n    \r\n    //Setup of staking variables for contract maintenance \r\n    mapping (address => uint256) private stake;\r\n    mapping (address => uint256) private timeinStake;\r\n    uint256 private time = now;\r\n    uint256 private reward;\r\n    uint256 private timeVariable = 86400;\r\n    uint256 private allStakes;\r\n    bool private higherReward = true;\r\n    \r\n    function View_Balance() public view returns (uint256) {\r\n        sendtTransaction = tokenToTransfer(ImperialAddress);\r\n        return sendtTransaction.balanceOf(msg.sender);\r\n    }\r\n    \r\n    function initateStake() public {\r\n        //uint256 stakedAmount = stake * 1000000;\r\n        sendtTransaction = tokenToTransfer(ImperialAddress);\r\n        uint256 stakedAmount = View_Balance();\r\n        sendtTransaction.transferFrom(msg.sender, address(this), stakedAmount);\r\n        stake[msg.sender] = stakedAmount;\r\n        allStakes += stakedAmount;\r\n        timeinStake[msg.sender] = now;\r\n    }\r\n    \r\n    function displayStake() public view returns (uint256) {\r\n        return stake[msg.sender];\r\n    }\r\n    \r\n    function displayBalance() public view returns (uint256) {\r\n        uint256 balanceTime = (now - timeinStake[msg.sender]) / timeVariable;\r\n        if (higherReward == true) {\r\n        return balanceTime * reward * stake[msg.sender];\r\n        } else {\r\n        balanceTime = balanceTime * (stake[msg.sender] / reward) + stake[msg.sender];\r\n        return balanceTime;\r\n        }\r\n    }\r\n    \r\n    function displayAllStakes() public view returns (uint256) {\r\n        return allStakes;\r\n    }\r\n    \r\n    function displayTimeVariable() public view returns (uint256) {\r\n        return timeVariable;\r\n    }\r\n    \r\n    function displayTimeWhenUserStaked() public view returns (uint256) {\r\n        return timeinStake[msg.sender];\r\n    }\r\n    \r\n    //Admin change address to updated address function\r\n    function changeImperialAddresstoNew(address change) public onlyOwner {\r\n        ImperialAddress = change;\r\n    }\r\n    \r\n    //Admin change reward function\r\n    function changeReward(uint256 change) public onlyOwner {\r\n        reward = change;\r\n    }\r\n    \r\n    //Admin change reward function\r\n    function changeTimeVariable(uint256 change) public onlyOwner {\r\n        timeVariable = change;\r\n    }\r\n    \r\n    //Admin reward function for lower than 100%\r\n    function changeRewardtoLower(bool value) public onlyOwner {\r\n        higherReward = value;\r\n    }\r\n    \r\n    //Admin reset time balance to reset stake to new level\r\n    function resetTime() public onlyOwner {\r\n        time = now;\r\n    }\r\n    \r\n    function withdrawBalance() public {\r\n            if (timeinStake[msg.sender] == 0) {\r\n                revert();\r\n            }\r\n        if (higherReward = true) {\r\n        sendtTransaction = tokenToTransfer(ImperialAddress);\r\n        uint256 getUserBalance = displayBalance();\r\n        sendtTransaction.transfer(msg.sender, getUserBalance);\r\n        stake[msg.sender] = 0;\r\n        allStakes -= getUserBalance;\r\n        timeinStake[msg.sender] = 0;\r\n        }\r\n    }\r\n    \r\n    \r\n }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"displayAllStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"displayStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"displayTimeVariable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"displayBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initateStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"changeRewardtoLower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"change\",\"type\":\"uint256\"}],\"name\":\"changeTimeVariable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"displayTimeWhenUserStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"change\",\"type\":\"address\"}],\"name\":\"changeImperialAddresstoNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"View_Balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"change\",\"type\":\"uint256\"}],\"name\":\"changeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendtTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeImperial","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://02de5842c68fef7f676c7ba9fdd5ea5de6b54d9d7f3b47103fdaef0306fa200b"}]}