{"status":"1","message":"OK","result":[{"SourceCode":"// File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface IntVoteInterface {\r\n    //When implementing this interface please do not only override function and modifier,\r\n    //but also to keep the modifiers on the overridden functions.\r\n    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\r\n    modifier votable(bytes32 _proposalId) {revert(); _;}\r\n\r\n    event NewProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _numOfChoices,\r\n        address _proposer,\r\n        bytes32 _paramsHash\r\n    );\r\n\r\n    event ExecuteProposal(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        uint256 _decision,\r\n        uint256 _totalReputation\r\n    );\r\n\r\n    event VoteProposal(\r\n        bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _voter,\r\n        uint256 _vote,\r\n        uint256 _reputation\r\n    );\r\n\r\n    event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );\r\n    event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _numOfChoices number of voting choices\r\n     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n     * @param _proposer address\r\n     * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\r\n     * @return proposal's id.\r\n     */\r\n    function propose(\r\n        uint256 _numOfChoices,\r\n        bytes32 _proposalParameters,\r\n        address _proposer,\r\n        address _organization\r\n        ) external returns(bytes32);\r\n\r\n    function vote(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _rep,\r\n        address _voter\r\n    )\r\n    external\r\n    returns(bool);\r\n\r\n    function cancelVote(bytes32 _proposalId) external;\r\n\r\n    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);\r\n\r\n    function isVotable(bytes32 _proposalId) external view returns(bool);\r\n\r\n    /**\r\n     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _choice the index in the\r\n     * @return voted reputation for the given choice\r\n     */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);\r\n\r\n    /**\r\n     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n     * @return bool true or false\r\n     */\r\n    function isAbstainAllow() external pure returns(bool);\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ninterface VotingMachineCallbacksInterface {\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);\r\n    function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);\r\n\r\n    function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)\r\n    external\r\n    returns(bool);\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);\r\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/Reputation.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n      ///  given value, the block number attached is the one that last changed the\r\n      ///  value\r\n    struct Checkpoint {\r\n\r\n    // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n          // `value` is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n      // `balances` is the map that tracks the balance of each address, in this\r\n      //  contract when the balance changes the block number that the change\r\n      //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n      // Tracks the history of the `totalSupply` of the reputation\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    /// @notice Constructor to create a Reputation\r\n    constructor(\r\n    ) public\r\n    {\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of reputation\r\n    /// @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n  ////////////////\r\n  // Query balance and totalSupply in History\r\n  ////////////////\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n      /// @param _owner The address from which the balance will be retrieved\r\n      /// @param _blockNumber The block number when the balance is queried\r\n      /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n    public view returns (uint256)\r\n    {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\r\n      /// @param _blockNumber The block number when the totalSupply is queried\r\n      /// @return The total amount of reputation at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\r\n      /// @param _user The address that will be assigned the new reputation\r\n      /// @param _amount The quantity of reputation generated\r\n      /// @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n      /// @notice Burns `_amount` reputation from `_owner`\r\n      /// @param _user The address that will lose the reputation\r\n      /// @param _amount The quantity of reputation to burn\r\n      /// @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom < amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n  ////////////////\r\n  // Internal helper functions to query and set a value in a snapshot array\r\n  ////////////////\r\n\r\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\r\n      /// @param checkpoints The history of values being queried\r\n      /// @param _block The block number to retrieve the value at\r\n      /// @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n          // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n          // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n      ///  `totalSupplyHistory`\r\n      /// @param checkpoints The history of data being updated\r\n      /// @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/DAOToken.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n    uint256 public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\r\n    public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        if (cap > 0)\r\n            require(totalSupply().add(_amount) <= cap);\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n/*\r\n\r\nSafeERC20 by daostack.\r\nThe code is based on a fix by SECBIT Team.\r\n\r\nUSE WITH CAUTION & NO WARRANTY\r\n\r\nREFERENCE & RELATED READING\r\n- https://github.com/ethereum/solidity/issues/4116\r\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\r\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\r\n\r\n*/\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\r\n\r\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero.\r\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Avatar.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    using SafeERC20 for address;\r\n\r\n    string public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\r\n    event SendEther(uint256 _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\r\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\r\n    event ReceiveEther(address indexed _sender, uint256 _value);\r\n    event MetaData(string _metaData);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() external payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool    success or fail\r\n    *         bytes - the return bytes of the called contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\r\n    public\r\n    onlyOwner\r\n    returns(bool success, bytes memory returnValue) {\r\n      // solhint-disable-next-line avoid-call-value\r\n        (success, returnValue) = _contract.call.value(_value)(_data);\r\n        emit GenericCall(_contract, _data, _value, success);\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar's wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransfer(_to, _value);\r\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        IERC20 _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeApprove(_spender, _value);\r\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\r\n        emit MetaData(_metaData);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/universalSchemes/UniversalSchemeInterface.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\ncontract UniversalSchemeInterface {\r\n\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\r\n    \r\n}\r\n\r\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post, PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: contracts/controller/Controller.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens, reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ncontract Controller {\r\n\r\n    struct Scheme {\r\n        bytes32 paramsHash;  // a hash \"configuration\" of the scheme\r\n        bytes4  permissions; // A bitwise flags of permissions,\r\n                             // All 0: Not registered,\r\n                             // 1st bit: Flag if the scheme is registered,\r\n                             // 2nd bit: Scheme can register other schemes\r\n                             // 3rd bit: Scheme can add/remove global constraints\r\n                             // 4th bit: Scheme can upgrade the controller\r\n                             // 5th bit: Scheme can call genericCall on behalf of\r\n                             //          the organization avatar\r\n    }\r\n\r\n    struct GlobalConstraint {\r\n        address gcAddress;\r\n        bytes32 params;\r\n    }\r\n\r\n    struct GlobalConstraintRegister {\r\n        bool isRegistered; //is registered\r\n        uint256 index;    //index at globalConstraints\r\n    }\r\n\r\n    mapping(address=>Scheme) public schemes;\r\n\r\n    Avatar public avatar;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n  // newController will point to the new controller after the present controller is upgraded\r\n    address public newController;\r\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\r\n\r\n    GlobalConstraint[] public globalConstraintsPre;\r\n  // globalConstraintsPost that determine post conditions for all actions on the controller\r\n    GlobalConstraint[] public globalConstraintsPost;\r\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\r\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\r\n    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\r\n\r\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\r\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\r\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\r\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UpgradeController(address indexed _oldController, address _newController);\r\n\r\n    event AddGlobalConstraint(\r\n        address indexed _globalConstraint,\r\n        bytes32 _params,\r\n        GlobalConstraintInterface.CallPhase _when);\r\n\r\n    event RemoveGlobalConstraint(address indexed _globalConstraint, uint256 _index, bool _isPre);\r\n\r\n    constructor( Avatar _avatar) public {\r\n        avatar = _avatar;\r\n        nativeToken = avatar.nativeToken();\r\n        nativeReputation = avatar.nativeReputation();\r\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001F)});\r\n        emit RegisterScheme (msg.sender, msg.sender);\r\n    }\r\n\r\n  // Do not allow mistaken calls:\r\n   // solhint-disable-next-line payable-fallback\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n  // Modifiers:\r\n    modifier onlyRegisteredScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000001) == bytes4(0x00000001));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteringSchemes() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000002) == bytes4(0x00000002));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalConstraintsScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000004) == bytes4(0x00000004));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpgradingScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000008) == bytes4(0x00000008));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGenericCallScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlyMetaDataScheme() {\r\n        require(schemes[msg.sender].permissions&bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlySubjectToConstraint(bytes32 func) {\r\n        uint256 idx;\r\n        for (idx = 0; idx < globalConstraintsPre.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\r\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\r\n        }\r\n        _;\r\n        for (idx = 0; idx < globalConstraintsPost.length; idx++) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\r\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\r\n        }\r\n    }\r\n\r\n    modifier isAvatarValid(address _avatar) {\r\n        require(_avatar == address(avatar));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintReputation(msg.sender, _to, _amount);\r\n        return nativeReputation.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns `_amount` of reputation from `_from`\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"burnReputation\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit BurnReputation(msg.sender, _from, _amount);\r\n        return nativeReputation.burn(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"mintTokens\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintTokens(msg.sender, _beneficiary, _amount);\r\n        return nativeToken.mint(_beneficiary, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev register a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"registerScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n\r\n        Scheme memory scheme = schemes[_scheme];\r\n\r\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\r\n    // Implementation is a bit messy. One must recall logic-circuits ^^\r\n\r\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\r\n        require(bytes4(0x0000001f)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\r\n\r\n    // produces non-zero if sender does not have all of the perms in the old scheme\r\n        require(bytes4(0x0000001f)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Add or change the scheme:\r\n        schemes[_scheme].paramsHash = _paramsHash;\r\n        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);\r\n        emit RegisterScheme(msg.sender, _scheme);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme( address _scheme, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\"unregisterScheme\")\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n    //check if the scheme is registered\r\n        if (_isSchemeRegistered(_scheme) == false) {\r\n            return false;\r\n        }\r\n    // Check the unregistering scheme has enough permissions:\r\n        require(bytes4(0x0000001f)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Unregister:\r\n        emit UnregisterScheme(msg.sender, _scheme);\r\n        delete schemes[_scheme];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister the caller's scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\r\n        if (_isSchemeRegistered(msg.sender) == false) {\r\n            return false;\r\n        }\r\n        delete schemes[msg.sender];\r\n        emit UnregisterScheme(msg.sender, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\r\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPre[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPre.length-1);\r\n            }else {\r\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\r\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPost[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPost.length-1);\r\n            }else {\r\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        emit AddGlobalConstraint(_globalConstraint, _params, when);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @return bool which represents a success\r\n     */\r\n     // solhint-disable-next-line code-complexity\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister;\r\n        GlobalConstraint memory globalConstraint;\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        bool retVal = false;\r\n\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\r\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\r\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPre.length--;\r\n                delete globalConstraintsRegisterPre[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\r\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\r\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPost.length--;\r\n                delete globalConstraintsRegisterPost[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if (retVal) {\r\n            emit RemoveGlobalConstraint(\r\n            _globalConstraint,\r\n            globalConstraintRegister.index,\r\n            when == GlobalConstraintInterface.CallPhase.Pre\r\n            );\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event 'UpgradeController'.\r\n    * @param  _newController the address of the new controller.\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external\r\n    onlyUpgradingScheme\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\r\n        require(_newController != address(0));\r\n        newController = _newController;\r\n        avatar.transferOwnership(_newController);\r\n        require(avatar.owner() == _newController);\r\n        if (nativeToken.owner() == address(this)) {\r\n            nativeToken.transferOwnership(_newController);\r\n            require(nativeToken.owner() == _newController);\r\n        }\r\n        if (nativeReputation.owner() == address(this)) {\r\n            nativeReputation.transferOwnership(_newController);\r\n            require(nativeReputation.owner() == _newController);\r\n        }\r\n        emit UpgradeController(address(this), newController);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract's address to call\r\n    * @param _data ABI-encoded contract call to call `_contract` address.\r\n    * @param _avatar the controller's avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract's function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    onlyGenericCallScheme\r\n    onlySubjectToConstraint(\"genericCall\")\r\n    isAvatarValid(address(_avatar))\r\n    returns (bool, bytes memory)\r\n    {\r\n        return avatar.genericCall(_contract, _data, _value);\r\n    }\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"sendEther\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.sendEther(_amountInWei, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransfer\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token \"from\" address \"to\" address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \"from\" account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenTransferFrom\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\"externalTokenIncreaseApproval\")\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenApproval(_externalToken, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar)\r\n        external\r\n        onlyMetaDataScheme\r\n        isAvatarValid(address(_avatar))\r\n        returns(bool)\r\n        {\r\n        return avatar.metaData(_metaData);\r\n    }\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\r\n        return address(nativeReputation);\r\n    }\r\n\r\n    function isSchemeRegistered(address _scheme, address _avatar) external isAvatarValid(_avatar) view returns(bool) {\r\n        return _isSchemeRegistered(_scheme);\r\n    }\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes32)\r\n    {\r\n        return schemes[_scheme].paramsHash;\r\n    }\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes4)\r\n    {\r\n        return schemes[_scheme].permissions;\r\n    }\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address) external view returns(bytes32) {\r\n\r\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPre[register.index].params;\r\n        }\r\n\r\n        register = globalConstraintsRegisterPost[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPost[register.index].params;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev globalConstraintsCount return the global constraint pre and post count\r\n    * @return uint256 globalConstraintsPre count.\r\n    * @return uint256 globalConstraintsPost count.\r\n    */\r\n    function globalConstraintsCount(address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(uint, uint)\r\n        {\r\n        return (globalConstraintsPre.length, globalConstraintsPost.length);\r\n    }\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(bool)\r\n        {\r\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\r\n                globalConstraintsRegisterPost[_globalConstraint].isRegistered);\r\n    }\r\n\r\n    function _isSchemeRegistered(address _scheme) private view returns(bool) {\r\n        return (schemes[_scheme].permissions&bytes4(0x00000001) != bytes4(0));\r\n    }\r\n}\r\n\r\n// File: contracts/universalSchemes/UniversalScheme.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\ncontract UniversalScheme is UniversalSchemeInterface {\r\n    /**\r\n    *  @dev get the parameters for the current scheme from the controller\r\n    */\r\n    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\r\n        require(Controller(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),\r\n        \"scheme is not registered\");\r\n        return Controller(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/libs/RealMath.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n/**\r\n * RealMath: fixed-point math library, based on fractional and integer parts.\r\n * Using uint256 as real216x40, which isn't in Solidity yet.\r\n * Internally uses the wider uint256 for some math.\r\n *\r\n * Note that for addition, subtraction, and mod (%), you should just use the\r\n * built-in Solidity operators. Functions for these operations are not provided.\r\n *\r\n */\r\n\r\n\r\nlibrary RealMath {\r\n\r\n    /**\r\n     * How many total bits are there?\r\n     */\r\n    uint256 constant private REAL_BITS = 256;\r\n\r\n    /**\r\n     * How many fractional bits are there?\r\n     */\r\n    uint256 constant private REAL_FBITS = 40;\r\n\r\n    /**\r\n     * What's the first non-fractional bit\r\n     */\r\n    uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;\r\n\r\n    /**\r\n     * Raise a real number to any positive integer power\r\n     */\r\n    function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {\r\n\r\n        uint256 tempRealBase = realBase;\r\n        uint256 tempExponent = exponent;\r\n\r\n        // Start with the 0th power\r\n        uint256 realResult = REAL_ONE;\r\n        while (tempExponent != 0) {\r\n            // While there are still bits set\r\n            if ((tempExponent & 0x1) == 0x1) {\r\n                // If the low bit is set, multiply in the (many-times-squared) base\r\n                realResult = mul(realResult, tempRealBase);\r\n            }\r\n                // Shift off the low bit\r\n            tempExponent = tempExponent >> 1;\r\n            if (tempExponent != 0) {\r\n                // Do the squaring\r\n                tempRealBase = mul(tempRealBase, tempRealBase);\r\n            }\r\n        }\r\n\r\n        // Return the final result.\r\n        return realResult;\r\n    }\r\n\r\n    /**\r\n     * Create a real from a rational fraction.\r\n     */\r\n    function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {\r\n        return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);\r\n    }\r\n\r\n    /**\r\n     * Multiply one real by another. Truncates overflows.\r\n     */\r\n    function mul(uint256 realA, uint256 realB) private pure returns (uint256) {\r\n        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\r\n        // So we just have to clip off the extra REAL_FBITS fractional bits.\r\n        uint256 res = realA * realB;\r\n        require(res/realA == realB, \"RealMath mul overflow\");\r\n        return (res >> REAL_FBITS);\r\n    }\r\n\r\n    /**\r\n     * Divide one real by another real. Truncates overflows.\r\n     */\r\n    function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {\r\n        // We use the reverse of the multiplication trick: convert numerator from\r\n        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\r\n        return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));\r\n    }\r\n\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface ProposalExecuteInterface {\r\n    function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\ncontract GenesisProtocolLogic is IntVoteInterface {\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using RealMath for uint216;\r\n    using RealMath for uint256;\r\n    using Address for address;\r\n\r\n    enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}\r\n    enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}\r\n\r\n    //Organization's parameters\r\n    struct Parameters {\r\n        uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.\r\n        uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\r\n        uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.\r\n        uint256 preBoostedVotePeriodLimit; //the time limit for a proposal\r\n                                          //to be in an preparation state (stable) before boosted.\r\n        uint256 thresholdConst; //constant  for threshold calculation .\r\n                                //threshold =thresholdConst ** (numberOfBoostedProposals)\r\n        uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals\r\n                                   //in the threshold calculation to prevent overflow\r\n        uint256 quietEndingPeriod; //quite ending period\r\n        uint256 proposingRepReward;//proposer reputation reward.\r\n        uint256 votersReputationLossRatio;//Unsuccessful pre booster\r\n                                          //voters lose votersReputationLossRatio% of their reputation.\r\n        uint256 minimumDaoBounty;\r\n        uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula\r\n                               //(daoBountyConst * averageBoostDownstakes)/100 .\r\n        uint256 activationTime;//the point in time after which proposals can be created.\r\n        //if this address is set so only this address is allowed to vote of behalf of someone else.\r\n        address voteOnBehalf;\r\n    }\r\n\r\n    struct Voter {\r\n        uint256 vote; // YES(1) ,NO(2)\r\n        uint256 reputation; // amount of voter's reputation\r\n        bool preBoosted;\r\n    }\r\n\r\n    struct Staker {\r\n        uint256 vote; // YES(1) ,NO(2)\r\n        uint256 amount; // amount of staker's stake\r\n        uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.\r\n    }\r\n\r\n    struct Proposal {\r\n        bytes32 organizationId; // the organization unique identifier the proposal is target to.\r\n        address callbacks;    // should fulfill voting callbacks interface.\r\n        ProposalState state;\r\n        uint256 winningVote; //the winning vote.\r\n        address proposer;\r\n        //the proposal boosted period limit . it is updated for the case of quiteWindow mode.\r\n        uint256 currentBoostedVotePeriodLimit;\r\n        bytes32 paramsHash;\r\n        uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.\r\n        uint256 daoBounty;\r\n        uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.\r\n        uint256 confidenceThreshold;\r\n        uint256 secondsFromTimeOutTillExecuteBoosted;\r\n        uint[3] times; //times[0] - submittedTime\r\n                       //times[1] - boostedPhaseTime\r\n                       //times[2] -preBoostedPhaseTime;\r\n        bool daoRedeemItsWinnings;\r\n        //      vote      reputation\r\n        mapping(uint256   =>  uint256    ) votes;\r\n        //      vote      reputation\r\n        mapping(uint256   =>  uint256    ) preBoostedVotes;\r\n        //      address     voter\r\n        mapping(address =>  Voter    ) voters;\r\n        //      vote        stakes\r\n        mapping(uint256   =>  uint256    ) stakes;\r\n        //      address  staker\r\n        mapping(address  => Staker   ) stakers;\r\n    }\r\n\r\n    event Stake(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _staker,\r\n        uint256 _vote,\r\n        uint256 _amount\r\n    );\r\n\r\n    event Redeem(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event RedeemDaoBounty(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event RedeemReputation(bytes32 indexed _proposalId,\r\n        address indexed _organization,\r\n        address indexed _beneficiary,\r\n        uint256 _amount\r\n    );\r\n\r\n    event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);\r\n    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\r\n    event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);\r\n    event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);\r\n\r\n    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\r\n    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\r\n    mapping(bytes32=>uint) public orgBoostedProposalsCnt;\r\n           //organizationId => organization\r\n    mapping(bytes32        => address     ) public organizations;\r\n          //organizationId => averageBoostDownstakes\r\n    mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;\r\n    uint256 constant public NUM_OF_CHOICES = 2;\r\n    uint256 constant public NO = 2;\r\n    uint256 constant public YES = 1;\r\n    uint256 public proposalsCnt; // Total number of proposals\r\n    IERC20 public stakingToken;\r\n    address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;\r\n    uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(IERC20 _stakingToken) public {\r\n      //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .\r\n      //This will work for a network which already hosted the GEN token on this address (e.g mainnet).\r\n      //If such contract address does not exist in the network (e.g ganache)\r\n      //the contract will use the _stakingToken param as the\r\n      //staking token address.\r\n        if (address(GEN_TOKEN_ADDRESS).isContract()) {\r\n            stakingToken = IERC20(GEN_TOKEN_ADDRESS);\r\n        } else {\r\n            stakingToken = _stakingToken;\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev Check that the proposal is votable\r\n   * a proposal is votable if it is in one of the following states:\r\n   *  PreBoosted,Boosted,QuietEndingPeriod or Queued\r\n   */\r\n    modifier votable(bytes32 _proposalId) {\r\n        require(_isVotable(_proposalId));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n     * generated by calculating keccak256 of a incremented counter.\r\n     * @param _paramsHash parameters hash\r\n     * @param _proposer address\r\n     * @param _organization address\r\n     */\r\n    function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)\r\n        external\r\n        returns(bytes32)\r\n    {\r\n      // solhint-disable-next-line not-rely-on-time\r\n        require(now > parameters[_paramsHash].activationTime, \"not active yet\");\r\n        //Check parameters existence.\r\n        require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);\r\n        // Generate a unique ID:\r\n        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\r\n        proposalsCnt = proposalsCnt.add(1);\r\n         // Open proposal:\r\n        Proposal memory proposal;\r\n        proposal.callbacks = msg.sender;\r\n        proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));\r\n\r\n        proposal.state = ProposalState.Queued;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        proposal.times[0] = now;//submitted time\r\n        proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;\r\n        proposal.proposer = _proposer;\r\n        proposal.winningVote = NO;\r\n        proposal.paramsHash = _paramsHash;\r\n        if (organizations[proposal.organizationId] == address(0)) {\r\n            if (_organization == address(0)) {\r\n                organizations[proposal.organizationId] = msg.sender;\r\n            } else {\r\n                organizations[proposal.organizationId] = _organization;\r\n            }\r\n        }\r\n        //calc dao bounty\r\n        uint256 daoBounty =\r\n        parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);\r\n        proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);\r\n        proposals[proposalId] = proposal;\r\n        proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal\r\n\r\n        emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);\r\n        return proposalId;\r\n    }\r\n\r\n    /**\r\n      * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired\r\n      * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.\r\n      * P = t/150, where t is the number of seconds passed since the the proposal's timeout.\r\n      * P is capped by 10%.\r\n      * @param _proposalId the id of the proposal\r\n      * @return uint256 expirationCallBounty the bounty amount for the expiration call\r\n     */\r\n    function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,\r\n        \"proposal state in not Boosted nor QuietEndingPeriod\");\r\n        require(_execute(_proposalId), \"proposal need to expire\");\r\n\r\n        proposal.secondsFromTimeOutTillExecuteBoosted =\r\n        // solhint-disable-next-line not-rely-on-time\r\n        now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));\r\n\r\n        expirationCallBounty = calcExecuteCallBounty(_proposalId);\r\n        proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);\r\n        require(stakingToken.transfer(msg.sender, expirationCallBounty), \"transfer to msg.sender failed\");\r\n        emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);\r\n    }\r\n\r\n    /**\r\n     * @dev hash the parameters, save them if necessary, and return the hash value\r\n     * @param _params a parameters array\r\n     *    _params[0] - _queuedVoteRequiredPercentage,\r\n     *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\r\n     *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\r\n     *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation\r\n     *                  state (stable) before boosted.\r\n     *    _params[4] -_thresholdConst\r\n     *    _params[5] -_quietEndingPeriod\r\n     *    _params[6] -_proposingRepReward\r\n     *    _params[7] -_votersReputationLossRatio\r\n     *    _params[8] -_minimumDaoBounty\r\n     *    _params[9] -_daoBountyConst\r\n     *    _params[10] -_activationTime\r\n     * @param _voteOnBehalf - authorized to vote on behalf of others.\r\n    */\r\n    function setParameters(\r\n        uint[11] calldata _params, //use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n    external\r\n    returns(bytes32)\r\n    {\r\n        require(_params[0] <= 100 && _params[0] >= 50, \"50 <= queuedVoteRequiredPercentage <= 100\");\r\n        require(_params[4] <= 16000 && _params[4] > 1000, \"1000 < thresholdConst <= 16000\");\r\n        require(_params[7] <= 100, \"votersReputationLossRatio <= 100\");\r\n        require(_params[2] >= _params[5], \"boostedVotePeriodLimit >= quietEndingPeriod\");\r\n        require(_params[8] > 0, \"minimumDaoBounty should be > 0\");\r\n        require(_params[9] > 0, \"daoBountyConst should be > 0\");\r\n\r\n        bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);\r\n        //set a limit for power for a given alpha to prevent overflow\r\n        uint256 limitExponent = 172;//for alpha less or equal 2\r\n        uint256 j = 2;\r\n        for (uint256 i = 2000; i < 16000; i = i*2) {\r\n            if ((_params[4] > i) && (_params[4] <= i*2)) {\r\n                limitExponent = limitExponent/j;\r\n                break;\r\n            }\r\n            j++;\r\n        }\r\n\r\n        parameters[paramsHash] = Parameters({\r\n            queuedVoteRequiredPercentage: _params[0],\r\n            queuedVotePeriodLimit: _params[1],\r\n            boostedVotePeriodLimit: _params[2],\r\n            preBoostedVotePeriodLimit: _params[3],\r\n            thresholdConst:uint216(_params[4]).fraction(uint216(1000)),\r\n            limitExponentValue:limitExponent,\r\n            quietEndingPeriod: _params[5],\r\n            proposingRepReward: _params[6],\r\n            votersReputationLossRatio:_params[7],\r\n            minimumDaoBounty:_params[8],\r\n            daoBountyConst:_params[9],\r\n            activationTime:_params[10],\r\n            voteOnBehalf:_voteOnBehalf\r\n        });\r\n        return paramsHash;\r\n    }\r\n\r\n    /**\r\n     * @dev redeem a reward for a successful stake, vote or proposing.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return rewards -\r\n     *           [0] stakerTokenReward\r\n     *           [1] voterReputationReward\r\n     *           [2] proposerReputationReward\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),\r\n        \"Proposal should be Executed or ExpiredInQueue\");\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        //as staker\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n        uint256 totalStakesLeftAfterCallBounty =\r\n        proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));\r\n        if (staker.amount > 0) {\r\n\r\n            if (proposal.state == ProposalState.ExpiredInQueue) {\r\n                //Stakes of a proposal that expires in Queue are sent back to stakers\r\n                rewards[0] = staker.amount;\r\n            } else if (staker.vote == proposal.winningVote) {\r\n                if (staker.vote == YES) {\r\n                    if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {\r\n                        uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);\r\n                        rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;\r\n                    }\r\n                } else {\r\n                    rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;\r\n                }\r\n            }\r\n            staker.amount = 0;\r\n        }\r\n            //dao redeem its winnings\r\n        if (proposal.daoRedeemItsWinnings == false &&\r\n            _beneficiary == organizations[proposal.organizationId] &&\r\n            proposal.state != ProposalState.ExpiredInQueue &&\r\n            proposal.winningVote == NO) {\r\n            rewards[0] =\r\n            rewards[0]\r\n            .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)\r\n            .sub(proposal.daoBounty);\r\n            proposal.daoRedeemItsWinnings = true;\r\n        }\r\n\r\n        //as voter\r\n        Voter storage voter = proposal.voters[_beneficiary];\r\n        if ((voter.reputation != 0) && (voter.preBoosted)) {\r\n            if (proposal.state == ProposalState.ExpiredInQueue) {\r\n              //give back reputation for the voter\r\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);\r\n            } else if (proposal.winningVote == voter.vote) {\r\n                uint256 lostReputation;\r\n                if (proposal.winningVote == YES) {\r\n                    lostReputation = proposal.preBoostedVotes[NO];\r\n                } else {\r\n                    lostReputation = proposal.preBoostedVotes[YES];\r\n                }\r\n                lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;\r\n                rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)\r\n                .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);\r\n            }\r\n            voter.reputation = 0;\r\n        }\r\n        //as proposer\r\n        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\r\n            rewards[2] = params.proposingRepReward;\r\n            proposal.proposer = address(0);\r\n        }\r\n        if (rewards[0] != 0) {\r\n            proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);\r\n            require(stakingToken.transfer(_beneficiary, rewards[0]), \"transfer to beneficiary failed\");\r\n            emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);\r\n        }\r\n        if (rewards[1].add(rewards[2]) != 0) {\r\n            VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);\r\n            emit RedeemReputation(\r\n            _proposalId,\r\n            organizations[proposal.organizationId],\r\n            _beneficiary,\r\n            rewards[1].add(rewards[2])\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev redeemDaoBounty a reward for a successful stake.\r\n     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\r\n     * users to redeem on behalf of someone else.\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _beneficiary - the beneficiary address\r\n     * @return redeemedAmount - redeem token amount\r\n     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )\r\n     */\r\n    function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)\r\n    public\r\n    returns(uint256 redeemedAmount, uint256 potentialAmount) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        require(proposal.state == ProposalState.Executed);\r\n        uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];\r\n        Staker storage staker = proposal.stakers[_beneficiary];\r\n        if (\r\n            (staker.amount4Bounty > 0)&&\r\n            (staker.vote == proposal.winningVote)&&\r\n            (proposal.winningVote == YES)&&\r\n            (totalWinningStakes != 0)) {\r\n            //as staker\r\n                potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;\r\n            }\r\n        if ((potentialAmount != 0)&&\r\n            (VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {\r\n            staker.amount4Bounty = 0;\r\n            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\r\n            require(\r\n            VotingMachineCallbacksInterface(proposal.callbacks)\r\n            .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));\r\n            redeemedAmount = potentialAmount;\r\n            emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev calcExecuteCallBounty calculate the execute boosted call bounty\r\n      * @param _proposalId the ID of the proposal\r\n      * @return uint256 executeCallBounty\r\n    */\r\n    function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {\r\n        uint maxRewardSeconds = 1500;\r\n        uint rewardSeconds =\r\n        uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);\r\n        return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);\r\n    }\r\n\r\n    /**\r\n     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\r\n     * @param _proposalId the ID of the proposal\r\n     * @return bool true or false.\r\n     */\r\n    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\r\n        Proposal memory proposal = proposals[_proposalId];\r\n        return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));\r\n    }\r\n\r\n    /**\r\n     * @dev threshold return the organization's score threshold which required by\r\n     * a proposal to shift to boosted state.\r\n     * This threshold is dynamically set and it depend on the number of boosted proposal.\r\n     * @param _organizationId the organization identifier\r\n     * @param _paramsHash the organization parameters hash\r\n     * @return uint256 organization's score threshold as real number.\r\n     */\r\n    function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {\r\n        uint256 power = orgBoostedProposalsCnt[_organizationId];\r\n        Parameters storage params = parameters[_paramsHash];\r\n\r\n        if (power > params.limitExponentValue) {\r\n            power = params.limitExponentValue;\r\n        }\r\n\r\n        return params.thresholdConst.pow(power);\r\n    }\r\n\r\n  /**\r\n   * @dev hashParameters returns a hash of the given parameters\r\n   */\r\n    function getParametersHash(\r\n        uint[11] memory _params,//use array here due to stack too deep issue.\r\n        address _voteOnBehalf\r\n    )\r\n        public\r\n        pure\r\n        returns(bytes32)\r\n        {\r\n        //double call to keccak256 to avoid deep stack issue when call with too many params.\r\n        return keccak256(\r\n            abi.encodePacked(\r\n            keccak256(\r\n            abi.encodePacked(\r\n                _params[0],\r\n                _params[1],\r\n                _params[2],\r\n                _params[3],\r\n                _params[4],\r\n                _params[5],\r\n                _params[6],\r\n                _params[7],\r\n                _params[8],\r\n                _params[9],\r\n                _params[10])\r\n            ),\r\n            _voteOnBehalf\r\n        ));\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        Proposal memory tmpProposal = proposal;\r\n        uint256 totalReputation =\r\n        VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);\r\n        //first divide by 100 to prevent overflow\r\n        uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;\r\n        ExecutionState executionState = ExecutionState.None;\r\n        uint256 averageDownstakesOfBoosted;\r\n        uint256 confidenceThreshold;\r\n\r\n        if (proposal.votes[proposal.winningVote] > executionBar) {\r\n         // someone crossed the absolute vote execution bar.\r\n            if (proposal.state == ProposalState.Queued) {\r\n                executionState = ExecutionState.QueueBarCrossed;\r\n            } else if (proposal.state == ProposalState.PreBoosted) {\r\n                executionState = ExecutionState.PreBoostedBarCrossed;\r\n            } else {\r\n                executionState = ExecutionState.BoostedBarCrossed;\r\n            }\r\n            proposal.state = ProposalState.Executed;\r\n        } else {\r\n            if (proposal.state == ProposalState.Queued) {\r\n                // solhint-disable-next-line not-rely-on-time\r\n                if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {\r\n                    proposal.state = ProposalState.ExpiredInQueue;\r\n                    proposal.winningVote = NO;\r\n                    executionState = ExecutionState.QueueTimeOut;\r\n                } else {\r\n                    confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\r\n                    if (_score(_proposalId) > confidenceThreshold) {\r\n                        //change proposal mode to PreBoosted mode.\r\n                        proposal.state = ProposalState.PreBoosted;\r\n                        // solhint-disable-next-line not-rely-on-time\r\n                        proposal.times[2] = now;\r\n                        proposal.confidenceThreshold = confidenceThreshold;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (proposal.state == ProposalState.PreBoosted) {\r\n                confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);\r\n              // solhint-disable-next-line not-rely-on-time\r\n                if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {\r\n                    if (_score(_proposalId) > confidenceThreshold) {\r\n                        if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {\r\n                         //change proposal mode to Boosted mode.\r\n                            proposal.state = ProposalState.Boosted;\r\n                         // solhint-disable-next-line not-rely-on-time\r\n                            proposal.times[1] = now;\r\n                            orgBoostedProposalsCnt[proposal.organizationId]++;\r\n                         //add a value to average -> average = average + ((value - average) / nbValues)\r\n                            averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\r\n                          // solium-disable-next-line indentation\r\n                            averagesDownstakesOfBoosted[proposal.organizationId] =\r\n                                uint256(int256(averageDownstakesOfBoosted) +\r\n                                ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/\r\n                                int256(orgBoostedProposalsCnt[proposal.organizationId])));\r\n                        }\r\n                    } else {\r\n                        proposal.state = ProposalState.Queued;\r\n                    }\r\n                } else { //check the Confidence level is stable\r\n                    uint256 proposalScore = _score(_proposalId);\r\n                    if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {\r\n                        proposal.state = ProposalState.Queued;\r\n                    } else if (proposal.confidenceThreshold > proposalScore) {\r\n                        proposal.confidenceThreshold = confidenceThreshold;\r\n                        emit ConfidenceLevelChange(_proposalId, confidenceThreshold);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((proposal.state == ProposalState.Boosted) ||\r\n            (proposal.state == ProposalState.QuietEndingPeriod)) {\r\n            // solhint-disable-next-line not-rely-on-time\r\n            if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {\r\n                proposal.state = ProposalState.Executed;\r\n                executionState = ExecutionState.BoostedTimeOut;\r\n            }\r\n        }\r\n\r\n        if (executionState != ExecutionState.None) {\r\n            if ((executionState == ExecutionState.BoostedTimeOut) ||\r\n                (executionState == ExecutionState.BoostedBarCrossed)) {\r\n                orgBoostedProposalsCnt[tmpProposal.organizationId] =\r\n                orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);\r\n                //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);\r\n                uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];\r\n                if (boostedProposals == 0) {\r\n                    averagesDownstakesOfBoosted[proposal.organizationId] = 0;\r\n                } else {\r\n                    averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];\r\n                    averagesDownstakesOfBoosted[proposal.organizationId] =\r\n                    (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;\r\n                }\r\n            }\r\n            emit ExecuteProposal(\r\n            _proposalId,\r\n            organizations[proposal.organizationId],\r\n            proposal.winningVote,\r\n            totalReputation\r\n            );\r\n            emit GPExecuteProposal(_proposalId, executionState);\r\n            ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));\r\n            proposal.daoBounty = proposal.daoBountyRemain;\r\n        }\r\n        if (tmpProposal.state != proposal.state) {\r\n            emit StateChange(_proposalId, proposal.state);\r\n        }\r\n        return (executionState != ExecutionState.None);\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {\r\n        // 0 is not a valid vote.\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"wrong vote value\");\r\n        require(_amount > 0, \"staking amount should be >0\");\r\n\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        if ((proposal.state != ProposalState.PreBoosted) &&\r\n            (proposal.state != ProposalState.Queued)) {\r\n            return false;\r\n        }\r\n\r\n        // enable to increase stake only on the previous stake vote\r\n        Staker storage staker = proposal.stakers[_staker];\r\n        if ((staker.amount > 0) && (staker.vote != _vote)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = _amount;\r\n        require(stakingToken.transferFrom(_staker, address(this), amount), \"fail transfer from staker\");\r\n        proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes\r\n        staker.amount = staker.amount.add(amount);\r\n        //This is to prevent average downstakes calculation overflow\r\n        //Note that any how GEN cap is 100000000 ether.\r\n        require(staker.amount <= 0x100000000000000000000000000000000, \"staking amount is too high\");\r\n        require(proposal.totalStakes <= uint256(0x100000000000000000000000000000000).sub(proposal.daoBountyRemain),\r\n                \"total stakes is too high\");\r\n\r\n        if (_vote == YES) {\r\n            staker.amount4Bounty = staker.amount4Bounty.add(amount);\r\n        }\r\n        staker.vote = _vote;\r\n\r\n        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\r\n        emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\r\n     * @param _proposalId id of the proposal\r\n     * @param _voter used in case the vote is cast for someone else\r\n     * @param _vote a value between 0 to and the proposal's number of choices.\r\n     * @param _rep how many reputation the voter would like to stake for this vote.\r\n     *         if  _rep==0 so the voter full reputation will be use.\r\n     * @return true in case of proposal execution otherwise false\r\n     * throws if proposal is not open or if it has been executed\r\n     * NB: executes the proposal if a decision has been reached\r\n     */\r\n     // solhint-disable-next-line function-max-lines,code-complexity\r\n    function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {\r\n        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"0 < _vote <= 2\");\r\n        if (_execute(_proposalId)) {\r\n            return true;\r\n        }\r\n\r\n        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\r\n        Proposal storage proposal = proposals[_proposalId];\r\n\r\n        // Check voter has enough reputation:\r\n        uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);\r\n        require(reputation > 0, \"_voter must have reputation\");\r\n        require(reputation >= _rep, \"reputation >= _rep\");\r\n        uint256 rep = _rep;\r\n        if (rep == 0) {\r\n            rep = reputation;\r\n        }\r\n        // If this voter has already voted, return false.\r\n        if (proposal.voters[_voter].reputation != 0) {\r\n            return false;\r\n        }\r\n        // The voting itself:\r\n        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\r\n        //check if the current winningVote changed or there is a tie.\r\n        //for the case there is a tie the current winningVote set to NO.\r\n        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\r\n            ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\r\n            proposal.winningVote == YES)) {\r\n            if (proposal.state == ProposalState.Boosted &&\r\n            // solhint-disable-next-line not-rely-on-time\r\n                ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||\r\n                proposal.state == ProposalState.QuietEndingPeriod) {\r\n                //quietEndingPeriod\r\n                if (proposal.state != ProposalState.QuietEndingPeriod) {\r\n                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\r\n                    proposal.state = ProposalState.QuietEndingPeriod;\r\n                    emit StateChange(_proposalId, proposal.state);\r\n                }\r\n                // solhint-disable-next-line not-rely-on-time\r\n                proposal.times[1] = now;\r\n            }\r\n            proposal.winningVote = _vote;\r\n        }\r\n        proposal.voters[_voter] = Voter({\r\n            reputation: rep,\r\n            vote: _vote,\r\n            preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))\r\n        });\r\n        if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {\r\n            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\r\n            uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;\r\n            VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);\r\n        }\r\n        emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n    /**\r\n     * @dev _score return the proposal score (Confidence level)\r\n     * For dual choice proposal S = (S+)/(S-)\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint256 proposal score as real number.\r\n     */\r\n    function _score(bytes32 _proposalId) internal view returns(uint256) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.\r\n        return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));\r\n    }\r\n\r\n    /**\r\n      * @dev _isVotable check if the proposal is votable\r\n      * @param _proposalId the ID of the proposal\r\n      * @return bool true or false\r\n    */\r\n    function _isVotable(bytes32 _proposalId) internal view returns(bool) {\r\n        ProposalState pState = proposals[_proposalId].state;\r\n        return ((pState == ProposalState.PreBoosted)||\r\n                (pState == ProposalState.Boosted)||\r\n                (pState == ProposalState.QuietEndingPeriod)||\r\n                (pState == ProposalState.Queued)\r\n        );\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title GenesisProtocol implementation -an organization's voting machine scheme.\r\n */\r\ncontract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {\r\n    using ECDSA for bytes32;\r\n\r\n    // Digest describing the data the user signs according EIP 712.\r\n    // Needs to match what is passed to Metamask.\r\n    bytes32 public constant DELEGATION_HASH_EIP712 =\r\n    keccak256(abi.encodePacked(\r\n    \"address GenesisProtocolAddress\",\r\n    \"bytes32 ProposalId\",\r\n    \"uint256 Vote\",\r\n    \"uint256 AmountToStake\",\r\n    \"uint256 Nonce\"\r\n    ));\r\n\r\n    mapping(address=>uint256) public stakesNonce; //stakes Nonce\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor(IERC20 _stakingToken)\r\n    public\r\n    // solhint-disable-next-line no-empty-blocks\r\n    GenesisProtocolLogic(_stakingToken) {\r\n    }\r\n\r\n    /**\r\n     * @dev staking function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {\r\n        return _stake(_proposalId, _vote, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev stakeWithSignature function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote  NO(2) or YES(1).\r\n     * @param _amount the betting amount\r\n     * @param _nonce nonce value ,it is part of the signature to ensure that\r\n              a signature can be received only once.\r\n     * @param _signatureType signature type\r\n              1 - for web3.eth.sign\r\n              2 - for eth_signTypedData according to EIP #712.\r\n     * @param _signature  - signed data by the staker\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function stakeWithSignature(\r\n        bytes32 _proposalId,\r\n        uint256 _vote,\r\n        uint256 _amount,\r\n        uint256 _nonce,\r\n        uint256 _signatureType,\r\n        bytes calldata _signature\r\n        )\r\n        external\r\n        returns(bool)\r\n        {\r\n        // Recreate the digest the user signed\r\n        bytes32 delegationDigest;\r\n        if (_signatureType == 2) {\r\n            delegationDigest = keccak256(\r\n                abi.encodePacked(\r\n                    DELEGATION_HASH_EIP712, keccak256(\r\n                        abi.encodePacked(\r\n                        address(this),\r\n                        _proposalId,\r\n                        _vote,\r\n                        _amount,\r\n                        _nonce)\r\n                    )\r\n                )\r\n            );\r\n        } else {\r\n            delegationDigest = keccak256(\r\n                        abi.encodePacked(\r\n                        address(this),\r\n                        _proposalId,\r\n                        _vote,\r\n                        _amount,\r\n                        _nonce)\r\n                    ).toEthSignedMessageHash();\r\n        }\r\n        address staker = delegationDigest.recover(_signature);\r\n        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\r\n        require(staker != address(0), \"staker address cannot be 0\");\r\n        require(stakesNonce[staker] == _nonce);\r\n        stakesNonce[staker] = stakesNonce[staker].add(1);\r\n        return _stake(_proposalId, _vote, _amount, staker);\r\n    }\r\n\r\n    /**\r\n     * @dev voting function\r\n     * @param _proposalId id of the proposal\r\n     * @param _vote NO(2) or YES(1).\r\n     * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.\r\n     * @param _voter voter address\r\n     * @return bool true - the proposal has been executed\r\n     *              false - otherwise.\r\n     */\r\n    function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)\r\n    external\r\n    votable(_proposalId)\r\n    returns(bool) {\r\n        Proposal storage proposal = proposals[_proposalId];\r\n        Parameters memory params = parameters[proposal.paramsHash];\r\n        address voter;\r\n        if (params.voteOnBehalf != address(0)) {\r\n            require(msg.sender == params.voteOnBehalf);\r\n            voter = _voter;\r\n        } else {\r\n            voter = msg.sender;\r\n        }\r\n        return internalVote(_proposalId, voter, _vote, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev Cancel the vote of the msg.sender.\r\n   * cancel vote is not allow in genesisProtocol so this function doing nothing.\r\n   * This function is here in order to comply to the IntVoteInterface .\r\n   */\r\n    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\r\n       //this is not allowed\r\n        return;\r\n    }\r\n\r\n    /**\r\n      * @dev execute check if the proposal has been decided, and if so, execute the proposal\r\n      * @param _proposalId the id of the proposal\r\n      * @return bool true - the proposal has been executed\r\n      *              false - otherwise.\r\n     */\r\n    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\r\n        return _execute(_proposalId);\r\n    }\r\n\r\n  /**\r\n    * @dev getNumberOfChoices returns the number of choices possible in this proposal\r\n    * @return uint256 that contains number of choices\r\n    */\r\n    function getNumberOfChoices(bytes32) external view returns(uint256) {\r\n        return NUM_OF_CHOICES;\r\n    }\r\n\r\n    /**\r\n      * @dev getProposalTimes returns proposals times variables.\r\n      * @param _proposalId id of the proposal\r\n      * @return proposals times array\r\n      */\r\n    function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {\r\n        return proposals[_proposalId].times;\r\n    }\r\n\r\n    /**\r\n     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\r\n     * @param _proposalId the ID of the proposal\r\n     * @param _voter the address of the voter\r\n     * @return uint256 vote - the voters vote\r\n     *        uint256 reputation - amount of reputation committed by _voter to _proposalId\r\n     */\r\n    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\r\n        Voter memory voter = proposals[_proposalId].voters[_voter];\r\n        return (voter.vote, voter.reputation);\r\n    }\r\n\r\n    /**\r\n    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n    * @param _proposalId the ID of the proposal\r\n    * @param _choice the index in the\r\n    * @return voted reputation for the given choice\r\n    */\r\n    function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {\r\n        return proposals[_proposalId].votes[_choice];\r\n    }\r\n\r\n    /**\r\n    * @dev isVotable check if the proposal is votable\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bool true or false\r\n    */\r\n    function isVotable(bytes32 _proposalId) external view returns(bool) {\r\n        return _isVotable(_proposalId);\r\n    }\r\n\r\n    /**\r\n    * @dev proposalStatus return the total votes and stakes for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint256 preBoostedVotes YES\r\n    * @return uint256 preBoostedVotes NO\r\n    * @return uint256 total stakes YES\r\n    * @return uint256 total stakes NO\r\n    */\r\n    function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {\r\n        return (\r\n                proposals[_proposalId].preBoostedVotes[YES],\r\n                proposals[_proposalId].preBoostedVotes[NO],\r\n                proposals[_proposalId].stakes[YES],\r\n                proposals[_proposalId].stakes[NO]\r\n        );\r\n    }\r\n\r\n  /**\r\n    * @dev getProposalOrganization return the organizationId for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return bytes32 organization identifier\r\n    */\r\n    function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {\r\n        return (proposals[_proposalId].organizationId);\r\n    }\r\n\r\n    /**\r\n      * @dev getStaker return the vote and stake amount for a given proposal and staker\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _staker staker address\r\n      * @return uint256 vote\r\n      * @return uint256 amount\r\n    */\r\n    function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {\r\n        return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);\r\n    }\r\n\r\n    /**\r\n      * @dev voteStake return the amount stakes for a given proposal and vote\r\n      * @param _proposalId the ID of the proposal\r\n      * @param _vote vote number\r\n      * @return uint256 stake amount\r\n    */\r\n    function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {\r\n        return proposals[_proposalId].stakes[_vote];\r\n    }\r\n\r\n  /**\r\n    * @dev voteStake return the winningVote for a given proposal\r\n    * @param _proposalId the ID of the proposal\r\n    * @return uint256 winningVote\r\n    */\r\n    function winningVote(bytes32 _proposalId) external view returns(uint256) {\r\n        return proposals[_proposalId].winningVote;\r\n    }\r\n\r\n    /**\r\n      * @dev voteStake return the state for a given proposal\r\n      * @param _proposalId the ID of the proposal\r\n      * @return ProposalState proposal state\r\n    */\r\n    function state(bytes32 _proposalId) external view returns(ProposalState) {\r\n        return proposals[_proposalId].state;\r\n    }\r\n\r\n   /**\r\n    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n    * @return bool true or false\r\n    */\r\n    function isAbstainAllow() external pure returns(bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n    function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {\r\n        return (YES, NO);\r\n    }\r\n\r\n    /**\r\n     * @dev score return the proposal score\r\n     * @param _proposalId the ID of the proposal\r\n     * @return uint256 proposal score.\r\n     */\r\n    function score(bytes32 _proposalId) public view returns(uint256) {\r\n        return  _score(_proposalId);\r\n    }\r\n}\r\n\r\n// File: contracts/votingMachines/VotingMachineCallbacks.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\ncontract VotingMachineCallbacks is VotingMachineCallbacksInterface {\r\n\r\n    struct ProposalInfo {\r\n        uint256 blockNumber; // the proposal's block number\r\n        Avatar avatar; // the proposal's avatar\r\n    }\r\n\r\n    modifier onlyVotingMachine(bytes32 _proposalId) {\r\n        require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), \"only VotingMachine\");\r\n        _;\r\n    }\r\n\r\n    // VotingMaching  ->  proposalId  ->  ProposalInfo\r\n    mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;\r\n\r\n    function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return Controller(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));\r\n    }\r\n\r\n    function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return Controller(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));\r\n    }\r\n\r\n    function stakingTokenTransfer(\r\n        IERC20 _stakingToken,\r\n        address _beneficiary,\r\n        uint256 _amount,\r\n        bytes32 _proposalId)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool)\r\n    {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (avatar == Avatar(0)) {\r\n            return false;\r\n        }\r\n        return Controller(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);\r\n    }\r\n\r\n    function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {\r\n        Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;\r\n        if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return _stakingToken.balanceOf(address(avatar));\r\n    }\r\n\r\n    function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {\r\n        ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];\r\n        if (proposal.avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);\r\n    }\r\n\r\n    function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {\r\n        ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];\r\n        if (proposal.avatar == Avatar(0)) {\r\n            return 0;\r\n        }\r\n        return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);\r\n    }\r\n}\r\n\r\n// File: contracts/schemes/ContributionRewardExt.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title A scheme for proposing and rewarding contributions to an organization\r\n * @dev An agent can ask an organization to recognize a contribution and reward\r\n * him with token, reputation, ether or any combination.\r\n * This scheme extend the functionality of the ContributionReward scheme.\r\n * It enable to assign a rewarder, which, after the contributionreward has been accepted,\r\n * can then later distribute the assets as it would like.\r\n */\r\ncontract ContributionRewardExt is VotingMachineCallbacks, ProposalExecuteInterface {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for address;\r\n\r\n    event NewContributionProposal(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _intVoteInterface,\r\n        string _descriptionHash,\r\n        int256 _reputationChange,\r\n        uint[3]  _rewards,\r\n        IERC20 _externalToken,\r\n        address _beneficiary,\r\n        address _proposer\r\n    );\r\n\r\n    event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);\r\n\r\n    event RedeemReputation(\r\n        address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _beneficiary,\r\n        int256 _amount);\r\n\r\n    event RedeemEther(address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _beneficiary,\r\n        uint256 _amount);\r\n\r\n    event RedeemNativeToken(address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _beneficiary,\r\n        uint256 _amount);\r\n\r\n    event RedeemExternalToken(address indexed _avatar,\r\n        bytes32 indexed _proposalId,\r\n        address indexed _beneficiary,\r\n        uint256 _amount);\r\n\r\n    // A struct holding the data for a contribution proposal\r\n    struct ContributionProposal {\r\n        uint256 nativeTokenReward; // Reward asked in the native token of the organization.\r\n        int256 reputationChange; // Organization reputation reward requested.\r\n        uint256 ethReward;\r\n        IERC20 externalToken;\r\n        uint256 externalTokenReward;\r\n        address payable beneficiary;\r\n        uint256 nativeTokenRewardLeft;\r\n        uint256 reputationChangeLeft;\r\n        uint256 ethRewardLeft;\r\n        uint256 externalTokenRewardLeft;\r\n        bool acceptedByVotingMachine;\r\n    }\r\n\r\n    modifier onlyRewarder() {\r\n        require(msg.sender == rewarder, \"msg.sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n    mapping(bytes32=>ContributionProposal) public organizationProposals;\r\n\r\n    IntVoteInterface public votingMachine;\r\n    bytes32 public voteParams;\r\n    Avatar public avatar;\r\n    address public rewarder;\r\n\r\n    /**\r\n    * @dev enables this contract to receive ethers\r\n    */\r\n    function() external payable {\r\n    }\r\n\r\n    /**\r\n     * @dev initialize\r\n     * @param _avatar the avatar to mint reputation from\r\n     * @param _votingMachine the voting machines address\r\n     * @param _voteParams voting machine parameters\r\n     * @param _rewarder an address which allowed to redeem the contribution.\r\n       if _rewarder is 0 this param is agnored.\r\n     */\r\n    function initialize(\r\n        Avatar _avatar,\r\n        IntVoteInterface _votingMachine,\r\n        bytes32 _voteParams,\r\n        address _rewarder\r\n    )\r\n    external\r\n    {\r\n        require(avatar == Avatar(0), \"can be called only one time\");\r\n        require(_avatar != Avatar(0), \"avatar cannot be zero\");\r\n        require(_votingMachine != IntVoteInterface(0), \"votingMachine cannot be zero\");\r\n        avatar = _avatar;\r\n        votingMachine = _votingMachine;\r\n        voteParams = _voteParams;\r\n        rewarder = _rewarder;\r\n    }\r\n\r\n    /**\r\n    * @dev execution of proposals, can only be called by the voting machine in which the vote is held.\r\n    * @param _proposalId the ID of the proposal in the voting machine\r\n    * @param _decision a parameter of the voting result, 1 yes and 2 is no.\r\n    */\r\n    function executeProposal(bytes32 _proposalId, int256 _decision)\r\n    external\r\n    onlyVotingMachine(_proposalId)\r\n    returns(bool) {\r\n        require(organizationProposals[_proposalId].acceptedByVotingMachine == false);\r\n        require(organizationProposals[_proposalId].beneficiary != address(0));\r\n        if (_decision == 1) {\r\n            organizationProposals[_proposalId].acceptedByVotingMachine = true;\r\n        }\r\n        emit ProposalExecuted(address(avatar), _proposalId, _decision);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Submit a proposal for a reward for a contribution:\r\n    * @param _descriptionHash A hash of the proposal's description\r\n    * @param _reputationChange - Amount of reputation change requested .Can be negative.\r\n    * @param _rewards rewards array:\r\n    *         rewards[0] - Amount of tokens requested\r\n    *         rewards[1] - Amount of ETH requested\r\n    *         rewards[2] - Amount of external tokens\r\n    * @param _externalToken Address of external token, if reward is requested there\r\n    * @param _beneficiary Who gets the rewards. if equal to 0 the beneficiary will be msg.sender.\r\n    * @param _proposer proposer . if equal to 0 the proposer will be msg.sender.\r\n    */\r\n    function proposeContributionReward(\r\n        string memory _descriptionHash,\r\n        int256 _reputationChange,\r\n        uint[3] memory _rewards,\r\n        IERC20 _externalToken,\r\n        address payable _beneficiary,\r\n        address _proposer\r\n    )\r\n    public\r\n    returns(bytes32 proposalId)\r\n    {\r\n        address proposer = _proposer;\r\n        if (proposer == address(0)) {\r\n            proposer = msg.sender;\r\n        }\r\n        proposalId = votingMachine.propose(2, voteParams, proposer, address(avatar));\r\n        address payable beneficiary = _beneficiary;\r\n        if (beneficiary == address(0)) {\r\n            beneficiary = msg.sender;\r\n        }\r\n        if (beneficiary == address(this)) {\r\n            require(_reputationChange >= 0, \"negative rep change not allowed for this case\");\r\n        }\r\n\r\n        ContributionProposal memory proposal = ContributionProposal({\r\n            nativeTokenReward: _rewards[0],\r\n            reputationChange: _reputationChange,\r\n            ethReward: _rewards[1],\r\n            externalToken: _externalToken,\r\n            externalTokenReward: _rewards[2],\r\n            beneficiary: beneficiary,\r\n            nativeTokenRewardLeft: 0,\r\n            reputationChangeLeft: 0,\r\n            ethRewardLeft: 0,\r\n            externalTokenRewardLeft: 0,\r\n            acceptedByVotingMachine: false\r\n        });\r\n        organizationProposals[proposalId] = proposal;\r\n\r\n        emit NewContributionProposal(\r\n            address(avatar),\r\n            proposalId,\r\n            address(votingMachine),\r\n            _descriptionHash,\r\n            _reputationChange,\r\n            _rewards,\r\n            _externalToken,\r\n            beneficiary,\r\n            proposer\r\n        );\r\n\r\n        proposalsInfo[address(votingMachine)][proposalId] = ProposalInfo({\r\n            blockNumber:block.number,\r\n            avatar:avatar\r\n        });\r\n    }\r\n\r\n    /**\r\n    * @dev RedeemReputation reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @return reputation the redeemed reputation.\r\n    */\r\n    function redeemReputation(bytes32 _proposalId) public returns(int256 reputation) {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n\r\n        //if the beneficiary is the current contract, we are not minting the rep to it\r\n        //but instead refer to a mechanism in which the rep can be minted by the current contract\r\n        //per request of the rewarder\r\n        if (proposal.beneficiary == address(this)) {\r\n            if (proposal.reputationChangeLeft == 0) {//for now only mint(not burn) rep allowed from ext contract.\r\n                proposal.reputationChangeLeft = uint256(proposal.reputationChange);\r\n                proposal.reputationChange = 0;\r\n            }\r\n        } else {\r\n            reputation = proposal.reputationChange;\r\n            //set proposal reward to zero to prevent reentrancy attack.\r\n            proposal.reputationChange = 0;\r\n\r\n            if (reputation > 0) {\r\n                require(\r\n                Controller(\r\n                avatar.owner()).mintReputation(uint(reputation), proposal.beneficiary, address(avatar)));\r\n            } else if (reputation < 0) {\r\n                require(\r\n                Controller(\r\n                avatar.owner()).burnReputation(uint(reputation*(-1)), proposal.beneficiary, address(avatar)));\r\n            }\r\n            if (reputation != 0) {\r\n                emit RedeemReputation(address(avatar), _proposalId, proposal.beneficiary, reputation);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev RedeemNativeToken reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @return amount the redeemed nativeToken.\r\n    */\r\n    function redeemNativeToken(bytes32 _proposalId) public returns(uint256 amount) {\r\n\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n\r\n        if (proposal.beneficiary == address(this)) {\r\n            //ensure nativeTokenRewardLeft can be set only one time\r\n            if (proposal.nativeTokenRewardLeft == 0) {\r\n                proposal.nativeTokenRewardLeft = proposal.nativeTokenReward;\r\n            }\r\n        }\r\n        amount = proposal.nativeTokenReward;\r\n        //set proposal rewards to zero to prevent reentrancy attack.\r\n        proposal.nativeTokenReward = 0;\r\n        if (amount > 0) {\r\n            require(Controller(avatar.owner()).mintTokens(amount, proposal.beneficiary, address(avatar)));\r\n            emit RedeemNativeToken(address(avatar), _proposalId, proposal.beneficiary, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev RedeemEther reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @return amount ether redeemed amount\r\n    */\r\n    function redeemEther(bytes32 _proposalId) public returns(uint256 amount) {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n\r\n        if (proposal.beneficiary == address(this)) {\r\n            if (proposal.ethRewardLeft == 0) {\r\n                proposal.ethRewardLeft = proposal.ethReward;\r\n            }\r\n        }\r\n        amount = proposal.ethReward;\r\n        //set proposal rewards to zero to prevent reentrancy attack.\r\n        proposal.ethReward = 0;\r\n        if (amount > 0) {\r\n            require(Controller(avatar.owner()).sendEther(amount, proposal.beneficiary, avatar));\r\n            emit RedeemEther(address(avatar), _proposalId, proposal.beneficiary, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev RedeemNativeToken reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @return amount the external token redeemed amount\r\n    */\r\n    function redeemExternalToken(bytes32 _proposalId) public returns(uint256 amount) {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n\r\n\r\n        if (proposal.beneficiary == address(this)) {\r\n            if (proposal.externalTokenRewardLeft == 0) {\r\n                proposal.externalTokenRewardLeft = proposal.externalTokenReward;\r\n            }\r\n        }\r\n\r\n        if (proposal.externalToken != IERC20(0) && proposal.externalTokenReward > 0) {\r\n            amount = proposal.externalTokenReward;\r\n            //set proposal rewards to zero to prevent reentrancy attack.\r\n            proposal.externalTokenReward = 0;\r\n            require(\r\n            Controller(\r\n            avatar.owner())\r\n            .externalTokenTransfer(proposal.externalToken, proposal.beneficiary, amount, avatar));\r\n            emit RedeemExternalToken(address(avatar), _proposalId, proposal.beneficiary, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev redeemReputationByRewarder redeem reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _beneficiary the beneficiary to mint reputation to.\r\n    * @param _reputation the reputation amount to mint\r\n    *        note: burn reputation is not supported via this function\r\n    */\r\n    function redeemReputationByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _reputation)\r\n    public\r\n    onlyRewarder\r\n    {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n        //this will ensure sum zero of reputation\r\n        //and that there was a privious call to redeemReputation function.\r\n        proposal.reputationChangeLeft =\r\n        proposal.reputationChangeLeft.sub(_reputation,\r\n        \"cannot redeem more reputation than allocated for this proposal or no redeemReputation was called\");\r\n        require(\r\n        Controller(\r\n        avatar.owner()).mintReputation(_reputation, _beneficiary, address(avatar)));\r\n        if (_reputation != 0) {\r\n            emit RedeemReputation(address(avatar), _proposalId, _beneficiary, int256(_reputation));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev redeemNativeTokenByRewarder redeem reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _beneficiary the beneficiary to mint tokens to.\r\n    * @param _amount the tokens amount to mint\r\n    */\r\n    function redeemNativeTokenByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _amount)\r\n    public\r\n    onlyRewarder\r\n    {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n        //this will ensure sum zero of reputation\r\n        //and that there was a privious call to redeemNativeToken function.\r\n        proposal.nativeTokenRewardLeft =\r\n        proposal.nativeTokenRewardLeft.sub(_amount,\r\n        \"cannot redeem more tokens than allocated for this proposal or no redeemNativeToken was called\");\r\n\r\n        if (_amount > 0) {\r\n            address(avatar.nativeToken()).safeTransfer(_beneficiary, _amount);\r\n            emit RedeemNativeToken(address(avatar), _proposalId, _beneficiary, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev redeemEtherByRewarder redeem reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _beneficiary the beneficiary to send eth to.\r\n    * @param _amount eth amount to send\r\n    */\r\n    function redeemEtherByRewarder(bytes32 _proposalId, address payable _beneficiary, uint256 _amount)\r\n    public\r\n    onlyRewarder\r\n    {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n        //this will ensure sum zero of reputation.\r\n        //and that there was a privious call to redeemEther function.\r\n        proposal.ethRewardLeft = proposal.ethRewardLeft.sub(_amount,\r\n        \"cannot redeem more Ether than allocated for this proposal or no redeemEther was called\");\r\n\r\n        if (_amount > 0) {\r\n            _beneficiary.transfer(_amount);\r\n            emit RedeemEther(address(avatar), _proposalId, _beneficiary, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev redeemExternalTokenByRewarder redeem reward for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _beneficiary the beneficiary to send the external token to.\r\n    * @param _amount the amount of external token to send\r\n    */\r\n    function redeemExternalTokenByRewarder(bytes32 _proposalId, address _beneficiary, uint256 _amount)\r\n    public\r\n    onlyRewarder {\r\n        ContributionProposal storage proposal = organizationProposals[_proposalId];\r\n        require(proposal.acceptedByVotingMachine, \"proposal was not accepted by the voting machine\");\r\n        //this will ensure sum zero of reputation.\r\n        //and that there was a privious call to redeemExternalToken function.\r\n        proposal.externalTokenRewardLeft =\r\n        proposal.externalTokenRewardLeft.sub(_amount,\r\n        \"cannot redeem more tokens than allocated for this proposal or no redeemExternalToken was called\");\r\n\r\n        if (proposal.externalToken != IERC20(0)) {\r\n            if (_amount > 0) {\r\n                address(proposal.externalToken).safeTransfer(_beneficiary, _amount);\r\n                emit RedeemExternalToken(address(avatar), _proposalId, _beneficiary, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev redeem rewards for proposal\r\n    * @param _proposalId the ID of the voting in the voting machine\r\n    * @param _whatToRedeem whatToRedeem array of boolean values:\r\n    *         whatToRedeem[0] - reputation\r\n    *         whatToRedeem[1] - nativeTokenReward\r\n    *         whatToRedeem[2] - Ether\r\n    *         whatToRedeem[3] - ExternalToken\r\n    * @return  result boolean array for each redeem type.\r\n    */\r\n    function redeem(bytes32 _proposalId, bool[4] memory _whatToRedeem)\r\n    public\r\n    returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)\r\n    {\r\n\r\n        if (_whatToRedeem[0]) {\r\n            reputationReward = redeemReputation(_proposalId);\r\n        }\r\n\r\n        if (_whatToRedeem[1]) {\r\n            nativeTokenReward = redeemNativeToken(_proposalId);\r\n        }\r\n\r\n        if (_whatToRedeem[2]) {\r\n            etherReward = redeemEther(_proposalId);\r\n        }\r\n\r\n        if (_whatToRedeem[3]) {\r\n            externalTokenReward = redeemExternalToken(_proposalId);\r\n        }\r\n    }\r\n\r\n    function getProposalEthReward(bytes32 _proposalId) public view returns (uint256) {\r\n        return organizationProposals[_proposalId].ethReward;\r\n    }\r\n\r\n    function getProposalExternalTokenReward(bytes32 _proposalId) public view returns (uint256) {\r\n        return organizationProposals[_proposalId].externalTokenReward;\r\n    }\r\n\r\n    function getProposalExternalToken(bytes32 _proposalId) public view returns (address) {\r\n        return address(organizationProposals[_proposalId].externalToken);\r\n    }\r\n\r\n    function getProposalReputationReward(bytes32 _proposalId) public view returns (int256) {\r\n        return organizationProposals[_proposalId].reputationChange;\r\n    }\r\n\r\n    function getProposalNativeTokenReward(bytes32 _proposalId) public view returns (uint256) {\r\n        return organizationProposals[_proposalId].nativeTokenReward;\r\n    }\r\n\r\n    function getProposalAcceptedByVotingMachine(bytes32 _proposalId) public view returns (bool) {\r\n        return organizationProposals[_proposalId].acceptedByVotingMachine;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/schemes/Competition.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\ncontract Competition {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public MAX_NUMBER_OF_WINNERS = 100;\r\n\r\n    event NewCompetitionProposal(\r\n        bytes32 indexed _proposalId,\r\n        uint256 _numberOfWinners,\r\n        uint256[] _rewardSplit,\r\n        uint256 _startTime,\r\n        uint256 _votingStartTime,\r\n        uint256 _suggestionsEndTime,\r\n        uint256 _endTime,\r\n        uint256 _maxNumberOfVotesPerVoter,\r\n        address payable _contributionRewardExt, //address of the contract to redeem from.\r\n        address _admin\r\n    );\r\n\r\n    event Redeem(\r\n        bytes32 indexed _proposalId,\r\n        uint256 indexed _suggestionId,\r\n        uint256 _rewardPercentage\r\n    );\r\n\r\n    event NewSuggestion(\r\n        bytes32 indexed _proposalId,\r\n        uint256 indexed _suggestionId,\r\n        string _descriptionHash,\r\n        address payable indexed _beneficiary\r\n    );\r\n\r\n    event NewVote(\r\n        bytes32 indexed _proposalId,\r\n        uint256 indexed _suggestionId,\r\n        address indexed _voter,\r\n        uint256 _reputation\r\n    );\r\n\r\n    event SnapshotBlock(\r\n        bytes32 indexed _proposalId,\r\n        uint256 _snapshotBlock\r\n    );\r\n\r\n    // A struct holding the data for a competition proposal\r\n    struct Proposal {\r\n        uint256 numberOfWinners;\r\n        uint256[] rewardSplit;\r\n        uint256 startTime;\r\n        uint256 votingStartTime;\r\n        uint256 suggestionsEndTime;\r\n        uint256 endTime;\r\n        uint256 maxNumberOfVotesPerVoter;\r\n        address payable contributionRewardExt;\r\n        uint256 snapshotBlock;\r\n        uint256 reputationReward;\r\n        uint256 ethReward;\r\n        uint256 nativeTokenReward;\r\n        uint256 externalTokenReward;\r\n        uint256[] topSuggestions;\r\n        address admin;\r\n        //mapping from suggestions totalVotes to the number of suggestions with the same totalVotes.\r\n        mapping(uint256=>uint256) suggestionsPerVote;\r\n        mapping(address=>uint256) votesPerVoter;\r\n    }\r\n\r\n    struct Suggestion {\r\n        uint256 totalVotes;\r\n        bytes32 proposalId;\r\n        address payable beneficiary;\r\n        mapping(address=>uint256) votes;\r\n    }\r\n\r\n    //mapping from proposalID to Proposal\r\n    mapping(bytes32=>Proposal) public proposals;\r\n    //mapping from suggestionId to Suggestion\r\n    mapping(uint256=>Suggestion) public suggestions;\r\n    uint256 public suggestionsCounter;\r\n    address payable public contributionRewardExt; //address of the contract to redeem from.\r\n\r\n    /**\r\n     * @dev initialize\r\n     * @param _contributionRewardExt the contributionRewardExt scheme which\r\n     *        manage and allocate the rewards for the competition.\r\n     */\r\n    function initialize(address payable _contributionRewardExt) external {\r\n        require(contributionRewardExt == address(0), \"can be called only one time\");\r\n        require(_contributionRewardExt != address(0), \"contributionRewardExt cannot be zero\");\r\n        contributionRewardExt = _contributionRewardExt;\r\n    }\r\n\r\n    /**\r\n    * @dev Submit a competion proposal\r\n    * @param _descriptionHash A hash of the proposal's description\r\n    * @param _reputationChange - Amount of reputation change requested.\r\n    * @param _rewards rewards array:\r\n    *         rewards[0] - Amount of tokens requested per period\r\n    *         rewards[1] - Amount of ETH requested per period\r\n    *         rewards[2] - Amount of external tokens requested per period\r\n    * @param _externalToken Address of external token, if reward is requested there\r\n    * @param _rewardSplit an array of precentages which specify how to split the rewards\r\n    *         between the winning suggestions\r\n    * @param _competitionParams competition parameters :\r\n    *         _competitionParams[0] - competition startTime\r\n    *         _competitionParams[1] - _votingStartTime competition voting start time\r\n    *         _competitionParams[2] - _endTime competition end time\r\n    *         _competitionParams[3] - _maxNumberOfVotesPerVoter on how many suggestions a voter can vote\r\n    *         _competitionParams[4] - _suggestionsEndTime suggestion submission end time\r\n    *        _proposerIsAdmin -\r\n    *          true -  proposer is an admin.\r\n    *          false no admin.\r\n    *          if admin is set, so only admin can suggest on this proposal.\r\n    * @return proposalId the proposal id.\r\n    */\r\n    function proposeCompetition(\r\n            string calldata _descriptionHash,\r\n            int256 _reputationChange,\r\n            uint[3] calldata _rewards,\r\n            IERC20 _externalToken,\r\n            uint256[] calldata _rewardSplit,\r\n            uint256[5] calldata _competitionParams,\r\n            bool _proposerIsAdmin\r\n    )\r\n    external\r\n    // solhint-disable-next-line function-max-lines\r\n    returns(bytes32 proposalId) {\r\n        uint256 numberOfWinners = _rewardSplit.length;\r\n        uint256 startTime = _competitionParams[0];\r\n        if (startTime == 0) {\r\n          // solhint-disable-next-line not-rely-on-time\r\n            startTime = now;\r\n        }\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(startTime >= now, \"startTime should be greater than proposing time\");\r\n        require(numberOfWinners <= MAX_NUMBER_OF_WINNERS, \"number of winners greater than max allowed\");\r\n        require(_competitionParams[1] < _competitionParams[2], \"voting start time greater than end time\");\r\n        require(_competitionParams[1] >= startTime, \"voting start time smaller than start time\");\r\n        require(_competitionParams[3] > 0, \"maxNumberOfVotesPerVoter should be greater than 0\");\r\n        require(_competitionParams[4] <= _competitionParams[2],\r\n        \"suggestionsEndTime should be earlier than proposal end time\");\r\n        require(_competitionParams[4] > startTime, \"suggestionsEndTime should be later than proposal start time\");\r\n        if (_rewards[2] > 0) {\r\n            require(_externalToken != ERC20(0), \"extenal token cannot be zero\");\r\n        }\r\n        require(_reputationChange >= 0, \"negative reputation change is not allowed for a competition\");\r\n        uint256 totalRewardSplit;\r\n        for (uint256 i = 0; i < numberOfWinners; i++) {\r\n            totalRewardSplit = totalRewardSplit.add(_rewardSplit[i]);\r\n        }\r\n        require(totalRewardSplit == 100, \"total rewards split is not 100%\");\r\n        proposalId = ContributionRewardExt(contributionRewardExt).proposeContributionReward(\r\n                _descriptionHash, _reputationChange, _rewards, _externalToken, contributionRewardExt, msg.sender);\r\n        proposals[proposalId].numberOfWinners = numberOfWinners;\r\n        proposals[proposalId].rewardSplit = _rewardSplit;\r\n        proposals[proposalId].startTime = startTime;\r\n        proposals[proposalId].votingStartTime = _competitionParams[1];\r\n        proposals[proposalId].endTime = _competitionParams[2];\r\n        proposals[proposalId].maxNumberOfVotesPerVoter = _competitionParams[3];\r\n        proposals[proposalId].suggestionsEndTime = _competitionParams[4];\r\n        proposals[proposalId].reputationReward = uint256(_reputationChange);\r\n        proposals[proposalId].nativeTokenReward = _rewards[0];\r\n        proposals[proposalId].ethReward = _rewards[1];\r\n        proposals[proposalId].externalTokenReward = _rewards[2];\r\n        proposals[proposalId].snapshotBlock = 0;\r\n        if (_proposerIsAdmin) {\r\n            proposals[proposalId].admin = msg.sender;\r\n        }\r\n        emit NewCompetitionProposal(\r\n            proposalId,\r\n            numberOfWinners,\r\n            proposals[proposalId].rewardSplit,\r\n            startTime,\r\n            proposals[proposalId].votingStartTime,\r\n            proposals[proposalId].suggestionsEndTime,\r\n            proposals[proposalId].endTime,\r\n            proposals[proposalId].maxNumberOfVotesPerVoter,\r\n            contributionRewardExt,\r\n            proposals[proposalId].admin\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev submit a competion suggestion\r\n    * @param _proposalId the proposal id this suggestion is referring to.\r\n    * @param _descriptionHash a descriptionHash of the suggestion.\r\n    * @param _beneficiary the beneficiary of this suggestion.\r\n    * @return suggestionId the suggestionId.\r\n    */\r\n    function suggest(\r\n            bytes32 _proposalId,\r\n            string calldata _descriptionHash,\r\n            address payable _beneficiary\r\n    )\r\n    external\r\n    returns(uint256)\r\n    {\r\n        if (proposals[_proposalId].admin != address(0)) {\r\n            require(proposals[_proposalId].admin == msg.sender, \"only admin can suggest\");\r\n        }\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(proposals[_proposalId].startTime <= now, \"competition not started yet\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(proposals[_proposalId].suggestionsEndTime > now, \"suggestions submission time is over\");\r\n        suggestionsCounter = suggestionsCounter.add(1);\r\n        suggestions[suggestionsCounter].proposalId = _proposalId;\r\n        address payable beneficiary;\r\n        if (_beneficiary == address(0)) {\r\n            beneficiary = msg.sender;\r\n        } else {\r\n            beneficiary = _beneficiary;\r\n        }\r\n        suggestions[suggestionsCounter].beneficiary = beneficiary;\r\n        emit NewSuggestion(_proposalId, suggestionsCounter, _descriptionHash, beneficiary);\r\n        return suggestionsCounter;\r\n    }\r\n\r\n    /**\r\n    * @dev vote on a suggestion\r\n    * @param _suggestionId suggestionId\r\n    * @return bool\r\n    */\r\n    function vote(uint256 _suggestionId)\r\n    external\r\n    returns(bool)\r\n    {\r\n        bytes32 proposalId = suggestions[_suggestionId].proposalId;\r\n        require(proposalId != bytes32(0), \"suggestion does not exist\");\r\n        setSnapshotBlock(proposalId);\r\n        Avatar avatar = ContributionRewardExt(contributionRewardExt).avatar();\r\n        uint256 reputation = avatar.nativeReputation().balanceOfAt(msg.sender, proposals[proposalId].snapshotBlock);\r\n        require(reputation > 0, \"voter had no reputation when snapshot was taken\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(proposal.endTime > now, \"competition ended\");\r\n        Suggestion storage suggestion = suggestions[_suggestionId];\r\n        require(suggestion.votes[msg.sender] == 0, \"already voted on this suggestion\");\r\n        require(proposal.votesPerVoter[msg.sender] < proposal.maxNumberOfVotesPerVoter,\r\n        \"exceed number of votes allowed\");\r\n        proposal.votesPerVoter[msg.sender] = proposal.votesPerVoter[msg.sender].add(1);\r\n        if (suggestion.totalVotes > 0) {\r\n            proposal.suggestionsPerVote[suggestion.totalVotes] =\r\n            proposal.suggestionsPerVote[suggestion.totalVotes].sub(1);\r\n        }\r\n        suggestion.totalVotes = suggestion.totalVotes.add(reputation);\r\n        proposal.suggestionsPerVote[suggestion.totalVotes] = proposal.suggestionsPerVote[suggestion.totalVotes].add(1);\r\n        suggestion.votes[msg.sender] = reputation;\r\n        refreshTopSuggestions(proposalId, _suggestionId);\r\n        emit NewVote(proposalId, _suggestionId, msg.sender, reputation);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev setSnapshotBlock set the block for the reputaion snapshot\r\n    * this function is public in order to externaly set snapshot block regardless of the first voting event.\r\n    * @param _proposalId the proposal id\r\n    */\r\n    function setSnapshotBlock(bytes32 _proposalId) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(proposals[_proposalId].votingStartTime < now, \"voting period not started yet\");\r\n        require(proposals[_proposalId].maxNumberOfVotesPerVoter > 0, \"proposal does not exist\");\r\n        if (proposals[_proposalId].snapshotBlock == 0) {\r\n            proposals[_proposalId].snapshotBlock = block.number;\r\n            emit SnapshotBlock(_proposalId, block.number);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev sendLeftOverFund send leftover funds back to the dao.\r\n    * @param _proposalId the proposal id\r\n    */\r\n    function sendLeftOverFunds(bytes32 _proposalId) public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(proposals[_proposalId].endTime < now, \"competition is still on\");\r\n        require(proposals[_proposalId].maxNumberOfVotesPerVoter > 0, \"proposal does not exist\");\r\n        require(_proposalId != bytes32(0), \"proposalId is zero\");\r\n        uint256[] memory topSuggestions = proposals[_proposalId].topSuggestions;\r\n        for (uint256 i = 0; i < topSuggestions.length; i++) {\r\n            require(suggestions[topSuggestions[i]].beneficiary == address(0), \"not all winning suggestions redeemed\");\r\n        }\r\n\r\n        (, , , , , ,\r\n        uint256 nativeTokenRewardLeft, ,\r\n        uint256 ethRewardLeft,\r\n        uint256 externalTokenRewardLeft,)\r\n        = ContributionRewardExt(contributionRewardExt).organizationProposals(_proposalId);\r\n\r\n        Avatar avatar = ContributionRewardExt(contributionRewardExt).avatar();\r\n\r\n        ContributionRewardExt(contributionRewardExt).redeemExternalTokenByRewarder(\r\n        _proposalId, address(avatar), externalTokenRewardLeft);\r\n\r\n        ContributionRewardExt(contributionRewardExt).redeemEtherByRewarder(\r\n        _proposalId, address(avatar), ethRewardLeft);\r\n\r\n        ContributionRewardExt(contributionRewardExt).redeemNativeTokenByRewarder(\r\n        _proposalId, address(avatar), nativeTokenRewardLeft);\r\n    }\r\n\r\n    /**\r\n    * @dev redeem a winning suggestion reward\r\n    * @param _suggestionId suggestionId\r\n    */\r\n    function redeem(uint256 _suggestionId) public {\r\n        bytes32 proposalId = suggestions[_suggestionId].proposalId;\r\n        require(proposalId != bytes32(0), \"proposalId is zero\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(_suggestionId > 0, \"suggestionId is zero\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(proposal.endTime < now, \"competition is still on\");\r\n        require(proposal.maxNumberOfVotesPerVoter > 0, \"proposal does not exist\");\r\n        require(suggestions[_suggestionId].beneficiary != address(0),\r\n        \"suggestion was already redeemed\");\r\n        address payable beneficiary = suggestions[_suggestionId].beneficiary;\r\n        uint256 orderIndex = getOrderedIndexOfSuggestion(_suggestionId);\r\n        require(orderIndex < proposal.topSuggestions.length, \"suggestion is not in winners list\");\r\n        suggestions[_suggestionId].beneficiary = address(0);\r\n        uint256 rewardPercentage = 0;\r\n        uint256 numberOfTieSuggestions = proposal.suggestionsPerVote[suggestions[_suggestionId].totalVotes];\r\n        uint256 j;\r\n        //calc the reward percentage for this suggestion\r\n        for (j = orderIndex; j < (orderIndex+numberOfTieSuggestions) && j < proposal.numberOfWinners; j++) {\r\n            rewardPercentage = rewardPercentage.add(proposal.rewardSplit[j]);\r\n        }\r\n        rewardPercentage = rewardPercentage.div(numberOfTieSuggestions);\r\n        uint256 rewardPercentageLeft = 0;\r\n        if (proposal.topSuggestions.length < proposal.numberOfWinners) {\r\n          //if there are less winners than the proposal number of winners so divide the pre allocated\r\n          //left reward equally between the winners\r\n            for (j = proposal.topSuggestions.length; j < proposal.numberOfWinners; j++) {\r\n                rewardPercentageLeft = rewardPercentageLeft.add(proposal.rewardSplit[j]);\r\n            }\r\n            rewardPercentage =\r\n            rewardPercentage.add(rewardPercentageLeft.div(proposal.topSuggestions.length));\r\n        }\r\n        uint256 amount;\r\n        amount = proposal.externalTokenReward.mul(rewardPercentage).div(100);\r\n        ContributionRewardExt(contributionRewardExt).redeemExternalTokenByRewarder(\r\n        proposalId, beneficiary, amount);\r\n\r\n        amount = proposal.reputationReward.mul(rewardPercentage).div(100);\r\n        ContributionRewardExt(contributionRewardExt).redeemReputationByRewarder(\r\n        proposalId, beneficiary, amount);\r\n\r\n        amount = proposal.ethReward.mul(rewardPercentage).div(100);\r\n        ContributionRewardExt(contributionRewardExt).redeemEtherByRewarder(\r\n        proposalId, beneficiary, amount);\r\n\r\n        amount = proposal.nativeTokenReward.mul(rewardPercentage).div(100);\r\n        ContributionRewardExt(contributionRewardExt).redeemNativeTokenByRewarder(\r\n        proposalId, beneficiary, amount);\r\n        emit Redeem(proposalId, _suggestionId, rewardPercentage);\r\n    }\r\n\r\n    /**\r\n    * @dev getOrderedIndexOfSuggestion return the index of specific suggestion in the winners list.\r\n    * for the case when the suggestion is NOT in the winners list,\r\n    * this method will return topSuggestions.length\r\n    * @param _suggestionId suggestion id\r\n    */\r\n    function getOrderedIndexOfSuggestion(uint256 _suggestionId)\r\n    public\r\n    view\r\n    returns(uint256 index) {\r\n        bytes32 proposalId = suggestions[_suggestionId].proposalId;\r\n        require(proposalId != bytes32(0), \"suggestion does not exist\");\r\n        uint256[] memory topSuggestions = proposals[proposalId].topSuggestions;\r\n        /** get how many elements are greater than a given element*/\r\n        for (uint256 i = 0; i < topSuggestions.length; i++) {\r\n            if (suggestions[topSuggestions[i]].totalVotes > suggestions[_suggestionId].totalVotes) {\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev refreshTopSuggestions this function maintain a winners list array.\r\n    * it will check if the given suggestion is among the top suggestions, and if so,\r\n    * update the list of top suggestions\r\n    * @param _proposalId proposal id\r\n    * @param _suggestionId suggestion id\r\n    */\r\n    // solhint-disable-next-line code-complexity\r\n    function refreshTopSuggestions(bytes32 _proposalId, uint256 _suggestionId) private {\r\n        uint256[] storage topSuggestions = proposals[_proposalId].topSuggestions;\r\n        uint256 topSuggestionsLength = topSuggestions.length;\r\n        uint256 i;\r\n        if (topSuggestionsLength < proposals[_proposalId].numberOfWinners) {\r\n            for (i = 0; i < topSuggestionsLength; i++) {\r\n                if (topSuggestions[i] == _suggestionId) {\r\n                    return;\r\n                }\r\n            }\r\n            topSuggestions.push(_suggestionId);\r\n        } else {\r\n         /** get the index of the smallest element **/\r\n            uint256 smallest = 0;\r\n            for (i = 0; i < proposals[_proposalId].numberOfWinners; i++) {\r\n                if (suggestions[topSuggestions[i]].totalVotes <\r\n                    suggestions[topSuggestions[smallest]].totalVotes) {\r\n                    smallest = i;\r\n                } else if (topSuggestions[i] == _suggestionId) {\r\n                  //the suggestion is already in the topSuggestions list\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (suggestions[topSuggestions[smallest]].totalVotes < suggestions[_suggestionId].totalVotes) {\r\n                topSuggestions[smallest] = _suggestionId;\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numberOfWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_rewardSplit\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votingStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_suggestionsEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxNumberOfVotesPerVoter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_contributionRewardExt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"NewCompetitionProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_suggestionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"NewSuggestion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_suggestionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reputation\",\"type\":\"uint256\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_suggestionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"SnapshotBlock\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_NUMBER_OF_WINNERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionRewardExt\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_suggestionId\",\"type\":\"uint256\"}],\"name\":\"getOrderedIndexOfSuggestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contributionRewardExt\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suggestionsEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNumberOfVotesPerVoter\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"contributionRewardExt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeTokenReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalTokenReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_reputationChange\",\"type\":\"int256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_rewards\",\"type\":\"uint256[3]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardSplit\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_competitionParams\",\"type\":\"uint256[5]\"},{\"internalType\":\"bool\",\"name\":\"_proposerIsAdmin\",\"type\":\"bool\"}],\"name\":\"proposeCompetition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_suggestionId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"sendLeftOverFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"}],\"name\":\"setSnapshotBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_descriptionHash\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"suggest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"suggestions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suggestionsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_suggestionId\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Competition","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://d5fa628043a72a81cd9c5d64a9afda215976013914c74a4871377e0ccfc28312"}]}