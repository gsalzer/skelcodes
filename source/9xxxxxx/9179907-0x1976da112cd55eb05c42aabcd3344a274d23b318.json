{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath.mul');\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, 'SafeMath.div');\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath.sub');\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath.add');\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, 'SafeMath.mod');\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() public {\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  modifier nonReentrant() {\r\n    _guardCounter += 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter, 'ReentrancyGuard.nonReentrant');\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"ONLY_CONTRACT_OWNER\");\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"INVALID_OWNER\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface IERC165 {\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId) public view returns (address operator);\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ncontract CryptoLuckyBags is ReentrancyGuard, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Create(\r\n    uint256 indexed id,\r\n    address indexed creator,\r\n    uint256 total,\r\n    uint256 price,\r\n    uint256 unsealingTimestamp,\r\n    bool sellingAfterUnsealingFlag,\r\n    bool codeFlag,\r\n    uint256 feePercentage\r\n  );\r\n\r\n  event Draw(\r\n    uint256 indexed id,\r\n    address indexed drawer,\r\n    uint256 indexed code\r\n  );\r\n\r\n  // TODO: 1回あたりの個数を設定できるようにする\r\n  struct LuckyBag {\r\n    uint256 id;\r\n    address payable creator;\r\n    address[] contractAddresses;\r\n    uint256[] tokenIds;\r\n    uint256 price;\r\n    uint256 total;\r\n    uint256 inventory;\r\n    uint256 unsealingTimestamp;\r\n    bool sellingAfterUnsealingFlag;\r\n    bool codeFlag;\r\n    bytes32[] hashedCodes;\r\n    address[] drawers;\r\n    uint256 feePercentage;\r\n  }\r\n\r\n  uint256 public feePercentage = 3;\r\n  uint256 public feePerCode = 100000000000000; // 0.0001 ETH\r\n  uint256 public balance;\r\n\r\n  uint8 public CODE_STATUS_NOT_EXIST = 0;\r\n  uint8 public CODE_STATUS_NOT_USED = 1;\r\n  uint8 public CODE_STATUS_USED = 2;\r\n\r\n  mapping (uint256 => LuckyBag) public luckyBags;\r\n  mapping (uint256 => mapping (address => uint256)) public drawerToNotYetSendNum;\r\n  mapping (uint256 => mapping (bytes32 => uint8)) public codeStatus;\r\n  mapping (uint256 => uint256) public deposit;\r\n  mapping (address => uint256[]) private creatorToIds;\r\n  mapping (address => uint256[]) private drawerToIds;\r\n\r\n  // TODO: 削除する\r\n  function temp_transferFrom(address contractAddress, uint256 tokenId, address to) public onlyOwner {\r\n    IERC721 token = IERC721(contractAddress);\r\n    token.transferFrom(address(this), to, tokenId);\r\n  }\r\n\r\n  // TODO: 削除する\r\n  function temp_transfer(address payable to) public onlyOwner {\r\n    to.transfer(address(this).balance);\r\n  }\r\n\r\n  // この関数を呼び出す前に、このコントラクトに approval を与えておく必要がある\r\n  function create(uint256 id, address[] calldata contractAddresses, uint256[] calldata tokenIds, uint256 price,\r\n    uint256 unsealingTimestamp, bool sellingAfterUnsealingFlag, bytes32[] calldata hashedCodes) external payable nonReentrant {\r\n    if (hashedCodes.length > 0) {\r\n      require(msg.value == feePerCode * hashedCodes.length, 'insufficient code fee');\r\n      balance = balance.add(msg.value);\r\n    }\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      IERC721 token = IERC721(contractAddresses[i]);\r\n      require(msg.sender == token.ownerOf(tokenIds[i]), 'not owner');\r\n      token.transferFrom(msg.sender, address(this), tokenIds[i]);\r\n    }\r\n    createInner(id, contractAddresses, tokenIds, price, unsealingTimestamp, sellingAfterUnsealingFlag, hashedCodes);\r\n  }\r\n\r\n  function draw(uint256 id, uint256 code, bool withUnsealFlag) external payable nonReentrant {\r\n    LuckyBag storage luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), 'not exist lucky bag');\r\n    require(luckyBag.inventory >= 1, 'sold out');\r\n    require(luckyBag.price == msg.value || luckyBag.codeFlag, 'not match price');\r\n    require(useCode(luckyBag, code), 'invalid code');\r\n    luckyBag.inventory = luckyBag.inventory.sub(1);\r\n    drawerToIds[msg.sender].push(id);\r\n\r\n    if (!luckyBag.codeFlag) {\r\n      deposit[id] = deposit[id].add(msg.value);\r\n    }\r\n    drawerToNotYetSendNum[id][msg.sender] = drawerToNotYetSendNum[id][msg.sender].add(1);\r\n    emit Draw(id, msg.sender, code);\r\n\r\n    if (block.timestamp >= luckyBag.unsealingTimestamp) {\r\n      require(luckyBag.sellingAfterUnsealingFlag, 'sale period has passed');\r\n      if (withUnsealFlag) {\r\n        decideAndSendItem(luckyBag);\r\n        sendEther(luckyBag);\r\n      }\r\n    }\r\n  }\r\n\r\n  function unseal(uint256 id) external nonReentrant {\r\n    LuckyBag storage luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), 'not exist lucky bag');\r\n    require(drawerToNotYetSendNum[id][msg.sender] >= 1, 'no items to unseal');\r\n    require(block.timestamp >= luckyBag.unsealingTimestamp, 'can not unseal yet');\r\n    drawerToNotYetSendNum[id][msg.sender] = drawerToNotYetSendNum[id][msg.sender].sub(1);\r\n    decideAndSendItem(luckyBag);\r\n    if (!luckyBag.codeFlag) {\r\n      deposit[id] = deposit[id].sub(luckyBag.price);\r\n      sendEther(luckyBag);\r\n    }\r\n  }\r\n\r\n  function withdrawInventory(uint256 id) external nonReentrant {\r\n    LuckyBag storage luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), 'not exist lucky bag');\r\n    require(luckyBag.creator == msg.sender, 'not creator');\r\n    require(luckyBag.inventory >= 1, 'sold out');\r\n    require(block.timestamp >= luckyBag.unsealingTimestamp, 'can not withdraw inventory yet');\r\n    luckyBag.inventory = luckyBag.inventory.sub(1);\r\n    drawerToIds[msg.sender].push(id);\r\n    decideAndSendItem(luckyBag);\r\n  }\r\n\r\n  function withdraw(uint256 id) external nonReentrant {\r\n    require(luckyBags[id].creator == msg.sender, 'not creator');\r\n    require(deposit[id] > 0, 'insufficient deposit');\r\n    uint256 amount = deposit[id];\r\n    deposit[id] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function get(uint256 id) external view returns (address, address[] memory, uint256[] memory, uint256, uint256, uint256, uint256, bool, bool, address[] memory, uint256) {\r\n    LuckyBag memory luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), 'not exist lucky bag');\r\n    return (\r\n      luckyBag.creator,\r\n      luckyBag.contractAddresses,\r\n      luckyBag.tokenIds,\r\n      luckyBag.price,\r\n      luckyBag.total,\r\n      luckyBag.inventory,\r\n      luckyBag.unsealingTimestamp,\r\n      luckyBag.sellingAfterUnsealingFlag,\r\n      luckyBag.codeFlag,\r\n      luckyBag.drawers,\r\n      luckyBag.feePercentage\r\n    );\r\n  }\r\n\r\n  function getCreatedIds(address creator) external view returns (uint256[] memory) {\r\n    return creatorToIds[creator];\r\n  }\r\n\r\n  function getDrawnIds(address drawer) external view returns (uint256[] memory) {\r\n    return drawerToIds[drawer];\r\n  }\r\n\r\n  function getInventories(uint256 id1, uint256 id2, uint256 id3, uint256 id4, uint256 id5)\r\n    external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n    return(luckyBags[id1].inventory, luckyBags[id2].inventory, luckyBags[id3].inventory, luckyBags[id4].inventory, luckyBags[id5].inventory);\r\n  }\r\n\r\n  function addCodes(uint256 id, bytes32[] memory hashedCodes) public {\r\n    require(msg.sender == luckyBags[id].creator, 'not creator');\r\n    uint32 totalCount = uint32(hashedCodes.length);\r\n    for (uint32 i = 0; i < totalCount; i++) {\r\n      codeStatus[id][hashedCodes[i]] = CODE_STATUS_NOT_USED;\r\n    }\r\n  }\r\n\r\n  function transfer(address payable to, uint256 amount) public onlyOwner {\r\n    require(balance >= amount, 'insufficient balance');\r\n    require(to != address(0), 'invalid to address');\r\n    balance = balance.sub(amount);\r\n    to.transfer(amount);\r\n  }\r\n\r\n  function setFeePercentage(uint256 newFeePercentage) public onlyOwner {\r\n    feePercentage = newFeePercentage;\r\n  }\r\n\r\n  function setFeePerCode(uint256 newFeePerCode) public onlyOwner {\r\n    feePerCode = newFeePerCode;\r\n  }\r\n\r\n  // ---\r\n\r\n  function createInner(uint256 id, address[] memory contractAddresses, uint256[] memory tokenIds,\r\n    uint256 price, uint256 unsealingTimestamp, bool sellingAfterUnsealingFlag, bytes32[] memory hashedCodes) internal {\r\n    require(luckyBags[id].creator == address(0), 'already exist id');\r\n    address[] memory drawers = new address[](tokenIds.length);\r\n    bool codeFlag = false;\r\n    if (hashedCodes.length > 0) {\r\n      codeFlag = true;\r\n      addCodes(id, hashedCodes);\r\n    }\r\n    luckyBags[id] = LuckyBag(\r\n      id, msg.sender, contractAddresses, tokenIds,\r\n      price, tokenIds.length, tokenIds.length, unsealingTimestamp,\r\n      sellingAfterUnsealingFlag, codeFlag, hashedCodes, drawers, feePercentage\r\n    );\r\n    creatorToIds[msg.sender].push(id);\r\n    emit Create(\r\n      id, msg.sender, tokenIds.length,\r\n      price, unsealingTimestamp, codeFlag, sellingAfterUnsealingFlag, feePercentage);\r\n  }\r\n\r\n  function useCode(LuckyBag memory luckyBag, uint256 code) internal returns (bool) {\r\n    if (!luckyBag.codeFlag) {\r\n      return true;\r\n    }\r\n    bytes32 hashedCode = keccak256(abi.encodePacked(code));\r\n    if (codeStatus[luckyBag.id][hashedCode] == CODE_STATUS_NOT_USED) {\r\n      codeStatus[luckyBag.id][hashedCode] = CODE_STATUS_USED;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function decideAndSendItem(LuckyBag storage luckyBag) internal {\r\n    uint32 totalCount = uint32(luckyBag.tokenIds.length);\r\n    uint32 index = getRandomNum(totalCount);\r\n    for (uint32 i = 0; i < totalCount; i++) {\r\n      if (luckyBag.drawers[index] != address(0)) {\r\n        index = (index + 1) % totalCount;\r\n        continue;\r\n      }\r\n      luckyBag.drawers[index] = msg.sender;\r\n      break;\r\n    }\r\n    IERC721(luckyBag.contractAddresses[index]).transferFrom(address(this), msg.sender, luckyBag.tokenIds[index]);\r\n  }\r\n\r\n  function getRandomNum(uint32 max) internal view returns (uint32) {\r\n    return uint32(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % max);\r\n  }\r\n\r\n  function sendEther(LuckyBag memory luckyBag) internal {\r\n    uint256 fee = getFee(luckyBag.price, luckyBag.feePercentage);\r\n    luckyBag.creator.transfer(luckyBag.price.sub(fee));\r\n    balance = balance.add(fee);\r\n  }\r\n\r\n  function getFee(uint256 amount, uint256 _feePercentage) internal pure returns (uint256) {\r\n    return amount.div(100).mul(_feePercentage);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unsealingTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellingAfterUnsealingFlag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"codeFlag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"drawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CODE_STATUS_NOT_EXIST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CODE_STATUS_NOT_USED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CODE_STATUS_USED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashedCodes\",\"type\":\"bytes32[]\"}],\"name\":\"addCodes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unsealingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellingAfterUnsealingFlag\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashedCodes\",\"type\":\"bytes32[]\"}],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withUnsealFlag\",\"type\":\"bool\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"drawerToNotYetSendNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePerCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatedIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"drawer\",\"type\":\"address\"}],\"name\":\"getDrawnIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id5\",\"type\":\"uint256\"}],\"name\":\"getInventories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"luckyBags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unsealingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellingAfterUnsealingFlag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"codeFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePerCode\",\"type\":\"uint256\"}],\"name\":\"setFeePerCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"temp_transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"temp_transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unseal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdrawInventory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoLuckyBags","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://94f25b49881df6afc88cc10fd3b37f4e51757a33a25843929b23c53d3716945d"}]}