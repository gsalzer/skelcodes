{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n//These contracts were made as a study on the new Solidity 0.6.x way of making transfers.\r\n\r\n//Makes sure we have all the transactions stored on the blockchain for easy and public auditing:\r\ncontract Log {\r\n    //Object representing each log:\r\n    struct Message {\r\n        address sender; //who did it\r\n        uint amount; //how much eth\r\n        uint time; //timestamp\r\n        string operation; //\"Deposit\" or \"Withdraw\"\r\n    }\r\n    \r\n    Message[] public history; //list of logs\r\n    Message lastMsg; //the last registered log\r\n    \r\n    //saves a log on the blockchain:\r\n    function register(address sender, uint amount, string memory operation) public {\r\n        history.push(Message(sender, amount, now, operation));\r\n    }\r\n}\r\n\r\n//Safely stores user's Ether and allows withdrawals using the new Solidity ^0.6.0 way:\r\ncontract SafeBank {\r\n    uint public constant minDeposit = 300 finney; //minimum deposit is 0.3 Ether (not worth it to deposit much less because of network fees)\r\n\r\n    mapping (address => uint) public balances; //balance of each user\r\n    Log transferLog; //logs each deposit and each withdraw for auditing\r\n    \r\n    constructor(address _log) public payable {\r\n        transferLog = Log(_log);\r\n    }\r\n    \r\n    //deposits Eth in the contract:\r\n    function deposit() public payable {\r\n        require(msg.value >= minDeposit, \"Minimum deposit not met.\"); //requires at least minDeposit\r\n\r\n        balances[msg.sender] += msg.value; //adds Eth to the balance of whoever called this function\r\n        transferLog.register(msg.sender, msg.value, \"Deposit\"); //logs the deposit\r\n    }\r\n    \r\n    //withdraws Eth from the contract:\r\n    function withdraw(uint amount) public {\r\n        require(amount <= balances[msg.sender], \"Insufficient funds\"); //requires the user has enough balance\r\n\r\n        (bool success,) = msg.sender.call.value(amount)(\"\"); //tries to send Eth to the user using the new Solidity ^0.6.0 way\r\n        if(success) { //if the transfer fails, the whole transaction is reverted\r\n            balances[msg.sender] -= amount; //reduce the user's balance\r\n            transferLog.register(msg.sender, amount, \"Withdraw\"); //logs the withdrawal\r\n        }\r\n    }\r\n    \r\n    //the new fallback function:\r\n    receive() external payable {\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_log\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SafeBank","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ee19abe8ca8d097e5c2fa3f711ddc5abb15ba613","Library":"","LicenseType":"None","SwarmSource":"ipfs://fba1d37c8997bd781cd434240b0587ace058834e939c711c7363ea50fd286458"}]}