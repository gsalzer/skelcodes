{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\ninterface IIEarnAPR {\r\n    function getAPROptions(address _token) external view returns (\r\n      uint256 uniapr,\r\n      uint256 capr,\r\n      uint256 unicapr,\r\n      uint256 iapr,\r\n      uint256 uniiapr,\r\n      uint256 aapr,\r\n      uint256 uniaapr,\r\n      uint256 dapr\r\n    );\r\n}\r\n\r\n\r\ncontract IEarnManager is Ownable {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    address public APR;\r\n\r\n    constructor() public {\r\n        APR = address(0x9CaD8AB10daA9AF1a9D2B878541f41b697268eEC);\r\n    }\r\n\r\n    function recommendSNX() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\r\n    }\r\n    function recommendUSDT() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    }\r\n    function recommendBAT() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x0D8775F648430679A709E98d2b0Cb6250d2887EF);\r\n    }\r\n    function recommendMKR() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2);\r\n    }\r\n    function recommendZRX() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0xE41d2489571d322189246DaFA5ebDe1F4699F498);\r\n    }\r\n    function recommendREP() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x1985365e9f78359a9B6AD760e32412f4a445E862);\r\n    }\r\n    function recommendKNC() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\r\n    }\r\n    function recommendWBTC() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    }\r\n    function recommendLINK() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x514910771AF9Ca656af840dff83E8264EcF986CA);\r\n    }\r\n    function recommendSUSD() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    }\r\n    function recommendDAI() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    }\r\n    function recommendETH() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    }\r\n    function recommendUSDC() public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      return recommend(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    }\r\n\r\n    function recommend(address _token) public view returns (\r\n      string memory choice,\r\n      uint256 capr,\r\n      uint256 iapr,\r\n      uint256 aapr,\r\n      uint256 dapr\r\n    ) {\r\n      (,capr,,iapr,,aapr,,dapr) = IIEarnAPR(APR).getAPROptions(_token);\r\n      uint256 max = 0;\r\n      if (capr > max) {\r\n        max = capr;\r\n      }\r\n      if (iapr > max) {\r\n        max = iapr;\r\n      }\r\n      if (aapr > max) {\r\n        max = aapr;\r\n      }\r\n      if (dapr > max) {\r\n        max = dapr;\r\n      }\r\n      choice = 'None';\r\n\r\n      if (max == dapr) {\r\n        choice = 'dYdX';\r\n      }\r\n      if (max == aapr) {\r\n        choice = 'Aave';\r\n      }\r\n      if (max == iapr) {\r\n        choice = 'Fulcrum';\r\n      }\r\n      if (max == capr) {\r\n        choice = 'Compound';\r\n      }\r\n      return (\r\n        choice,\r\n        capr,\r\n        iapr,\r\n        aapr,\r\n        dapr\r\n      );\r\n    }\r\n\r\n    /* Decision trees\r\n\r\n    */\r\n\r\n    /* Net outcomes;\r\n\r\n      BAT: cBAT vs aBAT\r\n      DAI: cDAI vs iDAI vs aDAI vs dDAI\r\n      KNC: iKNC vs aKNC\r\n      LINK: iLINK vs aLINK\r\n      MKR: aMKR\r\n      REP: cREP vs aREP\r\n      SNX: aSNX\r\n      sUSD: iSUSD vs aSUSD\r\n      USDC: cUSDC vs iUSDC vs aUSDC vs dUSDC\r\n      USDT: aUSDT\r\n      wBTC: cWBTC vs iWTBC vs aWBTC\r\n      ZRX: cZRX vs iZRX vs aZRX\r\n\r\n    */\r\n\r\n    function set_new_APR(address _new_APR) public onlyOwner {\r\n        APR = _new_APR;\r\n    }\r\n\r\n    // incase of half-way error\r\n    function inCaseTokenGetsStuck(IERC20 _TokenAddress) onlyOwner public {\r\n        uint qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.transfer(msg.sender, qty);\r\n    }\r\n    // incase of half-way error\r\n    function inCaseETHGetsStuck() onlyOwner public{\r\n        (bool result, ) = msg.sender.call.value(address(this).balance)(\"\");\r\n        require(result, \"transfer of ETH failed\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"APR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inCaseETHGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokenGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recommend\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendBAT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendDAI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendETH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendKNC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendLINK\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendMKR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendREP\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendSNX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendSUSD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendUSDC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendUSDT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendWBTC\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recommendZRX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"choice\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"capr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aapr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dapr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_APR\",\"type\":\"address\"}],\"name\":\"set_new_APR\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IEarnManager","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2750a26a2461afce1478788a085635ce7ba6442179cab2ddedeec7263d8a84a8"}]}