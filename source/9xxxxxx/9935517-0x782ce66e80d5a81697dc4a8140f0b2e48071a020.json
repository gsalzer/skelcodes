{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/proxy/Proxy.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract Proxy {\r\n    /**\r\n    * @dev Tells the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function _implementation() internal view returns(address);\r\n\r\n    /**\r\n    * @dev Fallback function.\r\n    * Implemented entirely in `_fallback`.\r\n    */\r\n    function _fallback() internal {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    function _delegate(address implementation) internal {\r\n        /*solium-disable-next-line security/no-inline-assembly*/\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        _fallback();\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/proxy/UpgradeabilityProxy.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n    // Version name of the current implementation\r\n    string internal __version;\r\n\r\n    // Address of the current implementation\r\n    address internal __implementation;\r\n\r\n    /**\r\n    * @dev This event will be emitted every time the implementation gets upgraded\r\n    * @param _newVersion representing the version name of the upgraded implementation\r\n    * @param _newImplementation representing the address of the upgraded implementation\r\n    */\r\n    event Upgraded(string _newVersion, address indexed _newImplementation);\r\n\r\n    /**\r\n    * @dev Upgrades the implementation address\r\n    * @param _newVersion representing the version name of the new implementation to be set\r\n    * @param _newImplementation representing the address of the new implementation to be set\r\n    */\r\n    function _upgradeTo(string memory _newVersion, address _newImplementation) internal {\r\n        require(\r\n            __implementation != _newImplementation && _newImplementation != address(0),\r\n            \"Old address is not allowed and implementation address should not be 0x\"\r\n        );\r\n        require(Address.isContract(_newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n        require(bytes(_newVersion).length > 0, \"Version should not be empty string\");\r\n        require(keccak256(abi.encodePacked(__version)) != keccak256(abi.encodePacked(_newVersion)), \"New version equals to current\");\r\n        __version = _newVersion;\r\n        __implementation = _newImplementation;\r\n        emit Upgraded(_newVersion, _newImplementation);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/proxy/OwnedUpgradeabilityProxy.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\r\n    // Owner of the contract\r\n    address private __upgradeabilityOwner;\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param _previousOwner representing the address of the previous owner\r\n    * @param _newOwner representing the address of the new owner\r\n    */\r\n    event ProxyOwnershipTransferred(address _previousOwner, address _newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier ifOwner() {\r\n        if (msg.sender == _upgradeabilityOwner()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev the constructor sets the original owner of the contract to the sender account.\r\n    */\r\n    constructor() public {\r\n        _setUpgradeabilityOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function _upgradeabilityOwner() internal view returns(address) {\r\n        return __upgradeabilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the owner\r\n    */\r\n    function _setUpgradeabilityOwner(address _newUpgradeabilityOwner) internal {\r\n        require(_newUpgradeabilityOwner != address(0), \"Address should not be 0x\");\r\n        __upgradeabilityOwner = _newUpgradeabilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @notice Internal function to provide the address of the implementation contract\r\n    */\r\n    function _implementation() internal view returns(address) {\r\n        return __implementation;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the proxy owner\r\n    * @return the address of the proxy owner\r\n    */\r\n    function proxyOwner() external ifOwner returns(address) {\r\n        return _upgradeabilityOwner();\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the version name of the current implementation\r\n    * @return string representing the name of the current version\r\n    */\r\n    function version() external ifOwner returns(string memory) {\r\n        return __version;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() external ifOwner returns(address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferProxyOwnership(address _newOwner) external ifOwner {\r\n        require(_newOwner != address(0), \"Address should not be 0x\");\r\n        emit ProxyOwnershipTransferred(_upgradeabilityOwner(), _newOwner);\r\n        _setUpgradeabilityOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy.\r\n    * @param _newVersion representing the version name of the new implementation to be set.\r\n    * @param _newImplementation representing the address of the new implementation to be set.\r\n    */\r\n    function upgradeTo(string calldata _newVersion, address _newImplementation) external ifOwner {\r\n        _upgradeTo(_newVersion, _newImplementation);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation\r\n    * to initialize whatever is needed through a low level call.\r\n    * @param _newVersion representing the version name of the new implementation to be set.\r\n    * @param _newImplementation representing the address of the new implementation to be set.\r\n    * @param _data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n    * signature of the implementation to be called with the needed payload\r\n    */\r\n    function upgradeToAndCall(string calldata _newVersion, address _newImplementation, bytes calldata _data) external payable ifOwner {\r\n        _upgradeToAndCall(_newVersion, _newImplementation, _data);\r\n    }\r\n\r\n    function _upgradeToAndCall(string memory _newVersion, address _newImplementation, bytes memory _data) internal {\r\n        _upgradeTo(_newVersion, _newImplementation);\r\n        bool success;\r\n        /*solium-disable-next-line security/no-call-value*/\r\n        (success, ) = address(this).call.value(msg.value)(_data);\r\n        require(success, \"Fail in executing the function of implementation contract\");\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/modules/TransferManager/RPTM/RestrictedPartialSaleTMStorage.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\ncontract RestrictedPartialSaleTMStorage {\r\n\r\n    // permission definition\r\n    bytes32 internal constant OPERATOR = \"OPERATOR\";\r\n\r\n    address[] exemptAddresses;\r\n\r\n    mapping(address => uint256) exemptIndex;\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Utility contract to allow pausing and unpausing of certain functions\r\n */\r\ncontract Pausable {\r\n    event Pause(address account);\r\n    event Unpause(address account);\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Already paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"Not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Called by the owner to pause, triggers stopped state\r\n    */\r\n    function _pause() internal whenNotPaused {\r\n        paused = true;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Pause(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Called by the owner to unpause, returns to normal state\r\n    */\r\n    function _unpause() internal whenPaused {\r\n        paused = false;\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit Unpause(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/ISecurityToken.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface for all security tokens\r\n */\r\ninterface ISecurityToken {\r\n    // Standard ERC20 interface\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns(uint8);\r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address owner) external view returns(uint256);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function transfer(address to, uint256 value) external returns(bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\r\n    function approve(address spender, uint256 value) external returns(bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @notice Transfers of securities may fail for a number of reasons. So this function will used to understand the\r\n     * cause of failure by getting the byte value. Which will be the ESC that follows the EIP 1066. ESC can be mapped\r\n     * with a reson string to understand the failure cause, table of Ethereum status code will always reside off-chain\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\r\n     * @return byte Ethereum status code (ESC)\r\n     * @return bytes32 Application specific reason code\r\n     */\r\n    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\r\n\r\n    // Emit at the time when module get added\r\n    event ModuleAdded(\r\n        uint8[] _types,\r\n        bytes32 indexed _name,\r\n        address indexed _moduleFactory,\r\n        address _module,\r\n        uint256 _moduleCost,\r\n        uint256 _budget,\r\n        bytes32 _label,\r\n        bool _archived\r\n    );\r\n    // Emit when Module get upgraded from the securityToken\r\n    event ModuleUpgraded(uint8[] _types, address _module);\r\n    // Emit when the token details get updated\r\n    event UpdateTokenDetails(string _oldDetails, string _newDetails);\r\n    // Emit when the token name get updated\r\n    event UpdateTokenName(string _oldName, string _newName);\r\n    // Emit when the granularity get changed\r\n    event GranularityChanged(uint256 _oldGranularity, uint256 _newGranularity);\r\n    // Emit when is permanently frozen by the issuer\r\n    event FreezeIssuance();\r\n    // Emit when transfers are frozen or unfrozen\r\n    event FreezeTransfers(bool _status);\r\n    // Emit when new checkpoint created\r\n    event CheckpointCreated(uint256 indexed _checkpointId, uint256 _investorLength);\r\n    // Events to log controller actions\r\n    event SetController(address indexed _oldController, address indexed _newController);\r\n    //Event emit when the global treasury wallet address get changed\r\n    event TreasuryWalletChanged(address _oldTreasuryWallet, address _newTreasuryWallet);\r\n    event DisableController();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event TokenUpgraded(uint8 _major, uint8 _minor, uint8 _patch);\r\n\r\n    // Emit when Module get archived from the securityToken\r\n    event ModuleArchived(uint8[] _types, address _module); //Event emitted by the tokenLib.\r\n    // Emit when Module get unarchived from the securityToken\r\n    event ModuleUnarchived(uint8[] _types, address _module); //Event emitted by the tokenLib.\r\n    // Emit when Module get removed from the securityToken\r\n    event ModuleRemoved(uint8[] _types, address _module); //Event emitted by the tokenLib.\r\n    // Emit when the budget allocated to a module is changed\r\n    event ModuleBudgetChanged(uint8[] _moduleTypes, address _module, uint256 _oldBudget, uint256 _budget); //Event emitted by the tokenLib.\r\n\r\n    // Transfer Events\r\n    event TransferByPartition(\r\n        bytes32 indexed _fromPartition,\r\n        address _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    // Operator Events\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n    event AuthorizedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperatorByPartition(bytes32 indexed partition, address indexed operator, address indexed tokenHolder);\r\n\r\n    // Issuance / Redemption Events\r\n    event IssuedByPartition(bytes32 indexed partition, address indexed to, uint256 value, bytes data);\r\n    event RedeemedByPartition(bytes32 indexed partition, address indexed operator, address indexed from, uint256 value, bytes data, bytes operatorData);\r\n\r\n    // Document Events\r\n    event DocumentRemoved(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n    event DocumentUpdated(bytes32 indexed _name, string _uri, bytes32 _documentHash);\r\n\r\n    // Controller Events\r\n    event ControllerTransfer(\r\n        address _controller,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    event ControllerRedemption(\r\n        address _controller,\r\n        address indexed _tokenHolder,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    // Issuance / Redemption Events\r\n    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\r\n    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\r\n\r\n    /**\r\n     * @notice Initialization function\r\n     * @dev Expected to be called atomically with the proxy being created, by the owner of the token\r\n     * @dev Can only be called once\r\n     */\r\n    function initialize(address _getterDelegate) external;\r\n\r\n    /**\r\n     * @notice The standard provides an on-chain function to determine whether a transfer will succeed,\r\n     * and return details indicating the reason if the transfer is not valid.\r\n     * @param _from The address from whom the tokens get transferred.\r\n     * @param _to The address to which to transfer tokens to.\r\n     * @param _partition The partition from which to transfer tokens\r\n     * @param _value The amount of tokens to transfer from `_partition`\r\n     * @param _data Additional data attached to the transfer of tokens\r\n     * @return ESC (Ethereum Status Code) following the EIP-1066 standard\r\n     * @return Application specific reason codes with additional details\r\n     * @return The partition to which the transferred tokens were allocated for the _to address\r\n     */\r\n    function canTransferByPartition(\r\n        address _from,\r\n        address _to,\r\n        bytes32 _partition,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        view\r\n        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\r\n\r\n    /**\r\n     * @notice Transfers of securities may fail for a number of reasons. So this function will used to understand the\r\n     * cause of failure by getting the byte value. Which will be the ESC that follows the EIP 1066. ESC can be mapped\r\n     * with a reson string to understand the failure cause, table of Ethereum status code will always reside off-chain\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\r\n     * @return byte Ethereum status code (ESC)\r\n     * @return bytes32 Application specific reason code\r\n     */\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\r\n\r\n    /**\r\n     * @notice Used to attach a new document to the contract, or update the URI or hash of an existing attached document\r\n     * @dev Can only be executed by the owner of the contract.\r\n     * @param _name Name of the document. It should be unique always\r\n     * @param _uri Off-chain uri of the document from where it is accessible to investors/advisors to read.\r\n     * @param _documentHash hash (of the contents) of the document.\r\n     */\r\n    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\r\n\r\n    /**\r\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\r\n     * @dev Can only be executed by the owner of the contract.\r\n     * @param _name Name of the document. It should be unique always\r\n     */\r\n    function removeDocument(bytes32 _name) external;\r\n\r\n    /**\r\n     * @notice Used to return the details of a document with a known name (`bytes32`).\r\n     * @param _name Name of the document\r\n     * @return string The URI associated with the document.\r\n     * @return bytes32 The hash (of the contents) of the document.\r\n     * @return uint256 the timestamp at which the document was last modified.\r\n     */\r\n    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\r\n\r\n    /**\r\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\r\n     * @return bytes32 List of all documents names present in the contract.\r\n     */\r\n    function getAllDocuments() external view returns (bytes32[] memory documentNames);\r\n\r\n    /**\r\n     * @notice In order to provide transparency over whether `controllerTransfer` / `controllerRedeem` are useable\r\n     * or not `isControllable` function will be used.\r\n     * @dev If `isControllable` returns `false` then it always return `false` and\r\n     * `controllerTransfer` / `controllerRedeem` will always revert.\r\n     * @return bool `true` when controller address is non-zero otherwise return `false`.\r\n     */\r\n    function isControllable() external view returns (bool controlled);\r\n\r\n    /**\r\n     * @notice Checks if an address is a module of certain type\r\n     * @param _module Address to check\r\n     * @param _type type to check against\r\n     */\r\n    function isModule(address _module, uint8 _type) external view returns(bool isValid);\r\n\r\n    /**\r\n     * @notice This function must be called to increase the total supply (Corresponds to mint function of ERC20).\r\n     * @dev It only be called by the token issuer or the operator defined by the issuer. ERC1594 doesn't have\r\n     * have the any logic related to operator but its superset ERC1400 have the operator logic and this function\r\n     * is allowed to call by the operator.\r\n     * @param _tokenHolder The account that will receive the created tokens (account should be whitelisted or KYCed).\r\n     * @param _value The amount of tokens need to be issued\r\n     * @param _data The `bytes _data` allows arbitrary data to be submitted alongside the transfer.\r\n     */\r\n    function issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice issue new tokens and assigns them to the target _tokenHolder.\r\n     * @dev Can only be called by the issuer or STO attached to the token.\r\n     * @param _tokenHolders A list of addresses to whom the minted tokens will be dilivered\r\n     * @param _values A list of number of tokens get minted and transfer to corresponding address of the investor from _tokenHolders[] list\r\n     * @return success\r\n     */\r\n    function issueMulti(address[] calldata _tokenHolders, uint256[] calldata _values) external;\r\n\r\n    /**\r\n     * @notice Increases totalSupply and the corresponding amount of the specified owners partition\r\n     * @param _partition The partition to allocate the increase in balance\r\n     * @param _tokenHolder The token holder whose balance should be increased\r\n     * @param _value The amount by which to increase the balance\r\n     * @param _data Additional data attached to the minting of tokens\r\n     */\r\n    function issueByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice Decreases totalSupply and the corresponding amount of the specified partition of msg.sender\r\n     * @param _partition The partition to allocate the decrease in balance\r\n     * @param _value The amount by which to decrease the balance\r\n     * @param _data Additional data attached to the burning of tokens\r\n     */\r\n    function redeemByPartition(bytes32 _partition, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice This function redeem an amount of the token of a msg.sender. For doing so msg.sender may incentivize\r\n     * using different ways that could be implemented with in the `redeem` function definition. But those implementations\r\n     * are out of the scope of the ERC1594.\r\n     * @param _value The amount of tokens need to be redeemed\r\n     * @param _data The `bytes _data` it can be used in the token contract to authenticate the redemption.\r\n     */\r\n    function redeem(uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice This function redeem an amount of the token of a msg.sender. For doing so msg.sender may incentivize\r\n     * using different ways that could be implemented with in the `redeem` function definition. But those implementations\r\n     * are out of the scope of the ERC1594.\r\n     * @dev It is analogy to `transferFrom`\r\n     * @param _tokenHolder The account whose tokens gets redeemed.\r\n     * @param _value The amount of tokens need to be redeemed\r\n     * @param _data The `bytes _data` it can be used in the token contract to authenticate the redemption.\r\n     */\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice Decreases totalSupply and the corresponding amount of the specified partition of tokenHolder\r\n     * @dev This function can only be called by the authorised operator.\r\n     * @param _partition The partition to allocate the decrease in balance.\r\n     * @param _tokenHolder The token holder whose balance should be decreased\r\n     * @param _value The amount by which to decrease the balance\r\n     * @param _data Additional data attached to the burning of tokens\r\n     * @param _operatorData Additional data attached to the transfer of tokens by the operator\r\n     */\r\n    function operatorRedeemByPartition(\r\n        bytes32 _partition,\r\n        address _tokenHolder,\r\n        uint256 _value,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Validate permissions with PermissionManager if it exists, If no Permission return false\r\n     * @dev Note that IModule withPerm will allow ST owner all permissions anyway\r\n     * @dev this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\r\n     * @param _delegate address of delegate\r\n     * @param _module address of PermissionManager module\r\n     * @param _perm the permissions\r\n     * @return success\r\n     */\r\n    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns(bool hasPermission);\r\n\r\n    /**\r\n     * @notice Returns module list for a module type\r\n     * @param _module Address of the module\r\n     * @return bytes32 Name\r\n     * @return address Module address\r\n     * @return address Module factory address\r\n     * @return bool Module archived\r\n     * @return uint8 Array of module types\r\n     * @return bytes32 Module label\r\n     */\r\n    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\r\n\r\n    /**\r\n     * @notice Returns module list for a module name\r\n     * @param _name Name of the module\r\n     * @return address[] List of modules with this name\r\n     */\r\n    function getModulesByName(bytes32 _name) external view returns(address[] memory modules);\r\n\r\n    /**\r\n     * @notice Returns module list for a module type\r\n     * @param _type Type of the module\r\n     * @return address[] List of modules with this type\r\n     */\r\n    function getModulesByType(uint8 _type) external view returns(address[] memory modules);\r\n\r\n    /**\r\n     * @notice use to return the global treasury wallet\r\n     */\r\n    function getTreasuryWallet() external view returns(address treasuryWallet);\r\n\r\n    /**\r\n     * @notice Queries totalSupply at a specified checkpoint\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function totalSupplyAt(uint256 _checkpointId) external view returns(uint256 supply);\r\n\r\n    /**\r\n     * @notice Queries balance at a specified checkpoint\r\n     * @param _investor Investor to query balance for\r\n     * @param _checkpointId Checkpoint ID to query as of\r\n     */\r\n    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns(uint256 balance);\r\n\r\n    /**\r\n     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\r\n     */\r\n    function createCheckpoint() external returns(uint256 checkpointId);\r\n\r\n    /**\r\n     * @notice Gets list of times that checkpoints were created\r\n     * @return List of checkpoint times\r\n     */\r\n    function getCheckpointTimes() external view returns(uint256[] memory checkpointTimes);\r\n\r\n    /**\r\n     * @notice returns an array of investors\r\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\r\n     * @return list of addresses\r\n     */\r\n    function getInvestors() external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice returns an array of investors at a given checkpoint\r\n     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\r\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\r\n     * @return list of investors\r\n     */\r\n    function getInvestorsAt(uint256 _checkpointId) external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice returns an array of investors with non zero balance at a given checkpoint\r\n     * @param _checkpointId Checkpoint id at which investor list is to be populated\r\n     * @param _start Position of investor to start iteration from\r\n     * @param _end Position of investor to stop iteration at\r\n     * @return list of investors\r\n     */\r\n    function getInvestorsSubsetAt(uint256 _checkpointId, uint256 _start, uint256 _end) external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice generates subset of investors\r\n     * NB - can be used in batches if investor list is large\r\n     * @param _start Position of investor to start iteration from\r\n     * @param _end Position of investor to stop iteration at\r\n     * @return list of investors\r\n     */\r\n    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[] memory investors);\r\n\r\n    /**\r\n     * @notice Gets current checkpoint ID\r\n     * @return Id\r\n     */\r\n    function currentCheckpointId() external view returns(uint256 checkpointId);\r\n\r\n    /**\r\n     * @notice Determines whether `_operator` is an operator for all partitions of `_tokenHolder`\r\n     * @param _operator The operator to check\r\n     * @param _tokenHolder The token holder to check\r\n     * @return Whether the `_operator` is an operator for all partitions of `_tokenHolder`\r\n     */\r\n    function isOperator(address _operator, address _tokenHolder) external view returns (bool isValid);\r\n\r\n    /**\r\n     * @notice Determines whether `_operator` is an operator for a specified partition of `_tokenHolder`\r\n     * @param _partition The partition to check\r\n     * @param _operator The operator to check\r\n     * @param _tokenHolder The token holder to check\r\n     * @return Whether the `_operator` is an operator for a specified partition of `_tokenHolder`\r\n     */\r\n    function isOperatorForPartition(bytes32 _partition, address _operator, address _tokenHolder) external view returns (bool isValid);\r\n\r\n    /**\r\n     * @notice Return all partitions\r\n     * @param _tokenHolder Whom balance need to queried\r\n     * @return List of partitions\r\n     */\r\n    function partitionsOf(address _tokenHolder) external pure returns (bytes32[] memory partitions);\r\n\r\n    /**\r\n     * @notice Gets data store address\r\n     * @return data store address\r\n     */\r\n    function dataStore() external view returns (address dataStoreAddress);\r\n\r\n    /**\r\n    * @notice Allows owner to change data store\r\n    * @param _dataStore Address of the token data store\r\n    */\r\n    function changeDataStore(address _dataStore) external;\r\n\r\n\r\n    /**\r\n     * @notice Allows to change the treasury wallet address\r\n     * @param _wallet Ethereum address of the treasury wallet\r\n     */\r\n    function changeTreasuryWallet(address _wallet) external;\r\n\r\n    /**\r\n     * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\r\n     * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\r\n     * @param _tokenContract Address of the ERC20Basic compliance token\r\n     * @param _value Amount of POLY to withdraw\r\n     */\r\n    function withdrawERC20(address _tokenContract, uint256 _value) external;\r\n\r\n    /**\r\n    * @notice Allows owner to increase/decrease POLY approval of one of the modules\r\n    * @param _module Module address\r\n    * @param _change Change in allowance\r\n    * @param _increase True if budget has to be increased, false if decrease\r\n    */\r\n    function changeModuleBudget(address _module, uint256 _change, bool _increase) external;\r\n\r\n    /**\r\n     * @notice Changes the tokenDetails\r\n     * @param _newTokenDetails New token details\r\n     */\r\n    function updateTokenDetails(string calldata _newTokenDetails) external;\r\n\r\n    /**\r\n    * @notice Allows owner to change token name\r\n    * @param _name new name of the token\r\n    */\r\n    function changeName(string calldata _name) external;\r\n\r\n    /**\r\n    * @notice Allows the owner to change token granularity\r\n    * @param _granularity Granularity level of the token\r\n    */\r\n    function changeGranularity(uint256 _granularity) external;\r\n\r\n    /**\r\n     * @notice Freezes all the transfers\r\n     */\r\n    function freezeTransfers() external;\r\n\r\n    /**\r\n     * @notice Un-freezes all the transfers\r\n     */\r\n    function unfreezeTransfers() external;\r\n\r\n    /**\r\n     * @notice Permanently freeze issuance of this security token.\r\n     * @dev It MUST NOT be possible to increase `totalSuppy` after this function is called.\r\n     */\r\n    function freezeIssuance(bytes calldata _signature) external;\r\n\r\n    /**\r\n      * @notice Attachs a module to the SecurityToken\r\n      * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\r\n      * @dev to control restrictions on transfers.\r\n      * @param _moduleFactory is the address of the module factory to be added\r\n      * @param _data is data packed into bytes used to further configure the module (See STO usage)\r\n      * @param _maxCost max amount of POLY willing to pay to the module.\r\n      * @param _budget max amount of ongoing POLY willing to assign to the module.\r\n      * @param _label custom module label.\r\n      * @param _archived whether to add the module as an archived module\r\n      */\r\n    function addModuleWithLabel(\r\n        address _moduleFactory,\r\n        bytes calldata _data,\r\n        uint256 _maxCost,\r\n        uint256 _budget,\r\n        bytes32 _label,\r\n        bool _archived\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Function used to attach a module to the security token\r\n     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\r\n     * @dev to control restrictions on transfers.\r\n     * @dev You are allowed to add a new moduleType if:\r\n     * @dev - there is no existing module of that type yet added\r\n     * @dev - the last member of the module list is replacable\r\n     * @param _moduleFactory is the address of the module factory to be added\r\n     * @param _data is data packed into bytes used to further configure the module (See STO usage)\r\n     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\r\n     * @param _budget max amount of ongoing POLY willing to assign to the module.\r\n     * @param _archived whether to add the module as an archived module\r\n     */\r\n    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\r\n\r\n    /**\r\n    * @notice Archives a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function archiveModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Unarchives a module attached to the SecurityToken\r\n    * @param _module address of module to unarchive\r\n    */\r\n    function unarchiveModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Removes a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function removeModule(address _module) external;\r\n\r\n    /**\r\n     * @notice Used by the issuer to set the controller addresses\r\n     * @param _controller address of the controller\r\n     */\r\n    function setController(address _controller) external;\r\n\r\n    /**\r\n     * @notice This function allows an authorised address to transfer tokens between any two token holders.\r\n     * The transfer must still respect the balances of the token holders (so the transfer must be for at most\r\n     * `balanceOf(_from)` tokens) and potentially also need to respect other transfer restrictions.\r\n     * @dev This function can only be executed by the `controller` address.\r\n     * @param _from Address The address which you want to send tokens from\r\n     * @param _to Address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @param _data data to validate the transfer. (It is not used in this reference implementation\r\n     * because use of `_data` parameter is implementation specific).\r\n     * @param _operatorData data attached to the transfer by controller to emit in event. (It is more like a reason string\r\n     * for calling this function (aka force transfer) which provides the transparency on-chain).\r\n     */\r\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\r\n\r\n    /**\r\n     * @notice This function allows an authorised address to redeem tokens for any token holder.\r\n     * The redemption must still respect the balances of the token holder (so the redemption must be for at most\r\n     * `balanceOf(_tokenHolder)` tokens) and potentially also need to respect other transfer restrictions.\r\n     * @dev This function can only be executed by the `controller` address.\r\n     * @param _tokenHolder The account whose tokens will be redeemed.\r\n     * @param _value uint256 the amount of tokens need to be redeemed.\r\n     * @param _data data to validate the transfer. (It is not used in this reference implementation\r\n     * because use of `_data` parameter is implementation specific).\r\n     * @param _operatorData data attached to the transfer by controller to emit in event. (It is more like a reason string\r\n     * for calling this function (aka force transfer) which provides the transparency on-chain).\r\n     */\r\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\r\n\r\n    /**\r\n     * @notice Used by the issuer to permanently disable controller functionality\r\n     * @dev enabled via feature switch \"disableControllerAllowed\"\r\n     */\r\n    function disableController(bytes calldata _signature) external;\r\n\r\n    /**\r\n     * @notice Used to get the version of the securityToken\r\n     */\r\n    function getVersion() external view returns(uint8[] memory version);\r\n\r\n    /**\r\n     * @notice Gets the investor count\r\n     */\r\n    function getInvestorCount() external view returns(uint256 investorCount);\r\n\r\n    /**\r\n     * @notice Gets the holder count (investors with non zero balance)\r\n     */\r\n    function holderCount() external view returns(uint256 count);\r\n\r\n    /**\r\n      * @notice Overloaded version of the transfer function\r\n      * @param _to receiver of transfer\r\n      * @param _value value of transfer\r\n      * @param _data data to indicate validation\r\n      * @return bool success\r\n      */\r\n    function transferWithData(address _to, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n      * @notice Overloaded version of the transferFrom function\r\n      * @param _from sender of transfer\r\n      * @param _to receiver of transfer\r\n      * @param _value value of transfer\r\n      * @param _data data to indicate validation\r\n      * @return bool success\r\n      */\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes calldata _data) external;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of tokens from a specified partition from one address to another address\r\n     * @param _partition The partition from which to transfer tokens\r\n     * @param _to The address to which to transfer tokens to\r\n     * @param _value The amount of tokens to transfer from `_partition`\r\n     * @param _data Additional data attached to the transfer of tokens\r\n     * @return The partition to which the transferred tokens were allocated for the _to address\r\n     */\r\n    function transferByPartition(bytes32 _partition, address _to, uint256 _value, bytes calldata _data) external returns (bytes32 partition);\r\n\r\n    /**\r\n     * @notice Get the balance according to the provided partitions\r\n     * @param _partition Partition which differentiate the tokens.\r\n     * @param _tokenHolder Whom balance need to queried\r\n     * @return Amount of tokens as per the given partitions\r\n     */\r\n    function balanceOfByPartition(bytes32 _partition, address _tokenHolder) external view returns(uint256 balance);\r\n\r\n    /**\r\n      * @notice Provides the granularity of the token\r\n      * @return uint256\r\n      */\r\n    function granularity() external view returns(uint256 granularityAmount);\r\n\r\n    /**\r\n      * @notice Provides the address of the polymathRegistry\r\n      * @return address\r\n      */\r\n    function polymathRegistry() external view returns(address registryAddress);\r\n\r\n    /**\r\n    * @notice Upgrades a module attached to the SecurityToken\r\n    * @param _module address of module to archive\r\n    */\r\n    function upgradeModule(address _module) external;\r\n\r\n    /**\r\n    * @notice Upgrades security token\r\n    */\r\n    function upgradeToken() external;\r\n\r\n    /**\r\n     * @notice A security token issuer can specify that issuance has finished for the token\r\n     * (i.e. no new tokens can be minted or issued).\r\n     * @dev If a token returns FALSE for `isIssuable()` then it MUST always return FALSE in the future.\r\n     * If a token returns FALSE for `isIssuable()` then it MUST never allow additional tokens to be issued.\r\n     * @return bool `true` signifies the minting is allowed. While `false` denotes the end of minting\r\n     */\r\n    function isIssuable() external view returns (bool issuable);\r\n\r\n    /**\r\n     * @notice Authorises an operator for all partitions of `msg.sender`.\r\n     * NB - Allowing investors to authorize an investor to be an operator of all partitions\r\n     * but it doesn't mean we operator is allowed to transfer the LOCKED partition values.\r\n     * Logic for this restriction is written in `operatorTransferByPartition()` function.\r\n     * @param _operator An address which is being authorised.\r\n     */\r\n    function authorizeOperator(address _operator) external;\r\n\r\n    /**\r\n     * @notice Revokes authorisation of an operator previously given for all partitions of `msg.sender`.\r\n     * NB - Allowing investors to authorize an investor to be an operator of all partitions\r\n     * but it doesn't mean we operator is allowed to transfer the LOCKED partition values.\r\n     * Logic for this restriction is written in `operatorTransferByPartition()` function.\r\n     * @param _operator An address which is being de-authorised\r\n     */\r\n    function revokeOperator(address _operator) external;\r\n\r\n    /**\r\n     * @notice Authorises an operator for a given partition of `msg.sender`\r\n     * @param _partition The partition to which the operator is authorised\r\n     * @param _operator An address which is being authorised\r\n     */\r\n    function authorizeOperatorByPartition(bytes32 _partition, address _operator) external;\r\n\r\n    /**\r\n     * @notice Revokes authorisation of an operator previously given for a specified partition of `msg.sender`\r\n     * @param _partition The partition to which the operator is de-authorised\r\n     * @param _operator An address which is being de-authorised\r\n     */\r\n    function revokeOperatorByPartition(bytes32 _partition, address _operator) external;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of tokens from a specified partition from one address to another address\r\n     * @param _partition The partition from which to transfer tokens.\r\n     * @param _from The address from which to transfer tokens from\r\n     * @param _to The address to which to transfer tokens to\r\n     * @param _value The amount of tokens to transfer from `_partition`\r\n     * @param _data Additional data attached to the transfer of tokens\r\n     * @param _operatorData Additional data attached to the transfer of tokens by the operator\r\n     * @return The partition to which the transferred tokens were allocated for the _to address\r\n     */\r\n    function operatorTransferByPartition(\r\n        bytes32 _partition,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData\r\n    )\r\n        external\r\n        returns (bytes32 partition);\r\n\r\n    /*\r\n    * @notice Returns if transfers are currently frozen or not\r\n    */\r\n    function transfersFrozen() external view returns (bool isFrozen);\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() external view returns (bool);\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() external view returns (address ownerAddress);\r\n\r\n    function controller() external view returns(address controllerAddress);\r\n\r\n    function moduleRegistry() external view returns(address moduleRegistryAddress);\r\n\r\n    function securityTokenRegistry() external view returns(address securityTokenRegistryAddress);\r\n\r\n    function polyToken() external view returns(address polyTokenAddress);\r\n\r\n    function tokenFactory() external view returns(address tokenFactoryAddress);\r\n\r\n    function getterDelegate() external view returns(address delegate);\r\n\r\n    function controllerDisabled() external view returns(bool isDisabled);\r\n\r\n    function initialized() external view returns(bool isInitialized);\r\n\r\n    function tokenDetails() external view returns(string memory details);\r\n\r\n    function updateFromRegistry() external;\r\n\r\n}\r\n\r\n// File: contracts/storage/modules/ModuleStorage.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * @title Storage for Module contract\r\n * @notice Contract is abstract\r\n */\r\ncontract ModuleStorage {\r\n    address public factory;\r\n\r\n    ISecurityToken public securityToken;\r\n\r\n    // Permission flag\r\n    bytes32 public constant ADMIN = \"ADMIN\";\r\n    bytes32 public constant OPERATOR = \"OPERATOR\";\r\n\r\n    bytes32 internal constant TREASURY = 0xaae8817359f3dcb67d050f44f3e49f982e0359d90ca4b5f18569926304aaece6; // keccak256(abi.encodePacked(\"TREASURY_WALLET\"))\r\n\r\n    IERC20 public polyToken;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _securityToken Address of the security token\r\n     * @param _polyAddress Address of the polytoken\r\n     */\r\n    constructor(address _securityToken, address _polyAddress) public {\r\n        securityToken = ISecurityToken(_securityToken);\r\n        factory = msg.sender;\r\n        polyToken = IERC20(_polyAddress);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/modules/TransferManager/RPTM/RestrictedPartialSaleTMProxy.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Transfer Manager module for core transfer validation functionality\r\n */\r\ncontract RestrictedPartialSaleTMProxy is RestrictedPartialSaleTMStorage, ModuleStorage, Pausable, OwnedUpgradeabilityProxy {\r\n    /**\r\n    * @notice Constructor\r\n    * @param _securityToken Address of the security token\r\n    * @param _polyAddress Address of the polytoken\r\n    * @param _implementation representing the address of the new implementation to be set\r\n    */\r\n    constructor (\r\n        string memory _version,\r\n        address _securityToken,\r\n        address _polyAddress,\r\n        address _implementation\r\n    )\r\n        public\r\n        ModuleStorage(_securityToken, _polyAddress)\r\n    {\r\n        require(\r\n            _implementation != address(0),\r\n            \"Implementation address should not be 0x\"\r\n        );\r\n        _upgradeTo(_version, _implementation);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libraries/VersionUtils.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Helper library use to compare or validate the semantic versions\r\n */\r\n\r\nlibrary VersionUtils {\r\n\r\n    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\r\n        require(_current.length == 3);\r\n        require(_new.length == 3);\r\n        uint8 i = 0;\r\n        for (i = 0; i < _current.length; i++) {\r\n            if (_current[i] == _new[i]) continue;\r\n            if (_current[i] < _new[i]) return true;\r\n            if (_current[i] > _new[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\r\n        require(_current.length == 3);\r\n        require(_new.length == 3);\r\n        uint8 i = 0;\r\n        for (i = 0; i < _current.length; i++) {\r\n            if (_current[i] == _new[i]) continue;\r\n            if (_current[i] > _new[i]) return true;\r\n            if (_current[i] < _new[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to pack the uint8[] array data into uint24 value\r\n     * @param _major Major version\r\n     * @param _minor Minor version\r\n     * @param _patch Patch version\r\n     */\r\n    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\r\n        return (uint24(_major) << 16) | (uint24(_minor) << 8) | uint24(_patch);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to convert packed data into uint8 array\r\n     * @param _packedVersion Packed data\r\n     */\r\n    function unpack(uint24 _packedVersion) internal pure returns(uint8[] memory) {\r\n        uint8[] memory _unpackVersion = new uint8[](3);\r\n        _unpackVersion[0] = uint8(_packedVersion >> 16);\r\n        _unpackVersion[1] = uint8(_packedVersion >> 8);\r\n        _unpackVersion[2] = uint8(_packedVersion);\r\n        return _unpackVersion;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Used to packed the KYC data\r\n     */\r\n    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\r\n        // this function packs 3 uint64 and a uint8 together in a uint256 to save storage cost\r\n        // a is rotated left by 136 bits, b is rotated left by 72 bits and c is rotated left by 8 bits.\r\n        // rotation pads empty bits with zeroes so now we can safely do a bitwise OR operation to pack\r\n        // all the variables together.\r\n        return (uint256(_a) << 136) | (uint256(_b) << 72) | (uint256(_c) << 8) | uint256(_d);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to convert packed data into KYC data\r\n     * @param _packedVersion Packed data\r\n     */\r\n    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\r\n        canSendAfter = uint64(_packedVersion >> 136);\r\n        canReceiveAfter = uint64(_packedVersion >> 72);\r\n        expiryTime = uint64(_packedVersion >> 8);\r\n        added = uint8(_packedVersion);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Util.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Utility contract for reusable code\r\n */\r\nlibrary Util {\r\n    /**\r\n    * @notice Changes a string to upper case\r\n    * @param _base String to change\r\n    */\r\n    function upper(string memory _base) internal pure returns(string memory) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            bytes1 b1 = _baseBytes[i];\r\n            if (b1 >= 0x61 && b1 <= 0x7A) {\r\n                b1 = bytes1(uint8(b1) - 32);\r\n            }\r\n            _baseBytes[i] = b1;\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the string into bytes32\r\n     * @param _source String that need to convert into bytes32\r\n     */\r\n    /// Notice - Maximum Length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\r\n    function stringToBytes32(string memory _source) internal pure returns(bytes32) {\r\n        return bytesToBytes32(bytes(_source), 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes bytes into bytes32\r\n     * @param _b Bytes that need to convert into bytes32\r\n     * @param _offset Offset from which to begin conversion\r\n     */\r\n    /// Notice - Maximum length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\r\n    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\r\n        bytes32 result;\r\n\r\n        for (uint i = 0; i < _b.length; i++) {\r\n            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the bytes32 into string\r\n     * @param _source that need to convert into string\r\n     */\r\n    function bytes32ToString(bytes32 _source) internal pure returns(string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        uint j = 0;\r\n        for (j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(_source) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets function signature from _data\r\n     * @param _data Passed data\r\n     * @return bytes4 sig\r\n     */\r\n    function getSig(bytes memory _data) internal pure returns(bytes4 sig) {\r\n        uint len = _data.length < 4 ? _data.length : 4;\r\n        for (uint256 i = 0; i < len; i++) {\r\n          sig |= bytes4(_data[i] & 0xFF) >> (i * 8);\r\n        }\r\n        return sig;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IModule.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface that every module contract should implement\r\n */\r\ninterface IModule {\r\n    /**\r\n     * @notice This function returns the signature of configure function\r\n     */\r\n    function getInitFunction() external pure returns(bytes4 initFunction);\r\n\r\n    /**\r\n     * @notice Return the permission flags that are associated with a module\r\n     */\r\n    function getPermissions() external view returns(bytes32[] memory permissions);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IOracle.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IOracle {\r\n    /**\r\n    * @notice Returns address of oracle currency (0x0 for ETH)\r\n    */\r\n    function getCurrencyAddress() external view returns(address currency);\r\n\r\n    /**\r\n    * @notice Returns symbol of oracle currency (0x0 for ETH)\r\n    */\r\n    function getCurrencySymbol() external view returns(bytes32 symbol);\r\n\r\n    /**\r\n    * @notice Returns denomination of price\r\n    */\r\n    function getCurrencyDenominated() external view returns(bytes32 denominatedCurrency);\r\n\r\n    /**\r\n    * @notice Returns price - should throw if not valid\r\n    */\r\n    function getPrice() external returns(uint256 price);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IPolymathRegistry.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IPolymathRegistry {\r\n\r\n    event ChangeAddress(string _nameKey, address indexed _oldAddress, address indexed _newAddress);\r\n    \r\n    /**\r\n     * @notice Returns the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @return address\r\n     */\r\n    function getAddress(string calldata _nameKey) external view returns(address registryAddress);\r\n\r\n    /**\r\n     * @notice Changes the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @param _newAddress is the new contract address\r\n     */\r\n    function changeAddress(string calldata _nameKey, address _newAddress) external;\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IModuleFactory.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface that every module factory contract should implement\r\n */\r\ninterface IModuleFactory {\r\n    \r\n    event ChangeSetupCost(uint256 _oldSetupCost, uint256 _newSetupCost);\r\n    event ChangeUsageCost(uint256 _oldUsageCost, uint256 _newUsageCost);\r\n    event UsageCostProposed(uint256 _proposedFee, uint256 _currentFee);\r\n    event ChangeCostType(bool _isOldCostInPoly, bool _isNewCostInPoly);\r\n    event ChangeCostTypeProposed(bool _proposedCostType, bool _currentCostType);\r\n    event GenerateModuleFromFactory(\r\n        address _module,\r\n        bytes32 indexed _moduleName,\r\n        address indexed _moduleFactory,\r\n        address _creator,\r\n        uint256 _setupCost,\r\n        uint256 _setupCostInPoly\r\n    );\r\n    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\r\n    //Should create an instance of the Module, or throw\r\n    function deploy(bytes calldata _data) external returns(address moduleAddress);\r\n\r\n    /**\r\n     * @notice Get factory owner\r\n     */\r\n    function owner() external view returns (address factoryOwner);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function version() external view returns(string memory moduleVersion);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function name() external view returns(bytes32 moduleName);\r\n\r\n    /**\r\n     * @notice Returns the title associated with the module\r\n     */\r\n    function title() external view returns(string memory moduleTitle);\r\n\r\n    /**\r\n     * @notice Returns the description associated with the module\r\n     */\r\n    function description() external view returns(string memory moduleDescription);\r\n\r\n    /**\r\n     * @notice Get the setup cost of the module in USD\r\n     */\r\n    function setupCost() external view returns(uint256 usdSetupCost);\r\n\r\n    /**\r\n     * @notice Get the usage cost of the module in USD\r\n     */\r\n    function usageCost() external view returns(uint256 usdUsageCost);\r\n\r\n    /**\r\n     * @notice Get the usage cost of the module in USD\r\n     */\r\n    function proposedUsageCost() external view returns(uint256 usdProposedUsageCost);\r\n\r\n    /**\r\n     * @notice Get the usage cost proposal time\r\n     */\r\n    function usageCostProposedAt() external view returns(uint256 usageCostProposedAtTime);\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getTypes() external view returns(uint8[] memory moduleTypes);\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() external view returns(bytes32[] memory moduleTags);\r\n\r\n    /**\r\n     * @notice Used to change the setup fee\r\n     * @param _newSetupCost New setup fee\r\n     */\r\n    function changeSetupCost(uint256 _newSetupCost) external;\r\n\r\n    /**\r\n     * @notice Used to change the usage cost\r\n     */\r\n    function changeUsageCost() external;\r\n\r\n    /**\r\n     * @notice Used to change the cost type\r\n     */\r\n    function changeCostType() external;\r\n\r\n    /**\r\n     * @notice Used to propose the usage cost\r\n     * @param _usageCostProposed Proposed usage cost amount\r\n     */\r\n    function proposeUsageCost(uint256 _usageCostProposed) external;\r\n\r\n    /**\r\n     * @notice Used to change the currency and amount of setup cost\r\n     * @param _setupCost new setup cost\r\n     * @param _usageCost new usage cost\r\n     * @param _isCostInPoly new setup cost currency. USD or POLY\r\n     */\r\n    function changeCostAndType(uint256 _setupCost, uint256 _usageCost, bool _isCostInPoly) external;\r\n\r\n    /**\r\n     * @notice Function use to change the lower and upper bound of the compatible version st\r\n     * @param _boundType Type of bound\r\n     * @param _newVersion New version array\r\n     */\r\n    function changeSTVersionBounds(string calldata _boundType, uint8[] calldata _newVersion) external;\r\n\r\n    /**\r\n     * @notice Get the setup cost of the module\r\n     */\r\n    function setupCostInPoly() external returns (uint256 polySetupCost);\r\n\r\n    /**\r\n     * @notice Get the usage cost of the module\r\n     */\r\n    function usageCostInPoly() external returns (uint256 polyUsageCost);\r\n\r\n    /**\r\n     * @notice Used to get the lower bound\r\n     * @return Lower bound\r\n     */\r\n    function getLowerSTVersionBounds() external view returns(uint8[] memory lowerBounds);\r\n\r\n    /**\r\n     * @notice Used to get the upper bound\r\n     * @return Upper bound\r\n     */\r\n    function getUpperSTVersionBounds() external view returns(uint8[] memory upperBounds);\r\n\r\n    /**\r\n     * @notice Updates the tags of the ModuleFactory\r\n     * @param _tagsData New list of tags\r\n     */\r\n    function changeTags(bytes32[] calldata _tagsData) external;\r\n\r\n    /**\r\n     * @notice Updates the name of the ModuleFactory\r\n     * @param _name New name that will replace the old one.\r\n     */\r\n    function changeName(bytes32 _name) external;\r\n\r\n    /**\r\n     * @notice Updates the description of the ModuleFactory\r\n     * @param _description New description that will replace the old one.\r\n     */\r\n    function changeDescription(string calldata _description) external;\r\n\r\n    /**\r\n     * @notice Updates the title of the ModuleFactory\r\n     * @param _title New Title that will replace the old one.\r\n     */\r\n    function changeTitle(string calldata _title) external;\r\n\r\n    /**\r\n     * @notice Address of the polymath registry\r\n     */\r\n    function polymathRegistry() external returns (address polymathRegistryAddress);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/ISecurityTokenRegistry.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface for the Polymath Security Token Registry contract\r\n */\r\ninterface ISecurityTokenRegistry {\r\n\r\n    // Emit when network becomes paused\r\n    event Pause(address account);\r\n    // Emit when network becomes unpaused\r\n    event Unpause(address account);\r\n    // Emit when the ticker is removed from the registry\r\n    event TickerRemoved(string _ticker, address _removedBy);\r\n    // Emit when the token ticker expiry is changed\r\n    event ChangeExpiryLimit(uint256 _oldExpiry, uint256 _newExpiry);\r\n    // Emit when changeSecurityLaunchFee is called\r\n    event ChangeSecurityLaunchFee(uint256 _oldFee, uint256 _newFee);\r\n    // Emit when changeTickerRegistrationFee is called\r\n    event ChangeTickerRegistrationFee(uint256 _oldFee, uint256 _newFee);\r\n    // Emit when Fee currency is changed\r\n    event ChangeFeeCurrency(bool _isFeeInPoly);\r\n    // Emit when ownership gets transferred\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    // Emit when ownership of the ticker gets changed\r\n    event ChangeTickerOwnership(string _ticker, address indexed _oldOwner, address indexed _newOwner);\r\n    // Emit at the time of launching a new security token of version 3.0+\r\n    event NewSecurityToken(\r\n        string _ticker,\r\n        string _name,\r\n        address indexed _securityTokenAddress,\r\n        address indexed _owner,\r\n        uint256 _addedAt,\r\n        address _registrant,\r\n        bool _fromAdmin,\r\n        uint256 _usdFee,\r\n        uint256 _polyFee,\r\n        uint256 _protocolVersion\r\n    );\r\n    // Emit at the time of launching a new security token v2.0.\r\n    // _registrationFee is in poly\r\n    event NewSecurityToken(\r\n        string _ticker,\r\n        string _name,\r\n        address indexed _securityTokenAddress,\r\n        address indexed _owner,\r\n        uint256 _addedAt,\r\n        address _registrant,\r\n        bool _fromAdmin,\r\n        uint256 _registrationFee\r\n    );\r\n    // Emit when new ticker get registers\r\n    event RegisterTicker(\r\n        address indexed _owner,\r\n        string _ticker,\r\n        uint256 indexed _registrationDate,\r\n        uint256 indexed _expiryDate,\r\n        bool _fromAdmin,\r\n        uint256 _registrationFeePoly,\r\n        uint256 _registrationFeeUsd\r\n    );\r\n    // Emit after ticker registration\r\n    // _registrationFee is in poly\r\n    // fee in usd is not being emitted to maintain backwards compatibility\r\n    event RegisterTicker(\r\n        address indexed _owner,\r\n        string _ticker,\r\n        string _name,\r\n        uint256 indexed _registrationDate,\r\n        uint256 indexed _expiryDate,\r\n        bool _fromAdmin,\r\n        uint256 _registrationFee\r\n    );\r\n    // Emit at when issuer refreshes exisiting token\r\n    event SecurityTokenRefreshed(\r\n        string _ticker,\r\n        string _name,\r\n        address indexed _securityTokenAddress,\r\n        address indexed _owner,\r\n        uint256 _addedAt,\r\n        address _registrant,\r\n        uint256 _protocolVersion\r\n    );\r\n    event ProtocolFactorySet(address indexed _STFactory, uint8 _major, uint8 _minor, uint8 _patch);\r\n    event LatestVersionSet(uint8 _major, uint8 _minor, uint8 _patch);\r\n    event ProtocolFactoryRemoved(address indexed _STFactory, uint8 _major, uint8 _minor, uint8 _patch);\r\n\r\n    /**\r\n     * @notice Deploys an instance of a new Security Token of version 2.0 and records it to the registry\r\n     * @dev this function is for backwards compatibilty with 2.0 dApp.\r\n     * @param _name is the name of the token\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _divisible is whether or not the token is divisible\r\n     */\r\n    function generateSecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        string calldata _tokenDetails,\r\n        bool _divisible\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Deploys an instance of a new Security Token and records it to the registry\r\n     * @param _name is the name of the token\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _divisible is whether or not the token is divisible\r\n     * @param _treasuryWallet Ethereum address which will holds the STs.\r\n     * @param _protocolVersion Version of securityToken contract\r\n     * - `_protocolVersion` is the packed value of uin8[3] array (it will be calculated offchain)\r\n     * - if _protocolVersion == 0 then latest version of securityToken will be generated\r\n     */\r\n    function generateNewSecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        string calldata _tokenDetails,\r\n        bool _divisible,\r\n        address _treasuryWallet,\r\n        uint256 _protocolVersion\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Deploys an instance of a new Security Token and replaces the old one in the registry\r\n     * This can be used to upgrade from version 2.0 of ST to 3.0 or in case something goes wrong with earlier ST\r\n     * @dev This function needs to be in STR 3.0. Defined public to avoid stack overflow\r\n     * @param _name is the name of the token\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _divisible is whether or not the token is divisible\r\n     */\r\n    function refreshSecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        string calldata _tokenDetails,\r\n        bool _divisible,\r\n        address _treasuryWallet\r\n    )\r\n        external returns (address securityToken);\r\n\r\n    /**\r\n     * @notice Adds a new custom Security Token and saves it to the registry. (Token should follow the ISecurityToken interface)\r\n     * @param _name Name of the token\r\n     * @param _ticker Ticker of the security token\r\n     * @param _owner Owner of the token\r\n     * @param _securityToken Address of the securityToken\r\n     * @param _tokenDetails Off-chain details of the token\r\n     * @param _deployedAt Timestamp at which security token comes deployed on the ethereum blockchain\r\n     */\r\n    function modifySecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        address _owner,\r\n        address _securityToken,\r\n        string calldata _tokenDetails,\r\n        uint256 _deployedAt\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @notice Adds a new custom Security Token and saves it to the registry. (Token should follow the ISecurityToken interface)\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _owner is the owner of the token\r\n     * @param _securityToken is the address of the securityToken\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _deployedAt is the timestamp at which the security token is deployed\r\n     */\r\n    function modifyExistingSecurityToken(\r\n        string calldata _ticker,\r\n        address _owner,\r\n        address _securityToken,\r\n        string calldata _tokenDetails,\r\n        uint256 _deployedAt\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Modifies the ticker details. Only Polymath has the ability to do so.\r\n     * @notice Only allowed to modify the tickers which are not yet deployed.\r\n     * @param _owner is the owner of the token\r\n     * @param _ticker is the token ticker\r\n     * @param _registrationDate is the date at which ticker is registered\r\n     * @param _expiryDate is the expiry date for the ticker\r\n     * @param _status is the token deployment status\r\n     */\r\n    function modifyExistingTicker(\r\n        address _owner,\r\n        string calldata _ticker,\r\n        uint256 _registrationDate,\r\n        uint256 _expiryDate,\r\n        bool _status\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Registers the token ticker for its particular owner\r\n     * @notice once the token ticker is registered to its owner then no other issuer can claim\r\n     * @notice its ownership. If the ticker expires and its issuer hasn't used it, then someone else can take it.\r\n     * @param _owner Address of the owner of the token\r\n     * @param _ticker Token ticker\r\n     * @param _tokenName Name of the token\r\n     */\r\n    function registerTicker(address _owner, string calldata _ticker, string calldata _tokenName) external;\r\n\r\n    /**\r\n     * @notice Registers the token ticker to the selected owner\r\n     * @notice Once the token ticker is registered to its owner then no other issuer can claim\r\n     * @notice its ownership. If the ticker expires and its issuer hasn't used it, then someone else can take it.\r\n     * @param _owner is address of the owner of the token\r\n     * @param _ticker is unique token ticker\r\n     */\r\n    function registerNewTicker(address _owner, string calldata _ticker) external;\r\n\r\n    /**\r\n    * @notice Check that Security Token is registered\r\n    * @param _securityToken Address of the Scurity token\r\n    * @return bool\r\n    */\r\n    function isSecurityToken(address _securityToken) external view returns(bool isValid);\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n    /**\r\n     * @notice Get security token address by ticker name\r\n     * @param _ticker Symbol of the Scurity token\r\n     * @return address\r\n     */\r\n    function getSecurityTokenAddress(string calldata _ticker) external view returns(address tokenAddress);\r\n\r\n    /**\r\n    * @notice Returns the security token data by address\r\n    * @param _securityToken is the address of the security token.\r\n    * @return string is the ticker of the security Token.\r\n    * @return address is the issuer of the security Token.\r\n    * @return string is the details of the security token.\r\n    * @return uint256 is the timestamp at which security Token was deployed.\r\n    */\r\n    function getSecurityTokenData(address _securityToken) external view returns (\r\n        string memory tokenSymbol,\r\n        address tokenAddress,\r\n        string memory tokenDetails,\r\n        uint256 tokenTime\r\n    );\r\n\r\n    /**\r\n     * @notice Get the current STFactory Address\r\n     */\r\n    function getSTFactoryAddress() external view returns(address stFactoryAddress);\r\n\r\n    /**\r\n     * @notice Returns the STFactory Address of a particular version\r\n     * @param _protocolVersion Packed protocol version\r\n     */\r\n    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) external view returns(address stFactory);\r\n\r\n    /**\r\n     * @notice Get Protocol version\r\n     */\r\n    function getLatestProtocolVersion() external view returns(uint8[] memory protocolVersion);\r\n\r\n    /**\r\n     * @notice Used to get the ticker list as per the owner\r\n     * @param _owner Address which owns the list of tickers\r\n     */\r\n    function getTickersByOwner(address _owner) external view returns(bytes32[] memory tickers);\r\n\r\n    /**\r\n     * @notice Returns the list of tokens owned by the selected address\r\n     * @param _owner is the address which owns the list of tickers\r\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\r\n     */\r\n    function getTokensByOwner(address _owner) external view returns(address[] memory tokens);\r\n\r\n    /**\r\n     * @notice Returns the list of all tokens\r\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\r\n     */\r\n    function getTokens() external view returns(address[] memory tokens);\r\n\r\n    /**\r\n     * @notice Returns the owner and timestamp for a given ticker\r\n     * @param _ticker ticker\r\n     * @return address\r\n     * @return uint256\r\n     * @return uint256\r\n     * @return string\r\n     * @return bool\r\n     */\r\n    function getTickerDetails(string calldata _ticker) external view returns(address tickerOwner, uint256 tickerRegistration, uint256 tickerExpiry, string memory tokenName, bool tickerStatus);\r\n\r\n    /**\r\n     * @notice Modifies the ticker details. Only polymath account has the ability\r\n     * to do so. Only allowed to modify the tickers which are not yet deployed\r\n     * @param _owner Owner of the token\r\n     * @param _ticker Token ticker\r\n     * @param _tokenName Name of the token\r\n     * @param _registrationDate Date on which ticker get registered\r\n     * @param _expiryDate Expiry date of the ticker\r\n     * @param _status Token deployed status\r\n     */\r\n    function modifyTicker(\r\n        address _owner,\r\n        string calldata _ticker,\r\n        string calldata _tokenName,\r\n        uint256 _registrationDate,\r\n        uint256 _expiryDate,\r\n        bool _status\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @notice Removes the ticker details and associated ownership & security token mapping\r\n     * @param _ticker Token ticker\r\n     */\r\n    function removeTicker(string calldata _ticker) external;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of the ticker\r\n     * @dev _newOwner Address whom ownership to transfer\r\n     * @dev _ticker Ticker\r\n     */\r\n    function transferTickerOwnership(address _newOwner, string calldata _ticker) external;\r\n\r\n    /**\r\n     * @notice Changes the expiry time for the token ticker\r\n     * @param _newExpiry New time period for token ticker expiry\r\n     */\r\n    function changeExpiryLimit(uint256 _newExpiry) external;\r\n\r\n   /**\r\n    * @notice Sets the ticker registration fee in USD tokens. Only Polymath.\r\n    * @param _tickerRegFee is the registration fee in USD tokens (base 18 decimals)\r\n    */\r\n    function changeTickerRegistrationFee(uint256 _tickerRegFee) external;\r\n\r\n    /**\r\n    * @notice Sets the ticker registration fee in USD tokens. Only Polymath.\r\n    * @param _stLaunchFee is the registration fee in USD tokens (base 18 decimals)\r\n    */\r\n    function changeSecurityLaunchFee(uint256 _stLaunchFee) external;\r\n\r\n    /**\r\n    * @notice Sets the ticker registration and ST launch fee amount and currency\r\n    * @param _tickerRegFee is the ticker registration fee (base 18 decimals)\r\n    * @param _stLaunchFee is the st generation fee (base 18 decimals)\r\n    * @param _isFeeInPoly defines if the fee is in poly or usd\r\n    */\r\n    function changeFeesAmountAndCurrency(uint256 _tickerRegFee, uint256 _stLaunchFee, bool _isFeeInPoly) external;\r\n\r\n    /**\r\n    * @notice Changes the SecurityToken contract for a particular factory version\r\n    * @notice Used only by Polymath to upgrade the SecurityToken contract and add more functionalities to future versions\r\n    * @notice Changing versions does not affect existing tokens.\r\n    * @param _STFactoryAddress is the address of the proxy.\r\n    * @param _major Major version of the proxy.\r\n    * @param _minor Minor version of the proxy.\r\n    * @param _patch Patch version of the proxy\r\n    */\r\n    function setProtocolFactory(address _STFactoryAddress, uint8 _major, uint8 _minor, uint8 _patch) external;\r\n\r\n    /**\r\n    * @notice Removes a STFactory\r\n    * @param _major Major version of the proxy.\r\n    * @param _minor Minor version of the proxy.\r\n    * @param _patch Patch version of the proxy\r\n    */\r\n    function removeProtocolFactory(uint8 _major, uint8 _minor, uint8 _patch) external;\r\n\r\n    /**\r\n    * @notice Changes the default protocol version\r\n    * @notice Used only by Polymath to upgrade the SecurityToken contract and add more functionalities to future versions\r\n    * @notice Changing versions does not affect existing tokens.\r\n    * @param _major Major version of the proxy.\r\n    * @param _minor Minor version of the proxy.\r\n    * @param _patch Patch version of the proxy\r\n    */\r\n    function setLatestVersion(uint8 _major, uint8 _minor, uint8 _patch) external;\r\n\r\n    /**\r\n     * @notice Changes the PolyToken address. Only Polymath.\r\n     * @param _newAddress is the address of the polytoken.\r\n     */\r\n    function updatePolyTokenAddress(address _newAddress) external;\r\n\r\n    /**\r\n     * @notice Used to update the polyToken contract address\r\n     */\r\n    function updateFromRegistry() external;\r\n\r\n    /**\r\n     * @notice Gets the security token launch fee\r\n     * @return Fee amount\r\n     */\r\n    function getSecurityTokenLaunchFee() external returns(uint256 fee);\r\n\r\n    /**\r\n     * @notice Gets the ticker registration fee\r\n     * @return Fee amount\r\n     */\r\n    function getTickerRegistrationFee() external returns(uint256 fee);\r\n\r\n    /**\r\n     * @notice Set the getter contract address\r\n     * @param _getterContract Address of the contract\r\n     */\r\n    function setGetterRegistry(address _getterContract) external;\r\n\r\n    /**\r\n     * @notice Returns the usd & poly fee for a particular feetype\r\n     * @param _feeType Key corresponding to fee type\r\n     */\r\n    function getFees(bytes32 _feeType) external returns (uint256 usdFee, uint256 polyFee);\r\n\r\n    /**\r\n     * @notice Returns the list of tokens to which the delegate has some access\r\n     * @param _delegate is the address for the delegate\r\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\r\n     */\r\n    function getTokensByDelegate(address _delegate) external view returns(address[] memory tokens);\r\n\r\n    /**\r\n     * @notice Gets the expiry limit\r\n     * @return Expiry limit\r\n     */\r\n    function getExpiryLimit() external view returns(uint256 expiry);\r\n\r\n    /**\r\n     * @notice Gets the status of the ticker\r\n     * @param _ticker Ticker whose status need to determine\r\n     * @return bool\r\n     */\r\n    function getTickerStatus(string calldata _ticker) external view returns(bool status);\r\n\r\n    /**\r\n     * @notice Gets the fee currency\r\n     * @return true = poly, false = usd\r\n     */\r\n    function getIsFeeInPoly() external view returns(bool isInPoly);\r\n\r\n    /**\r\n     * @notice Gets the owner of the ticker\r\n     * @param _ticker Ticker whose owner need to determine\r\n     * @return address Address of the owner\r\n     */\r\n    function getTickerOwner(string calldata _ticker) external view returns(address owner);\r\n\r\n    /**\r\n     * @notice Checks whether the registry is paused or not\r\n     * @return bool\r\n     */\r\n    function isPaused() external view returns(bool paused);\r\n\r\n    /**\r\n    * @notice Called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() external;\r\n\r\n    /**\r\n     * @notice Called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n     * @notice Reclaims all ERC20Basic compatible tokens\r\n     * @param _tokenContract is the address of the token contract\r\n     */\r\n    function reclaimERC20(address _tokenContract) external;\r\n\r\n    /**\r\n     * @notice Gets the owner of the contract\r\n     * @return address owner\r\n     */\r\n    function owner() external view returns(address ownerAddress);\r\n\r\n    /**\r\n     * @notice Checks if the entered ticker is registered and has not expired\r\n     * @param _ticker is the token ticker\r\n     * @return bool\r\n     */\r\n    function tickerAvailable(string calldata _ticker) external view returns(bool);\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/DecimalMath.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant e18 = uint256(10) ** uint256(18);\r\n\r\n    /**\r\n     * @notice This function multiplies two decimals represented as (decimal * 10**DECIMALS)\r\n     * @return uint256 Result of multiplication represented as (decimal * 10**DECIMALS)\r\n     */\r\n    function mul(uint256 x, uint256 y) internal pure returns(uint256 z) {\r\n        z = SafeMath.add(SafeMath.mul(x, y), (e18) / 2) / (e18);\r\n    }\r\n\r\n    /**\r\n     * @notice This function divides two decimals represented as (decimal * 10**DECIMALS)\r\n     * @return uint256 Result of division represented as (decimal * 10**DECIMALS)\r\n     */\r\n    function div(uint256 x, uint256 y) internal pure returns(uint256 z) {\r\n        z = SafeMath.add(SafeMath.mul(x, (e18)), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/modules/ModuleFactory.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Interface that any module factory contract should implement\r\n * @notice Contract is abstract\r\n */\r\ncontract ModuleFactory is IModuleFactory, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IPolymathRegistry public polymathRegistry;\r\n\r\n    string internal initialVersion;\r\n    bytes32 public name;\r\n    string public title;\r\n    string public description;\r\n\r\n    uint8[] internal typesData;\r\n    bytes32[] internal tagsData;\r\n\r\n    bool public isCostInPoly;\r\n    uint256 public setupCost;\r\n    uint256 public usageCost;\r\n    uint256 public proposedUsageCost;\r\n    uint256 public usageCostProposedAt;\r\n    bool public willCostInPoly;\r\n    uint256 public changeInCostTypeAt;\r\n    uint256 internal constant COLDPERIOD = 24 hours;\r\n\r\n    string constant POLY_ORACLE = \"StablePolyUsdOracle\";\r\n\r\n    // @notice Allow only two variables to be stored\r\n    // 1. lowerBound\r\n    // 2. upperBound\r\n    // @dev (0.0.0 will act as the wildcard)\r\n    // @dev uint24 consists packed value of uint8 _major, uint8 _minor, uint8 _patch\r\n    mapping(string => uint24) compatibleSTVersionRange;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     */\r\n    constructor(uint256 _setupCost, uint256 _usageCost, address _polymathRegistry, bool _isCostInPoly) public {\r\n        setupCost = _setupCost;\r\n        usageCost = _usageCost;\r\n        proposedUsageCost = usageCost;\r\n        usageCostProposedAt = now;\r\n        changeInCostTypeAt = now;\r\n        polymathRegistry = IPolymathRegistry(_polymathRegistry);\r\n        isCostInPoly = _isCostInPoly;\r\n        willCostInPoly = isCostInPoly;\r\n    }\r\n\r\n    /**\r\n     * @notice Type of the Module factory\r\n     */\r\n    function getTypes() external view returns(uint8[] memory) {\r\n        return typesData;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the tags related to the module factory\r\n     */\r\n    function getTags() external view returns(bytes32[] memory) {\r\n        return tagsData;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the version related to the module factory\r\n     */\r\n    function version() external view returns(string memory) {\r\n        return initialVersion;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the fee of the setup cost\r\n     * @param _setupCost new setup cost\r\n     */\r\n    function changeSetupCost(uint256 _setupCost) external onlyOwner {\r\n        emit ChangeSetupCost(setupCost, _setupCost);\r\n        setupCost = _setupCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the usage cost\r\n     */\r\n    function changeUsageCost() external onlyOwner {\r\n        require(now > usageCostProposedAt.add(COLDPERIOD), \"Proposal is in unmatured state\");\r\n        emit ChangeUsageCost(usageCost, proposedUsageCost);\r\n        usageCost = proposedUsageCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to propose the usage cost\r\n     * @param _usageCostProposed Proposed usage cost amount\r\n     */\r\n    function proposeUsageCost(uint256 _usageCostProposed) external onlyOwner {\r\n        _proposeUsageCost(_usageCostProposed);\r\n    }\r\n\r\n    function _proposeUsageCost(uint256 _usageCostProposed) internal {\r\n        require(usageCost != proposedUsageCost);\r\n        usageCostProposedAt = now;\r\n        emit UsageCostProposed(proposedUsageCost, usageCost);\r\n        proposedUsageCost = _usageCostProposed;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the currency and amount of setup cost\r\n     * @param _setupCost new setup cost\r\n     * @param _usageCost new usage cost\r\n     * @param _isCostInPoly new setup cost currency. USD or POLY\r\n     */\r\n    function changeCostAndType(uint256 _setupCost, uint256 _usageCost, bool _isCostInPoly) external onlyOwner {\r\n        emit ChangeSetupCost(setupCost, _setupCost);\r\n        setupCost = _setupCost;\r\n        if (usageCost != _usageCost) {\r\n            _proposeUsageCost(_usageCost);\r\n        }\r\n        _proposedChangeInCostType(_isCostInPoly);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to change the cost type\r\n     */\r\n    function changeCostType() external onlyOwner {\r\n        require(now > changeInCostTypeAt.add(COLDPERIOD), \"Proposal is in unmatured state\");\r\n        emit ChangeCostType(isCostInPoly, willCostInPoly);\r\n        isCostInPoly = willCostInPoly;\r\n    }\r\n\r\n    function _proposedChangeInCostType(bool _isCostInPoly) internal {\r\n        if (isCostInPoly != _isCostInPoly) {\r\n            changeInCostTypeAt = now;\r\n            willCostInPoly = _isCostInPoly;\r\n            emit ChangeCostTypeProposed(willCostInPoly, isCostInPoly);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the title of the ModuleFactory\r\n     * @param _title New Title that will replace the old one.\r\n     */\r\n    function changeTitle(string memory _title) public onlyOwner {\r\n        require(bytes(_title).length > 0, \"Invalid text\");\r\n        title = _title;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the description of the ModuleFactory\r\n     * @param _description New description that will replace the old one.\r\n     */\r\n    function changeDescription(string memory _description) public onlyOwner {\r\n        require(bytes(_description).length > 0, \"Invalid text\");\r\n        description = _description;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the name of the ModuleFactory\r\n     * @param _name New name that will replace the old one.\r\n     */\r\n    function changeName(bytes32 _name) public onlyOwner {\r\n        require(_name != bytes32(0), \"Invalid text\");\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * @notice Updates the tags of the ModuleFactory\r\n     * @param _tagsData New list of tags\r\n     */\r\n    function changeTags(bytes32[] memory _tagsData) public onlyOwner {\r\n        require(_tagsData.length > 0, \"Invalid text\");\r\n        tagsData = _tagsData;\r\n    }\r\n\r\n    /**\r\n     * @notice Function use to change the lower and upper bound of the compatible version st\r\n     * @param _boundType Type of bound\r\n     * @param _newVersion new version array\r\n     */\r\n    function changeSTVersionBounds(string calldata _boundType, uint8[] calldata _newVersion) external onlyOwner {\r\n        require(\r\n            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"lowerBound\")) || keccak256(\r\n                abi.encodePacked(_boundType)\r\n            ) == keccak256(abi.encodePacked(\"upperBound\")),\r\n            \"Invalid bound type\"\r\n        );\r\n        require(_newVersion.length == 3, \"Invalid version\");\r\n        if (compatibleSTVersionRange[_boundType] != uint24(0)) {\r\n            uint8[] memory _currentVersion = VersionUtils.unpack(compatibleSTVersionRange[_boundType]);\r\n            if (keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked(\"lowerBound\"))) {\r\n                require(VersionUtils.lessThanOrEqual(_newVersion, _currentVersion), \"Invalid version\");\r\n            } else {\r\n                require(VersionUtils.greaterThanOrEqual(_newVersion, _currentVersion), \"Invalid version\");\r\n            }\r\n        }\r\n        compatibleSTVersionRange[_boundType] = VersionUtils.pack(_newVersion[0], _newVersion[1], _newVersion[2]);\r\n        emit ChangeSTVersionBound(_boundType, _newVersion[0], _newVersion[1], _newVersion[2]);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to get the lower bound\r\n     * @return lower bound\r\n     */\r\n    function getLowerSTVersionBounds() external view returns(uint8[] memory) {\r\n        return VersionUtils.unpack(compatibleSTVersionRange[\"lowerBound\"]);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to get the upper bound\r\n     * @return upper bound\r\n     */\r\n    function getUpperSTVersionBounds() external view returns(uint8[] memory) {\r\n        return VersionUtils.unpack(compatibleSTVersionRange[\"upperBound\"]);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the setup cost of the module\r\n     */\r\n    function setupCostInPoly() public returns (uint256) {\r\n        if (isCostInPoly)\r\n            return setupCost;\r\n        uint256 polyRate = IOracle(polymathRegistry.getAddress(POLY_ORACLE)).getPrice();\r\n        return DecimalMath.div(setupCost, polyRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the usage cost of the module\r\n     */\r\n    function usageCostInPoly() public returns (uint256) {\r\n        if (isCostInPoly)\r\n            return usageCost;\r\n        uint256 polyRate = IOracle(polymathRegistry.getAddress(POLY_ORACLE)).getPrice();\r\n        return DecimalMath.div(usageCost, polyRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates fee in POLY\r\n     */\r\n    function _takeFee() internal returns(uint256) {\r\n        uint256 polySetupCost = setupCostInPoly();\r\n        address polyToken = polymathRegistry.getAddress(\"PolyToken\");\r\n        if (polySetupCost > 0) {\r\n            require(IERC20(polyToken).transferFrom(msg.sender, owner(), polySetupCost), \"Insufficient allowance for module fee\");\r\n        }\r\n        return polySetupCost;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to initialize the module\r\n     * @param _module Address of module\r\n     * @param _data Data used for the intialization of the module factory variables\r\n     */\r\n    function _initializeModule(address _module, bytes memory _data) internal {\r\n        uint256 polySetupCost = _takeFee();\r\n        bytes4 initFunction = IModule(_module).getInitFunction();\r\n        if (initFunction != bytes4(0)) {\r\n            require(Util.getSig(_data) == initFunction, \"Provided data is not valid\");\r\n            /*solium-disable-next-line security/no-low-level-calls*/\r\n            (bool success, ) = _module.call(_data);\r\n            require(success, \"Unsuccessful initialization\");\r\n        }\r\n        /*solium-disable-next-line security/no-block-members*/\r\n        emit GenerateModuleFromFactory(_module, name, address(this), msg.sender, setupCost, polySetupCost);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IModuleRegistry.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Interface for the Polymath Module Registry contract\r\n */\r\ninterface IModuleRegistry {\r\n\r\n    ///////////\r\n    // Events\r\n    //////////\r\n\r\n    // Emit when network becomes paused\r\n    event Pause(address account);\r\n    // Emit when network becomes unpaused\r\n    event Unpause(address account);\r\n    // Emit when Module is used by the SecurityToken\r\n    event ModuleUsed(address indexed _moduleFactory, address indexed _securityToken);\r\n    // Emit when the Module Factory gets registered on the ModuleRegistry contract\r\n    event ModuleRegistered(address indexed _moduleFactory, address indexed _owner);\r\n    // Emit when the module gets verified by Polymath\r\n    event ModuleVerified(address indexed _moduleFactory);\r\n    // Emit when the module gets unverified by Polymath or the factory owner\r\n    event ModuleUnverified(address indexed _moduleFactory);\r\n    // Emit when a ModuleFactory is removed by Polymath\r\n    event ModuleRemoved(address indexed _moduleFactory, address indexed _decisionMaker);\r\n    // Emit when ownership gets transferred\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @notice Called by a security token (2.x) to notify the registry it is using a module\r\n     * @param _moduleFactory is the address of the relevant module factory\r\n     */\r\n    function useModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Called by a security token to notify the registry it is using a module\r\n     * @param _moduleFactory is the address of the relevant module factory\r\n     * @param _isUpgrade whether the use is part of an existing module upgrade\r\n     */\r\n    function useModule(address _moduleFactory, bool _isUpgrade) external;\r\n\r\n    /**\r\n     * @notice Called by the ModuleFactory owner to register new modules for SecurityToken to use\r\n     * @param _moduleFactory is the address of the module factory to be registered\r\n     */\r\n    function registerModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Called by the ModuleFactory owner or registry curator to delete a ModuleFactory\r\n     * @param _moduleFactory is the address of the module factory to be deleted\r\n     */\r\n    function removeModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Check that a module and its factory are compatible\r\n     * @param _moduleFactory is the address of the relevant module factory\r\n     * @param _securityToken is the address of the relevant security token\r\n     * @return bool whether module and token are compatible\r\n     */\r\n    function isCompatibleModule(address _moduleFactory, address _securityToken) external view returns(bool isCompatible);\r\n\r\n    /**\r\n    * @notice Called by Polymath to verify modules for SecurityToken to use.\r\n    * @notice A module can not be used by an ST unless first approved/verified by Polymath\r\n    * @notice (The only exception to this is that the author of the module is the owner of the ST - Only if enabled by the FeatureRegistry)\r\n    * @param _moduleFactory is the address of the module factory to be registered\r\n    */\r\n    function verifyModule(address _moduleFactory) external;\r\n\r\n    /**\r\n    * @notice Called by Polymath to unverify modules for SecurityToken to use.\r\n    * @notice A module can not be used by an ST unless first approved/verified by Polymath\r\n    * @notice (The only exception to this is that the author of the module is the owner of the ST - Only if enabled by the FeatureRegistry)\r\n    * @param _moduleFactory is the address of the module factory to be registered\r\n    */\r\n    function unverifyModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Returns the verified status, and reputation of the entered Module Factory\r\n     * @param _factoryAddress is the address of the module factory\r\n     * @return bool indicating whether module factory is verified\r\n     * @return address of the factory owner\r\n     * @return address array which contains the list of securityTokens that use that module factory\r\n     */\r\n    function getFactoryDetails(address _factoryAddress) external view returns(bool isVerified, address factoryOwner, address[] memory usingTokens);\r\n\r\n    /**\r\n     * @notice Returns all the tags related to the a module type which are valid for the given token\r\n     * @param _moduleType is the module type\r\n     * @param _securityToken is the token\r\n     * @return list of tags\r\n     * @return corresponding list of module factories\r\n     */\r\n    function getTagsByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns(bytes32[] memory tags, address[] memory factories);\r\n\r\n    /**\r\n     * @notice Returns all the tags related to the a module type which are valid for the given token\r\n     * @param _moduleType is the module type\r\n     * @return list of tags\r\n     * @return corresponding list of module factories\r\n     */\r\n    function getTagsByType(uint8 _moduleType) external view returns(bytes32[] memory tags, address[] memory factories);\r\n\r\n    /**\r\n     * @notice Returns the list of addresses of all Module Factory of a particular type\r\n     * @param _moduleType Type of Module\r\n     * @return address array that contains the list of addresses of module factory contracts.\r\n     */\r\n    function getAllModulesByType(uint8 _moduleType) external view returns(address[] memory factories);\r\n    /**\r\n     * @notice Returns the list of addresses of Module Factory of a particular type\r\n     * @param _moduleType Type of Module\r\n     * @return address array that contains the list of addresses of module factory contracts.\r\n     */\r\n    function getModulesByType(uint8 _moduleType) external view returns(address[] memory factories);\r\n\r\n    /**\r\n     * @notice Returns the list of available Module factory addresses of a particular type for a given token.\r\n     * @param _moduleType is the module type to look for\r\n     * @param _securityToken is the address of SecurityToken\r\n     * @return address array that contains the list of available addresses of module factory contracts.\r\n     */\r\n    function getModulesByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns(address[] memory factories);\r\n\r\n    /**\r\n     * @notice Use to get the latest contract address of the regstries\r\n     */\r\n    function updateFromRegistry() external;\r\n\r\n    /**\r\n     * @notice Get the owner of the contract\r\n     * @return address owner\r\n     */\r\n    function owner() external view returns(address ownerAddress);\r\n\r\n    /**\r\n     * @notice Check whether the contract operations is paused or not\r\n     * @return bool\r\n     */\r\n    function isPaused() external view returns(bool paused);\r\n\r\n    /**\r\n     * @notice Reclaims all ERC20Basic compatible tokens\r\n     * @param _tokenContract The address of the token contract\r\n     */\r\n    function reclaimERC20(address _tokenContract) external;\r\n\r\n    /**\r\n     * @notice Called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() external;\r\n\r\n    /**\r\n     * @notice Called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n}\r\n\r\n// File: contracts/modules/UpgradableModuleFactory.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Factory for deploying upgradable modules\r\n */\r\ncontract UpgradableModuleFactory is ModuleFactory {\r\n\r\n    event LogicContractSet(string _version, uint256 _upgrade, address _logicContract, bytes _upgradeData);\r\n\r\n    event ModuleUpgraded(\r\n        address indexed _module,\r\n        address indexed _securityToken,\r\n        uint256 indexed _version\r\n    );\r\n\r\n    struct LogicContract {\r\n        string version;\r\n        address logicContract;\r\n        bytes upgradeData;\r\n    }\r\n\r\n    // Mapping from version to logic contract\r\n    mapping (uint256 => LogicContract) public logicContracts;\r\n\r\n    // Mapping from Security Token address, to deployed proxy module address, to module version\r\n    mapping (address => mapping (address => uint256)) public modules;\r\n\r\n    // Mapping of which security token owns a given module\r\n    mapping (address => address) public moduleToSecurityToken;\r\n\r\n    // Current version\r\n    uint256 public latestUpgrade;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _setupCost Setup cost of the module\r\n     * @param _usageCost Usage cost of the key action\r\n     * @param _logicContract Contract address that contains the logic related to `description`\r\n     * @param _polymathRegistry Address of the Polymath registry\r\n     * @param _isCostInPoly true = cost in Poly, false = USD\r\n     */\r\n    constructor(\r\n        string memory _version,\r\n        uint256 _setupCost,\r\n        uint256 _usageCost,\r\n        address _logicContract,\r\n        address _polymathRegistry,\r\n        bool _isCostInPoly\r\n    )\r\n        public ModuleFactory(_setupCost, _usageCost, _polymathRegistry, _isCostInPoly)\r\n    {\r\n        require(_logicContract != address(0), \"Invalid address\");\r\n        logicContracts[latestUpgrade].logicContract = _logicContract;\r\n        logicContracts[latestUpgrade].version = _version;\r\n    }\r\n\r\n    /**\r\n     * @notice Used to upgrade the module factory\r\n     * @param _version Version of upgraded module\r\n     * @param _logicContract Address of deployed module logic contract referenced from proxy\r\n     * @param _upgradeData Data to be passed in call to upgradeToAndCall when a token upgrades its module\r\n     */\r\n    function setLogicContract(string calldata _version, address _logicContract, bytes calldata _upgradeData) external onlyOwner {\r\n        require(keccak256(abi.encodePacked(_version)) != keccak256(abi.encodePacked(logicContracts[latestUpgrade].version)), \"Same version\");\r\n        require(_logicContract != logicContracts[latestUpgrade].logicContract, \"Same version\");\r\n        require(_logicContract != address(0), \"Invalid address\");\r\n        latestUpgrade++;\r\n        _modifyLogicContract(latestUpgrade, _version, _logicContract, _upgradeData);\r\n    }\r\n\r\n    /**\r\n     * @notice Used to update an existing token logic contract\r\n     * @param _upgrade logic contract to upgrade\r\n     * @param _version Version of upgraded module\r\n     * @param _logicContract Address of deployed module logic contract referenced from proxy\r\n     * @param _upgradeData Data to be passed in call to upgradeToAndCall when a token upgrades its module\r\n     */\r\n    function updateLogicContract(uint256 _upgrade, string calldata _version, address _logicContract, bytes calldata _upgradeData) external onlyOwner {\r\n        require(_upgrade <= latestUpgrade, \"Invalid upgrade\");\r\n        // version & contract must differ from previous version, otherwise upgrade proxy will fail\r\n        if (_upgrade > 0) {\r\n          require(keccak256(abi.encodePacked(_version)) != keccak256(abi.encodePacked(logicContracts[_upgrade - 1].version)), \"Same version\");\r\n          require(_logicContract != logicContracts[_upgrade - 1].logicContract, \"Same version\");\r\n        }\r\n        require(_logicContract != address(0), \"Invalid address\");\r\n        require(_upgradeData.length > 4, \"Invalid Upgrade\");\r\n        _modifyLogicContract(_upgrade, _version, _logicContract, _upgradeData);\r\n    }\r\n\r\n    function _modifyLogicContract(uint256 _upgrade, string memory _version, address _logicContract, bytes memory _upgradeData) internal {\r\n        logicContracts[_upgrade].version = _version;\r\n        logicContracts[_upgrade].logicContract = _logicContract;\r\n        logicContracts[_upgrade].upgradeData = _upgradeData;\r\n        IModuleRegistry moduleRegistry = IModuleRegistry(polymathRegistry.getAddress(\"ModuleRegistry\"));\r\n        moduleRegistry.unverifyModule(address(this));\r\n        emit LogicContractSet(_version, _upgrade, _logicContract, _upgradeData);\r\n    }\r\n\r\n    /**\r\n     * @notice Used by a security token to upgrade a given module\r\n     * @param _module Address of (proxy) module to be upgraded\r\n     */\r\n    function upgrade(address _module) external {\r\n        // Only allow the owner of a module to upgrade it\r\n        require(moduleToSecurityToken[_module] == msg.sender, \"Incorrect caller\");\r\n        // Only allow issuers to upgrade in single step verisons to preserve upgradeToAndCall semantics\r\n        uint256 newVersion = modules[msg.sender][_module] + 1;\r\n        require(newVersion <= latestUpgrade, \"Incorrect version\");\r\n        OwnedUpgradeabilityProxy(address(uint160(_module))).upgradeToAndCall(logicContracts[newVersion].version, logicContracts[newVersion].logicContract, logicContracts[newVersion].upgradeData);\r\n        modules[msg.sender][_module] = newVersion;\r\n        emit ModuleUpgraded(\r\n            _module,\r\n            msg.sender,\r\n            newVersion\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Used to initialize the module\r\n     * @param _module Address of module\r\n     * @param _data Data used for the intialization of the module factory variables\r\n     */\r\n    function _initializeModule(address _module, bytes memory _data) internal {\r\n        super._initializeModule(_module, _data);\r\n        moduleToSecurityToken[_module] = msg.sender;\r\n        modules[msg.sender][_module] = latestUpgrade;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the version related to the module factory\r\n     */\r\n    function version() external view returns(string memory) {\r\n        return logicContracts[latestUpgrade].version;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/modules/TransferManager/RPTM/RestrictedPartialSaleTMFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Factory for deploying RestrictedPartialSale module\r\n */\r\ncontract RestrictedPartialSaleTMFactory is UpgradableModuleFactory {\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _setupCost Setup cost of the module\r\n     * @param _usageCost Usage cost of the module\r\n     * @param _logicContract Contract address that contains the logic related to `description`\r\n     * @param _polymathRegistry Address of the Polymath registry\r\n     * @param _isCostInPoly true = cost in Poly, false = USD\r\n     */\r\n    constructor (\r\n        uint256 _setupCost,\r\n        uint256 _usageCost,\r\n        address _logicContract,\r\n        address _polymathRegistry,\r\n        bool _isCostInPoly\r\n    )\r\n        public\r\n        UpgradableModuleFactory(\"3.1.0\", _setupCost, _usageCost, _logicContract, _polymathRegistry, _isCostInPoly)\r\n    {   \r\n        initialVersion = \"3.1.0\";\r\n        name = \"RestrictedPartialSaleTM\";\r\n        title = \"Restricted Partial Sale Transfer Manager\";\r\n        description = \"TM will not allow investors to transact partial balance of the investors\";\r\n        typesData.push(2);\r\n        tagsData.push(\"PartialSale\");\r\n        tagsData.push(\"Transfer Restriction\");\r\n        tagsData.push(\"Restricted transfer\");\r\n        compatibleSTVersionRange[\"lowerBound\"] = VersionUtils.pack(uint8(3), uint8(0), uint8(0));\r\n        compatibleSTVersionRange[\"upperBound\"] = VersionUtils.pack(uint8(3), uint8(1), uint8(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Used to launch the Module with the help of factory\r\n     * @return address Contract address of the Module\r\n     */\r\n    function deploy(\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns(address)\r\n    {\r\n        address restrictedPartialSaleTM = address(\r\n            new RestrictedPartialSaleTMProxy(\r\n                logicContracts[latestUpgrade].version,\r\n                msg.sender,\r\n                polymathRegistry.getAddress(\"PolyToken\"),\r\n                logicContracts[latestUpgrade].logicContract\r\n                )\r\n            );\r\n        _initializeModule(restrictedPartialSaleTM, _data);\r\n        return restrictedPartialSaleTM;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usageCostProposed\",\"type\":\"uint256\"}],\"name\":\"proposeUsageCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"willCostInPoly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setupCost\",\"type\":\"uint256\"}],\"name\":\"changeSetupCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tagsData\",\"type\":\"bytes32[]\"}],\"name\":\"changeTags\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setupCostInPoly\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"changeTitle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_logicContract\",\"type\":\"address\"},{\"name\":\"_upgradeData\",\"type\":\"bytes\"}],\"name\":\"setLogicContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeUsageCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCostInPoly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"logicContracts\",\"outputs\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"logicContract\",\"type\":\"address\"},{\"name\":\"upgradeData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCostProposedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polymathRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setupCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLowerSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"modules\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moduleToSecurityToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeCostType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_isCostInPoly\",\"type\":\"bool\"}],\"name\":\"changeCostAndType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgrade\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_logicContract\",\"type\":\"address\"},{\"name\":\"_upgradeData\",\"type\":\"bytes\"}],\"name\":\"updateLogicContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"usageCostInPoly\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"changeDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedUsageCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpperSTVersionBounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"changeInCostTypeAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boundType\",\"type\":\"string\"},{\"name\":\"_newVersion\",\"type\":\"uint8[]\"}],\"name\":\"changeSTVersionBounds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"name\":\"_usageCost\",\"type\":\"uint256\"},{\"name\":\"_logicContract\",\"type\":\"address\"},{\"name\":\"_polymathRegistry\",\"type\":\"address\"},{\"name\":\"_isCostInPoly\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_version\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_upgrade\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_logicContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_upgradeData\",\"type\":\"bytes\"}],\"name\":\"LogicContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_securityToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"ModuleUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldSetupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSetupCost\",\"type\":\"uint256\"}],\"name\":\"ChangeSetupCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUsageCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUsageCost\",\"type\":\"uint256\"}],\"name\":\"ChangeUsageCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_proposedFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentFee\",\"type\":\"uint256\"}],\"name\":\"UsageCostProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_isOldCostInPoly\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_isNewCostInPoly\",\"type\":\"bool\"}],\"name\":\"ChangeCostType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_proposedCostType\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_currentCostType\",\"type\":\"bool\"}],\"name\":\"ChangeCostTypeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_moduleName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_moduleFactory\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_setupCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_setupCostInPoly\",\"type\":\"uint256\"}],\"name\":\"GenerateModuleFromFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_boundType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_major\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_minor\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_patch\",\"type\":\"uint8\"}],\"name\":\"ChangeSTVersionBound\",\"type\":\"event\"}]","ContractName":"RestrictedPartialSaleTMFactory","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005cd5a84c4b6024fb722f6b942ff25ce969a07a92000000000000000000000000dfabf3e4793cd30affb47ab6fa4cf4eef26bbc270000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"None","SwarmSource":"bzzr://611daa924f96526ad6a681c62060c098f26487350d9801b39013ead448b85351"}]}