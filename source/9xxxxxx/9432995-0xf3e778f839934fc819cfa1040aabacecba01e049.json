{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/AvastarTypes.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n/**\r\n * @title Avastar Data Types\r\n * @author Cliff Hall\r\n */\r\ncontract AvastarTypes {\r\n\r\n    enum Generation {\r\n        ONE,\r\n        TWO,\r\n        THREE,\r\n        FOUR,\r\n        FIVE\r\n    }\r\n\r\n    enum Series {\r\n        PROMO,\r\n        ONE,\r\n        TWO,\r\n        THREE,\r\n        FOUR,\r\n        FIVE\r\n    }\r\n\r\n    enum Wave {\r\n        PRIME,\r\n        REPLICANT\r\n    }\r\n\r\n    enum Gene {\r\n        SKIN_TONE,\r\n        HAIR_COLOR,\r\n        EYE_COLOR,\r\n        BG_COLOR,\r\n        BACKDROP,\r\n        EARS,\r\n        FACE,\r\n        NOSE,\r\n        MOUTH,\r\n        FACIAL_FEATURE,\r\n        EYES,\r\n        HAIR_STYLE\r\n    }\r\n\r\n    enum Gender {\r\n        ANY,\r\n        MALE,\r\n        FEMALE\r\n    }\r\n\r\n    enum Rarity {\r\n        COMMON,\r\n        UNCOMMON,\r\n        RARE,\r\n        EPIC,\r\n        LEGENDARY\r\n    }\r\n\r\n    struct Trait {\r\n        uint256 id;\r\n        Generation generation;\r\n        Gender gender;\r\n        Gene gene;\r\n        Rarity rarity;\r\n        uint8 variation;\r\n        Series[] series;\r\n        string name;\r\n        string svg;\r\n\r\n    }\r\n\r\n    struct Prime {\r\n        uint256 id;\r\n        uint256 serial;\r\n        uint256 traits;\r\n        bool[12] replicated;\r\n        Generation generation;\r\n        Series series;\r\n        Gender gender;\r\n        uint8 ranking;\r\n    }\r\n\r\n    struct Replicant {\r\n        uint256 id;\r\n        uint256 serial;\r\n        uint256 traits;\r\n        Generation generation;\r\n        Gender gender;\r\n        uint8 ranking;\r\n    }\r\n\r\n    struct Avastar {\r\n        uint256 id;\r\n        uint256 serial;\r\n        uint256 traits;\r\n        Generation generation;\r\n        Wave wave;\r\n    }\r\n\r\n    struct Attribution {\r\n        Generation generation;\r\n        string artist;\r\n        string infoURI;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/AvastarBase.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n/**\r\n * @title Avastar Base\r\n * @author Cliff Hall\r\n * @notice Utilities used by descendant contracts\r\n */\r\ncontract AvastarBase {\r\n\r\n    /**\r\n     * @notice Convert a `uint` value to a `string`\r\n     * via OraclizeAPI - MIT licence\r\n     * https://github.com/provable-things/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol#L896\r\n     * @param _i the `uint` value to be converted\r\n     * @return result the `string` representation of the given `uint` value\r\n     */\r\n    function uintToStr(uint _i)\r\n    internal pure\r\n    returns (string memory result) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        result = string(bstr);\r\n    }\r\n\r\n    /**\r\n     * @notice Concatenate two strings\r\n     * @param _a the first string\r\n     * @param _b the second string\r\n     * @return result the concatenation of `_a` and `_b`\r\n     */\r\n    function strConcat(string memory _a, string memory _b)\r\n    internal pure\r\n    returns(string memory result) {\r\n        result = string(abi.encodePacked(bytes(_a), bytes(_b)));\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/AccessControl.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n\r\n/**\r\n * @title Access Control\r\n * @author Cliff Hall\r\n * @notice Role-based access control and contract upgrade functionality.\r\n */\r\ncontract AccessControl {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint16;\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private admins;\r\n    Roles.Role private minters;\r\n    Roles.Role private owners;\r\n\r\n    /**\r\n     * @notice Sets `msg.sender` as system admin by default.\r\n     * Starts paused. System admin must unpause, and add other roles after deployment.\r\n     */\r\n    constructor() public {\r\n        admins.add(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Emitted when contract is paused by system administrator.\r\n     */\r\n    event ContractPaused();\r\n\r\n    /**\r\n     * @notice Emitted when contract is unpaused by system administrator.\r\n     */\r\n    event ContractUnpaused();\r\n\r\n    /**\r\n     * @notice Emitted when contract is upgraded by system administrator.\r\n     * @param newContract address of the new version of the contract.\r\n     */\r\n    event ContractUpgrade(address newContract);\r\n\r\n\r\n    bool public paused = true;\r\n    bool public upgraded = false;\r\n    address public newContractAddress;\r\n\r\n    /**\r\n     * @notice Modifier to scope access to minters\r\n     */\r\n    modifier onlyMinter() {\r\n        require(minters.has(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to scope access to owners\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owners.has(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to scope access to system administrators\r\n     */\r\n    modifier onlySysAdmin() {\r\n        require(admins.has(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable only when the contract not upgraded.\r\n     */\r\n    modifier whenNotUpgraded() {\r\n        require(!upgraded);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to  mark the smart contract as upgraded,\r\n     * in case there is a serious breaking bug. This method stores the new contract\r\n     * address and emits an event to that effect. Clients of the contract should\r\n     * update to the new contract address upon receiving this event. This contract will\r\n     * remain paused indefinitely after such an upgrade.\r\n     * @param _newAddress address of new contract\r\n     */\r\n    function upgradeContract(address _newAddress) external onlySysAdmin whenPaused whenNotUpgraded {\r\n        require(_newAddress != address(0));\r\n        upgraded = true;\r\n        newContractAddress = _newAddress;\r\n        emit ContractUpgrade(_newAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to add a minter.\r\n     * Reverts if `_minterAddress` already has minter role\r\n     * @param _minterAddress approved minter\r\n     */\r\n    function addMinter(address _minterAddress) external onlySysAdmin {\r\n        minters.add(_minterAddress);\r\n        require(minters.has(_minterAddress));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to add an owner.\r\n     * Reverts if `_ownerAddress` already has owner role\r\n     * @param _ownerAddress approved owner\r\n     * @return added boolean indicating whether the role was granted\r\n     */\r\n    function addOwner(address _ownerAddress) external onlySysAdmin {\r\n        owners.add(_ownerAddress);\r\n        require(owners.has(_ownerAddress));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to add another system admin.\r\n     * Reverts if `_sysAdminAddress` already has sysAdmin role\r\n     * @param _sysAdminAddress approved owner\r\n     */\r\n    function addSysAdmin(address _sysAdminAddress) external onlySysAdmin {\r\n        admins.add(_sysAdminAddress);\r\n        require(admins.has(_sysAdminAddress));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by an owner to remove all roles from an address.\r\n     * Reverts if address had no roles to be removed.\r\n     * @param _address address having its roles stripped\r\n     */\r\n    function stripRoles(address _address) external onlyOwner {\r\n        require(msg.sender != _address);\r\n        bool stripped = false;\r\n        if (admins.has(_address)) {\r\n            admins.remove(_address);\r\n            stripped = true;\r\n        }\r\n        if (minters.has(_address)) {\r\n            minters.remove(_address);\r\n            stripped = true;\r\n        }\r\n        if (owners.has(_address)) {\r\n            owners.remove(_address);\r\n            stripped = true;\r\n        }\r\n        require(stripped == true);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to pause, triggers stopped state\r\n     */\r\n    function pause() external onlySysAdmin whenNotPaused {\r\n        paused = true;\r\n        emit ContractPaused();\r\n    }\r\n\r\n    /**\r\n     * @notice Called by a system administrator to un-pause, returns to normal state\r\n     */\r\n    function unpause() external onlySysAdmin whenPaused whenNotUpgraded {\r\n        paused = false;\r\n        emit ContractUnpaused();\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/drafts/Counters.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _ownedTokensCount[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][to] = approved;\r\n        emit ApprovalForAll(_msgSender(), to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to].increment();\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * Deprecated, use {_burn} instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner].decrement();\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from].decrement();\r\n        _ownedTokensCount[to].increment();\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * This function is deprecated.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n\r\n        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID.\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Constructor function.\r\n     */\r\n    constructor () public {\r\n        // register the supported interface to conform to ERC721Enumerable via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n     * @param owner address owning the tokens list to be accessed\r\n     * @param index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract.\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens.\r\n     * @param index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to address the beneficiary that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n        _addTokenToAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * Deprecated, use {ERC721-_burn} instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n        _ownedTokensIndex[tokenId] = 0;\r\n\r\n        _removeTokenFromAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the list of token IDs of the requested owner.\r\n     * @param owner address owning the tokens\r\n     * @return uint256[] List of token IDs owned by the requested address\r\n     */\r\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n        return _ownedTokens[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _ownedTokens[from].length--;\r\n\r\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n        // lastTokenId, or just over the end of the array if the token was the last one).\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _allTokens.length--;\r\n        _allTokensIndex[tokenId] = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name.\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol.\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID.\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the token URI for a given token.\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to set its URI\r\n     * @param uri string URI to assign\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = uri;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * Deprecated, use _burn(uint256) instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721Full.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * @dev This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology.\r\n *\r\n * See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\r\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\r\n        // solhint-disable-previous-line no-empty-blocks\r\n    }\r\n}\r\n\r\n// File: contracts/AvastarState.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Avastar State\r\n * @author Cliff Hall\r\n * @notice This contract maintains the state variables for the Avastar Teleporter.\r\n */\r\ncontract AvastarState is AvastarBase, AvastarTypes, AccessControl, ERC721Full {\r\n\r\n    /**\r\n     * @notice Calls ERC721Full constructor with token name and symbol.\r\n     */\r\n    constructor() public ERC721Full(TOKEN_NAME, TOKEN_SYMBOL) {}\r\n\r\n    string public constant TOKEN_NAME = \"Avastar\";\r\n    string public constant TOKEN_SYMBOL = \"AVASTAR\";\r\n\r\n    /**\r\n     * @notice All Avastars across all Waves and Generations\r\n     */\r\n    Avastar[] internal avastars;\r\n\r\n    /**\r\n     * @notice List of all Traits across all Generations\r\n     */\r\n    Trait[] internal traits;\r\n\r\n    /**\r\n     * @notice  Retrieve Primes by Generation\r\n     * Prime[] primes = primesByGeneration[uint8(_generation)]\r\n     */\r\n    mapping(uint8 => Prime[]) internal primesByGeneration;\r\n\r\n    /**\r\n     * @notice Retrieve Replicants by Generation\r\n     * Replicant[] replicants = replicantsByGeneration[uint8(_generation)]\r\n     */\r\n    mapping(uint8 => Replicant[]) internal replicantsByGeneration;\r\n\r\n    /**\r\n     * @notice Retrieve Artist Attribution by Generation\r\n     * Attribution attribution = attributionByGeneration[Generation(_generation)]\r\n     */\r\n    mapping(uint8 => Attribution) public attributionByGeneration;\r\n\r\n    /**\r\n     * @notice Retrieve the approved Trait handler for a given Avastar Prime by Token ID\r\n     */\r\n    mapping(uint256 => address) internal traitHandlerByPrimeTokenId;\r\n\r\n    /**\r\n     * @notice Is a given Trait Hash used within a given Generation\r\n     * bool used = isHashUsedByGeneration[uint8(_generation)][uint256(_traits)]\r\n     * This mapping ensures that within a Generation, a given Trait Hash is unique and can only be used once\r\n     */\r\n    mapping(uint8 => mapping(uint256 => bool)) public isHashUsedByGeneration;\r\n\r\n    /**\r\n     * @notice Retrieve Token ID for a given Trait Hash within a given Generation\r\n     * uint256 tokenId = tokenIdByGenerationAndHash[uint8(_generation)][uint256(_traits)]\r\n     * Since Token IDs start at 0 and empty mappings for uint256 return 0, check isHashUsedByGeneration first\r\n     */\r\n    mapping(uint8 => mapping(uint256 => uint256)) public tokenIdByGenerationAndHash;\r\n\r\n    /**\r\n     * @notice Retrieve count of Primes and Promos by Generation and Series\r\n     * uint16 count = primeCountByGenAndSeries[uint8(_generation)][uint8(_series)]\r\n     */\r\n    mapping(uint8 =>  mapping(uint8 => uint16)) public primeCountByGenAndSeries;\r\n\r\n    /**\r\n     * @notice Retrieve count of Replicants by Generation\r\n     * uint16 count = replicantCountByGeneration[uint8(_generation)]\r\n     */\r\n    mapping(uint8 => uint16) public replicantCountByGeneration;\r\n\r\n    /**\r\n     * @notice Retrieve the Token ID for an Avastar by a given Generation, Wave, and Serial\r\n     * uint256 tokenId = tokenIdByGenerationWaveAndSerial[uint8(_generation)][uint256(_wave)][uint256(_serial)]\r\n     */\r\n    mapping(uint8 => mapping(uint8 => mapping(uint256 => uint256))) public tokenIdByGenerationWaveAndSerial;\r\n\r\n    /**\r\n     * @notice Retrieve the Trait ID for a Trait from a given Generation by Gene and Variation\r\n     * uint256 traitId = traitIdByGenerationGeneAndVariation[uint8(_generation)][uint8(_gene)][uint8(_variation)]\r\n     */\r\n    mapping(uint8 => mapping(uint8 => mapping(uint8 => uint256))) public traitIdByGenerationGeneAndVariation;\r\n\r\n}\r\n\r\n// File: contracts/TraitFactory.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @title Avastar Trait Factory\r\n * @author Cliff Hall\r\n */\r\ncontract TraitFactory is AvastarState {\r\n\r\n    /**\r\n     * @notice Event emitted when a new Trait is created.\r\n     * @param id the Trait ID\r\n     * @param generation the generation of the trait\r\n     * @param gene the gene that the trait is a variation of\r\n     * @param rarity the rarity level of this trait\r\n     * @param variation variation of the gene the trait represents\r\n     * @param name the name of the trait\r\n     */\r\n    event NewTrait(uint256 id, Generation generation, Gene gene, Rarity rarity, uint8 variation, string name);\r\n\r\n    /**\r\n     * @notice Event emitted when artist attribution is set for a generation.\r\n     * @param generation the generation that attribution was set for\r\n     * @param artist the artist who created the artwork for the generation\r\n     * @param infoURI the artist's website / portfolio URI\r\n     */\r\n    event AttributionSet(Generation generation, string artist, string infoURI);\r\n\r\n    /**\r\n     * @notice Event emitted when a Trait's art is created.\r\n     * @param id the Trait ID\r\n     */\r\n    event TraitArtExtended(uint256 id);\r\n\r\n    /**\r\n     * @notice Modifier to ensure no trait modification after a generation's\r\n     * Avastar production has begun.\r\n     * @param _generation the generation to check production status of\r\n     */\r\n    modifier onlyBeforeProd(Generation _generation) {\r\n        require(primesByGeneration[uint8(_generation)].length == 0 && replicantsByGeneration[uint8(_generation)].length == 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Get Trait ID by Generation, Gene, and Variation.\r\n     * @param _generation the generation the trait belongs to\r\n     * @param _gene gene the trait belongs to\r\n     * @param _variation the variation of the gene\r\n     * @return traitId the ID of the specified trait\r\n     */\r\n    function getTraitIdByGenerationGeneAndVariation(\r\n        Generation _generation,\r\n        Gene _gene,\r\n        uint8 _variation\r\n    )\r\n    external view\r\n    returns (uint256 traitId)\r\n    {\r\n        return traitIdByGenerationGeneAndVariation[uint8(_generation)][uint8(_gene)][_variation];\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve a Trait's info by ID.\r\n     * @param _traitId the ID of the Trait to retrieve\r\n     * @return id the ID of the trait\r\n     * @return generation generation of the trait\r\n     * @return series list of series the trait may appear in\r\n     * @return gender gender(s) the trait is valid for\r\n     * @return gene gene the trait belongs to\r\n     * @return variation variation of the gene the trait represents\r\n     * @return rarity the rarity level of this trait\r\n     * @return name name of the trait\r\n     */\r\n    function getTraitInfoById(uint256 _traitId)\r\n    external view\r\n    returns (\r\n        uint256 id,\r\n        Generation generation,\r\n        Series[] memory series,\r\n        Gender gender,\r\n        Gene gene,\r\n        Rarity rarity,\r\n        uint8 variation,\r\n        string memory name\r\n    ) {\r\n        require(_traitId < traits.length);\r\n        Trait memory trait = traits[_traitId];\r\n        return (\r\n            trait.id,\r\n            trait.generation,\r\n            trait.series,\r\n            trait.gender,\r\n            trait.gene,\r\n            trait.rarity,\r\n            trait.variation,\r\n            trait.name\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve a Trait's name by ID.\r\n     * @param _traitId the ID of the Trait to retrieve\r\n     * @return name name of the trait\r\n     */\r\n    function getTraitNameById(uint256 _traitId)\r\n    external view\r\n    returns (string memory name) {\r\n        require(_traitId < traits.length);\r\n        name = traits[_traitId].name;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve a Trait's art by ID.\r\n     * Only invokable by a system administrator.\r\n     * @param _traitId the ID of the Trait to retrieve\r\n     * @return art the svg layer representation of the trait\r\n     */\r\n    function getTraitArtById(uint256 _traitId)\r\n    external view onlySysAdmin\r\n    returns (string memory art) {\r\n        require(_traitId < traits.length);\r\n        Trait memory trait = traits[_traitId];\r\n        art = trait.svg;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the artist Attribution info for a given Generation, combined into a single string.\r\n     * @param _generation the generation to retrieve artist attribution for\r\n     * @return attrib a single string with the artist and artist info URI\r\n     */\r\n    function getAttributionByGeneration(Generation _generation)\r\n    external view\r\n    returns (\r\n        string memory attribution\r\n    ){\r\n        Attribution memory attrib = attributionByGeneration[uint8(_generation)];\r\n        require(bytes(attrib.artist).length > 0);\r\n        attribution = strConcat(attribution, attrib.artist);\r\n        attribution = strConcat(attribution, ' (');\r\n        attribution = strConcat(attribution, attrib.infoURI);\r\n        attribution = strConcat(attribution, ')');\r\n    }\r\n\r\n    /**\r\n     * @notice Set the artist Attribution for a given Generation\r\n     * @param _generation the generation to set artist attribution for\r\n     * @param _artist the artist who created the art for the generation\r\n     * @param _infoURI the URI for the artist's website / portfolio\r\n     */\r\n    function setAttribution(\r\n        Generation _generation,\r\n        string calldata _artist,\r\n        string calldata _infoURI\r\n    )\r\n    external onlySysAdmin onlyBeforeProd(_generation)\r\n    {\r\n        require(bytes(_artist).length > 0 && bytes(_infoURI).length > 0);\r\n        attributionByGeneration[uint8(_generation)] = Attribution(_generation, _artist, _infoURI);\r\n        emit AttributionSet(_generation, _artist, _infoURI);\r\n    }\r\n\r\n    /**\r\n     * @notice Create a Trait\r\n     * @param _generation the generation the trait belongs to\r\n     * @param _series list of series the trait may appear in\r\n     * @param _gender gender the trait is valid for\r\n     * @param _gene gene the trait belongs to\r\n     * @param _rarity the rarity level of this trait\r\n     * @param _variation the variation of the gene the trait belongs to\r\n     * @param _name the name of the trait\r\n     * @param _svg svg layer representation of the trait\r\n     * @return traitId the token ID of the newly created trait\r\n     */\r\n    function createTrait(\r\n        Generation _generation,\r\n        Series[] calldata _series,\r\n        Gender _gender,\r\n        Gene _gene,\r\n        Rarity _rarity,\r\n        uint8 _variation,\r\n        string calldata _name,\r\n        string calldata _svg\r\n    )\r\n    external onlySysAdmin whenNotPaused onlyBeforeProd(_generation)\r\n    returns (uint256 traitId)\r\n    {\r\n        require(_series.length > 0);\r\n        require(bytes(_name).length > 0);\r\n        require(bytes(_svg).length > 0);\r\n\r\n        // Get Trait ID\r\n        traitId = traits.length;\r\n\r\n        // Create and store trait\r\n        traits.push(\r\n            Trait(traitId, _generation, _gender, _gene, _rarity, _variation,  _series, _name, _svg)\r\n        );\r\n\r\n        // Create generation/gene/variation to traitId mapping required by assembleArtwork\r\n        traitIdByGenerationGeneAndVariation[uint8(_generation)][uint8(_gene)][uint8(_variation)] = traitId;\r\n\r\n        // Send the NewTrait event\r\n        emit NewTrait(traitId, _generation, _gene, _rarity, _variation, _name);\r\n\r\n        // Return the new Trait ID\r\n        return traitId;\r\n    }\r\n\r\n    /**\r\n     * @notice Extend a Trait's art.\r\n     * Only invokable by a system administrator.\r\n     * If successful, emits a `TraitArtExtended` event with the resultant artwork.\r\n     * @param _traitId the ID of the Trait to retrieve\r\n     * @param _svg the svg content to be concatenated to the existing svg property\r\n     */\r\n    function extendTraitArt(uint256 _traitId, string calldata _svg)\r\n    external onlySysAdmin whenNotPaused onlyBeforeProd(traits[_traitId].generation)\r\n    {\r\n        require(_traitId < traits.length);\r\n        string memory art = strConcat(traits[_traitId].svg, _svg);\r\n        traits[_traitId].svg = art;\r\n        emit TraitArtExtended(_traitId);\r\n    }\r\n\r\n    /**\r\n     * @notice Assemble the artwork for a given Trait hash with art from the given Generation\r\n     * @param _generation the generation the Avastar belongs to\r\n     * @param _traitHash the Avastar's trait hash\r\n     * @return svg the fully rendered SVG for the Avastar\r\n     */\r\n    function assembleArtwork(Generation _generation, uint256 _traitHash)\r\n    internal view\r\n    returns (string memory svg)\r\n    {\r\n        require(_traitHash > 0);\r\n        string memory accumulator = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" height=\"1000px\" width=\"1000px\" viewBox=\"0 0 1000 1000\">';\r\n        uint256 slotConst = 256;\r\n        uint256 slotMask = 255;\r\n        uint256 bitMask;\r\n        uint256 slottedValue;\r\n        uint256 slotMultiplier;\r\n        uint256 variation;\r\n        uint256 traitId;\r\n        Trait memory trait;\r\n\r\n        // Iterate trait hash by Gene and assemble SVG sandwich\r\n        for (uint8 slot = 0; slot <= uint8(Gene.HAIR_STYLE); slot++){\r\n            slotMultiplier = uint256(slotConst**slot);  // Create slot multiplier\r\n            bitMask = slotMask * slotMultiplier;        // Create bit mask for slot\r\n            slottedValue = _traitHash & bitMask;        // Extract slotted value from hash\r\n            if (slottedValue > 0) {\r\n                variation = (slot > 0)                  // Extract variation from slotted value\r\n                    ? slottedValue / slotMultiplier\r\n                    : slottedValue;\r\n                if (variation > 0) {\r\n                    traitId = traitIdByGenerationGeneAndVariation[uint8(_generation)][slot][uint8(variation)];\r\n                    trait = traits[traitId];\r\n                    accumulator = strConcat(accumulator, trait.svg);\r\n                }\r\n            }\r\n        }\r\n\r\n        return strConcat(accumulator, '</svg>');\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/AvastarFactory.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @title Avastar Token Factory\r\n * @author Cliff Hall\r\n */\r\ncontract AvastarFactory is TraitFactory {\r\n\r\n    /**\r\n     * @notice Mint an Avastar.\r\n     * Only invokable by descendant contracts when contract is not paused.\r\n     * Adds new `Avastar` to `avastars` array.\r\n     * Doesn't emit an event, the calling method does (`NewPrime` or `NewReplicant`).\r\n     * Sets `isHashUsedByGeneration` mapping to true for `avastar.generation` and `avastar.traits`.\r\n     * Sets `tokenIdByGenerationAndHash` mapping to `avastar.id` for `avastar.generation` and `avastar.traits`.\r\n     * Sets `tokenIdByGenerationWaveAndSerial` mapping to `avastar.id` for `avastar.generation`, `avastar.wave`, and `avastar.serial`.\r\n     * @param _owner the address of the new Avastar's owner\r\n     * @param _serial the new Avastar's Prime or Replicant serial number\r\n     * @param _traits the new Avastar's trait hash\r\n     * @param _generation the new Avastar's generation\r\n     * @param _wave the new Avastar's wave (Prime/Replicant)\r\n     * @return tokenId the newly minted Prime's token ID\r\n     */\r\n    function mintAvastar(\r\n        address _owner,\r\n        uint256 _serial,\r\n        uint256 _traits,\r\n        Generation _generation,\r\n        Wave _wave\r\n    )\r\n    internal whenNotPaused\r\n    returns (uint256 tokenId)\r\n    {\r\n        // Mapped Token Id for given generation and serial should always be 0 (uninitialized)\r\n        require(tokenIdByGenerationWaveAndSerial[uint8(_generation)][uint8(_wave)][_serial] == 0);\r\n\r\n        // Serial should always be the current length of the primes or replicants array for the given generation\r\n        if (_wave == Wave.PRIME){\r\n            require(_serial == primesByGeneration[uint8(_generation)].length);\r\n        } else {\r\n            require(_serial == replicantsByGeneration[uint8(_generation)].length);\r\n        }\r\n\r\n        // Get Token ID\r\n        tokenId = avastars.length;\r\n\r\n        // Create and store Avastar token\r\n        Avastar memory avastar = Avastar(tokenId, _serial, _traits, _generation, _wave);\r\n\r\n        // Store the avastar\r\n        avastars.push(avastar);\r\n\r\n        // Indicate use of Trait Hash within given generation\r\n        isHashUsedByGeneration[uint8(avastar.generation)][avastar.traits] = true;\r\n\r\n        // Store token ID by Generation and Trait Hash\r\n        tokenIdByGenerationAndHash[uint8(avastar.generation)][avastar.traits] = avastar.id;\r\n\r\n        // Create generation/wave/serial to tokenId mapping\r\n        tokenIdByGenerationWaveAndSerial[uint8(avastar.generation)][uint8(avastar.wave)][avastar.serial] = avastar.id;\r\n\r\n        // Mint the token\r\n        super._mint(_owner, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Get an Avastar's Wave by token ID.\r\n     * @param _tokenId the token id of the given Avastar\r\n     * @return wave the Avastar's wave (Prime/Replicant)\r\n     */\r\n    function getAvastarWaveByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (Wave wave)\r\n    {\r\n        require(_tokenId < avastars.length);\r\n        wave = avastars[_tokenId].wave;\r\n    }\r\n\r\n    /**\r\n     * @notice Render the Avastar Prime or Replicant from the original on-chain art.\r\n     * @param _tokenId the token ID of the Prime or Replicant\r\n     * @return svg the fully rendered SVG representation of the Avastar\r\n     */\r\n    function renderAvastar(uint256 _tokenId)\r\n    external view\r\n    returns (string memory svg)\r\n    {\r\n        require(_tokenId < avastars.length);\r\n        Avastar memory avastar = avastars[_tokenId];\r\n        uint256 traits = (avastar.wave == Wave.PRIME)\r\n        ? primesByGeneration[uint8(avastar.generation)][avastar.serial].traits\r\n        : replicantsByGeneration[uint8(avastar.generation)][avastar.serial].traits;\r\n        svg = assembleArtwork(avastar.generation, traits);\r\n    }\r\n}\r\n\r\n// File: contracts/PrimeFactory.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @title Avastar Prime Factory\r\n * @author Cliff Hall\r\n */\r\ncontract PrimeFactory is AvastarFactory {\r\n\r\n    /**\r\n     * @notice Maximum number of primes that can be minted in\r\n     * any given series for any generation.\r\n     */\r\n    uint16 public constant MAX_PRIMES_PER_SERIES = 5000;\r\n    uint16 public constant MAX_PROMO_PRIMES_PER_GENERATION = 200;\r\n\r\n    /**\r\n     * @notice Event emitted upon the creation of an Avastar Prime\r\n     * @param id the token ID of the newly minted Prime\r\n     * @param serial the serial of the Prime\r\n     * @param generation the generation of the Prime\r\n     * @param series the series of the Prime\r\n     * @param gender the gender of the Prime\r\n     * @param traits the trait hash of the Prime\r\n     */\r\n    event NewPrime(uint256 id, uint256 serial, Generation generation, Series series, Gender gender, uint256 traits);\r\n\r\n    /**\r\n     * @notice Get the Avastar Prime metadata associated with a given Generation and Serial.\r\n     * Does not include the trait replication flags.\r\n     * @param _generation the Generation of the Prime\r\n     * @param _serial the Serial of the Prime\r\n     * @return tokenId the Prime's token ID\r\n     * @return serial the Prime's serial\r\n     * @return traits the Prime's trait hash\r\n     * @return replicated the Prime's trait replication indicators\r\n     * @return generation the Prime's generation\r\n     * @return series the Prime's series\r\n     * @return gender the Prime's gender\r\n     * @return ranking the Prime's ranking\r\n     */\r\n    function getPrimeByGenerationAndSerial(Generation _generation, uint256 _serial)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        uint256 serial,\r\n        uint256 traits,\r\n        Generation generation,\r\n        Series series,\r\n        Gender gender,\r\n        uint8 ranking\r\n    ) {\r\n        require(_serial < primesByGeneration[uint8(_generation)].length);\r\n        Prime memory prime = primesByGeneration[uint8(_generation)][_serial];\r\n        return (\r\n            prime.id,\r\n            prime.serial,\r\n            prime.traits,\r\n            prime.generation,\r\n            prime.series,\r\n            prime.gender,\r\n            prime.ranking\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the Avastar Prime associated with a given Token ID.\r\n     * Does not include the trait replication flags.\r\n     * @param _tokenId the Token ID of the specified Prime\r\n     * @return tokenId the Prime's token ID\r\n     * @return serial the Prime's serial\r\n     * @return traits the Prime's trait hash\r\n     * @return generation the Prime's generation\r\n     * @return series the Prime's series\r\n     * @return gender the Prime's gender\r\n     * @return ranking the Prime's ranking\r\n     */\r\n    function getPrimeByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        uint256 serial,\r\n        uint256 traits,\r\n        Generation generation,\r\n        Series series,\r\n        Gender gender,\r\n        uint8 ranking\r\n    ) {\r\n        require(_tokenId < avastars.length);\r\n        Avastar memory avastar = avastars[_tokenId];\r\n        require(avastar.wave ==  Wave.PRIME);\r\n        Prime memory prime = primesByGeneration[uint8(avastar.generation)][avastar.serial];\r\n        return (\r\n            prime.id,\r\n            prime.serial,\r\n            prime.traits,\r\n            prime.generation,\r\n            prime.series,\r\n            prime.gender,\r\n            prime.ranking\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get an Avastar Prime's replication flags by token ID.\r\n     * @param _tokenId the token ID of the specified Prime\r\n     * @return tokenId the Prime's token ID\r\n     * @return replicated the Prime's trait replication flags\r\n     */\r\n    function getPrimeReplicationByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        bool[12] memory replicated\r\n    ) {\r\n        require(_tokenId < avastars.length);\r\n        Avastar memory avastar = avastars[_tokenId];\r\n        require(avastar.wave ==  Wave.PRIME);\r\n        Prime memory prime = primesByGeneration[uint8(avastar.generation)][avastar.serial];\r\n        return (\r\n            prime.id,\r\n            prime.replicated\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mint an Avastar Prime\r\n     * Only invokable by minter role, when contract is not paused.\r\n     * If successful, emits a `NewPrime` event.\r\n     * @param _owner the address of the new Avastar's owner\r\n     * @param _traits the new Prime's trait hash\r\n     * @param _generation the new Prime's generation\r\n     * @return _series the new Prime's series\r\n     * @param _gender the new Prime's gender\r\n     * @param _ranking the new Prime's rarity ranking\r\n     * @return tokenId the newly minted Prime's token ID\r\n     * @return serial the newly minted Prime's serial\r\n     */\r\n    function mintPrime(\r\n        address _owner,\r\n        uint256 _traits,\r\n        Generation _generation,\r\n        Series _series,\r\n        Gender _gender,\r\n        uint8 _ranking\r\n    )\r\n    external onlyMinter whenNotPaused\r\n    returns (uint256 tokenId, uint256 serial)\r\n    {\r\n        require(_owner != address(0));\r\n        require(_traits != 0);\r\n        require(isHashUsedByGeneration[uint8(_generation)][_traits] == false);\r\n        require(_ranking > 0 && _ranking <= 100);\r\n        uint16 count = primeCountByGenAndSeries[uint8(_generation)][uint8(_series)];\r\n        if (_series != Series.PROMO) {\r\n            require(count < MAX_PRIMES_PER_SERIES);\r\n        } else {\r\n            require(count < MAX_PROMO_PRIMES_PER_GENERATION);\r\n        }\r\n\r\n        // Get Prime Serial and mint Avastar, getting tokenId\r\n        serial = primesByGeneration[uint8(_generation)].length;\r\n        tokenId = mintAvastar(_owner, serial, _traits, _generation, Wave.PRIME);\r\n\r\n        // Create and store Prime struct\r\n        bool[12] memory replicated;\r\n        primesByGeneration[uint8(_generation)].push(\r\n            Prime(tokenId, serial, _traits, replicated, _generation, _series, _gender, _ranking)\r\n        );\r\n\r\n        // Increment count for given Generation/Series\r\n        primeCountByGenAndSeries[uint8(_generation)][uint8(_series)]++;\r\n\r\n        // Send the NewPrime event\r\n        emit NewPrime(tokenId, serial, _generation, _series, _gender, _traits);\r\n\r\n        // Return the tokenId, serial\r\n        return (tokenId, serial);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ReplicantFactory.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n/**\r\n * @title Avastar Replicant Factory\r\n * @author Cliff Hall\r\n */\r\ncontract ReplicantFactory is PrimeFactory {\r\n\r\n    /**\r\n     * @notice Maximum number of Replicants that can be minted\r\n     * in any given generation.\r\n     */\r\n    uint16 public constant MAX_REPLICANTS_PER_GENERATION = 25200;\r\n\r\n    /**\r\n     * @notice Event emitted upon the creation of an Avastar Replicant\r\n     * @param id the token ID of the newly minted Replicant\r\n     * @param serial the serial of the Replicant\r\n     * @param generation the generation of the Replicant\r\n     * @param gender the gender of the Replicant\r\n     * @param traits the trait hash of the Replicant\r\n     */\r\n    event NewReplicant(uint256 id, uint256 serial, Generation generation, Gender gender, uint256 traits);\r\n\r\n    /**\r\n     * @notice Get the Avastar Replicant metadata associated with a given Generation and Serial\r\n     * @param _generation the generation of the specified Replicant\r\n     * @param _serial the serial of the specified Replicant\r\n     * @return tokenId the Replicant's token ID\r\n     * @return serial the Replicant's serial\r\n     * @return traits the Replicant's trait hash\r\n     * @return generation the Replicant's generation\r\n     * @return gender the Replicant's gender\r\n     * @return ranking the Replicant's ranking\r\n     */\r\n    function getReplicantByGenerationAndSerial(Generation _generation, uint256 _serial)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        uint256 serial,\r\n        uint256 traits,\r\n        Generation generation,\r\n        Gender gender,\r\n        uint8 ranking\r\n    ) {\r\n        require(_serial < replicantsByGeneration[uint8(_generation)].length);\r\n        Replicant memory replicant = replicantsByGeneration[uint8(_generation)][_serial];\r\n        return (\r\n            replicant.id,\r\n            replicant.serial,\r\n            replicant.traits,\r\n            replicant.generation,\r\n            replicant.gender,\r\n            replicant.ranking\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the Avastar Replicant associated with a given Token ID\r\n     * @param _tokenId the token ID of the specified Replicant\r\n     * @return tokenId the Replicant's token ID\r\n     * @return serial the Replicant's serial\r\n     * @return traits the Replicant's trait hash\r\n     * @return generation the Replicant's generation\r\n     * @return gender the Replicant's gender\r\n     * @return ranking the Replicant's ranking\r\n     */\r\n    function getReplicantByTokenId(uint256 _tokenId)\r\n    external view\r\n    returns (\r\n        uint256 tokenId,\r\n        uint256 serial,\r\n        uint256 traits,\r\n        Generation generation,\r\n        Gender gender,\r\n        uint8 ranking\r\n    ) {\r\n        require(_tokenId < avastars.length);\r\n        Avastar memory avastar = avastars[_tokenId];\r\n        require(avastar.wave ==  Wave.REPLICANT);\r\n        Replicant memory replicant = replicantsByGeneration[uint8(avastar.generation)][avastar.serial];\r\n        return (\r\n            replicant.id,\r\n            replicant.serial,\r\n            replicant.traits,\r\n            replicant.generation,\r\n            replicant.gender,\r\n            replicant.ranking\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mint an Avastar Replicant.\r\n     * Only invokable by minter role, when contract is not paused.\r\n     * If successful, emits a `NewReplicant` event.\r\n     * @param _owner the address of the new Avastar's owner\r\n     * @param _traits the new Replicant's trait hash\r\n     * @param _generation the new Replicant's generation\r\n     * @param _gender the new Replicant's gender\r\n     * @param _ranking the new Replicant's rarity ranking\r\n     * @return tokenId the newly minted Replicant's token ID\r\n     * @return serial the newly minted Replicant's serial\r\n     */\r\n    function mintReplicant(\r\n        address _owner,\r\n        uint256 _traits,\r\n        Generation _generation,\r\n        Gender _gender,\r\n        uint8 _ranking\r\n    )\r\n    external onlyMinter whenNotPaused\r\n    returns (uint256 tokenId, uint256 serial)\r\n    {\r\n        require(_traits != 0);\r\n        require(isHashUsedByGeneration[uint8(_generation)][_traits] == false);\r\n        require(_ranking > 0 && _ranking <= 100);\r\n        require(replicantCountByGeneration[uint8(_generation)] < MAX_REPLICANTS_PER_GENERATION);\r\n\r\n        // Get Replicant Serial and mint Avastar, getting tokenId\r\n        serial = replicantsByGeneration[uint8(_generation)].length;\r\n        tokenId = mintAvastar(_owner, serial, _traits, _generation, Wave.REPLICANT);\r\n\r\n        // Create and store Replicant struct\r\n        replicantsByGeneration[uint8(_generation)].push(\r\n            Replicant(tokenId, serial, _traits, _generation, _gender, _ranking)\r\n        );\r\n\r\n        // Increment count for given Generation\r\n        replicantCountByGeneration[uint8(_generation)]++;\r\n\r\n        // Send the NewReplicant event\r\n        emit NewReplicant(tokenId, serial, _generation, _gender, _traits);\r\n\r\n        // Return the tokenId, serial\r\n        return (tokenId, serial);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/IAvastarMetadata.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n/**\r\n * @title Identification interface for Avastar Metadata generator contract\r\n * @author Cliff Hall\r\n * @notice Used by `AvastarTeleporter` contract to validate the address of the contract.\r\n */\r\ninterface IAvastarMetadata {\r\n\r\n    /**\r\n     * @notice Acknowledge contract is `AvastarMetadata`\r\n     * @return always true\r\n     */\r\n    function isAvastarMetadata() external pure returns (bool);\r\n\r\n    /**\r\n     * @notice Get token URI for a given Avastar Token ID.\r\n     * @param _tokenId the Token ID of a previously minted Avastar Prime or Replicant\r\n     * @return uri the Avastar's off-chain JSON metadata URI\r\n     */\r\n    function tokenURI(uint _tokenId)\r\n    external view\r\n    returns (string memory uri);\r\n}\r\n\r\n// File: contracts/AvastarTeleporter.sol\r\n\r\npragma solidity 0.5.14;\r\n\r\n\r\n\r\n/**\r\n * @title AvastarTeleporter\r\n * @author Cliff Hall\r\n * @notice Management of Avastar Primes, Replicants, and Traits\r\n */\r\ncontract AvastarTeleporter is ReplicantFactory {\r\n\r\n    /**\r\n     * @notice Event emitted when a handler is approved to manage Trait replication.\r\n     * @param handler the address being approved to Trait replication\r\n     * @param primeIds the array of Avastar Prime tokenIds the handler can use\r\n     */\r\n    event TraitAccessApproved(address indexed handler, uint256[] primeIds);\r\n\r\n    /**\r\n     * @notice Event emitted when a handler replicates Traits.\r\n     * @param handler the address marking the Traits as used\r\n     * @param primeId the token id of the Prime supplying the Traits\r\n     * @param used the array of flags representing the Primes resulting Trait usage\r\n     */\r\n    event TraitsUsed(address indexed handler, uint256 primeId, bool[12] used);\r\n\r\n    /**\r\n     * @notice Event emitted when AvastarMetadata contract address is set\r\n     * @param contractAddress the address of the new AvastarMetadata contract\r\n     */\r\n    event MetadataContractAddressSet(address contractAddress);\r\n\r\n    /**\r\n     * @notice Address of the AvastarMetadata contract\r\n     */\r\n    address private metadataContractAddress;\r\n\r\n    /**\r\n     * @notice Acknowledge contract is `AvastarTeleporter`\r\n     * @return always true\r\n     */\r\n    function isAvastarTeleporter() external pure returns (bool) {return true;}\r\n\r\n    /**\r\n     * @notice Set the address of the `AvastarMetadata` contract.\r\n     * Only invokable by system admin role, when contract is paused and not upgraded.\r\n     * If successful, emits an `MetadataContractAddressSet` event.\r\n     * @param _address address of AvastarTeleporter contract\r\n     */\r\n    function setMetadataContractAddress(address _address)\r\n    external onlySysAdmin whenPaused whenNotUpgraded\r\n    {\r\n        // Cast the candidate contract to the IAvastarMetadata interface\r\n        IAvastarMetadata candidateContract = IAvastarMetadata(_address);\r\n\r\n        // Verify that we have the appropriate address\r\n        require(candidateContract.isAvastarMetadata());\r\n\r\n        // Set the contract address\r\n        metadataContractAddress = _address;\r\n\r\n        // Emit the event\r\n        emit MetadataContractAddressSet(_address);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current address of the `AvastarMetadata` contract.\r\n     * return contractAddress the address of the `AvastarMetadata` contract\r\n     */\r\n    function getMetadataContractAddress()\r\n    external view\r\n    returns (address contractAddress) {\r\n        return metadataContractAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Get token URI for a given Avastar Token ID.\r\n     * Reverts if given token id is not a valid Avastar Token ID.\r\n     * @param _tokenId the Token ID of a previously minted Avastar Prime or Replicant\r\n     * @return uri the Avastar's off-chain JSON metadata URI\r\n     */\r\n    function tokenURI(uint _tokenId)\r\n    external view\r\n    returns (string memory uri)\r\n    {\r\n        require(_tokenId < avastars.length);\r\n        return IAvastarMetadata(metadataContractAddress).tokenURI(_tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Approve a handler to manage Trait replication for a set of Avastar Primes.\r\n     * Accepts up to 256 primes for approval per call.\r\n     * Reverts if caller is not owner of all Primes specified.\r\n     * Reverts if no Primes are specified.\r\n     * Reverts if given handler already has approval for all Primes specified.\r\n     * If successful, emits a `TraitAccessApproved` event.\r\n     * @param _handler the address approved for Trait access\r\n     * @param _primeIds the token ids for which to approve the handler\r\n     */\r\n    function approveTraitAccess(address _handler, uint256[] calldata _primeIds)\r\n    external\r\n    {\r\n        require(_primeIds.length > 0 && _primeIds.length <= 256);\r\n        uint256 primeId;\r\n        bool approvedAtLeast1 = false;\r\n        for (uint8 i = 0; i < _primeIds.length; i++) {\r\n            primeId = _primeIds[i];\r\n            require(primeId < avastars.length);\r\n            require(msg.sender == super.ownerOf(primeId), \"Must be token owner\");\r\n            if (traitHandlerByPrimeTokenId[primeId] != _handler) {\r\n                traitHandlerByPrimeTokenId[primeId] = _handler;\r\n                approvedAtLeast1 = true;\r\n            }\r\n        }\r\n        require(approvedAtLeast1, \"No unhandled primes specified\");\r\n\r\n        // Emit the event\r\n        emit TraitAccessApproved(_handler, _primeIds);\r\n    }\r\n\r\n    /**\r\n     * @notice Mark some or all of an Avastar Prime's traits used.\r\n     * Caller must be the token owner OR the approved handler.\r\n     * Caller must send all 12 flags with those to be used set to true, the rest to false.\r\n     * The position of each flag in the `_traitFlags` array corresponds to a Gene, of which Traits are variations.\r\n     * The flag order is: [ SKIN_TONE, HAIR_COLOR, EYE_COLOR, BG_COLOR, BACKDROP, EARS, FACE, NOSE, MOUTH, FACIAL_FEATURE, EYES, HAIR_STYLE ].\r\n     * Reverts if no usable traits are indicated.\r\n     * If successful, emits a `TraitsUsed` event.\r\n     * @param _primeId the token id for the Prime whose Traits are to be used\r\n     * @param _traitFlags an array of no more than 12 booleans representing the Traits to be used\r\n     */\r\n    function useTraits(uint256 _primeId, bool[12] calldata _traitFlags)\r\n    external\r\n    {\r\n        // Make certain token id is valid\r\n        require(_primeId < avastars.length);\r\n\r\n        // Make certain caller is token owner OR approved handler\r\n        require(msg.sender == super.ownerOf(_primeId) || msg.sender == traitHandlerByPrimeTokenId[_primeId],\r\n        \"Must be token owner or approved handler\" );\r\n\r\n        // Get the Avastar and make sure it's a Prime\r\n        Avastar memory avastar = avastars[_primeId];\r\n        require(avastar.wave == Wave.PRIME);\r\n\r\n        // Get the Prime\r\n        Prime storage prime = primesByGeneration[uint8(avastar.generation)][avastar.serial];\r\n\r\n        // Set the flags.\r\n        bool usedAtLeast1;\r\n        for (uint8 i = 0; i < 12; i++) {\r\n            if (_traitFlags.length > i ) {\r\n                if ( !prime.replicated[i] && _traitFlags[i] ) {\r\n                    prime.replicated[i] = true;\r\n                    usedAtLeast1 = true;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Revert if no flags changed\r\n        require(usedAtLeast1, \"No reusable traits specified\");\r\n\r\n        // Clear trait handler\r\n        traitHandlerByPrimeTokenId[_primeId] = address(0);\r\n\r\n        // Emit the TraitsUsed event\r\n        emit TraitsUsed(msg.sender, _primeId, prime.replicated);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"}],\"name\":\"AttributionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"MetadataContractAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Series\",\"name\":\"series\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"}],\"name\":\"NewPrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"}],\"name\":\"NewReplicant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Gene\",\"name\":\"gene\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum AvastarTypes.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"variation\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NewTrait\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"primeIds\",\"type\":\"uint256[]\"}],\"name\":\"TraitAccessApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"TraitArtExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"primeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool[12]\",\"name\":\"used\",\"type\":\"bool[12]\"}],\"name\":\"TraitsUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PRIMES_PER_SERIES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_PROMO_PRIMES_PER_GENERATION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_REPLICANTS_PER_GENERATION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sysAdminAddress\",\"type\":\"address\"}],\"name\":\"addSysAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_primeIds\",\"type\":\"uint256[]\"}],\"name\":\"approveTraitAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"attributionByGeneration\",\"outputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Series[]\",\"name\":\"_series\",\"type\":\"uint8[]\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"_gender\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gene\",\"name\":\"_gene\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Rarity\",\"name\":\"_rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_variation\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"createTrait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"traitId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"extendTraitArt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"}],\"name\":\"getAttributionByGeneration\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribution\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvastarWaveByTokenId\",\"outputs\":[{\"internalType\":\"enum AvastarTypes.Wave\",\"name\":\"wave\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMetadataContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_serial\",\"type\":\"uint256\"}],\"name\":\"getPrimeByGenerationAndSerial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Series\",\"name\":\"series\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ranking\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimeByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Series\",\"name\":\"series\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ranking\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimeReplicationByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool[12]\",\"name\":\"replicated\",\"type\":\"bool[12]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_serial\",\"type\":\"uint256\"}],\"name\":\"getReplicantByGenerationAndSerial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ranking\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getReplicantByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ranking\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitId\",\"type\":\"uint256\"}],\"name\":\"getTraitArtById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"art\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gene\",\"name\":\"_gene\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_variation\",\"type\":\"uint8\"}],\"name\":\"getTraitIdByGenerationGeneAndVariation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"traitId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitId\",\"type\":\"uint256\"}],\"name\":\"getTraitInfoById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Series[]\",\"name\":\"series\",\"type\":\"uint8[]\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gene\",\"name\":\"gene\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"variation\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_traitId\",\"type\":\"uint256\"}],\"name\":\"getTraitNameById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAvastarTeleporter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isHashUsedByGeneration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Series\",\"name\":\"_series\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"_gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_ranking\",\"type\":\"uint8\"}],\"name\":\"mintPrime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_traits\",\"type\":\"uint256\"},{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"enum AvastarTypes.Gender\",\"name\":\"_gender\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_ranking\",\"type\":\"uint8\"}],\"name\":\"mintReplicant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"primeCountByGenAndSeries\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"renderAvastar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"replicantCountByGeneration\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum AvastarTypes.Generation\",\"name\":\"_generation\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_artist\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_infoURI\",\"type\":\"string\"}],\"name\":\"setAttribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMetadataContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"stripRoles\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdByGenerationAndHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdByGenerationWaveAndSerial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitIdByGenerationGeneAndVariation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgraded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_primeId\",\"type\":\"uint256\"},{\"internalType\":\"bool[12]\",\"name\":\"_traitFlags\",\"type\":\"bool[12]\"}],\"name\":\"useTraits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AvastarTeleporter","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://58dc70ca79f03c655381e9b8ffb65b62e19238f259a0093e34ed6dde4d524ae8"}]}