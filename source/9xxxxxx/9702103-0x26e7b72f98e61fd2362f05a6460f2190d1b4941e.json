{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IERC1820Registry {\r\n    function setManager(address account, address newManager) external;\r\n\r\n    function getManager(address account) external view returns (address);\r\n\r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n\r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\ninterface IERC777Recipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface IERC777 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function granularity() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount, bytes calldata data) external;\r\n\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n\r\n    function authorizeOperator(address operator) external;\r\n\r\n    function revokeOperator(address operator) external;\r\n\r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\ninterface ISmartexUID {\r\n  function addUser(address addr) external returns (uint256);\r\n  function userExists(uint256 id) external view returns (bool);\r\n  function getIDByAddress(address addr) external view returns (uint256);\r\n  function getAddressByID(uint256 id) external view returns (address);\r\n\r\n  event NewUser(address indexed addr, uint256 indexed id, uint256 time);\r\n}\r\n\r\ninterface ISmartexOracle {\r\n  function currentETHPrice() external view returns (uint256);\r\n  function lastETHPriceUpdate() external view returns (uint256);\r\n\r\n  function currentTokenPrice() external view returns (uint256);\r\n  function lastTokenPriceUpdate() external view returns (uint256);\r\n\r\n  function setETHPrice(uint256 price) external;\r\n  function updateTokenPrice() external;\r\n\r\n  event ETHPriceUpdated(uint256 price, uint256 timestamp);\r\n  event TokenPriceUpdated(uint256 price, uint256 timestamp);\r\n}\r\n\r\ncontract SmartexBase is Context, IERC777Recipient {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  struct User {\r\n    bool exists;\r\n    uint256 id;\r\n    uint256 uplineID;\r\n    uint256 referrerID;\r\n    bool isBurner;\r\n    uint256 holdings;\r\n    address[] downlines;\r\n    address[] referrals;\r\n    mapping (uint8 => uint8) levelPayments;\r\n    mapping (uint8 => bool) levels;\r\n  }\r\n\r\n  mapping (address => User) public users;\r\n  mapping (address => bool) public authorizedCallers;\r\n\r\n  bool internal _burnersSet;\r\n\r\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n  address private _creator;\r\n  uint256 private _currentUserID;\r\n  uint8 constant private MAX_LEVEL = 3;\r\n\r\n  IERC777 private _token;\r\n  ISmartexUID private _suid;\r\n  ISmartexOracle private _oracle;\r\n\r\n  bytes32 constant private SMARTEX_UID_INTERFACE_HASH =\r\n        0x5a4c6394bd517002e989261e4e45550e407682bcf6894da75da3069c13cae07a;\r\n\r\n  bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\r\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n  mapping (uint8 => uint256) internal _levelUSDPrices;\r\n  mapping (uint256 => address) private _wallets;\r\n\r\n  event RegisterUser(address indexed user, address indexed inviter, address indexed upline, uint256 id, uint256 amount, uint256 time);\r\n  event BuyLevel(address indexed user, uint8 indexed level, bool autoBuy, uint256 amount, uint256 time);\r\n\r\n  event GetLevelProfit(address indexed user, address indexed downline, uint8 indexed level, uint256 amount, uint256 time);\r\n  event LostLevelProfit(address indexed user, address indexed downline, uint8 indexed level, uint256 amount, uint256 time);\r\n  event BurnLevelProfit(address indexed user, address indexed downline, uint8 indexed level, uint256 amount, uint256 time);\r\n\r\n  modifier onlyCreator() {\r\n    require(_msgSender() == _creator, \"Caller is not the creator\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAuthorizedCaller() {\r\n    require(_msgSender() == _creator || authorizedCallers[_msgSender()], \"Caller is not authorized\");\r\n    _;\r\n  }\r\n\r\n  constructor(IERC777 token) public {\r\n    _token = token;\r\n\r\n    _currentUserID++;\r\n\r\n    address msgSender = _msgSender();\r\n\r\n    _creator = msgSender;\r\n    users[msgSender] = _newUser(0, 0, true);\r\n    _wallets[_currentUserID] = msgSender;\r\n\r\n    users[msgSender].levels[1] = true;\r\n    users[msgSender].levels[2] = true;\r\n    users[msgSender].levels[3] = true;\r\n\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), SMARTEX_UID_INTERFACE_HASH, address(this));\r\n  }\r\n\r\n  function creator() public view returns (address) {\r\n    return _creator;\r\n  }\r\n\r\n  function currentUserID() public view returns (uint256) {\r\n    return _currentUserID;\r\n  }\r\n\r\n  function token() public view returns (IERC777) {\r\n    return _token;\r\n  }\r\n\r\n  function setSUID(ISmartexUID suid) public onlyCreator {\r\n    _suid = suid;\r\n  }\r\n\r\n  function suid() public view returns (ISmartexUID) {\r\n    return _suid;\r\n  }\r\n\r\n  function setOracle(ISmartexOracle oracle) public onlyCreator {\r\n    _oracle = oracle;\r\n  }\r\n\r\n  function oracle() public view returns (ISmartexOracle) {\r\n    return _oracle;\r\n  }\r\n\r\n  function wallet(uint256 id) public view returns (address) {\r\n    return _wallets[id];\r\n  }\r\n\r\n  function levelPrice(uint8 level) public view returns (uint256) {\r\n    return uint256(10 ** 18).mul(_levelUSDPrices[level]).div(_oracle.currentTokenPrice());\r\n  }\r\n\r\n  function levelPrices() public view returns (uint256, uint256, uint256) {\r\n    return (levelPrice(1), levelPrice(2), levelPrice(3));\r\n  }\r\n\r\n  function userUpline(address user, uint8 height) public view returns (address) {\r\n    if (height == 0 || user == address(0)) {\r\n      return user;\r\n    }\r\n\r\n    return userUpline(_wallets[users[user].uplineID], height - 1);\r\n  }\r\n\r\n  function userLevelPayments(address user, uint8 level) public view returns (uint8) {\r\n    return users[user].levelPayments[level];\r\n  }\r\n\r\n  function userLevels(address user) public view returns (bool, bool, bool) {\r\n    return (users[user].levels[1], users[user].levels[2], users[user].levels[3]);\r\n  }\r\n\r\n  function userHoldings(address user) public view returns (uint256) {\r\n    return users[user].holdings;\r\n  }\r\n\r\n  function userDownlines(address user) public view returns (address[] memory) {\r\n    return users[user].downlines;\r\n  }\r\n\r\n  function userReferrals(address user) public view returns (address[] memory) {\r\n    return users[user].referrals;\r\n  }\r\n\r\n  function userHasLevel(address user, uint8 level) public view returns (bool) {\r\n    return users[user].levels[level];\r\n  }\r\n\r\n  function setAuthorizedCaller(address caller, bool allowed) public onlyCreator {\r\n    authorizedCallers[caller] = allowed;\r\n  }\r\n\r\n  function addBurner(address burner) public onlyCreator {\r\n    require(!_burnersSet, \"Burners are already set\");\r\n\r\n    uint256 uplineID = _getUplineID();\r\n\r\n    _currentUserID++;\r\n\r\n    if (_currentUserID == 63) {\r\n      _burnersSet = true;\r\n    }\r\n\r\n    users[burner] = _newUser(uplineID, uplineID, true);\r\n    _wallets[_currentUserID] = burner;\r\n\r\n    users[burner].levels[1] = true;\r\n    users[burner].levels[2] = true;\r\n    users[burner].levels[3] = true;\r\n\r\n    users[_wallets[uplineID]].downlines.push(burner);\r\n\r\n    users[_wallets[uplineID]].referrals.push(burner);\r\n\r\n    emit RegisterUser(burner, _wallets[uplineID], _wallets[uplineID], _currentUserID, levelPrice(1), now);\r\n  }\r\n\r\n  function tokensReceived(address operator, address from, address to, uint256 amount, bytes memory data, bytes memory operatorData) public {\r\n    require(_burnersSet, \"Burners are not set\");\r\n    require(address(_token) == _msgSender(), \"Invalid token\");\r\n    require(operator == from, \"Transfers from operators are not allowed\");\r\n    require(!from.isContract(), \"Transfers from contracts are not allowed\");\r\n\r\n    uint8 level = MAX_LEVEL;\r\n\r\n    while (level > 0 && amount != levelPrice(level)) level--;\r\n\r\n    require(level > 0, \"Invalid amount has sent\");\r\n\r\n    if (users[from].exists) {\r\n      _buyLevel(from, level);\r\n      return;\r\n    }\r\n\r\n    require(level == 1, \"You should buy first level\");\r\n\r\n    address referrer = _bytesToAddress(data);\r\n    _registerUser(from, users[referrer].id);\r\n  }\r\n\r\n  function _registerUser(address newUser, uint256 referrerID) private {\r\n    referrerID = (referrerID > 0 && referrerID <= _currentUserID) ? referrerID : 63;\r\n    uint256 uplineID = _getUplineID();\r\n\r\n    _currentUserID++;\r\n\r\n    users[newUser] = _newUser(referrerID, uplineID, false);\r\n    _wallets[_currentUserID] = newUser;\r\n    users[newUser].levels[1] = true;\r\n\r\n    users[_wallets[uplineID]].downlines.push(newUser);\r\n\r\n    users[_wallets[referrerID]].referrals.push(newUser);\r\n\r\n    address referrer = _wallets[referrerID];\r\n\r\n    if (!users[referrer].isBurner && !referrer.isContract() && users[_wallets[referrerID]].referrals.length > 2) {\r\n      _token.mint(referrer, levelPrice(1).div(2), abi.encodePacked(newUser));\r\n    }\r\n\r\n    if (address(_suid) != address(0)) {\r\n      _suid.addUser(newUser);\r\n    }\r\n\r\n    _transferLevelPayment(1, newUser, newUser);\r\n    emit RegisterUser(newUser, _wallets[referrerID], _wallets[uplineID], _currentUserID, levelPrice(1), now);\r\n  }\r\n\r\n  function _buyLevel(address user, uint8 level) private {\r\n    require(!users[user].levels[level], \"You already bought this level\");\r\n\r\n    for (uint8 lvl = level - 1; lvl > 0; lvl--) {\r\n      require(users[user].levels[lvl], \"Buy the previous level\");\r\n    }\r\n\r\n    users[user].levels[level] = true;\r\n\r\n    _releaseUserHoldings(user, level);\r\n\r\n    _transferLevelPayment(level, user, user);\r\n    emit BuyLevel(user, level, false, levelPrice(level), now);\r\n  }\r\n\r\n  function _autoBuy(address user, uint8 level) private {\r\n    uint256 price = levelPrice(level);\r\n\r\n    require(users[user].holdings >= price, \"Not enough holdings for autobuy\");\r\n\r\n    uint256 change = users[user].holdings.sub(price);\r\n\r\n    if (! users[user].levels[level]) {\r\n      users[user].levels[level] = true;\r\n    }\r\n\r\n    users[user].holdings = 0;\r\n    delete users[user].levelPayments[level - 1];\r\n\r\n    _transferLevelPayment(level, user, user);\r\n\r\n    _token.transfer(user, change);\r\n\r\n    emit BuyLevel(user, level, true, price, now);\r\n  }\r\n\r\n  function _transferLevelPayment(uint8 level, address _user, address originalSender) private {\r\n    address referrer = userUpline(_user, level);\r\n\r\n    if (referrer == address(0)) {\r\n      referrer = _creator;\r\n    }\r\n\r\n    User storage user = users[referrer];\r\n\r\n    uint256 amount = levelPrice(level);\r\n\r\n    if (\r\n      referrer.isContract() ||\r\n      (\r\n        !user.isBurner &&\r\n        (user.referrals.length < 2 || ! user.levels[level])\r\n      )\r\n    ) {\r\n      emit LostLevelProfit(referrer, originalSender, level, amount, now);\r\n      _transferLevelPayment(level, referrer, originalSender);\r\n      return;\r\n    }\r\n\r\n    if (user.isBurner) {\r\n      _token.burn(amount, \"Smartex burn profit\");\r\n      emit BurnLevelProfit(referrer, originalSender, level, amount, now);\r\n      return;\r\n    }\r\n\r\n    if (level != MAX_LEVEL && ! users[referrer].levels[level + 1]) {\r\n      user.levelPayments[level]++;\r\n    }\r\n\r\n    if (\r\n      ! user.levels[level + 1] &&\r\n      (level == 1 || (level == 2 && user.levelPayments[2] > 2))\r\n    ) {\r\n      user.holdings = user.holdings.add(amount);\r\n\r\n      emit GetLevelProfit(referrer, originalSender, level, amount, now);\r\n\r\n      if (levelPrice(level + 1) <= user.holdings) {\r\n        _autoBuy(referrer, (level + 1));\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    _token.transfer(referrer, amount);\r\n    emit GetLevelProfit(referrer, originalSender, level, amount, now);\r\n  }\r\n\r\n\r\n  function _getUplineID() private view returns (uint256 uplineID) {\r\n    uplineID = users[_wallets[_currentUserID]].uplineID;\r\n\r\n    if (_currentUserID % 2 != 0) {\r\n      uplineID += 1;\r\n    }\r\n  }\r\n\r\n  function _releaseUserHoldings(address user, uint8 level) private {\r\n    User storage _user = users[user];\r\n    uint256 amount = _user.holdings;\r\n\r\n    if (_user.levelPayments[level] == 0 && amount == 0) {\r\n      return;\r\n    }\r\n\r\n    _user.holdings = 0;\r\n    delete _user.levelPayments[level];\r\n\r\n    _token.transfer(user, amount);\r\n  }\r\n\r\n  function _newUser(uint256 referrerID, uint256 uplineID, bool isBurner) private view returns (User memory) {\r\n    return User({\r\n      exists: true,\r\n      id: _currentUserID,\r\n      referrerID: referrerID,\r\n      uplineID: uplineID,\r\n      isBurner: isBurner,\r\n      holdings: 0,\r\n      downlines: new address[](0),\r\n      referrals: new address[](0)\r\n    });\r\n  }\r\n\r\n  function _bytesToAddress(bytes memory _addr) private pure returns (address addr) {\r\n    assembly {\r\n      addr := mload(add(_addr, 20))\r\n    }\r\n  }\r\n}\r\n\r\ncontract SmartexLite is SmartexBase {\r\n  constructor(IERC777 token) public SmartexBase(token) {\r\n    _levelUSDPrices[1] = 20 * (10 ** 8);\r\n    _levelUSDPrices[2] = 30 * (10 ** 8);\r\n    _levelUSDPrices[3] = 50 * (10 ** 8);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"downline\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BurnLevelProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BuyLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"downline\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"GetLevelProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"downline\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LostLevelProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RegisterUser\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"levelPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ISmartexOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAuthorizedCaller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISmartexOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISmartexUID\",\"name\":\"suid\",\"type\":\"address\"}],\"name\":\"setSUID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"suid\",\"outputs\":[{\"internalType\":\"contract ISmartexUID\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC777\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDownlines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"userHasLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"userLevelPayments\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userReferrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"height\",\"type\":\"uint8\"}],\"name\":\"userUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uplineID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBurner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"holdings\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartexLite","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000294042bccb1357b47c1a6a23f1b6086945c37295","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0dc3de1619361d6a2cf03720832159ad919d458dccf4dcef513063a34d23e707"}]}