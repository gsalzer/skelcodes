{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\ncontract LiquidDemocracyInterface{\r\n  function setNoMajority(bool t) public ;\r\n  function getVoterCount() public view returns(uint);\r\n  function getWeight(address addr) public view returns(uint) ;\r\n  function getDelegatee(address addr) public view returns (address [] memory);\r\n  function getDelegator(address addr) public view returns(address);\r\n  function delegate(address _to) public returns(bool);\r\n  function undelegate() public returns(bool);\r\n  function setWeight(address addr, uint weight) public returns(bool);\r\n  function removeVoter(address addr) public returns(bool);\r\n  function lastUpdateHeight() public view returns(uint);\r\n}\r\n\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] storage self, address addr) public view returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] storage self, address addr) public view returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n  }\r\n\r\n  function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){\r\n    uint index = index_of(self, old_addr);\r\n    self[index] = new_addr;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract LiquidDelegateFactoryInterface{\r\n  function createLiquidDemocracy() public returns(address);\r\n}\r\n\r\ncontract VoteFactoryInterface{\r\n  function createLiquidVote(address delegation)  public returns(address);\r\n}\r\n\r\ncontract VoteInterface{\r\n  function addChoice(bytes32 hash) public;\r\n  function getChoiceVoteNumber(bytes32 hash) public returns(uint);\r\n  function isChoiceExist(bytes32 hash) public view returns(bool);\r\n  function recordVoteChoice(bytes32 option, address voter) public;\r\n  function voteChoice(bytes32 option) public;\r\n}\r\n\r\ncontract LiquidMultiSig{\r\n  using AddressArray for address[];\r\n\r\n  struct invoke_status{\r\n    uint propose_height;\r\n    string func_name;\r\n    uint64 invoke_id;\r\n    bool called;\r\n    bool processing;\r\n    VoteInterface vote_contract;\r\n    bool exists;\r\n  }\r\n\r\n  uint public signer_number;\r\n  address[] public signers;\r\n  address public owner;\r\n  mapping (bytes32 => invoke_status) public invokes;\r\n  mapping (bytes32 => uint64) public used_invoke_ids;\r\n  mapping(address => uint) public signer_join_height;\r\n  bool public force_no_majority;\r\n\r\n  LiquidDelegateFactoryInterface public liquid_delegate_factory;\r\n  LiquidDemocracyInterface public liquid_delegate;\r\n  VoteFactoryInterface public vote_factory;\r\n\r\n  event signers_reformed(address[] old_signers, address[] new_signers);\r\n  event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);\r\n  event function_called(string name, uint64 id, uint propose_height);\r\n\r\n  modifier enough_signers(address[] memory s){\r\n    require(s.length >=3, \"the number of signers must be >=3\");\r\n    _;\r\n  }\r\n\r\n  constructor(address[] memory s, address _delegate_factory, address _vote_factory) public enough_signers(s){\r\n    signer_number = s.length;\r\n    owner = msg.sender;\r\n    for(uint i = 0; i < s.length; i++){\r\n      signers.push(s[i]);\r\n      signer_join_height[s[i]] = block.number;\r\n    }\r\n    liquid_delegate_factory = LiquidDelegateFactoryInterface(_delegate_factory);\r\n    vote_factory = VoteFactoryInterface(_vote_factory);\r\n    liquid_delegate = LiquidDemocracyInterface(address(0x0));\r\n  }\r\n\r\n  event init_done(address democracy_addr);\r\n  function do_initialization() public{\r\n    require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), \"already initialized\");\r\n    liquid_delegate = LiquidDemocracyInterface(liquid_delegate_factory.createLiquidDemocracy());\r\n    for(uint i = 0; i < signers.length; i++){\r\n      liquid_delegate.setWeight(signers[i], 1);\r\n    }\r\n    emit init_done(address(liquid_delegate));\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(signers.exists(msg.sender), \"only a signer can call this\");\r\n    _;\r\n  }\r\n\r\n  function is_signer(address _addr) public view returns(bool){\r\n    return signers.exists(_addr);\r\n  }\r\n\r\n  function get_democracy() public view returns(address){\r\n    return address(liquid_delegate);\r\n  }\r\n  function is_all_minus_sig(uint number, uint64 id, string memory name, bytes32 hash, address sender) internal returns (bool){\r\n    bytes32 b = keccak256(abi.encodePacked(name, signers));\r\n    require(id <= used_invoke_ids[b] + 1, \"you're using a too big id.\");\r\n\r\n    if(id > used_invoke_ids[b]){\r\n      used_invoke_ids[b] = id;\r\n    }\r\n\r\n    bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));\r\n    bytes32 choiceHash = hash;\r\n    if(!invokes[invokeHash].exists){\r\n      invokes[invokeHash].propose_height = block.number;\r\n      invokes[invokeHash].func_name = name;\r\n      invokes[invokeHash].invoke_id = id;\r\n      invokes[invokeHash].called = false;\r\n      invokes[invokeHash].processing = false;\r\n      invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));\r\n      invokes[invokeHash].exists = true;\r\n      invokes[invokeHash].vote_contract.addChoice(choiceHash);\r\n\r\n      invokes[invokeHash].vote_contract.recordVoteChoice(choiceHash, sender);\r\n      emit valid_function_sign(name, id, 1, block.number);\r\n      return false;\r\n    }\r\n    invoke_status storage invoke = invokes[invokeHash];\r\n    if(!invoke.vote_contract.isChoiceExist(choiceHash)){\r\n      invoke.vote_contract.addChoice(choiceHash);\r\n    }\r\n\r\n    uint valid_invoke_num = 0;\r\n    uint join_height = signer_join_height[sender];\r\n    require(join_height < invoke.propose_height, \"this proposal is already exist before you become a signer\");\r\n    invoke.vote_contract.recordVoteChoice(choiceHash, sender);\r\n    valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);\r\n\r\n    emit valid_function_sign(name, id, uint64(valid_invoke_num), invoke.propose_height);\r\n    if(invoke.called) return false;\r\n    if(valid_invoke_num < signer_number-number) return false;\r\n    invoke.processing = true;\r\n    return true;\r\n\r\n  }\r\n\r\n  function get_majority_number() private view returns(uint){\r\n    return signer_number/2 + 1;\r\n  }\r\n  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool){\r\n    //bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    uint minority = signer_number - get_majority_number();\r\n    if(!is_all_minus_sig(minority, id, name, hash, sender))\r\n      return false;\r\n    bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));\r\n    set_called(invokeHash);\r\n    return true;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    uint minority = signer_number - get_majority_number();\r\n    if(!is_all_minus_sig(minority, id, name, hash, msg.sender))\r\n      return ;\r\n    bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));\r\n    set_called(invokeHash);\r\n    _;\r\n  }\r\n\r\n  modifier is_all_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(0, id, name, hash, msg.sender)) return ;\r\n    bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));\r\n    set_called(invokeHash);\r\n    _;\r\n  }\r\n\r\n  function set_called(bytes32 hash) internal {\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(invoke.exists, \"no such function\");\r\n    require(!invoke.called, \"already called\");\r\n    require(invoke.processing, \"cannot call this separately\");\r\n    invoke.called = true;\r\n    invoke.processing = false;\r\n    emit function_called(invoke.func_name, invoke.invoke_id, invoke.propose_height);\r\n  }\r\n\r\n  function get_sig_status(uint64 id, string memory name) public view returns(uint propose_height, address vote_contract, bool called){\r\n    bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));\r\n    invoke_status storage invoke = invokes[invokeHash];\r\n    require(invoke.exists, \"no such sig\");\r\n    propose_height = invoke.propose_height;\r\n    vote_contract = address(invoke.vote_contract);\r\n    called = invoke.called;\r\n  }\r\n\r\n  function array_exist (address[] memory accounts, address p) private pure returns (bool){\r\n    for (uint i = 0; i< accounts.length;i++){\r\n      if (accounts[i]==p){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function reform_signers(uint64 id, address[] memory s)\r\n    public\r\n    only_signer\r\n    enough_signers(s)\r\n    is_majority_sig(id, \"reform_signers\"){\r\n    address[] memory old_signers = signers;\r\n    for(uint i = 0; i < s.length; i++){\r\n      if(array_exist(old_signers, s[i])){\r\n      }else{\r\n        signer_join_height[s[i]] = block.number;\r\n        liquid_delegate.setWeight(s[i], 1);\r\n      }\r\n    }\r\n    for(uint i = 0; i < old_signers.length; i++){\r\n      if(array_exist(s,old_signers[i])){\r\n      }else{\r\n        signer_join_height[old_signers[i]] = 0;\r\n        liquid_delegate.removeVoter(old_signers[i]);\r\n      }\r\n    }\r\n    signer_number = s.length;\r\n    signers = s;\r\n    emit signers_reformed(old_signers, signers);\r\n  }\r\n\r\n  function get_unused_invoke_id(string memory name) public view returns(uint64){\r\n    return used_invoke_ids[keccak256(abi.encodePacked(name, signers))] + 1;\r\n  }\r\n  function get_signers() public view returns(address[] memory){\r\n    return signers;\r\n  }\r\n\r\n  function set_democracy_no_majority(uint64 id, bool t) public only_signer\r\n    is_majority_sig(id, \"set_democracy_no_majority\"){\r\n      liquid_delegate.setNoMajority(t);\r\n  }\r\n\r\n\r\n}\r\n\r\ncontract LiquidMultiSigFactory{\r\n  event NewMultiSig(address addr, address[] signers);\r\n\r\n  function createMultiSig(address[] memory _signers, address _delegate_factory, address _vote_factory) public returns(address){\r\n    LiquidMultiSig ms = new LiquidMultiSig(_signers, _delegate_factory, _vote_factory);\r\n    ms.do_initialization();\r\n    emit NewMultiSig(address(ms), _signers);\r\n    return address(ms);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_signers\",\"type\":\"address[]\"},{\"name\":\"_delegate_factory\",\"type\":\"address\"},{\"name\":\"_vote_factory\",\"type\":\"address\"}],\"name\":\"createMultiSig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"NewMultiSig\",\"type\":\"event\"}]","ContractName":"LiquidMultiSigFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"AddressArray:0493163ff05664a1add5f87374ef78940ae33bc4","LicenseType":"MIT","SwarmSource":"bzzr://bcb1ca1c6a5c457dfe064b569a8aa73999b5bc908b5a2e9e19a5dd316e13e196"}]}