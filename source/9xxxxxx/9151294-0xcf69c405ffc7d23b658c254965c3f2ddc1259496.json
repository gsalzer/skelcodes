{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ©️ 2018 Galt•Project Society Construction and Terraforming Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka)\r\n *\r\n * Copyright ©️ 2018 Galt•Core Blockchain Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka) by\r\n * [Basic Agreement](ipfs/QmaCiXUmSrP16Gz8Jdzq6AJESY1EAANmmwha15uR3c1bsS)).\r\n * \r\n * 🌎 Galt Project is an international decentralized land and real estate property registry\r\n * governed by DAO (Decentralized autonomous organization) and self-governance platform for communities\r\n * of homeowners on Ethereum.\r\n * \r\n * 🏡 https://galtproject.io\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ChargesFee is Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  event SetFeeManager(address addr);\r\n  event SetFeeCollector(address addr);\r\n  event SetEthFee(uint256 ethFee);\r\n  event SetGaltFee(uint256 ethFee);\r\n  event WithdrawEth(address indexed to, uint256 amount);\r\n  event WithdrawErc20(address indexed to, address indexed tokenAddress, uint256 amount);\r\n  event WithdrawErc721(address indexed to, address indexed tokenAddress, uint256 tokenId);\r\n\r\n  uint256 public ethFee;\r\n  uint256 public galtFee;\r\n\r\n  address public feeManager;\r\n  address public feeCollector;\r\n\r\n  modifier onlyFeeManager() {\r\n    require(msg.sender == feeManager, \"ChargesFee: caller is not the feeManager\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyFeeCollector() {\r\n    require(msg.sender == feeCollector, \"ChargesFee: caller is not the feeCollector\");\r\n    _;\r\n  }\r\n\r\n  constructor(uint256 _ethFee, uint256 _galtFee) public {\r\n    ethFee = _ethFee;\r\n    galtFee = _galtFee;\r\n  }\r\n\r\n  // ABSTRACT\r\n\r\n  function _galtToken() internal view returns (IERC20);\r\n\r\n  // SETTERS\r\n\r\n  function setFeeManager(address _addr) external onlyOwner {\r\n    feeManager = _addr;\r\n\r\n    emit SetFeeManager(_addr);\r\n  }\r\n\r\n  function setFeeCollector(address _addr) external onlyOwner {\r\n    feeCollector = _addr;\r\n\r\n    emit SetFeeCollector(_addr);\r\n  }\r\n\r\n  function setEthFee(uint256 _ethFee) external onlyFeeManager {\r\n    ethFee = _ethFee;\r\n\r\n    emit SetEthFee(_ethFee);\r\n  }\r\n\r\n  function setGaltFee(uint256 _galtFee) external onlyFeeManager {\r\n    galtFee = _galtFee;\r\n\r\n    emit SetGaltFee(_galtFee);\r\n  }\r\n\r\n  // WITHDRAWERS\r\n\r\n  function withdrawErc20(address _tokenAddress, address _to) external onlyFeeCollector {\r\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n\r\n    IERC20(_tokenAddress).transfer(_to, balance);\r\n\r\n    emit WithdrawErc20(_to, _tokenAddress, balance);\r\n  }\r\n\r\n  function withdrawErc721(address _tokenAddress, address _to, uint256 _tokenId) external onlyFeeCollector {\r\n    IERC721(_tokenAddress).transferFrom(address(this), _to, _tokenId);\r\n\r\n    emit WithdrawErc721(_to, _tokenAddress, _tokenId);\r\n  }\r\n\r\n  function withdrawEth(address payable _to) external onlyFeeCollector {\r\n    uint256 balance = address(this).balance;\r\n\r\n    _to.transfer(balance);\r\n\r\n    emit WithdrawEth(_to, balance);\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _acceptPayment() internal {\r\n    if (msg.value == 0) {\r\n      _galtToken().transferFrom(msg.sender, address(this), galtFee);\r\n    } else {\r\n      require(msg.value == ethFee, \"Fee and msg.value not equal\");\r\n    }\r\n  }\r\n}\r\n\r\ninterface IACL {\r\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\r\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\r\n}\r\n\r\ninterface IPPGlobalRegistry {\r\n  function setContract(bytes32 _key, address _value) external;\r\n\r\n  // GETTERS\r\n  function getContract(bytes32 _key) external view returns (address);\r\n  function getACL() external view returns (IACL);\r\n  function getGaltTokenAddress() external view returns (address);\r\n  function getPPTokenRegistryAddress() external view returns (address);\r\n  function getPPLockerRegistryAddress() external view returns (address);\r\n  function getPPMarketAddress() external view returns (address);\r\n}\r\n\r\ninterface IPPTokenController {\r\n  event Mint(address indexed to, uint256 indexed tokenId);\r\n  event SetGeoDataManager(address indexed geoDataManager);\r\n  event SetFeeManager(address indexed feeManager);\r\n  event SetFeeCollector(address indexed feeCollector);\r\n  event NewProposal(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId,\r\n    address indexed creator\r\n  );\r\n  event ProposalExecuted(uint256 indexed proposalId);\r\n  event ProposalExecutionFailed(uint256 indexed proposalId);\r\n  event ProposalApproval(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalRejection(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalCancellation(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event SetMinter(address indexed minter);\r\n  event SetBurner(address indexed burner);\r\n  event SetBurnTimeout(uint256 indexed tokenId, uint256 timeout);\r\n  event InitiateTokenBurn(uint256 indexed tokenId, uint256 timeoutAt);\r\n  event BurnTokenByTimeout(uint256 indexed tokenId);\r\n  event CancelTokenBurn(uint256 indexed tokenId);\r\n  event SetFee(bytes32 indexed key, uint256 value);\r\n  event WithdrawEth(address indexed to, uint256 amount);\r\n  event WithdrawErc20(address indexed to, address indexed tokenAddress, uint256 amount);\r\n\r\n  enum PropertyInitialSetupStage {\r\n    PENDING,\r\n    DETAILS,\r\n    DONE\r\n  }\r\n\r\n  function fees(bytes32) external view returns (uint256);\r\n  function setBurner(address _burner) external;\r\n  function setGeoDataManager(address _geoDataManager) external;\r\n  function setFeeManager(address _feeManager) external;\r\n  function setFeeCollector(address _feeCollector) external;\r\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external;\r\n  function setFee(bytes32 _key, uint256 _value) external;\r\n  function withdrawErc20(address _tokenAddress, address _to) external;\r\n  function withdrawEth(address payable _to) external;\r\n  function initiateTokenBurn(uint256 _tokenId) external;\r\n  function cancelTokenBurn(uint256 _tokenId) external;\r\n  function burnTokenByTimeout(uint256 _tokenId) external;\r\n  function propose(bytes calldata _data, string calldata _dataLink) external payable;\r\n  function approve(uint256 _proposalId) external;\r\n  function execute(uint256 _proposalId) external;\r\n  function fetchTokenId(bytes calldata _data) external pure returns (uint256 tokenId);\r\n  function() external payable;\r\n}\r\n\r\ninterface IPPTokenRegistry {\r\n  event AddToken(address indexed token, address indexed owener, address indexed factory);\r\n  event SetFactory(address factory);\r\n  event SetLockerRegistry(address lockerRegistry);\r\n\r\n  function tokenList(uint256 _index) external view returns (address);\r\n  function isValid(address _tokenContract) external view returns (bool);\r\n  function requireValidToken(address _token) external view;\r\n  function addToken(address _privatePropertyToken) external;\r\n  function getAllTokens() external view returns (address[] memory);\r\n}\r\n\r\ninterface IPPToken {\r\n  event SetBaseURI(string baseURI);\r\n  event SetContractDataLink(string indexed dataLink);\r\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\r\n  event SetController(address indexed controller);\r\n  event SetDetails(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetContour(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetHumanAddress(uint256 indexed tokenId, string humanAddress);\r\n  event SetDataLink(uint256 indexed tokenId, string dataLink);\r\n  event SetLedgerIdentifier(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexRootHash(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexStorageLink(uint256 indexed tokenId, string vertexStorageLink);\r\n  event SetArea(uint256 indexed tokenId, uint256 area, AreaSource areaSource);\r\n  event SetExtraData(bytes32 indexed key, bytes32 value);\r\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\r\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\r\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\r\n\r\n  enum AreaSource {\r\n    USER_INPUT,\r\n    CONTRACT\r\n  }\r\n\r\n  enum TokenType {\r\n    NULL,\r\n    LAND_PLOT,\r\n    BUILDING,\r\n    ROOM,\r\n    PACKAGE\r\n  }\r\n\r\n  struct Property {\r\n    uint256 setupStage;\r\n\r\n    // (LAND_PLOT,BUILDING,ROOM) Type cannot be changed after token creation\r\n    TokenType tokenType;\r\n    // Geohash5z (x,y,z)\r\n    uint256[] contour;\r\n    // Meters above the sea\r\n    int256 highestPoint;\r\n\r\n    // USER_INPUT or CONTRACT\r\n    AreaSource areaSource;\r\n    // Calculated either by contract (for land plots and buildings) or by manual input\r\n    // in sq. meters (1 sq. meter == 1 eth)\r\n    uint256 area;\r\n\r\n    bytes32 ledgerIdentifier;\r\n    string humanAddress;\r\n    string dataLink;\r\n\r\n    // Reserved for future use\r\n    bytes32 vertexRootHash;\r\n    string vertexStorageLink;\r\n  }\r\n\r\n  // PERMISSIONED METHODS\r\n\r\n  function setContractDataLink(string calldata _dataLink) external;\r\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\r\n  function setController(address payable _controller) external;\r\n  function setDetails(\r\n    uint256 _tokenId,\r\n    TokenType _tokenType,\r\n    AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink\r\n  )\r\n    external;\r\n\r\n  function setContour(\r\n    uint256 _tokenId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external;\r\n\r\n  function setArea(uint256 _tokenId, uint256 _area, AreaSource _areaSource) external;\r\n  function setLedgerIdentifier(uint256 _tokenId, bytes32 _ledgerIdentifier) external;\r\n  function setDataLink(uint256 _tokenId, string calldata _dataLink) external;\r\n  function setVertexRootHash(uint256 _tokenId, bytes32 _vertexRootHash) external;\r\n  function setVertexStorageLink(uint256 _tokenId, string calldata _vertexStorageLink) external;\r\n\r\n  function incrementSetupStage(uint256 _tokenId) external;\r\n\r\n  function mint(address _to) external returns (uint256);\r\n  function burn(uint256 _tokenId) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  // GETTERS\r\n  function controller() external view returns (address payable);\r\n\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function exists(uint256 _tokenId) external view returns (bool);\r\n  function getType(uint256 _tokenId) external view returns (TokenType);\r\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\r\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\r\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\r\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\r\n  function getArea(uint256 _tokenId) external view returns (uint256);\r\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\r\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\r\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\r\n  function getVertexRootHash(uint256 _tokenId) external view returns (bytes32);\r\n  function getVertexStorageLink(uint256 _tokenId) external view returns (string memory);\r\n  function getSetupStage(uint256 _tokenId) external view returns (uint256);\r\n  function getDetails(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (\r\n      TokenType tokenType,\r\n      uint256[] memory contour,\r\n      int256 highestPoint,\r\n      AreaSource areaSource,\r\n      uint256 area,\r\n      bytes32 ledgerIdentifier,\r\n      string memory humanAddress,\r\n      string memory dataLink,\r\n      uint256 setupStage,\r\n      bytes32 vertexRootHash,\r\n      string memory vertexStorageLink\r\n    );\r\n}\r\n\r\ninterface IRA {\r\n  // ERC20 compatible\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  // ERC20 compatible\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  // Ping-Pong Handshake\r\n  function ping() external pure returns (bytes32);\r\n}\r\n\r\ninterface IPPLocker {\r\n  function deposit(IPPToken _tokenContract, uint256 _tokenId) external payable;\r\n  function withdraw() external;\r\n  function approveMint(IRA _tra) external;\r\n  function burn(IRA _tra) external;\r\n  function isMinted(address _tra) external view returns (bool);\r\n  function getTras() external view returns (address[] memory);\r\n  function getTrasCount() external view returns (uint256);\r\n  function isOwner() external view returns (bool);\r\n  function owner() external view returns(address);\r\n  function tokenId() external view returns(uint256);\r\n  function reputation() external view returns(uint256);\r\n  function tokenContract() external view returns(IPPToken);\r\n}\r\n\r\nlibrary ArraySet {\r\n  struct AddressSet {\r\n    address[] array;\r\n    mapping(address => uint256) map;\r\n    mapping(address => bool) exists;\r\n  }\r\n\r\n  struct Bytes32Set {\r\n    bytes32[] array;\r\n    mapping(bytes32 => uint256) map;\r\n    mapping(bytes32 => bool) exists;\r\n  }\r\n\r\n  // AddressSet\r\n  function add(AddressSet storage _set, address _v) internal {\r\n    require(_set.exists[_v] == false, \"Element already exists\");\r\n\r\n    _set.map[_v] = _set.array.length;\r\n    _set.exists[_v] = true;\r\n    _set.array.push(_v);\r\n  }\r\n\r\n  function addSilent(AddressSet storage _set, address _v) internal returns (bool) {\r\n    if (_set.exists[_v] == true) {\r\n      return false;\r\n    }\r\n\r\n    _set.map[_v] = _set.array.length;\r\n    _set.exists[_v] = true;\r\n    _set.array.push(_v);\r\n\r\n    return true;\r\n  }\r\n\r\n  function remove(AddressSet storage _set, address _v) internal {\r\n    require(_set.array.length > 0, \"Array is empty\");\r\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\r\n\r\n    _remove(_set, _v);\r\n  }\r\n\r\n  function removeSilent(AddressSet storage _set, address _v) internal returns (bool) {\r\n    if (_set.exists[_v] == false) {\r\n      return false;\r\n    }\r\n\r\n    _remove(_set, _v);\r\n    return true;\r\n  }\r\n\r\n  function _remove(AddressSet storage _set, address _v) internal {\r\n    uint256 lastElementIndex = _set.array.length - 1;\r\n    uint256 currentElementIndex = _set.map[_v];\r\n    address lastElement = _set.array[lastElementIndex];\r\n\r\n    _set.array[currentElementIndex] = lastElement;\r\n    delete _set.array[lastElementIndex];\r\n\r\n    _set.array.length = _set.array.length - 1;\r\n    delete _set.map[_v];\r\n    delete _set.exists[_v];\r\n    _set.map[lastElement] = currentElementIndex;\r\n  }\r\n\r\n  function clear(AddressSet storage _set) internal {\r\n    for (uint256 i = 0; i < _set.array.length; i++) {\r\n      address v = _set.array[i];\r\n      delete _set.map[v];\r\n      _set.exists[v] = false;\r\n    }\r\n\r\n    delete _set.array;\r\n  }\r\n\r\n  function has(AddressSet storage _set, address _v) internal view returns (bool) {\r\n    return _set.exists[_v];\r\n  }\r\n\r\n  function elements(AddressSet storage _set) internal view returns (address[] storage) {\r\n    return _set.array;\r\n  }\r\n\r\n  function size(AddressSet storage _set) internal view returns (uint256) {\r\n    return _set.array.length;\r\n  }\r\n\r\n  function isEmpty(AddressSet storage _set) internal view returns (bool) {\r\n    return _set.array.length == 0;\r\n  }\r\n\r\n  // Bytes32Set\r\n  function add(Bytes32Set storage _set, bytes32 _v) internal {\r\n    require(_set.exists[_v] == false, \"Element already exists\");\r\n\r\n    _add(_set, _v);\r\n  }\r\n\r\n  function addSilent(Bytes32Set storage _set, bytes32 _v) internal returns (bool) {\r\n    if (_set.exists[_v] == true) {\r\n      return false;\r\n    }\r\n\r\n    _add(_set, _v);\r\n\r\n    return true;\r\n  }\r\n\r\n  function _add(Bytes32Set storage _set, bytes32 _v) internal {\r\n    _set.map[_v] = _set.array.length;\r\n    _set.exists[_v] = true;\r\n    _set.array.push(_v);\r\n  }\r\n\r\n  function remove(Bytes32Set storage _set, bytes32 _v) internal {\r\n    require(_set.array.length > 0, \"Array is empty\");\r\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\r\n\r\n    _remove(_set, _v);\r\n  }\r\n\r\n  function removeSilent(Bytes32Set storage _set, bytes32 _v) internal returns (bool) {\r\n    if (_set.exists[_v] == false) {\r\n      return false;\r\n    }\r\n\r\n    _remove(_set, _v);\r\n    return true;\r\n  }\r\n\r\n  function _remove(Bytes32Set storage _set, bytes32 _v) internal {\r\n    uint256 lastElementIndex = _set.array.length - 1;\r\n    uint256 currentElementIndex = _set.map[_v];\r\n    bytes32 lastElement = _set.array[lastElementIndex];\r\n\r\n    _set.array[currentElementIndex] = lastElement;\r\n    delete _set.array[lastElementIndex];\r\n\r\n    _set.array.length = _set.array.length - 1;\r\n    delete _set.map[_v];\r\n    delete _set.exists[_v];\r\n    _set.map[lastElement] = currentElementIndex;\r\n  }\r\n\r\n  function clear(Bytes32Set storage _set) internal {\r\n    for (uint256 i = 0; i < _set.array.length; i++) {\r\n      _set.exists[_set.array[i]] = false;\r\n    }\r\n\r\n    delete _set.array;\r\n  }\r\n\r\n  function has(Bytes32Set storage _set, bytes32 _v) internal view returns (bool) {\r\n    return _set.exists[_v];\r\n  }\r\n\r\n  function elements(Bytes32Set storage _set) internal view returns (bytes32[] storage) {\r\n    return _set.array;\r\n  }\r\n\r\n  function size(Bytes32Set storage _set) internal view returns (uint256) {\r\n    return _set.array.length;\r\n  }\r\n\r\n  function isEmpty(Bytes32Set storage _set) internal view returns (bool) {\r\n    return _set.array.length == 0;\r\n  }\r\n\r\n  ///////////////////////////// Uint256Set /////////////////////////////////////////\r\n  struct Uint256Set {\r\n    uint256[] array;\r\n    mapping(uint256 => uint256) map;\r\n    mapping(uint256 => bool) exists;\r\n  }\r\n\r\n  function add(Uint256Set storage _set, uint256 _v) internal {\r\n    require(_set.exists[_v] == false, \"Element already exists\");\r\n\r\n    _add(_set, _v);\r\n  }\r\n\r\n  function addSilent(Uint256Set storage _set, uint256 _v) internal returns (bool) {\r\n    if (_set.exists[_v] == true) {\r\n      return false;\r\n    }\r\n\r\n    _add(_set, _v);\r\n\r\n    return true;\r\n  }\r\n\r\n  function _add(Uint256Set storage _set, uint256 _v) internal {\r\n    _set.map[_v] = _set.array.length;\r\n    _set.exists[_v] = true;\r\n    _set.array.push(_v);\r\n  }\r\n\r\n  function remove(Uint256Set storage _set, uint256 _v) internal {\r\n    require(_set.array.length > 0, \"Array is empty\");\r\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\r\n\r\n    _remove(_set, _v);\r\n  }\r\n\r\n  function removeSilent(Uint256Set storage _set, uint256 _v) internal returns (bool) {\r\n    if (_set.exists[_v] == false) {\r\n      return false;\r\n    }\r\n\r\n    _remove(_set, _v);\r\n    return true;\r\n  }\r\n\r\n  function _remove(Uint256Set storage _set, uint256 _v) internal {\r\n    uint256 lastElementIndex = _set.array.length - 1;\r\n    uint256 currentElementIndex = _set.map[_v];\r\n    uint256 lastElement = _set.array[lastElementIndex];\r\n\r\n    _set.array[currentElementIndex] = lastElement;\r\n    delete _set.array[lastElementIndex];\r\n\r\n    _set.array.length = _set.array.length - 1;\r\n    delete _set.map[_v];\r\n    delete _set.exists[_v];\r\n    _set.map[lastElement] = currentElementIndex;\r\n  }\r\n\r\n  function clear(Uint256Set storage _set) internal {\r\n    for (uint256 i = 0; i < _set.array.length; i++) {\r\n      _set.exists[_set.array[i]] = false;\r\n    }\r\n\r\n    delete _set.array;\r\n  }\r\n\r\n  function has(Uint256Set storage _set, uint256 _v) internal view returns (bool) {\r\n    return _set.exists[_v];\r\n  }\r\n\r\n  function elements(Uint256Set storage _set) internal view returns (uint256[] storage) {\r\n    return _set.array;\r\n  }\r\n\r\n  function size(Uint256Set storage _set) internal view returns (uint256) {\r\n    return _set.array.length;\r\n  }\r\n\r\n  function isEmpty(Uint256Set storage _set) internal view returns (bool) {\r\n    return _set.array.length == 0;\r\n  }\r\n}\r\n\r\ncontract PPLocker is IPPLocker {\r\n  using ArraySet for ArraySet.AddressSet;\r\n\r\n  event ReputationMint(address indexed sra);\r\n  event ReputationBurn(address indexed sra);\r\n  event Deposit(uint256 reputation);\r\n  event Withdrawal(uint256 reputation);\r\n\r\n  bytes32 public constant LOCKER_TYPE = bytes32(\"REPUTATION\");\r\n  bytes32 public constant GALT_FEE_KEY = bytes32(\"LOCKER_GALT\");\r\n  bytes32 public constant ETH_FEE_KEY = bytes32(\"LOCKER_ETH\");\r\n\r\n  IPPGlobalRegistry public globalRegistry;\r\n\r\n  address public owner;\r\n  uint256 public tokenId;\r\n  uint256 public reputation;\r\n  bool public tokenDeposited;\r\n  IPPToken public tokenContract;\r\n\r\n  // Token Reputation Accounting Contracts\r\n  ArraySet.AddressSet internal traSet;\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Not the locker owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyValidTokenContract(IPPToken _tokenContract) {\r\n    IPPTokenRegistry(globalRegistry.getPPTokenRegistryAddress()).requireValidToken(address(_tokenContract));\r\n    _;\r\n  }\r\n\r\n  constructor(IPPGlobalRegistry _globalRegistry, address _owner) public {\r\n    globalRegistry = _globalRegistry;\r\n    owner = _owner;\r\n  }\r\n\r\n  function deposit(\r\n    IPPToken _tokenContract,\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    payable\r\n    onlyOwner\r\n    onlyValidTokenContract(_tokenContract)\r\n  {\r\n    require(!tokenDeposited, \"Token already deposited\");\r\n    _acceptPayment(_tokenContract);\r\n\r\n    tokenContract = _tokenContract;\r\n    tokenId = _tokenId;\r\n    reputation = _tokenContract.getArea(_tokenId);\r\n    tokenDeposited = true;\r\n\r\n    _tokenContract.transferFrom(msg.sender, address(this), _tokenId);\r\n\r\n    emit Deposit(reputation);\r\n  }\r\n\r\n  function _acceptPayment(IPPToken _tokenContract) internal {\r\n    if (msg.value == 0) {\r\n      uint256 fee = IPPTokenController(_tokenContract.controller()).fees(GALT_FEE_KEY);\r\n\r\n      IERC20 galtToken = IERC20(globalRegistry.getGaltTokenAddress());\r\n      galtToken.transferFrom(msg.sender, _tokenContract.controller(), fee);\r\n    } else {\r\n      uint256 fee = IPPTokenController(_tokenContract.controller()).fees(ETH_FEE_KEY);\r\n\r\n      require(msg.value == fee, \"Invalid ETH fee\");\r\n\r\n      _tokenContract.controller().transfer(msg.value);\r\n    }\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    require(tokenDeposited, \"Token not deposited\");\r\n    require(traSet.size() == 0, \"RAs counter should be 0\");\r\n\r\n    IPPToken previousTokenContract = tokenContract;\r\n    uint256 previousTokenId = tokenId;\r\n\r\n    tokenContract = IPPToken(address(0));\r\n    tokenId = 0;\r\n    reputation = 0;\r\n    tokenDeposited = false;\r\n\r\n    previousTokenContract.transferFrom(address(this), msg.sender, previousTokenId);\r\n\r\n    emit Withdrawal(reputation);\r\n  }\r\n\r\n  function approveMint(IRA _tra) external onlyOwner {\r\n    require(!traSet.has(address(_tra)), \"Already minted to this RA\");\r\n    require(_tra.ping() == bytes32(\"pong\"), \"Handshake failed\");\r\n\r\n    traSet.add(address(_tra));\r\n\r\n    emit ReputationMint(address(_tra));\r\n  }\r\n\r\n  function burn(IRA _tra) external onlyOwner {\r\n    require(traSet.has(address(_tra)), \"Not minted to the RA\");\r\n    require(_tra.balanceOf(msg.sender) == 0, \"Reputation not completely burned\");\r\n\r\n    traSet.remove(address(_tra));\r\n\r\n    emit ReputationBurn(address(_tra));\r\n  }\r\n\r\n  function cancelTokenBurn() external onlyOwner {\r\n    IPPTokenController(tokenContract.controller()).cancelTokenBurn(tokenId);\r\n  }\r\n\r\n  // GETTERS\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function getTokenInfo()\r\n    public\r\n    view\r\n    returns (\r\n      address _owner,\r\n      uint256 _tokenId,\r\n      uint256 _reputation,\r\n      bool _tokenDeposited,\r\n      address _tokenContract\r\n    )\r\n  {\r\n    return (\r\n      owner,\r\n      tokenId,\r\n      reputation,\r\n      tokenDeposited,\r\n      address(tokenContract)\r\n    );\r\n  }\r\n\r\n  function isMinted(address _tra) external view returns (bool) {\r\n    return traSet.has(_tra);\r\n  }\r\n\r\n  function getTras() external view returns (address[] memory) {\r\n    return traSet.elements();\r\n  }\r\n\r\n  function getTrasCount() external view returns (uint256) {\r\n    return traSet.size();\r\n  }\r\n}\r\n\r\ninterface IPPLockerRegistry {\r\n  event AddLocker(address indexed locker, address indexed owner, address indexed factory);\r\n  event SetFactory(address factory);\r\n\r\n  function addLocker(address _locker) external;\r\n  function requireValidLocker(address _locker) external view;\r\n  function isValid(address _locker) external view returns (bool);\r\n}\r\n\r\ncontract PPLockerFactory is Ownable, ChargesFee {\r\n  event NewPPLocker(address indexed owner, address locker);\r\n\r\n  IPPGlobalRegistry public globalRegistry;\r\n\r\n  constructor(\r\n    IPPGlobalRegistry _globalRegistry,\r\n    uint256 _ethFee,\r\n    uint256 _galtFee\r\n  )\r\n    public\r\n    ChargesFee(_ethFee, _galtFee)\r\n  {\r\n    globalRegistry = _globalRegistry;\r\n  }\r\n\r\n  function build() external payable returns (IPPLocker) {\r\n    _acceptPayment();\r\n\r\n    IPPLocker locker = new PPLocker(globalRegistry, msg.sender);\r\n\r\n    IPPLockerRegistry(globalRegistry.getPPLockerRegistryAddress()).addLocker(address(locker));\r\n\r\n    emit NewPPLocker(msg.sender, address(locker));\r\n\r\n    return IPPLocker(locker);\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _galtToken() internal view returns (IERC20) {\r\n    return IERC20(globalRegistry.getGaltTokenAddress());\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"_globalRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_galtFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"NewPPLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"}],\"name\":\"SetEthFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"}],\"name\":\"SetGaltFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawErc721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"build\",\"outputs\":[{\"internalType\":\"contract IPPLocker\",\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"galtFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalRegistry\",\"outputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"}],\"name\":\"setEthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_galtFee\",\"type\":\"uint256\"}],\"name\":\"setGaltFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawErc721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPLockerFactory","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000002d05d7dfbe60af0b4e55856820321253f04b379000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://b4254e1c1318ffa1851822079583a5888a3732016a440c04473aa80f3ed390f2"}]}