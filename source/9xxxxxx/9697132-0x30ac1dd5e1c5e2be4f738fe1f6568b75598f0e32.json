{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\nabstract contract ERC721 {\r\n    // Required methods\r\n    function totalSupply() virtual public view returns (uint256 total);\r\n    function balanceOf(address _owner) virtual public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) virtual external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) virtual external;\r\n    function transfer(address _to, uint256 _tokenId) virtual external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) virtual external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) virtual external view returns (bool);\r\n}\r\n\r\n\r\n\r\nabstract contract KittyCoreInterface is ERC721  {\r\n    uint256 public autoBirthFee;\r\n    address public saleAuction;\r\n    address public siringAuction;\r\n\r\n    function breedWithAuto(uint256 _matronId, uint256 _sireId) virtual public payable;\r\n    function createSaleAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) virtual external;\r\n    function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) virtual external;\r\n    function supportsInterface(bytes4 _interfaceID) virtual override external view returns (bool);\r\n    function approve(address _to, uint256 _tokenId) virtual override external;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AccessControl\r\n * @dev AccessControl contract sets roles and permissions\r\n * Owner - has full control over contract\r\n * Operator - has limited sub set of allowed actions over contract\r\n * Multiple operators can be added by owner to delegate a number of tasks in the contract\r\n */\r\ncontract AccessControl {\r\n  address payable public owner;\r\n  mapping(address => bool) public operators;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  event OperatorAdded(\r\n    address indexed operator\r\n  );\r\n\r\n  event OperatorRemoved(\r\n    address indexed operator\r\n  );\r\n\r\n  constructor(address payable _owner) public {\r\n    if(_owner == address(0)) {\r\n      owner = msg.sender;\r\n    } else {\r\n      owner = _owner;\r\n    }\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, 'Invalid sender');\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrOperator() {\r\n    require(msg.sender == owner || operators[msg.sender] == true, 'Invalid sender');\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address payable _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address payable _newOwner) internal {\r\n    require(_newOwner != address(0), 'Invalid address');\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function addOperator(address payable _operator) public onlyOwner {\r\n    require(operators[_operator] != true, 'Operator already exists');\r\n    operators[_operator] = true;\r\n\r\n    emit OperatorAdded(_operator);\r\n  }\r\n\r\n  function removeOperator(address payable _operator) public onlyOwner {\r\n    require(operators[_operator] == true, 'Operator already exists');\r\n    delete operators[_operator];\r\n\r\n    emit OperatorRemoved(_operator);\r\n  }\r\n\r\n  function destroy() public virtual onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address payable _recipient) public virtual onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev The Pausable contract can be paused and started by owner\r\n */\r\ncontract Pausable is AccessControl {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    constructor(address payable _owner) AccessControl(_owner) public {}\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"Contract should be paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract AuctionInterface {\r\n    function cancelAuction(uint256 _tokenId) virtual external;\r\n}\r\n\r\n\r\n\r\n /**\r\n * @title CKProxy\r\n * @dev CKProxy contract allows owner or operator to proxy call to CK Core contract to manage kitties owned by contract\r\n */\r\n\r\ncontract CKProxy is Pausable {\r\n  KittyCoreInterface public kittyCore;\r\n  AuctionInterface public saleAuction;\r\n  AuctionInterface public siringAuction;\r\n\r\nconstructor(address payable _owner, address _kittyCoreAddress) Pausable(_owner) public {\r\n    require(_kittyCoreAddress != address(0), 'Invalid Kitty Core contract address');\r\n    kittyCore = KittyCoreInterface(_kittyCoreAddress);\r\n    require(kittyCore.supportsInterface(0x9a20483d), 'Invalid Kitty Core contract');\r\n\r\n    saleAuction = AuctionInterface(kittyCore.saleAuction());\r\n    siringAuction = AuctionInterface(kittyCore.siringAuction());\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can transfer kitty\r\n   */\r\n  function transferKitty(address _to, uint256 _kittyId) external onlyOwnerOrOperator {\r\n    kittyCore.transfer(_to, _kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can transfer kittie in batched to optimize gas usage\r\n   */\r\n  function transferKittyBulk(address _to, uint256[] calldata _kittyIds) external onlyOwnerOrOperator {\r\n    for(uint256 i = 0; i < _kittyIds.length; i++) {\r\n      kittyCore.transfer(_to, _kittyIds[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can transferFrom kitty\r\n   */\r\n  function transferKittyFrom(address _from, address _to, uint256 _kittyId) external onlyOwnerOrOperator {\r\n    kittyCore.transferFrom(_from, _to, _kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner or operator an approve kitty\r\n   */\r\n  function approveKitty(address _to, uint256 _kittyId) external  onlyOwnerOrOperator {\r\n    kittyCore.approve(_to, _kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can start sales auction for kitty owned by contract\r\n   */\r\n  function createSaleAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external onlyOwnerOrOperator {\r\n    kittyCore.createSaleAuction(_kittyId, _startingPrice, _endingPrice, _duration);\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can cancel sales auction for kitty owned by contract\r\n   */\r\n  function cancelSaleAuction(uint256 _kittyId) external onlyOwnerOrOperator {\r\n    saleAuction.cancelAuction(_kittyId);\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can start siring auction for kitty owned by contract\r\n   */\r\n  function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external onlyOwnerOrOperator {\r\n    kittyCore.createSiringAuction(_kittyId, _startingPrice, _endingPrice, _duration);\r\n  }\r\n\r\n  /**\r\n   * Owner or operator can cancel siring auction for kitty owned by contract\r\n   */\r\n  function cancelSiringAuction(uint256 _kittyId) external onlyOwnerOrOperator {\r\n    siringAuction.cancelAuction(_kittyId);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SimpleSiring\r\n * @dev Simple siring contract allows dedicated operator to create siring auctions on behalf of owner, while owner retains control over kitties.\r\n * Breeder gets reward per each successful auction creation and share of successful sales. Breeder can create auctions when contract is not paused.\r\n * Owner should transfer kitties to contact to breeding starts and withdraw afterwards.\r\n * Funds transfered directly to the contract can be used for paying breeder's fee, but owner found be able to withdraw only his share from the contract\r\n * Breeder can only create auctions for kitties specified by owner (unless unverified auctions are allowed by owner) and owned by contract\r\n * Breeder can only withdraw its share of funds and cannot transfer kitties.\r\n */\r\n\r\ncontract SimpleSiring is CKProxy {\r\n    address payable public breeder;\r\n    uint256 public breederReward;\r\n    uint256 public originalBreederReward;\r\n    uint256 public breederCut;\r\n    uint256 public breederSharesWithdrawn;\r\n    uint256 public ownerSharesWithdrawn;\r\n    uint256 public ownerVaultBalance;\r\n    bool public allowUnverifiedAuctions;\r\n\r\n    struct Auction {\r\n      uint128 startingPrice;\r\n      uint128 endingPrice;\r\n      uint64 duration;\r\n    }\r\n    mapping(uint256 => Auction) public auctions;\r\n    Auction public defaultAuction;\r\n\r\n    event BreederRewardChange(\r\n        uint256 oldBreederReward,\r\n        uint256 newBreederReward\r\n    );\r\n    event AuctionSet(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration, bool isDefault);\r\n    event AuctionReset(uint256 tokenId, bool isDefault);\r\n    event AuctionStarted(address breeder, uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 reward);\r\n    event FundsWithdrawn(address receiver, uint256 amount);\r\n\r\n    constructor(\r\n        address payable _owner,\r\n        address payable _breeder,\r\n        address _kittyCoreAddress,\r\n        uint256 _breederReward,\r\n        uint256 _breederCut\r\n    ) public CKProxy(_owner, _kittyCoreAddress) {\r\n        require(_breeder != address(0), \"Invalid breeder address\");\r\n        require(_breederCut < 10000, \"Invalid breeder cut\");\r\n        breeder = _breeder;\r\n        breederReward = _breederReward;\r\n        originalBreederReward = _breederReward;\r\n        breederCut = _breederCut;\r\n    }\r\n\r\n    /**\r\n    * Owner or breeder can change breeder's reward if needed.\r\n    * Breeder can lower reward to make more attractive offer, it cannot set more than was originally agreed.\r\n    * Owner can increase reward to motivate breeder to breed during high gas price, it cannot set less than was set by breeder.\r\n    */\r\n    function setBreederReward(uint256 _breederReward) external {\r\n        require(msg.sender == breeder || msg.sender == owner, \"Invalid sender\");\r\n\r\n        if (msg.sender == owner) {\r\n            require(\r\n                _breederReward >= originalBreederReward ||\r\n                    _breederReward > breederReward,\r\n                \"Reward value is less than required\"\r\n            );\r\n        } else if (msg.sender == breeder) {\r\n            require(\r\n                _breederReward <= originalBreederReward,\r\n                \"Reward value is more than original\"\r\n            );\r\n        }\r\n\r\n        emit BreederRewardChange(breederReward, _breederReward);\r\n        breederReward = _breederReward;\r\n    }\r\n\r\n    function _totalSharedBalance() private view returns(uint256) {\r\n        uint256 currentBalance = address(this).balance;\r\n        require(currentBalance >= ownerVaultBalance, \"Invalid vault balance\");\r\n        return (currentBalance - ownerVaultBalance) + breederSharesWithdrawn + ownerSharesWithdrawn;\r\n    }\r\n\r\n    /**\r\n    * Owner's balance = owner's total share minus fund's withdrawn by owner\r\n    * Balance functions should not overflow as shares are less than total balance\r\n    * also total share are always greater than amount withdrawn\r\n    * rob = (b + bw + ow) * (1 - bc) - ow\r\n    */\r\n    function getOwnerShares() public view returns (uint256) {\r\n        uint256 totalBalance = _totalSharedBalance();\r\n        uint256 ownerShare = totalBalance * (10000 - breederCut) / 10000;\r\n        uint256 remainingBalance = ownerShare - ownerSharesWithdrawn;\r\n        return remainingBalance;\r\n    }\r\n\r\n    /**\r\n    * Breeder's balance = breeder's total share minus fund's withdrawn by breeder\r\n    * Balance functions should not overflow as shares are less than total balance\r\n    * also total share are always greater than amount withdrawn\r\n    * rbb = (b + bw + ow) * bc  - bw\r\n    */\r\n    function getBreederShares() public view returns (uint256) {\r\n        uint256 totalBalance = _totalSharedBalance();\r\n        uint256 breederShare = totalBalance * breederCut / 10000;\r\n        uint256 remainingBalance = breederShare - breederSharesWithdrawn;\r\n        return remainingBalance;\r\n    }\r\n\r\n    /**\r\n    * Owner can withdraw owned funds from contract\r\n    */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        require(amount <= (getOwnerShares() + ownerVaultBalance), \"Insufficient funds\");\r\n        if(ownerVaultBalance >= amount) {\r\n            // withdraw from vault\r\n            ownerVaultBalance -= amount;\r\n        } else if(ownerVaultBalance > 0) {\r\n            // withdraw from vault and shares\r\n            // amount is always greater than vault balance here\r\n            ownerSharesWithdrawn += (amount - ownerVaultBalance);\r\n            // withdraw rest from vault\r\n            ownerVaultBalance = 0;\r\n        } else {\r\n            // withdraw fully from shares if vault is empty\r\n            ownerSharesWithdrawn += amount;\r\n        }\r\n        emit FundsWithdrawn(owner, amount);\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    /**\r\n    * Breeder can withdraw owned funds from contract\r\n    */\r\n    function withdrawBreeder(uint256 amount) external {\r\n        require(msg.sender == breeder, \"Invalid sender\");\r\n        require(amount <= getBreederShares(), \"Insufficient funds\");\r\n        breederSharesWithdrawn += amount;\r\n        emit FundsWithdrawn(breeder, amount);\r\n        breeder.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * Owner can transfer funds to their vault\r\n     * Funds in vault are exclusively controlled by owner\r\n     * Breeder cannot withdraw funds from vault\r\n     * Funds in vault can be used to pay breeder's reward on successful auction creation\r\n     */\r\n    function transferToOwnerVault() payable external {\r\n        ownerVaultBalance += msg.value;\r\n    }\r\n\r\n    /**\r\n     * Contract can receive funds from CK auction\r\n     * All direct transfers to contract are shared between owner and breeder, if breederCut > 0\r\n     * If owner transfers funds directly to contract, there is no way they can withdraw 100% of transfered funds\r\n     * Owner should use transferToOwnerVault function to retain control of transfered funds\r\n     */\r\n    receive() payable external {\r\n    }\r\n\r\n    /**\r\n    * Owner can allow breeder to create auction without on-chain verification\r\n    */\r\n    function setAllowUnverifiedAuctions(bool _allow) external onlyOwner {\r\n        allowUnverifiedAuctions = _allow;\r\n    }\r\n    \r\n    /**\r\n     * Owner can set default auction parameters\r\n     * Breeder can create auction with default parameters for all kitties owned by contract, that do not have specific auction created\r\n     */\r\n    function setDefaultAuction(uint128 startingPrice, uint128 endingPrice, uint64 duration) external onlyOwner {\r\n      require(duration > 1 minutes, \"Invalid duration\");\r\n      defaultAuction.startingPrice = startingPrice;\r\n      defaultAuction.endingPrice = endingPrice;\r\n      defaultAuction.duration = duration;\r\n      emit AuctionSet(0, startingPrice, endingPrice, duration, true);\r\n    }\r\n\r\n    /**\r\n     * Owner can reset default auction parameters\r\n     * Breeder won't be able to create auctions with default parameters\r\n     */\r\n    function resetDefaultAuction() external onlyOwner {\r\n      defaultAuction.startingPrice = 0;\r\n      defaultAuction.endingPrice = 0;\r\n      defaultAuction.duration = 0;\r\n      emit AuctionReset(0, true);\r\n    }\r\n\r\n    /**\r\n     * Owner can set auction parameters for kitty owned by contract\r\n     * Breeder won't be able to create auction with other parameters for this kitty\r\n     */\r\n    function setAuction(uint256 kittyId, uint128 startingPrice, uint128 endingPrice, uint64 duration) external onlyOwner {\r\n      require(duration > 1 minutes, \"Invalid duration\");\r\n      require(kittyCore.ownerOf(kittyId) == address(this), 'Kitty not owned by contract');\r\n      Auction memory auction = Auction(\r\n        uint128(startingPrice),\r\n        uint128(endingPrice),\r\n        uint64(duration)\r\n      );\r\n\r\n      auctions[kittyId] = auction;\r\n      emit AuctionSet(\r\n        uint256(kittyId),\r\n        uint256(startingPrice),\r\n        uint256(endingPrice),\r\n        uint256(duration),\r\n        false\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Owner can set auction parameters for kitty owned by contract\r\n     * Breeder won't be able to create auction for kitty, unless there is default auction or unverified auctions allowed\r\n     */\r\n    function resetAuction(uint256 kittyId) external onlyOwner {\r\n      require(auctions[kittyId].duration > 0, \"Non-existing auction\");\r\n      delete auctions[kittyId];\r\n      emit AuctionReset(\r\n        kittyId,\r\n        false\r\n      );\r\n    }\r\n\r\n    /**\r\n     * return's auction for specified kitty, if exitsts, or default auction\r\n     */\r\n    function _getAuctionForKitty(uint256 _kittyId) private view returns(Auction storage) {\r\n        Auction storage auction = auctions[_kittyId];\r\n        if(auction.duration == 0 && defaultAuction.duration > 0) {\r\n            auction = defaultAuction;\r\n        }\r\n        return auction;\r\n    }\r\n\r\n    /**\r\n     * Owner can pay breeders reward either from their vault or shared balance\r\n     * Vault payments come first\r\n     */\r\n    function _ownerPays(uint256 amount) private returns(bool) {\r\n        bool paid = true;\r\n        if(ownerVaultBalance >= amount) {\r\n            // owner pays reward from vault\r\n            ownerVaultBalance -= amount;\r\n        } else if(getOwnerShares() >= amount) {\r\n            // owner pays from shared balance\r\n            ownerSharesWithdrawn += amount;\r\n        } else {\r\n            // cannot pay reward;\r\n            paid = false;\r\n        }\r\n        return paid;\r\n    }\r\n\r\n    /*\r\n    * Breeder can call this function to create an auction on behalf of owner\r\n    * Owner can call this function as well \r\n    */\r\n    function createSireAuction(uint256 _kittyId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(msg.sender == breeder || msg.sender == owner, \"Invalid sender\");\r\n\r\n        Auction storage auction = _getAuctionForKitty(_kittyId);\r\n        require(auction.duration > 0, \"No auction for kitty\");\r\n\r\n        kittyCore.createSiringAuction(\r\n            _kittyId,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration);\r\n\r\n        uint256 reward = 0;\r\n        // breeder can reenter but that's OK, since breeder is payed per successful breed\r\n        if (msg.sender == breeder) {\r\n            reward = breederReward;\r\n            require(_ownerPays(reward), \"No funds to pay reward\");\r\n            breeder.transfer(reward);\r\n        }\r\n\r\n        emit AuctionStarted(\r\n            msg.sender,\r\n            _kittyId,\r\n            auction.startingPrice,\r\n            auction.endingPrice,\r\n            auction.duration,\r\n            reward\r\n        );\r\n    }\r\n\r\n    /**\r\n     * If allowed, breeder can start auction without auction parameters verification\r\n     * Breeder will choose parameters off-chain in this case\r\n     * Owner can call this function as well \r\n     */\r\n    function createUnverifiedSireAuction(\r\n        uint256 _kittyId,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require((msg.sender == breeder && allowUnverifiedAuctions) ||\r\n            msg.sender == owner, \"Cannot create unverified auction\");\r\n\r\n       kittyCore.createSiringAuction(_kittyId, startingPrice, endingPrice, duration);\r\n\r\n        uint256 reward = 0;\r\n        // caller can reenter but that seems fine\r\n        if (msg.sender == breeder) {\r\n            reward = breederReward;\r\n            require(_ownerPays(reward), \"No funds to pay reward\");\r\n            breeder.transfer(reward);\r\n        }\r\n\r\n        emit AuctionStarted(\r\n            msg.sender,\r\n            _kittyId,\r\n            startingPrice,\r\n            endingPrice,\r\n            duration,\r\n            reward\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Owner can destroy contract only after breeder fully withdraws its share\r\n     */\r\n    function destroy() public override virtual onlyOwner {\r\n        require(getBreederShares() == 0, \"Breeder should withdraw first\");\r\n        require(kittyCore.balanceOf(address(this)) == 0, \"Contract has tokens\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    /**\r\n     * Owner can destroy contract only after breeder fully withdraws its share\r\n     */\r\n    function destroyAndSend(address payable _recipient) public override virtual onlyOwner {\r\n        require(getBreederShares() == 0, \"Breeder should withdraw first\");\r\n        require(kittyCore.balanceOf(address(this)) == 0, \"Contract has tokens\");\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SimpleSiringFactory is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    KittyCoreInterface public kittyCore;\r\n    uint256 public breederReward = 0.001 ether;\r\n    uint256 public breederCut = 625;\r\n    uint256 public commission = 0 wei;\r\n    uint256 public provisionFee;\r\n    mapping (bytes32 => address) public breederToContract;\r\n\r\n    event ContractCreated(address contractAddress, address breeder, address owner);\r\n    event ContractRemoved(address contractAddress);\r\n\r\n    constructor(address _kittyCoreAddress) Pausable(address(0)) public {\r\n        provisionFee = commission + breederReward;\r\n        kittyCore = KittyCoreInterface(_kittyCoreAddress);\r\n        require(kittyCore.supportsInterface(0x9a20483d), \"Invalid contract\");\r\n    }\r\n\r\n    /**\r\n     * Owner can adjust breeder reward\r\n     * Factory contract does not use breeder reward directly, but sets it to Breeding contracts during contract creation\r\n     * Existing contracts won't be affected by the change\r\n     */\r\n    function setBreederReward(uint256 _breederReward) external onlyOwner {\r\n        require(_breederReward > 0, \"Breeder reward must be greater than 0\");\r\n        breederReward = _breederReward;\r\n        provisionFee = uint256(commission).add(breederReward);\r\n    }\r\n\r\n    /**\r\n     * Owner can adjust breeder cut\r\n     * Factory contract does not use breeder cut directly, but sets it to Breeding contracts during contract creation\r\n     * Existing contracts won't be affected by the change\r\n     */\r\n    function setBreederCut(uint256 _breederCut) external onlyOwner {\r\n        require(_breederCut < 10000, \"Breeder reward must be less than 10000\");\r\n        breederCut = _breederCut;\r\n    }\r\n\r\n    /**\r\n     * Owner can set flat fee for contract creation\r\n     */\r\n    function setCommission(uint256 _commission) external onlyOwner {\r\n        commission = _commission;\r\n        provisionFee = uint256(commission).add(breederReward);\r\n    }\r\n\r\n    /**\r\n     * Just in case owner can change address of Kitty Core contract\r\n     * Factory contract does not user Kitty Core directly, but sets it to Breeding contracts during contract creation\r\n     * Existing contracts won't be affected by the change\r\n     */\r\n    function setKittyCore(address _kittyCore) external onlyOwner {\r\n        kittyCore = KittyCoreInterface(_kittyCore);\r\n        require(kittyCore.supportsInterface(0x9a20483d), \"Invalid contract\");\r\n    }\r\n\r\n    receive() payable external {\r\n    }\r\n\r\n    /**\r\n     * Owner can withdraw funds from contracts, if any\r\n     * Contract can only gets funds from contraction creation commission\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * Create new breeding contract for breeder. This function should be called by user during breeder enrollment process.\r\n     * Message value should be greater than breeder reward + commission. Value excess wil be transfered to created contract.\r\n     * Breeder reward amount is transfered to breeder's address so it can start sending transactions\r\n     * Comission amount stays in the contract\r\n     * When contract is created, provisioning script can get address its address from breederToContract mapping\r\n     */\r\n    function createContract(address payable _breederAddress) external payable whenNotPaused {\r\n        require(msg.value >= provisionFee, \"Invalid value\");\r\n\r\n        // owner's address and breeder's address should uniquely identify contract\r\n        // also we need to avoid situation when existing contract address is overwritten by enrolling breeder by same owner twice,\r\n        // or enrolling same breeder by different owner\r\n        bytes32 key = keccak256(abi.encodePacked(_breederAddress, msg.sender));\r\n        require(breederToContract[key] == address(0), \"Breeder already enrolled\");\r\n\r\n        //transfer value excess to new contract, owner can widthdraw later or use it for breeding\r\n        uint256 excess = uint256(msg.value).sub(provisionFee);\r\n        SimpleSiring newContract = new SimpleSiring(msg.sender, _breederAddress, address(kittyCore), breederReward, breederCut);\r\n\r\n        breederToContract[key] = address(newContract);\r\n        if(excess > 0) {\r\n            newContract.transferToOwnerVault.value(excess)();\r\n        }\r\n\r\n        //transfer 1st breeder reward to breeder\r\n        _breederAddress.transfer(breederReward);\r\n\r\n        emit ContractCreated(address(newContract), _breederAddress, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * In most cases it does not make sense to delete contract's address. If needed it can be done by owner of factory contract.\r\n     * This will not destroy breeding contract, just remove it address from the mapping, so user can deploy new contract for same breeder\r\n     */\r\n    function removeContract(address _breederAddress, address _ownerAddress) external onlyOwner {\r\n        bytes32 key = keccak256(abi.encodePacked(_breederAddress, _ownerAddress));\r\n        address contractAddress = breederToContract[key];\r\n        require(contractAddress != address(0), \"Breeder not enrolled\");\r\n        delete breederToContract[key];\r\n\r\n        emit ContractRemoved(contractAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kittyCoreAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"breeder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breederCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breederReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"breederToContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_breederAddress\",\"type\":\"address\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kittyCore\",\"outputs\":[{\"internalType\":\"contract KittyCoreInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provisionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_breederAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_breederCut\",\"type\":\"uint256\"}],\"name\":\"setBreederCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_breederReward\",\"type\":\"uint256\"}],\"name\":\"setBreederReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kittyCore\",\"type\":\"address\"}],\"name\":\"setKittyCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SimpleSiringFactory","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d","Library":"","LicenseType":"None","SwarmSource":"ipfs://25bd329d709ca095891a5d747facaf5d58ef95fd082080ee549e1c5ca9374bb2"}]}