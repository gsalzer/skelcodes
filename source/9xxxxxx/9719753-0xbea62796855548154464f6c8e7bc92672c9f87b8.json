{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n// deployed at 0xBea62796855548154464F6C8E7BC92672C9F87b8\r\n\r\n// @title ShareToken\r\n// @notice Shares all ETH received by the contract with token holders.\r\n// Example: If Alice was holding 5% of all ShareToken during a time when the contract received 100 ETH, then\r\n// Alice gets 5 ETH.\r\n// @dev This contract is a modification of OpenZeppelin's ERC20Detailed v2.3.0.\r\n// SECURITY: We have removed the _mint and _burn functions and made the _totalSupply constant to prevent multiple\r\n// security vulnerabilities related to improper accounting of dividends.\r\n// SECURITY: We have added new functionality to track dividends that modifies the _transfer function.\r\ncontract ShareToken {\r\n    using SafeMath for uint256;\r\n\r\n    // ======\r\n    // EVENTS\r\n    // ======\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event DividendWithdrawal(address indexed account, uint256 amount);\r\n\r\n    event Announce(string message);\r\n\r\n    // ==========\r\n    // CONSTANTS\r\n    // ==========\r\n\r\n    string  constant private _name = \"Shares\";\r\n\r\n    string  constant private _symbol = \"SHARE\";\r\n\r\n    uint8   constant private _decimals = 18;\r\n\r\n    uint256 constant private _totalSupply = 1e8 * (10 ** uint256(_decimals));\r\n\r\n    address constant private _speaker = 0x13f194f9141325c3C8c25b36772Ee5CF35c2ef3a;\r\n\r\n    // =========\r\n    // VARIABLES\r\n    // =========\r\n\r\n    struct Dividend {\r\n        uint256 checkpoint; // total contract income when the Dividend was last updated\r\n        uint256 dividendBalance; // dividend balance when the Dividend was last updated\r\n    }\r\n\r\n    uint256 private _totalEthWithdrawals; // total amount of ETH that has exited this contract\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => Dividend) private _dividends;\r\n\r\n    // ========================\r\n    // FALLBACK AND CONSTRUCTOR\r\n    // ========================\r\n\r\n    function() external payable {}\r\n\r\n    constructor () public {\r\n        // assign initial supply to original _designers\r\n        _balances[0x6Da435A99877EB20b00DF4fD8Ea80A67Ecf39ADb] = _totalSupply.div(4);\r\n        emit Transfer(address(0), 0x6Da435A99877EB20b00DF4fD8Ea80A67Ecf39ADb, _totalSupply.div(4));\r\n\r\n        _balances[0xfcC65D8B75a902D0e25e968B003fcbAd4EeA9616] = _totalSupply.div(4);\r\n        emit Transfer(address(0), 0xfcC65D8B75a902D0e25e968B003fcbAd4EeA9616, _totalSupply.div(4));\r\n\r\n        _balances[0x036aF49114C79f3c87DaFe847dD2fF2e566cf7A9] = _totalSupply.div(4);\r\n        emit Transfer(address(0), 0x036aF49114C79f3c87DaFe847dD2fF2e566cf7A9, _totalSupply.div(4));\r\n\r\n        _balances[0x3504f5ea9E4AF3a31054Fb2Fe680Af65AAb92d74] = _totalSupply.div(4);\r\n        emit Transfer(address(0), 0x3504f5ea9E4AF3a31054Fb2Fe680Af65AAb92d74, _totalSupply.div(4));\r\n    }\r\n\r\n    // ============================\r\n    // PRIVATE / INTERNAL FUNCTIONS\r\n    // ============================\r\n\r\n    function _earnedSinceCheckpoint(address account) internal view returns (uint256) {\r\n        uint256 incomeSinceLastUpdate = totalIncome().sub(_dividends[account].checkpoint);\r\n        return incomeSinceLastUpdate.mul(_balances[account]).div(_totalSupply);\r\n    }\r\n\r\n    function _updateDividend(address account) internal {\r\n        _dividends[account].dividendBalance = _dividends[account].dividendBalance.add(_earnedSinceCheckpoint(account));\r\n        _dividends[account].checkpoint = totalIncome();\r\n    }\r\n   function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _updateDividend(sender);\r\n        _updateDividend(recipient);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    // SECURITY: This should be the only way to get ETH out of this contract.\r\n    function _withdrawDividends(address payable account, uint256 amount) internal {\r\n        _updateDividend(account);\r\n        _dividends[account].dividendBalance = _dividends[account].dividendBalance.sub(amount);\r\n        _totalEthWithdrawals = _totalEthWithdrawals.add(amount);\r\n\r\n        emit DividendWithdrawal(account, amount);\r\n        address(account).transfer(amount);\r\n    }\r\n\r\n    // =============================================\r\n    // EXTERNAL FUNCTIONS THAT MODIFY CONTRACT STATE\r\n    // =============================================\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function withdrawDividends(uint256 amount) external returns (bool) {\r\n        _withdrawDividends(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function announce(bytes memory b) public {\r\n        require(msg.sender == _speaker);\r\n        emit Announce(bytesToString(b));\r\n    }\r\n\r\n    function pay() external payable {}\r\n\r\n    // =======================\r\n    // VIEW / PURE FUNCTIONS\r\n    // =======================\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalEthWithdrawals() public view returns (uint256) {\r\n        return _totalEthWithdrawals;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function dividendBalanceOf(address account) public view returns (uint256) {\r\n        return _dividends[account].dividendBalance.add(_earnedSinceCheckpoint(account));\r\n    }\r\n\r\n    // @return The total amount of ETH this contract has ever received.\r\n    // @dev This is a non-decreasing function over time.\r\n    function totalIncome() public view returns (uint256) {\r\n        return address(this).balance.add(_totalEthWithdrawals);\r\n    }\r\n\r\n    function stringToBytes(string memory m) public pure returns (bytes memory) {\r\n        bytes memory b = abi.encode(m);\r\n        return b;\r\n    }\r\n\r\n    function bytesToString(bytes memory b) public pure returns (string memory) {\r\n        string memory s = abi.decode(b, (string));\r\n        return s;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Announce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"m\",\"type\":\"string\"}],\"name\":\"stringToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShareToken","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://5680f85c5dcb6dc848196f0e99074fc4f70912efaeaf8b57833057bf04e7471a"}]}