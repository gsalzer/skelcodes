{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n\r\ncontract ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() public view returns(uint);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n}\r\n\r\ncontract Kyber {\r\n    function getExpectedRate(address src, address dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract KyberProxy {\r\n    Kyber proxy;\r\n\r\n    constructor () public {\r\n        proxy = Kyber(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    }\r\n\r\n    function getRate(address src, address dst, uint256 srcQty) public view returns(uint256) {\r\n        uint256 rate;\r\n\r\n        (rate,) = proxy.getExpectedRate(src,dst,srcQty);\r\n        return rate;\r\n    }\r\n\r\n    function executeSwap(address srcToken, uint256 srcQty, address dstToken, address dstAddress) public returns(bool) {\r\n        bytes memory ret;\r\n        bytes memory data;\r\n        address sendTo;\r\n        uint256 rate;\r\n        bool success;\r\n        ERC20 token = ERC20(srcToken);\r\n\r\n        (rate,) = proxy.getExpectedRate(srcToken,dstToken,srcQty);\r\n\r\n        // Mitigate ERC20 Approve front-running attack, by initially setting\r\n        // allowance to 0\r\n        require(token.approve(address(proxy), 0));\r\n\r\n        // Set the spender's token allowance to tokenQty\r\n        require(token.approve(address(proxy), srcQty));\r\n\r\n        if (dstAddress == address(0))\r\n            sendTo = msg.sender;\r\n        else\r\n            sendTo = dstAddress;\r\n\r\n        data = abi.encodeWithSelector(\r\n            bytes4(keccak256(\"trade(address,uint256,address,address,uint256,uint256,address)\")),\r\n            srcToken,\r\n            srcQty,\r\n            dstToken,\r\n            sendTo,\r\n            uint(-1),\r\n            rate,\r\n            0\r\n        );\r\n        (success, ret) = address(proxy).delegatecall(data);\r\n        require(success);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"}],\"name\":\"executeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KyberProxy","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://40edb6c0edd98f300fe7686a9275e46d7989b011cf4426e3a0599e9f5c39365d"}]}