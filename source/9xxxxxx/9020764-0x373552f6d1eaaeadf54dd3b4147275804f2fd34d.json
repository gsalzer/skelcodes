{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n\r\ncontract LibOwnable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    \r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    \r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"INVALID_OWNER\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract LibWhitelist is LibOwnable {\r\n    mapping (address => bool) public whitelist;\r\n    address[] public allAddresses;\r\n\r\n    event AddressAdded(address indexed adr);\r\n    event AddressRemoved(address indexed adr);\r\n\r\n    \r\n    modifier onlyAddressInWhitelist {\r\n        require(whitelist[msg.sender], \"SENDER_NOT_IN_WHITELIST_ERROR\");\r\n        _;\r\n    }\r\n\r\n    \r\n    \r\n    function addAddress(address adr) external onlyOwner {\r\n        emit AddressAdded(adr);\r\n        whitelist[adr] = true;\r\n        allAddresses.push(adr);\r\n    }\r\n\r\n    \r\n    \r\n    function removeAddress(address adr) external onlyOwner {\r\n        emit AddressRemoved(adr);\r\n        delete whitelist[adr];\r\n        for(uint i = 0; i < allAddresses.length; i++){\r\n            if(allAddresses[i] == adr) {\r\n                allAddresses[i] = allAddresses[allAddresses.length - 1];\r\n                allAddresses.length -= 1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function getAllAddresses() external view returns (address[] memory) {\r\n        return allAddresses;\r\n    }\r\n}\r\n\r\ncontract IMarketContractPool {\r\n    function mintPositionTokens(\r\n        address marketContractAddress,\r\n        uint qtyToMint,\r\n        bool isAttemptToPayInMKT\r\n    ) external;\r\n    function redeemPositionTokens(\r\n        address marketContractAddress,\r\n        uint qtyToRedeem\r\n    ) external;\r\n    function mktToken() external view returns (address);\r\n}\r\n\r\ninterface IMarketContract {\r\n    \r\n    function CONTRACT_NAME()\r\n        external\r\n        view\r\n        returns (string memory);\r\n    function COLLATERAL_TOKEN_ADDRESS()\r\n        external\r\n        view\r\n        returns (address);\r\n    function COLLATERAL_POOL_ADDRESS()\r\n        external\r\n        view\r\n        returns (address);\r\n    function PRICE_CAP()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function PRICE_FLOOR()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function PRICE_DECIMAL_PLACES()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function QTY_MULTIPLIER()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function COLLATERAL_PER_UNIT()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function COLLATERAL_TOKEN_FEE_PER_UNIT()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function MKT_TOKEN_FEE_PER_UNIT()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function EXPIRATION()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function SETTLEMENT_DELAY()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function LONG_POSITION_TOKEN()\r\n        external\r\n        view\r\n        returns (address);\r\n    function SHORT_POSITION_TOKEN()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    \r\n    function lastPrice()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function settlementPrice()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function settlementTimeStamp()\r\n        external\r\n        view\r\n        returns (uint);\r\n    function isSettled()\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    \r\n    function isPostSettlementDelay()\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        \r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \r\n        \r\n        \r\n        \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        \r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        \r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { \r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Proxy is LibOwnable, LibWhitelist {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    \r\n    address public collateralPoolAddress;\r\n\r\n    event Withdraw(address indexed contractAddress, address indexed to, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    function setCollateralPoolAddress(address _collateralPoolAddress) public onlyOwner {\r\n        collateralPoolAddress = _collateralPoolAddress;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function approveCollateralPool(address contractAddress, address spender, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        IMarketContract marketContract = IMarketContract(contractAddress);\r\n        \r\n        IERC20 collateralToken = IERC20(marketContract.COLLATERAL_TOKEN_ADDRESS());\r\n        if (collateralToken.allowance(address(this), spender) == 0 || amount == 0) {\r\n            collateralToken.safeApprove(spender, amount);\r\n        }\r\n        IERC20 longPositionToken = IERC20(marketContract.LONG_POSITION_TOKEN());\r\n        if (longPositionToken.allowance(address(this), spender) == 0 || amount == 0) {\r\n            longPositionToken.safeApprove(spender, amount);\r\n        }\r\n        IERC20 shortPositionToken = IERC20(marketContract.SHORT_POSITION_TOKEN());\r\n        if (shortPositionToken.allowance(address(this), spender) == 0 || amount == 0) {\r\n            shortPositionToken.safeApprove(spender, amount);\r\n        }\r\n    }\r\n\r\n    function withdrawCollateral(address contractAddress, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        IMarketContract marketContract = IMarketContract(contractAddress);\r\n        IERC20(marketContract.COLLATERAL_TOKEN_ADDRESS()).safeTransfer(msg.sender, amount);\r\n\r\n        emit Withdraw(contractAddress, msg.sender, amount);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function transfer(address token, address to, uint256 value)\r\n        external\r\n        onlyAddressInWhitelist\r\n    {\r\n        IERC20(token).safeTransfer(to, value);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function transferFrom(address token, address from, address to, uint256 value)\r\n        external\r\n        onlyAddressInWhitelist\r\n    {\r\n        IERC20(token).safeTransferFrom(from, to, value);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function mintPositionTokens(\r\n        address contractAddress,\r\n        uint256 qtyToMint\r\n    )\r\n        external\r\n        onlyAddressInWhitelist\r\n    {\r\n        IMarketContractPool marketContractPool;\r\n        bool isAttemptToPayInMKT;\r\n        if (collateralPoolAddress != address(0x0)) {\r\n            marketContractPool = IMarketContractPool(collateralPoolAddress);\r\n            isAttemptToPayInMKT = true;\r\n        } else {\r\n            IMarketContract marketContract = IMarketContract(contractAddress);\r\n            marketContractPool = IMarketContractPool(marketContract.COLLATERAL_POOL_ADDRESS());\r\n            isAttemptToPayInMKT = false;\r\n        }\r\n        marketContractPool.mintPositionTokens(contractAddress, qtyToMint, isAttemptToPayInMKT);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function redeemPositionTokens(\r\n        address contractAddress,\r\n        uint256 qtyToRedeem\r\n    )\r\n        external\r\n        onlyAddressInWhitelist\r\n    {\r\n        IMarketContractPool marketContractPool;\r\n        if (collateralPoolAddress != address(0x0)) {\r\n            marketContractPool = IMarketContractPool(collateralPoolAddress);\r\n        } else {\r\n            IMarketContract marketContract = IMarketContract(contractAddress);\r\n            marketContractPool = IMarketContractPool(marketContract.COLLATERAL_POOL_ADDRESS());\r\n        }\r\n        marketContractPool.redeemPositionTokens(contractAddress, qtyToRedeem);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"collateralPoolAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collateralPoolAddress\",\"type\":\"address\"}],\"name\":\"setCollateralPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"qtyToMint\",\"type\":\"uint256\"}],\"name\":\"mintPositionTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveCollateralPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"qtyToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPositionTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Proxy","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://dc801a3b113a83a7085ef8ba9e688887586290c90d502edecdb1acb3f7176201"}]}