{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\ncontract Underwriter {\r\n    using SafeMath for *;\r\n    \r\n    /**\r\n     * @dev calculates number of shares received given X eth\r\n     * @param _curEth current amount of eth in contract\r\n     * @param _newEth eth being spent\r\n     * @return amount of share purchased\r\n     */\r\n    function mintShare(uint256 _curEth, uint256 _newEth)\r\n        external\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(shares((_curEth).add(_newEth)).sub(shares(_curEth)));\r\n    }\r\n\r\n    /**\r\n     * @dev calculates amount of eth received if you sold X shares\r\n     * @param _curShares current amount of shares that exist\r\n     * @param _sellShares amount of shares you wish to sell\r\n     * @return amount of eth received\r\n     */\r\n    function burnShare(uint256 _curShares, uint256 _sellShares)\r\n        external\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curShares)).sub(eth(_curShares.sub(_sellShares))));\r\n    }\r\n\r\n    /**\r\n     * @dev calculates how many shares would exist with given an amount of eth\r\n     * @param _eth eth in contract\r\n     * @return number of shares that would exist\r\n     */\r\n    function shares(uint256 _eth)\r\n        public\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates how much eth would be in contract given a number of shares\r\n     * @param _shares number of shares minted\r\n     * @return eth that would exists\r\n     */\r\n    function eth(uint256 _shares)\r\n        public\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((78125000).mul(_shares.sq()).add(((149999843750000).mul(_shares.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) return 0;\r\n        c = a * b;\r\n        require(c / a == b);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x, 1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z), z)) / 2);\r\n        }\r\n    }\r\n\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    function pwr(uint256 x, uint256 y) internal pure returns(uint256 z) {\r\n        z = 1;\r\n        while(y != 0){\r\n            if(y % 2 == 1)\r\n                z = mul(z,x);\r\n            x = sq(x);\r\n            y = y / 2;\r\n        }\r\n        return z;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellShares\",\"type\":\"uint256\"}],\"name\":\"burnShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_curEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newEth\",\"type\":\"uint256\"}],\"name\":\"mintShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Underwriter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://41a5a727de2662f4117fece9392823d83180016dfdfb1abbd9debb5a4a608e62"}]}