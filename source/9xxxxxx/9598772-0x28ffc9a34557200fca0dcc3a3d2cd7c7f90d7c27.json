{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    // function imin(int x, int y) internal pure returns (int z) {\r\n    //     return x <= y ? x : y;\r\n    // }\r\n    // function imax(int x, int y) internal pure returns (int z) {\r\n    //     return x >= y ? x : y;\r\n    // }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    // uint constant RAY = 10 ** 27;\r\n\r\n    // function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, y), WAD / 2) / WAD;\r\n    // }\r\n    // function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, y), RAY / 2) / RAY;\r\n    // }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    // function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    //     z = add(mul(x, RAY), y / 2) / y;\r\n    // }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    // function rpow(uint _x, uint n) internal pure returns (uint z) {\r\n    //     uint x = _x;\r\n    //     z = n % 2 != 0 ? x : RAY;\r\n\r\n    //     for (n /= 2; n != 0; n /= 2) {\r\n    //         x = rmul(x, x);\r\n\r\n    //         if (n % 2 != 0) {\r\n    //             z = rmul(z, x);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * @dev x to the power of y power(base, exponent)\r\n     */\r\n    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\r\n        if (exponent == 0) {\r\n            return 1;\r\n        }\r\n        else if (exponent == 1) {\r\n            return base;\r\n        }\r\n        else if (base == 0 && exponent != 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 z = base;\r\n            for (uint256 i = 1; i < exponent; i++)\r\n                z = mul(z, base);\r\n            return z;\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITargetHandler {\r\n\tfunction setDispatcher (address _dispatcher) external;\r\n\tfunction deposit(uint256 _amountss) external returns (uint256); // token deposit\r\n\tfunction withdraw(uint256 _amounts) external returns (uint256);\r\n\tfunction withdrawProfit() external returns (uint256);\r\n\tfunction drainFunds() external returns (uint256);\r\n\tfunction getBalance() external view  returns (uint256);\r\n\tfunction getPrinciple() external view  returns (uint256);\r\n\tfunction getProfit() external view  returns (uint256);\r\n\tfunction getTargetAddress() external view  returns (address);\r\n\tfunction getToken() external view  returns (address);\r\n\tfunction getDispatcher() external view  returns (address);\r\n}\r\n\r\ninterface IDispatcher {\r\n\r\n\t// external function\r\n\tfunction trigger() external returns (bool);\r\n\tfunction withdrawProfit() external returns (bool);\r\n\tfunction drainFunds(uint256 _index) external returns (bool);\r\n\tfunction refundDispather(address _receiver) external returns (bool);\r\n\r\n\t// get function\r\n\tfunction getReserve() external view returns (uint256);\r\n\tfunction getReserveRatio() external view returns (uint256);\r\n\tfunction getPrinciple() external view returns (uint256);\r\n\tfunction getBalance() external view returns (uint256);\r\n\tfunction getProfit() external view returns (uint256);\r\n\tfunction getTHPrinciple(uint256 _index) external view returns (uint256);\r\n\tfunction getTHBalance(uint256 _index) external view returns (uint256);\r\n\tfunction getTHProfit(uint256 _index) external view returns (uint256);\r\n\tfunction getToken() external view returns (address);\r\n\tfunction getFund() external view returns (address);\r\n\tfunction getTHStructures() external view returns (uint256[] memory, address[] memory, address[] memory);\r\n\tfunction getTHData(uint256 _index) external view returns (uint256, uint256, uint256, uint256);\r\n\tfunction getTHCount() external view returns (uint256);\r\n\tfunction getTHAddress(uint256 _index) external view returns (address);\r\n\tfunction getTargetAddress(uint256 _index) external view returns (address);\r\n\tfunction getPropotion() external view returns (uint256[] memory);\r\n\tfunction getProfitBeneficiary() external view returns (address);\r\n\tfunction getReserveUpperLimit() external view returns (uint256);\r\n\tfunction getReserveLowerLimit() external view returns (uint256);\r\n\tfunction getExecuteUnit() external view returns (uint256);\r\n\r\n\t// Governmence Functions\r\n\tfunction setAimedPropotion(uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction addTargetHandler(address _targetHandlerAddr, uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction removeTargetHandler(address _targetHandlerAddr, uint256 _index, uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction setProfitBeneficiary(address _profitBeneficiary) external returns (bool);\r\n\tfunction setReserveLowerLimit(uint256 _number) external returns (bool);\r\n\tfunction setReserveUpperLimit(uint256 _number) external returns (bool);\r\n\tfunction setExecuteUnit(uint256 _number) external returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external view returns (uint);\r\n    function allowance(address _owner, address _spender) external view returns (uint);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface ILendFMe {\r\n\tfunction supply(address _token, uint _amounts) external returns (uint);\r\n\tfunction withdraw(address _token, uint _amounts) external returns (uint);\r\n\tfunction getSupplyBalance(address _user, address _token) external view returns (uint256);\r\n}\r\n\r\ncontract lendFMeHandler is ITargetHandler, DSAuth, DSMath {\r\n\r\n    event WithdrawFailed(uint256 _amounts);\r\n\r\n\taddress targetAddr;\r\n\taddress token;\r\n\taddress dispatcher;\r\n\tuint256 principle;\r\n\r\n\tconstructor (address _targetAddr, address _token) public {\r\n\t\ttargetAddr = _targetAddr;\r\n\t\ttoken = _token;\r\n\t\tIERC20(token).approve(_targetAddr, uint256(-1));\r\n\t}\r\n\r\n\r\n\tfunction setDispatcher(address _dispatcher) external auth {\r\n\t\tdispatcher = _dispatcher;\r\n\t}\r\n\r\n\t// token deposit\r\n\tfunction deposit(uint256 _amounts) external auth returns (uint256) {\r\n\t\tif (IERC20(token).balanceOf(address(this)) >= _amounts) {\r\n\t\t\tif(ILendFMe(targetAddr).supply(address(token), _amounts) == 0) {\r\n\t\t\t\tprinciple = add(principle, _amounts);\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tfunction withdraw(uint256 _amounts) external auth returns (uint256){\r\n\t\tif(_amounts != 0 && ILendFMe(targetAddr).withdraw(address(token), _amounts) != 0) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tIERC20(token).transfer(IDispatcher(dispatcher).getFund(), _amounts);\r\n\t\tprinciple = sub(principle, _amounts);\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction withdrawProfit() external auth returns (uint256){\r\n\t\tuint256 _amount = getProfit();\r\n\t\tif (_amount > 0 && ILendFMe(targetAddr).withdraw(address(token), _amount) == 0) {\r\n\t\t\tIERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(), _amount);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tfunction drainFunds() external auth returns (uint256) {\r\n\t\tuint256 amount = getBalance();\r\n\t\tif(amount > 0) {\r\n\t\t\tILendFMe(targetAddr).withdraw(address(token), uint256(-1));\r\n\t\t\tif(principle > 0){\r\n\t\t\t\tIERC20(token).transfer(IDispatcher(dispatcher).getFund(), principle);\r\n\t\t\t\tprinciple = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 profit = IERC20(token).balanceOf(address(this));\r\n\t\tif(profit > 0) {\r\n\t\t\tIERC20(token).transfer(IDispatcher(dispatcher).getProfitBeneficiary(), profit);\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction getBalance() public view returns (uint256) {\r\n\t\treturn ILendFMe(targetAddr).getSupplyBalance(address(this), address(token));\r\n\t}\r\n\r\n\tfunction getPrinciple() public view returns (uint256) {\r\n\t\treturn principle;\r\n\t}\r\n\r\n\tfunction getProfit() public view returns (uint256) {\r\n\t    uint256 _balance = getBalance();\r\n\t    uint256 _principle = getPrinciple();\r\n\t    uint256 _unit = IDispatcher(dispatcher).getExecuteUnit();\r\n\t    if (_balance < _principle) {\r\n\t        return 0;\r\n\t    } else {\r\n\t    \tuint256 _amounts = sub(_balance, _principle);\r\n\t    \t_amounts = _amounts / _unit * _unit;\r\n\t        return _amounts;\r\n\t    }\r\n\t}\r\n\r\n\tfunction getTargetAddress() public view returns (address) {\r\n\t\treturn targetAddr;\r\n\t}\r\n\r\n\tfunction getToken() external view returns (address) {\r\n\t\treturn token;\r\n\t}\r\n\r\n\tfunction getDispatcher() public view returns (address) {\r\n\t\treturn dispatcher;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"exponent\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrinciple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTargetAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drainFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dispatcher\",\"type\":\"address\"}],\"name\":\"setDispatcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_targetAddr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amounts\",\"type\":\"uint256\"}],\"name\":\"WithdrawFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"lendFMeHandler","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000eee3e3828a45f7601d5f54bf49bb01d1a9df5ea0000000000000000000000008e870d67f660d95d5be530380d0ec0bd388289e1","Library":"","LicenseType":"None","SwarmSource":"bzzr://0d321478376b4efc0ac7b1d8db6761b9329e9783ec820805296d1c101ceb6751"}]}