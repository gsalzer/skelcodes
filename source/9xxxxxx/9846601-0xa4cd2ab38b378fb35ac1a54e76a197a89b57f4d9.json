{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ManagerLike {\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n}\r\n\r\ninterface CdpsLike {\r\n    function getCdpsAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\r\n}\r\n\r\ninterface VatLike {\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n}\r\n\r\ninterface JugLike {\r\n    function ilks(bytes32) external view returns (uint, uint);\r\n    function base() external view returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function dsr() external view returns (uint);\r\n    function pie(address) external view returns (uint);\r\n    function chi() external view returns (uint);\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (PipLike, uint);\r\n}\r\n\r\ninterface PipLike {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external view returns (address);\r\n    function vat() external view returns (address);\r\n    function jug() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function getCdps() external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address) {\r\n        return 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\r\n    }\r\n\r\n    struct VaultData {\r\n        uint id;\r\n        address owner;\r\n        string colType;\r\n        uint collateral;\r\n        uint art;\r\n        uint debt;\r\n        uint liquidatedCol;\r\n        uint borrowRate;\r\n        uint colPrice;\r\n        uint liquidationRatio;\r\n        address vaultAddress;\r\n    }\r\n\r\n    struct ColInfo {\r\n        uint borrowRate;\r\n        uint price;\r\n        uint liquidationRatio;\r\n    }\r\n\r\n    /**\r\n     * @dev Convert String to bytes32.\r\n    */\r\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n        require(bytes(str).length != 0, \"String-Empty\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := mload(add(str, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Convert bytes32 to String.\r\n    */\r\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\r\n        bytes memory bytesArray = new bytes(32);\r\n        for (uint256 i; i < 32; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n            }\r\n        return string(bytesArray);\r\n    }\r\n\r\n    function getFee(bytes32 ilk) internal view returns (uint fee) {\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        (uint duty,) = JugLike(jug).ilks(ilk);\r\n        uint base = JugLike(jug).base();\r\n        fee = add(duty, base);\r\n    }\r\n\r\n    function getColPrice(bytes32 ilk) internal view returns (uint price) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        address vat = InstaMcdAddress(getMcdAddresses()).vat();\r\n        (, uint mat) = SpotLike(spot).ilks(ilk);\r\n        (,,uint spotPrice,,) = VatLike(vat).ilks(ilk);\r\n        price = rmul(mat, spotPrice);\r\n    }\r\n\r\n    function getColRatio(bytes32 ilk) internal view returns (uint ratio) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        (, ratio) = SpotLike(spot).ilks(ilk);\r\n    }\r\n}\r\n\r\n\r\ncontract VaultResolver is Helpers {\r\n    function getVaults(address owner) external view returns (VaultData[] memory) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address cdpManger = InstaMcdAddress(getMcdAddresses()).getCdps();\r\n\r\n        (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) = CdpsLike(cdpManger).getCdpsAsc(manager, owner);\r\n        VaultData[] memory vaults = new VaultData[](ids.length);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            (uint ink, uint art) = VatLike(ManagerLike(manager).vat()).urns(ilks[i], urns[i]);\r\n            (,uint rate, uint priceMargin,,) = VatLike(ManagerLike(manager).vat()).ilks(ilks[i]);\r\n            uint mat = getColRatio(ilks[i]);\r\n\r\n            vaults[i] = VaultData(\r\n                ids[i],\r\n                owner,\r\n                bytes32ToString(ilks[i]),\r\n                ink,\r\n                art,\r\n                rmul(art,rate),\r\n                VatLike(ManagerLike(manager).vat()).gem(ilks[i], urns[i]),\r\n                getFee(ilks[i]),\r\n                rmul(priceMargin, mat),\r\n                mat,\r\n                urns[i]\r\n            );\r\n        }\r\n        return vaults;\r\n    }\r\n\r\n    function getVaultById(uint id) external view returns (VaultData memory) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address urn = ManagerLike(manager).urns(id);\r\n        bytes32 ilk = ManagerLike(manager).ilks(id);\r\n\r\n        (uint ink, uint art) = VatLike(ManagerLike(manager).vat()).urns(ilk, urn);\r\n        (,uint rate, uint priceMargin,,) = VatLike(ManagerLike(manager).vat()).ilks(ilk);\r\n\r\n        uint mat = getColRatio(ilk);\r\n\r\n        uint feeRate = getFee(ilk);\r\n        VaultData memory vault = VaultData(\r\n            id,\r\n            ManagerLike(manager).owns(id),\r\n            bytes32ToString(ilk),\r\n            ink,\r\n            art,\r\n            rmul(art,rate),\r\n            VatLike(ManagerLike(manager).vat()).gem(ilk, urn),\r\n            feeRate,\r\n            rmul(priceMargin, mat),\r\n            mat,\r\n            urn\r\n        );\r\n        return vault;\r\n    }\r\n\r\n    function getColInfo(string[] memory name) public view returns (ColInfo[] memory) {\r\n        ColInfo[] memory colInfo = new ColInfo[](name.length);\r\n\r\n        for (uint i = 0; i < name.length; i++) {\r\n            bytes32 ilk = stringToBytes32(name[i]);\r\n            colInfo[i] = ColInfo(\r\n                getFee(ilk),\r\n                getColPrice(ilk),\r\n                getColRatio(ilk)\r\n            );\r\n        }\r\n        return colInfo;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DSRResolver is VaultResolver {\r\n    function getDsrRate() public view returns (uint dsr) {\r\n        address pot = InstaMcdAddress(getMcdAddresses()).pot();\r\n        dsr = PotLike(pot).dsr();\r\n    }\r\n\r\n    function getDaiPosition(address owner) external view returns (uint amt, uint dsr) {\r\n        address pot = InstaMcdAddress(getMcdAddresses()).pot();\r\n        uint chi = PotLike(pot).chi();\r\n        uint pie = PotLike(pot).pie(owner);\r\n        amt = rmul(pie,chi);\r\n        dsr = getDsrRate();\r\n    }\r\n}\r\n\r\n\r\ncontract InstaMakerResolver is DSRResolver {\r\n    string public constant name = \"Maker-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"}],\"name\":\"getColInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.ColInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDaiPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dsr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDsrRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dsr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcdAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getVaultById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"colType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct Helpers.VaultData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getVaults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"colType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaMakerResolver","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://8087672a6cc930d44978e6044748d367fd97edf9a94714ddbd7cec405c4b1956"}]}