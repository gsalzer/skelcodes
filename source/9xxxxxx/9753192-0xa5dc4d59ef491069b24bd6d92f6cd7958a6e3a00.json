{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/upgradable/OwnableUpgradable.sol\n\npragma solidity ^0.5.16;\n\n\ncontract OwnableUpgradable is Initializable {\n    address payable public owner;\n    address payable internal newOwnerCandidate;\n\n    // Initializer – Constructor for Upgradable contracts\n    function initialize() initializer public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address payable newOwner) public onlyOwner {\n        newOwnerCandidate = newOwner;\n    }\n\n    function acceptOwner() public {\n        require(msg.sender == newOwnerCandidate);\n        owner = newOwnerCandidate;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/utils/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/interfaces/TokenInterface.sol\n\npragma solidity ^0.5.16;\n\ninterface TokenInterface {\n    function decimals() external view returns (uint);\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\n// File: contracts/utils/SafeERC20.sol\n\npragma solidity ^0.5.16;\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(TokenInterface token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(TokenInterface token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(TokenInterface token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(TokenInterface token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(TokenInterface token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(TokenInterface token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/utils/UniversalERC20.sol\n\npragma solidity ^0.5.16;\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n\n\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for TokenInterface;\n\n    TokenInterface private constant ZERO_ADDRESS = TokenInterface(0x0000000000000000000000000000000000000000);\n    TokenInterface private constant ETH_ADDRESS = TokenInterface(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function universalTransfer(TokenInterface token, address to, uint256 amount) internal {\n        universalTransfer(token, to, amount, false);\n    }\n\n    function universalTransfer(TokenInterface token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            if (mayFail) {\n                return address(uint160(to)).send(amount);\n            } else {\n                address(uint160(to)).transfer(amount);\n                return true;\n            }\n        } else {\n            token.safeTransfer(to, amount);\n            return true;\n        }\n    }\n\n    function universalApprove(TokenInterface token, address to, uint256 amount) internal {\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(TokenInterface token, address from, address to, uint256 amount) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(uint256(msg.value).sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(TokenInterface token, address who) internal view returns (uint256) {\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n\n// File: contracts/upgradable/FundsMgrUpgradable.sol\n\npragma solidity ^0.5.16;\n\n\n\n\ncontract FundsMgrUpgradable is Initializable, OwnableUpgradable {\n    using UniversalERC20 for TokenInterface;\n\n    // Initializer – Constructor for Upgradable contracts\n    function initialize() initializer public {\n        OwnableUpgradable.initialize();  // Initialize Parent Contract\n    }\n\n    function withdraw(address token, uint256 amount) onlyOwner public  {\n        require(msg.sender == owner);\n\n        if (token == address(0x0)) {\n            owner.transfer(amount);\n        } else {\n            TokenInterface(token).universalTransfer(owner, amount);\n        }\n    }\n    function withdrawAll(address[] memory tokens) onlyOwner public  {\n        for(uint256 i = 0; i < tokens.length;i++) {\n            withdraw(tokens[i], TokenInterface(tokens[i]).universalBalanceOf(address(this)));\n        }\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/utils/DSMath.sol\n\npragma solidity ^0.5.0;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\n        z = add(mul(x, y), base / 2) / base;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }*/\n}\n\n// File: contracts/interfaces/DfFinanceMgrInterface.sol\n\npragma solidity ^0.5.16;\n\ninterface DfFinanceMgrInterface {\n    function setupCup(address cdpOwner, bytes32 cup, uint256 deposit, uint8 profitPercent, uint256 etherPrice, uint8 feeForBonusEther) external;\n}\n\n// File: contracts/interfaces/OtcInterface.sol\n\npragma solidity ^0.5.16;\n\n\ninterface OtcInterface {\n    // function getPayAmount(address, address, uint) public view returns (uint);\n    function buyAllAmount(address, uint, address pay_gem, uint) external returns (uint);\n    function getSellAmount(TokenInterface dest, TokenInterface src, uint256 srcAmount) external view returns (uint256);\n    function getBuyAmount(TokenInterface dest, TokenInterface src, uint256 srcAmount) external view returns (uint256);\n}\n\n// File: contracts/interfaces/PepInterface.sol\n\npragma solidity ^0.5.16;\n\ninterface PepInterface {\n    function peek() external view returns (bytes32, bool);\n    function read() external view returns (bytes32);\n}\n\n// File: contracts/interfaces/TubInterface.sol\n\npragma solidity ^0.5.16;\n\n\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function mat() external view returns (uint);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n    function pip() external view returns (PepInterface);\n    function ask(uint wad) external view returns (uint);\n}\n\n// File: contracts/interfaces/AffiliateProgramInterface.sol\n\npragma solidity ^0.5.16;\n\ncontract AffiliateProgram {\n    function addUserUseCode(address user, string memory code) public;\n    function getPartnerFromUser(address user) external view returns (address, uint8, uint256, uint256);\n    function levels(uint8 level) external view returns (uint16, uint256);\n    function addPartnerProfitUseAddress(address partner) external payable;\n}\n\n// File: contracts/DfFinanceMgrOpenCdp.sol\n\npragma solidity ^0.5.16;\n\n\n\n\n\n\n\n\n\n// **INTERFACES**\ninterface DfProxyBetInterface {\n    function insure(address beneficiary, bytes32 cup, uint256 amountSai) external;\n}\n\ncontract ProxyOneInchExchangeInterface {\n    function exchange(TokenInterface fromToken, uint256 amountFromToken, bytes memory _data) public;\n}\n\ncontract DfFinanceMgrOpenCdp is Initializable, DSMath, FundsMgrUpgradable {\n\n    mapping(address => bool) public allowedOtc;\n\n    TubInterface tub;\n    AffiliateProgram public aff;\n\n    // Fees\n    uint8 public inFee;\n    uint8 public currentFeeForBonusEther;\n\n    // Insurance\n    DfProxyBetInterface public proxyInsuranceBet;\n    uint256 public insuranceCoef;  // in percent\n\n    mapping(address => bool) public admins;\n    OtcInterface[] public allOtc;\n    DfFinanceMgrInterface public migrateToNewContract;\n    uint256 public maxAllowedExtractSaiPercent;\n    DfFinanceMgrInterface public dfManagerAddress;\n\n\n    TokenInterface private constant ETH_ADDRESS = TokenInterface(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n\n    // Initializer – Constructor for Upgradable contracts\n    function initialize() initializer public {\n        FundsMgrUpgradable.initialize();  // Initialize Parent Contract\n\n        tub = TubInterface(0x448a5065aeBB8E423F0896E6c5D525C040f59af3);  // MainNet SaiTub: 0x448a5065aeBB8E423F0896E6c5D525C040f59af3\n        inFee = 0;\n        currentFeeForBonusEther = 30;\n        maxAllowedExtractSaiPercent = 2;\n\n        if (tub.gem().allowance(address(this), address(tub)) != uint256(-1)) {\n            tub.gem().approve(address(tub), uint256(-1));\n        }\n\n        if (tub.skr().allowance(address(this), address(tub)) != uint256(-1)) {\n            tub.skr().approve(address(tub), uint256(-1));\n        }\n    }\n\n    // Admin functions\n    function setDfManagerAddress(address payable newAddress) onlyOwner public {\n        require(newAddress != address(0x0));\n\n        dfManagerAddress = DfFinanceMgrInterface(newAddress);\n\n        // разрешаем тратить нашему контракту общие эфиры\n        //if (tub.gem().allowance(address(this), address(dfManagerAddress)) != uint256(-1)) {\n        //    tub.gem().approve(address(dfManagerAddress), uint256(-1));\n        //}\n    }\n\n    function setDfProxyBetAddress(DfProxyBetInterface proxyBet, uint256 newInsuranceCoef) onlyOwner public {\n        require(address(proxyBet) != address(0) && newInsuranceCoef > 0 \n            || address(proxyBet) == address(0) && newInsuranceCoef == 0, \"Incorrect proxy address or insurance coefficient\");\n\n        proxyInsuranceBet = proxyBet;\n        insuranceCoef = newInsuranceCoef;  // in percent (5 == 5%)\n\n        // all sai of this contract approved to BetEthPrice Contract\n        tub.sai().approve(address(proxyBet), uint(-1));\n    }\n\n    function setAffProgram(address newAff) onlyOwner public {\n        aff = AffiliateProgram(newAff);\n    }\n\n    function changeMaxAllowedExtractSaiPercent(uint256 newPercent) onlyOwner public {\n        maxAllowedExtractSaiPercent = newPercent;\n    }\n\n    function setAdmin(address newAdmin, bool active) onlyOwner public {\n        admins[newAdmin] = active;\n    }\n\n    function changeOtc(OtcInterface _newOtc, bool allow) onlyOwner public {\n        allowedOtc[address(_newOtc)] = allow;\n    }\n\n    function changeFees(uint8 _inFee, uint8 _currentFeeForBonusEther) onlyOwner public {\n        require(_inFee <= 5);\n        require(_currentFeeForBonusEther < 100);\n        inFee = _inFee;\n        currentFeeForBonusEther = _currentFeeForBonusEther;\n    }\n\n    function priceETH() view public returns (uint256) {\n        return uint256(PepInterface(TubInterface(tub).pip()).read());\n    }\n\n    function addOtc(OtcInterface newOtc) onlyOwner public {\n        allOtc.push(newOtc);\n        allowedOtc[address(newOtc)] = true;\n    }\n\n    function removeOtc(OtcInterface otcToRemove) onlyOwner public {\n\n        for(uint256 i =0; i < allOtc.length;i++ ) {\n            if (allOtc[i] == otcToRemove) {\n                allowedOtc[address(otcToRemove)] = false;\n\n                allOtc[i] = allOtc[allOtc.length -1];\n                delete allOtc[allOtc.length - 1];\n                allOtc.length--;\n                break;\n            }\n        }\n    }\n\n    function caluclateAmountSaiFromEth(uint256 wad, uint256 rate) view public returns(uint256) {\n        uint256 price = priceETH();\n\n        return wmul(wmul(wdiv(wad, tub.ask(wad)), wad), price) * 100 / rate;\n    }\n\n    function exchange(TokenInterface fromToken, uint256 maxFromTokenAmount, TokenInterface toToken, uint256 minToTokenAmount, bytes memory _data) internal returns (uint256)\n    {\n        // Proxy call for avoid out of gas in fallback (because of .transfer())\n        ProxyOneInchExchangeInterface proxyEx = ProxyOneInchExchangeInterface(0x3fF9Cc22ef2bF6de5Fd2E78f511EDdF0813f6B36);\n\n        if (fromToken.allowance(address(this), address(proxyEx)) != uint256(-1)) {\n            fromToken.approve(address(proxyEx), uint256(-1));\n        }\n\n        uint256 fromTokenBalance = fromToken.universalBalanceOf(address(this));\n        uint256 toTokenBalance = toToken.universalBalanceOf(address(this));\n\n        // Proxy call for avoid out of gas in fallback (because of .transfer())\n        proxyEx.exchange(fromToken, maxFromTokenAmount, _data);\n\n        uint256 newBalanceToToken = toToken.universalBalanceOf(address(this));\n        require(fromToken.universalBalanceOf(address(this)) + maxFromTokenAmount >= fromTokenBalance);\n        require(newBalanceToToken >= toTokenBalance + minToTokenAmount);\n\n        return sub(newBalanceToToken, toTokenBalance); // how many tokens received\n    }\n\n    function openCdpAndDraw(uint256 saiAmount, uint256 ethAmount) internal returns(bytes32 cup)\n    {\n        cup = tub.open();\n\n        (address lad,,,) = tub.cups(cup);\n        require(lad == address(this), \"cup-not-owned\");\n\n        tub.gem().deposit.value(ethAmount)();\n\n        uint256 ink = rdiv(ethAmount, tub.per());\n        ink = rmul(ink, tub.per()) <= ethAmount ? ink : ink - 1;\n\n        tub.join(ink);\n\n        tub.lock(cup, ink);\n\n        tub.draw(cup, saiAmount);\n    }\n\n\n    function findBestOtc(address tokenPay, address tokenNeeded, uint256 amountNeeded) view public returns(OtcInterface bestOtc, uint256 bestAmount) {\n        uint256 index = allOtc.length;\n        bestOtc = allOtc[index - 1];\n        bestAmount = bestOtc.getBuyAmount(TokenInterface(tokenPay), TokenInterface(tokenNeeded), amountNeeded);\n        index--;\n        while (index > 0) {\n            uint256 amount = allOtc[index - 1].getBuyAmount(TokenInterface(tokenPay), TokenInterface(tokenNeeded), amountNeeded);\n            if (amount < bestAmount) {\n                bestAmount = amount;\n                bestOtc = allOtc[index - 1];\n            }\n            index--;\n        }\n    }\n\n    function dealWithPromo(address newOwner, uint256 coef, uint8 profitPercent, bytes memory data, string memory code, uint256 saiToBuyEther, uint8 ethType ) public payable returns(bytes32) {\n        aff.addUserUseCode(newOwner, code);\n        return _deal(newOwner, profitPercent, coef, msg.value, data, saiToBuyEther, ethType);\n    }\n\n    function deal(address newOwner, uint256 coef, uint8 profitPercent, bytes memory data, uint256 saiToBuyEther, uint8 ethType) public payable returns(bytes32) {\n        return _deal(newOwner, profitPercent, coef, msg.value, data, saiToBuyEther, ethType);\n    }\n\n    function dealViaOtc(address newOwner, uint256 coef, uint8 profitPercent, OtcInterface otc, uint256 maxSai) public payable returns(bytes32 cup) {\n        cup = _deal_otc(newOwner, coef, msg.value, otc, maxSai);\n\n        tub.give(cup, address(dfManagerAddress));\n        dfManagerAddress.setupCup(newOwner, cup, msg.value, profitPercent, priceETH(), currentFeeForBonusEther);\n    }\n\n    function _deal(address newOwner, uint8 profitPercent, uint256 coef, uint256 valueEth, bytes memory data, uint256 saiToBuyEther, uint8 ethType) internal returns(bytes32 cup)\n    {\n        if (newOwner == address(0x0)) newOwner = msg.sender;\n        require(coef >= 150 && coef <= 300); // TODO: replace coef >= 125\n\n        uint256 extraEth = valueEth * (coef - 100) / 100;\n\n        uint256 extractSai = saiToBuyEther * (100 + inFee + insuranceCoef) / 100;\n\n        // нужны ли эти проверки ?\n        uint256 rate = (caluclateAmountSaiFromEth(valueEth + extraEth, 100) * 100) / extractSai;\n        require(rate > 175);\n\n        // Извлекаем SAI\n        cup = openCdpAndDraw(extractSai, valueEth + extraEth);\n\n        // call DfProxyBet contract (and transferFrom sai)\n        if (address(proxyInsuranceBet) != address(0)) {\n            proxyInsuranceBet.insure(newOwner, cup, saiToBuyEther * insuranceCoef / 100);\n        }\n\n        exchange(tub.sai(), saiToBuyEther, ethType == 0 ? tub.gem() : ETH_ADDRESS, extraEth, data);\n\n        if (ethType == 0) tub.gem().withdraw(tub.gem().balanceOf(address(this)));\n\n        tub.give(cup, address(dfManagerAddress));\n        dfManagerAddress.setupCup(newOwner, cup, valueEth, profitPercent, wdiv(saiToBuyEther, extraEth), currentFeeForBonusEther);\n    }\n\n    function showmethemoney(uint256 amount) external {\n        require(msg.sender == address(dfManagerAddress));\n        address(msg.sender).transfer(amount); // send eth to friendly contract, it should return them in the same transaction\n    }\n\n    function _deal_otc(address newOwner, uint256 coef, uint256 valueEth, OtcInterface otc, uint256 maxSai) internal returns(bytes32 cup)\n    {\n        if (newOwner == address(0x0)) newOwner = msg.sender;\n        require(coef >= 150 && coef <= 300);\n\n        uint256 extraEth = valueEth * (coef - 100) / 100;\n\n        uint256 fee =  valueEth * inFee / 100; // inFee = 5%\n\n        if (maxSai == 0) {\n            maxSai = wmul(priceETH(), extraEth + fee) * (100 + maxAllowedExtractSaiPercent) / 100;\n        }\n\n        uint256 saiToBuyEther;\n        if (otc == OtcInterface(0x0)) {\n            (otc, saiToBuyEther) = findBestOtc(address(tub.sai()), address(tub.gem()), extraEth + fee);\n        } else {\n            require(allowedOtc[address(otc)]);\n            saiToBuyEther = otc.getBuyAmount(tub.sai(), tub.gem(), extraEth + fee);\n        }\n\n        if (tub.sai().allowance(address(this), address(otc)) != uint(-1)) {  // TODO: optimize\n            tub.sai().approve(address(otc), uint(-1));\n        }\n\n        // нужны ли эти проверки ?\n        uint256 rate = (caluclateAmountSaiFromEth(valueEth + extraEth, 100) * 100) / saiToBuyEther;\n        require(rate > 170);\n\n        require(saiToBuyEther <= maxSai);\n\n        // Извлекаем SAI\n        cup = openCdpAndDraw(saiToBuyEther, valueEth + extraEth);\n\n        uint256 balance = tub.gem().balanceOf(address(this));\n\n        otc.buyAllAmount(address(tub.gem()), extraEth, address(tub.sai()), saiToBuyEther);\n\n        uint256 newBalance = tub.gem().balanceOf(address(this));\n\n        require(newBalance >= balance + extraEth); // check that we got ether\n\n        tub.gem().withdraw(newBalance);\n    }\n\n    function() external payable {\n\n    }\n\n    uint256[50] private ______gap;\n}\n","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract OtcInterface\",\"name\":\"newOtc\",\"type\":\"address\"}],\"name\":\"addOtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aff\",\"outputs\":[{\"internalType\":\"contract AffiliateProgram\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOtc\",\"outputs\":[{\"internalType\":\"contract OtcInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedOtc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"caluclateAmountSaiFromEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_inFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_currentFeeForBonusEther\",\"type\":\"uint8\"}],\"name\":\"changeFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"changeMaxAllowedExtractSaiPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract OtcInterface\",\"name\":\"_newOtc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"changeOtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFeeForBonusEther\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coef\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"saiToBuyEther\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"ethType\",\"type\":\"uint8\"}],\"name\":\"deal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coef\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"contract OtcInterface\",\"name\":\"otc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSai\",\"type\":\"uint256\"}],\"name\":\"dealViaOtc\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coef\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"saiToBuyEther\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"ethType\",\"type\":\"uint8\"}],\"name\":\"dealWithPromo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfManagerAddress\",\"outputs\":[{\"internalType\":\"contract DfFinanceMgrInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenPay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenNeeded\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountNeeded\",\"type\":\"uint256\"}],\"name\":\"findBestOtc\",\"outputs\":[{\"internalType\":\"contract OtcInterface\",\"name\":\"bestOtc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bestAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllowedExtractSaiPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateToNewContract\",\"outputs\":[{\"internalType\":\"contract DfFinanceMgrInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyInsuranceBet\",\"outputs\":[{\"internalType\":\"contract DfProxyBetInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract OtcInterface\",\"name\":\"otcToRemove\",\"type\":\"address\"}],\"name\":\"removeOtc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAff\",\"type\":\"address\"}],\"name\":\"setAffProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDfManagerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract DfProxyBetInterface\",\"name\":\"proxyBet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newInsuranceCoef\",\"type\":\"uint256\"}],\"name\":\"setDfProxyBetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"showmethemoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfFinanceMgrOpenCdp","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}