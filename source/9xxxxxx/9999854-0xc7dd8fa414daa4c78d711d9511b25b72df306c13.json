{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor(address owner_) public {\r\n        owner = owner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public {\r\n        require(msg.sender == pendingOwner, \"onlyPendingOwner\");\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/NodeRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract NodeRegistry is Ownable {\r\n    event NodeUpdated(address indexed nodeAddress, string indexed url, uint indexed isNew, uint lastSeen);\r\n    event NodeRemoved(address indexed nodeAddress);\r\n    event NodeWhitelistApproved(address indexed nodeAddress);\r\n    event NodeWhitelistRejected(address indexed nodeAddress);\r\n    event RequiresWhitelistChanged(bool indexed value);\r\n    enum WhitelistState{\r\n        None,\r\n        Approved,\r\n        Rejected\r\n    }\r\n    struct Node{\r\n        address nodeAddress; // Ethereum address of the node (unique id)\r\n        string url; // Connection url, for example wss://node-domain-name:port\r\n        uint lastSeen; // what's the best way to store timestamps in smart contracts?\r\n    }\r\n    struct NodeLinkedListItem {\r\n        Node node;\r\n        address next; //linked list\r\n        address prev; //linked list\r\n    }\r\n\r\n    modifier whitelistOK() {\r\n        require(!requiresWhitelist || whitelist[msg.sender] == WhitelistState.Approved, \"notApproved\");\r\n        _;\r\n    }\r\n\r\n    uint64 public nodeCount;\r\n    address public tailNode;\r\n    address public headNode;\r\n    bool requiresWhitelist;\r\n    mapping(address => NodeLinkedListItem) nodes;\r\n    mapping(address => WhitelistState) whitelist;\r\n\r\n    constructor(address owner, bool requiresWhitelist_) Ownable(owner) public {\r\n        requiresWhitelist = requiresWhitelist_;\r\n    }\r\n\r\n    function getNode(address nodeAddress) public view returns (Node memory) {\r\n        NodeLinkedListItem storage n = nodes[nodeAddress];\r\n        return(n.node);\r\n    }\r\n \r\n    function createOrUpdateNode(address node, string memory url_) public onlyOwner {\r\n        _createOrUpdateNode(node, url_);\r\n    }\r\n\r\n    function createOrUpdateNodeSelf(string memory url_) public whitelistOK {\r\n        _createOrUpdateNode(msg.sender, url_);\r\n    }\r\n\r\n    function _createOrUpdateNode(address nodeAddress, string memory url_) internal {\r\n        NodeLinkedListItem storage n = nodes[nodeAddress];\r\n        uint isNew = 0;\r\n        if(n.node.lastSeen == 0){\r\n            isNew = 1;\r\n            nodes[nodeAddress] = NodeLinkedListItem({node: Node({nodeAddress: nodeAddress, url: url_, lastSeen: block.timestamp}), prev: tailNode, next: address(0)});\r\n            nodeCount++;\r\n            if(tailNode != address(0)){\r\n                NodeLinkedListItem storage prevNode = nodes[tailNode];\r\n                prevNode.next = nodeAddress;\r\n            }\r\n            if(headNode == address(0))\r\n                headNode = nodeAddress;\r\n            tailNode = nodeAddress;\r\n        }\r\n        else{\r\n            n.node.url = url_;\r\n            n.node.lastSeen = block.timestamp;\r\n        }\r\n        emit NodeUpdated(nodeAddress, n.node.url, isNew, n.node.lastSeen);\r\n    }\r\n\r\n    function removeNode(address nodeAddress) public onlyOwner {\r\n        _removeNode(nodeAddress);\r\n    }\r\n    function removeNodeSelf() public {\r\n        _removeNode(msg.sender);\r\n    }\r\n    function _removeNode(address nodeAddress) internal {\r\n        NodeLinkedListItem storage n = nodes[nodeAddress];\r\n        require(n.node.lastSeen != 0, \"notFound\");\r\n        if(n.prev != address(0)){\r\n            NodeLinkedListItem storage prevNode = nodes[n.prev];\r\n            prevNode.next = n.next;\r\n        }\r\n        if(n.next != address(0)){\r\n            NodeLinkedListItem storage nextNode = nodes[n.next];\r\n            nextNode.prev = n.prev;\r\n        }\r\n        nodeCount--;\r\n        if(nodeAddress == tailNode) {\r\n            NodeLinkedListItem storage tn = nodes[tailNode];\r\n            tailNode = tn.prev;\r\n        }\r\n        if(nodeAddress == headNode) {\r\n            NodeLinkedListItem storage hn = nodes[headNode];\r\n            headNode = hn.next;\r\n        }\r\n\r\n        delete nodes[nodeAddress];\r\n        emit NodeRemoved(nodeAddress);\r\n    }\r\n\r\n    function whitelistApproveNode(address nodeAddress) public onlyOwner {\r\n        whitelist[nodeAddress] = WhitelistState.Approved;\r\n        emit NodeWhitelistApproved(nodeAddress);\r\n    }\r\n    \r\n    function whitelistRejectNode(address nodeAddress) public onlyOwner {\r\n        whitelist[nodeAddress] = WhitelistState.Rejected;\r\n        emit NodeWhitelistRejected(nodeAddress);\r\n    }\r\n    \r\n    function kickOut(address nodeAddress) public onlyOwner {\r\n        whitelistRejectNode(nodeAddress);\r\n        removeNode(nodeAddress);\r\n    }\r\n\r\n    function setRequiresWhitelist(bool value) public onlyOwner {\r\n        requiresWhitelist = value;\r\n        emit RequiresWhitelistChanged(value);\r\n    }\r\n    /*\r\n        this function is O(N) because we need linked list functionality.\r\n\r\n        i=0 is first node\r\n    */\r\n    \r\n    function getNodeByNumber(uint i) public view returns (Node memory) {\r\n        require(i < nodeCount, \"getNthNode: n must be less than nodeCount\");\r\n        address currentNodeAddress = headNode;\r\n        NodeLinkedListItem storage n = nodes[currentNodeAddress];\r\n        for(uint nodeNum = 1; nodeNum <= i; nodeNum++){\r\n            currentNodeAddress = n.next;\r\n            n = nodes[currentNodeAddress];\r\n        }\r\n        return n.node;\r\n    }\r\n\r\n    function getNodes() public view returns (Node[] memory) {\r\n        Node[] memory nodeArray = new Node[](nodeCount);\r\n        address currentNodeAddress = headNode;\r\n        for(uint nodeNum = 0; nodeNum < nodeCount; nodeNum++){\r\n            NodeLinkedListItem storage n = nodes[currentNodeAddress];\r\n            nodeArray[nodeNum] = n.node;\r\n            currentNodeAddress = n.next;\r\n        }\r\n        return nodeArray;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"requiresWhitelist_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"NodeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"isNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastSeen\",\"type\":\"uint256\"}],\"name\":\"NodeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"NodeWhitelistApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"NodeWhitelistRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RequiresWhitelistChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url_\",\"type\":\"string\"}],\"name\":\"createOrUpdateNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url_\",\"type\":\"string\"}],\"name\":\"createOrUpdateNodeSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNode\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastSeen\",\"type\":\"uint256\"}],\"internalType\":\"struct NodeRegistry.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getNodeByNumber\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastSeen\",\"type\":\"uint256\"}],\"internalType\":\"struct NodeRegistry.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastSeen\",\"type\":\"uint256\"}],\"internalType\":\"struct NodeRegistry.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"kickOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeNodeSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRequiresWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tailNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"whitelistApproveNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"whitelistRejectNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NodeRegistry","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000eb3977fcdf4254e34e89b2329ed9be7ebbeec9b80000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa3af8648dbf137736094395adb1380dffe4e32b309cb1963a91a7fa00e5026c"}]}