{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts\\utility\\interfaces\\IOwned.sol\n\npragma solidity 0.4.26;\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {this;}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n// File: contracts\\utility\\Owned.sol\n\npragma solidity 0.4.26;\r\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      * \r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      * \r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\n\n// File: contracts\\utility\\Utils.sol\n\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n      * constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n}\n\n// File: contracts\\utility\\interfaces\\IContractRegistry.sol\n\npragma solidity 0.4.26;\n\n/*\n    Contract Registry interface\n*/\ncontract IContractRegistry {\n    function addressOf(bytes32 _contractName) public view returns (address);\n\n    // deprecated, backward compatibility\n    function getAddress(bytes32 _contractName) public view returns (address);\n}\n\n// File: contracts\\utility\\ContractRegistryClient.sol\n\npragma solidity 0.4.26;\r\r\r\r\n\r\n/**\r\n  * @dev Base contract for ContractRegistry clients\r\n*/\r\ncontract ContractRegistryClient is Owned, Utils {\r\n    bytes32 internal constant CONTRACT_FEATURES = \"ContractFeatures\";\r\n    bytes32 internal constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 internal constant NON_STANDARD_TOKEN_REGISTRY = \"NonStandardTokenRegistry\";\r\n    bytes32 internal constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 internal constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 internal constant BANCOR_GAS_PRICE_LIMIT = \"BancorGasPriceLimit\";\r\n    bytes32 internal constant BANCOR_CONVERTER_FACTORY = \"BancorConverterFactory\";\r\n    bytes32 internal constant BANCOR_CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 internal constant BANCOR_CONVERTER_REGISTRY = \"BancorConverterRegistry\";\r\n    bytes32 internal constant BANCOR_CONVERTER_REGISTRY_DATA = \"BancorConverterRegistryData\";\r\n    bytes32 internal constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 internal constant ETH_TOKEN = \"ETHToken\";\r\n    bytes32 internal constant BANCOR_X = \"BancorX\";\r\n    bytes32 internal constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n\r\n    IContractRegistry public registry;      // address of the current contract-registry\r\n    IContractRegistry public prevRegistry;  // address of the previous contract-registry\r\n    bool public adminOnly;                  // only an administrator can update the contract-registry\r\n\r\n    /**\r\n      * @dev verifies that the caller is mapped to the given contract name\r\n      * \r\n      * @param _contractName    contract name\r\n    */\r\n    modifier only(bytes32 _contractName) {\r\n        require(msg.sender == addressOf(_contractName));\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev initializes a new ContractRegistryClient instance\r\n      * \r\n      * @param  _registry   address of a contract-registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) internal validAddress(_registry) {\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n    }\r\n\r\n    /**\r\n      * @dev updates to the new contract-registry\r\n     */\r\n    function updateRegistry() public {\r\n        // verify that this function is permitted\r\n        require(!adminOnly || isAdmin());\r\n\r\n        // get the new contract-registry\r\n        address newRegistry = addressOf(CONTRACT_REGISTRY);\r\n\r\n        // verify that the new contract-registry is different and not zero\r\n        require(newRegistry != address(registry) && newRegistry != address(0));\r\n\r\n        // verify that the new contract-registry is pointing to a non-zero contract-registry\r\n        require(IContractRegistry(newRegistry).addressOf(CONTRACT_REGISTRY) != address(0));\r\n\r\n        // save a backup of the current contract-registry before replacing it\r\n        prevRegistry = registry;\r\n\r\n        // replace the current contract-registry with the new contract-registry\r\n        registry = IContractRegistry(newRegistry);\r\n    }\r\n\r\n    /**\r\n      * @dev restores the previous contract-registry\r\n    */\r\n    function restoreRegistry() public {\r\n        // verify that this function is permitted\r\n        require(isAdmin());\r\n\r\n        // restore the previous contract-registry\r\n        registry = prevRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev restricts the permission to update the contract-registry\r\n      * \r\n      * @param _adminOnly    indicates whether or not permission is restricted to administrator only\r\n    */\r\n    function restrictRegistryUpdate(bool _adminOnly) public {\r\n        // verify that this function is permitted\r\n        require(adminOnly != _adminOnly && isAdmin());\r\n\r\n        // change the permission to update the contract-registry\r\n        adminOnly = _adminOnly;\r\n    }\r\n\r\n    /**\r\n      * @dev returns whether or not the caller is an administrator\r\n     */\r\n    function isAdmin() internal view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the address associated with the given contract name\r\n      * \r\n      * @param _contractName    contract name\r\n      * \r\n      * @return contract address\r\n    */\r\n    function addressOf(bytes32 _contractName) internal view returns (address) {\r\n        return registry.addressOf(_contractName);\r\n    }\r\n}\n\n// File: contracts\\token\\interfaces\\IERC20Token.sol\n\npragma solidity 0.4.26;\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public view returns (string) {this;}\n    function symbol() public view returns (string) {this;}\n    function decimals() public view returns (uint8) {this;}\n    function totalSupply() public view returns (uint256) {this;}\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n// File: contracts\\utility\\interfaces\\IWhitelist.sol\n\npragma solidity 0.4.26;\n\n/*\n    Whitelist interface\n*/\ncontract IWhitelist {\n    function isWhitelisted(address _address) public view returns (bool);\n}\n\n// File: contracts\\converter\\interfaces\\IBancorConverter.sol\n\npragma solidity 0.4.26;\n\n\n\n/*\n    Bancor Converter interface\n*/\ncontract IBancorConverter {\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256, uint256);\n    function convert2(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public returns (uint256);\n    function quickConvert2(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _affiliateAccount, uint256 _affiliateFee) public payable returns (uint256);\n    function conversionWhitelist() public view returns (IWhitelist) {this;}\n    function conversionFee() public view returns (uint32) {this;}\n    function reserves(address _address) public view returns (uint256, uint32, bool, bool, bool) {_address; this;}\n    function getReserveBalance(IERC20Token _reserveToken) public view returns (uint256);\n    function reserveTokens(uint256 _index) public view returns (IERC20Token) {_index; this;}\n    // deprecated, backward compatibility\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool);\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\n    function connectorTokens(uint256 _index) public view returns (IERC20Token);\n    function connectorTokenCount() public view returns (uint16);\n}\n\n// File: contracts\\converter\\interfaces\\IBancorConverterRegistry.sol\n\npragma solidity 0.4.26;\r\r\n\r\ninterface IBancorConverterRegistry {\r\n    function addConverter(IBancorConverter _converter) external;\r\n    function removeConverter(IBancorConverter _converter) external;\r\n    function getSmartTokenCount() external view returns (uint);\r\n    function getSmartTokens() external view returns (address[]);\r\n    function getSmartToken(uint _index) external view returns (address);\r\n    function isSmartToken(address _value) external view returns (bool);\r\n    function getLiquidityPoolCount() external view returns (uint);\r\n    function getLiquidityPools() external view returns (address[]);\r\n    function getLiquidityPool(uint _index) external view returns (address);\r\n    function isLiquidityPool(address _value) external view returns (bool);\r\n    function getConvertibleTokenCount() external view returns (uint);\r\n    function getConvertibleTokens() external view returns (address[]);\r\n    function getConvertibleToken(uint _index) external view returns (address);\r\n    function isConvertibleToken(address _value) external view returns (bool);\r\n    function getConvertibleTokenSmartTokenCount(address _convertibleToken) external view returns (uint);\r\n    function getConvertibleTokenSmartTokens(address _convertibleToken) external view returns (address[]);\r\n    function getConvertibleTokenSmartToken(address _convertibleToken, uint _index) external view returns (address);\r\n    function isConvertibleTokenSmartToken(address _convertibleToken, address _value) external view returns (bool);\r\n}\n\n// File: contracts\\token\\interfaces\\ISmartToken.sol\n\npragma solidity 0.4.26;\n\n\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken is IOwned, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n// File: contracts\\BancorNetworkPathFinder.sol\n\npragma solidity 0.4.26;\r\r\r\r\r\n\r\n/**\r\n  * @dev The BancorNetworkPathFinder contract allows for retrieving the conversion path between any pair of tokens in the Bancor Network.\r\n  * This conversion path can then be used in various functions on the BancorNetwork contract (see this contract for more details on conversion paths).\r\n*/\r\ncontract BancorNetworkPathFinder is ContractRegistryClient {\r\n    address public anchorToken;\r\n    address public converterRegistry;\r\n\r\n    /**\r\n      * @dev initializes a new BancorNetworkPathFinder instance\r\n      * \r\n      * @param _registry address of a contract registry contract\r\n    */\r\n    constructor(IContractRegistry _registry) ContractRegistryClient(_registry) public {\r\n        (anchorToken, converterRegistry) = getState();\r\n    }\r\n\r\n    /**\r\n      * @dev retrieves the anchor-token and the converter-registry\r\n      * \r\n      * @return the anchor-token and the converter-registry\r\n    */\r\n    function getState() public view returns (address, address) {\r\n        return (addressOf(ETH_TOKEN), addressOf(BANCOR_CONVERTER_REGISTRY));\r\n    }\r\n\r\n    /**\r\n      * @dev checks if both the anchor-token and the converter-registry are updated\r\n      * \r\n      * @param _anchorToken the registered anchor-token\r\n      * @param _converterRegistry the registered converter-registry\r\n      * \r\n      * @return true if both the anchor-token and the converter-registry are updated; false otherwise\r\n    */\r\n    function isUpdated(address _anchorToken, address _converterRegistry) public view returns (bool) {\r\n        return _anchorToken == anchorToken && _converterRegistry == converterRegistry;\r\n    }\r\n\r\n    /**\r\n      * @dev updates the anchor-token and/or the converter-registry\r\n      * \r\n      * Note that this function needs to be called only when either one of them has been redeployed\r\n    */\r\n    function updateState() public {\r\n        (address _anchorToken, address _converterRegistry) = getState();\r\n        require(!isUpdated(_anchorToken, _converterRegistry));\r\n        (anchorToken, converterRegistry) = (_anchorToken, _converterRegistry);\r\n    }\r\n\r\n    /**\r\n      * @dev retrieves the conversion path between a given pair of tokens in the Bancor Network\r\n      * \r\n      * @param _sourceToken address of the source token\r\n      * @param _targetToken address of the target token\r\n      * \r\n      * @return path from the source token to the target token\r\n    */\r\n    function get(address _sourceToken, address _targetToken) public view returns (address[] memory) {\r\n        (address _anchorToken, address _converterRegistry) = getState();\r\n        require(isUpdated(_anchorToken, _converterRegistry));\r\n        address[] memory sourcePath = getPath(_sourceToken);\r\n        address[] memory targetPath = getPath(_targetToken);\r\n        return getShortestPath(sourcePath, targetPath);\r\n    }\r\n\r\n    /**\r\n      * @dev retrieves the conversion path between a given token and the anchor token\r\n      * \r\n      * @param _token address of the token\r\n      * \r\n      * @return path from the input token to the anchor token\r\n    */\r\n    function getPath(address _token) private view returns (address[] memory) {\r\n        if (_token == anchorToken)\r\n            return getInitialArray(_token);\r\n\r\n        address[] memory smartTokens;\r\n        if (IBancorConverterRegistry(converterRegistry).isSmartToken(_token))\r\n            smartTokens = getInitialArray(_token);\r\n        else\r\n            smartTokens = IBancorConverterRegistry(converterRegistry).getConvertibleTokenSmartTokens(_token);\r\n\r\n        for (uint256 n = 0; n < smartTokens.length; n++) {\r\n            IBancorConverter converter = IBancorConverter(ISmartToken(smartTokens[n]).owner());\r\n            uint256 connectorTokenCount = converter.connectorTokenCount();\r\n            for (uint256 i = 0; i < connectorTokenCount; i++) {\r\n                address connectorToken = converter.connectorTokens(i);\r\n                if (connectorToken != _token) {\r\n                    address[] memory path = getPath(connectorToken);\r\n                    if (path.length > 0)\r\n                        return getExtendedArray(_token, smartTokens[n], path);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new address[](0);\r\n    }\r\n\r\n    /**\r\n      * @dev merges two paths with a common suffix into one\r\n      * \r\n      * @param _sourcePath address of the source path\r\n      * @param _targetPath address of the target path\r\n      * \r\n      * @return merged path\r\n    */\r\n    function getShortestPath(address[] memory _sourcePath, address[] memory _targetPath) private pure returns (address[] memory) {\r\n        if (_sourcePath.length > 0 && _targetPath.length > 0) {\r\n            uint256 i = _sourcePath.length;\r\n            uint256 j = _targetPath.length;\r\n            while (i > 0 && j > 0 && _sourcePath[i - 1] == _targetPath[j - 1]) {\r\n                i--;\r\n                j--;\r\n            }\r\n\r\n            address[] memory path = new address[](i + j + 1);\r\n            for (uint256 m = 0; m <= i; m++)\r\n                path[m] = _sourcePath[m];\r\n            for (uint256 n = j; n > 0; n--)\r\n                path[path.length - n] = _targetPath[n - 1];\r\n            return path;\r\n        }\r\n\r\n        return new address[](0);\r\n    }\r\n\r\n    /**\r\n      * @dev creates a new array containing a single item\r\n      * \r\n      * @param _item item\r\n      * \r\n      * @return initial array\r\n    */\r\n    function getInitialArray(address _item) private pure returns (address[] memory) {\r\n        address[] memory array = new address[](1);\r\n        array[0] = _item;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n      * @dev prepends two items to the beginning of an array\r\n      * \r\n      * @param _item0 first item\r\n      * @param _item1 second item\r\n      * @param _array initial array\r\n      * \r\n      * @return extended array\r\n    */\r\n    function getExtendedArray(address _item0, address _item1, address[] memory _array) private pure returns (address[] memory) {\r\n        address[] memory array = new address[](2 + _array.length);\r\n        array[0] = _item0;\r\n        array[1] = _item1;\r\n        for (uint256 i = 0; i < _array.length; i++)\r\n            array[2 + i] = _array[i];\r\n        return array;\r\n    }\r\n}\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_adminOnly\",\"type\":\"bool\"}],\"name\":\"restrictRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"converterRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminOnly\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sourceToken\",\"type\":\"address\"},{\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"anchorToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_anchorToken\",\"type\":\"address\"},{\"name\":\"_converterRegistry\",\"type\":\"address\"}],\"name\":\"isUpdated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"BancorNetworkPathFinder","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f078b4ec84e5fc57c693d43f1f4a82306c9b88d6","Library":"","LicenseType":"","SwarmSource":"bzzr://1dc9891e6f207bed8e79c02fd52f0165b4f7ee4ad342a6173e6ae16547ffd437"}]}