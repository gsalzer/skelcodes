{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\n/// @title Kyber Reserve contract\r\ninterface KyberReserveInterface {\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        external\r\n        payable\r\n        returns(bool);\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) external view returns(uint);\r\n}\r\n\r\ninterface ERC20 {\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        emit TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        emit TransferAdminPending(newAdmin);\r\n        emit AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        emit AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n}\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\r\n}\r\n\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        emit TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address payable sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        emit EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\ncontract KyberSplitKNC is Withdrawable {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint  constant internal DECIMALS = 18;\r\n    uint constant internal PRECISION = 10**18;\r\n    ERC20 constant internal KNC_TOKEN = ERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200);\r\n    KyberReserveInterface constant internal fprReserve = KyberReserveInterface(0x63825c174ab367968EC60f061753D3bbD36A0D8F);\r\n    KyberReserveInterface constant internal aprReserve = KyberReserveInterface(0x607d7751d9F4845C5a1dE9eeD39c56f4fC0F855d);\r\n    KyberNetworkProxyInterface constant internal networkProxy = KyberNetworkProxyInterface(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    address constant internal walletID = address(0x80B603bCE2D8Cc3acb43B6692514b463a16FB425);\r\n\r\n    constructor(address _admin) public {\r\n        admin = _admin;\r\n        KNC_TOKEN.approve(address(networkProxy), 2**255);\r\n    }\r\n\r\n    function() external payable {} // solhint-disable-line no-empty-blocks\r\n\r\n    function getConversionRate(bool isEthToKNC, uint srcQty)\r\n        public\r\n        view\r\n        returns(uint totalDestAmount, uint rateFPR, uint rateAPR) {\r\n        ERC20 src = isEthToKNC ? ETH_TOKEN_ADDRESS : KNC_TOKEN;\r\n        ERC20 dest = isEthToKNC ? KNC_TOKEN : ETH_TOKEN_ADDRESS;\r\n        uint destAmount;\r\n        uint rate1;\r\n        uint rate2;\r\n        (totalDestAmount, rateFPR, rateAPR) = getEstimatedDestAmount(src, dest, srcQty/2, srcQty - srcQty/2);\r\n        (destAmount, rate1, rate2) = getEstimatedDestAmount(src, dest, srcQty, 0);\r\n        if (totalDestAmount < destAmount) {\r\n            totalDestAmount = destAmount;\r\n            rateFPR = rate1;\r\n            rateAPR = rate2;\r\n        }\r\n        (destAmount, rate1, rate2) = getEstimatedDestAmount(src, dest, 0, srcQty);\r\n        if (totalDestAmount < destAmount) {\r\n            totalDestAmount = destAmount;\r\n            rateFPR = rate1;\r\n            rateAPR = rate2;\r\n        }\r\n    }\r\n\r\n    function getEstimatedDestAmount(ERC20 src, ERC20 dest, uint firstQty, uint secondQty)\r\n        public\r\n        view\r\n        returns(uint totalDestAmount, uint rateFPR, uint rateAPR)\r\n    {\r\n        if (firstQty > 0) {\r\n            rateFPR = fprReserve.getConversionRate(src, dest, firstQty, block.number);\r\n            totalDestAmount += calcDestAmount(firstQty, rateFPR);\r\n        }\r\n        if (secondQty > 0) {\r\n            rateAPR = aprReserve.getConversionRate(src, dest, secondQty, block.number);\r\n            totalDestAmount += calcDestAmount(secondQty, rateAPR);\r\n        }\r\n    }\r\n\r\n    function trade(\r\n        bool isEthToKNC,\r\n        uint srcAmount,\r\n        bool isSplit,\r\n        uint expectedDestAmount\r\n    )\r\n        public\r\n        payable\r\n    {\r\n\r\n        ERC20 src = isEthToKNC ? ETH_TOKEN_ADDRESS : KNC_TOKEN;\r\n        ERC20 dest = isEthToKNC ? KNC_TOKEN : ETH_TOKEN_ADDRESS;\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            require(msg.value == srcAmount, \"trade: ETH amount is not correct\");\r\n        } else {\r\n            // collect token\r\n            require(src.transferFrom(msg.sender, address(this), srcAmount));\r\n        }\r\n\r\n        uint totalDestAmount;\r\n        if (!isSplit) {\r\n            totalDestAmount = networkProxy.tradeWithHint.value(msg.value)(\r\n                src,\r\n                srcAmount,\r\n                dest,\r\n                msg.sender,\r\n                2**255,\r\n                0,\r\n                walletID,\r\n                \"PERM\"\r\n            );\r\n        } else {\r\n            uint firstQty = srcAmount / 2;\r\n            uint tradeAmount = isEthToKNC ? firstQty : 0;\r\n            totalDestAmount = networkProxy.tradeWithHint.value(tradeAmount)(\r\n                src,\r\n                firstQty,\r\n                dest,\r\n                msg.sender,\r\n                2**255,\r\n                0,\r\n                walletID,\r\n                \"PERM\"\r\n            );\r\n            firstQty = srcAmount - firstQty;\r\n            tradeAmount = isEthToKNC ? firstQty : 0;\r\n            totalDestAmount += networkProxy.tradeWithHint.value(tradeAmount)(\r\n                src,\r\n                firstQty,\r\n                dest,\r\n                msg.sender,\r\n                2**255,\r\n                0,\r\n                walletID,\r\n                \"PERM\"\r\n            );\r\n        }\r\n        require(totalDestAmount >= expectedDestAmount, \"Total dest amount is smaller than expected dest amount\");\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        if (dstDecimals >= srcDecimals) {\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcDestAmount(uint srcAmount, uint rate) internal pure returns(uint) {\r\n        return calcDstQty(srcAmount, DECIMALS, DECIMALS, rate);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondQty\",\"type\":\"uint256\"}],\"name\":\"getEstimatedDestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateFPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateAPR\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEthToKNC\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSplit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expectedDestAmount\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEthToKNC\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"srcQty\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateFPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateAPR\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"}]","ContractName":"KyberSplitKNC","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004f2604aac91114ae3b3d0be485d407d02b24480b","Library":"","LicenseType":"None","SwarmSource":"bzzr://3b4656f5360412847cbfe191e2dbe3116accc07c532b69ea3523b6bc94dfa2f4"}]}