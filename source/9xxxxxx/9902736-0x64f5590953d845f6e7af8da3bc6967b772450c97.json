{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256){\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address payable internal _owner;\r\n  address payable internal _potentialNewOwner;\r\n \r\n  event OwnershipTransferred(address payable indexed from, address payable indexed to);\r\n\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address payable newOwner) external onlyOwner {\r\n    _potentialNewOwner = newOwner;\r\n  }\r\n  function acceptOwnership() external {\r\n    require(msg.sender == _potentialNewOwner);\r\n    emit OwnershipTransferred(_owner, _potentialNewOwner);\r\n    _owner = _potentialNewOwner;\r\n  }\r\n  function getOwner() view external returns(address){\r\n      return _owner;\r\n  }\r\n  function getPotentialNewOwner() view external returns(address){\r\n      return _potentialNewOwner;\r\n  }\r\n}\r\n\r\ncontract CircuitBreaker is Ownable {\r\n    bool private isApplicationLockedDown;\r\n    // External contract payment via collection\r\n    bool private isECPVCLockedDown;\r\n    // External contract payment\r\n    bool private isECPLockedDown;\r\n\r\n    constructor () internal {\r\n        isApplicationLockedDown = false;\r\n        isECPVCLockedDown = false;\r\n        isECPLockedDown = false;\r\n    }\r\n    modifier applicationLockdown() {\r\n        require(isApplicationLockedDown == false);\r\n        _;\r\n    }\r\n    modifier ecpvcLockdown() {\r\n        require(isECPVCLockedDown == false);\r\n        _;\r\n    }\r\n    modifier ecpLockdown() {\r\n        require(isECPVCLockedDown == false);\r\n        _;\r\n    }\r\n    function updateApplicationLockdownState(bool state) public onlyOwner{\r\n       isApplicationLockedDown = state;\r\n    }\r\n    function updateECPCVLockdownState(bool state) public onlyOwner{\r\n        isECPVCLockedDown = state;\r\n    }\r\n    function updateECPLockdownState(bool state) public onlyOwner{\r\n        isECPLockedDown = state;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    function allowance(address owner, address spender) public view returns (uint256 remaining);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Interface {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public balances;\r\n  mapping (address => mapping (address => uint256)) private allowed;\r\n\r\n  function balanceOf(address owner) view public returns (uint256 balance) {\r\n    return balances[owner];\r\n  }\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    uint256 allowance = allowed[from][msg.sender];\r\n    balances[from] = balances[from].sub(value);\r\n    allowed[from][msg.sender] = allowance.sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require((value == 0) || (allowed[msg.sender][spender] == 0));\r\n    allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n  function allowance(address owner, address spender) view public returns (uint256 remaining) {\r\n    return allowed[owner][spender];\r\n  }\r\n}\r\n\r\ncontract RecoverableToken is ERC20, Ownable {\r\n  event RecoveredTokens(address token, address owner, uint tokens, uint time);\r\n  \r\n  function recoverTokens(ERC20 token) public onlyOwner {\r\n    uint tokens = tokensToBeReturned(token);\r\n    require(token.transfer(_owner, tokens) == true);\r\n    emit RecoveredTokens(address(token), _owner,  tokens, now);\r\n  }\r\n  function tokensToBeReturned(ERC20 token) public view returns (uint256) {\r\n    return token.balanceOf(address(this));\r\n  }\r\n}\r\n\r\ncontract IPurchasableToken{\r\n    function purchase(ERC20 tokenAddress, string memory collectionName, address buyer, uint256 value) public returns(bool);\r\n}\r\n\r\ncontract ITradableToken{\r\n    function purchase(address tokenAddress, address buyer, uint256 value) public returns (bool success);\r\n}\r\n\r\ncontract ExternalContractInvocations is ERC20{\r\n  enum ExternalPurchaseType{\r\n      Item,\r\n      Token\r\n  }\r\n  \r\n  event ApprovedAndInvokedExternalPurchase(ExternalPurchaseType typeOfPurchase, address tokenAddress, string collectionName, address buyer, uint256 value, uint256 time);\r\n  event ApprovedAndInvokedExternalPurchase(ExternalPurchaseType typeOfPurchase, address tokenAddress, address buyer, uint256 value, uint256 time);\r\n     \r\n  function approveAndInvokePurchase(address tokenAddress, string memory collectionName, uint256 value) public returns(bool){\r\n    require(approve(tokenAddress, value) == true);\r\n    require(IPurchasableToken(tokenAddress).purchase(this, collectionName, msg.sender, value) == true);\r\n    emit ApprovedAndInvokedExternalPurchase(ExternalPurchaseType.Item, tokenAddress, collectionName, msg.sender, value, now);\r\n    return true;\r\n  }\r\n  \r\n  function approveAndInvokePurchase(address tokenAddress, uint256 value) public returns(bool){\r\n    require(approve(tokenAddress, value) == true);\r\n    require(ITradableToken(tokenAddress).purchase(address(this), msg.sender, value) == true);\r\n    emit ApprovedAndInvokedExternalPurchase(ExternalPurchaseType.Token, tokenAddress, msg.sender, value, now);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Crowdsale is Ownable{\r\n  uint256 private _rate;\r\n  uint256 internal _weiRaised;\r\n\r\n  using SafeMath for uint256;\r\n\r\n  event RateUpdate(uint256 rate);\r\n\r\n  constructor (uint256 rate) public {\r\n    require(rate > 0);\r\n    _rate = rate;\r\n  }\r\n\r\n  function rate() external view returns (uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  function weiRaised() external view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n    \r\n  function setRate(uint256 newRate) onlyOwner external{\r\n    _rate = newRate;\r\n    emit RateUpdate(newRate);\r\n  }\r\n    \r\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal pure {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n    return weiAmount.mul(_rate);\r\n  }\r\n    \r\n  function _forwardFunds() internal {\r\n    _owner.transfer(msg.value);\r\n  }\r\n}\r\n\r\ncontract Morality is RecoverableToken, Crowdsale,\r\n  ExternalContractInvocations, CircuitBreaker { \r\n      \r\n  string public name;\r\n  string public symbol;\r\n  uint256 public decimals;\r\n  address payable public creator;\r\n  \r\n  event TokensPurchased(address indexed beneficiary, uint256 value, uint256 amount);\r\n  event LogFundsReceived(address sender, uint amount);\r\n\r\n  constructor(uint256 totalTokensToMint, uint256 crowdsaleRate) Crowdsale(crowdsaleRate) public {\r\n    name = \"Morality\";\r\n    symbol = \"MO\";\r\n    totalSupply = totalTokensToMint;\r\n    decimals = 18;\r\n    balances[msg.sender] = totalSupply;\r\n    emit Transfer(address(0), msg.sender, totalSupply);\r\n    creator = msg.sender;\r\n  }\r\n  \r\n  function() payable external applicationLockdown {\r\n    buyTokens();\r\n    emit LogFundsReceived(msg.sender, msg.value);\r\n  }\r\n  \r\n  function transfer(address to, uint256 value) public applicationLockdown returns (bool success){\r\n    return super.transfer(to, value);\r\n  }\r\n  \r\n  function transferFrom(address from, address to, uint256 value) public applicationLockdown returns (bool success){\r\n    return super.transferFrom(from, to, value);\r\n  }\r\n  \r\n  function multipleTransfer(address[] calldata toAddresses, uint256[] calldata toValues) external applicationLockdown returns (bool) {\r\n    require(toAddresses.length == toValues.length);\r\n    for(uint256 i = 0;i<toAddresses.length;i++){\r\n       require(super.transfer(toAddresses[i], toValues[i]) == true);\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function approve(address spender, uint256 value) public applicationLockdown returns (bool) {\r\n    return super.approve(spender, value);\r\n  }\r\n  \r\n  function approveAndInvokePurchase(address tokenAddress, string memory collectionName, uint256 value) public ecpvcLockdown applicationLockdown returns(bool){\r\n    return super.approveAndInvokePurchase(tokenAddress, collectionName, value);\r\n  }\r\n  \r\n  function approveAndInvokePurchase(address tokenAddress, uint256 value) public ecpLockdown applicationLockdown returns(bool){\r\n    return super.approveAndInvokePurchase(tokenAddress, value);\r\n  }\r\n  \r\n  function buyTokens() internal applicationLockdown {\r\n    uint256 weiAmount = msg.value;\r\n     _preValidatePurchase(msg.sender, weiAmount);\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n    transfer(msg.sender, tokens);\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n    //Forwad the funds to admin\r\n    _forwardFunds();\r\n  }\r\n\r\n  function updateApplicationLockdownState(bool state) onlyOwner public{\r\n    super.updateApplicationLockdownState(state);\r\n  }\r\n  \r\n  function updateECPLockdownState(bool state) onlyOwner public{\r\n    super.updateECPLockdownState(state);\r\n  }\r\n  \r\n  function updateECPCVLockdownState(bool state) onlyOwner public{\r\n    super.updateECPCVLockdownState(state);\r\n  }\r\n  \r\n  function recoverTokens(ERC20 token) onlyOwner public{\r\n     super.recoverTokens(token);\r\n  }\r\n  \r\n  function isToken() public pure returns (bool) {\r\n    return true;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crowdsaleRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ExternalContractInvocations.ExternalPurchaseType\",\"name\":\"typeOfPurchase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ApprovedAndInvokedExternalPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ExternalContractInvocations.ExternalPurchaseType\",\"name\":\"typeOfPurchase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ApprovedAndInvokedExternalPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecoveredTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndInvokePurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndInvokePurchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPotentialNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"toValues\",\"type\":\"uint256[]\"}],\"name\":\"multipleTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokensToBeReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateApplicationLockdownState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateECPCVLockdownState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateECPLockdownState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Morality","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000005a790ea17ace06a960000000000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ebc470ed9c11994e99d43f20b9261b957312a9df916aba74678ce67b36e1c3e0"}]}