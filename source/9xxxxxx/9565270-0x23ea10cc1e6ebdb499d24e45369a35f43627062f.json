{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract DGDInterface {\r\n\r\n  string public constant name = \"DigixDAO\";\r\n  string public constant symbol = \"DGD\";\r\n  uint8 public constant decimals = 9;\r\n\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping(address => mapping (address => uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address tokenOwner) public view returns (uint) {}\r\n\r\n  function transfer(address receiver, uint numTokens) public returns (bool) {}\r\n\r\n  function approve(address delegate, uint numTokens) public returns (bool) {}\r\n\r\n  function allowance(address owner, address delegate) public view returns (uint) {}\r\n\r\n  function transferFrom(address owner, address buyer, uint numTokens) public returns (bool _success) {}\r\n}\r\n\r\ncontract Acid {\r\n\r\n  event Refund(address indexed user, uint256 indexed dgds, uint256 refundAmount);\r\n\r\n  // wei refunded per 0.000000001 DGD burned\r\n  uint256 public weiPerNanoDGD;\r\n  bool public isInitialized;\r\n  address public dgdTokenContract;\r\n  address public owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier unlessInitialized() {\r\n    require(!isInitialized, \"contract is already initialized\");\r\n    _;\r\n  }\r\n\r\n  modifier requireInitialized() {\r\n    require(isInitialized, \"contract is not initialized\");\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    isInitialized = false;\r\n  }\r\n\r\n  function () external payable {}\r\n\r\n  function init(uint256 _weiPerNanoDGD, address _dgdTokenContract) public onlyOwner() unlessInitialized() returns (bool _success) {\r\n    require(_weiPerNanoDGD > 0, \"rate cannot be zero\");\r\n    require(_dgdTokenContract != address(0), \"DGD token contract cannot be empty\");\r\n    weiPerNanoDGD = _weiPerNanoDGD;\r\n    dgdTokenContract = _dgdTokenContract;\r\n    isInitialized = true;\r\n    _success = true;\r\n  }\r\n\r\n  function burn() public requireInitialized() returns (bool _success) {\r\n    // Rate will be calculated based on the nearest decimal\r\n    uint256 _amount = DGDInterface(dgdTokenContract).balanceOf(msg.sender);\r\n    uint256 _wei = mul(_amount, weiPerNanoDGD);\r\n    require(address(this).balance >= _wei, \"Contract does not have enough funds\");\r\n    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \"No DGDs or DGD account not authorized\");\r\n    address _user = msg.sender;\r\n    (_success,) = _user.call.value(_wei)('');\r\n    require(_success, \"Transfer of Ether failed\");\r\n    emit Refund(_user, _amount, _wei);\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dgds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dgdTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiPerNanoDGD\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dgdTokenContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerNanoDGD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Acid","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"BSD-3-Clause","SwarmSource":"bzzr://2885d2b0131e91bf0109fdf1877ed8084f13a91326eb7e39155748736c720f2c"}]}