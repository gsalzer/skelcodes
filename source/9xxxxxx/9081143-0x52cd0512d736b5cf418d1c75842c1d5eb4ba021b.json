{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-09-16\r\n*/\r\n\r\npragma solidity ^0.4.26;\r\n\r\n\r\ncontract UtilGameFair {\r\n    uint ethWei = 1 ether;\r\n\r\n    //根据投注金额查询会员等级\r\n    function getLevel(uint value) public view returns (uint) {\r\n        if (value >= 1 * ethWei && value <= 5 * ethWei) {//1-5=v1\r\n            return 1;\r\n        }\r\n        if (value >= 6 * ethWei && value <= 10 * ethWei) {//6-10=v2\r\n            return 2;\r\n        }\r\n        if (value >= 11 * ethWei && value <= 15 * ethWei) {//11-15=v3\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //获得返佣下线层级数,3无限\r\n    function getLineLevel(uint value) public view returns (uint) {\r\n        if (value >= 1 * ethWei && value <= 5 * ethWei) {//1-5=1代奖励\r\n            return 1;\r\n        }\r\n        if (value >= 6 * ethWei && value <= 10 * ethWei) {//6-10=2代奖励\r\n            return 2;\r\n        }\r\n        if (value >= 11 * ethWei) {//>=11=无限代奖励\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //根据会员等级查询分红系数\r\n    function getScByLevel(uint level) public pure returns (uint) {\r\n        if (level == 1) {//v1=50%\r\n            return 5;\r\n        }\r\n        if (level == 2) {//v2=70%\r\n            return 7;\r\n        }\r\n        if (level == 3) {//v3=100%\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //奖励烧伤等级系数\r\n    function getFireScByLevel(uint level) public pure returns (uint) {\r\n        if (level == 1) {//v1=30%\r\n            return 3;\r\n        }\r\n        if (level == 2) {//v2=60%\r\n            return 6;\r\n        }\r\n        if (level == 3) {//v3=100%\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //推荐人奖励系统\r\n    function getRecommendScaleByLevelAndTim(uint level, uint times) public pure returns (uint){\r\n        if (level == 1 && times == 1) {//v1,1代下级奖励50%\r\n            return 50;\r\n        }\r\n        if (level == 2 && times == 1) {//v2,1代下级奖励70%\r\n            return 70;\r\n        }\r\n        if (level == 2 && times == 2) {//v2,2代奖励50%\r\n            return 50;\r\n        }\r\n        if (level == 3) {\r\n            if (times == 1) {//v3,1代奖励100%\r\n                return 100;\r\n            }\r\n            if (times == 2) {//v3,2代奖金70%\r\n                return 70;\r\n            }\r\n            if (times == 3) {//v3,3代奖励50%\r\n                return 50;\r\n            }\r\n            if (times >= 4 && times <= 10) {//v3,4-10代奖励10%\r\n                return 10;\r\n            }\r\n            if (times >= 11 && times <= 20) {//v3,11-20代奖励5%\r\n                return 5;\r\n            }\r\n            if (times >= 21) {//v3,21代以后奖励1%\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //比较字符串是否相等\r\n    function compareStr(string memory _str, string memory str) public pure returns (bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    //返回合约调用人地址\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    //返回合约调用发送的数据\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    //合约所有人\r\n    address private _owner;\r\n\r\n    //变更合约所有人事件\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        //合约创建时指定合约所有人为创建者\r\n        _owner = _msgSender();\r\n        //调用事件日志\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     * 返回当前合约所有人地址\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     * 函数修改器，判断是否为合约所有人调用\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     * 返回合约调用者是否为合约所有人\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     * 放弃合约所有权\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     * 转让合约所有权\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    //角色映射表\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     * 添加角色权限\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     * 删除角色权限\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     * 判断是否有角色权限\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n * 白名单管理员角色\r\n */\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    //加入白名单事件\r\n    event WhitelistAdminAdded(address indexed account);\r\n    //移出白名单事件\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    //白名单管理员集合\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        //合约创建时将创建人加入白名单\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    //判断是否为白名单管理员的函数修改器\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    //判断是否为白名单管理员\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    //添加白名单管理员\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    //移出白名单管理员\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n    //放弃白名单管理员身份\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    //添加白名单管理员\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    //称出白名单管理员\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n//游戏类\r\ncontract GameFair is UtilGameFair, WhitelistAdminRole {\r\n\r\n    using SafeMath for *;\r\n\r\n    string constant private name = \"GameFair Official\";\r\n\r\n    uint ethWei = 1 ether;\r\n\r\n    //专项帐户\r\n    address  private devAddr = address(0xb61f5A335acB482c23Af25e76D7c7b3FEA873059);\r\n\r\n    //回合用户实体\r\n    struct User {\r\n        uint id;//用户id\r\n        address userAddress;//用户钱包地址\r\n        string inviteCode;//邀请码\r\n        string referrer;//推荐人\r\n        uint staticLevel;//静态等级\r\n        uint dynamicLevel;//动态等级\r\n        uint allInvest;//全部投注金额\r\n        uint freezeAmount;//冻结金额\r\n        uint unlockAmount;//解锁金额\r\n        uint allStaticAmount;//全部分红收益金额\r\n        uint allDynamicAmount;//全部节点奖励金额\r\n        uint hisStaticAmount;//他的静态金额\r\n        uint hisDynamicAmount;//他的动态金额\r\n        Invest[] invests;//投注列表\r\n        SeizeInvest[] seizesInvests;//抢注\r\n        uint votes;//可用投票数\r\n        uint staticFlag;//投注分红下标\r\n    }\r\n\r\n    //用户基础信息\r\n    struct UserGlobal {\r\n        uint id;//用户id\r\n        address userAddress;//用户钱包地址\r\n        string inviteCode;//邀请码\r\n        string referrer;//推荐人\r\n        uint inviteCount;//邀请人总数量\r\n    }\r\n\r\n    //投注\r\n    struct Invest {\r\n        address userAddress;//用户地址\r\n        uint investAmount;//投注金额\r\n        uint investTime;//投注时间\r\n        uint times;//下线数量\r\n    }\r\n\r\n    //抢注\r\n    struct SeizeInvest {\r\n        uint rid;\r\n        address userAddress;\r\n        uint seizeAmount;\r\n        uint seizeTime;\r\n    }\r\n\r\n    //系统码,没用到\r\n    string constant systemCode = \"99999999\";\r\n    //开始时间\r\n    uint startTime;\r\n    //总投注次数\r\n    uint investCount = 0;\r\n    //回合投注次数映射表\r\n    mapping(uint => uint) rInvestCount;\r\n    //总投注金额\r\n    uint investMoney = 0;\r\n    //回合投注金映射表\r\n    mapping(uint => uint) rInvestMoney;\r\n    //用户总资产\r\n    uint userAssets = 0;\r\n\r\n    //用户初始id\r\n    uint uid = 0;\r\n    //回合数\r\n    uint rid = 1;\r\n    //游戏结束后重启的时间\r\n    uint period = 6 hours;\r\n\r\n    //初始投票阀值80%，60%，40%，20%\r\n    uint voteStartSc = 80;\r\n\r\n    //游戏状态,1游戏中，2投票中\r\n    uint gameStatus = 1;\r\n\r\n    //游戏投票结束时间\r\n    uint voteEndTime = 0;\r\n    //抢注结束时间\r\n    uint seizeEndTime = 0;\r\n\r\n    //投票结果，重启/继续\r\n    uint[] voteResult = [0, 0];\r\n    //最后抢注地址\r\n    mapping(uint => SeizeInvest) lastSeizeInvest;\r\n\r\n    //用户回合映射\r\n    mapping(uint => mapping(address => User)) userRoundMapping;\r\n    //地址->用户映射\r\n    mapping(address => UserGlobal) userMapping;\r\n    //邀请码->地址映射\r\n    mapping(string => address) addressMapping;\r\n    //用户列表映射(有序)\r\n    mapping(uint => address) public indexMapping;\r\n\r\n    //是否人为操作，否则为合约调用\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    //投注事件\r\n    event LogInvestIn(address indexed who, uint indexed uid, uint amount, uint time, string inviteCode, string referrer);\r\n    //提取收益事件\r\n    event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time);\r\n    //赎回事件\r\n    event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);\r\n    //开始投票事件\r\n    event VoteStart(uint startTime, uint endTime);\r\n    //抢注事件\r\n    event SeizeInvestNow(address indexed who, uint indexed uid, uint amount, uint now);\r\n\r\n    //发布合约初始化数据\r\n    constructor () public {\r\n        startTime = now;\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    //游戏是否开始\r\n    function gameStart() public view returns (bool) {\r\n        return startTime != 0 && now > startTime && gameStatus == 1;\r\n    }\r\n\r\n    /**\r\n    *投注，inviteCode 邀请码，referrer邀请人地址\r\n    */\r\n    function investIn(string memory inviteCode, string memory referrer) public isHuman() payable {\r\n        //判断游戏是否开始\r\n        require(now > startTime && gameStatus == 1, \"invest is not allowed now\");\r\n        //判断投注金额是否合法\r\n        require(msg.value >= 1 * ethWei && msg.value <= 15 * ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        //获取投注User实体\r\n        if (userGlobal.id == 0) {//如果未投注过\r\n            //判断邀请码是否为空\r\n            require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n            //邀请人地址\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            //判断邀请人是否存在\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            //自己不能邀请自己\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            //自己的邀请码是否重复\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n            //新用户注册\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n        }\r\n\r\n        //当前回合数的用户映射\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        if (uint(user.userAddress) != 0) {//当前回合非第一次投注\r\n            //判断当前回合冻结金额+本次投注金额是否超过15eth\r\n            require(user.freezeAmount.add(msg.value) <= 15 * ethWei, \"can not beyond 15 eth\");\r\n            //累加当前回合投注\r\n            user.allInvest = user.allInvest.add(msg.value);\r\n            //累加当前回合冻结金额\r\n            user.freezeAmount = user.freezeAmount.add(msg.value);\r\n            //设置当前静态等级\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            //设置当前动态等级\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n        } else {//当前回合第一次投注\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.allInvest = msg.value;\r\n            user.dynamicLevel = getLineLevel(msg.value);\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n        }\r\n\r\n        //本轮投注实体\r\n        Invest memory invest = Invest(msg.sender, msg.value, now, 0);\r\n        //加入用户投注数组\r\n        user.invests.push(invest);\r\n        user.votes += (msg.value.div(ethWei));\r\n\r\n        //累计总投注次数\r\n        investCount = investCount.add(1);\r\n        //累计总投注金额\r\n        investMoney = investMoney.add(msg.value);\r\n        //累计本轮投注次数\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        //累计本轮投注金额\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\r\n        //累计用户总资产\r\n        userAssets += msg.value;\r\n        //向专项帐户打款4%\r\n        sendFeetoAdmin(msg.value);\r\n        //发布投注事件日志\r\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, userGlobal.inviteCode, userGlobal.referrer);\r\n    }\r\n\r\n    //投票期间抢注\r\n    function seizeInvest(string memory inviteCode) public isHuman() payable {\r\n        //判断抢注是否开始\r\n        require(seizeEndTime > now, \"seize invest not start\");\r\n        require(!compareStr(inviteCode, \"\"), \"empty invite code\");\r\n        //判断抢注金额是否合法\r\n        require(msg.value >= 1 * ethWei && msg.value <= 15 * ethWei, \"between 1 and 15\");\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        //获取投注User实体\r\n        if (userGlobal.id == 0) {//如果未投注过\r\n            //自己的邀请码是否重复\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n            //新用户注册\r\n            registerUser(msg.sender, inviteCode, \"\");\r\n        }\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        SeizeInvest memory si = SeizeInvest(rid, msg.sender, msg.value, now);\r\n        if (uint(user.userAddress) != 0) {//当前回合非第一次投注\r\n            //将抢注金额放解冻金额\r\n            user.unlockAmount = user.unlockAmount.add(msg.value);\r\n            user.allInvest += msg.value;\r\n        } else {//当前回合第一次投注\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.allInvest = msg.value;\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n            user.unlockAmount =msg.value;\r\n        }\r\n        user.seizesInvests.push(si);\r\n        investMoney = investMoney.add(msg.value);\r\n        userAssets += msg.value;\r\n        lastSeizeInvest[rid] = si;\r\n        emit SeizeInvestNow(msg.sender, userGlobal.id, msg.value, now);\r\n    }\r\n\r\n    //执行投票结果\r\n    function voteComplete() external onlyWhitelistAdmin {\r\n        require(gameStatus == 2,\"game status error\");\r\n        if (voteResult[0] > voteResult[1]) {//游戏重启\r\n            //游戏开始时间为6小时后\r\n            startTime = now.add(period);\r\n            //重置投票阀值\r\n            voteStartSc = 80;\r\n            //计算风险系数\r\n            uint sc = address(this).balance.mul(100).div(userAssets);\r\n            for (uint i = 1; i <= uid; i++) {\r\n                address userAddr = indexMapping[i];\r\n                User storage previousUser = userRoundMapping[rid][userAddr];\r\n                User storage curUser = userRoundMapping[rid + 1][userAddr];\r\n                curUser.id = previousUser.id;\r\n                curUser.userAddress = previousUser.userAddress;\r\n                curUser.inviteCode = previousUser.inviteCode;\r\n                curUser.referrer = previousUser.referrer;\r\n                curUser.allInvest = previousUser.allInvest;\r\n                curUser.unlockAmount = previousUser.freezeAmount.add(previousUser.unlockAmount).mul(sc).div(100);\r\n                curUser.freezeAmount = 0;\r\n                curUser.allStaticAmount = previousUser.allStaticAmount.mul(sc).div(100);\r\n                curUser.allDynamicAmount = previousUser.allDynamicAmount.mul(sc).div(100);\r\n                curUser.votes = curUser.unlockAmount.div(ethWei);\r\n                curUser.hisStaticAmount = previousUser.hisStaticAmount;\r\n                curUser.hisDynamicAmount = previousUser.hisDynamicAmount;\r\n                curUser.staticLevel = 0;\r\n                curUser.dynamicLevel =getLineLevel(curUser.unlockAmount);\r\n            }\r\n            //回合数加1\r\n            rid++;\r\n        } else {//游戏继续\r\n            for (i = 1; i <= uid; i++) {\r\n                userAddr = indexMapping[i];\r\n                curUser = userRoundMapping[rid][userAddr];\r\n                curUser.votes = curUser.freezeAmount.add(curUser.unlockAmount).div(ethWei);\r\n            }\r\n            lastSeizeInvest[rid] = SeizeInvest(rid,0x00,0,0);\r\n        }\r\n\r\n        gameStatus = 1;\r\n        //重置投票票数\r\n        voteResult = [0, 0];\r\n    }\r\n\r\n    //收益提现\r\n    function withdrawProfit()\r\n    public\r\n    isHuman() {\r\n        //判断游戏是否开始\r\n        require(now > startTime && gameStatus == 1, \"now not withdrawal\");\r\n        //当前回合User\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        //当前用户总余额\r\n        uint sendMoney = user.allStaticAmount.add(user.allDynamicAmount);\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        //判断合约内余额是否充足\r\n        if (!isEnough) {//余额不够结束游戏\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney > 0) {\r\n            //给用户转帐\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            //清空分红余额\r\n            user.allStaticAmount = 0;\r\n            //清空节点奖励余额\r\n            user.allDynamicAmount = 0;\r\n            //减去用户总资产\r\n            userAssets -= resultMoney;\r\n            //检查是否需要投票\r\n            checkVote();\r\n            //发送提现事件日志\r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\r\n    //判断合约余额是否足够\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n        if (sendMoney >= address(this).balance) {//合约余额小于等于发送的金额返回否&当前合约余额\r\n            return (false, address(this).balance);\r\n        } else {\r\n            //合约余额大于发送的金额返回是&发送金额\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    //给用户转帐\r\n    function sendMoneyToUser(address userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n\r\n    //计算分红\r\n    function calStaticProfit(address userAddr) external onlyWhitelistAdmin returns (uint)\r\n    {\r\n        return calStaticProfitInner(userAddr);\r\n    }\r\n\r\n    function calStaticProfitInner(address userAddr) private returns (uint)\r\n    {\r\n        //当前回合User\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0) {//当前回合用户未投注\r\n            return 0;\r\n        }\r\n\r\n        //获取分红百分比\r\n        uint scale = getScByLevel(user.staticLevel);\r\n        uint allStatic = 0;\r\n        for (uint i = user.staticFlag; i < user.invests.length; i++) {//遍历当前回合所有投注金额\r\n            //投注\r\n            Invest storage invest = user.invests[i];\r\n            //投注时间\r\n            uint startDay = invest.investTime.sub(8 hours).div(1 days).mul(1 days);\r\n            //已投注多少天\r\n            uint staticGaps = now.sub(8 hours).sub(startDay).div(1 days);\r\n            //投注解锁日期\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            //判断是否超过5天\r\n            if (staticGaps > 5) {\r\n                staticGaps = 5;\r\n            }\r\n            if (staticGaps > invest.times) {\r\n                allStatic += staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(1000);\r\n                invest.times = staticGaps;\r\n            }\r\n\r\n            if (unlockDay >= 5) {\r\n                user.staticFlag++;\r\n                user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n                user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n                user.staticLevel = getLevel(user.freezeAmount);\r\n            }\r\n        }\r\n        allStatic = allStatic.mul(getCoefficientInner()).div(100);\r\n        user.allStaticAmount = user.allStaticAmount.add(allStatic);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(allStatic);\r\n        userRoundMapping[rid][userAddr] = user;\r\n        userAssets += allStatic;\r\n        return user.allStaticAmount;\r\n    }\r\n\r\n    //计算分红和节点奖励\r\n    function calDynamicProfit(uint start, uint end) external onlyWhitelistAdmin {\r\n        for (uint i = start; i <= end; i++) {\r\n            address userAddr = indexMapping[i];\r\n            User memory user = userRoundMapping[rid][userAddr];\r\n            calStaticProfitInner(userAddr);\r\n            if (user.freezeAmount >= 1 * ethWei) {\r\n                uint scale = getScByLevel(user.staticLevel);\r\n                calUserDynamicProfit(user.referrer, user.freezeAmount, scale);\r\n            }\r\n        }\r\n        checkVote();\r\n    }\r\n\r\n    //外部注册用户\r\n    function registerUserInfo(address user, string inviteCode, string referrer) external onlyOwner {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    //计算节点奖励\r\n    function calUserDynamicProfit(string memory referrer, uint money, uint shareSc) internal {\r\n        string memory tmpReferrer = referrer;\r\n        for (uint i = 1; i <= 30; i++) {\r\n            if (compareStr(tmpReferrer, \"\")) {\r\n                break;\r\n            }\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            User storage calUser = userRoundMapping[rid][tmpUserAddr];\r\n\r\n            uint fireSc = getFireScByLevel(calUser.staticLevel);\r\n            uint recommendSc = getRecommendScaleByLevelAndTim(calUser.dynamicLevel, i);\r\n            uint moneyResult = 0;\r\n            if (money <= calUser.freezeAmount.add(calUser.unlockAmount)) {\r\n                moneyResult = money;\r\n            } else {\r\n                moneyResult = calUser.freezeAmount.add(calUser.unlockAmount);\r\n            }\r\n\r\n            if (recommendSc != 0) {\r\n                uint tmpDynamicAmount = moneyResult.mul(shareSc).mul(fireSc).mul(recommendSc);\r\n                tmpDynamicAmount = tmpDynamicAmount.div(1000).div(10).div(100);\r\n\r\n                tmpDynamicAmount = tmpDynamicAmount.mul(getCoefficientInner()).div(100);\r\n                calUser.allDynamicAmount = calUser.allDynamicAmount.add(tmpDynamicAmount);\r\n                calUser.hisDynamicAmount = calUser.hisDynamicAmount.add(tmpDynamicAmount);\r\n                userAssets += tmpDynamicAmount;\r\n            }\r\n\r\n            tmpReferrer = calUser.referrer;\r\n        }\r\n    }\r\n\r\n    //检查是否需要投票\r\n    function checkVote() internal {\r\n        uint thisBalance = address(this).balance;\r\n        uint sc = thisBalance.mul(100).div(userAssets);\r\n        if (sc < 80 && sc > 60 && voteStartSc == 80) {\r\n            voteStart(60);\r\n        } else if (sc < 60 && sc > 40 && voteStartSc == 60) {\r\n            voteStart(40);\r\n        } else if (sc < 40 && sc > 20 && voteStartSc == 40) {\r\n            voteStart(20);\r\n        } else if (sc < 20 && sc > 0 && voteStartSc == 20) {\r\n            voteStart(0);\r\n        }\r\n    }\r\n\r\n    //投票开始\r\n    function voteStart(uint nextSc) internal {\r\n        voteStartSc = nextSc;\r\n        gameStatus = 2;\r\n        voteEndTime = now.add(120 minutes);\r\n        seizeEndTime = now.add(30 minutes);\r\n        emit VoteStart(now, voteEndTime);\r\n    }\r\n\r\n    //赎回投注\r\n    function redeem()\r\n    public\r\n    isHuman() {\r\n        require(now > startTime && gameStatus == 1, \"now not withdrawal\");\r\n        //当前回合用户\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user not exist\");\r\n        //记算分红\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        //解冻的投注金额\r\n        uint sendMoney = user.unlockAmount;\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n\r\n        if (!isEnough) {//余额不够结束游戏\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney > 0) {\r\n            //向用户转帐\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            //清空解冻金额\r\n            user.unlockAmount = 0;\r\n            //重新记算用户分红等级\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            //重新记算用户节点奖励等级\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount);\r\n            //减去用户总资产\r\n            userAssets -= resultMoney;\r\n            //减去投票次数\r\n            user.votes -= (resultMoney.div(ethWei));\r\n            //检查是否需要投票\r\n            checkVote();\r\n            //赎回日志\r\n            emit LogRedeem(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\r\n    //投票，voteCount投票数量，voteIntent投票意向，0重启,其它继续\r\n    function vote(uint voteCount, uint voteIntent) public isHuman() {\r\n        require(voteCount > 0, \"vote count error\");\r\n        require(gameStatus == 2 && voteEndTime > now, \"vote not start\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.votes >= voteCount, \"vote count error\");\r\n        if (voteIntent == 0) {\r\n            voteResult[0] += voteCount;\r\n        } else {\r\n            voteResult[1] += voteCount;\r\n        }\r\n        user.votes -= voteCount;\r\n    }\r\n\r\n    //复投,单位:wei\r\n    function reInvestIn(uint investAmount) public isHuman() {\r\n        require(now > startTime && gameStatus == 1, \"invest is not allowed now\");\r\n        require(investAmount == investAmount.div(ethWei).mul(ethWei), \"invalid msg value\");\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.unlockAmount >= investAmount && investAmount>0,\"reinvest count error\");\r\n        uint allFreezeAmount = user.freezeAmount.add(investAmount);\r\n        require(allFreezeAmount <= 15 * ethWei, \"can not beyond 15 eth\");\r\n        user.unlockAmount = user.unlockAmount.sub(investAmount);\r\n        user.freezeAmount = user.freezeAmount.add(investAmount);\r\n        user.staticLevel = getLevel(user.freezeAmount);\r\n        user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n\r\n        //本轮投注实体\r\n        Invest memory invest = Invest(msg.sender, investAmount, now, 0);\r\n        //加入用户投注数组\r\n        user.invests.push(invest);\r\n        user.votes-=(investAmount.div(ethWei));\r\n    }\r\n\r\n    //获取风险收益倍数\r\n    function getCoefficient() public view returns (uint) {\r\n        return getCoefficientInner();\r\n    }\r\n\r\n    function getCoefficientInner() internal view returns (uint) {\r\n        if (userAssets == 0) {\r\n            return 100;\r\n        }\r\n        uint thisBalance = address(this).balance;\r\n        uint coefficient = thisBalance.mul(100).div(userAssets);\r\n        if (coefficient >= 80) {\r\n            return 100;\r\n        }\r\n        if (coefficient >= 60) {\r\n            return 125;\r\n        }\r\n        if (coefficient >= 40) {\r\n            return 167;\r\n        }\r\n        if (coefficient >= 20) {\r\n            return 250;\r\n        }\r\n        if (coefficient > 0) {\r\n            return 300;\r\n        }\r\n        return 100;\r\n    }\r\n\r\n    //回合结束\r\n    function endRound() private {\r\n        //回合数累加\r\n        rid++;\r\n        gameStatus = 1;\r\n        //清空所有用户资产\r\n        userAssets = 0;\r\n        //游戏重启后6小时后再开始\r\n        startTime = now.add(period).div(1 hours).mul(1 hours);\r\n        //重置票投信息\r\n        voteStartSc = 80;\r\n        voteResult = [0,0];\r\n        voteEndTime = 0;\r\n    }\r\n\r\n    //判断邀请码是否已经使用\r\n    function isUsed(string memory code) public view returns (bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    //根据邀请码查询用户地址\r\n    function getUserAddressByCode(string memory code) public view returns (address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    //给专向帐户转帐6%\r\n    function sendFeetoAdmin(uint amount) private {\r\n        devAddr.transfer(amount.div(16));\r\n    }\r\n\r\n    //获取游戏信息\r\n    function getGameInfo() public isHuman() view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        uint coeff = getCoefficientInner();\r\n        uint balance = address(this).balance;\r\n        return (\r\n        rid, //游戏回合\r\n        uid, //最后一个用户id\r\n        startTime, //游戏开始时间\r\n        balance, //合约余额\r\n        userAssets, //用户总权益\r\n        investCount, //总投注次数\r\n        investMoney, //总投注金额\r\n        rInvestCount[rid], //本回合投注次数\r\n        rInvestMoney[rid], //本回合投注金额\r\n        coeff, //分红系数\r\n        gameStatus,//游戏状态，1游戏中,2投票中\r\n        voteStartSc //下一次投票阀值\r\n        );\r\n    }\r\n\r\n    //获取抢注信息\r\n    function getSeizeInfo(uint r) public isHuman() view returns (address, uint, uint) {\r\n        uint thisBalance = address(this).balance;\r\n        uint coefficient = thisBalance.mul(100).div(userAssets);\r\n        uint mult = 0;\r\n        if (coefficient > 60) {\r\n            mult = 3;\r\n        } else if (coefficient > 40) {\r\n            mult = 4;\r\n        } else if (coefficient > 20) {\r\n            mult = 6;\r\n        } else if (coefficient > 0) {\r\n            mult = 8;\r\n        } else {\r\n            mult = 10;\r\n        }\r\n        return (\r\n        lastSeizeInvest[r].userAddress, //抢注地址\r\n        lastSeizeInvest[r].seizeAmount, //抢注金额\r\n        mult //抢注奖励倍数\r\n        );\r\n    }\r\n\r\n    //获取投票信息\r\n    function getVoteResult() public isHuman view returns (uint, uint, uint, uint){\r\n        return (\r\n        seizeEndTime, //抢注结束时间戳\r\n        voteEndTime, //投票结束时间戳\r\n        voteResult[0], //同意重启票数\r\n        voteResult[1]//不同意重启票数\r\n        );\r\n    }\r\n\r\n\r\n    //获取用户信息\r\n    function getUserInfo(address user, uint roundId) public isHuman() view returns (uint[11] memory ct, uint inviteCount, string memory inviteCode, string memory referrer) {\r\n        if (roundId == 0) {\r\n            roundId = rid;\r\n        }\r\n\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n        ct[0] = userInfo.id;\r\n        //userid\r\n        ct[1] = userInfo.staticLevel;\r\n        //用户等级\r\n        ct[2] = userInfo.dynamicLevel;\r\n        //用户可获得节点奖励级数\r\n        ct[3] = userInfo.allInvest;\r\n        //总投注金额\r\n        ct[4] = userInfo.freezeAmount;\r\n        //冻结本金\r\n        ct[5] = userInfo.unlockAmount;\r\n        //可赎回本金\r\n        ct[6] = userInfo.allStaticAmount;\r\n        //当前回合分红收益\r\n        ct[7] = userInfo.allDynamicAmount;\r\n        //当前回合节点收益\r\n        ct[8] = userInfo.hisStaticAmount;\r\n        //总分红收益\r\n        ct[9] = userInfo.hisDynamicAmount;\r\n        //总节点收益\r\n        ct[10] = userInfo.votes;\r\n        //可用投票数量\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        return (ct, userGlobal.id==0?0:userGlobal.inviteCount, userGlobal.inviteCode, userGlobal.referrer);\r\n    }\r\n\r\n    //获取最新可提现余额\r\n    function getLatestUnlockAmount(address userAddr) public view returns (uint)\r\n    {\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        uint allUnlock = user.unlockAmount;\r\n        for (uint i = user.staticFlag; i < user.invests.length; i++) {\r\n            Invest memory invest = user.invests[i];\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            if (unlockDay >= 5) {\r\n                allUnlock = allUnlock.add(invest.investAmount);\r\n            }\r\n        }\r\n        return allUnlock;\r\n    }\r\n\r\n    //新用户注册\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        uid++;\r\n        userGlobal.id = uid;\r\n        userGlobal.userAddress = user;\r\n        userGlobal.inviteCode = inviteCode;\r\n        userGlobal.referrer = referrer;\r\n        userGlobal.inviteCount = 0;\r\n\r\n        addressMapping[inviteCode] = user;\r\n        indexMapping[uid] = user;\r\n\r\n        address parentAddr = getUserAddressByCode(referrer);\r\n        UserGlobal storage parent = userMapping[parentAddr];\r\n        parent.inviteCount += 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div zero\");\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"lower sub bigger\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"mod zero\");\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"calDynamicProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"getRecommendScaleByLevelAndTim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLineLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"investIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investAmount\",\"type\":\"uint256\"}],\"name\":\"reInvestIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"ct\",\"type\":\"uint256[11]\"},{\"name\":\"inviteCount\",\"type\":\"uint256\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVoteResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_str\",\"type\":\"string\"},{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"compareStr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"calStaticProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"}],\"name\":\"seizeInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteComplete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getUserAddressByCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"registerUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoefficient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voteCount\",\"type\":\"uint256\"},{\"name\":\"voteIntent\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getFireScByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"getSeizeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getLatestUnlockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getScByLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inviteCode\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"LogInvestIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"VoteStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"SeizeInvestNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GameFair","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://54d1098fc974c70f925a2b28f22f46b7729f07b6d604376a9afe9520fb1c3f0e"}]}