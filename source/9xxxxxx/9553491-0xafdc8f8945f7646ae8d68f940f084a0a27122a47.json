{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary StringUtil {\r\n    /*\r\n     * 字符串连接\r\n     */\r\n    function concat(string memory self, string memory str) pure public returns(string memory) {\r\n        bytes memory selfBytes = bytes(self);\r\n        bytes memory strBytes = bytes(str);\r\n        \r\n        uint selfLen = selfBytes.length;\r\n        uint strLen = strBytes.length;\r\n        \r\n        if (selfLen == 0 && strLen == 0) {\r\n            return self;\r\n        } else if (selfLen == 0) {\r\n            return str;\r\n        } else if (strLen == 0) {\r\n            return self;\r\n        }\r\n        \r\n        uint length = selfLen + strLen;\r\n        bytes memory temp = new bytes(length);\r\n        uint index = 0;\r\n        for (uint i = 0 ; i < selfLen ; i++) {\r\n            temp[index++] = selfBytes[i];\r\n        }\r\n        for (uint i = 0 ; i < strLen ; i++) {\r\n            temp[index++] = strBytes[i];\r\n        }\r\n        \r\n        return string(temp);\r\n    }\r\n    \r\n    /*\r\n     * 字符串比较，self>str => 1，self<str => -1，self=str => 0\r\n     */\r\n    function compare(string memory self, string memory str) pure public returns(int) {\r\n        bytes memory selfBytes = bytes(self);\r\n        bytes memory strBytes = bytes(str);\r\n        \r\n        uint selfLen = selfBytes.length;\r\n        uint strLen = strBytes.length;\r\n        \r\n        uint minLen = selfLen;\r\n        if (selfLen > strLen) {\r\n            minLen = strLen;\r\n        }\r\n        \r\n        for (uint i = 0 ; i < minLen ; i++) {\r\n            if (selfBytes[i] < strBytes[i]) {\r\n                return -1;\r\n            } else if (selfBytes[i] > strBytes[i]) {\r\n                return 1;\r\n            }\r\n        }\r\n        \r\n        if (selfLen < strLen) {\r\n            return -1;\r\n        } else if (selfLen > strLen) {\r\n            return 1;\r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    \r\n    /*\r\n     * 字符串是否相同  \r\n     */\r\n    function equals(string memory self, string memory str) pure public returns(bool) {\r\n        return compare(self, str) == 0;\r\n    }\r\n\r\n    /*\r\n     *  获取子字符串第一次出现的位置下标\r\n     */\r\n    function indexOf(string memory self, string memory str) pure public returns(int) {\r\n        bytes memory selfBytes = bytes(self);\r\n        bytes memory strBytes = bytes(str);\r\n        \r\n        uint selfLen = selfBytes.length;\r\n        uint strLen = strBytes.length;\r\n        \r\n        if (selfLen < 1 || strLen < 1 || selfLen < strLen) {\r\n            return -1;\r\n        }\r\n        \r\n        if (selfLen > 2 ** 128 - 1) {\r\n            return -1;\r\n        }\r\n        \r\n        uint index = 0;\r\n        for (uint i = 0 ; i < selfLen ; i++) {\r\n            if (selfBytes[i] == strBytes[0]) {\r\n                index = 1;\r\n                while (index < strLen && (i + index) < selfLen && selfBytes[i + index] == strBytes[index]) {\r\n                    index++;\r\n                }\r\n                \r\n                if (index == strLen) {\r\n                    return int(i);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return -1;\r\n    }\r\n    \r\n    /*\r\n     *   将uint256转成字符串 \r\n     */\r\n    function fromUint256(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\ncontract TestDiary {\r\n    using StringUtil for string;\r\n    \r\n    struct Diary {\r\n        uint id;\r\n        uint time;\r\n        uint star;\r\n        string phone;\r\n        string content;\r\n    }\r\n    \r\n    uint private index = 0;\r\n    \r\n    mapping(uint=>Diary) private diaries;\r\n    mapping(string=>uint[]) private phoneDiaries;\r\n    \r\n    function getTotal() view public returns(uint) {\r\n        return index;\r\n    }\r\n    \r\n    function star(uint id) public {\r\n        require(diaries[id].time > 0, \"日记不存在!\");\r\n        diaries[id].star++;\r\n    }\r\n    \r\n    function getStar(uint id) view public returns(uint) {\r\n        require(diaries[id].time > 0, \"日记不存在!\");\r\n        return diaries[id].star;\r\n    }\r\n    \r\n    function publish(string memory phone, string memory content) public {\r\n        require(keccak256(bytes(phone)) != keccak256(\"\"), \"Phone 不能为空\");\r\n        require(keccak256(bytes(content)) != keccak256(\"\"), \"Content 不能为空\");\r\n        \r\n        uint _id = index++;\r\n        Diary memory diary = Diary({\r\n            id : _id,\r\n            phone : phone,\r\n            content : content,\r\n            time : now,\r\n            star : 0\r\n        });\r\n\r\n        diaries[_id] = diary;\r\n        if (phoneDiaries[phone].length > 0) {\r\n            phoneDiaries[phone].push(_id);\r\n        } else {\r\n            phoneDiaries[phone]=[_id];\r\n        }\r\n    }\r\n    \r\n    function getIdsByPhone(string memory phone) view public returns(uint[] memory) {\r\n        return phoneDiaries[phone];\r\n    }\r\n    \r\n    function getByContentId(uint id) view public returns(string memory) {\r\n        require(diaries[id].time > 0, \"日记不存在!\");\r\n        return diaries[id].content;\r\n    }\r\n    \r\n    function getById(uint id) view public returns(uint, uint, uint, string memory, string memory) {\r\n        require(diaries[id].time > 0, \"日记不存在!\");\r\n        Diary memory diary = diaries[id];\r\n        return (diary.id, diary.time, diary.star, diary.phone, diary.content);\r\n    }\r\n    \r\n    function diaryToJsonString(Diary memory diary) pure private returns(string memory) {\r\n        string memory temp = \"{id:\";\r\n        temp = temp.concat(StringUtil.fromUint256(diary.id));\r\n        temp = temp.concat(\",phone:'\");\r\n        temp = temp.concat(diary.phone);\r\n        temp = temp.concat(\"',content:'\");\r\n        temp = temp.concat(diary.content);\r\n        temp = temp.concat(\"',time:\");\r\n        temp = temp.concat(StringUtil.fromUint256(diary.time));\r\n        temp = temp.concat(\",star:\");\r\n        temp = temp.concat(StringUtil.fromUint256(diary.star));\r\n        temp = temp.concat(\"}\");\r\n        \r\n        return temp;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getByContentId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"}],\"name\":\"getIdsByPhone\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"publish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"star\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TestDiary","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://7da7f262893ec6d89bc62f56b7ca40b810d076d00172b5682cea905e42ab2f6f"}]}