{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n/**\r\n* @author ESPAY PTY LTD.\r\n*/\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n*      functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n    \r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev function thet change the owner of the contract   \r\n    * @param _newOwner The address of the new owner of the contract \r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner { \r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Authenticity\r\n * @dev Authenticity contract for authenticate ERC223 contracts.\r\n*/\r\ncontract Authenticity is Ownable{\r\n    \r\n    address[] private contracts;\r\n    \r\n    /**\r\n    * @dev Throws if _addr address was not contract address.\r\n    */\r\n    modifier withContract(address _addr){\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        require(length > 0);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev constructor for deploy Authenticity contract with _contractAddress.\r\n    * @param _contractAddress address of ERC223 contract that need to authenticate.\r\n    */\r\n    constructor(address _contractAddress) public {\r\n        contracts.push(_contractAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev getAddress for check checkAddress was authenticate or not.\r\n    * @param checkAddress address of ERC223 contract that check for authenticate.\r\n    * @return true if getAddress execute successfully.\r\n    */\r\n    function getAddress(address checkAddress) public view withContract(checkAddress) returns (bool success) {\r\n        for(uint i = 0; i<contracts.length;i++ )\r\n        if(checkAddress==contracts[i]) success=true;\r\n    }\r\n    \r\n    /**\r\n    * @dev addContract for add _contractAddress into authenticate contract.\r\n    * @param _contractAddress address of ERC223 contract that need to authenticate.\r\n    * @return true if addContract execute successfully.\r\n    */\r\n    function addContract(address _contractAddress) onlyOwner withContract(_contractAddress) public returns (bool success){\r\n        if(!getAddress(_contractAddress)) contracts.push(_contractAddress);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev that return total number of authenticated contracts.\r\n    * @return total authenticated addresses.\r\n    */\r\n    function getAddresses() public view returns (uint){\r\n        return contracts.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkAddress\",\"type\":\"address\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Authenticity","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b3ef897268c656fb090431845aae9341e416add4","Library":"","LicenseType":"None","SwarmSource":"bzzr://5be3a2ca1600755d3b9f0b570e0eabf043c51540a6b1f3a04707f152cb744940"}]}