{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: BlockRocket.tech.\n\n*/\n\npragma solidity ^0.5.5;\n\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    \n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    \n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    \n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract WhitelistAdminRole is Context {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(_msgSender());\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(_msgSender());\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\ncontract WhitelistedRole is Context, WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(_msgSender());\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\ncontract AccessWhitelist is WhitelistedRole {\n    constructor() public {\n        super.addWhitelisted(msg.sender);\n    }\n}\n\ncontract AccessControls {\n    AccessWhitelist public accessWhitelist;\n\n    constructor(AccessWhitelist _accessWhitelist) internal {\n        accessWhitelist = _accessWhitelist;\n    }\n\n    modifier onlyWhitelisted() {\n        require(accessWhitelist.isWhitelisted(msg.sender), \"Caller not whitelisted\");\n        _;\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(accessWhitelist.isWhitelistAdmin(msg.sender), \"Caller not whitelist admin\");\n        _;\n    }\n\n    function updateAccessWhitelist(AccessWhitelist _accessWhitelist) external onlyWhitelistAdmin {\n        accessWhitelist = _accessWhitelist;\n    }\n}\n\ncontract CommissionSplitter is AccessControls {\n    using SafeMath for uint256;\n\n    address public platform;\n    uint256 public platformSplit;\n\n    address public partner;\n    uint256 public partnerSplit;\n\n    constructor(AccessWhitelist _accessWhitelist, address _platform, uint256 _platformSplit, address _partner, uint256 _partnerSplit)\n        AccessControls(_accessWhitelist) public {\n        require(_platformSplit.add(_partnerSplit) == 100, \"Split percentages are not setup correctly\");\n        platform = _platform;\n        platformSplit = _platformSplit;\n        partner = _partner;\n        partnerSplit = _partnerSplit;\n    }\n\n    function () external payable {\n        uint256 singleUnitOfValue = msg.value.div(100);\n\n        uint256 amountToSendPlatform = singleUnitOfValue.mul(platformSplit);\n        (bool platformSuccess,) = platform.call.value(amountToSendPlatform)(\"\");\n        require(platformSuccess, \"Failed to send split to platform\");\n\n        uint256 amountToSendPartner = singleUnitOfValue.mul(partnerSplit);\n        (bool partnerSuccess,) = partner.call.value(amountToSendPartner)(\"\");\n        require(partnerSuccess, \"Failed to send split to partner\");\n    }\n\n    function updatePlatform(address _platform) external onlyWhitelisted {\n        platform = _platform;\n    }\n\n    function updatePartner(address _partner) external onlyWhitelisted {\n        partner = _partner;\n    }\n\n    function updateSplit(uint256 _platformSplit, uint256 _partnerSplit) external onlyWhitelisted {\n        require(_platformSplit.add(_partnerSplit) == 100, \"Split percentages are not setup correctly\");\n        platformSplit = _platformSplit;\n        partnerSplit = _partnerSplit;\n    }\n}\n\ncontract ERC20Airdropper is AccessControls {\n    using SafeMath for uint256;\n\n    event Transfer(\n        address indexed _token,\n        address indexed _caller,\n        uint256 _recipientCount,\n        uint256 _totalTokensSent\n    );\n\n    event PricePerTxChanged(\n        address indexed _caller,\n        uint256 _oldPrice,\n        uint256 _newPrice\n    );\n\n    event EtherMoved(\n        address indexed _caller,\n        address indexed _to,\n        uint256 _amount\n    );\n\n    event TokensMoved(\n        address indexed _caller,\n        address indexed _to,\n        uint256 _amount\n    );\n\n    event CreditsAdded(\n        address indexed _caller,\n        address indexed _to,\n        uint256 _amount\n    );\n\n    event CreditsRemoved(\n        address indexed _caller,\n        address indexed _to,\n        uint256 _amount\n    );\n\n    mapping(address => uint256) public credits;\n\n    uint256 public pricePerTx = 0.01 ether;\n\n    CommissionSplitter public splitter;\n\n    constructor(AccessWhitelist _accessWhitelist, CommissionSplitter _splitter)\n        AccessControls(_accessWhitelist) public {\n        splitter = _splitter;\n    }\n\n    \n    function () external payable {}\n\n    function transfer(address _token, address[] calldata _addresses, uint256[] calldata _values) payable external returns (bool) {\n        require(_addresses.length == _values.length, \"Address array and values array must be same length\");\n\n        require(credits[msg.sender] > 0 || msg.value >= pricePerTx, \"Must have credit or min value\");\n\n        uint256 totalTokensSent;\n        for (uint i = 0; i < _addresses.length; i += 1) {\n            require(_addresses[i] != address(0), \"Address invalid\");\n            require(_values[i] > 0, \"Value invalid\");\n\n            IERC20(_token).transferFrom(msg.sender, _addresses[i], _values[i]);\n            totalTokensSent = totalTokensSent.add(_values[i]);\n        }\n\n        if (msg.value == 0 && credits[msg.sender] > 0) {\n            credits[msg.sender] = credits[msg.sender].sub(1);\n        } else {\n            (bool splitterSuccess,) = address(splitter).call.value(msg.value)(\"\");\n            require(splitterSuccess, \"Failed to transfer to the commission splitter\");\n        }\n\n        emit Transfer(_token, msg.sender, _addresses.length, totalTokensSent);\n\n        return true;\n    }\n\n    function moveEther(address payable _account) onlyWhitelistAdmin external returns (bool)  {\n        uint256 contractBalance = address(this).balance;\n        _account.transfer(contractBalance);\n        emit EtherMoved(msg.sender, _account, contractBalance);\n        return true;\n    }\n\n    function moveTokens(address _token, address _account) external onlyWhitelistAdmin returns (bool) {\n        uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(_account, contractTokenBalance);\n        emit TokensMoved(msg.sender, _account, contractTokenBalance);\n        return true;\n    }\n\n    function addCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {\n        credits[_to] = credits[_to].add(_amount);\n        emit CreditsAdded(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function reduceCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {\n        credits[_to] = credits[_to].sub(_amount);\n        emit CreditsRemoved(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function setPricePerTx(uint256 _pricePerTx) external onlyWhitelisted returns (bool) {\n        uint256 oldPrice = pricePerTx;\n        pricePerTx = _pricePerTx;\n        emit PricePerTxChanged(msg.sender, oldPrice, pricePerTx);\n        return true;\n    }\n\n    function creditsOfOwner(address _owner) external view returns (uint256) {\n        return credits[_owner];\n    }\n\n    function updateCommissionSplitter(CommissionSplitter _splitter) external onlyWhitelistAdmin {\n        splitter = _splitter;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"_accessWhitelist\",\"type\":\"address\"},{\"internalType\":\"contract CommissionSplitter\",\"name\":\"_splitter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreditsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EtherMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"PricePerTxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_recipientCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokensSent\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessWhitelist\",\"outputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"creditsOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"moveEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"moveTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reduceCredit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerTx\",\"type\":\"uint256\"}],\"name\":\"setPricePerTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"contract CommissionSplitter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"_accessWhitelist\",\"type\":\"address\"}],\"name\":\"updateAccessWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CommissionSplitter\",\"name\":\"_splitter\",\"type\":\"address\"}],\"name\":\"updateCommissionSplitter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20Airdropper","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006f0f2f8ca9a0b69fd6a5beb6922f3b9c22c815d600000000000000000000000097b94df645dc04be10db63537fd431205d1b7c84","Library":"","LicenseType":"","SwarmSource":"bzzr://ac98c511967bfac774abed937585c0e8b09edd17aeb80539d65114b87c598263"}]}