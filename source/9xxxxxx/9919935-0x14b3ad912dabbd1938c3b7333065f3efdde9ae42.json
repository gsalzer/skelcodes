{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n/**\r\n * @title Event-driven open-add Ether airdrop for members.\r\n * @author Ross_Campbell, Bill_Warren and Scott H Stevenson of LexDAO\r\n */\r\n\r\ninterface IToken { \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract MemberDripDrop {\r\n\r\n    uint256 public ethDrip;\r\n    uint256 public tokenDrip;\r\n    IToken public dripToken;\r\n    address payable[] members;\r\n    address payable public secretary;\r\n    \r\n    mapping(address => Member) public memberList;\r\n    \r\n    struct Member {\r\n        uint256 memberIndex;\r\n        bool exists;\r\n    }\r\n\r\n    modifier onlySecretary() {\r\n        require(msg.sender == secretary, \"caller must be secretary\");\r\n        _;\r\n    }\r\n    \r\n    event DripTokenUpdated(address indexed updatedDripToken);\r\n    event TokenDripUpdated(uint256 indexed updatedTokenDrip);\r\n    event EtherDripUpdated(uint256 indexed updatedEtherDrip);\r\n    event MemberAdded(address indexed addedMember);\r\n    event MemberRemoved(address indexed removedMember);\r\n    event SecretaryUpdated(address indexed updatedSecretary);\r\n    \r\n    function() external payable { }\r\n    \r\n    constructor(\r\n        uint256 _ethDrip, \r\n        uint256 _tokenDrip,  \r\n        address dripTokenAddress, \r\n        address payable[] memory _members) payable public { \r\n        for (uint256 i = 0; i < _members.length; i++) {\r\n            require(_members[i] != address(0), \"member address cannot be 0\");\r\n            memberList[_members[i]].memberIndex = members.push(_members[i]) - 1;\r\n            memberList[_members[i]].exists = true;\r\n        }\r\n        \r\n        ethDrip = _ethDrip;\r\n        tokenDrip = _tokenDrip;\r\n        dripToken = IToken(dripTokenAddress);\r\n        secretary = members[0]; \r\n    }\r\n\r\n    function dripERC20() public onlySecretary { \r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            dripToken.transfer(members[i], tokenDrip);\r\n        }\r\n    }\r\n    \r\n    function dropERC20(uint256 drop, address dropTokenAddress) public onlySecretary { \r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop);\r\n        }\r\n    }\r\n    \r\n    function customDropERC20(uint256[] memory drop, address dropTokenAddress) public onlySecretary { \r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            IToken dropToken = IToken(dropTokenAddress);\r\n            dropToken.transferFrom(msg.sender, members[i], drop[i]);\r\n        }\r\n    }\r\n\r\n    function dripEther() public onlySecretary { \r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(ethDrip);\r\n        }\r\n    }\r\n\r\n    function dropEther() payable public onlySecretary { \r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(msg.value);\r\n        }\r\n    }\r\n    \r\n    function customDropEther(uint256[] memory drop) payable public onlySecretary { \r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            members[i].transfer(drop[i]);\r\n        }\r\n    }\r\n    \r\n    function addMember(address payable addedMember) public { \r\n        require(memberList[addedMember].exists != true, \"member already exists\");\r\n        memberList[addedMember].memberIndex = members.push(addedMember) - 1;\r\n        memberList[addedMember].exists = true;\r\n        emit MemberAdded(addedMember);\r\n    }\r\n\r\n    function removeMember(address removedMember) public onlySecretary {\r\n        require(memberList[removedMember].exists = true, \"no such member to remove\");\r\n        uint256 memberToDelete = memberList[removedMember].memberIndex;\r\n        address payable keyToMove = members[members.length-1];\r\n        members[memberToDelete] = keyToMove;\r\n        memberList[keyToMove].memberIndex = memberToDelete;\r\n        memberList[removedMember].exists = false;\r\n        members.length--;\r\n        emit MemberRemoved(removedMember);\r\n    }\r\n\r\n    function updateSecretary(address payable updatedSecretary) public onlySecretary {\r\n        secretary = updatedSecretary;\r\n        emit SecretaryUpdated(updatedSecretary);\r\n    }\r\n\r\n    function updateEtherDrip(uint256 updatedEtherDrip) public onlySecretary {\r\n        ethDrip = updatedEtherDrip;\r\n        emit EtherDripUpdated(updatedEtherDrip);\r\n    }\r\n    \r\n    function updateDripToken(address updatedDripToken) public onlySecretary {\r\n        dripToken = IToken(updatedDripToken);\r\n        emit DripTokenUpdated(updatedDripToken);\r\n    }\r\n    \r\n    function updateTokenDrip(uint256 updatedTokenDrip) public onlySecretary {\r\n        tokenDrip = updatedTokenDrip;\r\n        emit TokenDripUpdated(updatedTokenDrip);\r\n    }\r\n\r\n    function EtherBalance() public view returns (uint256) { \r\n        return address(this).balance;\r\n    }\r\n    \r\n    function TokenBalance() public view returns (uint256) { \r\n        return dripToken.balanceOf(address(this));\r\n    }\r\n\r\n    function Membership() public view returns (address payable[] memory) {\r\n        return members;\r\n    }\r\n\r\n    function MemberCount() public view returns(uint256 memberCount) {\r\n        return members.length;\r\n    }\r\n\r\n    function isMember(address memberAddress) public view returns (bool memberExists) {\r\n        if(members.length == 0) return false;\r\n        return (members[memberList[memberAddress].memberIndex] == memberAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDrip\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dripTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedDripToken\",\"type\":\"address\"}],\"name\":\"DripTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updatedEtherDrip\",\"type\":\"uint256\"}],\"name\":\"EtherDripUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedMember\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedMember\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedSecretary\",\"type\":\"address\"}],\"name\":\"SecretaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updatedTokenDrip\",\"type\":\"uint256\"}],\"name\":\"TokenDripUpdated\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"EtherBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Membership\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addedMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"dropTokenAddress\",\"type\":\"address\"}],\"name\":\"customDropERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"drop\",\"type\":\"uint256[]\"}],\"name\":\"customDropEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dripEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dropTokenAddress\",\"type\":\"address\"}],\"name\":\"dropERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dropEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"memberExists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"updatedDripToken\",\"type\":\"address\"}],\"name\":\"updateDripToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedEtherDrip\",\"type\":\"uint256\"}],\"name\":\"updateEtherDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"updatedSecretary\",\"type\":\"address\"}],\"name\":\"updateSecretary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updatedTokenDrip\",\"type\":\"uint256\"}],\"name\":\"updateTokenDrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MemberDripDrop","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000579b5201f1fd40a2084f162a51339126fb0e88c10000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000a2ddfa736214563cea9aef5100f2e90c402918","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://482ebd2c0727630257c70b95444c4cf638d636f99d59cdf8706c86056029fefe"}]}