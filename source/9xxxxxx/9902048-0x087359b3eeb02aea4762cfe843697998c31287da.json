{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SuterToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract SuterLock {\r\n    using SafeMath for uint256;\r\n\r\n    SuterToken public token;\r\n\r\n    address public admin_address = 0x0713591DBdA93C1E5F407aBEF044a0FaF9F2f212; \r\n    uint256 public user_release_time = 1665331200; // 2022/10/10 0:0:0 UTC+8\r\n    uint256 public contract_release_time = 1625068800; // 2021/7/1 0:0:0 UTC+8\r\n    uint256 public release_ratio = 278;\r\n    uint256 ratio_base = 100000;\r\n    uint256 public amount_per_day = 4104000 ether;\r\n    uint256 day_time = 86400; // Seconds of one day.\r\n    uint256 public day_amount = 360;\r\n    uint256 public start_time;\r\n    uint256 public releasedAmount;\r\n    uint256 public user_lock_amount;\r\n    uint256 public contract_lock_amount;\r\n    uint256 valid_amount;\r\n \r\n    mapping(address => uint256) public lockedAmount;\r\n    // Events.\r\n    event LockToken(address indexed target, uint256 amount);\r\n    event ReleaseToken(address indexed target, uint256 amount); \r\n\r\n    constructor() public {\r\n        token = SuterToken(0xBA8c0244FBDEB10f19f6738750dAeEDF7a5081eb);\r\n        start_time = now;\r\n        valid_amount = (contract_release_time.sub(start_time)).div(day_time).mul(amount_per_day);\r\n    }\r\n\r\n    // Lock tokens for the specified address.\r\n    function lockToken(address _target, uint256 _amount) public admin_only {\r\n        require(_target != address(0), \"target is a zero address\");\r\n        require(now < user_release_time, \"Current time is greater than lock time\");\r\n        // Check if the token is enough.\r\n        if (contract_lock_amount == 0) {\r\n            uint256 num = (now.sub(start_time)).div(day_time).mul(amount_per_day);\r\n            if (num > valid_amount) {\r\n                num = valid_amount;\r\n            }\r\n            require(token.balanceOf(address(this)).sub(num).sub(user_lock_amount) >= _amount, \"Not enough balance\");\r\n        } else {\r\n            require(token.balanceOf(address(this)).add(releasedAmount).sub(contract_lock_amount).sub(user_lock_amount) >= _amount, \"Not enough balance\");\r\n        }\r\n        lockedAmount[_target] = lockedAmount[_target].add(_amount);\r\n        user_lock_amount = user_lock_amount.add(_amount);\r\n        emit LockToken(_target, _amount);\r\n    }\r\n\r\n    // Release the lock-up token at the specified address.\r\n    function releaseTokenToUser(address _target) public {\r\n        uint256 releasable_amount = releasableAmountOfUser(_target);\r\n        if (releasable_amount == 0) {\r\n            return;\r\n        } else {\r\n            token.transfer(_target, releasable_amount);\r\n            emit ReleaseToken(_target, releasable_amount);\r\n            lockedAmount[_target] = 0;\r\n            user_lock_amount = user_lock_amount.sub(releasable_amount);\r\n        }\r\n    }\r\n\r\n    // Release the tokens locked in the contract to the address 'admin_address'.\r\n    function releaseTokenToAdmin() public admin_only {\r\n        require(now > contract_release_time, \"Release time not reached\");\r\n        if(contract_lock_amount == 0) {\r\n            contract_lock_amount = token.balanceOf(address(this)).sub(user_lock_amount);\r\n            if (contract_lock_amount > valid_amount) {\r\n                contract_lock_amount = valid_amount;\r\n            }\r\n        }\r\n        uint256 amount = releasableAmountOfContract();\r\n        require(token.transfer(msg.sender, amount));\r\n        releasedAmount = releasedAmount.add(amount);\r\n        emit ReleaseToken(msg.sender, amount);\r\n    }\r\n\r\n    // This function is used to withdraw the extra Suter tokens in the contract, the caller must be 'admin_address'.\r\n    function withdrawSuter() public admin_only {\r\n        require(contract_lock_amount > 0, \"The number of token releases has not been determined\");\r\n        uint256 lockAmount_ = user_lock_amount.add(contract_lock_amount).sub(releasedAmount); // The amount of tokens locked.\r\n        uint256 remainingAmount_ =  token.balanceOf(address(this)).sub(lockAmount_); // The amount of extra tokens in the contract.\r\n        require(remainingAmount_ > 0, \"No extra tokens\");\r\n        require(token.transfer(msg.sender, remainingAmount_));\r\n    }\r\n\r\n    modifier admin_only() {\r\n        require(msg.sender==admin_address);\r\n        _;\r\n    }\r\n\r\n    function setAdmin( address new_admin_address ) public admin_only returns (bool) {\r\n        require(new_admin_address != address(0), \"New admin is a zero address\");\r\n        admin_address = new_admin_address;\r\n        return true;\r\n    }\r\n\r\n    function withDraw() public admin_only {\r\n        require(address(this).balance > 0, \"Contract eth balance is 0\");\r\n        admin_address.transfer(address(this).balance);\r\n    }\r\n\r\n    function () external payable {    \r\n\r\n    }\r\n\r\n    // The releasable tokens of specified address at the current time.\r\n    function releasableAmountOfUser(address _target) public view returns (uint256) {\r\n        if(now < user_release_time) {\r\n            return 0;\r\n        } else {\r\n            return lockedAmount[_target];\r\n        }\r\n    }\r\n\r\n    // The releasable tokens of contract.\r\n    function releasableAmountOfContract() public view returns (uint256) {\r\n        if(now < contract_release_time) {\r\n            return 0;\r\n        } else {\r\n            uint256 num = contract_lock_amount;\r\n            if (contract_lock_amount == 0) {\r\n                num = token.balanceOf(address(this)).sub(user_lock_amount);\r\n                if (num > valid_amount) {\r\n                    num = valid_amount;\r\n                }\r\n            }\r\n            uint256 _days =(now.sub(contract_release_time)).div(day_time);\r\n            uint256 _amount = num.mul(release_ratio).mul(_days).div(ratio_base);\r\n            if (_amount > num) {\r\n                _amount = num;\r\n            }\r\n            return _amount.sub(releasedAmount);\r\n        }\r\n    }\r\n\r\n    // Get the amount of tokens used for contract lockup.\r\n    function getContractLockAmount() public view returns(uint256 num2) {\r\n        if (contract_lock_amount == 0) {\r\n            uint256 num1 = (now.sub(start_time)).div(day_time).mul(amount_per_day);\r\n            num2 = token.balanceOf(address(this)).sub(user_lock_amount);\r\n            if (num2 > num1) {\r\n                num2 = num1;\r\n            } \r\n        } else {\r\n            num2 = contract_lock_amount;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"release_ratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasableAmountOfContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"day_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenToAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"releasableAmountOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawSuter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_admin_address\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_lock_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"user_release_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"user_lock_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractLockAmount\",\"outputs\":[{\"name\":\"num2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"releaseTokenToUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount_per_day\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_release_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseToken\",\"type\":\"event\"}]","ContractName":"SuterLock","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://692e87ce6557d31fb8776eb7adcc87a8b0c479938a24310131953f8c9fd2d707"}]}