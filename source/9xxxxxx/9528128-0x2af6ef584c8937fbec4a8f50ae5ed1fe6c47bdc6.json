{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n//import \"ds-math/math.sol\";\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\";\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function setOwner(address) public;\r\n    // setAuthority address should conform to DSAuthorityAbstract\r\n    function setAuthority(address) public;\r\n    function setDelay(uint256) public;\r\n    // mapping (bytes32 => bool) public plans;\r\n    function plans(bytes32) public view returns (bool);\r\n    // DSPauseProxyAbstract public proxy;\r\n    function proxy() public view returns (address);\r\n    // uint256 public delay;\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function drop(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dss/OsmAbstract.sol\";\r\n// https://github.com/makerdao/osm\r\ncontract OsmAbstract {\r\n    // mapping (address => uint) public wards;\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    // uint256 public stopped;\r\n    function stopped() public view returns (uint256);\r\n    // address public src;\r\n    function src() public view returns (address);\r\n    // uint16  constant ONE_HOUR = uint16(3600);\r\n    function ONE_HOUR() public view returns (uint16);\r\n    // uint16  public hop = ONE_HOUR;\r\n    function hop() public view returns (uint16);\r\n    // uint64  public zzz;\r\n    function zzz() public view returns (uint64);\r\n    struct Feed {\r\n        uint128 val;\r\n        uint128 has;\r\n    }\r\n    // Feed cur;\r\n    function cur() public view returns (uint128, uint128);\r\n    // Feed nxt;\r\n    function nxt() public view returns (uint128, uint128);\r\n    // mapping (address => uint256) public bud;\r\n    function bud(address) public view returns (uint256);\r\n    event LogValue(bytes32);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() public view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dss/OsmMomAbstract.sol\";\r\n// https://github.com/makerdao/osm-mom\r\ncontract OsmMomAbstract {\r\n    // address public owner;\r\n    function owner() public view returns (address);\r\n    // address public authority;\r\n    function authority() public view returns (address);\r\n    // mapping (bytes32 => address) public osms;\r\n    function osms(bytes32) public view returns (address);\r\n    function setOsm(bytes32, address) public;\r\n    function setOwner(address) public;\r\n    function setAuthority(address) public;\r\n    function stop(bytes32) public;\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dss/JugAbstract.sol\";\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ncontract JugAbstract {\r\n    // mapping (address => uint) public wards;\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    struct Ilk {\r\n        uint256 duty;\r\n        uint256  rho;\r\n    }\r\n    // mapping (bytes32 => Ilk) public ilks;\r\n    function ilks(bytes32) public view returns (uint256, uint256);\r\n    // VatLike public vat;\r\n    function vat() public view returns (address);\r\n    // address public vow;\r\n    function vow() public view returns (address);\r\n    // uint256 public base;\r\n    function base() public view returns (address);\r\n    // uint256 constant ONE = 10 ** 27;\r\n    function ONE() public view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dss/PotAbstract.sol\";\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ncontract PotAbstract {\r\n    // mapping (address => uint256) public wards;\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    // mapping (address => uint256) public pie;  // user Savings Dai\r\n    function pie(address) public view returns (uint256);\r\n    // uint256 public Pie;  // total Savings Dai\r\n    function Pie() public view returns (uint256);\r\n    // uint256 public dsr;  // the Dai Savings Rate\r\n    function dsr() public view returns (uint256);\r\n    // uint256 public chi;  // the Rate Accumulator\r\n    function chi() public view returns (uint256);\r\n    // VatAbstract public vat;  // CDP engine\r\n    function vat() public view returns (address);\r\n    // address public vow;  // debt engine\r\n    function vow() public view returns (address);\r\n    // uint256 public rho;  // time of last drip\r\n    function rho() public view returns (uint256);\r\n    // uint256 public live;  // Access Flag\r\n    function live() public view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function cage() external;\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dss/VatAbstract.sol\";\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    // mapping (address => uint) public wards;\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n    // mapping (address => mapping (address => uint256)) public can;\r\n    function can(address, address) public view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    // mapping (bytes32 => Ilk) public ilks;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    // mapping (bytes32 => mapping (address => Urn)) public urns;\r\n    function urns(bytes32, address) public view returns (uint256, uint256);\r\n    // mapping (bytes32 => mapping (address => uint256)) public gem;  // [wad]\r\n    function gem(bytes32, address) public view returns (uint256);\r\n    // mapping (address => uint256) public dai;  // [rad]\r\n    function dai(address) public view returns (uint256);\r\n    // mapping (address => uint256) public sin;  // [rad]\r\n    function sin(address) public view returns (uint256);\r\n    // uint256 public debt;  // Total Dai Issued    [rad]\r\n    function debt() public view returns (uint256);\r\n    // uint256 public vice;  // Total Unbacked Dai  [rad]\r\n    function vice() public view returns (uint256);\r\n    // uint256 public Line;  // Total Debt Ceiling  [rad]\r\n    function Line() public view returns (uint256);\r\n    // uint256 public live;  // Access Flag\r\n    function live() public view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/dss/FlapAbstract.sol\";\r\n// https://github.com/makerdao/dss/blob/master/src/flap.sol\r\ncontract FlapAbstract {\r\n    //mapping (address => uint256) public wards;\r\n    function wards(address) public view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    struct Bid {\r\n        uint256 bid;\r\n        uint256 lot;\r\n        address guy;  // high bidder\r\n        uint48  tic;  // expiry time\r\n        uint48  end;\r\n    }\r\n    // mapping (uint256 => Bid) public bids;\r\n    function bids(uint256) public view returns (uint256);\r\n    // VatAbstract public vat;\r\n    function vat() public view returns (address);\r\n    // TokenAbstract public gem;\r\n    // gem return address will conform to DSTokenAbstract\r\n    function gem() public view returns (address);\r\n    // uint256 public ONE;\r\n    function ONE() public view returns (uint256);\r\n    // uint256 public beg;\r\n    function beg() public view returns (uint256);\r\n    // uint48 public ttl;\r\n    function ttl() public view returns (uint48);\r\n    // uint48 public tau;\r\n    function tau() public view returns (uint48);\r\n    // uint256 public kicks;\r\n    function kicks() public view returns (uint256);\r\n    // uint256 public live;\r\n    function live() public view returns (uint256);\r\n    event Kick(uint256, uint256, uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function cage(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n//import \"lib/dss-interfaces/src/sai/SaiMomAbstract.sol\";\r\n// https://github.com/makerdao/sai/blob/master/src/mom.sol\r\ncontract SaiMomAbstract {\r\n    // SaiTub  public  tub;\r\n    function tub() public view returns (address);\r\n    // SaiTap  public  tap;\r\n    function tap() public view returns (address);\r\n    // SaiVox  public  vox;\r\n    function vox() public view returns (address);\r\n    function setCap(uint256) public;                  // Debt ceiling\r\n    function setMat(uint256) public;                  // Liquidation ratio\r\n    function setTax(uint256) public;                  // Stability fee\r\n    function setFee(uint256) public;                  // Governance fee\r\n    function setAxe(uint256) public;                  // Liquidation fee\r\n    function setTubGap(uint256) public;               // Join/Exit Spread\r\n    function setPip(address) public;                  // ETH/USD Feed\r\n    function setPep(address) public;                  // MKR/USD Feed\r\n    function setVox(address) public;                  // TRFM\r\n    function setTapGap(uint256) public;               // Boom/Bust Spread\r\n    function setWay(uint256) public;                  // Rate of change of target price (per second)\r\n    function setHow(uint256) public;\r\n    // ds-thing\r\n    // DSAuthority  public  authority;\r\n    function authority() public view returns (address);\r\n    // address      public  owner;\r\n    function owner() public view returns (address);\r\n    function setOwner(address) public;\r\n    function setAuthority(address) public;\r\n}\r\n\r\n\r\ncontract SpellAction is DSMath {\r\n    uint256 constant RAD = 10 ** 45;\r\n    address constant public PAUSE = 0xbE286431454714F511008713973d3B053A2d38f3;\r\n    address constant public CHIEF = 0x9eF05f7F6deB616fd37aC3c959a2dDD25A54E4F5;\r\n    address constant public OSM_MOM = 0x76416A4d5190d071bfed309861527431304aA14f;\r\n    address constant public ETH_OSM = 0x81FE72B5A8d1A857d176C3E7d5Bd2679A9B85763;\r\n    address constant public BAT_OSM = 0xB4eb54AF9Cc7882DF0121d26c5b97E802915ABe6;\r\n    address constant public VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant public JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant public POT = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address constant public FLAP = 0xdfE0fb1bE2a52CDBf8FB962D5701d7fd0902db9f;\r\n    uint256 constant NEW_BEG = 1.02E18; // 2%\r\n\r\n    function execute() external {\r\n        // drip\r\n        PotAbstract(POT).drip();\r\n        JugAbstract(JUG).drip(\"ETH-A\");\r\n        JugAbstract(JUG).drip(\"BAT-A\");\r\n\r\n        // set the global debt ceiling to 183,000,000\r\n        VatAbstract(VAT).file(\"Line\", mul(183000000, RAD));\r\n\r\n        // set the ETH-A debt ceiling to 150,000,000\r\n        // https://vote.makerdao.com/polling-proposal/qmsm1q1hohyctsgxpbm44fomjoukf1d5g9lmpqraikmeoc\r\n        VatAbstract(VAT).file(\"ETH-A\", \"line\", mul(150000000, RAD));\r\n\r\n        // No Sai debt ceiling change this week.\r\n\r\n        // set dsr to 8.0%\r\n        // Previously ETH SF was set to 8.0%, no change this week.\r\n        //  DSR rate was voted to a 0% spread, so we're bringing DSR up to match.\r\n        // https://vote.makerdao.com/polling-proposal/qmss9hnszwr6egq3xn6gpx4u8bz8cajja56rgtanjev1v8\r\n        PotAbstract(POT).file(\"dsr\", 1000000002440418608258400030);\r\n\r\n        // MCD Stability fee is currently at 8% and remains the same this week.\r\n        // https://vote.makerdao.com/polling-proposal/qmzgvzjm4xpm4b1tk2hxhdc6p8f4zqyju38pwqieatmhel\r\n\r\n        // Lower the minimum flap auction bid increase to 2%\r\n        // https://vote.makerdao.com/polling-proposal/qmtsxrqavtczfsseytpypgqrz6z8zb613ikxwhqjv9ytzz\r\n        FlapAbstract(FLAP).file(\"beg\", NEW_BEG);\r\n\r\n        // Increase the Pause to 24 Hours\r\n        OsmAbstract(ETH_OSM).rely(OSM_MOM);\r\n        OsmAbstract(BAT_OSM).rely(OSM_MOM);\r\n        OsmMomAbstract(OSM_MOM).setAuthority(CHIEF);\r\n        OsmMomAbstract(OSM_MOM).setOsm(\"ETH-A\", ETH_OSM);\r\n        OsmMomAbstract(OSM_MOM).setOsm(\"BAT-A\", BAT_OSM);\r\n        DSPauseAbstract(PAUSE).setDelay(60 * 60 * 24);\r\n    }\r\n}\r\n\r\ncontract DssSpell20200221 is DSMath {\r\n    DSPauseAbstract  public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address constant public SAIMOM = 0xF2C5369cFFb8Ea6284452b0326e326DbFdCb867C;\r\n    uint256 constant public NEW_FEE = 1000000002877801985002875644; // 9.5%\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    bool             public done;\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(eta == 0, \"spell-already-scheduled\");\r\n        eta = add(now, DSPauseAbstract(pause).delay());\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // NOTE: 'eta' check should mimic the old behavior of 'done', thus\r\n        // preventing these SCD changes from being executed again.\r\n\r\n        // Sai Stability Fee adjustment to 9.5%\r\n        // https://vote.makerdao.com/polling-proposal/qmaj4fnjeohomnrs8m9cihrfxws4m89bwfu9eh96y8okxw\r\n        SaiMomAbstract(SAIMOM).setFee(NEW_FEE);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAIMOM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell20200221","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://94ffd18a5f0e407b5c44cef38f45def8db9983ebda3c48f9393fd3da02f568f9"}]}