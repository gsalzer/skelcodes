{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.7.0;\r\n\r\ncontract checkBalances {\r\n    \r\n    function getAccountWithBalance(address[] memory addresses) public view returns(address[] memory){\r\n        address[] memory addresses_with_balance = new address[](100);\r\n        uint counter = 0;\r\n        for (uint i=0; i<addresses.length; i++) {\r\n            if(addresses[i].balance > 0){\r\n                addresses_with_balance[counter] = addresses[i];\r\n                counter = counter + 1;\r\n            }\r\n        }\r\n        return addresses_with_balance;\r\n    }\r\n    \r\n    \r\n    function getBalances(address[] memory addresses) public view returns(uint256[] memory){\r\n        uint256[] memory balances = new uint256[](100);\r\n        uint tillLoop = addresses.length;\r\n        if(tillLoop > 100){\r\n            tillLoop = 100;\r\n        }\r\n        for (uint i=0; i< tillLoop; i++) {\r\n            balances[i] = addresses[i].balance;\r\n        }\r\n        return balances;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getAccountWithBalance\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"checkBalances","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://82d53dd20c18453e8dbb92b5738cda449b2e9c42c937a39de4b17b10908408c4"}]}