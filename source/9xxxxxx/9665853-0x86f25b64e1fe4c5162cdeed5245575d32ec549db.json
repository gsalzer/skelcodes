{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title An Ether or token balance scanner\r\n * @author Maarten Zuidhoorn\r\n * @author Luit Hollander\r\n */\r\ncontract BalanceScanner {\r\n  /**\r\n   * @notice Get the Ether balance for all addresses specified\r\n   * @param addresses The addresses to get the Ether balance for\r\n   * @return balances The Ether balance for all addresses in the same order as specified\r\n   */\r\n  function etherBalances(address[] calldata addresses) external view returns (uint256[] memory balances) {\r\n    balances = new uint256[](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      balances[i] = addresses[i].balance;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ERC-20 token balance of `token` for all addresses specified\r\n   * @dev This does not check if the `token` address specified is actually an ERC-20 token\r\n   * @param addresses The addresses to get the token balance for\r\n   * @param token The address of the ERC-20 token contract\r\n   * @return balances The token balance for all addresses in the same order as specified\r\n   */\r\n  function tokenBalances(address[] calldata addresses, address token) external returns (uint256[] memory balances) {\r\n    balances = new uint256[](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      balances[i] = tokenBalance(addresses[i], token);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ERC-20 token balances for multiple contracts, for multiple addresses\r\n   * @dev This does not check if the `token` address specified is actually an ERC-20 token\r\n   * @param addresses The addresses to get the token balances for\r\n   * @param contracts The addresses of the ERC-20 token contracts\r\n   * @return balances The token balances in the same order as the addresses specified\r\n   */\r\n  function tokensBalances(address[] calldata addresses, address[] calldata contracts) external returns (uint256[][] memory balances) {\r\n    balances = new uint256[][](addresses.length);\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      balances[i] = this.tokensBalance(addresses[i], contracts);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get the ERC-20 token balance from multiple contracts for a single owner\r\n    * @param owner The address of the token owner\r\n    * @param contracts The addresses of the ERC-20 token contracts\r\n    * @return balances The token balances in the same order as the addresses specified\r\n   */\r\n  function tokensBalance(address owner, address[] calldata contracts) external returns (uint256[] memory balances) {\r\n    balances = new uint256[](contracts.length);\r\n\r\n    for (uint256 i = 0; i < contracts.length; i++) {\r\n      balances[i] = tokenBalance(owner, contracts[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get the ERC-20 token balance for a single contract\r\n    * @param owner The address of the token owner\r\n    * @param token The address of the ERC-20 token contract\r\n    * @return balance The token balance, or zero if the address is not a contract, or does not implement the `balanceOf`\r\n      function\r\n  */\r\n  function tokenBalance(address owner, address token) internal returns (uint256 balance) {\r\n    balance = 0;\r\n    uint256 size = codeSize(token);\r\n\r\n    if (size > 0) {\r\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(bytes4(0x70a08231), owner));\r\n      if (success) {\r\n        (balance) = abi.decode(data, (uint256));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get code size of address\r\n    * @param _address The address to get code size from\r\n    * @return size Unsigned 256-bits integer\r\n   */\r\n  function codeSize(address _address) internal view returns (uint256 size) {\r\n    assembly {\r\n      size := extcodesize(_address)\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"etherBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"tokensBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"tokensBalances\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"balances\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BalanceScanner","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://19a29637924abb8974696761eab5023a8a6abeb0ac1420955ded266d3b4bc4b4"}]}