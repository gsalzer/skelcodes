{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title ChargBridge\r\n * @dev Charg to Ethereum ERC20 Coin Bridge\r\n */\r\ncontract ChargBridge is Ownable {\r\n\r\n\tusing SafeMath for uint;\r\n\r\n    uint validatorsCount = 0;\r\n    uint validationsRequired = 2;\r\n\r\n    struct Transaction {\r\n\t\taddress initiator;\r\n\t\tuint amount;\r\n\t\tuint validated;\r\n\t\tbool completed;\r\n\t}\r\n\r\n    event FundsReceived(address indexed initiator, uint amount);\r\n\r\n    event ValidatorAdded(address indexed validator);\r\n    event ValidatorRemoved(address indexed validator);\r\n\r\n    event Validated(bytes32 indexed txHash, address indexed validator, uint validatedCount, bool completed);\r\n\r\n    mapping (address => bool) public isValidator;\r\n\r\n    mapping (bytes32 => Transaction) public transactions;\r\n\tmapping (bytes32 => mapping (address => bool)) public validatedBy; // is validated by \r\n\r\n\r\n\tfunction() external payable {\r\n        if ( validatorsCount >= validationsRequired ) {\r\n    \t\temit FundsReceived(msg.sender, msg.value);\r\n        } else {\r\n            revert();\r\n        }\r\n\t}\r\n\r\n\tfunction setValidationsRequired( uint _value ) onlyOwner public {\r\n        require (_value > 0);\r\n        validationsRequired = _value;\r\n\t}\r\n\r\n\tfunction addValidator( address _validator ) onlyOwner public {\r\n        require (!isValidator[_validator]);\r\n        isValidator[_validator] = true;\r\n        validatorsCount = validatorsCount.add(1);\r\n        emit ValidatorAdded(_validator);\r\n\t}\r\n\r\n\tfunction removeValidator( address _validator ) onlyOwner public {\r\n        require (isValidator[_validator]);\r\n        isValidator[_validator] = false;\r\n        validatorsCount = validatorsCount.sub(1);\r\n        emit ValidatorRemoved(_validator);\r\n\t}\r\n\r\n\tfunction validate(bytes32 _txHash, address _initiator, uint _amount) public {\r\n        \r\n        require (isValidator[msg.sender]);\r\n        require ( !transactions[_txHash].completed );\r\n        require ( !validatedBy[_txHash][msg.sender] );\r\n\r\n        if ( transactions[_txHash].initiator == address(0) ) {\r\n            require ( _amount > 0 && address(this).balance > _amount );\r\n            transactions[_txHash].initiator = _initiator;\r\n            transactions[_txHash].amount = _amount;\r\n            transactions[_txHash].validated = 1;\r\n\r\n        } else {\r\n            require ( transactions[_txHash].amount > 0 );\r\n            require ( address(this).balance > transactions[_txHash].amount );\r\n            require ( _initiator == transactions[_txHash].initiator );\r\n            require ( transactions[_txHash].validated < validationsRequired );\r\n            transactions[_txHash].validated = transactions[_txHash].validated.add(1);\r\n        }\r\n        validatedBy[_txHash][msg.sender] = true;\r\n        if (transactions[_txHash].validated >= validationsRequired) {\r\n    \t\t_initiator.transfer(_amount);\r\n            transactions[_txHash].completed = true;\r\n        }\r\n        emit Validated(_txHash, msg.sender, transactions[_txHash].validated, transactions[_txHash].completed);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setValidationsRequired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"name\":\"_initiator\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"initiator\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"validated\",\"type\":\"uint256\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"validatedCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"completed\",\"type\":\"bool\"}],\"name\":\"Validated\",\"type\":\"event\"}]","ContractName":"ChargBridge","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://f06ccf24a56b81eeb115ad569fad02c835c7e05733c48caa299d948e528d3ef8"}]}