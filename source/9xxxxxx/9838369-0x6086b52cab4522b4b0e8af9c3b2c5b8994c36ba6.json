{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.17;\r\n\r\nlibrary SafeMath256 {\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n   require( b<= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n\r\n// A list of owners which will be saved as a list here, \r\n// and the values are the owner’s names. \r\n\r\n\r\n  string [] ownerName;  \r\n  address newOwner; // temp for confirm;\r\n  mapping (address=>bool) owners;\r\n  mapping (address=>uint256) ownerToProfile;\r\n  address owner;\r\n\r\n// all events will be saved as log files\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event AddOwner(address newOwner,string name);\r\n  event RemoveOwner(address owner);\r\n  /**\r\n   * @dev Ownable constructor , initializes sender’s account and \r\n   * set as owner according to default value according to contract\r\n   *\r\n   */\r\n\r\n   // this function will be executed during initial load and will keep the smart contract creator (msg.sender) as Owner\r\n   // and also saved in Owners. This smart contract creator/owner is \r\n   // Mr. Samret Wajanasathian CTO of Shuttle One Pte Ltd (https://www.shuttle.one)\r\n\r\n   constructor() public {\r\n    owner = msg.sender;\r\n    owners[msg.sender] = true;\r\n    uint256 idx = ownerName.push(\"SAMRET WAJANASATHIAN\");\r\n    ownerToProfile[msg.sender] = idx;\r\n\r\n  }\r\n\r\n// // function to check whether the given address is either Wallet address or Contract Address\r\n\r\n//   function isContract(address _addr) internal view returns(bool){\r\n//      uint256 length;\r\n//      assembly{\r\n//       length := extcodesize(_addr)\r\n//      }\r\n//      if(length > 0){\r\n//       return true;\r\n//     }\r\n//     else {\r\n//       return false;\r\n//     }\r\n\r\n//   }\r\n\r\n// function to check if the executor is the owner? This to ensure that only the person \r\n// who has right to execute/call the function has the permission to do so.\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner,\"SZO/ERROR-not-owner\");\r\n    _;\r\n  }\r\n\r\n// This function has only one Owner. The ownership can be transferrable and only\r\n//  the current Owner will only be  able to execute this function.\r\n//  Onwer can be Contract address\r\n  function transferOwnership(address  _newOwner, string memory newOwnerName) public onlyOwner{\r\n    \r\n    uint256 idx;\r\n    if(ownerToProfile[_newOwner] == 0)\r\n    {\r\n    \tidx = ownerName.push(newOwnerName);\r\n    \townerToProfile[_newOwner] = idx;\r\n    }\r\n\r\n\r\n    emit OwnershipTransferred(owner,_newOwner);\r\n    newOwner = _newOwner;\r\n\r\n  }\r\n  \r\n  // Function to confirm New Owner can execute\r\n  function newOwnerConfirm() public returns(bool){\r\n        if(newOwner == msg.sender)\r\n        {\r\n            owner = newOwner;\r\n            newOwner = address(0);\r\n            return true;\r\n        }\r\n        return false;\r\n  }\r\n\r\n// Function to check if the person is listed in a group of Owners and determine\r\n// if the person has the any permissions in this smart contract such as Exec permission.\r\n  \r\n  modifier onlyOwners(){\r\n    require(owners[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n// Function to add Owner into a list. The person who wanted to add a new owner into this list but be an existing\r\n// member of the Owners list. The log will be saved and can be traced / monitor who’s called this function.\r\n  \r\n  function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{\r\n    require(owners[_newOwner] == false,\"SZO/ERROR-already-owner\");\r\n    require(newOwner != msg.sender,\"SZO/ERROR-same-owner-add\");\r\n    if(ownerToProfile[_newOwner] == 0)\r\n    {\r\n    \tuint256 idx = ownerName.push(newOwnerName);\r\n    \townerToProfile[_newOwner] = idx;\r\n    }\r\n    owners[_newOwner] = true;\r\n    emit AddOwner(_newOwner,newOwnerName);\r\n  }\r\n\r\n// Function to remove the Owner from the Owners list. The person who wanted to remove any owner from Owners\r\n// List must be an existing member of the Owners List. The owner cannot evict himself from the Owners\r\n// List by his own, this is to ensure that there is at least one Owner of this ShuttleOne Smart Contract.\r\n// This ShuttleOne Smart Contract will become useless if there is no owner at all.\r\n\r\n  function removeOwner(address _owner) public onlyOwners{\r\n    require(_owner != msg.sender,\"SZO/ERROR-remove-yourself\");  // can't remove your self\r\n    owners[_owner] = false;\r\n    emit RemoveOwner(_owner);\r\n  }\r\n// this function is to check of the given address is allowed to call/execute the particular function\r\n// return true if the given address has right to execute the function.\r\n// for transparency purpose, anyone can use this to trace/monitor the behaviors of this ShuttleOne smart contract.\r\n\r\n  function isOwner(address _owner) public view returns(bool){\r\n    return owners[_owner];\r\n  }\r\n\r\n// Function to check who’s executed the functions of smart contract. This returns the name of \r\n// Owner and this give transparency of whose actions on this ShuttleOne Smart Contract. \r\n\r\n  function getOwnerName(address ownerAddr) public view returns(string memory){\r\n  \trequire(ownerToProfile[ownerAddr] > 0,\"SZO/ERROR-NOT-OWNER-ADDRESS\");\r\n  \treturn ownerName[ownerToProfile[ownerAddr] - 1];\r\n  }\r\n}\r\n\r\n\r\n\r\n// Mandatory basic functions according to ERC20 standard\r\ncontract ERC20 {\r\n\t   event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n       event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n   \t   function totalSupply() public view returns (uint256);\r\n       function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n       function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n       function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n       function approve(address spender, uint256 tokens) public returns (bool success);\r\n       function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n  \r\n\r\n}\r\n\r\ncontract StandarERC20 is ERC20{\r\n  using SafeMath256 for uint256; \r\n     \r\n     mapping (address => uint256) balance;\r\n     mapping (address => mapping (address=>uint256)) allowed;\r\n\r\n\r\n     uint256  totalSupply_; \r\n     \r\n      event Transfer(address indexed from,address indexed to,uint256 value);\r\n      event Approval(address indexed owner,address indexed spender,uint256 value);\r\n\r\n\r\n    function totalSupply() public view returns (uint256){\r\n      return totalSupply_;\r\n    }\r\n\r\n     function balanceOf(address _walletAddress) public view returns (uint256){\r\n        return balance[_walletAddress]; \r\n     }\r\n\r\n\r\n     function allowance(address _owner, address _spender) public view returns (uint256){\r\n          return allowed[_owner][_spender];\r\n        }\r\n\r\n     function transfer(address _to, uint256 _value) public returns (bool){\r\n        require(_value <= balance[msg.sender],\"SZO/ERROR-insufficient-balance\");\r\n        require(_to != address(0),\"SZO/ERROR-address-0\");\r\n\r\n        balance[msg.sender] = balance[msg.sender].sub(_value);\r\n        balance[_to] = balance[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        \r\n        return true;\r\n\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value)\r\n            public returns (bool){\r\n            require (( _value == 0) || ( allowed[msg.sender ] [_spender] == 0),\"SZO/ERROR-Approve\");    \r\n            allowed[msg.sender][_spender] = _value;\r\n\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n            }\r\n\r\n      function transferFrom(address _from, address _to, uint256 _value)\r\n            public returns (bool){\r\n               require(_value <= balance[_from],\"SZO/ERROR-insufficient-balance\");\r\n               require(_value <= allowed[_from][msg.sender],\"SZO/ERROR-insufficient-allowed\"); \r\n               require(_to != address(0),\"SZO/ERROR-sendto-address0\");\r\n\r\n              balance[_from] = balance[_from].sub(_value);\r\n              balance[_to] = balance[_to].add(_value);\r\n              allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n              emit Transfer(_from, _to, _value);\r\n              return true;\r\n      }\r\n\r\n}\r\n\r\ncontract ShuttleOneToken is StandarERC20, Ownable {\r\n  using SafeMath256 for uint256;\r\n  string public name = \"ShuttleOne Token\";\r\n  string public symbol = \"SZO\"; \r\n  uint256 public decimals = 18;\r\n  uint256 public version = 10;\r\n  uint256 public token_price = 500000000000000; // 0.0005 ETH\r\n  uint256 public tokenRedeem = 400000000000000; // 0.0004 ETH\r\n  uint256 public totalSell = 0;\r\n  bool public stopMint = false;\r\n  \r\n  uint256 public _1Token = 1 ether;\r\n  uint256 public HARD_CAP = 230000000 ether;\r\n  uint256 public NEW_HARD_CAP = 230000000 ether; // start new hard cap and hard cap are same value\r\n  uint256 public MINT_PER_YEAR = 11500000 ether; // 11.5 M (5%) Mint per year\r\n  uint256 public mintCount = MINT_PER_YEAR;\r\n  uint256 public MAX_TOKEN_SELL;\r\n  \r\n  uint256 public startTime;\r\n  uint256 public nextMintTime;\r\n  uint256 public nextBuyTime;\r\n  \r\n  // KYC encode Data\r\n  \tstruct KYCData{\r\n\t\tbytes32    KYCData01;\r\n\t\tbytes32    KYCData02;\r\n\t}\r\n\r\n\tKYCData[] internal kycDatas;\r\n\tmapping (address=>uint256) OwnerToKycData; // mapping index with address\r\n   \r\n   mapping (address => bool) public haveKYC;\r\n   mapping (address => bool) public disInterTran; // Allow for internal transfer default = Yes \r\n   mapping (address => bool) public agents;\r\n   \r\n   mapping(address => bool) public whitelist;\r\n   mapping(address => bool) public blacklist;\r\n  \r\n   \r\n  \r\n  address lockContract  = 0x697FD3721B20D7E2e7B99cE2540bB0df2E470c5a; \r\n  \r\n  uint256 public tokenLock = 96800000 ether; // 96.8M Token (GENESIS USERS = 37M,DEV = 23M,FOUNDER = 23M,EQUITY SEED A INVESTORS = 13.8M)\r\n\r\n  constructor() public {\r\n        \r\n    balance[lockContract] = tokenLock;\r\n    haveKYC[lockContract] = true;\r\n    addOwner(lockContract,\"lockContract\");\r\n    \r\n    MAX_TOKEN_SELL = HARD_CAP - tokenLock;\r\n    totalSupply_ += tokenLock;\r\n    emit Transfer(address(0),lockContract,tokenLock);\r\n    startTime = now;\r\n    nextMintTime = startTime + 365 days;\r\n    nextBuyTime = startTime;\r\n  }\r\n  \r\n \r\n  uint256 tokenProfit;\r\n  \r\n  function stopMintToken() public onlyOwners returns(bool){\r\n      stopMint = true;\r\n      return true;\r\n  }\r\n  \r\n  function buyToken() payable public returns(bool){\r\n      require(stopMint == false,\"SZO/ERROR-stopmint\");\r\n      require(msg.value >= token_price,\"SZO/ERROR-buy-lower\");\r\n      require(now - nextBuyTime > 60 seconds,\"SZO/ERROR-wait-buy-time\");\r\n      \r\n      uint256 amount = msg.value / token_price;\r\n      require (amount > 0 ,\" Insufficient eth\" ) ;\r\n      \r\n      amount  = amount * _1Token;\r\n      require(totalSell + amount <= MAX_TOKEN_SELL,\"SZO/ERROR-insufficient-tosell\");\r\n\r\n      tokenProfit += (token_price - tokenRedeem) * amount;\r\n      totalSell += amount;\r\n      totalSupply_ += amount;\r\n      nextBuyTime = now;\r\n      balance[msg.sender] += amount;\r\n      emit Transfer(address(0),msg.sender,amount);\r\n      return true;\r\n  }\r\n  \r\n  function setWhiteList(address _addr,bool _whiteList) public onlyOwners returns(bool){\r\n      whitelist[_addr] = _whiteList;\r\n      return true;\r\n  }\r\n  \r\n  function setBlackList(address _addr,bool _blackList) public onlyOwners returns(bool){\r\n      blacklist[_addr] = _blackList;\r\n      return true;\r\n  }\r\n  \r\n  \r\n  // Token can mint only 11.5 M token per year after reach 230M token mint\r\n    modifier canMintToken(){\r\n    require(whitelist[msg.sender] == true,\"SZO/ERROR-not-whitelist\");\r\n    require(mintCount < MINT_PER_YEAR,\"SZO/ERROR-insufficient-mint-year\");\r\n    _;\r\n    }\r\n  \r\n    function resetMintCount() public onlyOwners returns(bool) {\r\n         if(now > nextMintTime && MINT_PER_YEAR == mintCount && totalSell == MAX_TOKEN_SELL){\r\n              nextMintTime = nextMintTime + 365;\r\n              mintCount = 0;\r\n             return true;\r\n         }\r\n         \r\n         return false;\r\n      }\r\n      \r\n      \r\n       \r\n      \r\n   function mintToken() public payable canMintToken returns(bool){\r\n      require(stopMint == false,\"SZO/ERROR-stopmint02\");\r\n      require(haveKYC[msg.sender] == true,\"SZO/ERROR-not_kyc-mint\");\r\n      require(msg.value >= token_price,\"SZO/ERROR-buy-lower2\");\r\n       \r\n      uint256 amount = msg.value / token_price;\r\n      tokenProfit += (token_price - tokenRedeem) * amount;\r\n      amount  = amount * _1Token;\r\n      \r\n      require(mintCount + amount <= MINT_PER_YEAR,\"SZO/ERROR-insufficient-mint-year2\");\r\n      totalSupply_ += amount;\r\n      mintCount += amount;\r\n      balance[msg.sender] += amount;\r\n      emit Transfer(address(0),msg.sender,amount);\r\n      return true;\r\n     }\r\n  \r\n \r\n\r\n// Add information KYC for standard ERC20 transfer to block only KYC user  \r\n  function transfer(address _to, uint256 _value) public returns (bool){\r\n      require(haveKYC[msg.sender] == true,\"SZO/ERROR-transfer-not-kyc\");\r\n      require(blacklist[msg.sender] == false,\"SZO/ERROR-transfer-blacklist\");\r\n      require(blacklist[_to] == false,\"SZO/ERROR-transfer-to-blacklist\");\r\n      \r\n      //require(haveKYC[_to] == true);  // remove recieve no KYC\r\n\r\n       super.transfer(_to, _value);\r\n  }\r\n  \r\n  //Add on KYC check to StandarERC20 transferFrom function\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n\r\n        require(haveKYC[_from] == true,\"SZO/ERROR-transferfrom-not-kyc\");\r\n        require(blacklist[msg.sender] == false,\"SZO/ERROR-transferfrom-sender-blacklist\");\r\n        require(blacklist[_to] == false,\"SZO/ERROR-transferfrom-to-blacklist\");\r\n        require(blacklist[_from] == false,\"SZO/ERROR-transferfrom-from-blacklist\");\r\n\r\n//      require(haveKYC[_to] == true); // remove recieve no KYC\r\n        super.transferFrom(_from, _to, _value);\r\n   }\r\n    // Set address can allow internal transfer or not. Default are on. Owner of address should disable by them self\r\n  function setNotAllowInterTransfer(bool _allow) public returns(bool){\r\n      disInterTran[msg.sender] = _allow;\r\n      return true;\r\n  }\r\n  \r\n\r\n  \r\n  // This function use only for internal wallet that create by XSE Wallet only\r\n  // sender and reciever  will need to KYC\r\n   function intTransfer(address _from, address _to, uint256 _value) external onlyOwners returns(bool){\r\n   \r\n    require(disInterTran[_from] == false,\"SZO/ERROR-disable-tran\");\r\n    require(balance[_from] >= _value,\"SZO/ERROR-insufficient-balance-intran\");\r\n    require(haveKYC[_from] == true,\"SZO/ERROR-from-no-kyc\");\r\n    require(blacklist[_from] == false,\"SZO/ERROR-intran-from-blacklist\");\r\n    require(blacklist[_to] == false,\"SZO/ERROR-intran-to-blacklist\");\r\n    \r\n  //  require(haveKYC[_to] == true);\r\n        \r\n    balance[_from] -= _value; \r\n    balance[_to] += _value;\r\n    \r\n    emit Transfer(_from,_to,_value);\r\n    return true;\r\n  }\r\n  \r\n   \t// Add KYC Data to blockchain with encode It will have Name Surname National and ID/Passport No.\r\n   \t// Only permission of ShuttleOne can put this data \r\n\tfunction createKYCData(bytes32 _KycData1, bytes32 _kycData2,address  _wallet) onlyOwners public returns(uint256){\r\n\t\trequire(haveKYC[_wallet] == false,\"SZO/ERROR-already-kyc\"); // can't re KYC  if already KYC\r\n\t\t\r\n\t\tuint256 id = kycDatas.push(KYCData(_KycData1, _kycData2));\r\n\t\tOwnerToKycData[_wallet] = id;\r\n        haveKYC[_wallet] = true;\r\n\r\n\t\treturn id;\r\n\t}\r\n  \r\n    //Get Encoding KYC Data \r\n    function getKYCData(address _wallet) public view returns(bytes32 _data1,bytes32 _data2){\r\n        require(haveKYC[_wallet] == true,\"SZO/ERROR-no-kyc\");\r\n        uint256 index = OwnerToKycData[_wallet]-1;\r\n        \r\n        _data1 = kycDatas[index].KYCData01;\r\n        _data2 = kycDatas[index].KYCData02;\r\n    }\r\n    \r\n  \r\n//   //Change token sell price. \r\n    function setTokenPrice(uint256 pricePerToken) public onlyOwners returns(bool){\r\n      require(pricePerToken > tokenRedeem,\"SZO/ERROR-set-lower-price\");\r\n      \r\n      token_price = pricePerToken;\r\n      return true;\r\n    } \r\n  \r\n    function addAgent(address _agent) public onlyOwners returns(bool){\r\n        require(agents[_agent] == false,\"SZO/ERROR-already-agent\");\r\n        require(haveKYC[_agent] == true,\"SZO/ERROR-agent-no-kyc\");\r\n        require(_agent != msg.sender,\"SZO/ERROR-add-yourself\");\r\n        \r\n        agents[_agent] = true;\r\n        \r\n        return true;\r\n    }\r\n\r\n  //Redeem token that use for fee. after reedeem token will burn \r\n  function redeemFee(uint256 amount) public onlyOwners returns(bool){\r\n      uint256  _fund;\r\n      require(agents[msg.sender] == true,\"SZO/ERROR-not-agent\");\r\n      \r\n      _fund = (amount / _1Token) * tokenRedeem; \r\n      require(balance[msg.sender] >= amount,\"SZO/ERROR-insufficient-balance-agent\");\r\n      require(address(this).balance >= _fund,\"SZO/ERROR-insufficient-balance-szo\");\r\n      \r\n      balance[msg.sender] -= amount;\r\n      totalSupply_ -= amount; // burn token\r\n      emit Transfer(msg.sender,address(0),amount);\r\n      \r\n      msg.sender.transfer(_fund);\r\n      \r\n      return true;\r\n  }\r\n  \r\n  function burn(uint256 amount) public onlyOwners returns(bool){\r\n      require(balance[msg.sender] >= amount,\"SZO/ERROR-insufficient-balance-burn\");\r\n      \r\n      balance[msg.sender] -= amount;\r\n      totalSupply_ -= amount; // burn token\r\n      emit Transfer(msg.sender,address(0),amount);\r\n      \r\n      return true;\r\n  }\r\n  \r\n  function getProfit() public view onlyOwners returns(uint256){\r\n      return tokenProfit;\r\n  }\r\n  \r\n  address payable profitAddr1 = address(0);\r\n  address payable profitAddr2 = address(0);\r\n  \r\n  function setProfitAddr(uint256 addrIdx) public onlyOwners{\r\n      require(addrIdx == 1 || addrIdx == 2,\"Invalid addrIdx\");\r\n     if(addrIdx == 1){\r\n          require(msg.sender != profitAddr2,\"SZO/ERROR-profit-error1\");\r\n          profitAddr1 = msg.sender;\r\n     }\r\n     if(addrIdx == 2){\r\n          require(msg.sender != profitAddr1,\"SZO/ERROR-profit-error2\");\r\n          profitAddr2 = msg.sender;\r\n     }\r\n  }\r\n  \r\n  function withDrawFunc(uint256 _fund) public onlyOwners{\r\n\t\trequire(address(this).balance >= _fund,\"SZO/ERROR-insufficient-balance-withdraw\");\r\n\t\trequire(_fund & 1 == 0,\"SZO/ERROR-only-evennumber\"); // only even number\r\n\t\trequire(tokenProfit >= _fund,\"SZO/ERROR-insufficient-balance-profit\");\r\n\t\trequire(profitAddr1 != address(0),\"SZO/ERROR-notset-address1\");\r\n\t\trequire(profitAddr2 != address(0),\"SZO/ERROR-notset-address2\");\r\n\t\t\r\n        profitAddr1.transfer(_fund / 2);\r\n        profitAddr2.transfer(_fund / 2);\r\n        \r\n\t\ttokenProfit -= _fund;\r\n  }\r\n  \r\n  \r\n  \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKEN_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_1Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_KycData1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_kycData2\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"createKYCData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disInterTran\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getKYCData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data2\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"}],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"haveKYC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"intTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newOwnerConfirm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBuyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetMintCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blackList\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setNotAllowInterTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addrIdx\",\"type\":\"uint256\"}],\"name\":\"setProfitAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whiteList\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopMintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fund\",\"type\":\"uint256\"}],\"name\":\"withDrawFunc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShuttleOneToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://dde02bdd5b4f2e4b4c88fe4a380f920d4f393d6f1cb3a1a2a9511dada00e39f2"}]}