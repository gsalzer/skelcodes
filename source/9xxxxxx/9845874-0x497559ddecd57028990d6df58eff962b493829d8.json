{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.6.4;\r\n\r\ncontract Context {\r\n  constructor () internal { }\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this;\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract brrrrrrr is IERC20, Context, Owned {\r\n  using SafeMath for uint256;\r\n  using NameFilter for string;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event iBailout(address account);\r\n  event bBailout(address account, string kind, bytes32 message);\r\n\r\n  constructor() public {\r\n    symbol = \"BRSD\";\r\n    name = \"BRRRRRRR\";\r\n    decimals = 2;\r\n\r\n    mostRecent = 604451600000000;\r\n    lastUpdated = 1586304000;\r\n    rate = 65018849;\r\n    brr = true;\r\n\r\n    bailoutEnd = 1590969600;\r\n    individualBailoutAmount = 120000;\r\n    individualBailoutMaxBalance = 10**18;\r\n\r\n    bailoutRules[0].amount = 50 * 10**3 * 10**(decimals);\r\n    bailoutRules[0].minBalance = 0;\r\n    bailoutRules[0].kind = \"Individual Plus\";\r\n    bailoutRules[0].cost = 10**15;\r\n\r\n    bailoutRules[1].amount = 750 * 10**3 * 10**(decimals);\r\n    bailoutRules[1].minBalance = 0;\r\n    bailoutRules[1].kind = \"Small Business\";\r\n    bailoutRules[1].cost = 10**16;\r\n\r\n    bailoutRules[2].amount = 10 * 10**6 * 10**(decimals);\r\n    bailoutRules[2].minBalance = 10**18;\r\n    bailoutRules[2].kind = \"Medium Business\";\r\n    bailoutRules[2].cost = 10**17;\r\n\r\n    bailoutRules[3].amount = 200 * 10**6 * 10**(decimals);\r\n    bailoutRules[3].minBalance = 10 * 10**18;\r\n    bailoutRules[3].kind = \"Big Business\";\r\n    bailoutRules[3].cost = 10**18;\r\n\r\n    bailoutRules[4].amount = 100 * 10**9 * 10**(decimals);\r\n    bailoutRules[4].minBalance = 250 * 10**18;\r\n    bailoutRules[4].kind = \"Big Bank\";\r\n    bailoutRules[4].cost = 25 * 10**18;\r\n\r\n    _transfer(address(this), owner, 100 * 10**9 * 10**(decimals));\r\n  }\r\n\r\n  struct bailoutRulesStruct{\r\n    uint256 amount;\r\n    uint256 minBalance;\r\n    string kind;\r\n    uint256 cost;\r\n  }\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  mapping (address => uint256) public lastBailout;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint256 public decimals;\r\n\r\n  //BAILOUT VARIALBES\r\n  uint256 public bailoutEnd;\r\n  uint256 public individualBailoutAmount;\r\n  uint256 public individualBailoutMaxBalance;\r\n  mapping(uint256 => bailoutRulesStruct) public bailoutRules;\r\n\r\n  //SUPPLY VARIABLES\r\n  //CONTROLLING THE SUPPLY OF BRRSD RELATED TO THE FED RESERVE BALANCE SHEET\r\n  //THIS WILL OVERCORRECT WHEN THE RATE OF CHANGE OF MONEY SUPPLY CHANGES\r\n  //BUT WILL NEVER BE OFF BY MORE THAN A WEEK\r\n  uint256 public mostRecent;    //VALUE FROM FED BALANCE SHEET..\r\n  uint256 public lastUpdated;   //DATE LAST UPDATED IN SECONDS.\r\n  uint256 public rate;          //RATE OF INCREASE PER SECOND. TAKEN FROM FED BALANCE SHEET INCREASE FROM PAST WEEK.\r\n  bool public brr;              //CONTROLS IF NUMBER GOES UP OR DOWN. IF TRUE IT MEANS RATE IS ADDING,. IF FALSE IT'S DECREASING.\r\n\r\n  function testView() public view returns(uint256){\r\n    uint256 timeDiff = now - lastUpdated;\r\n    return(timeDiff);\r\n  }\r\n\r\n  function adjustSupply() public {\r\n    uint256 timeDiff = now.sub(lastUpdated);\r\n    uint256 amount = timeDiff.mul(rate);\r\n    if(brr) {\r\n      uint256 supplyNew = amount.add(mostRecent);\r\n      if(_totalSupply < supplyNew) {\r\n        _mint(address(this), supplyNew.sub(_totalSupply));\r\n      }\r\n    }\r\n    else {\r\n      if(mostRecent > amount) {\r\n        uint256 supplyNew = mostRecent.sub(amount);\r\n        if (_totalSupply > supplyNew) {\r\n          if(_balances[address(this)] >= amount) {\r\n            _burn(address(this), amount);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function individualBailout() public {\r\n    require(lastBailout[msg.sender] + 1 days < now, \"You need to wait 1 day before claiming another bailout\");\r\n    require(now < bailoutEnd, \"Bailouts are no longer available. No more government handouts bitch!\");\r\n    require(individualBailoutMaxBalance > msg.sender.balance, \"You are too rich for an individual bailout.\");\r\n    lastBailout[msg.sender] = now;\r\n    _transfer(address(this), msg.sender, individualBailoutAmount);\r\n    emit iBailout(msg.sender);\r\n  }\r\n  function bigBailout(uint256 index, string memory message) public payable {\r\n    bytes32 fname = message.nameFilter();\r\n    require(msg.sender.balance >= bailoutRules[index].minBalance, \"You are too poor to qualify for this bailout tier\");\r\n    require(now < bailoutEnd, \"Bailouts are no longer available. No more government handouts bitch!\");\r\n    require(msg.value >= bailoutRules[index].cost, \"Ethereum sent lower than cost.\");\r\n    _transfer(address(this), msg.sender, bailoutRules[index].amount);\r\n    emit bBailout(msg.sender, bailoutRules[index].kind, fname);\r\n  }\r\n  //ADMIN only functions\r\n  function setBailoutRule(uint256 index, uint256 amount, uint256 minBalance, string memory kind, uint256 cost) public onlyOwner() {\r\n    bailoutRules[index].amount = amount;\r\n    bailoutRules[index].minBalance = minBalance;\r\n    bailoutRules[index].kind = kind;\r\n    bailoutRules[index].cost = cost;\r\n  }\r\n  function setBailoutEnd(uint256 endtime) public onlyOwner() {\r\n    bailoutEnd = endtime;\r\n  }\r\n  function setIndividualBailout(uint256 amount, uint256 max) public onlyOwner() {\r\n    individualBailoutAmount = amount;\r\n    individualBailoutMaxBalance = max;\r\n  }\r\n  function newFedData(uint256 _mostRecent, uint256 _lastUpdated, uint256 _rate, bool _brr) public onlyOwner() {\r\n    mostRecent = _mostRecent;\r\n    lastUpdated = _lastUpdated;\r\n    rate = _rate;\r\n    brr = _brr;\r\n    if(_totalSupply >= _mostRecent) {\r\n      if(_balances[address(this)] >= _totalSupply.sub(_mostRecent)) {\r\n        _burn(address(this), _totalSupply.sub(_mostRecent));\r\n      }\r\n    }\r\n    else if(_totalSupply < _mostRecent) {\r\n      _mint(address(this), _mostRecent.sub(_totalSupply));\r\n    }\r\n  }\r\n  function approveOtherContract(address account, uint256 amount) public onlyOwner() returns(bool) {\r\n    _approve(address(this), account, amount);\r\n    return true;\r\n  }\r\n  //allows admin to withdraw other ERC-20 tokens from the contract.\r\n  function adminwithdrawal(IERC20 token, uint256 amount) public onlyOwner() {\r\n    IERC20 thisToken = IERC20(address(this));\r\n    require(token != thisToken);\r\n    token.transfer(msg.sender, amount);\r\n  }\r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n\r\n  function totalSupply() public view override returns (uint256) {\r\n      return _totalSupply;\r\n  }\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n      return _balances[account];\r\n  }\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n      _transfer(_msgSender(), recipient, amount);\r\n      return true;\r\n  }\r\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n      return _allowances[owner][spender];\r\n  }\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n      _approve(_msgSender(), spender, amount);\r\n      return true;\r\n  }\r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n      _transfer(sender, recipient, amount);\r\n      _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n      return true;\r\n  }\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n      return true;\r\n  }\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n      _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n      return true;\r\n  }\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n      require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n      require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n      _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n      adjustSupply();\r\n\r\n      _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n      _balances[recipient] = _balances[recipient].add(amount);\r\n      emit Transfer(sender, recipient, amount);\r\n  }\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n      require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n      _beforeTokenTransfer(address(0), account, amount);\r\n\r\n      _totalSupply = _totalSupply.add(amount);\r\n      _balances[account] = _balances[account].add(amount);\r\n      emit Transfer(address(0), account, amount);\r\n  }\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n      require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n      _beforeTokenTransfer(account, address(0), amount);\r\n\r\n      _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n      _totalSupply = _totalSupply.sub(amount);\r\n      emit Transfer(account, address(0), amount);\r\n  }\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n      require(owner != address(0), \"ERC20: approve from the zero address\");\r\n      require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n      _allowances[owner][spender] = amount;\r\n      emit Approval(owner, spender, amount);\r\n  }\r\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary NameFilter {\r\n\r\n    function nameFilter(string memory _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 16 characters\r\n        require (_length <= 16 && _length > 0, \"string must be between 1 and 16 characters\");\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n          require\r\n          (\r\n              // require character is a space or period or @ or _ or #\r\n              _temp[i] == 0x20 || _temp[i] == 0x2E || _temp[i] == 0x40 ||\r\n              _temp[i] == 0x5F || _temp[i] == 0x23 ||\r\n              // OR lowercase a-z\r\n              (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n              //Or uppercase A-Z\r\n              (_temp[i] > 0x40 && _temp[i] < 0x5b) ||\r\n              // or 0-9\r\n              (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n              \"string contains invalid characters\"\r\n          );\r\n        }\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"bBailout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"iBailout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminwithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveOtherContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bailoutEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bailoutRules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"bigBailout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualBailout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualBailoutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualBailoutMaxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBailout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mostRecent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mostRecent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_brr\",\"type\":\"bool\"}],\"name\":\"newFedData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"setBailoutEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"setBailoutRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setIndividualBailout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"brrrrrrr","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://4632caa6f9132c70b52a508e4189e1a0f0bfa8ea834af05352ac70557742dd27"}]}