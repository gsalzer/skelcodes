{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-eth/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.2;\r\n\r\ncontract MithrilLottery is WhitelistAdminRole {\r\n    using SafeMath for uint256;\r\n    uint[] public LuckyNumbers = [1, 2, 3, 4, 5, 6];\r\n    uint public SpecialNumber = 49;\r\n    uint[] public LuckySpecialNumbersCandidate = [\r\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\r\n        41, 42, 43, 44, 45, 46, 47, 48, 49];\r\n\r\n    uint public LuckyNumberOpenedNum = 0;\r\n\r\n    uint public BetNumber = 49;\r\n\r\n    uint public ticketPrice = 50 ether;\r\n    uint firstStageWinningPrice = 1000000 ether;\r\n\r\n    struct Bet {\r\n        uint id;\r\n        uint8 winningStage;\r\n        uint[] numbers;\r\n    }\r\n    mapping (address => Bet[]) userBets;\r\n\r\n    // bet id -> bet dict\r\n    mapping(uint => mapping(uint => bool)) betNumberDict;\r\n    uint public totalBetNum = 0;\r\n\r\n    // all disdinct users\r\n    address[] public users;\r\n    mapping(address => bool) userAddressDict;\r\n\r\n    // for debug usage\r\n    mapping(address => uint8[]) public userWinningStages;\r\n\r\n    // for send token\r\n    IERC20 token;\r\n\r\n    // Lottery Status\r\n    enum LotteryStatus {Opened, Executing, Closed}\r\n    LotteryStatus public status;\r\n\r\n    // record income\r\n    uint public currentSaleVolumn = 0;\r\n    uint public currentRewardVolumn = 0;\r\n    uint public adminWithdrawVolumn = 0;\r\n\r\n    // Remaining Price\r\n    uint public remainingFirstVolumnBefore = 0;\r\n    uint public remainingSecondtVolumnBefore = 0;\r\n    uint public remainingThirdVolumnBefore = 0;\r\n    uint public remainingFourthVolumnBefore = 0;\r\n\r\n    // reward dict\r\n    mapping(address => uint) public rewardDict;\r\n    address[] public rewardUsers;\r\n    uint public rewardExecutedOffset = 0;\r\n    uint public rewardUsersTotalLength = 0;\r\n\r\n    // cold wallet address\r\n    address public coldWalletAddress;\r\n\r\n    // Reward batch size\r\n    // TOD to be changed\r\n    uint REWARD_BATCH_SIZE = 30;\r\n\r\n    // Luck list to front end.\r\n    // (mapping winning stage to luck address list)\r\n    mapping(uint => address[]) public previousLuckyAddresses;\r\n\r\n    // For user winning\r\n    bool winningStageSetFlag = false;\r\n\r\n    // For batch reset lottery\r\n    uint RESET_LOTTERY_BATCH_SIZE = 10;\r\n    uint public resetLotteryOffset = 0;\r\n\r\n    // For count winning stage\r\n    uint public COUNT_WINNING_STAGE_BATCH_SIZE = 30;\r\n    uint public countWinningStageUserOffset = 0;\r\n    uint public countWinningStageUserBetOffset = 0;\r\n\r\n    // For count reward\r\n    uint public COUNT_REWARD_BATCH_SIZE = 30;\r\n    uint public countRewardFirstUserOffset = 0;\r\n    uint public countRewardFirstUserBetOffset = 0;\r\n\r\n    uint public countRewardSecondUserOffset = 0;\r\n    uint public countRewardSecondUserBetOffset = 0;\r\n\r\n    uint public totalPriceOfFiveToSeven = 0;\r\n    uint public totalPriceOfEight = 0;\r\n    uint public firstStageNumber = 0;\r\n    uint public secondStageNumber = 0;\r\n    uint public thirdStageNumber = 0;\r\n    uint public fourthStageNumber = 0;\r\n    uint public eightStageNumber = 0;\r\n\r\n    uint public firstStagePricePerPerson = 0;\r\n    uint public secondStagePricePerPerson = 0;\r\n    uint public thirdStagePricePerPerson = 0;\r\n    uint public fourthStagePricePerPerson = 0;\r\n\r\n    uint public rewardTotalVolumn = 0;\r\n\r\n    constructor (IERC20 tokenAddress, address coldWallet) public {\r\n        token = tokenAddress;\r\n        coldWalletAddress = coldWallet;\r\n        // TODO to be changed\r\n        status = LotteryStatus.Opened;\r\n    }\r\n\r\n    function resetPreviousLuckyAddresses() public {\r\n        for (uint i = 0; i <= 8; i++) {\r\n            delete previousLuckyAddresses[i];\r\n        }\r\n    }\r\n\r\n    function getPreviousLuckyAddresses(uint index) public view returns (address[] memory addresses) {\r\n        return previousLuckyAddresses[index];\r\n    }\r\n\r\n    function getTotalRemainingVolumnBefore() public view returns (uint total) {\r\n        return remainingFirstVolumnBefore.add(remainingSecondtVolumnBefore).add(remainingThirdVolumnBefore).add(remainingFourthVolumnBefore);\r\n    }\r\n\r\n    function resetLuckySpecialNumbersCandidate() public {\r\n        LuckySpecialNumbersCandidate.length = 49;\r\n        for (uint item = 1; item <= BetNumber; item++) {\r\n            LuckySpecialNumbersCandidate[item - 1] = item;\r\n        }\r\n    }\r\n\r\n    function openLuckyNumber(uint number) public onlyWhitelistAdmin {\r\n        require(status == LotteryStatus.Executing, \"Lottery status not executing.\");\r\n        require(LuckyNumberOpenedNum < 7, \"Lucky number already opened\");\r\n        uint betNumberIndex = uint(keccak256(abi.encodePacked(number, block.difficulty))).mod(LuckySpecialNumbersCandidate.length);\r\n        uint betNumber = LuckySpecialNumbersCandidate[betNumberIndex];\r\n\r\n        // swap first\r\n        uint tmp = LuckySpecialNumbersCandidate[LuckySpecialNumbersCandidate.length - 1];\r\n        LuckySpecialNumbersCandidate[LuckySpecialNumbersCandidate.length - 1] = LuckySpecialNumbersCandidate[betNumberIndex];\r\n        LuckySpecialNumbersCandidate[betNumberIndex] = tmp;\r\n\r\n        require(LuckySpecialNumbersCandidate.length != 0, \"LuckySpecialNumbersCandidate not init.\");\r\n\r\n        //pop element\r\n        LuckySpecialNumbersCandidate.pop();\r\n\r\n        if (LuckyNumberOpenedNum == 6) {\r\n            SpecialNumber = betNumber;\r\n            LuckyNumberOpenedNum = 7;\r\n        } else {\r\n            LuckyNumbers[LuckyNumberOpenedNum] = betNumber;\r\n            LuckyNumberOpenedNum += 1;\r\n        }\r\n    }\r\n\r\n    function setLotteryStatus(LotteryStatus newStatus) public onlyWhitelistAdmin {\r\n        status = newStatus;\r\n    }\r\n\r\n    function withdrawAll() public onlyWhitelistAdmin {\r\n        require(coldWalletAddress != address(0), \"Cold wallet address not set.\");\r\n        uint contractBalance = token.balanceOf(address(this));\r\n        sendToken(coldWalletAddress, contractBalance);\r\n        adminWithdrawVolumn = 0;\r\n        remainingFirstVolumnBefore = 0;\r\n        remainingSecondtVolumnBefore = 0;\r\n        remainingThirdVolumnBefore = 0;\r\n        remainingFourthVolumnBefore = 0;\r\n    }\r\n\r\n    function withdrawRemaining() public onlyWhitelistAdmin {\r\n        require(coldWalletAddress != address(0), \"Cold wallet address not set.\");\r\n        sendToken(coldWalletAddress, adminWithdrawVolumn);\r\n        adminWithdrawVolumn = 0;\r\n    }\r\n\r\n    function withdrawPreviousDeposit() public onlyWhitelistAdmin {\r\n        require(coldWalletAddress != address(0), \"Cold wallet address not set.\");\r\n        require(status == LotteryStatus.Closed, \"Lottery status not closed.\");\r\n        uint contractBalance = token.balanceOf(address(this));\r\n        require(contractBalance > adminWithdrawVolumn + getTotalRemainingVolumnBefore(), \"No more balance to withdraw.\");\r\n        uint withdrawAmount = contractBalance - adminWithdrawVolumn - getTotalRemainingVolumnBefore();\r\n        sendToken(coldWalletAddress, withdrawAmount);\r\n    }\r\n\r\n    function withdrawRemainingVolumnBefore() public onlyWhitelistAdmin {\r\n        require(coldWalletAddress != address(0), \"Cold wallet address not set.\");\r\n        require(status == LotteryStatus.Closed, \"Lottery status not closed.\");\r\n        uint withdrawAmount = getTotalRemainingVolumnBefore();\r\n        sendToken(coldWalletAddress, withdrawAmount);\r\n        remainingFirstVolumnBefore = 0;\r\n        remainingSecondtVolumnBefore = 0;\r\n        remainingThirdVolumnBefore = 0;\r\n        remainingFourthVolumnBefore = 0;\r\n    }\r\n\r\n    function resetLotteryBatch() public onlyWhitelistAdmin {\r\n        require(rewardExecutedOffset == rewardUsersTotalLength, \"Reward not completed yet.\");\r\n        require(resetLotteryOffset < users.length || users.length == 0, \"Lottery already reset.\");\r\n        uint resetNumber = 0;\r\n        if (users.length > RESET_LOTTERY_BATCH_SIZE + resetLotteryOffset) {\r\n            resetNumber = RESET_LOTTERY_BATCH_SIZE;\r\n        } else {\r\n            resetNumber = users.length - resetLotteryOffset;\r\n        }\r\n\r\n        for (uint index = resetLotteryOffset; index < resetNumber; index++) {\r\n            address userAddress = users[index];\r\n            Bet[] storage bets = userBets[userAddress];\r\n            bets.length = 0;\r\n\r\n            userAddressDict[users[index]] = false;\r\n            userWinningStages[users[index]].length = 0;\r\n        }\r\n\r\n        resetLotteryOffset += resetNumber;\r\n\r\n        // Reset other variables\r\n        if (resetLotteryOffset == users.length) {\r\n            resetLotteryOffset = 0;\r\n            users.length = 0;\r\n\r\n             // reset LuckyNumberOpenedNum\r\n            LuckyNumberOpenedNum = 0;\r\n\r\n            // reset winningStageSetFlag\r\n            winningStageSetFlag = false;\r\n\r\n            // reset SpecialNumbersCandidate\r\n            resetLuckySpecialNumbersCandidate();\r\n\r\n            // reset currentRewardVolumn, currentSaleVolumn, rewardTotalVolumn\r\n            currentSaleVolumn = 0;\r\n            currentRewardVolumn = 0;\r\n            rewardTotalVolumn = 0;\r\n\r\n            // reset totalBetNum\r\n            totalBetNum = 0;\r\n\r\n            rewardUsers.length = 0;\r\n            rewardExecutedOffset = 0;\r\n            rewardUsersTotalLength = 0;\r\n            countWinningStageUserOffset = 0;\r\n            countWinningStageUserBetOffset = 0;\r\n            countRewardFirstUserOffset = 0;\r\n            countRewardFirstUserBetOffset = 0;\r\n            countRewardSecondUserOffset = 0;\r\n            countRewardSecondUserBetOffset = 0;\r\n\r\n            totalPriceOfFiveToSeven = 0;\r\n            totalPriceOfEight = 0;\r\n            firstStageNumber = 0;\r\n            secondStageNumber = 0;\r\n            thirdStageNumber = 0;\r\n            fourthStageNumber = 0;\r\n            eightStageNumber = 0;\r\n\r\n            // set status open\r\n            status = LotteryStatus.Opened;\r\n\r\n        }\r\n    }\r\n\r\n    function pushReward(address userAddress, uint amount) private {\r\n        if (amount > 0) {\r\n            if (rewardDict[userAddress] == 0) {\r\n                rewardUsers.push(userAddress);\r\n            }\r\n            rewardDict[userAddress] += amount;\r\n            rewardTotalVolumn += amount;\r\n        }\r\n    }\r\n\r\n    function setToken(IERC20 tokenAddress) private {\r\n        token = tokenAddress;\r\n    }\r\n\r\n    function sendToken(address to, uint256 value) private {\r\n        token.transfer(to, value);\r\n    }\r\n\r\n    function setBets(uint[] memory numbers) public {\r\n        // one bet six numbers\r\n        require(numbers.length == 6, \"Bet length not correct\");\r\n\r\n        // only opened status accept bet\r\n        require(status == LotteryStatus.Opened, \"Lottery not opened\");\r\n\r\n        // examine token allowance\r\n        uint allowanceValue = token.allowance(msg.sender, address(this));\r\n        require(allowanceValue >= ticketPrice, \"Allowance value not enough.\");\r\n\r\n        // examine user token balance enough\r\n        require(token.balanceOf(msg.sender) >= ticketPrice, \"User token balance not enough.\");\r\n\r\n        // transfer token from user to contract\r\n        token.transferFrom(msg.sender, address(this), ticketPrice);\r\n\r\n        // add current sale volumn\r\n        currentSaleVolumn += ticketPrice;\r\n\r\n        // new Bet\r\n        Bet memory bet;\r\n        bet.id = totalBetNum;\r\n        bet.numbers = numbers;\r\n        totalBetNum += 1;\r\n\r\n        // push bet to storage bets\r\n        Bet[] storage bets = userBets[msg.sender];\r\n        bets.push(bet);\r\n\r\n        // set bet hash dict\r\n        for (uint index = 0; index < numbers.length; index++) {\r\n            betNumberDict[bet.id][numbers[index]] = true;\r\n        }\r\n\r\n        // add user to users if not exist\r\n        if (userAddressDict[msg.sender] != true) {\r\n            users.push(msg.sender);\r\n            userAddressDict[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function getBets(address sender, uint betIndex) public view returns (uint[] memory numbers) {\r\n        return userBets[sender][betIndex].numbers;\r\n    }\r\n\r\n    function getLuckyNumber() public view returns (uint[] memory numbers) {\r\n        return LuckyNumbers;\r\n    }\r\n\r\n    function getUsersLength()  public view returns (uint) {\r\n        return users.length;\r\n    }\r\n\r\n    function countWinnings(address sender, uint betIndex) public view returns (uint8, uint8) {\r\n        uint8 winningCount = 0;\r\n        uint8 isSpecialNumber = 0;\r\n        Bet storage bet = userBets[sender][betIndex];\r\n        for (uint index = 0; index < LuckyNumbers.length; index++) {\r\n            if (betNumberDict[bet.id][LuckyNumbers[index]] == true) {\r\n                winningCount += 1;\r\n            }\r\n        }\r\n        if (betNumberDict[bet.id][SpecialNumber] == true) {\r\n            isSpecialNumber = 1;\r\n        }\r\n        return (winningCount, isSpecialNumber);\r\n    }\r\n\r\n    function getWinningStage(uint8 winningCount, uint8 isSpecialNumber) public pure returns (uint8) {\r\n        if (winningCount == 6) {\r\n            return 1;\r\n        } else if (winningCount == 5) {\r\n            if (isSpecialNumber == 1) {\r\n                return 2;\r\n            } else {\r\n                return 3;\r\n            }\r\n        } else if (winningCount == 4) {\r\n            if (isSpecialNumber == 1) {\r\n                return 4;\r\n            } else {\r\n                return 5;\r\n            }\r\n        } else if (winningCount == 3) {\r\n            if (isSpecialNumber == 1) {\r\n                return 6;\r\n            } else {\r\n                return 8;\r\n            }\r\n        } else if (winningCount == 2 && isSpecialNumber == 1) {\r\n                return 7;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function countAndSetWinningStageBatch() public onlyWhitelistAdmin {\r\n        require(status == LotteryStatus.Executing, \"Lottery status not executing.\");\r\n        require(countWinningStageUserOffset < users.length, \"Winning Stage already count.\");\r\n        uint countSize = 0;\r\n        for (uint i = countWinningStageUserOffset; i < users.length; i++) {\r\n            address userAddress = users[i];\r\n            Bet[] storage bets = userBets[userAddress];\r\n            for (uint j = countWinningStageUserBetOffset; j < bets.length; j++) {\r\n                (uint8 winningCount, uint8 isSpecialNumber) = countWinnings(userAddress, j);\r\n                // Reset betNumberDict\r\n                for (uint k = 0; k < bets[j].numbers.length; k++) {\r\n                    betNumberDict[bets[j].id][bets[j].numbers[k]] = false;\r\n                }\r\n\r\n                uint8 winningStage = getWinningStage(winningCount, isSpecialNumber);\r\n                bets[j].winningStage = winningStage;\r\n                // TODO remove for debug usage\r\n                userWinningStages[userAddress].push(winningStage);\r\n                countSize++;\r\n                if (countSize >= COUNT_WINNING_STAGE_BATCH_SIZE) {\r\n                    countWinningStageUserBetOffset = j + 1;\r\n                    break;\r\n                }\r\n            }\r\n            if (countSize >= COUNT_WINNING_STAGE_BATCH_SIZE) {\r\n                if (countWinningStageUserBetOffset == bets.length) {\r\n                    countWinningStageUserOffset = i + 1;\r\n                    countWinningStageUserBetOffset = 0;\r\n                } else {\r\n                    countWinningStageUserOffset = i;\r\n                }\r\n                break;\r\n            }\r\n\r\n            // no break\r\n            countWinningStageUserBetOffset = 0;\r\n        }\r\n\r\n        // All is set.\r\n        if (countSize < COUNT_WINNING_STAGE_BATCH_SIZE || countWinningStageUserOffset == users.length) {\r\n            countWinningStageUserOffset = users.length;\r\n            winningStageSetFlag = true;\r\n        }\r\n    }\r\n\r\n    function countRewardFirstBatch() public {\r\n        require(status == LotteryStatus.Executing, \"Lottery status not Executing.\");\r\n        require(LuckyNumberOpenedNum == 7, \"Lucky number not totally opened yet.\");\r\n        require(winningStageSetFlag == true, \"Winning stage not set.\");\r\n        require(countRewardFirstUserOffset < users.length, \"Count reward first already done.\");\r\n\r\n        // initial set\r\n        if (countRewardFirstUserOffset == 0 && countRewardFirstUserBetOffset == 0) {\r\n            resetPreviousLuckyAddresses();\r\n            currentRewardVolumn = currentSaleVolumn * 60 / 100;\r\n            adminWithdrawVolumn += (currentSaleVolumn - currentRewardVolumn);\r\n\r\n            totalPriceOfFiveToSeven = 0;\r\n            totalPriceOfEight = 0;\r\n            firstStageNumber = 0;\r\n            secondStageNumber = 0;\r\n            thirdStageNumber = 0;\r\n            fourthStageNumber = 0;\r\n            eightStageNumber = 0;\r\n        }\r\n\r\n        uint countSize = 0;\r\n        for (uint i = countRewardFirstUserOffset; i < users.length; i++) {\r\n            address userAddress = users[i];\r\n            Bet[] storage bets = userBets[userAddress];\r\n            for (uint j = countRewardFirstUserBetOffset; j < bets.length; j++) {\r\n                if (bets[j].winningStage != 0) {\r\n                    previousLuckyAddresses[bets[j].winningStage].push(userAddress);\r\n                }\r\n\r\n                if (bets[j].winningStage == 1) {\r\n                    firstStageNumber += 1;\r\n                } else if (bets[j].winningStage == 2) {\r\n                    secondStageNumber += 1;\r\n                } else if (bets[j].winningStage == 3) {\r\n                    thirdStageNumber += 1;\r\n                } else if (bets[j].winningStage == 4) {\r\n                    fourthStageNumber += 1;\r\n                } else if (bets[j].winningStage == 5) {\r\n                    pushReward(userAddress, 2000 ether);\r\n                    totalPriceOfFiveToSeven += 2000 ether;\r\n                } else if (bets[j].winningStage == 6) {\r\n                    pushReward(userAddress, 1000 ether);\r\n                    totalPriceOfFiveToSeven += 1000 ether;\r\n                } else if (bets[j].winningStage == 7) {\r\n                    pushReward(userAddress, 400 ether);\r\n                    totalPriceOfFiveToSeven += 400 ether;\r\n                } else if (bets[j].winningStage == 8) {\r\n                    totalPriceOfEight += 400 ether;\r\n                    eightStageNumber += 1;\r\n                }\r\n\r\n                countSize++;\r\n                if (countSize >= COUNT_REWARD_BATCH_SIZE) {\r\n                    countRewardFirstUserBetOffset = j + 1;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (countSize >= COUNT_REWARD_BATCH_SIZE) {\r\n                if (countRewardFirstUserBetOffset == bets.length) {\r\n                    countRewardFirstUserOffset = i + 1;\r\n                    countRewardFirstUserBetOffset = 0;\r\n                } else {\r\n                    countRewardFirstUserOffset = i;\r\n                }\r\n                break;\r\n            }\r\n\r\n            // no break\r\n            countRewardFirstUserBetOffset = 0;\r\n        }\r\n\r\n        // All set\r\n        if (countSize < COUNT_WINNING_STAGE_BATCH_SIZE || countRewardFirstUserOffset == users.length) {\r\n            countRewardFirstUserOffset = users.length;\r\n\r\n            // if 5~8 more than 65% of currentSaleVolumn * 60% * 65%, special case\r\n            if (eightStageNumber > 0) {\r\n                uint newEightTotalPrice;\r\n                uint eightPricePerPerson;\r\n                if (totalPriceOfFiveToSeven + totalPriceOfEight > currentRewardVolumn * 65 / 100) {\r\n                    if ((currentRewardVolumn * 65 / 100) < totalPriceOfFiveToSeven) {\r\n                        newEightTotalPrice = 0;\r\n                    } else {\r\n                        newEightTotalPrice = (currentRewardVolumn * 65 / 100) - totalPriceOfFiveToSeven;\r\n                    }\r\n                    eightPricePerPerson = newEightTotalPrice / eightStageNumber;\r\n                } else {\r\n                    eightPricePerPerson = 400 ether;\r\n                }\r\n\r\n                totalPriceOfEight = 0;\r\n                if (eightPricePerPerson > 0) {\r\n                    for (uint i = 0; i < users.length; i++) {\r\n                        address userAddress = users[i];\r\n                        Bet[] storage bets = userBets[userAddress];\r\n                        for (uint j = 0; j < bets.length; j++) {\r\n                            if (bets[j].winningStage == 8) {\r\n                                    pushReward(userAddress, eightPricePerPerson);\r\n                                    totalPriceOfEight += eightPricePerPerson;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint remainingPrice;\r\n            if (currentRewardVolumn > (totalPriceOfFiveToSeven + totalPriceOfEight)) {\r\n                remainingPrice = currentRewardVolumn - (totalPriceOfFiveToSeven + totalPriceOfEight);\r\n            } else {\r\n                remainingPrice = 0;\r\n            }\r\n\r\n            uint firstStageTotalPrice = (remainingPrice * 82 / 100) + remainingFirstVolumnBefore;\r\n            uint secondStageTotalPrice = (remainingPrice * 65 / 1000) + remainingSecondtVolumnBefore;\r\n            uint thirdStageTotalPrice = (remainingPrice * 7 / 100) + remainingThirdVolumnBefore;\r\n            uint fourthStageTotalPrice = (remainingPrice * 45 / 1000) + remainingFourthVolumnBefore;\r\n            firstStagePricePerPerson = 0;\r\n            secondStagePricePerPerson = 0;\r\n            thirdStagePricePerPerson = 0;\r\n            fourthStagePricePerPerson = 0;\r\n            if (firstStageNumber > 0) {\r\n                if (firstStageTotalPrice / firstStageNumber < 1000000 ether) {\r\n                    firstStagePricePerPerson = 1000000 ether;\r\n                } else {\r\n                    firstStagePricePerPerson = firstStageTotalPrice.div(firstStageNumber);\r\n                }\r\n                remainingFirstVolumnBefore = 0;\r\n            } else {\r\n                remainingFirstVolumnBefore = firstStageTotalPrice;\r\n            }\r\n\r\n            if (secondStageNumber > 0) {\r\n                secondStagePricePerPerson = secondStageTotalPrice.div(secondStageNumber);\r\n                remainingSecondtVolumnBefore = 0;\r\n            } else {\r\n                remainingSecondtVolumnBefore = secondStageTotalPrice;\r\n            }\r\n\r\n            if (thirdStageNumber > 0) {\r\n                thirdStagePricePerPerson = thirdStageTotalPrice.div(thirdStageNumber);\r\n                remainingThirdVolumnBefore = 0;\r\n            } else {\r\n                remainingThirdVolumnBefore = thirdStageTotalPrice;\r\n            }\r\n\r\n            if (fourthStageNumber > 0) {\r\n                fourthStagePricePerPerson = fourthStageTotalPrice.div(fourthStageNumber);\r\n                remainingFourthVolumnBefore = 0;\r\n            } else {\r\n                remainingFourthVolumnBefore = fourthStageTotalPrice;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function countRewardSecondBatch() public {\r\n        require(status == LotteryStatus.Executing, \"Lottery status not Executing.\");\r\n        require(LuckyNumberOpenedNum == 7, \"Lucky number not totally opened yet.\");\r\n        require(winningStageSetFlag == true, \"Winning stage not set.\");\r\n        require(countRewardFirstUserOffset == users.length, \"Count reward first not done yet.\");\r\n        require(countRewardSecondUserOffset < users.length, \"Count reward second already done.\");\r\n\r\n        uint countSize = 0;\r\n        for (uint i = countRewardSecondUserOffset; i < users.length; i++) {\r\n            address userAddress = users[i];\r\n            Bet[] storage bets = userBets[userAddress];\r\n            for (uint j = countRewardSecondUserBetOffset; j < bets.length; j++) {\r\n                if (bets[j].winningStage == 1) {\r\n                    pushReward(userAddress, firstStagePricePerPerson);\r\n                } else if (bets[j].winningStage == 2) {\r\n                    pushReward(userAddress, secondStagePricePerPerson);\r\n                } else if (bets[j].winningStage == 3) {\r\n                    pushReward(userAddress, thirdStagePricePerPerson);\r\n                } else if (bets[j].winningStage == 4) {\r\n                    pushReward(userAddress, fourthStagePricePerPerson);\r\n                }\r\n\r\n                countSize++;\r\n                if (countSize >= COUNT_REWARD_BATCH_SIZE) {\r\n                    countRewardSecondUserBetOffset = j + 1;\r\n                    break;\r\n                }\r\n            }\r\n            if (countSize >= COUNT_REWARD_BATCH_SIZE) {\r\n                if (countRewardSecondUserBetOffset == bets.length) {\r\n                    countRewardSecondUserOffset = i + 1;\r\n                    countRewardSecondUserBetOffset = 0;\r\n                } else {\r\n                    countRewardSecondUserOffset = i;\r\n                }\r\n                break;\r\n            }\r\n\r\n            // no break\r\n            countRewardSecondUserBetOffset = 0;\r\n        }\r\n\r\n        // All is set.\r\n        if (countSize < COUNT_REWARD_BATCH_SIZE || countRewardSecondUserOffset == users.length) {\r\n            countRewardSecondUserOffset = users.length;\r\n            rewardUsersTotalLength = rewardUsers.length;\r\n        }\r\n    }\r\n\r\n    function executeReward() public {\r\n        require(status == LotteryStatus.Executing, \"Lottery status not Executing.\");\r\n        require(countRewardSecondUserOffset == users.length, \"Reward not counted yet.\");\r\n        uint contractBalance = token.balanceOf(address(this));\r\n        uint totalRemainingVolumnBefore = getTotalRemainingVolumnBefore();\r\n        require(contractBalance >= totalRemainingVolumnBefore + rewardTotalVolumn, \"Contract balance not enough.\");\r\n\r\n        for (uint index = 0; index < rewardUsersTotalLength; index++) {\r\n            require(index == rewardExecutedOffset, \"Reward index incorrect.\");\r\n            address userAddress = rewardUsers[index];\r\n            uint amount = rewardDict[userAddress];\r\n            sendToken(userAddress, amount);\r\n\r\n            // reset rewardDict\r\n            rewardDict[userAddress] = 0;\r\n\r\n            rewardExecutedOffset = index + 1;\r\n        }\r\n\r\n        if (rewardExecutedOffset == rewardUsersTotalLength) {\r\n            status = LotteryStatus.Closed;\r\n        }\r\n    }\r\n\r\n    function executeRewardBatch() public {\r\n        require(status == LotteryStatus.Executing, \"Lottery status not Executing.\");\r\n        require(countRewardSecondUserOffset == users.length, \"Reward not counted yet.\");\r\n        uint contractBalance = token.balanceOf(address(this));\r\n        uint totalRemainingVolumnBefore = getTotalRemainingVolumnBefore();\r\n        require(contractBalance >= totalRemainingVolumnBefore + rewardTotalVolumn, \"Contract balance not enough.\");\r\n\r\n        if (rewardUsersTotalLength <= REWARD_BATCH_SIZE + rewardExecutedOffset) {\r\n            executeReward();\r\n        } else {\r\n            for (uint index = rewardExecutedOffset; index < rewardExecutedOffset + REWARD_BATCH_SIZE; index++) {\r\n                require(rewardExecutedOffset < rewardUsersTotalLength, \"No need to reward.\");\r\n                address userAddress = rewardUsers[index];\r\n                uint amount = rewardDict[userAddress];\r\n                sendToken(userAddress, amount);\r\n\r\n                // reset rewardDict\r\n                rewardDict[userAddress] = 0;\r\n\r\n                rewardExecutedOffset = index + 1;\r\n            }\r\n        }\r\n\r\n        if (rewardExecutedOffset == rewardUsersTotalLength) {\r\n            status = LotteryStatus.Closed;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPriceOfEight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRemainingVolumnBefore\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countRewardSecondUserBetOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardExecutedOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"countRewardFirstBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTotalVolumn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countRewardFirstUserOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LuckyNumberOpenedNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPreviousDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countRewardSecondUserOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdStagePricePerPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"betIndex\",\"type\":\"uint256\"}],\"name\":\"getBets\",\"outputs\":[{\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstStageNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thirdStageNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondStageNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COUNT_REWARD_BATCH_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"previousLuckyAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstStagePricePerPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPreviousLuckyAddresses\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countWinningStageUserOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resetLotteryOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetPreviousLuckyAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"setLotteryStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSaleVolumn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COUNT_WINNING_STAGE_BATCH_SIZE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeRewardBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondStagePricePerPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingSecondtVolumnBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWithdrawVolumn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"winningCount\",\"type\":\"uint8\"},{\"name\":\"isSpecialNumber\",\"type\":\"uint8\"}],\"name\":\"getWinningStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LuckySpecialNumbersCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"name\":\"setBets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LuckyNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"countRewardSecondBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardUsersTotalLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"countAndSetWinningStageBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"openLuckyNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingFirstVolumnBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDict\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetLotteryBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthStagePricePerPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"betIndex\",\"type\":\"uint256\"}],\"name\":\"countWinnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SpecialNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countWinningStageUserBetOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingFourthVolumnBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRewardVolumn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBetNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fourthStageNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countRewardFirstUserBetOffset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemainingVolumnBefore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BetNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldWalletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLuckyNumber\",\"outputs\":[{\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eightStageNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingThirdVolumnBefore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRemaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userWinningStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPriceOfFiveToSeven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetLuckySpecialNumbersCandidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"coldWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}]","ContractName":"MithrilLottery","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003893b9422cd5d70a81edeffe3d5a1c6a978310bb000000000000000000000000a444a4da5fc96f4e6d17faf3be0161b4f802f39c","Library":"","LicenseType":"None","SwarmSource":"bzzr://db1fc4f17b9a54fab834ababf35bb42dc8e08b41fb4df24d009dc3ab6818d5ec"}]}