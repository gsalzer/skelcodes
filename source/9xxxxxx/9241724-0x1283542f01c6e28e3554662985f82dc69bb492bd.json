{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.18;\r\n\r\ncontract aNonEventManagement {\r\n\r\n    address owner;\r\n\r\n    constructor() public {\r\n                owner = msg.sender;\r\n    }\r\n\r\n    struct Event {\r\n        string eventDescription;\r\n        bytes32[] eventRegistrations;\r\n    }\r\n\r\n    mapping (uint => Event) events;\r\n    uint[] public EventsList;\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function append(string memory a, string memory b, string memory c) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c));\r\n    }\r\n\r\n    function quotesCover(string memory text) internal pure returns (string memory) {\r\n        return append(\"\\\"\", text, \"\\\"\" );\r\n    }\r\n\r\n    function appendJSONItem(string memory text, string memory key, string memory value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(text,\"{\",quotesCover(\"id\"),\":\", quotesCover(key), \",\",\r\n        quotesCover(\"desc\"),\":\", quotesCover(value),\"}\"));\r\n    }\r\n\r\n    function setEvent(string memory _eventDescription) public {\r\n        uint _id  = EventsList.length+1;\r\n        events[_id].eventDescription = _eventDescription;\r\n        EventsList.push(_id) -1;\r\n    }\r\n\r\n    function getInfoAboutEvents() view public returns (string memory){\r\n        string memory result = \"[\";\r\n        for (uint i=0; i<EventsList.length; i++) {\r\n            string memory _identifier = uint2str(i+1);\r\n            string memory _description = events[i+1].eventDescription;\r\n            result = appendJSONItem(result, _identifier, _description);\r\n            if (i+1<EventsList.length) {\r\n                result = append(result,\",\",\"\");\r\n            }\r\n        }\r\n        result = append(result, \"]\", \"\");\r\n        return (result);\r\n    }\r\n\r\n\r\n    event registrationStatus(string message);\r\n\r\n    function eventRegistration(uint _id, string memory _phone) public {\r\n        bool _alreadyRegistered = false;\r\n        string memory _message = \"\";\r\n        bytes32 _encodedphone = keccak256(abi.encode(_phone));\r\n        for(uint i=0; i<events[_id].eventRegistrations.length; i++) {\r\n            if ((events[_id].eventRegistrations[i]) == _encodedphone) {\r\n                _alreadyRegistered = true;\r\n                break;\r\n            }\r\n        }\r\n        if (_alreadyRegistered == true) {\r\n            _message = \"member is already registered on this event\";\r\n        } else {\r\n            events[_id].eventRegistrations.push(_encodedphone);\r\n            _message = \"successfully registered on event\";\r\n        }\r\n        emit registrationStatus(_message);\r\n    }\r\n\r\n\r\n    event IsRegistered(bool status);\r\n\r\n    function checkMember(uint _id, string memory _phone) public returns (bool) {\r\n        bool result = false;\r\n        for(uint i=0; i<events[_id].eventRegistrations.length; i++) {\r\n            if ((events[_id].eventRegistrations[i]) == keccak256(abi.encode(_phone))) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        emit IsRegistered(result);\r\n        return (result);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"IsRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"registrationStatus\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EventsList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"checkMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"eventRegistration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfoAboutEvents\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventDescription\",\"type\":\"string\"}],\"name\":\"setEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"aNonEventManagement","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://6dcbec587197c5928665542017dc67c7eb70721d0a0021f1e31f82c50dccc1f4"}]}