{"status":"1","message":"OK","result":[{"SourceCode":"// MoneyStampsERC721.sol -- Interest-bearing NFTs with lexStamps based on the DAI Savings Token\r\n// - Adapted from ChargedParticlesERC721.sol - https://github.com/robsecord/ChargedParticlesEth\r\n//\r\n// MIT License\r\n// Copyright (c) 2020 Open, ESQ LLC\r\n// \r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\n\r\npragma solidity ^0.5.13;\r\n\r\n// ERROR CODES:\r\n//  100:        ADDRESS, OWNER, OPERATOR\r\n//      101         Invalid Address\r\n//      102         Sender is not owner\r\n//      103         Sender is not operator\r\n//  200:        MATH\r\n//      201         Underflow\r\n//      202         Overflow\r\n//      203         Multiplication overflow\r\n//      204         Division by zero\r\n//  300:        ERC721\r\n//      301         Invalid Recipient\r\n//      302         Invalid on-received message\r\n//      303         Invalid tokenId\r\n//      304         Invalid owner/operator\r\n//      305         Token ID already exists\r\n//  400:        ChargedParticles\r\n//      401         Invalid Method\r\n//      402         Unregistered Type\r\n//      403         Particle has no Charge\r\n//      404         Insufficient DAI Balance\r\n//      405         Transfer Failed\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Chai.money interface\r\n * @dev see https://github.com/dapphub/chai\r\n */\r\ncontract IChai {\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n    // like transferFrom but dai-denominated\r\n    function move(address src, address dst, uint wad) external returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n    function approve(address usr, uint wad) external returns (bool);\r\n    function balanceOf(address usr) external returns (uint);\r\n\r\n    // Approve by signature\r\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function dai(address usr) external returns (uint wad);\r\n    function dai(uint chai) external returns (uint wad);\r\n\r\n    // wad is denominated in dai\r\n    function join(address dst, uint wad) external;\r\n\r\n    // wad is denominated in (1/chi) * dai\r\n    function exit(address src, uint wad) public;\r\n\r\n    // wad is denominated in dai\r\n    function draw(address src, uint wad) external returns (uint chai);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n \t* @dev Returns the addition of two unsigned integers, reverting on\r\n \t* overflow.\r\n \t*\r\n \t* Counterpart to Solidity's `+` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Addition cannot overflow.\r\n \t*/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tuint256 c = a + b;\r\n    \trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the subtraction of two unsigned integers, reverting on\r\n \t* overflow (when the result is negative).\r\n \t*\r\n \t* Counterpart to Solidity's `-` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Subtraction cannot overflow.\r\n \t*/\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n \t* overflow (when the result is negative).\r\n \t*\r\n \t* Counterpart to Solidity's `-` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Subtraction cannot overflow.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    \trequire(b <= a, errorMessage);\r\n    \tuint256 c = a - b;\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the multiplication of two unsigned integers, reverting on\r\n \t* overflow.\r\n \t*\r\n \t* Counterpart to Solidity's `*` operator.\r\n \t*\r\n \t* Requirements:\r\n \t* - Multiplication cannot overflow.\r\n \t*/\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    \t// benefit is lost if 'b' is also tested.\r\n    \t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    \tif (a == 0) {\r\n        \treturn 0;\r\n    \t}\r\n\r\n    \tuint256 c = a * b;\r\n    \trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the integer division of two unsigned integers. Reverts on\r\n \t* division by zero. The result is rounded towards zero.\r\n \t*\r\n \t* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n \t* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n \t* uses an invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*/\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n \t* division by zero. The result is rounded towards zero.\r\n \t*\r\n \t* Counterpart to Solidity's `/` operator. Note: this function uses a\r\n \t* `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n \t* uses an invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    \t// Solidity only automatically asserts when dividing by 0\r\n    \trequire(b > 0, errorMessage);\r\n    \tuint256 c = a / b;\r\n    \t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    \treturn c;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n \t* Reverts when dividing by zero.\r\n \t*\r\n \t* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n \t* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n \t* invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*/\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n \t* Reverts with custom message when dividing by zero.\r\n \t*\r\n \t* Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n \t* opcode (which leaves remaining gas untouched) while Solidity uses an\r\n \t* invalid opcode to revert (consuming all remaining gas).\r\n \t*\r\n \t* Requirements:\r\n \t* - The divisor cannot be zero.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    \trequire(b != 0, errorMessage);\r\n    \treturn a % b;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n \t* @dev Returns true if `account` is a contract.\r\n \t*\r\n \t* [IMPORTANT]\r\n \t* ====\r\n \t* It is unsafe to assume that an address for which this function returns\r\n \t* false is an externally-owned account (EOA) and not a contract.\r\n \t*\r\n \t* Among others, `isContract` will return false for the following\r\n \t* types of addresses:\r\n \t*\r\n \t*  - an externally-owned account\r\n \t*  - a contract in construction\r\n \t*  - an address where a contract will be created\r\n \t*  - an address where a contract lived, but was destroyed\r\n \t* ====\r\n \t*/\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n    \t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    \t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    \t// for accounts without code, i.e. `keccak256('')`\r\n    \tbytes32 codehash;\r\n    \tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    \t// solhint-disable-next-line no-inline-assembly\r\n    \tassembly { codehash := extcodehash(account) }\r\n    \treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Converts an `address` into `address payable`. Note that this is\r\n \t* simply a type cast: the actual underlying value is not changed.\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction toPayable(address account) internal pure returns (address payable) {\r\n    \treturn address(uint160(account));\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n \t* `recipient`, forwarding all available gas and reverting on errors.\r\n \t*\r\n \t* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n \t* of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n \t* imposed by `transfer`, making them unable to receive funds via\r\n \t* `transfer`. {sendValue} removes this limitation.\r\n \t*\r\n \t* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n \t*\r\n \t* IMPORTANT: because control is transferred to `recipient`, care must be\r\n \t* taken to not create reentrancy vulnerabilities. Consider using\r\n \t* {ReentrancyGuard} or the\r\n \t* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n \t*\r\n \t* _Available since v2.4.0._\r\n \t*/\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n    \trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    \t// solhint-disable-next-line avoid-call-value\r\n    \t(bool success, ) = recipient.call.value(amount)(\"\");\r\n    \trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct Counter {\r\n    \t// This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n    \t// the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n    \t// this feature: see https://github.com/ethereum/solidity/issues/4637\r\n    \tuint256 _value; // default: 0\r\n\t}\r\n\r\n\tfunction current(Counter storage counter) internal view returns (uint256) {\r\n    \treturn counter._value;\r\n\t}\r\n\r\n\tfunction increment(Counter storage counter) internal {\r\n    \t// The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n    \tcounter._value += 1;\r\n\t}\r\n\r\n\tfunction decrement(Counter storage counter) internal {\r\n    \tcounter._value = counter._value.sub(1);\r\n\t}\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n\t// Empty internal constructor, to prevent people from mistakenly deploying\r\n\t// an instance of this contract, which should be used via inheritance.\r\n\tconstructor () internal { }\r\n\t// solhint-disable-previous-line no-empty-blocks\r\n\r\n\tfunction _msgSender() internal view returns (address payable) {\r\n    \treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns (bytes memory) {\r\n    \tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    \treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n\t/**\r\n \t* @dev Returns true if this contract implements the interface defined by\r\n \t* `interfaceId`. See the corresponding\r\n \t* https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n \t* to learn more about how these ids are created.\r\n \t*\r\n \t* This function call must use less than 30 000 gas.\r\n \t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\t/*\r\n \t* bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n\t/**\r\n \t* @dev Mapping of interface ids to whether or not it's supported.\r\n \t*/\r\n\tmapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n\tconstructor () internal {\r\n    \t// Derived contracts need only register support for their own interfaces,\r\n    \t// we register support for ERC165 itself here\r\n    \t_registerInterface(_INTERFACE_ID_ERC165);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev See {IERC165-supportsInterface}.\r\n \t*\r\n \t* Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n \t*/\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n    \treturn _supportedInterfaces[interfaceId];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Registers the contract as an implementer of the interface defined by\r\n \t* `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n \t* registering its interface id is not required.\r\n \t*\r\n \t* See {IERC165-supportsInterface}.\r\n \t*\r\n \t* Requirements:\r\n \t*\r\n \t* - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n \t*/\r\n\tfunction _registerInterface(bytes4 interfaceId) internal {\r\n    \trequire(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n    \t_supportedInterfaces[interfaceId] = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n \t* @dev Returns the number of NFTs in `owner`'s account.\r\n \t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n\t/**\r\n \t* @dev Returns the owner of the NFT specified by `tokenId`.\r\n \t*/\r\n\tfunction ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n\t/**\r\n \t* @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n \t* another (`to`).\r\n \t*\r\n \t*\r\n \t*\r\n \t* Requirements:\r\n \t* - `from`, `to` cannot be zero.\r\n \t* - `tokenId` must be owned by `from`.\r\n \t* - If the caller is not `from`, it must be have been allowed to move this\r\n \t* NFT by either {approve} or {setApprovalForAll}.\r\n \t*/\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\t/**\r\n \t* @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n \t* another (`to`).\r\n \t*\r\n \t* Requirements:\r\n \t* - If the caller is not `from`, it must be approved to move this NFT by\r\n \t* either {approve} or {setApprovalForAll}.\r\n \t*/\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public;\r\n\tfunction approve(address to, uint256 tokenId) public;\r\n\tfunction getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n\tfunction setApprovalForAll(address operator, bool _approved) public;\r\n\tfunction isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n\t/**\r\n \t* @notice Handle the receipt of an NFT\r\n \t* @dev The ERC721 smart contract calls this function on the recipient\r\n \t* after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n \t* otherwise the caller will revert the transaction. The selector to be\r\n \t* returned can be obtained as `this.onERC721Received.selector`. This\r\n \t* function MAY throw to revert and reject the transfer.\r\n \t* Note: the ERC721 contract address is always the message sender.\r\n \t* @param operator The address which called `safeTransferFrom` function\r\n \t* @param from The address which previously owned the token\r\n \t* @param tokenId The NFT identifier which is being transferred\r\n \t* @param data Additional data with no specified format\r\n \t* @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n \t*/\r\n\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n\tpublic returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\tusing Counters for Counters.Counter;\r\n\r\n\t// Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n\tbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t// Mapping from token ID to owner\r\n\tmapping (uint256 => address) private _tokenOwner;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping (uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to number of owned token\r\n\tmapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n\t/*\r\n \t* \tbytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n \t* \tbytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n \t* \tbytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n \t* \tbytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n \t* \tbytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n \t* \tbytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n \t* \tbytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n \t* \tbytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n \t* \tbytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n \t*\r\n \t* \t=> 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n \t*    \t0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n\tconstructor () public {\r\n    \t// register the supported interfaces to conform to ERC721 via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC721);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the balance of the specified address.\r\n \t* @param owner address to query the balance of\r\n \t* @return uint256 representing the amount owned by the passed address\r\n \t*/\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n    \trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n    \treturn _ownedTokensCount[owner].current();\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the owner of the specified token ID.\r\n \t* @param tokenId uint256 ID of the token to query the owner of\r\n \t* @return address currently marked as the owner of the given token ID\r\n \t*/\r\n\tfunction ownerOf(uint256 tokenId) public view returns (address) {\r\n    \taddress owner = _tokenOwner[tokenId];\r\n    \trequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n    \treturn owner;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Approves another address to transfer the given token ID\r\n \t* The zero address indicates there is no approved address.\r\n \t* There can only be one approved address per token at a given time.\r\n \t* Can only be called by the token owner or an approved operator.\r\n \t* @param to address to be approved for the given token ID\r\n \t* @param tokenId uint256 ID of the token to be approved\r\n \t*/\r\n\tfunction approve(address to, uint256 tokenId) public {\r\n    \taddress owner = ownerOf(tokenId);\r\n    \trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n    \trequire(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n        \t\"ERC721: approve caller is not owner nor approved for all\"\r\n    \t);\r\n\r\n    \t_tokenApprovals[tokenId] = to;\r\n    \temit Approval(owner, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the approved address for a token ID, or zero if no address set\r\n \t* Reverts if the token ID does not exist.\r\n \t* @param tokenId uint256 ID of the token to query the approval of\r\n \t* @return address currently approved for the given token ID\r\n \t*/\r\n\tfunction getApproved(uint256 tokenId) public view returns (address) {\r\n    \trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n    \treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Sets or unsets the approval of a given operator\r\n \t* An operator is allowed to transfer all tokens of the sender on their behalf.\r\n \t* @param to operator address to set the approval\r\n \t* @param approved representing the status of the approval to be set\r\n \t*/\r\n\tfunction setApprovalForAll(address to, bool approved) public {\r\n    \trequire(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n    \t_operatorApprovals[_msgSender()][to] = approved;\r\n    \temit ApprovalForAll(_msgSender(), to, approved);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Tells whether an operator is approved by a given owner.\r\n \t* @param owner owner address which you want to query the approval of\r\n \t* @param operator operator address which you want to query the approval of\r\n \t* @return bool whether the given operator is approved by the given owner\r\n \t*/\r\n\tfunction isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n    \treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Transfers the ownership of a given token ID to another address.\r\n \t* Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n \t* Requires the msg.sender to be the owner, approved, or operator.\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public {\r\n    \t//solhint-disable-next-line max-line-length\r\n    \trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n    \t_transferFrom(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Safely transfers the ownership of a given token ID to another address\r\n \t* If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* Requires the msg.sender to be the owner, approved, or operator\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n    \tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Safely transfers the ownership of a given token ID to another address\r\n \t* If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* Requires the _msgSender() to be the owner, approved, or operator\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @param _data bytes data to send along with a safe transfer check\r\n \t*/\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n    \trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n    \t_safeTransferFrom(from, to, tokenId, _data);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Safely transfers the ownership of a given token ID to another address\r\n \t* If the target address is a contract, it must implement `onERC721Received`,\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* Requires the msg.sender to be the owner, approved, or operator\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @param _data bytes data to send along with a safe transfer check\r\n \t*/\r\n\tfunction _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n    \t_transferFrom(from, to, tokenId);\r\n    \trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns whether the specified token exists.\r\n \t* @param tokenId uint256 ID of the token to query the existence of\r\n \t* @return bool whether the token exists\r\n \t*/\r\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\r\n    \taddress owner = _tokenOwner[tokenId];\r\n    \treturn owner != address(0);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns whether the given spender can transfer a given token ID.\r\n \t* @param spender address of the spender to query\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @return bool whether the msg.sender is approved for the given token ID,\r\n \t* is an operator of the owner, or is the owner of the token\r\n \t*/\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n    \trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n    \taddress owner = ownerOf(tokenId);\r\n    \treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to safely mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* If the target address is a contract, it must implement `onERC721Received`,\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* @param to The address that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t*/\r\n\tfunction _safeMint(address to, uint256 tokenId) internal {\r\n    \t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to safely mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* If the target address is a contract, it must implement `onERC721Received`,\r\n \t* which is called upon a safe transfer, and return the magic value\r\n \t* `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n \t* the transfer is reverted.\r\n \t* @param to The address that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t* @param _data bytes data to send along with a safe transfer check\r\n \t*/\r\n\tfunction _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n    \t_mint(to, tokenId);\r\n    \trequire(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* @param to The address that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t*/\r\n\tfunction _mint(address to, uint256 tokenId) internal {\r\n    \trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n    \trequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n    \t_tokenOwner[tokenId] = to;\r\n    \t_ownedTokensCount[to].increment();\r\n\r\n    \temit Transfer(address(0), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* Deprecated, use {_burn} instead.\r\n \t* @param owner owner of the token to burn\r\n \t* @param tokenId uint256 ID of the token being burned\r\n \t*/\r\n\tfunction _burn(address owner, uint256 tokenId) internal {\r\n    \trequire(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n    \t_clearApproval(tokenId);\r\n\r\n    \t_ownedTokensCount[owner].decrement();\r\n    \t_tokenOwner[tokenId] = address(0);\r\n\r\n    \temit Transfer(owner, address(0), tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* @param tokenId uint256 ID of the token being burned\r\n \t*/\r\n\tfunction _burn(uint256 tokenId) internal {\r\n    \t_burn(ownerOf(tokenId), tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to transfer ownership of a given token ID to another address.\r\n \t* As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction _transferFrom(address from, address to, uint256 tokenId) internal {\r\n    \trequire(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n    \trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n    \t_clearApproval(tokenId);\r\n\r\n    \t_ownedTokensCount[from].decrement();\r\n    \t_ownedTokensCount[to].increment();\r\n\r\n    \t_tokenOwner[tokenId] = to;\r\n\r\n    \temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n \t* The call is not executed if the target address is not a contract.\r\n \t*\r\n \t* This is an internal detail of the `ERC721` contract and its use is deprecated.\r\n \t* @param from address representing the previous owner of the given token ID\r\n \t* @param to target address that will receive the tokens\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t* @param _data bytes optional data to send along with the call\r\n \t* @return bool whether the call correctly returned the expected magic value\r\n \t*/\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n    \tinternal returns (bool)\r\n\t{\r\n    \tif (!to.isContract()) {\r\n        \treturn true;\r\n    \t}\r\n    \t// solhint-disable-next-line avoid-low-level-calls\r\n    \t(bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n        \tIERC721Receiver(to).onERC721Received.selector,\r\n        \t_msgSender(),\r\n        \tfrom,\r\n        \ttokenId,\r\n        \t_data\r\n    \t));\r\n    \tif (!success) {\r\n        \tif (returndata.length > 0) {\r\n            \t// solhint-disable-next-line no-inline-assembly\r\n            \tassembly {\r\n                \tlet returndata_size := mload(returndata)\r\n                \trevert(add(32, returndata), returndata_size)\r\n            \t}\r\n        \t} else {\r\n            \trevert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n        \t}\r\n    \t} else {\r\n        \tbytes4 retval = abi.decode(returndata, (bytes4));\r\n        \treturn (retval == _ERC721_RECEIVED);\r\n    \t}\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to clear current approval of a given token ID.\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction _clearApproval(uint256 tokenId) private {\r\n    \tif (_tokenApprovals[tokenId] != address(0)) {\r\n        \t_tokenApprovals[tokenId] = address(0);\r\n    \t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n\tfunction tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n\t// Mapping from owner to list of owned token IDs\r\n\tmapping(address => uint256[]) private _ownedTokens;\r\n\r\n\t// Mapping from token ID to index of the owner tokens list\r\n\tmapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n\t// Array with all token ids, used for enumeration\r\n\tuint256[] private _allTokens;\r\n\r\n\t// Mapping from token id to position in the allTokens array\r\n\tmapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n\t/*\r\n \t* \tbytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n \t* \tbytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n \t* \tbytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n \t*\r\n \t* \t=> 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n\t/**\r\n \t* @dev Constructor function.\r\n \t*/\r\n\tconstructor () public {\r\n    \t// register the supported interface to conform to ERC721Enumerable via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n \t* @param owner address owning the tokens list to be accessed\r\n \t* @param index uint256 representing the index to be accessed of the requested tokens list\r\n \t* @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n \t*/\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n    \trequire(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n    \treturn _ownedTokens[owner][index];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the total amount of tokens stored by the contract.\r\n \t* @return uint256 representing the total amount of tokens\r\n \t*/\r\n\tfunction totalSupply() public view returns (uint256) {\r\n    \treturn _allTokens.length;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token ID at a given index of all the tokens in this contract\r\n \t* Reverts if the index is greater or equal to the total number of tokens.\r\n \t* @param index uint256 representing the index to be accessed of the tokens list\r\n \t* @return uint256 token ID at the given index of the tokens list\r\n \t*/\r\n\tfunction tokenByIndex(uint256 index) public view returns (uint256) {\r\n    \trequire(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n    \treturn _allTokens[index];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to transfer ownership of a given token ID to another address.\r\n \t* As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n \t* @param from current owner of the token\r\n \t* @param to address to receive the ownership of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be transferred\r\n \t*/\r\n\tfunction _transferFrom(address from, address to, uint256 tokenId) internal {\r\n    \tsuper._transferFrom(from, to, tokenId);\r\n\r\n    \t_removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n    \t_addTokenToOwnerEnumeration(to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to mint a new token.\r\n \t* Reverts if the given token ID already exists.\r\n \t* @param to address the beneficiary that will own the minted token\r\n \t* @param tokenId uint256 ID of the token to be minted\r\n \t*/\r\n\tfunction _mint(address to, uint256 tokenId) internal {\r\n    \tsuper._mint(to, tokenId);\r\n\r\n    \t_addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n    \t_addTokenToAllTokensEnumeration(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* Deprecated, use {ERC721-_burn} instead.\r\n \t* @param owner owner of the token to burn\r\n \t* @param tokenId uint256 ID of the token being burned\r\n \t*/\r\n\tfunction _burn(address owner, uint256 tokenId) internal {\r\n    \tsuper._burn(owner, tokenId);\r\n\r\n    \t_removeTokenFromOwnerEnumeration(owner, tokenId);\r\n    \t// Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n    \t_ownedTokensIndex[tokenId] = 0;\r\n\r\n    \t_removeTokenFromAllTokensEnumeration(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the list of token IDs of the requested owner.\r\n \t* @param owner address owning the tokens\r\n \t* @return uint256[] List of token IDs owned by the requested address\r\n \t*/\r\n\tfunction _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n    \treturn _ownedTokens[owner];\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n \t* @param to address representing the new owner of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n \t*/\r\n\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n    \t_ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n    \t_ownedTokens[to].push(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to add a token to this extension's token tracking data structures.\r\n \t* @param tokenId uint256 ID of the token to be added to the tokens list\r\n \t*/\r\n\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n    \t_allTokensIndex[tokenId] = _allTokens.length;\r\n    \t_allTokens.push(tokenId);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n \t* while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n \t* gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n \t* This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n \t* @param from address representing the previous owner of the given token ID\r\n \t* @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n \t*/\r\n\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n    \t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n    \t// then delete the last slot (swap and pop).\r\n\r\n    \tuint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n    \tuint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n    \t// When the token to delete is the last token, the swap operation is unnecessary\r\n    \tif (tokenIndex != lastTokenIndex) {\r\n        \tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n        \t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        \t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    \t}\r\n\r\n    \t// This also deletes the contents at the last position of the array\r\n    \t_ownedTokens[from].length--;\r\n\r\n    \t// Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n    \t// lastTokenId, or just over the end of the array if the token was the last one).\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Private function to remove a token from this extension's token tracking data structures.\r\n \t* This has O(1) time complexity, but alters the order of the _allTokens array.\r\n \t* @param tokenId uint256 ID of the token to be removed from the tokens list\r\n \t*/\r\n\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n    \t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n    \t// then delete the last slot (swap and pop).\r\n\r\n    \tuint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    \tuint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n    \t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n    \t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n    \t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n    \tuint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n    \t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    \t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n    \t// This also deletes the contents at the last position of the array\r\n    \t_allTokens.length--;\r\n    \t_allTokensIndex[tokenId] = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {\r\n\t// Token name\r\n\tstring private _name;\r\n\r\n\t// Token symbol\r\n\tstring private _symbol;\r\n\r\n\t// Base URI\r\n\tstring private _baseURI;\r\n\r\n\t// Optional mapping for token URIs\r\n\tmapping(uint256 => string) private _tokenURIs;\r\n\r\n\t/*\r\n \t* \tbytes4(keccak256('name()')) == 0x06fdde03\r\n \t* \tbytes4(keccak256('symbol()')) == 0x95d89b41\r\n \t* \tbytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n \t*\r\n \t* \t=> 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n \t*/\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n\t/**\r\n \t* @dev Constructor function\r\n \t*/\r\n\tconstructor (string memory name, string memory symbol) public {\r\n    \t_name = name;\r\n    \t_symbol = symbol;\r\n\r\n    \t// register the supported interfaces to conform to ERC721 via ERC165\r\n    \t_registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token name.\r\n \t* @return string representing the token name\r\n \t*/\r\n\tfunction name() external view returns (string memory) {\r\n    \treturn _name;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Gets the token symbol.\r\n \t* @return string representing the token symbol\r\n \t*/\r\n\tfunction symbol() external view returns (string memory) {\r\n    \treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Returns the URI for a given token ID. May return an empty string.\r\n \t*\r\n \t* If the token's URI is non-empty and a base URI was set (via\r\n \t* {_setBaseURI}), it will be added to the token ID's URI as a prefix.\r\n \t*\r\n \t* Reverts if the token ID does not exist.\r\n \t*/\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory) {\r\n    \trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n    \tstring memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n    \t// Even if there is a base URI, it is only appended to non-empty token-specific URIs\r\n    \tif (bytes(_tokenURI).length == 0) {\r\n        \treturn \"\";\r\n    \t} else {\r\n        \t// abi.encodePacked is being used to concatenate strings\r\n        \treturn string(abi.encodePacked(_baseURI, _tokenURI));\r\n    \t}\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to set the token URI for a given token.\r\n \t*\r\n \t* Reverts if the token ID does not exist.\r\n \t*\r\n \t* TIP: if all token IDs share a prefix (e.g. if your URIs look like\r\n \t* `http://api.myproject.com/token/<id>`), use {_setBaseURI} to store\r\n \t* it and save gas.\r\n \t*/\r\n\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\r\n    \trequire(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n    \t_tokenURIs[tokenId] = _tokenURI;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to set the base URI for all token IDs. It is\r\n \t* automatically added as a prefix to the value returned in {tokenURI}.\r\n \t*\r\n \t* _Available since v2.5.0._\r\n \t*/\r\n\tfunction _setBaseURI(string memory baseURI) internal {\r\n    \t_baseURI = baseURI;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the base URI set via {_setBaseURI}. This will be\r\n\t* automatically added as a preffix in {tokenURI} to each token's URI, when\r\n\t* they are non-empty.\r\n\t*\r\n\t* _Available since v2.5.0._\r\n\t*/\r\n\tfunction baseURI() external view returns (string memory) {\r\n    \treturn _baseURI;\r\n\t}\r\n\r\n\t/**\r\n \t* @dev Internal function to burn a specific token.\r\n \t* Reverts if the token does not exist.\r\n \t* Deprecated, use _burn(uint256) instead.\r\n \t* @param owner owner of the token to burn\r\n \t* @param tokenId uint256 ID of the token being burned by the msg.sender\r\n \t*/\r\n\tfunction _burn(address owner, uint256 tokenId) internal {\r\n    \tsuper._burn(owner, tokenId);\r\n\r\n    \t// Clear metadata (if any)\r\n    \tif (bytes(_tokenURIs[tokenId]).length != 0) {\r\n        \tdelete _tokenURIs[tokenId];\r\n    \t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Money Stamps Contract - Interest-Bearing NFTs with lexical stamps\r\n * <presented by OpenESQ || lexDAO>\r\n */\r\ncontract MoneyStampsERC721 is ERC721Metadata, ERC721Enumerable {\r\n    using SafeMath for uint256;\r\n\r\n    /***********************************|\r\n    |        Variables and Events       |\r\n    |__________________________________*/\r\n\r\n    IERC20 internal dai;\r\n    IChai internal chai;\r\n\r\n    mapping(uint256 => uint256) internal chaiBalanceByTokenId; // Amount of Chai minted from Dai deposited\r\n\r\n    uint256 internal totalMintedTokens;\r\n    uint256 internal mintFee;\r\n    uint256 internal collectedFees;\r\n    uint256 internal requiredFunding; // Amount of Dai to deposit when minting\r\n\r\n    address private owner; // To be assigned to a DAO\r\n\r\n    bytes16 public version = \"v0.0.1\";\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /***********************************|\r\n    |             Modifiers             |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"E102\");\r\n        _;\r\n    }\r\n\r\n    /***********************************|\r\n    |          Initialization           |\r\n    |__________________________________*/\r\n\r\n    constructor() ERC721Metadata(\"$TAMP\", \"$TAMP\") public {\r\n        // requiredFunding = 1e18;\r\n        // mintFee = 50;    //  0.5% of Chai from deposited Dai\r\n\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /***********************************|\r\n    |            Public Read            |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Gets the address of the contract owner.\r\n     * @return The address of the owner\r\n     */\r\n    function getContractOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    /***********************************|\r\n    |            Stamp Glue             |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Gets the Amount of Base DAI held in the Token (amount token was minted with)\r\n     * @return The Amount of DAI held in the Token\r\n     */\r\n    function baseStampWeight() public view returns (uint256) {\r\n        return requiredFunding;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of interest the Token has generated (its accumulated stamp-loot)\r\n     * @param _tokenId      The ID of the Token\r\n     * @return  The amount of interest the Token has generated\r\n     */\r\n    function currentStampLoot(uint256 _tokenId) public returns (uint256) {\r\n        require(_exists(_tokenId), \"E402\");\r\n\r\n        uint256 currentLoot = chai.dai(chaiBalanceByTokenId[_tokenId]);\r\n        if (requiredFunding >= currentLoot) { return 0; }\r\n        return currentLoot.sub(requiredFunding);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner of the Token to collect the interest generated from the token\r\n     *  without removing the underlying DAI that is held in the token\r\n     * @param _tokenId      The ID of the Token\r\n     * @return The amount of interest released from the token\r\n     */\r\n    function peelStamp(uint256 _tokenId) public returns (uint256) {\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"E103\");\r\n\r\n        uint256 _currentLootInDai = currentStampLoot(_tokenId);\r\n        require(_currentLootInDai > 0, \"E403\");\r\n\r\n        uint256 _paidChai = _payoutStampedDai(msg.sender, _currentLootInDai);\r\n        chaiBalanceByTokenId[_tokenId] = chaiBalanceByTokenId[_tokenId].sub(_paidChai);\r\n\r\n        return _currentLootInDai;\r\n    }\r\n\r\n    /***********************************|\r\n    |            Public Mint            |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Mints multiple new Stamps\r\n     * @param _to       The owner address to assign the new tokens to\r\n     * @param _amount   The amount of tokens to mint\r\n     * @param _stamp     Custom lexical stamp used to establish authenticity \r\n     * @return  The IDs of the newly minted tokens\r\n     */\r\n    function mintStamps(address _to, uint256 _amount, string memory _stamp) public returns (uint256[] memory) {\r\n        address _self = address(this);\r\n        uint256 i;\r\n        uint256 _tokenId;\r\n        uint256 _totalDai;\r\n        uint256[] memory _tokenIds = new uint256[](_amount);\r\n\r\n        for (i = 0; i < _amount; ++i) {\r\n            _totalDai = requiredFunding.add(_totalDai);\r\n\r\n            _tokenId = (totalMintedTokens.add(i+1));\r\n            _tokenIds[i] = _tokenId;\r\n            _mint(_to, _tokenId);\r\n    \t    _setTokenURI(_tokenId, _stamp);\r\n        }\r\n        totalMintedTokens = totalMintedTokens.add(_amount);\r\n\r\n        if (_totalDai > 0) {\r\n            // Transfer DAI from User to Contract\r\n            _collectRequiredDai(msg.sender, _totalDai);\r\n\r\n            uint256 _balance = chai.balanceOf(_self);\r\n            for (i = 0; i < _amount; ++i) {\r\n                _tokenId = _tokenIds[i];\r\n\r\n                // Tokenize Interest\r\n                chai.join(_self, requiredFunding);\r\n\r\n                // Track Chai in each Token\r\n                 chaiBalanceByTokenId[_tokenId] = _totalChaiForToken(chai.balanceOf(_self).sub(_balance));\r\n                _balance = chai.balanceOf(_self);\r\n            }\r\n        }\r\n        return _tokenIds;\r\n    }\r\n\r\n    /***********************************|\r\n    |            Public Burn            |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @notice Destroys a Stamp and releases the underlying DAI + Interest (Weight + Loot)\r\n     * @param _tokenId      The ID of the token to burn\r\n     */\r\n    function burnStamp(uint256 _tokenId) public {\r\n        // Burn Token\r\n        _burn(msg.sender, _tokenId);\r\n\r\n        // Payout Dai + Interest\r\n        uint256 _tokenChai = chaiBalanceByTokenId[_tokenId];\r\n        chaiBalanceByTokenId[_tokenId] = 0;\r\n        _payoutFundedDai(msg.sender, _tokenChai);\r\n    }\r\n\r\n    /**\r\n     * @notice Destroys multiple Stamps and releases the underlying DAI + Interest (Weight + Loot)\r\n     * @param _tokenIds     The IDs of the tokens to burn\r\n     */\r\n    function burnStamps(uint256[] memory _tokenIds) public {\r\n        uint256 _tokenId;\r\n        uint256 _totalChai;\r\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\r\n            _tokenId = _tokenIds[i];\r\n\r\n            // Burn Token\r\n            _burn(msg.sender, _tokenId);\r\n\r\n            // Payout Dai + Interest\r\n            _totalChai = chaiBalanceByTokenId[_tokenId].add(_totalChai);\r\n            chaiBalanceByTokenId[_tokenId] = 0;\r\n        }\r\n        _payoutFundedDai(msg.sender, _totalChai);\r\n    }\r\n\r\n    /***********************************|\r\n    |            Only Owner             |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @dev Setup the DAI/CHAI contracts and configure the $TAMP contract\r\n     */\r\n    function setup(address _daiAddress, address _chaiAddress, uint256 _mintFee, uint256 _requiredFunding) public onlyOwner {\r\n        // Set DAI as Funding Token\r\n        dai = IERC20(_daiAddress);\r\n        chai = IChai(_chaiAddress);\r\n\r\n        // Setup Chai to Tokenize DAI Interest\r\n        dai.approve(_chaiAddress, uint(-1));\r\n\r\n        mintFee = _mintFee;\r\n        requiredFunding = _requiredFunding;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows contract owner to withdraw any fees earned\r\n     */\r\n    function withdrawFees() public onlyOwner {\r\n        uint256 _balance = address(this).balance;\r\n        if (_balance > 0) {\r\n            msg.sender.transfer(_balance);\r\n        }\r\n        if (collectedFees > 0) {\r\n            _payoutFundedDai(msg.sender, collectedFees);\r\n            collectedFees = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers the ownership of the contract to new address\r\n     * @param _newOwner Address of the new owner\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"E101\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    /***********************************|\r\n    |         Private Functions         |\r\n    |__________________________________*/\r\n\r\n    /**\r\n     * @dev Collects the Required DAI from the users wallet during Minting\r\n     * @param _from         The owner address to collect the DAI from\r\n     * @param _requiredDai  The amount of DAI to collect from the user\r\n     */\r\n    function _collectRequiredDai(address _from, uint256 _requiredDai) internal {\r\n        // Transfer DAI from User to Contract\r\n        uint256 _userDaiBalance = dai.balanceOf(_from);\r\n        require(_requiredDai <= _userDaiBalance, \"E404\");\r\n        require(dai.transferFrom(_from, address(this), _requiredDai), \"E405\");\r\n    }\r\n\r\n    /**\r\n     * @dev Pays out a specified amount of CHAI\r\n     * @param _to           The owner address to pay out to\r\n     * @param _totalChai    The total amount of CHAI to pay out\r\n     */\r\n    function _payoutFundedDai(address _to, uint256 _totalChai) internal {\r\n        address _self = address(this);\r\n\r\n        // Exit Chai and collect Dai + Interest\r\n        chai.exit(_self, _totalChai);\r\n\r\n        // Transfer Dai + Interest\r\n        uint256 _receivedDai = dai.balanceOf(_self);\r\n        require(dai.transferFrom(_self, _to, _receivedDai), \"E405\");\r\n    }\r\n\r\n    /**\r\n     * @dev Pays out a specified amount of DAI\r\n     * @param _to           The owner address to pay out to\r\n     * @param _totalDai     The total amount of DAI to pay out\r\n     */\r\n    function _payoutStampedDai(address _to, uint256 _totalDai) internal returns (uint256) {\r\n        address _self = address(this);\r\n\r\n        // Collect Interest\r\n        uint256 _chai = chai.draw(_self, _totalDai);\r\n\r\n        // Transfer Interest\r\n        uint256 _receivedDai = dai.balanceOf(_self);\r\n        require(dai.transferFrom(_self, _to, _receivedDai), \"E405\");\r\n        return _chai;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount of DAI held within a token during minting\r\n     *      Note: Accounts for any contract fees\r\n     * @param _tokenChai    The total amount of DAI used to fund the token\r\n     * @return  The actual amount of DAI to fund the token - fees\r\n     */\r\n    function _totalChaiForToken(uint256 _tokenChai) internal returns (uint256) {\r\n        if (mintFee == 0) { return _tokenChai; }\r\n        uint256 _mintFee = _tokenChai.mul(mintFee).div(1e4);\r\n        collectedFees = collectedFees.add(_mintFee);\r\n        return _tokenChai.sub(_mintFee);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseStampWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnStamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnStamps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"currentStampLoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_stamp\",\"type\":\"string\"}],\"name\":\"mintStamps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"peelStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chaiAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requiredFunding\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MoneyStampsERC721","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2bb1a217cad7940f37ad65b67a9cc545e157d16f2e2c3d5d958f181554b8eee4"}]}