{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-11-11\r\n*/\r\n\r\npragma solidity 0.4.25;\r\n\r\ncontract E2D {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends() > 0);\r\n        _;\r\n    }\r\n\r\n    // owner can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyOwner(){\r\n        require(ownerAddr == msg.sender || OWNER_ADDRESS_2 == msg.sender, \"only owner can perform this!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInitialInvestors(){\r\n        if(initialState) {\r\n            require(initialInvestors[msg.sender] == true, \"only allowed investor can invest!\");\r\n            _;\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event onPayDividends(\r\n        uint256 dividends,\r\n        uint256 profitPerShare\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"E2D\";\r\n    string public symbol = \"E2D\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 10;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    address constant internal OWNER_ADDRESS = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\r\n    address constant internal OWNER_ADDRESS_2 = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\r\n    uint256 constant public INVESTOR_QUOTA = 0.01 ether;\r\n\r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n    uint256 internal totalInvestment_ = 0;\r\n    uint256 internal totalGameDividends_ = 0;\r\n\r\n    // smart contract owner address (see above on what they can do)\r\n    address public ownerAddr;\r\n\r\n    // initial investor list who can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\r\n    mapping(address => bool) public initialInvestors;\r\n\r\n    // when this is set to true, only allowed initialInvestors can purchase tokens.\r\n    bool public initialState = true;\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n\r\n    constructor() public {\r\n        // add initialInvestors here\r\n        ownerAddr = OWNER_ADDRESS;\r\n        initialInvestors[OWNER_ADDRESS] = true;\r\n        initialInvestors[OWNER_ADDRESS_2] = true;\r\n    }\r\n\r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller\r\n     */\r\n    function buy() public payable returns(uint256) {\r\n        purchaseTokens(msg.value);\r\n    }\r\n\r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     */\r\n    function() public payable {\r\n        purchaseTokens(msg.value);\r\n    }\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest() public onlyStronghands() {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends();\r\n\r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends);\r\n\r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit() public {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n\r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw() public onlyStronghands() {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends();\r\n\r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n\r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens) public onlyBagholders() {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress], \"token to sell should be less then balance!\");\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;      \r\n\r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) public onlyBagholders() returns(bool) {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        // also disables transfers until adminstrator phase is over\r\n        require(!initialState && (_amountOfTokens <= tokenBalanceLedger_[_customerAddress]), \"initial state or token > balance!\");\r\n\r\n        // withdraw all outstanding dividends first\r\n        if(myDividends() > 0) withdraw();\r\n\r\n        // liquify 10% of the tokens that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n  \r\n        // burn the fee tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n\r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n\r\n        // disperse dividends among holders\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n    }\r\n\r\n    function payDividends() external payable {\r\n        uint256 _dividends = msg.value;\r\n        require(_dividends > 0, \"dividends should be greater then 0!\");\r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n            totalGameDividends_ = SafeMath.add(totalGameDividends_, _dividends);\r\n            // fire event\r\n            emit onPayDividends(_dividends, profitPerShare_);\r\n        }\r\n    }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\r\n     */\r\n    function disableInitialStage() public onlyOwner() {\r\n        require(initialState == true, \"initial stage is already false!\");\r\n        initialState = false;\r\n    }\r\n\r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setInitialInvestors(address _addr, bool _status) public onlyOwner() {\r\n        initialInvestors[_addr] = _status;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name) public onlyOwner() {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol) public onlyOwner() {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total Investment.\r\n     */\r\n    function totalInvestment() public view returns(uint256) {\r\n        return totalInvestment_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total Game Dividends Paid.\r\n     */\r\n    function totalGameDividends() public view returns(uint256) {\r\n        return totalGameDividends_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens() public view returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     */ \r\n    function myDividends() public view returns(uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress) public view returns(uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress) public view returns(uint256) {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function sellPrice() public view returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply.\r\n        if(tokenSupply_ == 0){\r\n            return 0;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function buyPrice() public view returns(uint256) {\r\n        // our calculation relies on the token supply, so we need supply.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {\r\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) {\r\n        require(_tokensToSell <= tokenSupply_, \"token to sell should be less then total supply!\");\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingEthereum) internal onlyInitialInvestors() returns(uint256) {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = SafeMath.div(_incomingEthereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require((_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_)), \"token should be > 0!\");\r\n\r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0) {\r\n\r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n\r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        totalInvestment_ = SafeMath.add(totalInvestment_, _incomingEthereum);\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n\r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n\r\n        // disable initial stage if investor quota of 0.01 eth is reached\r\n        if(address(this).balance >= INVESTOR_QUOTA) {\r\n            initialState = false;\r\n        }\r\n\r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_);\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Constants {\r\n    address internal constant COMPANY_WALLET_ADDR = address(0x1dB107F9fB83B1e3955B48E7c5cF2834E248c82c);\r\n    address internal constant LAST10_WALLET_ADDR = address(0x3481C6b4b1575c3537f4bcc651bc41FD3D68aE20);\r\n    address internal constant FEE_WALLET_ADDR = address(0x3DB5f281467b3634E31Ef6305c61c49d02a03DC2);\r\n    address internal constant MISC_WALLET_ADDR = address(0x4294A9aA809ac55B8446d82C655d4B2af7B3e700);\r\n    uint internal constant LAST_10_MIN_INVESTMENT = 2 ether;\r\n}\r\n\r\ncontract InvestorsStorage {\r\n    using SafeMath for uint;\r\n    using Percent for Percent.percent;\r\n    struct investor {\r\n        uint keyIndex;\r\n        uint value;\r\n        uint paymentTime;\r\n        uint refs;\r\n        uint refBonus;\r\n        uint amountToDeduct;\r\n    }\r\n    struct recordStats {\r\n        uint investors;\r\n        uint invested;\r\n    }\r\n    struct itmap {\r\n        mapping(uint => recordStats) stats;\r\n        mapping(address => investor) data;\r\n        address[] keys;\r\n    }\r\n    \r\n    itmap private s;\r\n\r\n    address private owner;\r\n    \r\n    Percent.percent private _percent = Percent.percent(1,100);\r\n\r\n    event LogOwnerForInvestorContract(address addr);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"access denied\");\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit LogOwnerForInvestorContract(msg.sender);\r\n        s.keys.length++;\r\n    }\r\n    \r\n    function getDividendsPercent(address addr,uint tempBonus) public view returns(uint num, uint den) {\r\n        uint amount = s.data[addr].value.add(s.data[addr].refBonus);\r\n        amount = amount.add(tempBonus);\r\n        if(amount <= 10*10**18) { //10 ETH\r\n            return (75, 10000);\r\n        } else if(amount <= 50*10**18) { //50 ETH\r\n            return (8, 1000);\r\n        } else if(amount <= 100*10**18) { //100 ETH\r\n            return (9, 1000);\r\n        } else if(amount <= 300*10**18) { //300 ETH\r\n            return (1, 100); //Extra zero for two digits after decimal\r\n        } else {\r\n            return (12, 1000);\r\n        }\r\n    }\r\n\r\n    function insert(address addr, uint value) public onlyOwner returns (bool) {\r\n        uint keyIndex = s.data[addr].keyIndex;\r\n        if (keyIndex != 0) return false;\r\n        s.data[addr].value = value;\r\n        keyIndex = s.keys.length++;\r\n        s.data[addr].keyIndex = keyIndex;\r\n        s.keys[keyIndex] = addr;\r\n        return true;\r\n    }\r\n\r\n    function investorFullInfo(address addr) public view returns(uint, uint, uint, uint, uint,uint) {\r\n        return (s.data[addr].keyIndex, s.data[addr].value, s.data[addr].paymentTime,s.data[addr].refs,s.data[addr].refBonus,s.data[addr].amountToDeduct );\r\n    }\r\n\r\n    function investorBaseInfo(address addr) public view returns(uint, uint, uint, uint ) {\r\n        return (s.data[addr].value, s.data[addr].paymentTime, s.data[addr].refs, s.data[addr].refBonus);\r\n    }\r\n\r\n    function investorShortInfo(address addr) public view returns(uint, uint) {\r\n        return (\r\n        s.data[addr].value,\r\n        s.data[addr].refBonus\r\n        );\r\n    }\r\n\r\n    function addRefBonus(address addr, uint refBonus, uint dividendsPeriod) public onlyOwner returns (bool) {\r\n        if (s.data[addr].keyIndex == 0) {\r\n            assert(insert(addr, 0));\r\n        }\r\n\r\n        uint time;\r\n        time = s.data[addr].paymentTime;\r\n\r\n        if(time != 0) {\r\n            uint value = 0;\r\n            uint256 daysAfter = now.sub(time).div(dividendsPeriod);\r\n            if(daysAfter > 0) {\r\n                value = _getValueForAddr(addr, daysAfter);\r\n                _updatePayout(addr,refBonus, daysAfter);\r\n                // uint previousAmount = 0;\r\n                // uint futureAmount = 0;\r\n\r\n            }\r\n            s.data[addr].refBonus += refBonus;\r\n            uint256 hoursAfter = now.sub(time).mod(dividendsPeriod);\r\n            if(hoursAfter > 0) {\r\n                uint dailyDividends = _getValueForAddr(addr, 1);\r\n                uint hourlyDividends = dailyDividends.div(dividendsPeriod).mul(hoursAfter);\r\n                value = value.add(hourlyDividends);\r\n            }\r\n        } else {\r\n            s.data[addr].refBonus += refBonus;\r\n            s.data[addr].refs++;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _updatePayout(address addr,uint refBonus, uint256 daysAfter) internal  {\r\n\r\n                uint pincipleAmount = s.data[addr].value;\r\n                uint256 totalAmount = pincipleAmount.add(s.data[addr].refBonus);\r\n                (uint num, uint den) = getDividendsPercent(addr,0);\r\n                // previousAmount = previousAmount.add((totalAmount*num/den) * daysAfter);\r\n                totalAmount = (totalAmount*num/den) * daysAfter;\r\n\r\n\r\n                uint256 totalAmount2 = pincipleAmount.add(s.data[addr].refBonus);\r\n                totalAmount2 = totalAmount2.add(refBonus);\r\n                (uint num2, uint den2) = getDividendsPercent(addr,refBonus);\r\n                // futureAmount = futureAmount.add((totalAmount2*num2/den2) * daysAfter);\r\n                totalAmount2 = (totalAmount2*num2/den2) * daysAfter;\r\n\r\n                // uint previousPendingAmount = s.data[addr].amountToDeduct;\r\n                s.data[addr].amountToDeduct = s.data[addr].amountToDeduct.add(totalAmount2.sub(totalAmount));\r\n\r\n    }\r\n\r\n    function _getValueForAddr(address addr, uint daysAfter) internal returns (uint value) {\r\n        (uint num, uint den) = getDividendsPercent(addr,0);\r\n        _percent = Percent.percent(num, den);\r\n        value = _percent.mul(s.data[addr].value.add(s.data[addr].refBonus)) * daysAfter;\r\n    }\r\n\r\n    function addRefBonusWithRefs(address addr, uint refBonus, uint dividendsPeriod) public onlyOwner returns (bool) {\r\n        if (s.data[addr].keyIndex == 0) {\r\n            assert(insert(addr, 0));\r\n        }\r\n\r\n        uint time;\r\n        time = s.data[addr].paymentTime;\r\n\r\n        if(time != 0) {\r\n            uint value = 0;\r\n            uint256 daysAfter = now.sub(time).div(dividendsPeriod);\r\n            if(daysAfter > 0) {\r\n                value = _getValueForAddr(addr, daysAfter);\r\n            }\r\n            s.data[addr].refBonus += refBonus;\r\n            s.data[addr].refs++;\r\n            uint256 hoursAfter = now.sub(time).mod(dividendsPeriod);\r\n            if(hoursAfter > 0) {\r\n                uint dailyDividends = _getValueForAddr(addr, 1);\r\n                uint hourlyDividends = dailyDividends.div(dividendsPeriod).mul(hoursAfter);\r\n                value = value.add(hourlyDividends);\r\n            }\r\n        } else {\r\n            s.data[addr].refBonus += refBonus;\r\n            s.data[addr].refs++;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addValue(address addr, uint value) public onlyOwner returns (bool) {\r\n        if (s.data[addr].keyIndex == 0) return false;\r\n        s.data[addr].value += value;       \r\n        return true;\r\n    }\r\n\r\n    function updateStats(uint dt, uint invested, uint investors) public {\r\n        s.stats[dt].invested += invested;\r\n        s.stats[dt].investors += investors;\r\n    }\r\n    \r\n    function stats(uint dt) public view returns (uint invested, uint investors) {\r\n        return ( \r\n        s.stats[dt].invested,\r\n        s.stats[dt].investors\r\n        );\r\n    }\r\n\r\n    function setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\r\n        if (s.data[addr].keyIndex == 0) return false;\r\n        s.data[addr].paymentTime = paymentTime;\r\n        return true;\r\n    }\r\n    \r\n    function contains(address addr) public view returns (bool) {\r\n        return s.data[addr].keyIndex > 0;\r\n    }\r\n\r\n    function size() public view returns (uint) {\r\n        return s.keys.length;\r\n    }\r\n\r\n    function iterStart() public pure returns (uint) {\r\n        return 1;\r\n    }\r\n}\r\n\r\ncontract DT {\r\n    struct DateTime {\r\n        uint16 year;\r\n        uint8 month;\r\n        uint8 day;\r\n        uint8 hour;\r\n        uint8 minute;\r\n        uint8 second;\r\n        uint8 weekday;\r\n    }\r\n\r\n    uint private constant DAY_IN_SECONDS = 86400;\r\n    uint private constant YEAR_IN_SECONDS = 31536000;\r\n    uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n    uint16 private constant ORIGIN_YEAR = 1970;\r\n\r\n    function isLeapYear(uint16 year) internal pure returns (bool) {\r\n        if (year % 4 != 0) {\r\n            return false;\r\n        }\r\n        if (year % 100 != 0) {\r\n            return true;\r\n        }\r\n        if (year % 400 != 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function leapYearsBefore(uint year) internal pure returns (uint) {\r\n        year -= 1;\r\n        return year / 4 - year / 100 + year / 400;\r\n    }\r\n\r\n    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\r\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n            return 31;\r\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n            return 30;\r\n        } else if (isLeapYear(year)) {\r\n            return 29;\r\n        } else {\r\n            return 28;\r\n        }\r\n    }\r\n\r\n    function parseTimestamp(uint timestamp) internal pure returns (DateTime dt) {\r\n        uint secondsAccountedFor = 0;\r\n        uint buf;\r\n        uint8 i;\r\n\r\n        // Year\r\n        dt.year = getYear(timestamp);\r\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n        // Month\r\n        uint secondsInMonth;\r\n        for (i = 1; i <= 12; i++) {\r\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                dt.month = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor += secondsInMonth;\r\n        }\r\n\r\n        // Day\r\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                dt.day = i;\r\n                break;\r\n            }\r\n            secondsAccountedFor += DAY_IN_SECONDS;\r\n        }\r\n    }\r\n\r\n        \r\n    function getYear(uint timestamp) internal pure returns (uint16) {\r\n        uint secondsAccountedFor = 0;\r\n        uint16 year;\r\n        uint numLeapYears;\r\n\r\n        // Year\r\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n        while (secondsAccountedFor > timestamp) {\r\n            if (isLeapYear(uint16(year - 1))) {\r\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n            }\r\n            else {\r\n                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n            }\r\n            year -= 1;\r\n        }\r\n        return year;\r\n    }\r\n\r\n    function getMonth(uint timestamp) internal pure returns (uint8) {\r\n        return parseTimestamp(timestamp).month;\r\n    }\r\n\r\n    function getDay(uint timestamp) internal pure returns (uint8) {\r\n        return parseTimestamp(timestamp).day;\r\n    }\r\n}\r\n\r\ncontract _200eth is DT, Constants {\r\n    using Percent for Percent.percent;\r\n    using SafeMath for uint;\r\n    using Zero for *;\r\n    using ToAddress for *;\r\n    using Convert for *;\r\n\r\n    // investors storage - iterable map;\r\n    InvestorsStorage private m_investors = new InvestorsStorage();\r\n    mapping(address => address) public m_referrals;\r\n    mapping(address => bool) public m_isInvestor;\r\n    bool public m_nextWave = false;\r\n\r\n    // last 10 storage who's investment >= 0.02 ether\r\n    struct Last10Struct {\r\n        uint value;\r\n        uint index;\r\n    }\r\n    address[] private m_last10InvestorAddr;\r\n    mapping(address => Last10Struct) private m_last10Investor;\r\n\r\n    // automatically generates getters\r\n    address public ownerAddr;\r\n    uint public totalInvestments = 0;\r\n    uint public totalInvested = 0;\r\n    uint public constant minInvesment = 10 finney; // 0.01 eth\r\n    uint public constant dividendsPeriod = 24 hours; //24 hours\r\n    uint private gasFee = 0;\r\n    uint private last10 = 0;\r\n\r\n    //Pyramid Coin instance required to send dividends to coin holders.\r\n    E2D public e2d;\r\n\r\n    // percents \r\n    Percent.percent private m_companyPercent = Percent.percent(20, 100); // 5/100*100% = 10%\r\n    Percent.percent private m_refPercent1 = Percent.percent(3, 100); // 3/100*100% = 3%\r\n    Percent.percent private m_refPercent2 = Percent.percent(2, 100); // 2/100*100% = 2%\r\n    Percent.percent private m_fee = Percent.percent(1, 100); // 1/100*100% = 1%\r\n    Percent.percent private m_coinHolders = Percent.percent(5, 100); // 1/100*100% = 5%\r\n    Percent.percent private m_last10 = Percent.percent(4, 100); // 1/100*100% = 4%\r\n    Percent.percent private m_miscPercent = Percent.percent(5, 100); // 1/100*100% = 4%\r\n    Percent.percent private _percent = Percent.percent(1,100);\r\n\r\n    // more events for easy read from blockchain\r\n    event LogNewInvestor(address indexed addr, uint when, uint value);\r\n    event LogNewInvesment(address indexed addr, uint when, uint value);\r\n    event LogNewReferral(address indexed addr, uint when, uint value);\r\n    event LogPayDividends(address indexed addr, uint when, uint value);\r\n    event LogBalanceChanged(uint when, uint balance);\r\n    event LogNextWave(uint when);\r\n    event LogPayLast10(address addr, uint percent, uint amount);\r\n\r\n    modifier balanceChanged {\r\n        _;\r\n        emit LogBalanceChanged(now, address(this).balance.sub(last10).sub(gasFee));\r\n    }\r\n\r\n    constructor(address _tokenAddress) public {\r\n        // ownerAddr = msg.sender;\r\n        ownerAddr = COMPANY_WALLET_ADDR;\r\n        e2d = E2D(_tokenAddress);\r\n        setup();\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool isWalletAddress){\r\n        uint32 size;\r\n        assembly{\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function setup() internal {\r\n        m_investors = new InvestorsStorage();\r\n        totalInvestments = 0;\r\n        totalInvested = 0;\r\n        gasFee = 0;\r\n        last10 = 0;\r\n        for (uint i = 0; i < m_last10InvestorAddr.length; i++) {\r\n            delete m_last10Investor[m_last10InvestorAddr[i]];\r\n        }\r\n        m_last10InvestorAddr.length = 1;\r\n    }\r\n\r\n    // TODO: Need to remove only for testing, to reset game and start as fresh round\r\n    function reset() public {\r\n        require(msg.sender == ownerAddr, \"Only Owner can call this function\");\r\n        setup();\r\n        m_nextWave = false;\r\n        \r\n    }\r\n\r\n    // start the next round of game only after previous is completed.\r\n    function startNewWave() public {\r\n        require(m_nextWave == true, \"Game is not stopped yet.\");\r\n        require(msg.sender == ownerAddr, \"Only Owner can call this function\");\r\n        m_nextWave = false;\r\n    }\r\n\r\n    function() public payable {\r\n        // investor get him dividends\r\n        if (msg.value == 0) {\r\n            getMyDividends();\r\n            return;\r\n        }\r\n        // sender do invest\r\n        address refAddr = msg.data.toAddr();\r\n        doInvest(refAddr);\r\n    }\r\n\r\n    function investorsNumber() public view returns(uint) {\r\n        return m_investors.size() - 1;\r\n        // -1 because see InvestorsStorage constructor where keys.length++ \r\n    }\r\n\r\n    function balanceETH() public view returns(uint) {\r\n        return address(this).balance.sub(last10).sub(gasFee);\r\n    }\r\n\r\n    function dividendsPercent() public view returns(uint numerator, uint denominator) {\r\n        (uint num, uint den) = m_investors.getDividendsPercent(msg.sender,0);\r\n        (numerator, denominator) = (num,den);\r\n    }\r\n\r\n    function companyPercent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_companyPercent.num, m_companyPercent.den);\r\n    }\r\n    \r\n    \r\n     function miscPercent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_miscPercent.num, m_miscPercent.den);\r\n    }\r\n\r\n    function coinHolderPercent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_coinHolders.num, m_coinHolders.den);\r\n    }\r\n\r\n    function last10Percent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_last10.num, m_last10.den);\r\n    }\r\n\r\n    function feePercent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_fee.num, m_fee.den);\r\n    }\r\n\r\n    function referrer1Percent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_refPercent1.num, m_refPercent1.den);\r\n    }\r\n\r\n    function referrer2Percent() public view returns(uint numerator, uint denominator) {\r\n        (numerator, denominator) = (m_refPercent2.num, m_refPercent2.den);\r\n    }\r\n\r\n    function stats(uint date) public view returns(uint invested, uint investors) {\r\n        (invested, investors) = m_investors.stats(date);\r\n    }\r\n\r\n    function last10Addr() public view returns(address[]) {\r\n        return m_last10InvestorAddr;\r\n    }\r\n\r\n    function last10Info(address addr) public view returns(uint value, uint index) {\r\n        return (\r\n            m_last10Investor[addr].value,\r\n            m_last10Investor[addr].index\r\n        );\r\n    }\r\n\r\n    function investorInfo(address addr) public view returns(uint value, uint paymentTime, uint refsCount, uint refBonus,\r\n    bool isReferral, uint dividends) {\r\n        (value, paymentTime, refsCount, refBonus) = m_investors.investorBaseInfo(addr);\r\n        isReferral = m_referrals[addr].notZero();\r\n        dividends = checkDividends(addr);\r\n    }\r\n\r\n    function checkDividends(address addr) internal view returns (uint) {\r\n        InvestorsStorage.investor memory investor = getMemInvestor(addr);\r\n        if(investor.keyIndex <= 0){\r\n            return 0;\r\n        }\r\n        uint256 time;\r\n        uint256 value = 0;\r\n\r\n        time = investor.paymentTime;\r\n        // calculate days after payout time\r\n        uint256 daysAfter = now.sub(time).div(dividendsPeriod);\r\n        if(daysAfter > 0){\r\n            uint256 totalAmount = investor.value.add(investor.refBonus);\r\n            (uint num, uint den) = m_investors.getDividendsPercent(addr,0);\r\n            value = value.add((totalAmount*num/den) * daysAfter);\r\n            value = value.sub(investor.amountToDeduct);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function _getMyDividents(bool withoutThrow) private {\r\n        address addr = msg.sender;\r\n        require(!isContract(addr),\"msg.sender must wallet\");\r\n        // check investor info\r\n        InvestorsStorage.investor memory investor = getMemInvestor(addr);\r\n        if(investor.keyIndex <= 0){\r\n            if(withoutThrow){\r\n                return;\r\n            }\r\n            revert(\"sender is not investor\");\r\n        }\r\n        uint256 time;\r\n        uint256 value = 0;\r\n        //:SP\r\n        time = investor.paymentTime;\r\n        // calculate days after payout time\r\n        uint256 daysAfter = now.sub(time).div(dividendsPeriod);\r\n        if(daysAfter > 0){\r\n            uint256 totalAmount = investor.value.add(investor.refBonus);\r\n            (uint num, uint den) = m_investors.getDividendsPercent(addr,0);\r\n            value = value.add((totalAmount*num/den) * daysAfter);\r\n            value = value.sub(investor.amountToDeduct);\r\n        }\r\n        if(value == 0) {\r\n            if(withoutThrow){\r\n                return;\r\n            }\r\n            revert(\"the latest payment was earlier than dividents period\");\r\n        } else {\r\n            if (checkBalanceState(addr, value)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        assert(m_investors.setPaymentTime(msg.sender, now));\r\n        investor.amountToDeduct = 0;\r\n        sendDividends(msg.sender, value);\r\n    }\r\n\r\n    function checkBalanceState(address addr, uint value) private returns(bool) {\r\n        uint checkBal = address(this).balance.sub(last10).sub(gasFee);\r\n        if(checkBal < value) {\r\n            sendDividends(addr, checkBal);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getMyDividends() public balanceChanged {\r\n        _getMyDividents(false);\r\n    }\r\n\r\n    function doInvest(address _ref) public payable balanceChanged {\r\n        require(!isContract(msg.sender),\"msg.sender must wallet address\");\r\n        require(msg.value >= minInvesment, \"msg.value must be >= minInvesment\");\r\n        require(!m_nextWave, \"no further investment in this pool\");\r\n        uint value = msg.value;\r\n        //ref system works only once for sender-referral\r\n        if ((!m_isInvestor[msg.sender] && !m_referrals[msg.sender].notZero()) || \r\n        (m_isInvestor[msg.sender] && m_referrals[msg.sender].notZero())) {\r\n            address ref = m_referrals[msg.sender].notZero() ? m_referrals[msg.sender] : _ref;\r\n            // level 1\r\n            if(notZeroNotSender(ref) && m_isInvestor[ref]) {\r\n                // referrer 1 bonus\r\n                uint reward = m_refPercent1.mul(value);\r\n                if(m_referrals[msg.sender].notZero()) {\r\n                    assert(m_investors.addRefBonus(ref, reward, dividendsPeriod));\r\n                } else {\r\n                    assert(m_investors.addRefBonusWithRefs(ref, reward, dividendsPeriod));\r\n                    m_referrals[msg.sender] = ref;\r\n                }\r\n                emit LogNewReferral(msg.sender, now, value); \r\n                // level 2\r\n                if (notZeroNotSender(m_referrals[ref]) && m_isInvestor[m_referrals[ref]] && ref != m_referrals[ref]) { \r\n                    reward = m_refPercent2.mul(value);\r\n                    assert(m_investors.addRefBonus(m_referrals[ref], reward, dividendsPeriod)); // referrer 2 bonus\r\n                }\r\n            }\r\n        }\r\n\r\n         checkLast10(value);\r\n\r\n        // company commission\r\n        COMPANY_WALLET_ADDR.transfer(m_companyPercent.mul(value));\r\n        // misc depositin m_miscPercent\r\n        MISC_WALLET_ADDR.transfer(m_miscPercent.mul(value));\r\n         // coin holder commission\r\n        e2d.payDividends.value(m_coinHolders.mul(value))();\r\n         // reserved for last 10 distribution\r\n        last10 = last10.add(m_last10.mul(value));\r\n        //reserved for gas fee\r\n        gasFee = gasFee.add(m_fee.mul(value));\r\n\r\n        _getMyDividents(true);\r\n\r\n        DT.DateTime memory dt = parseTimestamp(now);\r\n        uint today = dt.year.uintToString().strConcat((dt.month<10 ? \"0\":\"\"), dt.month.uintToString(), (dt.day<10 ? \"0\":\"\"), dt.day.uintToString()).stringToUint();\r\n\r\n        //write to investors storage\r\n        if (m_investors.contains(msg.sender)) { //will be executed if the the investor is depositing second time\r\n            assert(m_investors.addValue(msg.sender, value));\r\n            m_investors.updateStats(today, value, 0);\r\n        } else {   //first time investor , insert the record\r\n            assert(m_investors.insert(msg.sender, value));\r\n            m_isInvestor[msg.sender] = true;\r\n            m_investors.updateStats(today, value, 1);\r\n            emit LogNewInvestor(msg.sender, now, value); \r\n        }\r\n\r\n        assert(m_investors.setPaymentTime(msg.sender, now));\r\n\r\n        emit LogNewInvesment(msg.sender, now, value);   \r\n        totalInvestments++;\r\n        totalInvested += msg.value;\r\n    }\r\n\r\n    function checkLast10(uint value) internal {\r\n        //check if value is >= 2 then add to last 10 \r\n        if(value >= LAST_10_MIN_INVESTMENT) {\r\n            if(m_last10Investor[msg.sender].index != 0) {\r\n                uint index = m_last10Investor[msg.sender].index;\r\n                removeFromLast10AtIndex(index);\r\n            } else if(m_last10InvestorAddr.length == 11) {\r\n                delete m_last10Investor[m_last10InvestorAddr[1]];\r\n                removeFromLast10AtIndex(1);\r\n            }\r\n            m_last10InvestorAddr.push(msg.sender);\r\n            m_last10Investor[msg.sender].index = m_last10InvestorAddr.length - 1;\r\n            m_last10Investor[msg.sender].value = value;\r\n        }\r\n    }\r\n\r\n    function removeFromLast10AtIndex(uint index) internal {\r\n        for (uint i = index; i < m_last10InvestorAddr.length-1; i++){\r\n            m_last10InvestorAddr[i] = m_last10InvestorAddr[i+1];\r\n            m_last10Investor[m_last10InvestorAddr[i]].index = i;\r\n        }\r\n        delete m_last10InvestorAddr[m_last10InvestorAddr.length-1];\r\n        m_last10InvestorAddr.length--;\r\n    }\r\n\r\n    function getMemInvestor(address addr) internal view returns(InvestorsStorage.investor) {\r\n        (uint a, uint b, uint c, uint d, uint e, uint f) = m_investors.investorFullInfo(addr);\r\n        return InvestorsStorage.investor(a, b, c, d, e, f);\r\n    }\r\n\r\n    function notZeroNotSender(address addr) internal view returns(bool) {\r\n        return addr.notZero() && addr != msg.sender;\r\n    }\r\n\r\n    function sendDividends(address addr, uint value) private {\r\n        if (addr.send(value)) {\r\n            emit LogPayDividends(addr, now, value);\r\n            if(address(this).balance.sub(gasFee).sub(last10) <= 0.005 ether) {\r\n                nextWave();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendToLast10() private {\r\n        uint lastPos = m_last10InvestorAddr.length - 1;\r\n        uint index = 0;\r\n        uint distributed = 0;\r\n        for (uint pos = lastPos; pos > 0 ; pos--) {\r\n            _percent = getPercentByPosition(index);\r\n            uint amount = _percent.mul(last10);\r\n            if( (!isContract(m_last10InvestorAddr[pos]))){\r\n                m_last10InvestorAddr[pos].transfer(amount);\r\n                emit LogPayLast10(m_last10InvestorAddr[pos], _percent.num, amount);\r\n                distributed = distributed.add(amount);\r\n            }\r\n            index++;\r\n        }\r\n\r\n        last10 = last10.sub(distributed);\r\n        //check if amount is left in last10 and transfer \r\n        if(last10 > 0) {\r\n            LAST10_WALLET_ADDR.transfer(last10);\r\n            last10 = 0;\r\n        }\r\n    }\r\n\r\n    function getPercentByPosition(uint position) internal pure returns(Percent.percent) {\r\n        if(position == 0) {\r\n            return Percent.percent(40, 100); // 40%\r\n        } else if(position == 1) {\r\n            return Percent.percent(25, 100); // 25%\r\n        } else if(position == 2) {\r\n            return Percent.percent(15, 100); // 15%\r\n        } else if(position == 3) {\r\n            return Percent.percent(8, 100); // 8%\r\n        } else if(position == 4) {\r\n            return Percent.percent(5, 100); // 5%\r\n        } else if(position == 5) {\r\n            return Percent.percent(2, 100); // 2%\r\n        } else if(position == 6) {\r\n            return Percent.percent(2, 100); // 2%\r\n        } else if(position == 7) {\r\n            return Percent.percent(15, 1000); // 1.5%\r\n        } else if(position == 8) {\r\n            return Percent.percent(1, 100); // 1%\r\n        } else if(position == 9) {\r\n            return Percent.percent(5, 1000); // 0.5%\r\n        }\r\n    }\r\n\r\n    function nextWave() private {\r\n        if(m_nextWave) {\r\n            return; \r\n        }\r\n        m_nextWave = true;\r\n        sendToLast10();\r\n        //send gas fee to wallet\r\n        FEE_WALLET_ADDR.transfer(gasFee);\r\n        //send remaining contract balance to company wallet\r\n        COMPANY_WALLET_ADDR.transfer(address(this).balance);\r\n        setup();\r\n        emit LogNextWave(now);\r\n    }\r\n}\r\n\r\nlibrary Percent {\r\n  // Solidity automatically throws when dividing by 0\r\n    struct percent {\r\n        uint num;\r\n        uint den;\r\n    }\r\n    function mul(percent storage p, uint a) internal view returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        return a*p.num/p.den;\r\n    }\r\n    \r\n    function div(percent storage p, uint a) internal view returns (uint) {\r\n        return a/p.num*p.den;\r\n    }\r\n\r\n    function sub(percent storage p, uint a) internal view returns (uint) {\r\n        uint b = mul(p, a);\r\n        if (b >= a) return 0;\r\n        return a - b;\r\n    }\r\n\r\n    function add(percent storage p, uint a) internal view returns (uint) {\r\n        return a + mul(p, a);\r\n    }\r\n}\r\n\r\nlibrary Zero {\r\n    function requireNotZero(uint a) internal pure {\r\n        require(a != 0, \"require not zero\");\r\n    }\r\n\r\n    function requireNotZero(address addr) internal pure {\r\n        require(addr != address(0), \"require not zero address\");\r\n    }\r\n\r\n    function notZero(address addr) internal pure returns(bool) {\r\n        return !(addr == address(0));\r\n    }\r\n\r\n    function isZero(address addr) internal pure returns(bool) {\r\n        return addr == address(0);\r\n    }\r\n}\r\n\r\nlibrary ToAddress {\r\n    function toAddr(uint source) internal pure returns(address) {\r\n        return address(source);\r\n    }\r\n\r\n    function toAddr(bytes source) internal pure returns(address addr) {\r\n        assembly { addr := mload(add(source,0x14)) }\r\n        return addr;\r\n    }\r\n}\r\n\r\nlibrary Convert {\r\n    function stringToUint(string s) internal pure returns (uint) {\r\n        bytes memory b = bytes(s);\r\n        uint result = 0;\r\n        for (uint i = 0; i < b.length; i++) { // c = b[i] was not needed\r\n            if (b[i] >= 48 && b[i] <= 57) {\r\n                result = result * 10 + (uint(b[i]) - 48); // bytes and int are not compatible with the operator -.\r\n            }\r\n        }\r\n        return result; // this was missing\r\n    }\r\n\r\n    function uintToString(uint v) internal pure returns (string) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i); // i + 1 is inefficient\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - j - 1]; // to avoid the off-by-one error\r\n        }\r\n        string memory str = string(s);  // memory isn't implicitly convertible to storage\r\n        return str; // this was missing\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"e2d\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"m_isInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miscPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvesment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_nextWave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"last10Info\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrer1Percent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrer2Percent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinHolderPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNewWave\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last10Addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"stats\",\"outputs\":[{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"investors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last10Percent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"doInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"investorInfo\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"refsCount\",\"type\":\"uint256\"},{\"name\":\"refBonus\",\"type\":\"uint256\"},{\"name\":\"isReferral\",\"type\":\"bool\"},{\"name\":\"dividends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"m_referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewInvesment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogPayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNextWave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayLast10\",\"type\":\"event\"}]","ContractName":"_200eth","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005666c4d481ccc798d4d7cafe8a53820f71089e8b","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7246f2367998a4883df3cf26217b3c465a033ab1032201c0be746fe85d53feb7"}]}