{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/adapters/mainnet/mainnetASusdAdapter.sol\npragma solidity >0.4.13 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.6 <0.6.0 >=0.5.12 <0.6.0 >=0.5.15 <0.6.0;\n\n////// lib/openzeppelin-contracts/src/contracts/token/ERC20/IERC20.sol\n/* pragma solidity ^0.5.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n////// src/adapters/aaveResources/ILendingPool.sol\n/* pragma solidity ^0.5.0; */\n\ninterface ILendingPool {\n\n    event Deposit(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _amount,\n        uint16 indexed _referral,\n        uint256 _timestamp\n    );\n\n    event RedeemUnderlying(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _amount,\n        uint256 _timestamp\n    );\n\n    event Borrow(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _amount,\n        uint256 _borrowRateMode,\n        uint256 _borrowRate,\n        uint256 _originationFee,\n        uint256 _borrowBalanceIncrease,\n        uint16 indexed _referral,\n        uint256 _timestamp\n    );\n\n    event Repay(\n        address indexed _reserve,\n        address indexed _user,\n        address indexed _repayer,\n        uint256 _amountMinusFees,\n        uint256 _fees,\n        uint256 _borrowBalanceIncrease,\n        uint256 _timestamp\n    );\n\n    event Swap(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _newRateMode,\n        uint256 _newRate,\n        uint256 _borrowBalanceIncrease,\n        uint256 _timestamp\n    );\n\n    event ReserveUsedAsCollateralEnabled(address indexed _reserve, address indexed _user);\n\n    event ReserveUsedAsCollateralDisabled(address indexed _reserve, address indexed _user);\n\n    event RebalanceStableBorrowRate(\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _newStableRate,\n        uint256 _borrowBalanceIncrease,\n        uint256 _timestamp\n    );\n\n    event FlashLoan(\n        address indexed _target,\n        address indexed _reserve,\n        uint256 _amount,\n        uint256 _totalFee,\n        uint256 _protocolFee,\n        uint256 _timestamp\n    );\n\n    event OriginationFeeLiquidated(\n        address indexed _collateral,\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _feeLiquidated,\n        uint256 _liquidatedCollateralForFee,\n        uint256 _timestamp\n    );\n\n    event LiquidationCall(\n        address indexed _collateral,\n        address indexed _reserve,\n        address indexed _user,\n        uint256 _purchaseAmount,\n        uint256 _liquidatedCollateralAmount,\n        uint256 _accruedBorrowInterest,\n        address _liquidator,\n        bool _receiveAToken,\n        uint256 _timestamp\n    );\n\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\n\n    function redeemUnderlying(address _reserve, address payable _user, uint256 _amount, uint256 _aTokenBalanceAfterRedeem) external;\n\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\n\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\n\n    function swapBorrowRateMode(address _reserve) external;\n\n    function rebalanceStableBorrowRate(address _reserve, address _user) external;\n\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\n\n    function liquidationCall(\n        address _collateral,\n        address _reserve,\n        address _user,\n        uint256 _purchaseAmount,\n        bool _receiveAToken\n    ) external payable;\n\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\n\n    function getReserveConfigurationData(address _reserve)\n        external\n        view\n        returns (\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            address interestRateStrategyAddress,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive\n        );\n\n    function getReserveData(address _reserve)\n        external\n        view\n        returns (\n            uint256 totalLiquidity,\n            uint256 availableLiquidity,\n            uint256 totalBorrowsStable,\n            uint256 totalBorrowsVariable,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 utilizationRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            address aTokenAddress,\n            uint40 lastUpdateTimestamp\n        );\n\n    function getUserAccountData(address _user)\n        external\n        view\n        returns (\n            uint256 totalLiquidityETH,\n            uint256 totalCollateralETH,\n            uint256 totalBorrowsETH,\n            uint256 totalFeesETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function getUserReserveData(address _reserve, address _user)\n        external\n        view\n        returns (\n            uint256 currentATokenBalance,\n            uint256 currentBorrowBalance,\n            uint256 principalBorrowBalance,\n            uint256 borrowRateMode,\n            uint256 borrowRate,\n            uint256 liquidityRate,\n            uint256 originationFee,\n            uint256 variableBorrowIndex,\n            uint256 lastUpdateTimestamp,\n            bool usageAsCollateralEnabled\n        );\n\n    function getReserves() external view returns (address[] memory);\n\n}\n////// src/adapters/aaveResources/ILendingPoolAddressesProvider.sol\n/* pragma solidity ^0.5.0; */\n\n/**\n@title ILendingPoolAddressesProvider interface\n@notice provides the interface to fetch the LendingPoolCore address\n */\n\ninterface ILendingPoolAddressesProvider {\n\n    function getLendingPool() external view returns (address);\n    function setLendingPoolImpl(address _pool) external;\n\n    function getLendingPoolCore() external view returns (address payable);\n    function setLendingPoolCoreImpl(address _lendingPoolCore) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n    function setLendingPoolConfiguratorImpl(address _configurator) external;\n\n    function getLendingPoolDataProvider() external view returns (address);\n    function setLendingPoolDataProviderImpl(address _provider) external;\n\n    function getLendingPoolParametersProvider() external view returns (address);\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) external;\n\n    function getTokenDistributor() external view returns (address);\n    function setTokenDistributor(address _tokenDistributor) external;\n\n    function getFeeProvider() external view returns (address);\n    function setFeeProviderImpl(address _feeProvider) external;\n\n    function getLendingPoolLiquidationManager() external view returns (address);\n    function setLendingPoolLiquidationManager(address _manager) external;\n\n    function getLendingPoolManager() external view returns (address);\n    function setLendingPoolManager(address _lendingPoolManager) external;\n\n    function getPriceOracle() external view returns (address);\n    function setPriceOracle(address _priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n    function setLendingRateOracle(address _lendingRateOracle) external;\n\n}\n////// src/interfaces/IAToken.sol\n/* pragma solidity ^0.5.15; */\n\ninterface IAToken {\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    event Redeem(\n        address indexed _from,\n        uint256 _value,\n        uint256 _fromBalanceIncrease,\n        uint256 _fromIndex\n    );\n\n    event MintOnDeposit(\n        address indexed _from,\n        uint256 _value,\n        uint256 _fromBalanceIncrease,\n        uint256 _fromIndex\n    );\n\n    event BurnOnLiquidation(\n        address indexed _from,\n        uint256 _value,\n        uint256 _fromBalanceIncrease,\n        uint256 _fromIndex\n    );\n\n    event BalanceTransfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value,\n        uint256 _fromBalanceIncrease,\n        uint256 _toBalanceIncrease,\n        uint256 _fromIndex,\n        uint256 _toIndex\n    );\n\n    event InterestStreamRedirected(\n        address indexed _from,\n        address indexed _to,\n        uint256 _redirectedBalance,\n        uint256 _fromBalanceIncrease,\n        uint256 _fromIndex\n    );\n\n    event RedirectedBalanceUpdated(\n        address indexed _targetAddress,\n        uint256 _targetBalanceIncrease,\n        uint256 _targetIndex,\n        uint256 _redirectedBalanceAdded,\n        uint256 _redirectedBalanceRemoved\n    );\n\n    event InterestRedirectionAllowanceChanged(\n        address indexed _from,\n        address indexed _to\n    );\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function redirectInterestStream(address _to) external;\n    function redirectInterestStreamOf(address _from, address _to) external;\n    function allowInterestRedirectionTo(address _to) external;\n    function redeem(uint256 _amount) external;\n    function balanceOf(address _user) external view returns(uint256);\n    function principalBalanceOf(address _user) external view returns(uint256);\n    function totalSupply() external view returns(uint256);\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\n    function getUserIndex(address _user) external view returns(uint256);\n    function getInterestRedirectionAddress(address _user) external view returns(address);\n    function getRedirectedBalance(address _user) external view returns(uint256);\n    function decimals () external view returns (uint256);\n    function deposit(uint256 _amount) external;\n\n\n}\n////// src/adapters/mainnet/mainnetASusdAdapter.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.12; */\n\n/* import \"../../interfaces/IAToken.sol\"; */\n/* import \"../aaveResources/ILendingPoolAddressesProvider.sol\"; */\n/* import \"../aaveResources/ILendingPool.sol\"; */\n/* import \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n\ncontract MainnetASUsdAdapter {\n\n    address constant susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\n    ILendingPoolAddressesProvider constant lpProvider = ILendingPoolAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\n\n    constructor () public { }\n\n    function getASUsd () public view returns (IAToken) {\n\n        ILendingPool pool = ILendingPool(lpProvider.getLendingPool());\n        (,,,,,,,,,,,address aTokenAddress,) = pool.getReserveData(susd);\n        return IAToken(aTokenAddress);\n\n    }\n\n    function intakeRaw (uint256 amount) public returns (uint256) {\n\n        getASUsd().transferFrom(msg.sender, address(this), amount);\n        return amount;\n\n    }\n\n    function intakeNumeraire (uint256 amount) public returns (uint256) {\n\n        getASUsd().transferFrom(msg.sender, address(this), amount);\n        return amount;\n\n    }\n\n    function outputRaw (address dst, uint256 amount) public returns (uint256) {\n\n        IAToken asusd = getASUsd();\n        asusd.transfer(dst, amount);\n        return amount;\n\n    }\n\n    // unwraps numeraire amount of dai from chai\n    // wraps it into cdai amount\n    // sends that to destination\n    function outputNumeraire (address dst, uint256 amount) public returns (uint256) {\n\n        getASUsd().transfer(dst, amount);\n        return amount;\n\n    }\n\n    function viewRawAmount (uint256 amount) public view returns (uint256) {\n\n        return amount;\n\n    }\n\n    function viewNumeraireAmount (uint256 amount) public view returns (uint256) {\n\n        return amount;\n\n    }\n\n    function viewNumeraireBalance (address addr) public view returns (uint256) {\n\n        return getASUsd().balanceOf(addr);\n\n    }\n\n    // takes raw amount and gives numeraire amount\n    function getRawAmount (uint256 amount) public returns (uint256) {\n\n        return amount;\n\n    }\n\n    // takes raw amount and gives numeraire amount\n    function getNumeraireAmount (uint256 amount) public returns (uint256) {\n\n        return amount;\n\n    }\n\n    function getNumeraireBalance () public returns (uint256) {\n\n        return getASUsd().balanceOf(address(this));\n\n    }\n\n    uint constant WAD = 10 ** 18;\n    \n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function wdivup(uint x, uint y) internal pure returns (uint z) {\n        // always rounds up\n        z = add(mul(x, WAD), sub(y, 1)) / y;\n    }\n\n\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"getASUsd\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getNumeraireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getNumeraireBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"intakeNumeraire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"intakeRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"outputNumeraire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"outputRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewNumeraireAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"viewNumeraireBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewRawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MainnetASUsdAdapter","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}