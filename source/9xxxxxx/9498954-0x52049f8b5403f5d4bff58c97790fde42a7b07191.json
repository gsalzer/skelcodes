{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _amount) external;\r\n}\r\n\r\n// Solidity Interface\r\n\r\ninterface ICurveFiv1 {\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256 deadline,\r\n    uint256[2] calldata min_amounts\r\n  ) external;\r\n}\r\n\r\ninterface ICurveFiv2 {\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[3] calldata min_amounts\r\n  ) external;\r\n}\r\n\r\ninterface Compound {\r\n    function mint ( uint256 mintAmount ) external returns ( uint256 );\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n    function exchangeRateStored() external view returns (uint);\r\n}\r\n\r\n\r\ninterface ICurveFiv3 {\r\n  function add_liquidity(\r\n    uint256[4] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n}\r\n\r\ncontract yCurveZapSwap is ReentrancyGuard, Ownable {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  address public DAI;\r\n  address public cDAI;\r\n  address public yDAI;\r\n  address public USDC;\r\n  address public cUSDC;\r\n  address public yUSDC;\r\n  address public USDT;\r\n  address public yUSDT;\r\n  address public SWAPv1;\r\n  address public CURVEv1;\r\n  address public SWAPv2;\r\n  address public CURVEv2;\r\n  address public SWAPv3;\r\n  address public CURVEv3;\r\n\r\n  constructor () public {\r\n    DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    yDAI = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n    cDAI = address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n\r\n    USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    yUSDC = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\r\n    cUSDC = address(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\r\n\r\n    USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    yUSDT = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\r\n\r\n    SWAPv1 = address(0x2e60CF74d81ac34eB21eEff58Db4D385920ef419);\r\n    CURVEv1 = address(0x3740fb63ab7a09891d7c0d4299442A551D06F5fD);\r\n\r\n    SWAPv2 = address(0x9fC689CCaDa600B6DF723D9E47D84d76664a1F23);\r\n    CURVEv2 = address(0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C);\r\n\r\n    SWAPv3 = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    CURVEv3 = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n\r\n    approveToken();\r\n  }\r\n\r\n  function() external payable {\r\n\r\n  }\r\n\r\n  function withdrawCompound(address token, uint amount) internal {\r\n      require(Compound(token).redeem(amount) == 0, \"COMPOUND: withdraw failed\");\r\n  }\r\n\r\n  function approveToken() public {\r\n      IERC20(DAI).safeApprove(yDAI, uint(-1));\r\n      IERC20(yDAI).safeApprove(SWAPv3, uint(-1));\r\n\r\n      IERC20(USDC).safeApprove(yUSDC, uint(-1));\r\n      IERC20(yUSDC).safeApprove(SWAPv3, uint(-1));\r\n\r\n      IERC20(USDT).safeApprove(yUSDT, uint(-1));\r\n      IERC20(yUSDT).safeApprove(SWAPv3, uint(-1));\r\n\r\n  }\r\n\r\n  function swapv1tov3(uint256 _amount)\r\n      external\r\n      nonReentrant\r\n  {\r\n      require(_amount > 0, \"curvev1 must be greater than 0\");\r\n      IERC20(CURVEv1).safeTransferFrom(msg.sender, address(this), _amount);\r\n      ICurveFiv1(SWAPv1).remove_liquidity(_amount, now.add(1800), [uint256(0),0]);\r\n      require(IERC20(CURVEv1).balanceOf(address(this)) == 0, \"CURVE remainder\");\r\n\r\n      if (IERC20(cDAI).balanceOf(address(this)) > 0) {\r\n        withdrawCompound(cDAI, IERC20(cDAI).balanceOf(address(this)));\r\n      }\r\n      if (IERC20(cUSDC).balanceOf(address(this)) > 0) {\r\n        withdrawCompound(cUSDC, IERC20(cUSDC).balanceOf(address(this)));\r\n      }\r\n\r\n      uint256 _dai = IERC20(DAI).balanceOf(address(this));\r\n      uint256 _usdc = IERC20(USDC).balanceOf(address(this));\r\n\r\n      require(_dai > 0 || _usdc > 0, \"no underlying found\");\r\n\r\n      if (_dai > 0) {\r\n        yERC20(yDAI).deposit(_dai);\r\n        require(IERC20(DAI).balanceOf(address(this)) == 0, \"dai remainder\");\r\n      }\r\n\r\n      if (_usdc > 0) {\r\n        yERC20(yUSDC).deposit(_usdc);\r\n        require(IERC20(USDC).balanceOf(address(this)) == 0, \"usdc remainder\");\r\n      }\r\n\r\n      ICurveFiv3(SWAPv3).add_liquidity([\r\n        IERC20(yDAI).balanceOf(address(this)),\r\n        IERC20(yUSDC).balanceOf(address(this)),0,0],0);\r\n\r\n      require(IERC20(yDAI).balanceOf(address(this)) == 0, \"yDAI remainder\");\r\n      require(IERC20(yUSDC).balanceOf(address(this)) == 0, \"yUSDC remainder\");\r\n\r\n      IERC20(CURVEv3).safeTransfer(msg.sender, IERC20(CURVEv3).balanceOf(address(this)));\r\n      require(IERC20(CURVEv3).balanceOf(address(this)) == 0, \"CURVEv3 remainder\");\r\n  }\r\n\r\n  function swapv2tov3(uint256 _amount)\r\n      external\r\n      nonReentrant\r\n  {\r\n      require(_amount > 0, \"curvev1 must be greater than 0\");\r\n      IERC20(CURVEv2).safeTransferFrom(msg.sender, address(this), _amount);\r\n      ICurveFiv2(SWAPv2).remove_liquidity(_amount, [uint256(0),0,0]);\r\n      require(IERC20(CURVEv2).balanceOf(address(this)) == 0, \"CURVE remainder\");\r\n\r\n      if (IERC20(cDAI).balanceOf(address(this)) > 0) {\r\n        withdrawCompound(cDAI, IERC20(cDAI).balanceOf(address(this)));\r\n      }\r\n      if (IERC20(cUSDC).balanceOf(address(this)) > 0) {\r\n        withdrawCompound(cUSDC, IERC20(cUSDC).balanceOf(address(this)));\r\n      }\r\n\r\n      uint256 _dai = IERC20(DAI).balanceOf(address(this));\r\n      uint256 _usdc = IERC20(USDC).balanceOf(address(this));\r\n      uint256 _usdt = IERC20(USDT).balanceOf(address(this));\r\n\r\n      require(_dai > 0 || _usdc > 0 || _usdt > 0, \"no underlying found\");\r\n\r\n      if (_dai > 0) {\r\n        yERC20(yDAI).deposit(_dai);\r\n        require(IERC20(DAI).balanceOf(address(this)) == 0, \"dai remainder\");\r\n      }\r\n\r\n      if (_usdc > 0) {\r\n        yERC20(yUSDC).deposit(_usdc);\r\n        require(IERC20(USDC).balanceOf(address(this)) == 0, \"usdc remainder\");\r\n      }\r\n\r\n      if (_usdt > 0) {\r\n        yERC20(yUSDT).deposit(_usdt);\r\n        require(IERC20(USDT).balanceOf(address(this)) == 0, \"usdc remainder\");\r\n      }\r\n\r\n      ICurveFiv3(SWAPv3).add_liquidity([\r\n        IERC20(yDAI).balanceOf(address(this)),\r\n        IERC20(yUSDC).balanceOf(address(this)),\r\n        IERC20(yUSDT).balanceOf(address(this)),0],0);\r\n\r\n      require(IERC20(yDAI).balanceOf(address(this)) == 0, \"yDAI remainder\");\r\n      require(IERC20(yUSDC).balanceOf(address(this)) == 0, \"yUSDC remainder\");\r\n      require(IERC20(yUSDT).balanceOf(address(this)) == 0, \"yUSDT remainder\");\r\n\r\n      IERC20(CURVEv3).safeTransfer(msg.sender, IERC20(CURVEv3).balanceOf(address(this)));\r\n      require(IERC20(CURVEv3).balanceOf(address(this)) == 0, \"CURVEv3 remainder\");\r\n  }\r\n\r\n  // incase of half-way error\r\n  function inCaseTokenGetsStuck(IERC20 _TokenAddress) onlyOwner public {\r\n      uint qty = _TokenAddress.balanceOf(address(this));\r\n      _TokenAddress.safeTransfer(msg.sender, qty);\r\n  }\r\n\r\n  // incase of half-way error\r\n  function inCaseETHGetsStuck() onlyOwner public{\r\n      (bool result, ) = msg.sender.call.value(address(this).balance)(\"\");\r\n      require(result, \"transfer of ETH failed\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CURVEv1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CURVEv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CURVEv3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SWAPv1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SWAPv2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SWAPv3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inCaseETHGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokenGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapv1tov3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapv2tov3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"yCurveZapSwap","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://48d88e7d8ba01a6d28faea93339c130966af134201254572bfe3f508308bd5e5"}]}