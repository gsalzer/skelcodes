{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\r\nlibrary SafeMath {\r\n    function add(uint256 a,uint256 b)internal pure returns(uint256){uint256 c=a+b; require(c>=a); return c;}\r\n\tfunction sub(uint256 a,uint256 b)internal pure returns(uint256){require(b<=a);uint256 c=a-b;return c;}\r\n\tfunction mul(uint256 a,uint256 b)internal pure returns(uint256){if(a==0){return 0;}uint256 c=a*b;require(c/a==b);return c;}\r\n\tfunction div(uint256 a,uint256 b)internal pure returns(uint256){require(b>0);uint256 c=a/b;return c;}}\r\ninterface Out{\r\n\tfunction mint(address w,uint256 a)external returns(bool);\r\n    function burn(address w,uint256 a)external returns(bool);\r\n   \tfunction balanceOf(address account)external view returns(uint256);}\t\r\ncontract ESCROW{    \r\n\tusing SafeMath for uint256;\r\n\taddress private rot=0x45F2aB0ca2116b2e1a70BF5e13293947b25d0272;\r\n\tmapping(address => uint256) private price;\r\n\tmapping(address => uint256) private amount;\r\n\tfunction setEscrow(uint256 p,uint256 a)external returns(bool){\r\n\t    require(Out(rot).balanceOf(msg.sender) >= a);\r\n\t    require(p>10**14);price[msg.sender]=p;amount[msg.sender]=a;return true;}\r\n\tfunction payEscrow(address payable w)external payable returns(bool){\r\n\t    require(msg.value>10**14); uint256 gam=(msg.value.mul(10**18)).div(price[w]);\r\n\t\trequire(Out(rot).balanceOf(w) >= amount[w]);require(amount[w] >= gam);\r\n\t\trequire(Out(rot).mint(msg.sender,gam));\r\n\t\trequire(Out(rot).burn(w,gam));\r\n\t    amount[w]=amount[w].sub(gam);\r\n\t    w.transfer(msg.value);\r\n\t    return true;}\r\n\tfunction geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}\r\n   \tfunction()external{revert();}}","ABI":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"n\",\"type\":\"address\"}],\"name\":\"geInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"w\",\"type\":\"address\"}],\"name\":\"payEscrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setEscrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ESCROW","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://39ae63af93ad0387c2bb9e5e2eac2072da380f874d76ef9d890fb1e88346dd00"}]}