{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-03-17\r\n*/\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interfaces/IBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) external view returns (bool);\r\n    function requiredSignatures() external view returns (uint256);\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ValidatorStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ValidatorStorage {\r\n    bytes32 internal constant VALIDATOR_CONTRACT = 0x5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe; // keccak256(abi.encodePacked(\"validatorContract\"))\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Validatable is EternalStorage, ValidatorStorage {\r\n    function validatorContract() public view returns (IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[VALIDATOR_CONTRACT]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function requiredSignatures() public view returns (uint256) {\r\n        return validatorContract().requiredSignatures();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\nlibrary Message {\r\n    // function uintToString(uint256 inputValue) internal pure returns (string) {\r\n    //     // figure out the length of the resulting string\r\n    //     uint256 length = 0;\r\n    //     uint256 currentValue = inputValue;\r\n    //     do {\r\n    //         length++;\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     // allocate enough memory\r\n    //     bytes memory result = new bytes(length);\r\n    //     // construct the string backwards\r\n    //     uint256 i = length - 1;\r\n    //     currentValue = inputValue;\r\n    //     do {\r\n    //         result[i--] = byte(48 + currentValue % 10);\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     return string(result);\r\n    // }\r\n\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 104: 20 bytes :: address - contract address to prevent double spending\r\n\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 bytes (most of them zeros) followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns (address recipient, uint256 amount, bytes32 txHash, address contractAddress)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := mload(add(message, 20))\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n            contractAddress := mload(add(message, 104))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns (bool) {\r\n        return _msg.length == requiredMessageLength();\r\n    }\r\n\r\n    function requiredMessageLength() internal pure returns (uint256) {\r\n        return 104;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message, bool isAMBMessage)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        return ecrecover(hashMessage(message, isAMBMessage), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message, bool isAMBMessage) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        if (isAMBMessage) {\r\n            return keccak256(abi.encodePacked(prefix, uintToString(message.length), message));\r\n        } else {\r\n            string memory msgLength = \"104\";\r\n            return keccak256(abi.encodePacked(prefix, msgLength, message));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Validates provided signatures, only first requiredSignatures() number\r\n    * of signatures are going to be validated, these signatures should be from different validators.\r\n    * @param _message bytes message used to generate signatures\r\n    * @param _signatures bytes blob with signatures to be validated.\r\n    * First byte X is a number of signatures in a blob,\r\n    * next X bytes are v components of signatures,\r\n    * next 32 * X bytes are r components of signatures,\r\n    * next 32 * X bytes are s components of signatures.\r\n    * @param _validatorContract contract, which conforms to the IBridgeValidators interface,\r\n    * where info about current validators and required signatures is stored.\r\n    * @param isAMBMessage true if _message is an AMB message with arbitrary length.\r\n    */\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        bytes _signatures,\r\n        IBridgeValidators _validatorContract,\r\n        bool isAMBMessage\r\n    ) internal view {\r\n        require(isAMBMessage || isMessageValid(_message));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        uint256 amount;\r\n        assembly {\r\n            amount := and(mload(add(_signatures, 1)), 0xff)\r\n        }\r\n        require(amount >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message, isAMBMessage);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            uint8 v;\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint256 posr = 33 + amount + 32 * i;\r\n            uint256 poss = posr + 32 * amount;\r\n            assembly {\r\n                v := mload(add(_signatures, add(2, i)))\r\n                r := mload(add(_signatures, posr))\r\n                s := mload(add(_signatures, poss))\r\n            }\r\n\r\n            address recoveredAddress = ecrecover(hash, v, r, s);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            require(!addressArrayContains(encounteredAddresses, recoveredAddress));\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n\r\n    function uintToString(uint256 i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint256 j = i;\r\n        uint256 length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint256 k = length - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = bytes1(48 + (i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IUpgradeabilityOwnerStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IUpgradeabilityOwnerStorage {\r\n    function upgradeabilityOwner() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    bytes4 internal constant UPGRADEABILITY_OWNER = 0x6fde8202; // upgradeabilityOwner()\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than contract itself or owner.\r\n    */\r\n    modifier onlyRelevantSender() {\r\n        // proxy owner if used through proxy, address(0) otherwise\r\n        require(\r\n            !address(this).call(abi.encodeWithSelector(UPGRADEABILITY_OWNER)) || // covers usage without calling through storage proxy\r\n                msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() || // covers usage through regular proxy calls\r\n                msg.sender == address(this) // covers calls through upgradeAndCall proxy method\r\n        );\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    bytes32 internal constant OWNER = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0; // keccak256(abi.encodePacked(\"owner\"))\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[OWNER];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[OWNER] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicTokenBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract BasicTokenBridge is EternalStorage, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event DailyLimitChanged(uint256 newLimit);\r\n    event ExecutionDailyLimitChanged(uint256 newLimit);\r\n\r\n    bytes32 internal constant MIN_PER_TX = 0xbbb088c505d18e049d114c7c91f11724e69c55ad6c5397e2b929e68b41fa05d1; // keccak256(abi.encodePacked(\"minPerTx\"))\r\n    bytes32 internal constant MAX_PER_TX = 0x0f8803acad17c63ee38bf2de71e1888bc7a079a6f73658e274b08018bea4e29c; // keccak256(abi.encodePacked(\"maxPerTx\"))\r\n    bytes32 internal constant DAILY_LIMIT = 0x4a6a899679f26b73530d8cf1001e83b6f7702e04b6fdb98f3c62dc7e47e041a5; // keccak256(abi.encodePacked(\"dailyLimit\"))\r\n    bytes32 internal constant EXECUTION_MAX_PER_TX = 0xc0ed44c192c86d1cc1ba51340b032c2766b4a2b0041031de13c46dd7104888d5; // keccak256(abi.encodePacked(\"executionMaxPerTx\"))\r\n    bytes32 internal constant EXECUTION_DAILY_LIMIT = 0x21dbcab260e413c20dc13c28b7db95e2b423d1135f42bb8b7d5214a92270d237; // keccak256(abi.encodePacked(\"executionDailyLimit\"))\r\n    bytes32 internal constant DECIMAL_SHIFT = 0x1e8ecaafaddea96ed9ac6d2642dcdfe1bebe58a930b1085842d8fc122b371ee5; // keccak256(abi.encodePacked(\"decimalShift\"))\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\r\n    }\r\n\r\n    function totalExecutedPerDay(uint256 _day) public view returns (uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))];\r\n    }\r\n\r\n    function dailyLimit() public view returns (uint256) {\r\n        return uintStorage[DAILY_LIMIT];\r\n    }\r\n\r\n    function executionDailyLimit() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_DAILY_LIMIT];\r\n    }\r\n\r\n    function maxPerTx() public view returns (uint256) {\r\n        return uintStorage[MAX_PER_TX];\r\n    }\r\n\r\n    function executionMaxPerTx() public view returns (uint256) {\r\n        return uintStorage[EXECUTION_MAX_PER_TX];\r\n    }\r\n\r\n    function minPerTx() public view returns (uint256) {\r\n        return uintStorage[MIN_PER_TX];\r\n    }\r\n\r\n    function decimalShift() public view returns (uint256) {\r\n        return uintStorage[DECIMAL_SHIFT];\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function withinExecutionLimit(uint256 _amount) public view returns (bool) {\r\n        uint256 nextLimit = totalExecutedPerDay(getCurrentDay()).add(_amount);\r\n        return executionDailyLimit() >= nextLimit && _amount <= executionMaxPerTx();\r\n    }\r\n\r\n    function getCurrentDay() public view returns (uint256) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        return now / 1 days;\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function setTotalExecutedPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalExecutedPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function setDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > maxPerTx() || _dailyLimit == 0);\r\n        uintStorage[DAILY_LIMIT] = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit > executionMaxPerTx() || _dailyLimit == 0);\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _dailyLimit;\r\n        emit ExecutionDailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function setExecutionMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < executionDailyLimit());\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx == 0 || (_maxPerTx > minPerTx() && _maxPerTx < dailyLimit()));\r\n        uintStorage[MAX_PER_TX] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx > 0 && _minPerTx < dailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[MIN_PER_TX] = _minPerTx;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/MessageRelay.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract MessageRelay is EternalStorage {\r\n    function relayedMessages(bytes32 _txHash) public view returns (bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))];\r\n    }\r\n\r\n    function setRelayedMessages(bytes32 _txHash, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))] = _status;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Upgradeable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Upgradeable {\r\n    // Avoid using onlyUpgradeabilityOwner name to prevent issues with implementation from proxy contract\r\n    modifier onlyIfUpgradeabilityOwner() {\r\n        require(msg.sender == IUpgradeabilityOwnerStorage(this).upgradeabilityOwner());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Initializable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract Initializable is EternalStorage {\r\n    bytes32 internal constant INITIALIZED = 0x0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba; // keccak256(abi.encodePacked(\"isInitialized\"))\r\n\r\n    function setInitialize() internal {\r\n        boolStorage[INITIALIZED] = true;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return boolStorage[INITIALIZED];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/InitializableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract InitializableBridge is Initializable {\r\n    bytes32 internal constant DEPLOYED_AT_BLOCK = 0xb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b0; // keccak256(abi.encodePacked(\"deployedAtBlock\"))\r\n\r\n    function deployedAtBlock() external view returns (uint256) {\r\n        return uintStorage[DEPLOYED_AT_BLOCK];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Sacrifice.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract Sacrifice {\r\n    constructor(address _recipient) public payable {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Claimable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract Claimable {\r\n    bytes4 internal constant TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n\r\n    modifier validAddress(address _to) {\r\n        require(_to != address(0));\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    function claimValues(address _token, address _to) internal {\r\n        if (_token == address(0)) {\r\n            claimNativeCoins(_to);\r\n        } else {\r\n            claimErc20Tokens(_token, _to);\r\n        }\r\n    }\r\n\r\n    function claimNativeCoins(address _to) internal {\r\n        uint256 value = address(this).balance;\r\n        if (!_to.send(value)) {\r\n            (new Sacrifice).value(value)(_to);\r\n        }\r\n    }\r\n\r\n    function claimErc20Tokens(address _token, address _to) internal {\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        safeTransfer(_token, _to, balance);\r\n    }\r\n\r\n    function safeTransfer(address _token, address _to, uint256 _value) internal {\r\n        bytes memory returnData;\r\n        bool returnDataResult;\r\n        bytes memory callData = abi.encodeWithSelector(TRANSFER, _to, _value);\r\n        assembly {\r\n            let result := call(gas, _token, 0x0, add(callData, 0x20), mload(callData), 0, 32)\r\n            returnData := mload(0)\r\n            returnDataResult := mload(0)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n\r\n        // Return data is optional\r\n        if (returnData.length > 0) {\r\n            require(returnDataResult);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/VersionableBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract VersionableBridge {\r\n    function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n        return (3, 0, 0);\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function getBridgeMode() external pure returns (bytes4);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicBridge is InitializableBridge, Validatable, Ownable, Upgradeable, Claimable, VersionableBridge {\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n\r\n    bytes32 internal constant GAS_PRICE = 0x55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b; // keccak256(abi.encodePacked(\"gasPrice\"))\r\n    bytes32 internal constant REQUIRED_BLOCK_CONFIRMATIONS = 0x916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071; // keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))\r\n\r\n    function setGasPrice(uint256 _gasPrice) external onlyOwner {\r\n        require(_gasPrice > 0);\r\n        uintStorage[GAS_PRICE] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() external view returns (uint256) {\r\n        return uintStorage[GAS_PRICE];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) external onlyOwner {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[REQUIRED_BLOCK_CONFIRMATIONS] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() external view returns (uint256) {\r\n        return uintStorage[REQUIRED_BLOCK_CONFIRMATIONS];\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyIfUpgradeabilityOwner validAddress(_to) {\r\n        claimValues(_token, _to);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicForeignBridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicForeignBridge is EternalStorage, Validatable, BasicBridge, BasicTokenBridge, MessageRelay {\r\n    /// triggered when relay of deposit from HomeBridge is complete\r\n    event RelayedMessage(address recipient, uint256 value, bytes32 transactionHash);\r\n    event UserRequestForAffirmation(address recipient, uint256 value);\r\n\r\n    /**\r\n    * @dev Validates provided signatures and relays a given message\r\n    * @param message bytes to be relayed\r\n    * @param signatures bytes blob with signatures to be validated\r\n    */\r\n    function executeSignatures(bytes message, bytes signatures) external {\r\n        Message.hasEnoughValidSignatures(message, signatures, validatorContract(), false);\r\n\r\n        address recipient;\r\n        uint256 amount;\r\n        bytes32 txHash;\r\n        address contractAddress;\r\n        (recipient, amount, txHash, contractAddress) = Message.parseMessage(message);\r\n        if (withinExecutionLimit(amount)) {\r\n            require(contractAddress == address(this));\r\n            require(!relayedMessages(txHash));\r\n            setRelayedMessages(txHash, true);\r\n            require(onExecuteMessage(recipient, amount, txHash));\r\n            emit RelayedMessage(recipient, amount, txHash);\r\n        } else {\r\n            onFailedMessage(recipient, amount, txHash);\r\n        }\r\n    }\r\n\r\n    /* solcov ignore next */\r\n    function onExecuteMessage(address, uint256, bytes32) internal returns (bool);\r\n\r\n    /* solcov ignore next */\r\n    function onFailedMessage(address, uint256, bytes32) internal;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ERC20Bridge.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ERC20Bridge is BasicForeignBridge {\r\n    bytes32 internal constant ERC20_TOKEN = 0x15d63b18dbc21bf4438b7972d80076747e1d93c4f87552fe498c90cbde51665e; // keccak256(abi.encodePacked(\"erc20token\"))\r\n\r\n    function erc20token() public view returns (ERC20) {\r\n        return ERC20(addressStorage[ERC20_TOKEN]);\r\n    }\r\n\r\n    function setErc20token(address _token) internal {\r\n        require(AddressUtils.isContract(_token));\r\n        addressStorage[ERC20_TOKEN] = _token;\r\n    }\r\n\r\n    function _relayTokens(address _sender, address _receiver, uint256 _amount) internal {\r\n        require(_receiver != address(0));\r\n        require(_receiver != address(this));\r\n        require(_amount > 0);\r\n        require(withinLimit(_amount));\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_amount));\r\n\r\n        erc20token().transferFrom(_sender, address(this), _amount);\r\n        emit UserRequestForAffirmation(_receiver, _amount);\r\n    }\r\n\r\n    function relayTokens(address _from, address _receiver, uint256 _amount) external {\r\n        require(_from == msg.sender || _from == _receiver);\r\n        _relayTokens(_from, _receiver, _amount);\r\n    }\r\n\r\n    function relayTokens(address _receiver, uint256 _amount) external {\r\n        _relayTokens(msg.sender, _receiver, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/OtherSideBridgeStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\ncontract OtherSideBridgeStorage is EternalStorage {\r\n    bytes32 internal constant BRIDGE_CONTRACT = 0x71483949fe7a14d16644d63320f24d10cf1d60abecc30cc677a340e82b699dd2; // keccak256(abi.encodePacked(\"bridgeOnOtherSide\"))\r\n\r\n    function _setBridgeContractOnOtherSide(address _bridgeContract) internal {\r\n        addressStorage[BRIDGE_CONTRACT] = _bridgeContract;\r\n    }\r\n\r\n    function bridgeContractOnOtherSide() internal view returns (address) {\r\n        return addressStorage[BRIDGE_CONTRACT];\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IScdMcdMigration.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IScdMcdMigration {\r\n    function swapSaiToDai(uint256 wad) external;\r\n    function daiJoin() external returns (address);\r\n}\r\n\r\ninterface IDaiAdapter {\r\n    function dai() public returns (address);\r\n}\r\n\r\ninterface ISaiTop {\r\n    function caged() public returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IPot.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IPot {\r\n    function chi() external view returns (uint256);\r\n    function rho() external view returns (uint256);\r\n    function drip() external returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IChai.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ninterface IChai {\r\n    function pot() external view returns (IPot);\r\n    function daiToken() external view returns (ERC20);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function join(address, uint256) external;\r\n    function draw(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n}\r\n\r\n// File: contracts/interfaces/ERC677Receiver.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract ERC677Receiver {\r\n    function onTokenTransfer(address _from, uint256 _value, bytes _data) external returns (bool);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/TokenSwapper.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract TokenSwapper {\r\n    // emitted when two tokens is swapped (e. g. Sai to Dai, Chai to Dai)\r\n    event TokensSwapped(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/ChaiConnector.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ChaiConnector\r\n* @dev This logic allows to use Chai token (https://github.com/dapphub/chai)\r\n*/\r\ncontract ChaiConnector is Ownable, ERC20Bridge, TokenSwapper {\r\n    using SafeMath for uint256;\r\n\r\n    // emitted when specified value of Chai tokens is transfered to interest receiver\r\n    event PaidInterest(address to, uint256 value);\r\n\r\n    bytes32 internal constant CHAI_TOKEN_ENABLED = 0x2ae87563606f93f71ad2adf4d62661ccdfb63f3f508f94700934d5877fb92278; // keccak256(abi.encodePacked(\"chaiTokenEnabled\"))\r\n    bytes32 internal constant INTEREST_RECEIVER = 0xd88509eb1a8da5d5a2fc7b9bad1c72874c9818c788e81d0bc46b29bfaa83adf6; // keccak256(abi.encodePacked(\"interestReceiver\"))\r\n    bytes32 internal constant INTEREST_COLLECTION_PERIOD = 0x68a6a652d193e5d6439c4309583048050a11a4cfb263a220f4cd798c61c3ad6e; // keccak256(abi.encodePacked(\"interestCollectionPeriod\"))\r\n    bytes32 internal constant LAST_TIME_INTEREST_PAID = 0xcabd46177a706f95f4bb3e2c2ba45ac4aa1eac9c545425a19c62ab6de4aeea26; // keccak256(abi.encodePacked(\"lastTimeInterestPaid\"))\r\n    bytes32 internal constant INVESTED_AMOUNT = 0xb6afb3323c9d7dc0e9dab5d34c3a1d1ae7739d2224c048d4ee7675d3c759dd1b; // keccak256(abi.encodePacked(\"investedAmount\"))\r\n    bytes32 internal constant MIN_DAI_TOKEN_BALANCE = 0xce70e1dac97909c26a87aa4ada3d490673a153b3a75b22ea3364c4c7df7c551f; // keccak256(abi.encodePacked(\"minDaiTokenBalance\"))\r\n    bytes4 internal constant ON_TOKEN_TRANSFER = 0xa4c0ed36; // onTokenTransfer(address,uint256,bytes)\r\n\r\n    uint256 internal constant ONE = 10**27;\r\n\r\n    /**\r\n    * @dev Throws if chai token is not enabled\r\n    */\r\n    modifier chaiTokenEnabled {\r\n        require(isChaiTokenEnabled());\r\n        /* solcov ignore next */\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Fixed point division\r\n    * @return Ceiled value of x / y\r\n    */\r\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x.mul(ONE).add(y.sub(1)) / y;\r\n    }\r\n\r\n    /**\r\n    * @return true, if chai token is enabled\r\n    */\r\n    function isChaiTokenEnabled() public view returns (bool) {\r\n        return boolStorage[CHAI_TOKEN_ENABLED];\r\n    }\r\n\r\n    /**\r\n    * @return Chai token contract address\r\n    */\r\n    function chaiToken() public view returns (IChai) {\r\n        return IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n    }\r\n\r\n    /**\r\n    * @dev Initializes chai token\r\n    */\r\n    function initializeChaiToken() public onlyOwner {\r\n        require(!isChaiTokenEnabled());\r\n        require(address(chaiToken().daiToken()) == address(erc20token()));\r\n        boolStorage[CHAI_TOKEN_ENABLED] = true;\r\n        uintStorage[MIN_DAI_TOKEN_BALANCE] = 100 ether;\r\n        uintStorage[INTEREST_COLLECTION_PERIOD] = 1 weeks;\r\n    }\r\n\r\n    /**\r\n    * @dev Initializes chai token, with interestReceiver\r\n    * @param _interestReceiver Receiver address\r\n    */\r\n    function initializeChaiToken(address _interestReceiver) external {\r\n        require(_interestReceiver != address(0));\r\n        // onlyOwner condition is checked inside this call, so it can be excluded from function definition\r\n        initializeChaiToken();\r\n        addressStorage[INTEREST_RECEIVER] = _interestReceiver;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets minimum DAI limit, needed for converting DAI into CHAI\r\n    */\r\n    function setMinDaiTokenBalance(uint256 _minBalance) external onlyOwner {\r\n        uintStorage[MIN_DAI_TOKEN_BALANCE] = _minBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluates edge DAI token balance, which has an impact on the invest amounts\r\n    * @return Value in DAI\r\n    */\r\n    function minDaiTokenBalance() public view returns (uint256) {\r\n        return uintStorage[MIN_DAI_TOKEN_BALANCE];\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraws all invested tokens, pays remaining interest, removes chai token from contract storage\r\n    */\r\n    function removeChaiToken() external onlyOwner chaiTokenEnabled {\r\n        _convertChaiToDai(investedAmountInDai());\r\n        _payInterest();\r\n        delete boolStorage[CHAI_TOKEN_ENABLED];\r\n    }\r\n\r\n    /**\r\n     * @return Configured address of a receiver\r\n     */\r\n    function interestReceiver() public view returns (ERC677Receiver) {\r\n        return ERC677Receiver(addressStorage[INTEREST_RECEIVER]);\r\n    }\r\n\r\n    /**\r\n     * Updates interest receiver address\r\n     * @param receiver New receiver address\r\n     */\r\n    function setInterestReceiver(address receiver) external onlyOwner {\r\n        // the bridge account is not allowed to receive an interest by the following reason:\r\n        // during the Chai to Dai convertion, the Dai is minted to the receiver account,\r\n        // the Transfer(address(0), bridgeAddress, value) is emitted during this process,\r\n        // something can go wrong in the oracle logic, so that it will process this event as a request to the bridge\r\n        // Instead, the interest can be transfered to any other account, and then converted to Dai,\r\n        // which won't be related to the oracle logic anymore\r\n        require(receiver != address(this));\r\n\r\n        addressStorage[INTEREST_RECEIVER] = receiver;\r\n    }\r\n\r\n    /**\r\n     * @return Timestamp of last interest payment\r\n     */\r\n    function lastInterestPayment() public view returns (uint256) {\r\n        return uintStorage[LAST_TIME_INTEREST_PAID];\r\n    }\r\n\r\n    /**\r\n     * @return Configured minimum interest collection period\r\n     */\r\n    function interestCollectionPeriod() public view returns (uint256) {\r\n        return uintStorage[INTEREST_COLLECTION_PERIOD];\r\n    }\r\n\r\n    /**\r\n     * @dev Configures minimum interest collection period\r\n     * @param period collection period\r\n     */\r\n    function setInterestCollectionPeriod(uint256 period) external onlyOwner {\r\n        uintStorage[INTEREST_COLLECTION_PERIOD] = period;\r\n    }\r\n\r\n    /**\r\n    * @dev Pays all available interest, in Dai tokens.\r\n    * Upgradeability owner can call this method without time restrictions,\r\n    * for others, the method can be called only once a specified period.\r\n    */\r\n    function payInterest() external chaiTokenEnabled {\r\n        if (\r\n            // solhint-disable-next-line not-rely-on-time\r\n            lastInterestPayment() + interestCollectionPeriod() < now ||\r\n            IUpgradeabilityOwnerStorage(this).upgradeabilityOwner() == msg.sender\r\n        ) {\r\n            _payInterest();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function for paying all available interest, in Dai tokens\r\n    */\r\n    function _payInterest() internal {\r\n        address receiver = address(interestReceiver());\r\n        require(receiver != address(0));\r\n\r\n        // since investedAmountInChai() returns a ceiled value,\r\n        // the value of chaiBalance() - investedAmountInChai() will be floored,\r\n        // leading to excess remaining chai balance\r\n\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uintStorage[LAST_TIME_INTEREST_PAID] = now;\r\n\r\n        uint256 interest = chaiBalance().sub(investedAmountInChai());\r\n        // interest is paid in Chai, paying interest directly in Dai can cause an unwanter Transfer event\r\n        // see a comment in setInterestReceiver describing why we cannot pay interest to the bridge directly\r\n        chaiToken().transfer(receiver, interest);\r\n\r\n        receiver.call(abi.encodeWithSelector(ON_TOKEN_TRANSFER, address(this), interest, \"\"));\r\n\r\n        require(dsrBalance() >= investedAmountInDai());\r\n\r\n        emit PaidInterest(receiver, interest);\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluates bridge balance for tokens, holded in DSR\r\n    * @return Balance in dai, truncated\r\n    */\r\n    function dsrBalance() public view returns (uint256) {\r\n        return chaiToken().dai(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluates bridge balance in Chai tokens\r\n    * @return Balance in chai, exact\r\n    */\r\n    function chaiBalance() public view returns (uint256) {\r\n        return chaiToken().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluates bridge balance in Dai tokens\r\n    * @return Balance in Dai\r\n    */\r\n    function daiBalance() internal view returns (uint256) {\r\n        return erc20token().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluates exact current invested amount, in DAI\r\n    * @return Value in DAI\r\n    */\r\n    function investedAmountInDai() public view returns (uint256) {\r\n        return uintStorage[INVESTED_AMOUNT];\r\n    }\r\n\r\n    /**\r\n    * @dev Updates current invested amount, in DAI\r\n    * @return Value in DAI\r\n    */\r\n    function setInvestedAmountInDai(uint256 amount) internal {\r\n        uintStorage[INVESTED_AMOUNT] = amount;\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluates amount of chai tokens that is sufficent to cover 100% of the invested DAI\r\n    * @return Amount in chai, ceiled\r\n    */\r\n    function investedAmountInChai() internal returns (uint256) {\r\n        IPot pot = chaiToken().pot();\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();\r\n        return rdivup(investedAmountInDai(), chi);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if DAI balance is high enough to be partially converted to Chai\r\n    * Twice limit is used in order to decrease frequency of convertDaiToChai calls,\r\n    * In case of high bridge utilization in DAI => xDAI direction,\r\n    * convertDaiToChai() will be called as soon as DAI balance reaches 2 * limit,\r\n    * limit DAI will be left as a buffer for future operations.\r\n    * @return true if convertDaiToChai() call is needed to be performed by the oracle\r\n    */\r\n    function isDaiNeedsToBeInvested() public view returns (bool) {\r\n        // chai token needs to be initialized, DAI balance should be at least twice greater than minDaiTokenBalance\r\n        return isChaiTokenEnabled() && daiBalance() > 2 * minDaiTokenBalance();\r\n    }\r\n\r\n    /**\r\n    * @dev Converts all DAI into Chai tokens, keeping minDaiTokenBalance() DAI as a buffer\r\n    */\r\n    function convertDaiToChai() public chaiTokenEnabled {\r\n        // there is not need to consider overflow when performing a + operation,\r\n        // since both values are controlled by the bridge and can't take extremely high values\r\n        uint256 amount = daiBalance().sub(minDaiTokenBalance());\r\n        uint256 newInvestedAmountInDai = investedAmountInDai() + amount;\r\n        setInvestedAmountInDai(newInvestedAmountInDai);\r\n        erc20token().approve(chaiToken(), amount);\r\n        chaiToken().join(address(this), amount);\r\n\r\n        // When evaluating the amount of DAI kept in Chai using dsrBalance(), there are some fixed point truncations.\r\n        // The dependency between invested amount of DAI - value and returned value of dsrBalance() - res is the following:\r\n        // res = floor(floor(value / K) * K)), where K is the fixed-point coefficient\r\n        // from MakerDAO Pot contract (K = pot.chi() / 10**27).\r\n        // This can lead up to losses of ceil(K) DAI in this balance evaluation.\r\n        // The constant is needed here for making sure that everything works fine, and this error is small enough\r\n        // The 10000 constant is considered to be small enough when decimals = 18, however,\r\n        // it is not recommended to use it for smaller values of decimals, since it won't be negligible anymore\r\n        require(dsrBalance() + 10000 >= newInvestedAmountInDai);\r\n\r\n        emit TokensSwapped(erc20token(), chaiToken(), amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Redeems DAI from Chai, the total redeemed amount will be at least equal to specified amount\r\n    * @param amount Amount of DAI to redeem\r\n    */\r\n    function _convertChaiToDai(uint256 amount) internal {\r\n        if (amount == 0) return;\r\n\r\n        uint256 invested = investedAmountInDai();\r\n        uint256 initialDaiBalance = daiBalance();\r\n\r\n        // onExecuteMessage can call a convert operation with argument greater than the current invested amount,\r\n        // in this case bridge should withdraw all invested funds\r\n        uint256 withdrawal = amount >= invested ? invested : amount;\r\n\r\n        chaiToken().draw(address(this), withdrawal);\r\n        uint256 redeemed = daiBalance() - initialDaiBalance;\r\n\r\n        // Make sure that at least withdrawal amount was withdrawn\r\n        require(redeemed >= withdrawal);\r\n\r\n        uint256 newInvested = invested > redeemed ? invested - redeemed : 0;\r\n        setInvestedAmountInDai(newInvested);\r\n\r\n        require(dsrBalance() >= newInvested);\r\n\r\n        emit TokensSwapped(chaiToken(), erc20token(), redeemed);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/erc20_to_native/ForeignBridgeErcToNative.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ForeignBridgeErcToNative is BasicForeignBridge, ERC20Bridge, OtherSideBridgeStorage, ChaiConnector {\r\n    bytes32 internal constant MIN_HDTOKEN_BALANCE = 0x48649cf195feb695632309f41e61252b09f537943654bde13eb7bb1bca06964e; // keccak256(abi.encodePacked(\"minHDTokenBalance\"))\r\n    bytes4 internal constant SWAP_TOKENS = 0x73d00224; // swapTokens()\r\n\r\n    function initialize(\r\n        address _validatorContract,\r\n        address _erc20token,\r\n        uint256 _requiredBlockConfirmations,\r\n        uint256 _gasPrice,\r\n        uint256[] _dailyLimitMaxPerTxMinPerTxArray, // [ 0 = _dailyLimit, 1 = _maxPerTx, 2 = _minPerTx ]\r\n        uint256[] _homeDailyLimitHomeMaxPerTxArray, //[ 0 = _homeDailyLimit, 1 = _homeMaxPerTx ]\r\n        address _owner,\r\n        uint256 _decimalShift,\r\n        address _bridgeOnOtherSide\r\n    ) external onlyRelevantSender returns (bool) {\r\n        require(!isInitialized());\r\n        require(AddressUtils.isContract(_validatorContract));\r\n        require(_requiredBlockConfirmations != 0);\r\n        require(_gasPrice > 0);\r\n        require(\r\n            _dailyLimitMaxPerTxMinPerTxArray[2] > 0 && // _minPerTx > 0\r\n                _dailyLimitMaxPerTxMinPerTxArray[1] > _dailyLimitMaxPerTxMinPerTxArray[2] && // _maxPerTx > _minPerTx\r\n                _dailyLimitMaxPerTxMinPerTxArray[0] > _dailyLimitMaxPerTxMinPerTxArray[1] // _dailyLimit > _maxPerTx\r\n        );\r\n        require(_homeDailyLimitHomeMaxPerTxArray[1] < _homeDailyLimitHomeMaxPerTxArray[0]); // _homeMaxPerTx < _homeDailyLimit\r\n        require(_owner != address(0));\r\n        require(_bridgeOnOtherSide != address(0));\r\n\r\n        addressStorage[VALIDATOR_CONTRACT] = _validatorContract;\r\n        setErc20token(_erc20token);\r\n        uintStorage[DEPLOYED_AT_BLOCK] = block.number;\r\n        uintStorage[REQUIRED_BLOCK_CONFIRMATIONS] = _requiredBlockConfirmations;\r\n        uintStorage[GAS_PRICE] = _gasPrice;\r\n        uintStorage[DAILY_LIMIT] = _dailyLimitMaxPerTxMinPerTxArray[0];\r\n        uintStorage[MAX_PER_TX] = _dailyLimitMaxPerTxMinPerTxArray[1];\r\n        uintStorage[MIN_PER_TX] = _dailyLimitMaxPerTxMinPerTxArray[2];\r\n        uintStorage[EXECUTION_DAILY_LIMIT] = _homeDailyLimitHomeMaxPerTxArray[0];\r\n        uintStorage[EXECUTION_MAX_PER_TX] = _homeDailyLimitHomeMaxPerTxArray[1];\r\n        uintStorage[DECIMAL_SHIFT] = _decimalShift;\r\n        setOwner(_owner);\r\n        _setBridgeContractOnOtherSide(_bridgeOnOtherSide);\r\n        setInitialize();\r\n\r\n        emit RequiredBlockConfirmationChanged(_requiredBlockConfirmations);\r\n        emit GasPriceChanged(_gasPrice);\r\n        emit DailyLimitChanged(_dailyLimitMaxPerTxMinPerTxArray[0]);\r\n        emit ExecutionDailyLimitChanged(_homeDailyLimitHomeMaxPerTxArray[0]);\r\n\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeMode() external pure returns (bytes4 _data) {\r\n        return 0x18762d46; // bytes4(keccak256(abi.encodePacked(\"erc-to-native-core\")))\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public {\r\n        require(_token != address(erc20token()));\r\n        // Chai token is not claimable if investing into Chai is enabled\r\n        require(_token != address(chaiToken()) || !isChaiTokenEnabled());\r\n        if (_token == address(halfDuplexErc20token())) {\r\n            // SCD is not claimable if the bridge accepts deposits of this token\r\n            // solhint-disable-next-line not-rely-on-time\r\n            require(!isTokenSwapAllowed(now));\r\n        }\r\n        super.claimTokens(_token, _to);\r\n    }\r\n\r\n    function onExecuteMessage(\r\n        address _recipient,\r\n        uint256 _amount,\r\n        bytes32 /*_txHash*/\r\n    ) internal returns (bool) {\r\n        setTotalExecutedPerDay(getCurrentDay(), totalExecutedPerDay(getCurrentDay()).add(_amount));\r\n        uint256 amount = _amount.div(10**decimalShift());\r\n\r\n        uint256 currentBalance = tokenBalance(erc20token());\r\n\r\n        // Convert part of Chai tokens back to DAI, if DAI balance is insufficient.\r\n        // If Chai token is disabled, bridge will keep all funds directly in DAI token,\r\n        // so it will have enough funds to cover any xDai => Dai transfer,\r\n        // and currentBalance >= amount will always hold.\r\n        if (currentBalance < amount) {\r\n            _convertChaiToDai(amount.sub(currentBalance).add(minDaiTokenBalance()));\r\n        }\r\n\r\n        bool res = erc20token().transfer(_recipient, amount);\r\n\r\n        if (tokenBalance(halfDuplexErc20token()) > 0) {\r\n            address(this).call(abi.encodeWithSelector(SWAP_TOKENS));\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function onFailedMessage(address, uint256, bytes32) internal {\r\n        revert();\r\n    }\r\n\r\n    function saiTopContract() internal pure returns (ISaiTop) {\r\n        return ISaiTop(0x9b0ccf7C8994E19F39b2B4CF708e0A7DF65fA8a3);\r\n    }\r\n\r\n    function isTokenSwapAllowed(uint256 _ts) public view returns (bool) {\r\n        uint256 esTs = saiTopContract().caged();\r\n        if (esTs > 0 && _ts > esTs) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function halfDuplexErc20token() public pure returns (ERC20) {\r\n        return ERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n    }\r\n\r\n    function setMinHDTokenBalance(uint256 _minBalance) external onlyOwner {\r\n        uintStorage[MIN_HDTOKEN_BALANCE] = _minBalance;\r\n    }\r\n\r\n    function minHDTokenBalance() public view returns (uint256) {\r\n        return uintStorage[MIN_HDTOKEN_BALANCE];\r\n    }\r\n\r\n    function isHDTokenBalanceAboveMinBalance() public view returns (bool) {\r\n        if (tokenBalance(halfDuplexErc20token()) > minHDTokenBalance()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function tokenBalance(ERC20 _token) internal view returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    function migrationContract() internal pure returns (IScdMcdMigration) {\r\n        return IScdMcdMigration(0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849);\r\n    }\r\n\r\n    function swapTokens() public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(isTokenSwapAllowed(now));\r\n\r\n        IScdMcdMigration mcdMigrationContract = migrationContract();\r\n        ERC20 hdToken = halfDuplexErc20token();\r\n        ERC20 fdToken = erc20token();\r\n\r\n        uint256 curHDTokenBalance = tokenBalance(hdToken);\r\n        require(curHDTokenBalance > 0);\r\n\r\n        uint256 curFDTokenBalance = tokenBalance(fdToken);\r\n\r\n        require(hdToken.approve(mcdMigrationContract, curHDTokenBalance));\r\n        mcdMigrationContract.swapSaiToDai(curHDTokenBalance);\r\n\r\n        require(tokenBalance(fdToken).sub(curFDTokenBalance) == curHDTokenBalance);\r\n\r\n        emit TokensSwapped(hdToken, fdToken, curHDTokenBalance);\r\n    }\r\n\r\n    function relayTokens(address _receiver, uint256 _amount) external {\r\n        _relayTokens(msg.sender, _receiver, _amount, erc20token());\r\n    }\r\n\r\n    function relayTokens(address _sender, address _receiver, uint256 _amount) external {\r\n        relayTokens(_sender, _receiver, _amount, erc20token());\r\n    }\r\n\r\n    function relayTokens(address _from, address _receiver, uint256 _amount, address _token) public {\r\n        require(_from == msg.sender || _from == _receiver);\r\n        _relayTokens(_from, _receiver, _amount, _token);\r\n    }\r\n\r\n    function relayTokens(address _receiver, uint256 _amount, address _token) external {\r\n        _relayTokens(msg.sender, _receiver, _amount, _token);\r\n    }\r\n\r\n    function _relayTokens(address _sender, address _receiver, uint256 _amount, address _token) internal {\r\n        require(_receiver != bridgeContractOnOtherSide());\r\n        require(_receiver != address(0));\r\n        require(_receiver != address(this));\r\n        require(_amount > 0);\r\n        require(withinLimit(_amount));\r\n\r\n        ERC20 tokenToOperate = ERC20(_token);\r\n        ERC20 hdToken = halfDuplexErc20token();\r\n        ERC20 fdToken = erc20token();\r\n\r\n        if (tokenToOperate == ERC20(0x0)) {\r\n            tokenToOperate = fdToken;\r\n        }\r\n\r\n        require(tokenToOperate == fdToken || tokenToOperate == hdToken);\r\n\r\n        setTotalSpentPerDay(getCurrentDay(), totalSpentPerDay(getCurrentDay()).add(_amount));\r\n\r\n        tokenToOperate.transferFrom(_sender, address(this), _amount);\r\n        emit UserRequestForAffirmation(_receiver, _amount);\r\n\r\n        if (tokenToOperate == hdToken) {\r\n            swapTokens();\r\n        }\r\n        if (isDaiNeedsToBeInvested()) {\r\n            convertDaiToChai();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"relayedMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isChaiTokenEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dsrBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isHDTokenBalanceAboveMinBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setExecutionDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes\"},{\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"executeSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minHDTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionDailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalExecutedPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"isTokenSwapAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDaiTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinHDTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinExecutionLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"executionMaxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setInterestCollectionPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestCollectionPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setInterestReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDaiNeedsToBeInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfDuplexErc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinDaiTokenBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chaiToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_erc20token\",\"type\":\"address\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_dailyLimitMaxPerTxMinPerTxArray\",\"type\":\"uint256[]\"},{\"name\":\"_homeDailyLimitHomeMaxPerTxArray\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_decimalShift\",\"type\":\"uint256\"},{\"name\":\"_bridgeOnOtherSide\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedAmountInDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interestReceiver\",\"type\":\"address\"}],\"name\":\"initializeChaiToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chaiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"convertDaiToChai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeChaiToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalShift\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInterestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeChaiToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setExecutionMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaidInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UserRequestForAffirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ExecutionDailyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ForeignBridgeErcToNative","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://3048afa8f5a76a04c3dc49dbec1cf88cbb0becd04ab952e47301e895f9384a44"}]}