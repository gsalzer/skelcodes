{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.13;\r\ncontract EtherParadise {\r\n    struct User{\r\n        \r\n        address reddr;\r\n        \r\n        uint8 valid;\r\n        \r\n        uint bet;\r\n        \r\n        uint remcode;\r\n        \r\n        uint last_inv;\r\n    }\r\n    struct Bet{\r\n        address addr;\r\n        address reddr;\r\n        uint amount;\r\n        uint remcode;\r\n        uint time;\r\n    }\r\n    \r\n    mapping(address => User) private Accounts;\r\n    \r\n    mapping(uint => Bet) private InvRecord;\r\n    \r\n    mapping(uint => uint8) private record;\r\n    \r\n    mapping(address => uint8) private Staff;\r\n    \r\n    mapping(uint => address) private CodeMapAddr;\r\n    address private first;\r\n    \r\n    uint private IndNum = 100;\r\n    \r\n    uint private TeamRate = 5;\r\n    \r\n    uint private PoolRate = 5;\r\n    \r\n    address Team = 0x20Ed520c44f975cc60779877BAA88D2391d61C23;\r\n    \r\n    address Pool = 0x9754d1Eea7d501973e7f027DCEBc7e93441Cee19;\r\n    \r\n    address Fund = 0x5FF260a092002508E4487a289372Ad763591896e;\r\n    \r\n    uint8 private IsOnLine = 0;\r\n    \r\n    uint private LastT = 0;\r\n    \r\n    uint8 private IsRepeat = 0;\r\n\r\n    constructor () public{\r\n        first = msg.sender;\r\n    }\r\n\r\n    modifier isfirst{\r\n        require(msg.sender==first,\"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier IsStaff{\r\n        require(msg.sender==first||Staff[msg.sender]==1,\"not staff\");\r\n        _;\r\n    }\r\n\r\n    function() external payable{}\r\n    function TeamAddr()public view returns(address){return Team;}\r\n    function PoolAddr()public view returns(address){return Pool;}\r\n    function FundAddr()public view returns(address){return Fund;}\r\n    function entry(address reAddr) public payable{\r\n        require(reAddr!=first&&reAddr!=0x0000000000000000000000000000000000000000,\"Invalid address\");\r\n        if(IsRepeat==0){\r\n            require(Accounts[msg.sender].valid!=1,\"Cannot bet repeatedly\");\r\n        }\r\n        uint  payamount = msg.value;\r\n        if(Accounts[msg.sender].valid == 0){\r\n          require(Accounts[reAddr].valid>0&&msg.sender!=reAddr,\"Invalid recommended account\");\r\n        }else{\r\n          require(payamount>=Accounts[msg.sender].last_inv,\"The quantity cannot be less than the last quantity\");\r\n        }\r\n        compute(msg.sender,reAddr,payamount);\r\n    }\r\n\r\n    function test(address addr,address reAddr,uint payamount) external isfirst {\r\n        require(IsOnLine==0,\"Is on-line\");\r\n        compute(addr,reAddr,payamount);\r\n    }\r\n\r\n    function compute(address addr,address reAddr,uint payamount) private{\r\n        require(payamount % 1 ether == 0 && payamount >= 1 ether && payamount <= 13 ether,\"Amount error\");\r\n        address nowReAddr = reAddr;\r\n        LastT = block.timestamp;\r\n         if(Accounts[addr].valid == 0){\r\n            Accounts[addr].reddr = reAddr;\r\n            uint remCode = 666666666*IndNum;\r\n            CodeMapAddr[remCode] = addr;\r\n            Accounts[addr].remcode = remCode;\r\n        }else{\r\n            nowReAddr = Accounts[addr].reddr;\r\n        }\r\n        Accounts[addr].valid = 1;\r\n        Accounts[addr].last_inv = payamount;\r\n        Accounts[addr].bet = Accounts[addr].bet + payamount;\r\n        InvRecord[IndNum] = Bet(addr,nowReAddr,payamount,Accounts[addr].remcode,LastT);\r\n        IndNum = IndNum + 1;\r\n        sendTeam(payamount);\r\n        sendPool(payamount);\r\n    }\r\n\r\n    function take(uint order,address addr,uint payamount) external IsStaff{\r\n        require(address(this).balance>0,\"Insufficient balance\");\r\n        if(record[order]==0){\r\n            uint amount = payamount;\r\n            if(amount>address(this).balance){\r\n                amount = address(this).balance;\r\n                LastT = block.timestamp;\r\n            }\r\n            address payable takeAddr = address(uint160(addr));\r\n            record[order] = 1;\r\n            takeAddr.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function sendTeam(uint payamount) private{\r\n        uint teamAmount = payamount*TeamRate/100;\r\n        if(teamAmount<=address(this).balance){\r\n            address payable teamAddr = address(uint160(Team));\r\n            teamAddr.transfer(teamAmount);\r\n        }\r\n    }\r\n    function sendPool(uint payamount) private{\r\n        uint poolAmount = payamount*PoolRate/100;\r\n        if(poolAmount<=address(this).balance){\r\n            address payable poolAddr = address(uint160(Pool));\r\n            poolAddr.transfer(poolAmount);\r\n        }\r\n    }\r\n    function online(uint8 status) public isfirst{\r\n        IsOnLine = status;\r\n    }\r\n    function repeat(uint8 status) public isfirst{\r\n        if(status==1){\r\n            IsRepeat = 1;\r\n        }else{\r\n            IsRepeat = 0;\r\n        }\r\n    }\r\n    \r\n    function over(address addr) public IsStaff{\r\n        if(Accounts[addr].valid == 1){\r\n            Accounts[addr].valid = 2;\r\n        }\r\n    }\r\n\r\n    function setStaff(address addr,uint8 status) public isfirst{\r\n        if(status==1){\r\n            Staff[addr] = 1;\r\n        }else{\r\n            Staff[addr] = 0;\r\n        }\r\n    }\r\n\r\n    function getAccount(uint remcode) external view returns(uint,uint,uint,uint,uint,uint8,uint8,address,address){\r\n        User memory act = Accounts[msg.sender];\r\n        address remAddr = CodeMapAddr[remcode];\r\n        address payable poolAddr = address(uint160(Pool));\r\n        address payable fundAddr = address(uint160(Fund));\r\n        return (poolAddr.balance,fundAddr.balance,act.remcode,act.bet,act.last_inv,act.valid,IsRepeat,act.reddr,remAddr);\r\n    }\r\n\r\n    function getIndex(uint index,uint order) external view IsStaff returns (address,address,uint,uint,uint,uint,uint,uint,uint8){\r\n        Bet memory idB = InvRecord[index];\r\n        uint total = address(this).balance;\r\n        uint8 odVal = record[order];\r\n        return (idB.addr,idB.reddr,idB.amount,idB.remcode,IndNum,total,idB.time,LastT,odVal);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"FundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PoolAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TeamAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reAddr\",\"type\":\"address\"}],\"name\":\"entry\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remcode\",\"type\":\"uint256\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"getIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"online\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"over\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"repeat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStaff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payamount\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payamount\",\"type\":\"uint256\"}],\"name\":\"test\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtherParadise","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://3aef5614aef274e2f717b956124da3aff09250ea30ea63570f4f0c7a9dca6a52"}]}