{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/OWnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/RootChainI.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface RootChainI {\r\n  function operator() external view returns (address);\r\n  function isRootChain() external view returns (bool);\r\n  function currentFork() external view returns (uint);\r\n  function lastEpoch(uint forkNumber) external view returns (uint);\r\n}\r\n\r\n// File: contracts/stake/interfaces/SeigManagerI.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ninterface SeigManagerI {\r\n  function registry() external view returns (address);\r\n  function depositManager() external view returns (address);\r\n  function ton() external view returns (address);\r\n  function wton() external view returns (address);\r\n  function powerton() external view returns (address);\r\n  function tot() external view returns (address);\r\n  function coinages(address rootchain) external view returns (address);\r\n  function commissionRates(address rootchain) external view returns (uint256);\r\n\r\n  function lastCommitBlock(address rootchain) external view returns (uint256);\r\n  function seigPerBlock() external view returns (uint256);\r\n  function lastSeigBlock() external view returns (uint256);\r\n  function pausedBlock() external view returns (uint256);\r\n  function unpausedBlock() external view returns (uint256);\r\n  function DEFAULT_FACTOR() external view returns (uint256);\r\n\r\n  function deployCoinage(address rootchain) external returns (bool);\r\n  function setCommissionRate(address rootchain, uint256 commission) external returns (bool);\r\n\r\n  function uncomittedStakeOf(address rootchain, address account) external view returns (uint256);\r\n  function stakeOf(address rootchain, address account) external view returns (uint256);\r\n  function additionalTotBurnAmount(address rootchain, address account, uint256 amount) external view returns (uint256 totAmount);\r\n\r\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function onCommit() external returns (bool);\r\n  function onDeposit(address rootchain, address account, uint256 amount) external returns (bool);\r\n  function onWithdraw(address rootchain, address account, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/stake/interfaces/RootChainRegistryI.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\ninterface RootChainRegistryI {\r\n  function rootchains(address rootchain) external view returns (bool);\r\n\r\n  function register(address rootchain) external returns (bool);\r\n  function numRootChains() external view returns (uint256);\r\n  function rootchainByIndex(uint256 index) external view returns (address);\r\n\r\n  function deployCoinage(address rootchain, address seigManager) external returns (bool);\r\n  function registerAndDeployCoinage(address rootchain, address seigManager) external returns (bool);\r\n  function unregister(address rootchain) external returns (bool);\r\n}\r\n\r\n// File: contracts/stake/RootChainRegistry.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// TODO: transfer coinages ownership to seig manager\r\ncontract RootChainRegistry is RootChainRegistryI, Ownable {\r\n  // check whether the address is root chain contract or not\r\n  mapping (address => bool) internal _rootchains;\r\n\r\n  // array-like storages\r\n  // NOTE: unregistered rootchains could exists in that array. so, should check by rootchains(address)\r\n  uint256 internal _numRootChains;\r\n  mapping (uint256 => address) internal _rootchainByIndex;\r\n\r\n  modifier onlyOwnerOrOperator(address rootchain) {\r\n    require(isOwner() || RootChainI(rootchain).operator() == msg.sender, \"sender is neither operator nor operator\");\r\n    _;\r\n  }\r\n\r\n  function rootchains(address rootchain) external view returns (bool) {\r\n    return _rootchains[rootchain];\r\n  }\r\n\r\n  function numRootChains() external view returns (uint256) {\r\n    return _numRootChains;\r\n  }\r\n\r\n  function rootchainByIndex(uint256 index) external view returns (address) {\r\n    return _rootchainByIndex[index];\r\n  }\r\n\r\n  function register(address rootchain)\r\n    external\r\n    onlyOwnerOrOperator(rootchain)\r\n    returns (bool)\r\n  {\r\n    return _register(rootchain);\r\n  }\r\n\r\n  function _register(address rootchain) internal returns (bool) {\r\n    require(!_rootchains[rootchain]);\r\n    require(RootChainI(rootchain).isRootChain());\r\n\r\n    _rootchains[rootchain] = true;\r\n    _rootchainByIndex[_numRootChains] = rootchain;\r\n    _numRootChains += 1;\r\n\r\n    return true;\r\n  }\r\n\r\n  function deployCoinage(\r\n    address rootchain,\r\n    address seigManager\r\n  )\r\n    external\r\n    onlyOwnerOrOperator(rootchain)\r\n    returns (bool)\r\n  {\r\n    return _deployCoinage(rootchain, seigManager);\r\n  }\r\n\r\n  function _deployCoinage(\r\n    address rootchain,\r\n    address seigManager\r\n  )\r\n   internal\r\n   returns (bool)\r\n  {\r\n    return SeigManagerI(seigManager).deployCoinage(rootchain);\r\n  }\r\n\r\n  function registerAndDeployCoinage(\r\n    address rootchain,\r\n    address seigManager\r\n  )\r\n    external\r\n    onlyOwnerOrOperator(rootchain)\r\n    returns (bool)\r\n  {\r\n    require(_register(rootchain));\r\n    require(_deployCoinage(rootchain, seigManager));\r\n    return true;\r\n  }\r\n\r\n  function registerAndDeployCoinageAndSetCommissionRate(\r\n    address rootchain,\r\n    address seigManager,\r\n    uint256 commissionRate\r\n  )\r\n    external\r\n    onlyOwnerOrOperator(rootchain)\r\n    returns (bool)\r\n  {\r\n    require(_register(rootchain));\r\n    require(_deployCoinage(rootchain, seigManager));\r\n    require(_setCommissionRate(rootchain, seigManager, commissionRate));\r\n    return true;\r\n  }\r\n\r\n  function _setCommissionRate(\r\n    address rootchain,\r\n    address seigManager,\r\n    uint256 commissionRate\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return SeigManagerI(seigManager).setCommissionRate(rootchain, commissionRate);\r\n  }\r\n\r\n  function unregister(address rootchain) external onlyOwner returns (bool) {\r\n    require(_rootchains[rootchain]);\r\n\r\n    _rootchains[rootchain] = false;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seigManager\",\"type\":\"address\"}],\"name\":\"deployCoinage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numRootChains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seigManager\",\"type\":\"address\"}],\"name\":\"registerAndDeployCoinage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seigManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"}],\"name\":\"registerAndDeployCoinageAndSetCommissionRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rootchainByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"rootchains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"unregister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RootChainRegistry","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://b29ac50432f2cf546c039d12642e2b3e893640194497c9b1678434d56a2b7cd7"}]}