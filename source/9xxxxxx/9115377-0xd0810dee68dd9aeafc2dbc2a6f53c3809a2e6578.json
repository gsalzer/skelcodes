{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.10 <0.6.0;\n\n\ninterface IAllocationStrategy {\n\n    \n    function underlying() external view returns (address);\n\n    \n    function exchangeRateStored() external view returns (uint256);\n\n    \n    function accrueInterest() external returns (bool);\n\n    \n    function investUnderlying(uint256 investAmount) external returns (uint256);\n\n    \n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n}\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    \n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    \n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    \n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    \n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external view returns (uint256);\n\n    \n    function balanceOf(address account) external view returns (uint256);\n\n    \n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    \n    function allowance(address owner, address spender) external view returns (uint256);\n\n    \n    function approve(address spender, uint256 amount) external returns (bool);\n\n    \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface CErc20Interface {\n\n    function name() external view returns (\n        string memory\n    );\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) external returns (\n        bool\n    );\n\n    function repayBorrow(\n        uint256 repayAmount\n    ) external returns (\n        uint256\n    );\n\n    function reserveFactorMantissa() external view returns (\n        uint256\n    );\n\n    function borrowBalanceCurrent(\n        address account\n    ) external returns (\n        uint256\n    );\n\n    function totalSupply() external view returns (\n        uint256\n    );\n\n    function exchangeRateStored() external view returns (\n        uint256\n    );\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (\n        bool\n    );\n\n    function repayBorrowBehalf(\n        address borrower,\n        uint256 repayAmount\n    ) external returns (\n        uint256\n    );\n\n    function pendingAdmin() external view returns (\n        address\n    );\n\n    function decimals() external view returns (\n        uint256\n    );\n\n    function balanceOfUnderlying(\n        address owner\n    ) external returns (\n        uint256\n    );\n\n    function getCash() external view returns (\n        uint256\n    );\n\n    function _setComptroller(\n        address newComptroller\n    ) external returns (\n        uint256\n    );\n\n    function totalBorrows() external view returns (\n        uint256\n    );\n\n    function comptroller() external view returns (\n        address\n    );\n\n    function _reduceReserves(\n        uint256 reduceAmount\n    ) external returns (\n        uint256\n    );\n\n    function initialExchangeRateMantissa() external view returns (\n        uint256\n    );\n\n    function accrualBlockNumber() external view returns (\n        uint256\n    );\n\n    function underlying() external view returns (\n        address\n    );\n\n    function balanceOf(\n        address owner\n    ) external view returns (\n        uint256\n    );\n\n    function totalBorrowsCurrent() external returns (\n        uint256\n    );\n\n    function redeemUnderlying(\n        uint256 redeemAmount\n    ) external returns (\n        uint256\n    );\n\n    function totalReserves() external view returns (\n        uint256\n    );\n\n    function symbol() external view returns (\n        string memory\n    );\n\n    function borrowBalanceStored(\n        address account\n    ) external view returns (\n        uint256\n    );\n\n    function mint(\n        uint256 mintAmount\n    ) external returns (\n        uint256\n    );\n\n    function accrueInterest() external returns (\n        uint256\n    );\n\n    function transfer(\n        address dst,\n        uint256 amount\n    ) external returns (\n        bool\n    );\n\n    function borrowIndex() external view returns (\n        uint256\n    );\n\n    function supplyRatePerBlock() external view returns (\n        uint256\n    );\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (\n        uint256\n    );\n\n    function _setPendingAdmin(\n        address newPendingAdmin\n    ) external returns (\n        uint256\n    );\n\n    function exchangeRateCurrent() external returns (\n        uint256\n    );\n\n    function getAccountSnapshot(\n        address account\n    ) external view returns (\n        uint256,\n        uint256,\n        uint256,\n        uint256\n    );\n\n    function borrow(\n        uint256 borrowAmount\n    ) external returns (\n        uint256\n    );\n\n    function redeem(\n        uint256 redeemTokens\n    ) external returns (\n        uint256\n    );\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (\n        uint256\n    );\n\n    function _acceptAdmin() external returns (\n        uint256\n    );\n\n    function _setInterestRateModel(\n        address newInterestRateModel\n    ) external returns (\n        uint256\n    );\n\n    function interestRateModel() external view returns (\n        address\n    );\n\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        address cTokenCollateral\n    ) external returns (\n        uint256\n    );\n\n    function admin() external view returns (\n        address\n    );\n\n    function borrowRatePerBlock() external view returns (\n        uint256\n    );\n\n    function _setReserveFactor(\n        uint256 newReserveFactorMantissa\n    ) external returns (\n        uint256\n    );\n\n    function isCToken() external view returns (\n        bool\n    );\n\n    \n\n    event AccrueInterest(\n        uint256 interestAccumulated,\n        uint256 borrowIndex,\n        uint256 totalBorrows\n    );\n\n    event Mint(\n        address minter,\n        uint256 mintAmount,\n        uint256 mintTokens\n    );\n\n    event Redeem(\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    );\n\n    event Borrow(\n        address borrower,\n        uint256 borrowAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    event RepayBorrow(\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    event LiquidateBorrow(\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        address cTokenCollateral,\n        uint256 seizeTokens\n    );\n\n    event NewPendingAdmin(\n        address oldPendingAdmin,\n        address newPendingAdmin\n    );\n\n    event NewAdmin(\n        address oldAdmin,\n        address newAdmin\n    );\n\n    event NewComptroller(\n        address oldComptroller,\n        address newComptroller\n    );\n\n    event NewMarketInterestRateModel(\n        address oldInterestRateModel,\n        address newInterestRateModel\n    );\n\n    event NewReserveFactor(\n        uint256 oldReserveFactorMantissa,\n        uint256 newReserveFactorMantissa\n    );\n\n    event ReservesReduced(\n        address admin,\n        uint256 reduceAmount,\n        uint256 newTotalReserves\n    );\n\n    event Failure(\n        uint256 error,\n        uint256 info,\n        uint256 detail\n    );\n\n    event Transfer(\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event Approval(\n        address owner,\n        address spender,\n        uint256 amount\n    );\n\n}\n\ncontract CompoundAllocationStrategy is IAllocationStrategy, Ownable {\n\n    CErc20Interface private cToken;\n    IERC20 private token;\n\n    constructor(CErc20Interface cToken_) public {\n        cToken = cToken_;\n        token = IERC20(cToken.underlying());\n    }\n\n    \n    function underlying() external view returns (address) {\n        return cToken.underlying();\n    }\n\n    \n    function exchangeRateStored() external view returns (uint256) {\n        return cToken.exchangeRateStored();\n    }\n\n    \n    function accrueInterest() external returns (bool) {\n        return cToken.accrueInterest() == 0;\n    }\n\n    \n    function investUnderlying(uint256 investAmount) external onlyOwner returns (uint256) {\n        token.transferFrom(msg.sender, address(this), investAmount);\n        token.approve(address(cToken), investAmount);\n        uint256 cTotalBefore = cToken.totalSupply();\n        \n        require(cToken.mint(investAmount) == 0, \"mint failed\");\n        uint256 cTotalAfter = cToken.totalSupply();\n        uint256 cCreatedAmount;\n        require (cTotalAfter >= cTotalBefore, \"Compound minted negative amount!?\");\n        cCreatedAmount = cTotalAfter - cTotalBefore;\n        return cCreatedAmount;\n    }\n\n    \n    function redeemUnderlying(uint256 redeemAmount) external onlyOwner returns (uint256) {\n        uint256 cTotalBefore = cToken.totalSupply();\n        \n        require(cToken.redeemUnderlying(redeemAmount) == 0, \"redeemUnderlying failed\");\n        uint256 cTotalAfter = cToken.totalSupply();\n        uint256 cBurnedAmount;\n        require(cTotalAfter <= cTotalBefore, \"Compound redeemed negative amount!?\");\n        cBurnedAmount = cTotalBefore - cTotalAfter;\n        token.transfer(msg.sender, redeemAmount);\n        return cBurnedAmount;\n    }\n\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract CErc20Interface\",\"name\":\"cToken_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"name\":\"investUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundAllocationStrategy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643","Library":"","LicenseType":"","SwarmSource":"bzzr://aec1c64741757e52d8e9a642dcd6d88b63ef1d989bc34aa6998dee9450e9528c"}]}