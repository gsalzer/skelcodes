{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable\r\n{\r\n    string constant internal ERROR_NO_HAVE_PERMISSION   = 'Reason: No have permission.';\r\n    string constant internal ERROR_IS_STOPPED           = 'Reason: Is stopped.';\r\n    string constant internal ERROR_ADDRESS_NOT_VALID    = 'Reason: Address is not valid.';\r\n    string constant internal ERROR_CALLER_ALREADY_OWNER = 'Reason: Caller already is owner';\r\n    string constant internal ERROR_NOT_PROPOSED_OWNER   = 'Reason: Not proposed owner';\r\n\r\n    bool private stopped;\r\n    address private _owner;\r\n    address private proposedOwner;\r\n    mapping(address => bool) private _allowed;\r\n\r\n    event Stopped();\r\n    event Started();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Allowed(address indexed _address);\r\n    event RemoveAllowed(address indexed _address);\r\n\r\n    constructor () internal\r\n    {\r\n        stopped = false;\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address)\r\n    {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner()\r\n    {\r\n        require(isOwner(), ERROR_NO_HAVE_PERMISSION);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowed()\r\n    {\r\n        require(isAllowed() || isOwner(), ERROR_NO_HAVE_PERMISSION);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenNotStopped()\r\n    {\r\n        require(!isStopped(), ERROR_IS_STOPPED);\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool)\r\n    {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function isAllowed() public view returns (bool)\r\n    {\r\n        return _allowed[msg.sender];\r\n    }\r\n\r\n    function allow(address _target) external onlyOwner returns (bool)\r\n    {\r\n        _allowed[_target] = true;\r\n        emit Allowed(_target);\r\n        return true;\r\n    }\r\n\r\n    function removeAllowed(address _target) external onlyOwner returns (bool)\r\n    {\r\n        _allowed[_target] = false;\r\n        emit RemoveAllowed(_target);\r\n        return true;\r\n    }\r\n\r\n    function isStopped() public view returns (bool)\r\n    {\r\n        if(isOwner() || isAllowed())\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return stopped;\r\n        }\r\n    }\r\n\r\n    function stop() public onlyOwner\r\n    {\r\n        _stop();\r\n    }\r\n\r\n    function start() public onlyOwner\r\n    {\r\n        _start();\r\n    }\r\n\r\n    function proposeOwner(address _proposedOwner) public onlyOwner\r\n    {\r\n        require(msg.sender != _proposedOwner, ERROR_CALLER_ALREADY_OWNER);\r\n        proposedOwner = _proposedOwner;\r\n    }\r\n\r\n    function claimOwnership() public\r\n    {\r\n        require(msg.sender == proposedOwner, ERROR_NOT_PROPOSED_OWNER);\r\n\r\n        emit OwnershipTransferred(_owner, proposedOwner);\r\n\r\n        _owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n    }\r\n\r\n    function _stop() internal\r\n    {\r\n        emit Stopped();\r\n        stopped = true;\r\n    }\r\n\r\n    function _start() internal\r\n    {\r\n        emit Started();\r\n        stopped = false;\r\n    }\r\n}\r\n\r\ncontract BaseToken is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    // MARK: error message.\r\n    string constant internal ERROR_APPROVED_BALANCE_NOT_ENOUGH = 'Reason: Approved balance is not enough.';\r\n    string constant internal ERROR_BALANCE_NOT_ENOUGH          = 'Reason: Balance is not enough.';\r\n    string constant internal ERROR_LOCKED                      = 'Reason: Locked.';\r\n    string constant internal ERROR_ADDRESS_NOT_VALID           = 'Reason: Address is not valid.';\r\n    string constant internal ERROR_ADDRESS_IS_SAME             = 'Reason: Address is same.';\r\n    string constant internal ERROR_VALUE_NOT_VALID             = 'Reason: Value must be greater than 0.';\r\n    string constant internal ERROR_NO_LOCKUP                   = 'Reason: There is no lockup.';\r\n    string constant internal ERROR_DATE_TIME_NOT_VALID         = 'Reason: Datetime must grater or equals than zero.';\r\n    string constant internal ERROR_OUT_OF_INDEX                = 'Reason: Out of index.';\r\n    string constant internal ERROR_TIME_IS_PAST                = 'Reason: Time is past.';\r\n\r\n    // MARK: basic token information.\r\n    uint256 constant internal E18      = 1000000000000000000;\r\n    uint256 constant public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    struct Lock {\r\n        uint256 amount;\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping ( address => uint256 )) public approvals;\r\n    mapping (address => Lock[]) public lockup;\r\n\r\n\r\n    // MARK: events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Locked(address _who,uint256 _index);\r\n    event UnlockedAll(address _who);\r\n    event UnlockedIndex(address _who, uint256 _index);\r\n    event Burn(address indexed from, uint256 indexed value);\r\n\r\n    constructor() public\r\n    {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    modifier transferParamsValidation(address _from, address _to, uint256 _value)\r\n    {\r\n        require(_from != address(0), ERROR_ADDRESS_NOT_VALID);\r\n        require(_to != address(0), ERROR_ADDRESS_NOT_VALID);\r\n        require(_value > 0, ERROR_VALUE_NOT_VALID);\r\n        require(balances[_from] >= _value, ERROR_BALANCE_NOT_ENOUGH);\r\n        require(!isLocked(_from, _value), ERROR_LOCKED);\r\n        _;\r\n    }\r\n\r\n    // MARK: functions for view data\r\n    function balanceOf(address _who) view public returns (uint256)\r\n    {\r\n        return balances[_who];\r\n    }\r\n\r\n    function lockedBalanceOf(address _who) view public returns (uint256)\r\n    {\r\n        require(_who != address(0), ERROR_ADDRESS_NOT_VALID);\r\n\r\n        uint256 lockedBalance = 0;\r\n        if(lockup[_who].length > 0)\r\n        {\r\n            Lock[] storage locks = lockup[_who];\r\n\r\n            uint256 length = locks.length;\r\n            for (uint i = 0; i < length; i++)\r\n            {\r\n                if (now < locks[i].expiresAt)\r\n                {\r\n                    lockedBalance = lockedBalance.add(locks[i].amount);\r\n                }\r\n            }\r\n        }\r\n\r\n        return lockedBalance;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view external returns (uint256)\r\n    {\r\n        return approvals[_owner][_spender];\r\n    }\r\n\r\n    // true: _who can transfer token\r\n    // false: _who can't transfer token\r\n    function isLocked(address _who, uint256 _value) view public returns(bool)\r\n    {\r\n        uint256 lockedBalance = lockedBalanceOf(_who);\r\n        uint256 balance = balanceOf(_who);\r\n\r\n        if(lockedBalance <= 0)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return !(balance > lockedBalance && balance.sub(lockedBalance) >= _value);\r\n        }\r\n    }\r\n\r\n    // MARK: functions for token transfer\r\n    function transfer(address _to, uint256 _value) external onlyWhenNotStopped transferParamsValidation(msg.sender, _to, _value) returns (bool)\r\n    {\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external onlyWhenNotStopped transferParamsValidation(_from, _to, _value) returns (bool)\r\n    {\r\n        require(approvals[_from][msg.sender] >= _value, ERROR_APPROVED_BALANCE_NOT_ENOUGH);\r\n\r\n        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferWithLock(address _to, uint256 _value, uint256 _time) onlyOwner transferParamsValidation(msg.sender, _to, _value) external returns (bool)\r\n    {\r\n        require(_time > now, ERROR_TIME_IS_PAST);\r\n\r\n        _lock(_to, _value, _time);\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // MARK: utils for transfer authentication\r\n    function approve(address _spender, uint256 _value) external onlyWhenNotStopped returns (bool)\r\n    {\r\n        require(_spender != address(0), ERROR_VALUE_NOT_VALID);\r\n        require(balances[msg.sender] >= _value, ERROR_BALANCE_NOT_ENOUGH);\r\n        require(msg.sender != _spender, ERROR_ADDRESS_IS_SAME);\r\n\r\n        approvals[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // MARK: utils for amount of token\r\n    // Lock up token until specific date time.\r\n    function unlock(address _who, uint256 _index) onlyOwner external returns (bool)\r\n    {\r\n        uint256 length = lockup[_who].length;\r\n        require(length > _index, ERROR_OUT_OF_INDEX);\r\n\r\n        lockup[_who][_index] = lockup[_who][length - 1];\r\n        lockup[_who].length--;\r\n\r\n        emit UnlockedIndex(_who, _index);\r\n\r\n        return true;\r\n    }\r\n\r\n    function unlockAll(address _who) onlyOwner external returns (bool)\r\n    {\r\n        require(lockup[_who].length > 0, ERROR_NO_LOCKUP);\r\n\r\n        delete lockup[_who];\r\n        emit UnlockedAll(_who);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) external\r\n    {\r\n        require(balances[msg.sender] >= _value, ERROR_BALANCE_NOT_ENOUGH);\r\n        require(_value > 0, ERROR_VALUE_NOT_VALID);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n\r\n    // MARK: internal functions\r\n    function _transfer(address _from, address _to, uint256 _value) internal\r\n    {\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _lock(address _who, uint256 _value, uint256 _dateTime) onlyOwner internal\r\n    {\r\n        lockup[_who].push(Lock(_value, _dateTime));\r\n\r\n        emit Locked(_who, lockup[_who].length - 1);\r\n    }\r\n\r\n    // destruct for only after token upgrade\r\n    function close() onlyOwner public\r\n    {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n\r\n\r\ncontract HOMI is BaseToken\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    string constant internal ERROR_DUPLICATE_ADDRESS = 'Reason: msg.sender and receivers can not be the same.';\r\n\r\n    // MARK: token information.\r\n    string constant public name    = 'HOMIHELP';\r\n    string constant public symbol  = 'HOMI';\r\n    string constant public version = '1.0.0';\r\n\r\n\r\n    constructor() public\r\n    {\r\n        totalSupply = 100000000 * E18;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockup\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"unlockAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"allow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"UnlockedAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"UnlockedIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Allowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveAllowed\",\"type\":\"event\"}]","ContractName":"HOMI","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://613b47af8edc60e222021eec7de362f8c1bcf2070d003a5b107aa594c751dae8"}]}