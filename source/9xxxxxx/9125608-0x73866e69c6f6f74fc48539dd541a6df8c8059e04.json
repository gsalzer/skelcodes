{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Lock.sol\r\n\r\npragma solidity 0.5.13;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev This contract will hold user locked funds which will be unlocked after\r\n* lock-up period ends\r\n*/\r\ncontract Lock is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    enum Status { _, OPEN, CLOSED }\r\n    enum TokenStatus {_, ACTIVE, INACTIVE }\r\n\r\n    struct Token {\r\n        address tokenAddress;\r\n        uint256 minAmount;\r\n        bool emergencyUnlock;\r\n        TokenStatus status;\r\n    }\r\n\r\n    Token[] private _tokens;\r\n\r\n    //Keeps track of token index in above array\r\n    mapping(address => uint256) private _tokenVsIndex;\r\n\r\n    //Fee to be paid for each lock-up\r\n    //In percentage\r\n    //Ex. for 1% enter 100. For 1.25% enter 125\r\n    uint256 private _fee;\r\n\r\n    //Wallet where fees will go\r\n    address payable private _wallet;\r\n\r\n    address constant private ETH_ADDRESS = address(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    struct LockedAsset {\r\n        address token;// Token address\r\n        uint256 amount;// Amount locked\r\n        uint256 startDate;// Start date. We can remove this later\r\n        uint256 endDate;\r\n        address payable beneficiary;// Beneficary who will receive funds\r\n        Status status;\r\n    }\r\n\r\n    struct Airdrop {\r\n        address destToken;\r\n        //numerator and denominator will be used to calculate ratio\r\n        //Example 1DAI will get you 4 SAI\r\n        //which means numerator = 4 and denominator = 1\r\n        uint256 numerator;\r\n        uint256 denominator;\r\n        uint256 date;// Date at which time this entry was made\r\n        //Only those locked asset which were locked before this date will be\r\n        //given airdropped tokens\r\n    }\r\n\r\n    //Mapping of base token versus airdropped token\r\n    mapping(address => Airdrop[]) private _baseTokenVsAirdrops;\r\n\r\n    //Global lockedasset id. Also give total number of lock-ups made so far\r\n    uint256 private _lockId;\r\n\r\n    //list of all asset ids for a user/beneficiary\r\n    mapping(address => uint256[]) private _userVsLockIds;\r\n\r\n    mapping(uint256 => LockedAsset) private _idVsLockedAsset;\r\n\r\n    bool private _paused;\r\n\r\n    event TokenAdded(address indexed token);\r\n    event TokenInactivated(address indexed token);\r\n    event TokenActivated(address indexed token);\r\n    event FeeChanged(uint256 fee);\r\n    event WalletChanged(address indexed wallet);\r\n    event AssetLocked(\r\n        address indexed token,\r\n        address indexed sender,\r\n        address indexed beneficiary,\r\n        uint256 id,\r\n        uint256 amount,\r\n        uint256 startDate,\r\n        uint256 endDate\r\n    );\r\n    event TokenUpdated(\r\n        uint256 indexed id,\r\n        address indexed token,\r\n        uint256 minAmount,\r\n        bool emergencyUnlock\r\n    );\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    event AssetClaimed(\r\n        uint256 indexed id,\r\n        address indexed beneficiary,\r\n        address indexed token\r\n    );\r\n\r\n    event AirdropAdded(\r\n        address indexed baseToken,\r\n        address indexed destToken,\r\n        uint256 airdropDate\r\n    );\r\n\r\n    event TokensAirdropped(\r\n        address indexed destToken,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier tokenExist(address token) {\r\n        require(_tokenVsIndex[token] > 0, \"Lock: Token does not exist!!\");\r\n        _;\r\n    }\r\n\r\n    modifier tokenDoesNotExist(address token) {\r\n        require(_tokenVsIndex[token] == 0, \"Lock: Token already exist!!\");\r\n        _;\r\n    }\r\n\r\n    modifier canLockAsset(address token) {\r\n        uint256 index = _tokenVsIndex[token];\r\n\r\n        require(index > 0, \"Lock: Token does not exist!!\");\r\n\r\n        require(\r\n            _tokens[index.sub(1)].status == TokenStatus.ACTIVE,\r\n            \"Lock: Token not active!!\"\r\n        );\r\n\r\n        require(\r\n            !_tokens[index.sub(1)].emergencyUnlock,\r\n            \"Lock: Token is in emergency unlock state!!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canClaim(uint256 id) {\r\n\r\n        require(claimable(id), \"Lock: Can't claim asset\");\r\n\r\n        require(\r\n            _idVsLockedAsset[id].beneficiary == msg.sender,\r\n            \"Lock: Unauthorized access!!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Lock: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Lock: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev constructor\r\n    * @param fee Fee to be paid for each lock-up\r\n    * @param wallet Wallet address where fees will go\r\n    * @param tokens List of tokens\r\n    * @param minAmount Min lock-up amount for each token\r\n    */\r\n    constructor(\r\n        uint256 fee,\r\n        address payable wallet,\r\n        address[] memory tokens,\r\n        uint256[] memory minAmount\r\n    )\r\n        public\r\n    {\r\n        require(\r\n            tokens.length == minAmount.length,\r\n            \"Lock: Length mismatch between token list and their minimum lock amount!!\"\r\n        );\r\n        require(\r\n            wallet != address(0),\r\n            \"Lock: Please provide valid wallet address!!\"\r\n        );\r\n\r\n        _wallet = wallet;\r\n        _fee = fee;\r\n\r\n        for(uint256 i = 0; i<tokens.length; i = i.add(1)) {\r\n            require(\r\n                _tokenVsIndex[tokens[i]] == 0,\r\n                \"Lock: Token already exists\"\r\n            );\r\n            _tokens.push(Token({\r\n                tokenAddress: tokens[i],\r\n                minAmount: minAmount[i],\r\n                emergencyUnlock: false,\r\n                status: TokenStatus.ACTIVE\r\n            }));\r\n            _tokenVsIndex[tokens[i]] = _tokens.length;\r\n\r\n            emit TokenAdded(tokens[i]);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Returns true if the contract is paused, and false otherwise.\r\n    */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n    * @dev returns lock-up fee\r\n    */\r\n    function getFee() external view returns(uint256) {\r\n        return _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev returns the fee receiver wallet address\r\n    */\r\n    function getWallet() external view returns(address) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns total token count\r\n    */\r\n    function getTokenCount() external view returns(uint256) {\r\n        return _tokens.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns list of supported tokens\r\n    * This will be a paginated method which will only send 15 tokens in one request\r\n    * This is done to prevent infinite loops and overflow of gas limits\r\n    * @param start start index for pagination\r\n    * @param length Amount of tokens to fetch\r\n    */\r\n    function getTokens(uint256 start, uint256 length) external view returns(\r\n        address[] memory tokenAddresses,\r\n        uint256[] memory minAmounts,\r\n        bool[] memory emergencyUnlocks,\r\n        TokenStatus[] memory statuses\r\n    )\r\n    {\r\n        tokenAddresses = new address[](length);\r\n        minAmounts = new uint256[](length);\r\n        emergencyUnlocks = new bool[](length);\r\n        statuses = new TokenStatus[](length);\r\n\r\n        require(start.add(length) <= _tokens.length, \"Lock: Invalid input\");\r\n        require(length > 0 && length <= 15, \"Lock: Invalid length\");\r\n        uint256 count = 0;\r\n        for(uint256 i = start; i < start.add(length); i++) {\r\n            tokenAddresses[count] = _tokens[i].tokenAddress;\r\n            minAmounts[count] = _tokens[i].minAmount;\r\n            emergencyUnlocks[count] = _tokens[i].emergencyUnlock;\r\n            statuses[count] = _tokens[i].status;\r\n            count = count.add(1);\r\n        }\r\n\r\n        return(\r\n            tokenAddresses,\r\n            minAmounts,\r\n            emergencyUnlocks,\r\n            statuses\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Returns information about specific token\r\n    * @dev tokenAddress Address of the token\r\n    */\r\n    function getTokenInfo(address tokenAddress) external view returns(\r\n        uint256 minAmount,\r\n        bool emergencyUnlock,\r\n        TokenStatus status\r\n    )\r\n    {\r\n        uint256 index = _tokenVsIndex[tokenAddress];\r\n\r\n        if(index > 0){\r\n            index = index.sub(1);\r\n            Token memory token = _tokens[index];\r\n            return (\r\n                token.minAmount,\r\n                token.emergencyUnlock,\r\n                token.status\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns information about a locked asset\r\n    * @param id Asset id\r\n    */\r\n    function getLockedAsset(uint256 id) external view returns(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 startDate,\r\n        uint256 endDate,\r\n        address beneficiary,\r\n        Status status\r\n    )\r\n    {\r\n        LockedAsset memory asset = _idVsLockedAsset[id];\r\n        token = asset.token;\r\n        amount = asset.amount;\r\n        startDate = asset.startDate;\r\n        endDate = asset.endDate;\r\n        beneficiary = asset.beneficiary;\r\n        status = asset.status;\r\n\r\n        return(\r\n            token,\r\n            amount,\r\n            startDate,\r\n            endDate,\r\n            beneficiary,\r\n            status\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Returns all asset ids for a user\r\n    * @param user Address of the user\r\n    */\r\n    function getAssetIds(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory ids)\r\n    {\r\n        return _userVsLockIds[user];\r\n    }\r\n\r\n    /**\r\n    * @dev Returns airdrop info for a given token\r\n    * @param token Token address\r\n    */\r\n    function getAirdrops(address token) external view returns(\r\n        address[] memory destTokens,\r\n        uint256[] memory numerators,\r\n        uint256[] memory denominators,\r\n        uint256[] memory dates\r\n    )\r\n    {   \r\n        uint256 length = _baseTokenVsAirdrops[token].length;\r\n\r\n        destTokens = new address[](length);\r\n        numerators = new uint256[](length);\r\n        denominators = new uint256[](length);\r\n        dates = new uint256[](length);\r\n\r\n        //This loop can be very costly if there are very large number of airdrops for a token.\r\n        //Which we presume will not be the case\r\n        for(uint256 i = 0; i < length; i++){\r\n\r\n            Airdrop memory airdrop = _baseTokenVsAirdrops[token][i];\r\n            destTokens[i] = airdrop.destToken;\r\n            numerators[i] = airdrop.numerator;\r\n            denominators[i] = airdrop.denominator;\r\n            dates[i] = airdrop.date;\r\n        }\r\n\r\n        return (\r\n            destTokens,\r\n            numerators,\r\n            denominators,\r\n            dates\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Called by an admin to pause, triggers stopped state.\r\n    */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n    * @dev Called by an admin to unpause, returns to normal state.\r\n    */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to set airdrop token for a given base token\r\n    * @param baseToken Address of the base token\r\n    * @param destToken Address of the airdropped token\r\n    * @param numerator Numerator to calculate ratio\r\n    * @param denominator Denominator to calculate ratio\r\n    * @param date Date at which airdrop happened or will happen\r\n    */\r\n    function setAirdrop(\r\n        address baseToken,\r\n        address destToken,\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 date\r\n    )\r\n        external\r\n        onlyOwner\r\n        tokenExist(baseToken)\r\n    {\r\n        require(destToken != address(0), \"Lock: Invalid destination token!!\");\r\n        require(numerator > 0, \"Lock: Invalid numerator!!\");\r\n        require(denominator > 0, \"Lock: Invalid denominator!!\");\r\n        require(isActive(baseToken), \"Lock: Base token is not active!!\");\r\n\r\n        _baseTokenVsAirdrops[baseToken].push(Airdrop({\r\n            destToken: destToken,\r\n            numerator: numerator,\r\n            denominator: denominator,\r\n            date: date\r\n        }));\r\n\r\n        emit AirdropAdded(\r\n            baseToken,\r\n            destToken,\r\n            date\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to update airdrop at given index\r\n    * @param baseToken Base token address for which airdrop has to be updated\r\n    * @param numerator New numerator\r\n    * @param denominator New denominator\r\n    * @param date New airdrop date\r\n    * @param index Index at which this airdrop resides for the basetoken\r\n    */\r\n    function updateAirdrop(\r\n        address baseToken,\r\n        uint256 numerator,\r\n        uint256 denominator,\r\n        uint256 date,\r\n        uint256 index\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _baseTokenVsAirdrops[baseToken].length > index,\r\n            \"Lock: Invalid index value!!\"\r\n        );\r\n        require(numerator > 0, \"Lock: Invalid numerator!!\");\r\n        require(denominator > 0, \"Lock: Invalid denominator!!\");\r\n\r\n        Airdrop storage airdrop = _baseTokenVsAirdrops[baseToken][index];\r\n        airdrop.numerator = numerator;\r\n        airdrop.denominator = denominator;\r\n        airdrop.date = date;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows admin to set fee\r\n    * @param fee New fee values\r\n    */\r\n    function setFee(uint256 fee) external onlyOwner {\r\n        _fee = fee;\r\n        emit FeeChanged(fee);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to set fee receiver wallet\r\n    * @param wallet New wallet address\r\n    */\r\n    function setWallet(address payable wallet) external onlyOwner {\r\n        require(\r\n            wallet != address(0),\r\n            \"Lock: Please provider valid wallet address!!\"\r\n        );\r\n        _wallet = wallet;\r\n\r\n        emit WalletChanged(wallet);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to update token info\r\n    * @param tokenAddress Address of the token to be updated\r\n    * @param minAmount Min amount of tokens required to lock\r\n    * @param emergencyUnlock If token is in emergency unlock state\r\n    */\r\n    function updateToken(\r\n        address tokenAddress,\r\n        uint256 minAmount,\r\n        bool emergencyUnlock\r\n    )\r\n        external\r\n        onlyOwner\r\n        tokenExist(tokenAddress)\r\n    {\r\n        uint256 index = _tokenVsIndex[tokenAddress].sub(1);\r\n        Token storage token = _tokens[index];\r\n        token.minAmount = minAmount;\r\n        token.emergencyUnlock = emergencyUnlock;\r\n        \r\n        emit TokenUpdated(\r\n            index,\r\n            tokenAddress,\r\n            minAmount,\r\n            emergencyUnlock\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to add new token to the list\r\n    * @param token Address of the token\r\n    * @param minAmount Minimum amount of tokens to lock for this token\r\n    */\r\n    function addToken(\r\n        address token,\r\n        uint256 minAmount\r\n    )\r\n        external\r\n        onlyOwner\r\n        tokenDoesNotExist(token)\r\n    {\r\n        _tokens.push(Token({\r\n            tokenAddress: token,\r\n            minAmount: minAmount,\r\n            emergencyUnlock: false,\r\n            status: TokenStatus.ACTIVE\r\n        }));\r\n        _tokenVsIndex[token] = _tokens.length;\r\n\r\n        emit TokenAdded(token);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows admin to inactivate token\r\n    * @param token Address of the token to be inactivated\r\n    */\r\n    function inactivateToken(\r\n        address token\r\n    )\r\n        external\r\n        onlyOwner\r\n        tokenExist(token)\r\n    {\r\n        uint256 index = _tokenVsIndex[token].sub(1);\r\n\r\n        require(\r\n            _tokens[index].status == TokenStatus.ACTIVE,\r\n            \"Lock: Token already inactive!!\"\r\n        );\r\n\r\n        _tokens[index].status = TokenStatus.INACTIVE;\r\n\r\n        emit TokenInactivated(token);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows admin to activate any existing token\r\n    * @param token Address of the token to be activated\r\n    */\r\n    function activateToken(\r\n        address token\r\n    )\r\n        external\r\n        onlyOwner\r\n        tokenExist(token)\r\n    {\r\n        uint256 index = _tokenVsIndex[token].sub(1);\r\n\r\n        require(\r\n            _tokens[index].status == TokenStatus.INACTIVE,\r\n            \"Lock: Token already active!!\"\r\n        );\r\n\r\n        _tokens[index].status = TokenStatus.ACTIVE;\r\n\r\n        emit TokenActivated(token);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows user to lock asset. In case of ERC-20 token the user will\r\n    * first have to approve the contract to spend on his/her behalf\r\n    * @param tokenAddress Address of the token to be locked\r\n    * @param amount Amount of tokens to lock\r\n    * @param duration Duration for which tokens to be locked. In seconds\r\n    * @param beneficiary Address of the beneficiary\r\n    */\r\n    function lock(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 duration,\r\n        address payable beneficiary\r\n    )\r\n        external\r\n        payable\r\n        whenNotPaused\r\n        canLockAsset(tokenAddress)\r\n    {\r\n        require(\r\n            beneficiary != address(0),\r\n            \"Lock: Provide valid beneficiary address!!\"\r\n        );\r\n\r\n        Token memory token = _tokens[_tokenVsIndex[tokenAddress].sub(1)];\r\n\r\n        require(\r\n            amount >= token.minAmount,\r\n            \"Lock: Please provide minimum amount of tokens!!\"\r\n        );\r\n\r\n        uint256 endDate = block.timestamp.add(duration);\r\n        uint256 fee = amount.mul(_fee).div(10000);\r\n        uint256 newAmount = amount.sub(fee);\r\n\r\n        if(ETH_ADDRESS == tokenAddress) {\r\n            _lockETH(\r\n                newAmount,\r\n                fee,\r\n                endDate,\r\n                beneficiary\r\n            );\r\n        }\r\n\r\n        else {\r\n            _lockERC20(\r\n                tokenAddress,\r\n                newAmount,\r\n                fee,\r\n                endDate,\r\n                beneficiary\r\n            );\r\n        }\r\n\r\n        emit AssetLocked(\r\n            tokenAddress,\r\n            msg.sender,\r\n            beneficiary,\r\n            _lockId,\r\n            newAmount,\r\n            block.timestamp,\r\n            endDate\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Allows beneficiary of locked asset to claim asset after lock-up period ends\r\n    * @param id Id of the locked asset\r\n    */\r\n    function claim(uint256 id) external canClaim(id) {\r\n        LockedAsset memory lockedAsset = _idVsLockedAsset[id];\r\n        if(ETH_ADDRESS == lockedAsset.token) {\r\n            _claimETH(\r\n                id\r\n            );\r\n        }\r\n\r\n        else {\r\n            _claimERC20(\r\n                id\r\n            );\r\n        }\r\n\r\n        emit AssetClaimed(\r\n            id,\r\n            lockedAsset.beneficiary,\r\n            lockedAsset.token\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether given asset can be claimed or not\r\n    * @param id id of an asset\r\n    */\r\n    function claimable(uint256 id) public view returns(bool){\r\n\r\n        if(\r\n            _idVsLockedAsset[id].status == Status.OPEN &&\r\n            (\r\n                _idVsLockedAsset[id].endDate <= block.timestamp ||\r\n                _tokens[_tokenVsIndex[_idVsLockedAsset[id].token].sub(1)].emergencyUnlock\r\n            )\r\n        )\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether provided token is active or not\r\n    * @param token Address of the token to be checked\r\n    */\r\n    function isActive(address token) public view returns(bool) {\r\n        uint256 index = _tokenVsIndex[token];\r\n\r\n        if(index > 0){\r\n            return (_tokens[index.sub(1)].status == TokenStatus.ACTIVE);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to lock ETH\r\n    */\r\n    function _lockETH(\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 endDate,\r\n        address payable beneficiary\r\n    )\r\n        private\r\n    {\r\n\r\n        //Transferring fee to the wallet\r\n        (bool success,) = _wallet.call.value(fee)(\"\");\r\n        require(success, \"Lock: Transfer of fee failed\");\r\n\r\n        _lockId = _lockId.add(1);\r\n\r\n        _idVsLockedAsset[_lockId] = LockedAsset({\r\n            token: ETH_ADDRESS,\r\n            amount: amount,\r\n            startDate: block.timestamp,\r\n            endDate: endDate,\r\n            beneficiary: beneficiary,\r\n            status: Status.OPEN\r\n        });\r\n        _userVsLockIds[beneficiary].push(_lockId);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to lock ERC-20 tokens\r\n    */\r\n    function _lockERC20(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 endDate,\r\n        address payable beneficiary\r\n    )\r\n        private\r\n    {\r\n\r\n        //Transfer fee to the wallet\r\n        IERC20(token).safeTransferFrom(msg.sender, _wallet, fee);\r\n\r\n        //Transfer required amount of tokens to the contract from user balance\r\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _lockId = _lockId.add(1);\r\n\r\n        _idVsLockedAsset[_lockId] = LockedAsset({\r\n            token: token,\r\n            amount: amount,\r\n            startDate: block.timestamp,\r\n            endDate: endDate,\r\n            beneficiary: beneficiary,\r\n            status: Status.OPEN\r\n        });\r\n        _userVsLockIds[beneficiary].push(_lockId);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to claim ETH\r\n    */\r\n    function _claimETH(uint256 id) private {\r\n        LockedAsset storage asset = _idVsLockedAsset[id];\r\n        asset.status = Status.CLOSED;\r\n        (bool success,) = msg.sender.call.value(asset.amount)(\"\");\r\n        require(success, \"Lock: Failed to transfer eth!!\");\r\n\r\n        _claimAirdroppedTokens(\r\n            asset.token,\r\n            asset.startDate,\r\n            asset.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to claim ERC-20\r\n    */\r\n    function _claimERC20(uint256 id) private {\r\n        LockedAsset storage asset = _idVsLockedAsset[id];\r\n        asset.status = Status.CLOSED;\r\n        IERC20(asset.token).safeTransfer(msg.sender, asset.amount);\r\n        _claimAirdroppedTokens(\r\n            asset.token,\r\n            asset.startDate,\r\n            asset.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to claim airdropped tokens\r\n    * @param baseToken Base Token address\r\n    * @param lockDate Date when base tokens were locked\r\n    * @param amount Amount of base tokens locked\r\n    */\r\n    function _claimAirdroppedTokens(\r\n        address baseToken,\r\n        uint256 lockDate,\r\n        uint256 amount\r\n    )\r\n        private\r\n    {\r\n        //This loop can be very costly if number of airdropped tokens\r\n        //for base token is very large. But we assume that it is not going to be the case\r\n        for(uint256 i = 0; i < _baseTokenVsAirdrops[baseToken].length; i++) {\r\n\r\n            Airdrop memory airdrop = _baseTokenVsAirdrops[baseToken][i];\r\n\r\n            if(airdrop.date < lockDate || airdrop.date > block.timestamp) {\r\n                return;\r\n            }\r\n            else {\r\n                uint256 airdropAmount = amount.mul(airdrop.numerator).div(airdrop.denominator);\r\n                IERC20(airdrop.destToken).safeTransfer(msg.sender, airdropAmount);\r\n                emit TokensAirdropped(airdrop.destToken, airdropAmount);\r\n            }\r\n        }\r\n\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmount\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airdropDate\",\"type\":\"uint256\"}],\"name\":\"AirdropAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AssetClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"AssetLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenInactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergencyUnlock\",\"type\":\"bool\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAirdrops\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"destTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numerators\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"denominators\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAssetIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLockedAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"enum Lock.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergencyUnlock\",\"type\":\"bool\"},{\"internalType\":\"enum Lock.TokenStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"emergencyUnlocks\",\"type\":\"bool[]\"},{\"internalType\":\"enum Lock.TokenStatus[]\",\"name\":\"statuses\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"inactivateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"setAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"updateAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergencyUnlock\",\"type\":\"bool\"}],\"name\":\"updateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Lock","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000284f214df3f85526a910979f52c96e54fb228136000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000960b236a07cf122663c4303350609a66a7b288c00000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000f0ee6b27b759c9893ce4f094b49ad28fd15a23e4000000000000000000000000b8c77482e45f1f44de1745f52c74426c631bdd52000000000000000000000000e94327d07fc17907b4db788e5adf2ed424addff60000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000058d15e17628000000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000015af1d78b58c4000000000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000003b9aca00","Library":"","LicenseType":"None","SwarmSource":"bzzr://56c27d87f1a1d97209238eecec08484027f09171176bd0661f79ca0103589462"}]}