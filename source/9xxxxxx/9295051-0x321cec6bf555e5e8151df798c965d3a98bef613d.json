{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.5.0 < 0.6.0;\r\n\r\ncontract  niguezRandomityEngine {\r\n\r\n  function ra() external view returns (uint256);\r\n\tfunction rb() external view returns (uint256);\r\n\tfunction rc() external view returns (uint256);\r\n\tfunction rd() external view returns (uint256);\r\n\tfunction re() external view returns (uint256);\r\n\tfunction rf() external view returns (uint256);\r\n\tfunction rg() external view returns (uint256);\r\n\tfunction rh() external view returns (uint256);\r\n\tfunction ri() external view returns (uint256);\r\n\tfunction rj() external view returns (uint256);\r\n\tfunction rk() external view returns (uint256);\r\n\tfunction rl() external view returns (uint256);\r\n\tfunction rm() external view returns (uint256);\r\n\tfunction rn() external view returns (uint256);\r\n\tfunction ro() external view returns (uint256);\r\n\tfunction rp() external view returns (uint256);\r\n\tfunction rq() external view returns (uint256);\r\n\tfunction rr() external view returns (uint256);\r\n\tfunction rs() external view returns (uint256);\r\n\tfunction rt() external view returns (uint256);\r\n\tfunction ru() external view returns (uint256);\r\n\tfunction rv() external view returns (uint256);\r\n\tfunction rw() external view returns (uint256);\r\n\tfunction rx() external view returns (uint256);\r\n}\r\n\r\ncontract usingNRE {\r\n\r\n    niguezRandomityEngine internal nre = niguezRandomityEngine(0x031eaE8a8105217ab64359D4361022d0947f4572);\r\n    \r\n    function ra() internal view returns (uint256) {\r\n        return nre.ra();\r\n    }\r\n\t\r\n\tfunction rb() internal view returns (uint256) {\r\n        return nre.rb();\r\n    }\r\n\t\r\n\tfunction rc() internal view returns (uint256) {\r\n        return nre.rc();\r\n    }\r\n\t\r\n\tfunction rd() internal view returns (uint256) {\r\n        return nre.rd();\r\n    }\r\n\t\r\n\tfunction re() internal view returns (uint256) {\r\n        return nre.re();\r\n    }\r\n\t\r\n\tfunction rf() internal view returns (uint256) {\r\n        return nre.rf();\r\n    }\r\n\t\r\n\tfunction rg() internal view returns (uint256) {\r\n        return nre.rg();\r\n    }\r\n\t\r\n\tfunction rh() internal view returns (uint256) {\r\n        return nre.rh();\r\n    }\r\n\t\r\n\tfunction ri() internal view returns (uint256) {\r\n        return nre.ri();\r\n    }\r\n\t\r\n\tfunction rj() internal view returns (uint256) {\r\n        return nre.rj();\r\n    }\r\n\t\r\n\tfunction rk() internal view returns (uint256) {\r\n        return nre.rk();\r\n    }\r\n\t\r\n\tfunction rl() internal view returns (uint256) {\r\n        return nre.rl();\r\n    }\r\n\t\r\n\tfunction rm() internal view returns (uint256) {\r\n        return nre.rm();\r\n    }\r\n\t\r\n\tfunction rn() internal view returns (uint256) {\r\n        return nre.rn();\r\n    }\r\n\t\r\n\tfunction ro() internal view returns (uint256) {\r\n        return nre.ro();\r\n    }\r\n\t\r\n\tfunction rp() internal view returns (uint256) {\r\n        return nre.rp();\r\n    }\r\n\t\r\n\tfunction rq() internal view returns (uint256) {\r\n        return nre.rq();\r\n    }\r\n\t\r\n\tfunction rr() internal view returns (uint256) {\r\n        return nre.rr();\r\n    }\r\n\t\r\n\tfunction rs() internal view returns (uint256) {\r\n        return nre.rs();\r\n    }\r\n\t\r\n\tfunction rt() internal view returns (uint256) {\r\n        return nre.rt();\r\n    }\r\n\t\r\n\tfunction ru() internal view returns (uint256) {\r\n        return nre.ru();\r\n    }\r\n\t\r\n\tfunction rv() internal view returns (uint256) {\r\n        return nre.rv();\r\n    }\r\n\t\r\n\tfunction rw() internal view returns (uint256) {\r\n        return nre.rw();\r\n    }\r\n\t\r\n\tfunction rx() internal view returns (uint256) {\r\n        return nre.rx();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract LuckyNumbers is usingNRE {\r\n    \r\n    address _hex = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\r\n    address _dev = 0xDcD44e713bdc830B72e9F90df96aF97Ee6CA64fb;\r\n    uint _hexDecimal = 100000000;\r\n    \r\n    mapping(address => uint) public unclaimedPrizes;\r\n    \r\n    // the prize pool in HEX\r\n    uint public pot = 0;\r\n    uint nextRound = 0;\r\n    uint constant public cost = 10000;\r\n    uint public luckyNumber;\r\n    uint public max = 1000;\r\n    uint _devBalance = 0;\r\n    bool gamesStarted = false;\r\n    uint8 random = 0;\r\n    \r\n    event NewTry(\r\n        address participant,\r\n        uint luckyNumber,\r\n        uint timestamp\r\n    );\r\n    \r\n    event PotWon(\r\n        address winner,\r\n        uint amount,\r\n        uint timestamp\r\n    );\r\n    \r\n    event jackpotClaimed(\r\n        address winner,\r\n        uint amount,\r\n        uint timestamp\r\n    );\r\n    \r\n    constructor(uint __luckyNumber, uint __max) public  {\r\n        require(luckyNumber <= __max);\r\n        require(__max > 0);\r\n        max = __max;\r\n        luckyNumber = __luckyNumber;\r\n        \r\n        //Random number using niguezrandomityengine \r\n        uint x = (((rf()%10)*100)+((rx()%10)*10)+(rm()%10)+(rg()%10));\r\n        // random number between 0 and 24\r\n        uint z = uint(keccak256(abi.encodePacked(x, rb(), msg.sender, now)));\r\n        random = uint8(z % 24);\r\n    }\r\n    \r\n    function getRand(uint8 pos) private view returns (uint256 r) {\r\n        require(pos <= 23);\r\n        if (pos == 0) return ra();\r\n        if (pos == 1) return rb();\r\n        if (pos == 2) return rc();\r\n        if (pos == 3) return rd();\r\n        if (pos == 4) return re();\r\n        if (pos == 5) return rf();\r\n        if (pos == 6) return rg();\r\n        if (pos == 7) return rh();\r\n        if (pos == 8) return ri();\r\n        if (pos == 9) return rj();\r\n        if (pos == 10) return rk();\r\n        if (pos == 11) return rl();\r\n        if (pos == 12) return rm();\r\n        if (pos == 13) return rn();\r\n        if (pos == 14) return ro();\r\n        if (pos == 15) return rp();\r\n        if (pos == 16) return rq();\r\n        if (pos == 17) return rr();\r\n        if (pos == 18) return rs();\r\n        if (pos == 19) return rt();\r\n        if (pos == 20) return ru();\r\n        if (pos == 21) return rv();\r\n        if (pos == 22) return rw();\r\n        if (pos == 23) return rx();\r\n    }\r\n    \r\n    bool locked = false;\r\n    bool potWon = false;\r\n    uint lastNumber = 0;\r\n    \r\n    function tryWin() public payable {\r\n\r\n        //need to at least have enough HEX\r\n        require(ERC20(_hex).balanceOf(msg.sender) >= (cost * _hexDecimal), \"you don't have enough HEX\");\r\n        \r\n        //need to be approved to take the tokens from sender\r\n        require(ERC20(_hex).allowance(msg.sender, address(this)) >= (cost * _hexDecimal), \"you have not approved enough HEX\");\r\n        \r\n        //game must be started\r\n        require(gamesStarted == true, \"Game has not started Yet\");\r\n        \r\n        //must not be locked.\r\n        require(!locked);\r\n        \r\n        //pot must not already be Won\r\n        require(!potWon);\r\n        \r\n        // must be from the origin\r\n        require(msg.sender == tx.origin);\r\n        \r\n        locked = true;\r\n        \r\n         //take fee\r\n        uint fee = 1000;\r\n        _devBalance = SafeMath.add(_devBalance, fee);\r\n        \r\n        // add to pot\r\n        uint costsubFee = SafeMath.sub(cost, fee);\r\n        uint third = SafeMath.div(costsubFee, 3);\r\n        pot = SafeMath.add(pot, third);\r\n        nextRound = SafeMath.add(nextRound, SafeMath.mul(third, 2));\r\n        \r\n        //Random number using niguezrandomityengine \r\n        uint x = SafeMath.add(SafeMath.add(SafeMath.mul((rf()%10),100),((rx()%10)*10)),(rm()%10));\r\n        uint z = uint(keccak256(abi.encodePacked(x, now, getRand(random), msg.sender)));\r\n        uint y = z % SafeMath.add(max, 1);\r\n        random = uint8(z % 24);\r\n        require(y != lastNumber);\r\n        lastNumber = y;\r\n        \r\n        // was it the lucky Number??\r\n        if (y == luckyNumber) {\r\n            potWon = true;\r\n            \r\n            // winner\r\n            uint currentWinnings = 0;\r\n            if (unclaimedPrizes[msg.sender] > 0) currentWinnings = unclaimedPrizes[msg.sender];\r\n            unclaimedPrizes[msg.sender] = SafeMath.add(pot, currentWinnings);\r\n        }\r\n        \r\n        // transfer\r\n        bool transfer = ERC20(_hex).transferFrom(msg.sender, address(this), SafeMath.mul(cost, _hexDecimal));\r\n        require(transfer);\r\n        \r\n        // fire event: New entry\r\n        emit NewTry(msg.sender, y, now);\r\n        // Fire event: Pot Won!\r\n        if (potWon) {\r\n            emit PotWon(msg.sender, pot, now);\r\n            // Reset the pot\r\n            uint halfOfNextPot = SafeMath.div(nextRound, 2);\r\n            pot = halfOfNextPot;\r\n            nextRound = halfOfNextPot;\r\n            potWon = false;\r\n        }\r\n        locked = false;\r\n    }\r\n    \r\n    function claim() public payable {\r\n        require(unclaimedPrizes[msg.sender] > 0);\r\n        require(ERC20(_hex).balanceOf(address(this)) >= unclaimedPrizes[msg.sender]);\r\n        \r\n        uint prizeHex = unclaimedPrizes[msg.sender];\r\n        // Fire event: A jackpot was claimed!\r\n        emit jackpotClaimed(msg.sender, prizeHex, now);\r\n        unclaimedPrizes[msg.sender] = 0;\r\n        ERC20(_hex).transfer(msg.sender, SafeMath.mul(prizeHex, _hexDecimal));\r\n    }\r\n    \r\n    function flushDevFees() public payable {\r\n        require(_devBalance > 0);\r\n        require(ERC20(_hex).balanceOf(address(this)) >= _devBalance);\r\n        \r\n        uint toTransfer = SafeMath.mul(_devBalance, _hexDecimal);\r\n        _devBalance = 0;\r\n        ERC20(_hex).transfer(_dev, toTransfer);\r\n    }\r\n    \r\n    function start(uint lcPot, uint lcNextRound) public {\r\n        require(msg.sender == _dev, \"Only the dev can start the game\");\r\n        require(!gamesStarted, \"Game is already started!\");\r\n        \r\n        gamesStarted = true;\r\n        pot = lcPot;\r\n        nextRound = lcNextRound;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__luckyNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"luckyNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewTry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PotWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"jackpotClaimed\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"flushDevFees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lcPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lcNextRound\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tryWin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimedPrizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LuckyNumbers","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000037800000000000000000000000000000000000000000000000000000000000003e8","Library":"","LicenseType":"None","SwarmSource":"bzzr://ae2545920e1ff70353ff51e16a73fd5647f32a5738f1ab6b70ea7205bb594f5f"}]}