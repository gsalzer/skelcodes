{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/interfaces/IAffiliateProgram.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IAffiliateProgram {\r\n    function addUserUseCode(address user, string calldata code) external;\r\n    function getPartnerFromUser(address user) external view returns (address, uint8, uint256, uint256);\r\n    function levels(uint8 level) external view returns (uint16, uint256);\r\n    function addPartnerProfitUseAddress(address partner) external payable;\r\n}\r\n// File: localhost/interfaces/ILoanPool.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ninterface ILoanPool {\r\n    function loan(uint _amount) external;\r\n}\r\n// File: localhost/interfaces/IPep.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IPep {\r\n    function peek() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n}\r\n// File: localhost/interfaces/ITub.sol\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ninterface ITub {\r\n    function open() external returns (bytes32);\r\n    function join(uint) external;\r\n    function exit(uint) external;\r\n    function lock(bytes32, uint) external;\r\n    function free(bytes32, uint) external;\r\n    function draw(bytes32, uint) external;\r\n    function wipe(bytes32, uint) external;\r\n    function give(bytes32, address) external;\r\n    function shut(bytes32) external;\r\n    function cups(bytes32) external view returns (address, uint, uint, uint);\r\n    function gem() external view returns (IToken);\r\n    function gov() external view returns (IToken);\r\n    function skr() external view returns (IToken);\r\n    function sai() external view returns (IToken);\r\n    function mat() external view returns (uint);\r\n    function ink(bytes32) external view returns (uint);\r\n    function tab(bytes32) external returns (uint);\r\n    function rap(bytes32) external returns (uint);\r\n    function per() external view returns (uint);\r\n    function pep() external view returns (IPep);\r\n    function pip() external view returns (IPep);\r\n    function ask(uint wad) external view returns (uint);\r\n}\r\n// File: localhost/interfaces/IOneInchExchange.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IOneInchExchange {\r\n    function spender() external view returns (address);\r\n}\r\n// File: localhost/interfaces/IDfFinanceMgr.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IDfFinanceMgr {\r\n    function setupCup(address cdpOwner, bytes32 cup, uint256 deposit, uint8 profitPercent, uint256 etherPrice, uint8 feeForBonusEther) external;\r\n}\r\n// File: localhost/utils/DSMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\r\n        z = add(mul(x, y), base / 2) / base;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }*/\r\n}\r\n// File: localhost/interfaces/IToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IToken {\r\n    function decimals() external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function approve(address spender, uint value) external;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint amount) external;\r\n}\r\n// File: localhost/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: localhost/utils/SafeERC20.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IToken token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IToken token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IToken token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: localhost/utils/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: localhost/utils/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IToken;\r\n\r\n    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\r\n    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(IToken token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n// File: localhost/nonupgradable/Ownable.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    address payable internal newOwnerCandidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n\r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n}\r\n// File: localhost/nonupgradable/FundsMgr.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract FundsMgr is Ownable {\r\n    using UniversalERC20 for IToken;\r\n\r\n    function withdraw(address token, uint256 amount) onlyOwner public  {\r\n        require(msg.sender == owner);\r\n\r\n        if (token == address(0x0)) {\r\n            owner.transfer(amount);\r\n        } else {\r\n            IToken(token).universalTransfer(owner, amount);\r\n        }\r\n    }\r\n    function withdrawAll(address[] memory tokens) onlyOwner public  {\r\n        for(uint256 i = 0; i < tokens.length;i++) {\r\n            withdraw(tokens[i], IToken(tokens[i]).universalBalanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n// File: localhost/DfFinanceMgr.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n// **INTERFACES**\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DfFinanceMgr is FundsMgr, DSMath  {\r\n    using UniversalERC20 for IToken;\r\n\r\n    struct CupInfo {\r\n        uint256 deposit;\r\n        uint256 etherPrice;\r\n\r\n        uint8 profitPercent; // in ether\r\n        uint8 feeForBonusEther;\r\n\r\n        uint256 etherForRepayLoan;\r\n        uint256 usdToWithdraw;\r\n    }\r\n\r\n\r\n    IAffiliateProgram public aff;\r\n\r\n    // Fees\r\n    uint8 public earlyCloseFee;\r\n    uint256 public dateUntilFees;\r\n\r\n    mapping(address => bool) public admins;\r\n    mapping(address => bool) public cupManagers;\r\n\r\n    IDfFinanceMgr public migrateToNewContract;\r\n\r\n    IToken public usdToken;\r\n\r\n    ILoanPool public loanPool;\r\n\r\n    mapping(bytes32 => bool) public ownedCups;\r\n\r\n    mapping(address => mapping(bytes32 => CupInfo)) internal cups;\r\n    uint256 internal minMKRPrice;\r\n\r\n\r\n    IToken internal constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    ITub internal constant tub = ITub(0x448a5065aeBB8E423F0896E6c5D525C040f59af3);\r\n\r\n\r\n    // **EVENTS**\r\n    event StrategyClosing(bytes32 cup, uint256 profit, address token);\r\n    event StrategyClosed(bytes32 cup, uint256 profit, address token);\r\n    event SetupCup(address, bytes32, uint256, uint8, uint256, uint8);\r\n\r\n    event SystemProfit(uint256 profit);\r\n\r\n\r\n    // **MODIFIERS**\r\n    modifier hasSetupCupPermission {\r\n        require(cupManagers[msg.sender], \"Setup cup permission denied\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        usdToken = IToken(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\r\n        minMKRPrice = 500 * 10**18;\r\n\r\n        if (tub.sai().allowance(address(this), address(tub)) != uint256(-1)) { // OPTIMIZE\r\n            tub.sai().approve(address(tub), uint256(-1));\r\n        }\r\n        if (tub.gov().allowance(address(this), address(tub)) != uint256(-1)) { // OPTIMIZE\r\n            tub.gov().approve(address(tub), uint256(-1));\r\n        }\r\n\r\n        if (tub.skr().allowance(address(this), address(tub)) != uint256(-1)) { // OPTIMIZE\r\n            tub.skr().approve(address(tub), uint256(-1));\r\n        }\r\n\r\n        // added cupManagers: prev DfFinanceMgr contracts and DfFinanceMgrOpenCdp\r\n        cupManagers[0xD757EBb746167495716Ef3f11942c429203DBB75] = true;\r\n        cupManagers[0x0E679aC20BE465766e3ae681cE828a37642A83d5] = true;\r\n        cupManagers[0x061956a73F00B1392213dBEdfA61bE6eA63Da2FC] = true;\r\n        cupManagers[0x735ba150d6A842B1feE3737F023fDdF781CfEaA0] = true;\r\n    }\r\n\r\n\r\n    // **PUBLIC VIEW functions**\r\n    function calcEthFromAmountAndPrice(uint256 amountUsdToBuy, uint256 usdPrice) public view returns (uint256) {\r\n        return wmul(amountUsdToBuy, usdPrice, 10**usdToken.decimals()) * WAD / 10**usdToken.decimals();\r\n    }\r\n\r\n    function priceETH() public view returns(uint256) {\r\n        return uint256(IPep(ITub(tub).pip()).read());\r\n    }\r\n\r\n    function getMKRPrice() public view returns(uint256) {\r\n        return minMKRPrice;\r\n    }\r\n\r\n    function getCupInfo(address cdpOwner, bytes32 cup) public view returns(\r\n        uint256 deposit,\r\n        uint8 profitPercent,\r\n        uint256 etherPrice,\r\n        uint8 feeForBonusEther,\r\n        uint256 etherForRepayLoan,\r\n        uint256 usdToWithdraw)\r\n    {\r\n        deposit = cups[cdpOwner][cup].deposit;\r\n        profitPercent = cups[cdpOwner][cup].profitPercent;\r\n        etherPrice = cups[cdpOwner][cup].etherPrice;\r\n        feeForBonusEther = cups[cdpOwner][cup].feeForBonusEther;\r\n        etherForRepayLoan = cups[cdpOwner][cup].etherForRepayLoan;\r\n        usdToWithdraw = cups[cdpOwner][cup].usdToWithdraw;\r\n    }\r\n\r\n    function caluclateAmountSaiFromEth(uint256 wad, uint256 rate) public view returns(uint256) {\r\n        uint256 price = priceETH();\r\n        return wmul(wmul(wdiv(wad, tub.ask(wad)), wad), price) * 100 / rate;\r\n    }\r\n\r\n    function totalDeb(bytes32 cup) public view returns(uint256) {\r\n        return rmul(tub.ink(cup), tub.per());\r\n    }\r\n\r\n\r\n    // **PUBLIC functions**\r\n    function collectSaiAndUsdForOpenDeals(address[] memory userAddresses, bytes32[] memory cupsList, uint256 amountSaiToBuy, uint256 saiPrice, uint256 amountUsdToBuy, uint256 usdPrice, bytes memory _saiData, bytes memory _usdData, uint8 useExternalExchange) public {\r\n        uint16 len = uint16(userAddresses.length);\r\n        require(len == cupsList.length);\r\n        require(admins[msg.sender] || msg.sender == owner);\r\n\r\n        uint256 totalCredit = wmul(amountSaiToBuy, saiPrice) + calcEthFromAmountAndPrice(amountUsdToBuy, usdPrice);\r\n\r\n        if (useExternalExchange == 0)\r\n        {\r\n            // creditAddress.showmethemoney( totalCredit );\r\n\r\n            // take an totalCredit eth loan\r\n            loanPool.loan(totalCredit);\r\n\r\n            exchange(ETH_ADDRESS, wmul(amountSaiToBuy, saiPrice), tub.sai(), amountSaiToBuy, _saiData);\r\n            if (amountUsdToBuy > 0) exchange(ETH_ADDRESS, calcEthFromAmountAndPrice(amountUsdToBuy, usdPrice), usdToken, amountUsdToBuy, _usdData);\r\n        }\r\n\r\n        for(uint16 i = 0; i < len;i++) {\r\n            bytes32 cupId = cupsList[i];\r\n            CupInfo storage cup = cups[userAddresses[i]][cupId];\r\n            require(cup.etherForRepayLoan == 0 && cup.deposit > 0);\r\n\r\n            uint256 jam = totalDeb(cupId);\r\n\r\n            uint256 etherForRepayLoan = calcCreditInEther(cupId, saiPrice);\r\n\r\n\r\n            // check has profit\r\n            if (amountUsdToBuy > 0) { // in USD\r\n                uint256 usdToWithdraw = calcUsdToWithdraw(cup, jam, usdPrice, etherForRepayLoan);\r\n                totalCredit = totalCredit < jam ? 0 : totalCredit - jam;\r\n                emit StrategyClosing(cupId, usdToWithdraw, address(usdToken));\r\n                cup.usdToWithdraw = usdToWithdraw;\r\n            } else { //in ETH\r\n                // uint256 profitETH = sub(sub(jam, cup.deposit), etherForRepayLoan)  * (100 - cup.feeForBonusEther) / 100;\r\n                // require((profitETH * 10000 / cup.deposit) > cup.profitPercent * 100);\r\n                emit StrategyClosing(cupId, cup.deposit + calcProfitETH(cup, jam ,etherForRepayLoan), address(0x0));\r\n                totalCredit = totalCredit < etherForRepayLoan ? 0 : totalCredit - etherForRepayLoan;\r\n            }\r\n\r\n            cup.etherForRepayLoan = etherForRepayLoan;\r\n        }\r\n\r\n        require(totalCredit == 0);\r\n\r\n        // if (address(this).balance > 0) address(uint160(address(creditAddress))).transfer(address(this).balance);\r\n    }\r\n\r\n    // test!\r\n    function exitAfterLiquidation(address userAddress, bytes32 cup) public {\r\n        CupInfo memory cupInfo = cups[userAddress][cup];\r\n\r\n        require(cupInfo.deposit > 0);\r\n\r\n        uint256 jam = totalDeb(cup);\r\n\r\n        uint256 wad = tub.tab(cup);\r\n\r\n        require(wad == 0 && jam < cupInfo.deposit);\r\n\r\n        uint ink = rdiv(jam, tub.per());\r\n        ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\r\n\r\n        tub.free(cup, ink);\r\n\r\n        tub.exit(ink);\r\n\r\n        tub.shut(cup);\r\n\r\n        tub.gem().withdraw(jam);\r\n\r\n        address(uint160(address(userAddress))).transfer(jam);\r\n    }\r\n\r\n    function closeStrategies(address[] memory userAddresses, bytes32[] memory cupsList) public {\r\n        uint16 len = uint16(userAddresses.length);\r\n        require(len == cupsList.length);\r\n        for(uint16 i = 0; i < len;i++) closeStrategy(userAddresses[i], cupsList[i]);\r\n    }\r\n\r\n    function closeStrategy(address userAddress, bytes32 cup) public {\r\n        CupInfo memory cupInfo = cups[userAddress][cup];\r\n\r\n        require(cupInfo.deposit > 0 && cupInfo.etherForRepayLoan > 0);\r\n\r\n        uint256 jam = totalDeb(cup);\r\n\r\n        uint256 wad = tub.tab(cup);\r\n\r\n        tub.wipe(cup, wad); // repay sai & mkr\r\n\r\n        uint ink = rdiv(jam, tub.per());\r\n        ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\r\n\r\n        tub.free(cup, ink);\r\n\r\n        tub.exit(ink);\r\n\r\n        tub.shut(cup);\r\n\r\n        require(jam > cupInfo.etherForRepayLoan);\r\n\r\n        tub.gem().withdraw(jam);\r\n\r\n        uint256 systemProfit = sub(sub(jam, cupInfo.deposit), cupInfo.etherForRepayLoan)  * (cupInfo.feeForBonusEther) / 100;\r\n\r\n        jam = sub(jam, affiliateProcess(userAddress, systemProfit));\r\n\r\n        if (cupInfo.usdToWithdraw > 0) {\r\n            // address(uint160(address(creditAddress))).transfer(jam);\r\n            transferEthInternal(address(loanPool), jam);\r\n\r\n            usdToken.universalTransfer(userAddress, cupInfo.usdToWithdraw);\r\n            emit StrategyClosed(cup, cupInfo.usdToWithdraw, address(usdToken));\r\n        } else {\r\n            // address(uint160(address(creditAddress))).transfer(cupInfo.etherForRepayLoan);\r\n            transferEthInternal(address(loanPool), cupInfo.etherForRepayLoan);\r\n\r\n            uint256 profitETH = calcProfitETH(cupInfo, jam, cupInfo.etherForRepayLoan);\r\n            address(uint160(address(userAddress))).transfer(add(cupInfo.deposit, profitETH));\r\n            emit StrategyClosed(cup, cupInfo.deposit + profitETH, address(0x0));\r\n        }\r\n    }\r\n\r\n    function migrate(bytes32[] memory cups_to_migrate) public {\r\n        require(migrateToNewContract != IDfFinanceMgr(0x0));\r\n\r\n        for(uint256 i = 0; i < cups_to_migrate.length; i++) {\r\n            CupInfo memory info = cups[msg.sender][cups_to_migrate[i]];\r\n            require(info.deposit > 0 && info.etherForRepayLoan == 0);\r\n\r\n            migrateToNewContract.setupCup(msg.sender, cups_to_migrate[i], info.deposit, info.profitPercent, info.etherPrice, info.feeForBonusEther);\r\n\r\n            tub.give(cups_to_migrate[i], address(migrateToNewContract));\r\n\r\n            cups[msg.sender][cups_to_migrate[i]] = CupInfo(0,0,0,0,0,0);\r\n            ownedCups[cups_to_migrate[i]] = false;\r\n        }\r\n    }\r\n\r\n    function calc(bytes32 cup) public returns(uint256 saiGovAmt, uint256 govAmt, uint256 wad) {\r\n        wad = tub.tab(cup);\r\n        uint256 fee = feeSai(wad, cup);\r\n        bytes32 val;\r\n        bool ok;\r\n        (val, ok) = tub.pep().peek();\r\n        if (ok && val != 0) {\r\n            govAmt = wdiv(fee, uint256(val));\r\n            if (uint256(val) < minMKRPrice)\r\n            {\r\n                saiGovAmt = wmul(govAmt, minMKRPrice); // we can change market price too high ?\r\n            } else {\r\n                saiGovAmt = fee; // market price ?\r\n            }\r\n        } else {\r\n            assert(false);\r\n        }\r\n    }\r\n\r\n    function setupCup(address cdpOwner, bytes32 cup, uint256 deposit, uint8 profitPercent, uint256 etherPrice, uint8 feeForBonusEther) public hasSetupCupPermission {\r\n        require(cups[cdpOwner][cup].deposit == 0);\r\n        require(!ownedCups[cup]);\r\n\r\n        cups[cdpOwner][cup] = CupInfo(deposit, etherPrice, profitPercent, feeForBonusEther, 0, 0);\r\n        ownedCups[cup] = true;\r\n\r\n        emit SetupCup(cdpOwner, cup, deposit, profitPercent, etherPrice, feeForBonusEther);\r\n    }\r\n\r\n\r\n    // **PUBLIC PAYABLE functions**\r\n    function lockEther(bytes32 cup) public payable {\r\n        require(cups[msg.sender][cup].deposit > 0);\r\n        // обновлять структуру (сколько задепозичено)\r\n\r\n        cups[msg.sender][cup].deposit += msg.value;\r\n        // correct ether price ?\r\n\r\n        tub.gem().deposit.value(msg.value)();\r\n\r\n        uint ink = rdiv(msg.value, tub.per());\r\n        ink = rmul(ink, tub.per()) <= msg.value ? ink : ink - 1;\r\n\r\n        if (tub.gem().allowance(address(this), address(tub)) != uint(-1)) {\r\n            tub.gem().approve(address(tub), uint(-1));\r\n        }\r\n        tub.join(ink);\r\n\r\n        if (tub.skr().allowance(address(this), address(tub)) != uint(-1)) {\r\n            tub.skr().approve(address(tub), uint(-1));\r\n        }\r\n        tub.lock(cup, ink);\r\n    }\r\n\r\n    function wipeAndCloseProfitOnly(bytes32 cup, address payable cdpOwner, uint256 etherNeeded, bytes memory _saiData, bytes memory _usdData, uint256 minAmountAllowed) public payable returns(uint256 extraProfitInEther) {\r\n        require(admins[msg.sender]);\r\n\r\n        bool hasProfit;\r\n        (hasProfit, extraProfitInEther) = wipeAndClose(cup, cdpOwner, etherNeeded, _saiData, _usdData, minAmountAllowed);\r\n\r\n        require(hasProfit); // can close only if user has profit\r\n    }\r\n\r\n    function userWipeAndClose(bytes32 cup,uint256 etherNeeded, bytes memory _saiData, bytes memory _usdData, uint256 minAmountAllowed) public payable {\r\n        // require(tx.origin == msg.sender);\r\n\r\n        CupInfo memory info = cups[msg.sender][cup];\r\n        require(info.deposit > 0 && info.etherForRepayLoan == 0);\r\n\r\n        wipeAndClose(cup, msg.sender, etherNeeded, _saiData, _usdData, minAmountAllowed);\r\n    }\r\n\r\n\r\n    // **ONLY_OWNER functions**\r\n    function setAffProgram(address newAff) public onlyOwner {\r\n        aff = IAffiliateProgram(newAff);\r\n    }\r\n\r\n    function changeUsdToken(IToken newToken) public onlyOwner {\r\n        usdToken = newToken;\r\n    }\r\n\r\n    function setAdmin(address newAdmin, bool active) public onlyOwner {\r\n        admins[newAdmin] = active;\r\n    }\r\n\r\n    function changeMinMkrPrice(uint256 _minPrice) public onlyOwner {\r\n        minMKRPrice = _minPrice;\r\n    }\r\n\r\n    function updateContract(address newContract) public onlyOwner {\r\n        migrateToNewContract = IDfFinanceMgr(newContract);\r\n    }\r\n\r\n    function changeFees(uint8 _earlyCloseFee) public onlyOwner {\r\n        earlyCloseFee = _earlyCloseFee;\r\n    }\r\n\r\n    function changeStrategicDate(uint256 newDate) public onlyOwner {\r\n        dateUntilFees = newDate;\r\n    }\r\n\r\n    function setLoanPool(address loanAddr) public onlyOwner {\r\n        require(loanAddr != address(0), \"Address must not be zero\");\r\n        loanPool = ILoanPool(loanAddr);\r\n    }\r\n\r\n    function setSetupCupPermission(address manager, bool status) public onlyOwner {\r\n        cupManagers[manager] = status;\r\n    }\r\n\r\n    function setSetupCupPermission(address[] memory managers, bool status) public onlyOwner {\r\n        for (uint i = 0; i < managers.length; i++) {\r\n            cupManagers[managers[i]] = status;\r\n        }\r\n    }\r\n\r\n\r\n    // **INTERNAL functions**\r\n    // TODO: wmul\r\n    function ethMulUsdPrice(uint256 ethamount, uint256 usdPrice, uint256 decimals) internal pure returns(uint256) {\r\n        return wdiv(ethamount, usdPrice * 10**(18 - decimals)) / 10**(18 - decimals);\r\n    }\r\n\r\n    function calcProfitETH(CupInfo memory cup, uint256 jam, uint256 etherForRepayLoan) internal pure returns(uint256 profitETH) {\r\n        profitETH = sub(sub(jam, cup.deposit), etherForRepayLoan)  * (100 - cup.feeForBonusEther) / 100;\r\n        require((profitETH * 10000 / cup.deposit) > cup.profitPercent * 100);\r\n    }\r\n\r\n    function calcUsdToWithdraw(CupInfo memory cup, uint256 jam, uint256 usdPrice, uint256 etherForRepayLoan ) internal view returns(uint256) {\r\n        uint256 profit = sub(sub(jam, cup.deposit), etherForRepayLoan);\r\n        profit = profit * sub(100, cup.feeForBonusEther) / 100;\r\n\r\n        uint256 usdToWithdraw = ethMulUsdPrice(cup.deposit + profit, usdPrice, usdToken.decimals());\r\n        uint256 originalUSDAmount = wmul(cup.deposit, cup.etherPrice) / 10 ** (18 - usdToken.decimals()); // convert to usdToken precision\r\n        require(originalUSDAmount > 0);\r\n\r\n        require((sub(usdToWithdraw, originalUSDAmount) * 10000 / originalUSDAmount) > cup.profitPercent * 100);\r\n\r\n        return usdToWithdraw;\r\n    }\r\n\r\n    function calcCreditInEther(bytes32 cupId, uint256 saiPrice) internal returns (uint256) {\r\n        uint256 saiGovAmt;\r\n        uint256 wad;\r\n\r\n        (saiGovAmt, ,wad) = calc(cupId);\r\n\r\n        return wmul(wad + saiGovAmt, saiPrice);\r\n    }\r\n\r\n    function feeSai(uint256 wad, bytes32 cup) internal returns(uint256) {\r\n        return rmul(wad, rdiv(tub.rap(cup), tub.tab(cup)));\r\n    }\r\n\r\n    function exchange(IToken fromToken, uint256 maxFromTokenAmount, IToken toToken, uint256 minToTokenAmount, bytes memory _data) internal {\r\n        IOneInchExchange ex = IOneInchExchange(0x11111254369792b2Ca5d084aB5eEA397cA8fa48B);\r\n\r\n        uint256 etherAmount;\r\n        if (fromToken != ETH_ADDRESS) {\r\n            if (fromToken.allowance(address(this), ex.spender()) != uint(-1)) { // TODO: optimize\r\n                fromToken.approve(ex.spender(), uint(-1));\r\n            }\r\n            etherAmount = 0;\r\n        } else {\r\n            etherAmount = maxFromTokenAmount;\r\n        }\r\n        uint256 fromTokenBalance = fromToken.universalBalanceOf(address(this));\r\n        uint256 toTokenBalance = toToken.universalBalanceOf(address(this));\r\n\r\n        bytes32 response;\r\n        assembly {\r\n        // call(g, a, v, in, insize, out, outsize)\r\n            let succeeded := call(sub(gas, 5000), ex, etherAmount, add(_data, 0x20), mload(_data), 0, 32)\r\n            response := mload(0)      // load delegatecall output\r\n        //switch iszero(succeeded)\r\n        //case 1 {\r\n        //    // throw if call failed\r\n        //    revert(0, 0)\r\n        //}\r\n        }\r\n\r\n        require(fromToken.universalBalanceOf(address(this)) + maxFromTokenAmount >= fromTokenBalance);\r\n        require(toToken.universalBalanceOf(address(this)) >= toTokenBalance + minToTokenAmount);\r\n    }\r\n\r\n    function affiliateProcess(address cdpOwner, uint256 systemProfit) internal returns(uint256 affiliatePayment) {\r\n        if (aff != IAffiliateProgram(0x0)) {\r\n            (address partner, uint8 level,,) = aff.getPartnerFromUser(cdpOwner);\r\n            (uint16 percent,) = aff.levels(level);\r\n            require(percent < 100);\r\n            affiliatePayment = systemProfit * percent / 100;\r\n            aff.addPartnerProfitUseAddress.value(affiliatePayment)(partner);\r\n            emit SystemProfit(systemProfit * (100 - percent) / 100);\r\n        } else {\r\n            emit SystemProfit(systemProfit);\r\n        }\r\n    }\r\n\r\n    function wipeAndClose(bytes32 cup, address payable cdpOwner, uint256 etherNeeded, bytes memory _saiData, bytes memory _usdData, uint256 minAmountAllowed) internal returns(bool hasProfit, uint256 extraProfitInEther) {\r\n        CupInfo memory info = cups[cdpOwner][cup];\r\n        require(info.deposit > 0);\r\n\r\n        hasProfit = false;\r\n\r\n        uint256 jam = totalDeb(cup);\r\n\r\n        // После вычета кредита\r\n        jam = wipeAndCloseInternal(cup, jam, etherNeeded, _saiData);\r\n\r\n        uint256 userSelfCredit = 0;\r\n        if (msg.sender == cdpOwner) userSelfCredit = (msg.value > etherNeeded) ? etherNeeded : msg.value;\r\n\r\n        // есть профит\r\n        if (jam > info.deposit + userSelfCredit) {\r\n            extraProfitInEther = sub(jam, info.deposit + userSelfCredit);\r\n\r\n            if (minAmountAllowed == 0) {\r\n                // VIA ETH\r\n                hasProfit = ((extraProfitInEther * sub(100, info.feeForBonusEther) / 100) * 100 / info.deposit) >= info.profitPercent;\r\n            } else {\r\n                // VIA USD\r\n                hasProfit = (minAmountAllowed * 100 / wmul(info.deposit, info.etherPrice)) >= info.profitPercent;\r\n            }\r\n        }\r\n\r\n        if (hasProfit) {\r\n            affiliateProcess(msg.sender, extraProfitInEther * info.feeForBonusEther / 100);\r\n\r\n            require(jam >= info.deposit + extraProfitInEther * sub(100, info.feeForBonusEther) / 100);\r\n            jam = info.deposit + extraProfitInEther * sub(100, info.feeForBonusEther) / 100;\r\n            if (minAmountAllowed > 0)\r\n                emit StrategyClosed(cup, minAmountAllowed, address(usdToken));\r\n            else\r\n                emit StrategyClosed(cup, jam, address(0x0));\r\n        } else {\r\n            // если расторгается стратегия досрочно клиент может заплатить fee\r\n            if (now < dateUntilFees) {\r\n                jam = sub(jam, jam * earlyCloseFee / 100);\r\n            }\r\n        }\r\n\r\n        tub.gem().withdraw(tub.gem().balanceOf(address(this)));\r\n\r\n        withdrawProfit(cdpOwner, jam, _usdData, minAmountAllowed);\r\n    }\r\n\r\n    function withdrawProfit(address payable userAddress, uint256 jam, bytes memory _usdData, uint256 minAmountAllowed) internal {\r\n        // tub.gem().withdraw(jam);\r\n        if (minAmountAllowed == 0) {\r\n            userAddress.transfer(jam); // withdraw ether to user\r\n        } else {\r\n            exchange(ETH_ADDRESS, jam, usdToken, minAmountAllowed, _usdData);\r\n\r\n            IToken(usdToken).universalTransfer(userAddress, minAmountAllowed);\r\n        }\r\n    }\r\n\r\n    function wipeAndCloseInternal(bytes32 cup, uint256 jam, uint256 etherNeeded, bytes memory _saiData) internal returns(uint256) {\r\n        uint256 wad;\r\n        uint256 saiGovAmt;\r\n        uint256 govAmt;\r\n\r\n        (saiGovAmt, govAmt,  wad) = calc(cup);\r\n\r\n        uint256 credit = 0;\r\n        if (msg.value > etherNeeded) { // user sent too much\r\n            address(msg.sender).transfer(sub(msg.value, etherNeeded));\r\n        } else {\r\n            credit = sub(etherNeeded, msg.value);\r\n            // TODO на балансе скорее всего нет таких денег, всё в ETH\r\n            // creditAddress.showmethemoney(credit);\r\n\r\n            // take an extra eth loan\r\n            loanPool.loan(credit);\r\n\r\n            // TokenInterface(tub.gem()).transferFrom(creditAddress, address(this), credit);\r\n        }\r\n        require(jam > credit);\r\n\r\n        // user sent some funds\r\n        // TODO:\r\n        // uint256 balanceWETH = tub.gem().balanceOf(address(this));\r\n        // if (balanceWETH < etherNeeded) tub.gem().deposit.value(etherNeeded - balanceWETH)();\r\n\r\n\r\n        // ETH => SAI\r\n        exchange(ETH_ADDRESS, etherNeeded, tub.sai(), wad + saiGovAmt, _saiData);\r\n\r\n        //-------------------------------\r\n\r\n        tub.wipe(cup, wad); // repay sai & mkr\r\n\r\n        uint ink = rdiv(jam, tub.per());\r\n        ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\r\n\r\n        tub.free(cup, ink);\r\n\r\n        tub.exit(ink);\r\n\r\n        tub.shut(cup); // close\r\n\r\n        jam = sub(jam, credit);\r\n\r\n        // return the credi\r\n        if (credit > 0) {\r\n            tub.gem().withdraw(credit);\r\n            // address(uint160(address(creditAddress))).transfer(credit); // pay back\r\n            transferEthInternal(address(loanPool), credit);\r\n            // TokenInterface(tub.gem()).transfer(creditAddress, credit);\r\n        }\r\n\r\n        return jam;\r\n    }\r\n\r\n    function transferEthInternal(address receiver, uint256 amount) internal {\r\n        address payable receiverPayable = address(uint160(receiver));\r\n        (bool result, ) = receiverPayable.call.value(amount)(\"\");\r\n        require(result, \"Transfer of ETH failed\");\r\n    }\r\n\r\n\r\n    // **FALLBACK functions**\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"SetupCup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StrategyClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StrategyClosing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"SystemProfit\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aff\",\"outputs\":[{\"internalType\":\"contract IAffiliateProgram\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"calc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"saiGovAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"govAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUsdToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"name\":\"calcEthFromAmountAndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"caluclateAmountSaiFromEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_earlyCloseFee\",\"type\":\"uint8\"}],\"name\":\"changeFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"changeMinMkrPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"}],\"name\":\"changeStrategicDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IToken\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeUsdToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"cupsList\",\"type\":\"bytes32[]\"}],\"name\":\"closeStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"closeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"cupsList\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amountSaiToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saiPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsdToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_saiData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_usdData\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"useExternalExchange\",\"type\":\"uint8\"}],\"name\":\"collectSaiAndUsdForOpenDeals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cupManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateUntilFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"earlyCloseFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"exitAfterLiquidation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cdpOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"getCupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"etherPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeForBonusEther\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"etherForRepayLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdToWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMKRPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanPool\",\"outputs\":[{\"internalType\":\"contract ILoanPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"lockEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"cups_to_migrate\",\"type\":\"bytes32[]\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrateToNewContract\",\"outputs\":[{\"internalType\":\"contract IDfFinanceMgr\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownedCups\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAff\",\"type\":\"address\"}],\"name\":\"setAffProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanAddr\",\"type\":\"address\"}],\"name\":\"setLoanPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSetupCupPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setSetupCupPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cdpOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profitPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"etherPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"feeForBonusEther\",\"type\":\"uint8\"}],\"name\":\"setupCup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"}],\"name\":\"totalDeb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"updateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"etherNeeded\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_saiData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_usdData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"userWipeAndClose\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cup\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"cdpOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"etherNeeded\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_saiData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_usdData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"wipeAndCloseProfitOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraProfitInEther\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfFinanceMgr","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://8b853a3b89f9511fbeb990cd527b43a1380830106a72cd7cba1efbe4aeb445af"}]}