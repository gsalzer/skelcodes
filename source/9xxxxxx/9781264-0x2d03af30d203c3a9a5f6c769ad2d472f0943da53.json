{"status":"1","message":"OK","result":[{"SourceCode":"/* Description:\r\n * DFOHub - Setup the Open Basic Governance.\r\n * This specific DFOHub functionality is called on choosing to create a DFO with this specific governance model.\r\n * The Functionality Manager uses the 4 basic functionalities provided by the DFO Protocol: the Survey length provider, the emergency Survey length provider, the minimum amount to stake for emergency Surveys, and the Survey result checker.\r\n * If present, the quorum is also set inside the new StateHolder.\r\n */\r\n/* Discussion:\r\n * https://gitcoin.co/grants/154/decentralized-flexible-organization\r\n */\r\npragma solidity ^0.6.0;\r\n\r\ncontract DeployOpenBasicGovernanceRules {\r\n\r\n    address private _sourceLocation = 0x9784B427Ecb5275c9300eA34AdEF57923Ab170af;\r\n\r\n    uint256 private _getMinimumBlockNumberForSurveySourceLocationId = 2;\r\n    uint256 private _getMinimumBlockNumberForEmergencySurveySourceLocationId = 1;\r\n    uint256 private _getEmergencySurveyStakingFunctionalitySourceLocationId = 0;\r\n\r\n    uint256 private _surveyResultValidatorSourceLocationId = 3;\r\n\r\n    function onStart(address newSurvey, address oldSurvey) public {\r\n    }\r\n\r\n    function onStop(address newSurvey) public {\r\n    }\r\n\r\n    function deployOpenBasicGovernanceRules(\r\n        address sender, uint256 value,\r\n        uint256 minimumBlockNumber,\r\n        uint256 emergencyBlockNumber,\r\n        uint256 emergencyStaking,\r\n        address stateHolderAddress,\r\n        uint256 quorum) public returns (IMVDFunctionalitiesManager mvdFunctionalitiesManager) {\r\n\r\n        IMVDProxy proxy = IMVDProxy(msg.sender);\r\n\r\n        mvdFunctionalitiesManager = IMVDFunctionalitiesManager(clone(proxy.getMVDFunctionalitiesManagerAddress()));\r\n        mvdFunctionalitiesManager.init(_sourceLocation,\r\n            _getMinimumBlockNumberForSurveySourceLocationId, address(new GetMinimumBlockNumberForSurveyFunctionality(minimumBlockNumber)),\r\n            _getMinimumBlockNumberForEmergencySurveySourceLocationId, address(new GetMinimumBlockNumberForEmergencySurveyFunctionality(emergencyBlockNumber)),\r\n            _getEmergencySurveyStakingFunctionalitySourceLocationId, address(new GetEmergencySurveyStakingFunctionality(emergencyStaking * (10 ** 18))),\r\n            _surveyResultValidatorSourceLocationId, proxy.getFunctionalityAddress(\"checkSurveyResult\"));\r\n\r\n        if(quorum > 0) {\r\n            IStateHolder(stateHolderAddress).setUint256(\"quorum\", quorum * (10 ** 18));\r\n        }\r\n        proxy.emitEvent(\"DFOCollateralContractsCloned(address_indexed,address)\", abi.encodePacked(sender), bytes(\"\"), abi.encode(address(mvdFunctionalitiesManager)));\r\n    }\r\n\r\n    function clone(address original) private returns(address copy) {\r\n        assembly {\r\n            mstore(0, or(0x5880730000000000000000000000000000000000000000803b80938091923cF3, mul(original, 0x1000000000000000000)))\r\n            copy := create(0, 0, 32)\r\n            switch extcodesize(copy) case 0 { invalid() }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IStateHolder {\r\n    function setUint256(string calldata varName, uint256 val) external returns(uint256);\r\n}\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getFunctionalityAddress(string calldata codeName) external view returns(address);\r\n    function emitEvent(string calldata eventSignature, bytes calldata firstIndex, bytes calldata secondIndex, bytes calldata data) external;\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function init(address sourceLocation,\r\n        uint256 getMinimumBlockNumberSourceLocationId, address getMinimumBlockNumberFunctionalityAddress,\r\n        uint256 getEmergencyMinimumBlockNumberSourceLocationId, address getEmergencyMinimumBlockNumberFunctionalityAddress,\r\n        uint256 getEmergencySurveyStakingSourceLocationId, address getEmergencySurveyStakingFunctionalityAddress,\r\n        uint256 checkVoteResultSourceLocationId, address checkVoteResultFunctionalityAddress) external;\r\n}\r\n\r\n\r\ncontract GetMinimumBlockNumberForSurveyFunctionality {\r\n\r\n    uint256 private _value;\r\n\r\n    constructor(uint256 value) public {\r\n        _value = value;\r\n    }\r\n\r\n    function onStart(address newSurvey, address oldSurvey) public {\r\n    }\r\n\r\n    function onStop(address newSurvey) public {\r\n    }\r\n\r\n    function getMinimumBlockNumberForSurvey() public view returns(uint256) {\r\n        return _value;\r\n    }\r\n}\r\n\r\ncontract GetMinimumBlockNumberForEmergencySurveyFunctionality {\r\n\r\n    uint256 private _value;\r\n\r\n    constructor(uint256 value) public {\r\n        _value = value;\r\n    }\r\n\r\n    function onStart(address newSurvey, address oldSurvey) public {\r\n    }\r\n\r\n    function onStop(address newSurvey) public {\r\n    }\r\n\r\n    function getMinimumBlockNumberForEmergencySurvey() public view returns(uint256) {\r\n        return _value;\r\n    }\r\n}\r\n\r\ncontract GetEmergencySurveyStakingFunctionality {\r\n\r\n    uint256 private _value;\r\n\r\n    constructor(uint256 value) public {\r\n        _value = value;\r\n    }\r\n\r\n    function onStart(address newSurvey, address oldSurvey) public {\r\n    }\r\n\r\n    function onStop(address newSurvey) public {\r\n    }\r\n\r\n    function getEmergencySurveyStaking() public view returns(uint256) {\r\n        return _value;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyStaking\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stateHolderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"deployOpenBasicGovernanceRules\",\"outputs\":[{\"internalType\":\"contract IMVDFunctionalitiesManager\",\"name\":\"mvdFunctionalitiesManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSurvey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldSurvey\",\"type\":\"address\"}],\"name\":\"onStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSurvey\",\"type\":\"address\"}],\"name\":\"onStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeployOpenBasicGovernanceRules","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://e38192b4cb619df73d0b59843dd84da2446207eafab180cdfbf3caaaed6b7c13"}]}