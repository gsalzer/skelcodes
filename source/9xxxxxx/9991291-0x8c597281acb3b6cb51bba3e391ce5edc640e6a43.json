{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.26;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IKyberNetworkProxy {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes calldata  hint) external payable returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\r\n}\r\n\r\nabstract contract IUniswapExchange {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() virtual external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() virtual external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) virtual external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) virtual external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) virtual external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) virtual external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) virtual external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) virtual external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) virtual external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) virtual external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) virtual external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) virtual external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) virtual external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) virtual external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) virtual external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) virtual external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) virtual external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) virtual external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) virtual external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) virtual external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) virtual external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) virtual external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) virtual external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) virtual external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) virtual external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) virtual external returns (bool);\r\n    function approve(address _spender, uint256 _value) virtual external returns (bool);\r\n    function allowance(address _owner, address _spender) virtual external view returns (uint256);\r\n    function balanceOf(address _owner) virtual external view returns (uint256);\r\n    function totalSupply() virtual external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) virtual external;\r\n}\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n  function totalSupply() external view returns (uint);\r\n  function approve(address guy, uint wad) external returns (bool);\r\n  function transfer(address dst, uint wad) external returns (bool);\r\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n  //function() external payable;\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function createExchange(address token) external returns (address exchange);\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\nabstract contract IERC20Token {\r\n    function name() public view returns (string memory) {this;}\r\n    function symbol() public view returns (string memory) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) virtual public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success);\r\n    function approve(address _spender, uint256 _value) virtual public returns (bool success);\r\n}\r\n\r\n/*interface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string  venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string  symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string  symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string  symbol ) external view returns ( address );\r\n  function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string[] tokens,  uint256 amount, string[] exchanges) external payable returns (bool);\r\n}*/\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string calldata fromSymbol, string calldata toSymbol, string calldata venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string calldata symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string calldata symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string calldata symbol ) external view returns ( address );\r\n  function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string[]calldata tokens,  uint256 amount, string[] calldata exchanges) external payable returns (bool);\r\n  //function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string calldata, tokens,  uint256 amount, string[] exchanges) external payable returns (bool);\r\n//function arb(address fundsReturnToAddress, address liquidityProviderContractAddress, string calldata tokens,  uint256 amount, string calldata exchanges) external payable returns (bool);\r\n}\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 _contractName) external view returns (address);\r\n}\r\n\r\ninterface IBancorNetwork {\r\n    function getReturnByPath(address[] calldata  _path, uint256 _amount) external view returns (uint256, uint256);\r\n    function convert2(address[] calldata _path, uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    ) external payable returns (uint256);\r\n\r\n    function claimAndConvert2(\r\n        address[] calldata _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    ) external returns (uint256);\r\n}\r\ninterface IBancorNetworkPathFinder {\r\n    function generatePath(address _sourceToken, address _targetToken) external view returns (address[] memory);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal view returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal view returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal view returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal view returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract flashIt{\r\n    \r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata  _params) external {\r\n\r\n\r\n    ERC20 theToken = ERC20(_reserve);\r\n\r\n        //place the arb you would like to perform below\r\n\r\n        OrFeedInterface orfeed= OrFeedInterface(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336);\r\n\r\n        //approve the token you are starting  (tokenOrder element 0 below)with (so that the orfeed contract perform its operations below )\r\n        theToken.approve(0x8316B082621CFedAB95bf4a44a1d4B64a6ffc336, 10000000000000000000000000000);\r\n        \r\n         //string[] memory tokenOrder = new string[](3);\r\n         //string[] memory exchangeOrder = new string[](3);\r\n         \r\n         string[] memory tokenOrder = new string[](2);\r\n         string[] memory exchangeOrder = new string[](2);\r\n         \r\n         tokenOrder[0]= \"DAI\";\r\n         //tokenOrder[1]= \"WETH\";\r\n         //tokenOrder[2]= \"SAI\";\r\n         \r\n         tokenOrder[1]= \"ETH\";\r\n         \r\n         \r\n         //exchangeOrder[0]= \"KYBER\";\r\n         //exchangeOrder[1]= \"KYBER\";\r\n         //exchangeOrder[2]= \"KYBER\";\r\n         \r\n         exchangeOrder[0]= \"BANCOR\";\r\n         exchangeOrder[1]= \"KYBER\";\r\n         \r\n         \r\n         \r\n        orfeed.arb((address(this)), (address(this)), tokenOrder, _amount, exchangeOrder);\r\n      \r\n        //transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\r\n        theToken.transfer(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3, (_amount+ _fee));\r\n    \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"flashIt","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://1d8405d891c1a2091d55ae0f01a118126f88301b3aa5e6632a68705f2ce26d03"}]}