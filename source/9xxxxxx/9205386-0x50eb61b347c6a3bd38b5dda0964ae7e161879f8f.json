{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-06-28\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private minters;\r\n\r\n    constructor() internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ncontract StandardERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(string name, string symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns(string) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns(string) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(value <= _allowed[from][msg.sender]);\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(value <= _balances[from]);\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    //    function _burn(address account, uint256 value) internal {\r\n    //        require(account != 0);\r\n    //        require(value <= _balances[account]);\r\n    //\r\n    //        _totalSupply = _totalSupply.sub(value);\r\n    //        _balances[account] = _balances[account].sub(value);\r\n    //        emit Transfer(account, address(0), value);\r\n    //    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    //    function _burnFrom(address account, uint256 value) internal {\r\n    //        require(value <= _allowed[account][msg.sender]);\r\n    //\r\n    //        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    //        // this function needs to emit an event with the updated approval.\r\n    //        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n    //            value);\r\n    //        _burn(account, value);\r\n    //    }\r\n}\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is StandardERC20, MinterRole {\r\n\r\n    constructor(string name, string symbol, uint8 decimals)\r\n    public\r\n    StandardERC20(name,symbol,decimals)\r\n    {\r\n    }\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(\r\n        address to,\r\n        uint256 value\r\n    )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n    {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract ERC20Capped is ERC20Mintable {\r\n\r\n    uint256 private _cap;\r\n\r\n    constructor(string name, string symbol, uint8 decimals,uint256 cap)\r\n    public\r\n    ERC20Mintable(name,symbol,decimals)\r\n    {\r\n        require(cap > 0);\r\n        _cap =  cap.mul(uint(10) **decimals);\r\n    }\r\n\r\n    /**\r\n     * @return the cap for the token minting.\r\n     */\r\n    function cap() public view returns(uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) <= _cap);\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\n\r\ncontract FSTToken is ERC20Capped {\r\n\r\n    constructor(string name, string symbol, uint8 decimals,uint256 cap)\r\n    public\r\n    ERC20Capped(name,symbol,decimals,cap)\r\n    {\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract FSTTokenTeamAgentHolder is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeMath for uint8;\r\n\r\n    FSTToken private token ;\r\n\r\n    uint256 public totalLockTokens;\r\n\r\n    uint256 public totalUNLockTokens;\r\n    uint256 public globalLockPeriod;\r\n\r\n    uint[] public stageRatios=[10,20,30,40];\r\n\r\n    mapping (address => HolderSchedule) public holderList;\r\n    address[] public holderAccountList=[0x0];\r\n\r\n    uint256 private singleNodeTime;\r\n\r\n    event ReleaseTokens(address indexed who,uint256 value);\r\n    event HolderToken(address indexed who,uint256 value,uint256 totalValue);\r\n\r\n    struct HolderSchedule {\r\n        uint256 startAt;\r\n        uint256 lockAmount;\r\n        uint256 releasedAmount;\r\n        uint256 totalReleasedAmount;\r\n        uint256 lastUnlocktime;\r\n        bool isReleased;\r\n        bool isInvested;\r\n        uint256 unlockNumed;\r\n    }\r\n\r\n    constructor(address _tokenAddress ,uint256 _globalLockPeriod,uint[] _stageRatios) public{\r\n        token = FSTToken(_tokenAddress);\r\n        globalLockPeriod=_globalLockPeriod;\r\n        stageRatios=_stageRatios;\r\n        singleNodeTime=globalLockPeriod.div(stageRatios.length);\r\n    }\r\n\r\n    function addHolderToken(address _adr,uint256 _lockAmount) public onlyOwner {\r\n        HolderSchedule storage holderSchedule = holderList[_adr];\r\n        require(_lockAmount > 0);\r\n        _lockAmount=_lockAmount.mul(uint(10) **token.decimals());\r\n        if(holderSchedule.isInvested==false||holderSchedule.isReleased==true){\r\n            holderSchedule.isInvested=true;\r\n            holderSchedule.startAt = block.timestamp;\r\n            holderSchedule.lastUnlocktime=holderSchedule.startAt;\r\n            if(holderSchedule.isReleased==false){\r\n                holderSchedule.releasedAmount=0;\r\n                if(holderAccountList[0]==0x0){\r\n                    holderAccountList[0]=_adr;\r\n                }else{\r\n                    holderAccountList.push(_adr);\r\n                }\r\n            }\r\n        }\r\n        holderSchedule.isReleased = false;\r\n        holderSchedule.lockAmount=holderSchedule.lockAmount.add(_lockAmount);\r\n        totalLockTokens=totalLockTokens.add(_lockAmount);\r\n        emit HolderToken(_adr,_lockAmount,holderSchedule.lockAmount.add(holderSchedule.releasedAmount));\r\n    }\r\n\r\n    function subHolderToken(address _adr,uint256 _lockAmount)public onlyOwner{\r\n        HolderSchedule storage holderSchedule = holderList[_adr];\r\n        require(_lockAmount > 0);\r\n        _lockAmount=_lockAmount.mul(uint(10) **token.decimals());\r\n        require(holderSchedule.lockAmount>=_lockAmount);\r\n        holderSchedule.lockAmount=holderSchedule.lockAmount.sub(_lockAmount);\r\n        totalLockTokens=totalLockTokens.sub(_lockAmount);\r\n        emit HolderToken(_adr,_lockAmount,holderSchedule.lockAmount.add(holderSchedule.releasedAmount));\r\n    }\r\n\r\n    function accessToken(address rec,uint256 value) private {\r\n        totalUNLockTokens=totalUNLockTokens.add(value);\r\n        token.mint(rec,value);\r\n    }\r\n    function releaseMyTokens() public{\r\n        releaseTokens(msg.sender);\r\n    }\r\n\r\n    function releaseTokens(address _adr) public{\r\n        require(_adr!=address(0));\r\n        HolderSchedule storage holderSchedule = holderList[_adr];\r\n        if(holderSchedule.isReleased==false&&holderSchedule.lockAmount>0){\r\n            uint256 timestamp=block.timestamp;\r\n            uint256 unlockNum=hasUnlockNum(_adr,timestamp);\r\n            if(unlockNum>0){\r\n                uint256 unlockAmount=hasUnlockAmount(_adr,unlockNum);\r\n                if(unlockAmount>0&&holderSchedule.lockAmount>=unlockAmount){\r\n                    holderSchedule.lockAmount=holderSchedule.lockAmount.sub(unlockAmount);\r\n                    holderSchedule.releasedAmount=holderSchedule.releasedAmount.add(unlockAmount);\r\n                    holderSchedule.totalReleasedAmount=holderSchedule.totalReleasedAmount.add(unlockAmount);\r\n                    holderSchedule.lastUnlocktime=timestamp;\r\n                    holderSchedule.unlockNumed=unlockNum;\r\n                    if(holderSchedule.lockAmount==0){\r\n                        holderSchedule.isReleased=true;\r\n                        holderSchedule.releasedAmount=0;\r\n                        holderSchedule.unlockNumed=0;\r\n                    }\r\n                    accessToken(_adr,unlockAmount);\r\n                    emit ReleaseTokens(_adr,unlockAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function hasUnlockNum(address _adr,uint256 timestamp) public view returns(uint256){\r\n        HolderSchedule storage holderSchedule = holderList[_adr];\r\n        uint256 interval=timestamp.sub(holderSchedule.startAt);\r\n        uint256 unlockNum=0;\r\n        if(interval>=singleNodeTime){\r\n            unlockNum=interval.div(singleNodeTime);\r\n        }\r\n        if(unlockNum>stageRatios.length)\r\n        {\r\n            unlockNum=stageRatios.length;\r\n        }\r\n        return unlockNum;\r\n    }\r\n\r\n    function hasUnlockAmount(address _adr,uint256 unlockNum) public view returns(uint256){\r\n        HolderSchedule storage holderSchedule = holderList[_adr];\r\n        uint256 unlockAmount=0;\r\n        uint totalAmount=holderSchedule.lockAmount.add(holderSchedule.releasedAmount);\r\n        uint totalRatio=0;\r\n        if(unlockNum<=stageRatios.length){\r\n            for(uint i=0;i<unlockNum;i++){\r\n                totalRatio=totalRatio.add(stageRatios[i]);\r\n            }\r\n        }\r\n        uint256 singleAmount=totalAmount.div(100);\r\n        uint256 unlockTotalAmount=singleAmount.mul(totalRatio);\r\n        unlockAmount=unlockTotalAmount.sub(holderSchedule.releasedAmount);\r\n        if(unlockAmount>holderSchedule.lockAmount){\r\n            unlockAmount=holderSchedule.lockAmount;\r\n        }\r\n        return unlockAmount;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"hasUnlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderList\",\"outputs\":[{\"name\":\"startAt\",\"type\":\"uint256\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"name\":\"totalReleasedAmount\",\"type\":\"uint256\"},{\"name\":\"lastUnlocktime\",\"type\":\"uint256\"},{\"name\":\"isReleased\",\"type\":\"bool\"},{\"name\":\"isInvested\",\"type\":\"bool\"},{\"name\":\"unlockNumed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"unlockNum\",\"type\":\"uint256\"}],\"name\":\"hasUnlockAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_lockAmount\",\"type\":\"uint256\"}],\"name\":\"addHolderToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseMyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_lockAmount\",\"type\":\"uint256\"}],\"name\":\"subHolderToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAccountList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stageRatios\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUNLockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_globalLockPeriod\",\"type\":\"uint256\"},{\"name\":\"_stageRatios\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReleaseTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"HolderToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FSTTokenTeamAgentHolder","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008171740c3f6631da0496ca237e6ec7b9b94ed01e0000000000000000000000000000000000000000000000000000000003c2670000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000028","Library":"","LicenseType":"None","SwarmSource":"bzzr://c7cd7edaf9489b884d2c2ee9b17e3c12db5b6881ecee927d18beec74661522ea"}]}