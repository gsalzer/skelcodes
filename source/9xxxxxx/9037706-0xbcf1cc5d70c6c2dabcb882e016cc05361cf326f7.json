{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n\r\ncontract KyberReserveIf {\r\n    address public kyberNetwork;\r\n}\r\n\r\n\r\ninterface KyberReserveInterface {\r\n\r\n    function trade(address srcToken, uint srcAmount, address destToken, address destAddress, uint conversionRate,\r\n        bool validate) public payable returns(bool);\r\n    function getConversionRate(address src, address dest, uint srcQty, uint blockNumber) public view returns(uint);\r\n}\r\n\r\n\r\ncontract KyberNetworkIf {\r\n    KyberReserveInterface[] public reserves;\r\n    function getNumReserves() public view returns(uint);\r\n}\r\n\r\n\r\ncontract CheckReservePoint {\r\n    \r\n    KyberNetworkIf constant kyber = KyberNetworkIf(0x65bF64Ff5f51272f729BDcD7AcFB00677ced86Cd);\r\n    KyberNetworkIf constant oldKyber = KyberNetworkIf(0x9ae49C0d7F8F9EF4B864e004FE86Ac8294E20950);\r\n    \r\n    function checkPointing() public view returns(address[] goodPoint, address[] oldKybers, address[] badPoint, uint numReserves, uint oldIndex, uint goodIndex) {\r\n        numReserves = kyber.getNumReserves();\r\n\r\n        goodPoint = new address[](numReserves);\r\n        oldKybers = new address[](numReserves);\r\n        badPoint = new address[](10);\r\n\r\n        uint badIndex;\r\n        \r\n        KyberReserveIf reserve;\r\n        \r\n        for (uint i = 0; i < numReserves; i ++) {\r\n            reserve = KyberReserveIf(kyber.reserves(i));\r\n            \r\n            if (reserve.kyberNetwork() == address(oldKyber)) {\r\n                oldKybers[oldIndex++] = address(reserve);\r\n            } else if (reserve.kyberNetwork() == address(kyber)){\r\n                goodPoint[goodIndex++] = address(reserve);\r\n            } else {\r\n                badPoint[badIndex++] = address(reserve);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"checkPointing\",\"outputs\":[{\"name\":\"goodPoint\",\"type\":\"address[]\"},{\"name\":\"oldKybers\",\"type\":\"address[]\"},{\"name\":\"badPoint\",\"type\":\"address[]\"},{\"name\":\"numReserves\",\"type\":\"uint256\"},{\"name\":\"oldIndex\",\"type\":\"uint256\"},{\"name\":\"goodIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CheckReservePoint","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://541ee363b8caebb525bb5d5e06e47db8f13dd3269de1240941a8b0fae5c89d07"}]}