{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.6.0;\n/**\n+------------------------------------------------------------------------------+\n|                        Putin is a lier and instigator ???                    |\n|                                                                              |\n|                                                                              |\n|                    sayYes() send any ammount on positiveProxy()              |\n|                    sayNo() send any ammount on negativeProxy()               |\n|                                                                              |\n|                                                                              |\n|                           The score - showResult()                           |\n+------------------------------------------------------------------------------+\n|                             Block Chain Sounding .ru                         |\n|                    Never removable and always available!!!                   |\n|                            Welcome to the new age.                           |\n+------------------------------------------------------------------------------+\n| All funds are allocated to the fight for freedom of speech and human rights. |\n+------------------------------------------------------------------------------+                                                                  \n                         ....           ....                          \n                      .:c;'..            ..'col'                      \n                    ;dd;                     .cxo'                    \n                  'k0l.                         ;xd,                  \n                 ,0K;                           .oNNd.                \n                .k0,                              ,xNx.               \n                ld'                                ,KWo               \n               ,xdx;                               .OMK;              \n               lWMK,                               ,KMWd              \n              .xMMNx'  .,;,;:::,.        ..       'xWMM0'             \n              ,0MWWWXk KWWNNWMMNo.   ,xO000OkOk:: NMMMMX;             \n             .OWMWK0NM WXOk  0NW0'   lWMW   ldKWW xoKMMNo             \n             .xMMMWx,    lkd:;;;     .okkllkol0MM ;.xWMMd             \n              ;KWMMd                              . ;KMK;             \n              .;oKMO,                             .;dOxl.             \n               'cOMMXx'                         .cKW0:',              \n               .:kNMMWo                        .kWM0l;.               \n                .;OWMMK;     .,.       .       lNMMk;.                \n                  :NMMWl     'O0xl;;cdOO;      ;XMWd.                 \n                  ,KMMMK;     'dNMWWXxl,      .xWMX:                  \n                  .kMMMMKc,:'   'c:,.    .  .;dNMM0'                  \n                   ;XMMMMN0K0olllccllc:lk0Ok0WMMMWo                   \n                    lNMMMk..ckdccldddd0Kd:cOWMMMWx.                   \n                    .OMMMd  .ckxdddddoc'   ;XMMM0'                    \n                    :KMMMKl.              ,OWMMMNk;                   \n                  'dNWWWMMMXd::;,,,''',,:kNMMMMKONNk:.                \n              .':xXMMKcoXMMMMMMWWWWWWWWWMMMMW0l.,0MMWXOxol:;,.        \n        .oxxkOKNMMMMMX: 'o0WMMMMMMMMMMMMMMNk:.  .kMMMMMMMMMMX;        \n        ;XMMMMMMMMMMMM0'  .cOWMMMMMMMMMWKo'     .kMMMMMMMMMMX;        \n        ;XMMMMMMMMMMMMWo    .;kNMMMMMNO:.       .kMMMMMMMMMMX;        \n        ;XMMMMMMMMMMMMMK;     .oNMMMWO,         '0MMMMMMMMMMX;        \n        ;XMMMMMMMMMMMMMWx.    ;KMMMMMW0:        ,KMMMMMMMMMMX;   \n*/\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n */\ncontract ReentrancyGuard is Initializable {\n    // counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    function initialize() public initializer {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/PutinLier.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract PutinLier is Initializable, Context, ReentrancyGuard { // \n    using SafeMath for uint256;\n\n    // Address where funds are collected\n    address payable private _positiveWallet;\n    address payable private _negativeWallet;\n    \n\t//Address where the payments forwarders are deployed\n\taddress private _positiveAddress;\n\taddress private _negativeAddress;\n\n    // Amount of wei raised\n    uint256 private _positiveWeiRaised;\n    uint256 private _negativeWeiRaised;\n\t\n\t// generate soundings event\n    event SonarVoteEvent(address indexed voter, bool decision, uint256 value, string result);\n\n\n    function initialize(\n        address payable positiveWallet, \n        address payable negativeWallet,\n        address positiveAddress,\n\t\taddress negativeAddress\n    \t\t\t\t\t\t) public initializer {\n        \n        require(positiveWallet != address(0), \"PositiveWallet: is zero address\");\n        require(negativeWallet != address(0), \"NegativeWallet: is zero address\");\n\t\trequire(positiveAddress != address(0), \"PositiveContract: is zero address\");\n        require(negativeAddress != address(0), \"NegativeContract: is zero address\");\n\t\t\n\t\t_positiveWallet = positiveWallet;\n\t\t_negativeWallet = negativeWallet;\n\t\t\n\t\t_positiveAddress = positiveAddress;\n\t\t_negativeAddress = negativeAddress;\n\t\t\n\t\t_positiveWeiRaised = 0;\n    \t_negativeWeiRaised = 0;\n    }\n    \n     /**\n     * @dev fallback function ***DO NOT OVERRIDE***\n     * Note that other contracts will transfer funds with a base gas stipend\n     * of 2300, which is not enough to call sayYes()/sayNo(). Consider calling\n     * them directly.\n     * USING WALLETS - You can make direct transfer to this contract only if You DISAGREE with the sentence!!!\n     * If You want to agree use Proxy under _positiveAddress value\n     * this is a security reason to do it like that.\n     */\n\n\tfunction () external payable{\n\t    if(_msgSender() == _negativeAddress){//_positiveAddress){\n\t\t\tsayNo(_msgSender(), msg.value); //_msgSender() instead of msg.sender\n        \t_negativeFundsForward();//transfer negative funds\n\t\t\t\t        \n\t    }else{\n\t        //unknown address will be transfered to negative score.\n\t        _positiveFundsForward();//transfer positive funds\n\t        // update state\n        \t_positiveWeiRaised = _positiveWeiRaised.add(msg.value);\n\t        emit SonarVoteEvent(_msgSender(), true, msg.value, showResult());\n\t    }\n\t}\n    /**\n     * @return the amount of wei raised.\n     */\n    function positiveScore() public view returns (uint256) {\n        return _positiveWeiRaised;\n    }\n    \n    function negativeScore() public view returns (uint256) {\n        return _negativeWeiRaised;\n    }\n\t\n\t /**\n     * @return the vote proxy address..\n     */\n    function positiveProxy() public view returns (address) {\n        return _positiveAddress;\n    }\n    \n    function negativeProxy() public view returns (address) {\n        return _negativeAddress;\n    }\n    /**\n     * @dev low level token transfer ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     */\n    function sayYes(address beneficiary, uint256 weiAmount) public nonReentrant payable {\n        require(msg.sender == _positiveAddress, \"Only configured voter proxy can call this function.\");\n        this;\n        //uint256 weiAmount = _weiAmount;\n        //address beneficiary = msg.sender;\n        \n        _preValidatePurchase(beneficiary, weiAmount);\n\n        // update state\n        _positiveWeiRaised = _positiveWeiRaised.add(weiAmount);\n\n        //_processPurchase(beneficiary, tokens);\n        emit SonarVoteEvent(beneficiary, true, weiAmount, showResult());\n\n        _updatePurchasingState(beneficiary, weiAmount);\n\n        //_positiveFundsForward(weiAmount);\n        \n        _postValidatePurchase(beneficiary, weiAmount);\n    }\n/**\n * \n     * @dev low level token transfer ***DO NOT OVERRIDE***\n     * This function has a non-reentrancy guard, so it shouldn't be called by\n     * another `nonReentrant` function.\n     */\n    function sayNo(address beneficiary, uint256 weiAmount) public nonReentrant payable {\n        require(msg.sender == _negativeAddress, \"Only configured voter proxy can call this function.\");\n        this;\n        //uint256 weiAmount = msg.value;\n        //address beneficiary = msg.sender;\n        \n        _preValidatePurchase(beneficiary, weiAmount);\n\n        // update state\n        _negativeWeiRaised = _negativeWeiRaised.add(weiAmount);\n\n        //_processPurchase(beneficiary, tokens);\n        emit SonarVoteEvent(beneficiary, false, weiAmount, showResult());\n\n        _updatePurchasingState(beneficiary, weiAmount);\n\n        //_negativeFundsForward(weiAmount);\n        \n        _postValidatePurchase(beneficiary, weiAmount);\n    }\n\n    function _hasBeenInitialized() internal view returns (bool) {\n        return ((_positiveWallet != address(0)) && (_negativeWallet != address(0)));\n    }\n\n    /**\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        require(beneficiary != address(0), \"Crowdsale: beneficiary is the zero address\");\n        require(weiAmount != 0, \"Crowdsale: weiAmount is 0\");\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    }\n\n    /**\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n     * conditions are not met.\n     * @param beneficiary Address performing the token purchase\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n     * etc.)\n     * @param beneficiary Address receiving the tokens\n     * @param weiAmount Value in wei involved in the purchase\n     */\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _positiveFundsForward() internal {\n        _positiveWallet.transfer(msg.value);\n    }\n    \n    /**\n     * @dev Determines how ETH is stored/forwarded on purchases.\n     */\n    function _negativeFundsForward() internal {\n        _negativeWallet.transfer(msg.value);\n    }\n    \n    /**\n     * @dev Determines result comparing Wei on both accounts.\n     */    \n    function showResult() public view returns (string memory verdict){\n\t    verdict = \"Yes! Putin is a lier and instigator. Путин лжец и зачинщик\";\n\t    if(_negativeWeiRaised > _positiveWeiRaised) verdict = \"No! Putin is not a lier and instigator. Путин не лжец и зачинщик\";\n\t}\n    \n\n    uint256[50] private ______gap;\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"name\":\"SonarVoteEvent\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"positiveWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"negativeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positiveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"negativeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"negativeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"negativeScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positiveProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"positiveScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"sayNo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"sayYes\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"verdict\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PutinLier","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://ff05d6bb0502f08f2aefc8559a0d4690e0c970f3db9963b0fc0d8ba8e571316f"}]}