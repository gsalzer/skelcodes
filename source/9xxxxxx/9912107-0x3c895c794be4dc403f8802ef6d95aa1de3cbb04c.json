{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-04-20\r\n*/\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\cryptography\\ECDSA.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * NOTE: This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ├╖ 2 + 1, and for v in (282): v Γêê {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\roles\\WhitelistAdminRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: unlock-abi-7\\ILockKeyPurchaseHookV7.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @notice Functions to be implemented by a keyPurchaseHook.\r\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\r\n */\r\ninterface ILockKeyPurchaseHookV7\r\n{\r\n  /**\r\n   * @notice Used to determine the purchase price before issueing a transaction.\r\n   * This allows the hook to offer a discount on purchases.\r\n   * This may revert to prevent a purchase.\r\n   * @param from the msg.sender making the purchase\r\n   * @param recipient the account which will be granted a key\r\n   * @param referrer the account which referred this key sale\r\n   * @param data arbitrary data populated by the front-end which initiated the sale\r\n   * @return the minimum value/price required to purchase a key with these settings\r\n   * @dev the lock's address is the `msg.sender` when this function is called via\r\n   * the lock's `purchasePriceFor` function\r\n   */\r\n  function keyPurchasePrice(\r\n    address from,\r\n    address recipient,\r\n    address referrer,\r\n    bytes calldata data\r\n  ) external view\r\n    returns (uint minKeyPrice);\r\n\r\n  /**\r\n   * @notice If the lock owner has registered an implementer then this hook\r\n   * is called with every key sold.\r\n   * @param from the msg.sender making the purchase\r\n   * @param recipient the account which will be granted a key\r\n   * @param referrer the account which referred this key sale\r\n   * @param data arbitrary data populated by the front-end which initiated the sale\r\n   * @param minKeyPrice the price including any discount granted from calling this\r\n   * hook's `keyPurchasePrice` function\r\n   * @param pricePaid the value/pricePaid included with the purchase transaction\r\n   * @dev the lock's address is the `msg.sender` when this function is called\r\n   */\r\n  function onKeyPurchase(\r\n    address from,\r\n    address recipient,\r\n    address referrer,\r\n    bytes calldata data,\r\n    uint minKeyPrice,\r\n    uint pricePaid\r\n  ) external;\r\n}\r\n\r\n// File: unlock-abi-7\\IPublicLockV7.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* @title The PublicLock Interface\r\n* @author Nick Furfaro (unlock-protocol.com)\r\n */\r\n\r\n\r\ncontract IPublicLockV7\r\n{\r\n\r\n// See indentationissue description here:\r\n// https://github.com/duaraghav8/Ethlint/issues/268\r\n// solium-disable indentation\r\n\r\n  /// Functions\r\n\r\n  function initialize(\r\n    address _lockCreator,\r\n    uint _expirationDuration,\r\n    address _tokenAddress,\r\n    uint _keyPrice,\r\n    uint _maxNumberOfKeys,\r\n    string calldata _lockName\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\r\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\r\n   */\r\n  function() external payable;\r\n\r\n  /**\r\n   * @dev Never used directly\r\n   */\r\n  function initialize() external;\r\n\r\n  /**\r\n  * @notice The version number of the current implementation on this network.\r\n  * @return The current version number.\r\n  */\r\n  function publicLockVersion() public pure returns (uint);\r\n\r\n  /**\r\n  * @notice Gets the current balance of the account provided.\r\n  * @param _tokenAddress The token type to retrieve the balance of.\r\n  * @param _account The account to get the balance of.\r\n  * @return The number of tokens of the given type for the given address, possibly 0.\r\n  */\r\n  function getBalance(\r\n    address _tokenAddress,\r\n    address _account\r\n  ) external view\r\n    returns (uint);\r\n\r\n  /**\r\n  * @notice Used to disable lock before migrating keys and/or destroying contract.\r\n  * @dev Throws if called by other than a lock manager.\r\n  * @dev Throws if lock contract has already been disabled.\r\n  */\r\n  function disableLock() external;\r\n\r\n  /**\r\n   * @dev Called by a lock manager or beneficiary to withdraw all funds from the lock and send them to the `beneficiary`.\r\n   * @dev Throws if called by other than a lock manager or beneficiary\r\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\r\n   * the same as `tokenAddress` in MixinFunds.\r\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\r\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\r\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\r\n   * use cases.\r\n   */\r\n  function withdraw(\r\n    address _tokenAddress,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /**\r\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @dev Throws if lock has been disabled\r\n   * @dev Throws if _tokenAddress is not a valid token\r\n   * @param _keyPrice The new price to set for keys\r\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\r\n   * or 0 to use ETH\r\n   */\r\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\r\n\r\n  /**\r\n   * A function which lets a Lock manager update the beneficiary account,\r\n   * which receives funds on withdrawal.\r\n   * @dev Throws if called by other than a Lock manager or beneficiary\r\n   * @dev Throws if _beneficiary is address(0)\r\n   * @param _beneficiary The new address to set as the beneficiary\r\n   */\r\n  function updateBeneficiary( address _beneficiary ) external;\r\n\r\n    /**\r\n   * Checks if the user has a non-expired key.\r\n   * @param _user The address of the key owner\r\n   */\r\n  function getHasValidKey(\r\n    address _user\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Find the tokenId for a given user\r\n   * @return The tokenId of the NFT, else returns 0\r\n   * @param _account The address of the key owner\r\n  */\r\n  function getTokenIdFor(\r\n    address _account\r\n  ) external view returns (uint);\r\n\r\n  /**\r\n  * A function which returns a subset of the keys for this Lock as an array\r\n  * @param _page the page of key owners requested when faceted by page size\r\n  * @param _pageSize the number of Key Owners requested per page\r\n  * @dev Throws if there are no key owners yet\r\n  */\r\n  function getOwnersByPage(\r\n    uint _page,\r\n    uint _pageSize\r\n  ) external view returns (address[] memory);\r\n\r\n  /**\r\n   * Checks if the given address owns the given tokenId.\r\n   * @param _tokenId The tokenId of the key to check\r\n   * @param _keyOwner The potential key owners address\r\n   */\r\n  function isKeyOwner(\r\n    uint _tokenId,\r\n    address _keyOwner\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\r\n  * @param _keyOwner address of the user for whom we search the key\r\n  * @dev Returns 0 if the owner has never owned a key for this lock\r\n  */\r\n  function keyExpirationTimestampFor(\r\n    address _keyOwner\r\n  ) external view returns (uint timestamp);\r\n\r\n  /**\r\n   * Public function which returns the total number of unique owners (both expired\r\n   * and valid).  This may be larger than totalSupply.\r\n   */\r\n  function numberOfOwners() external view returns (uint);\r\n\r\n  /**\r\n   * Allows a Lock manager to assign a descriptive name for this Lock.\r\n   * @param _lockName The new name for the lock\r\n   * @dev Throws if called by other than a Lock manager\r\n   */\r\n  function updateLockName(\r\n    string calldata _lockName\r\n  ) external;\r\n\r\n  /**\r\n   * Allows a Lock manager to assign a Symbol for this Lock.\r\n   * @param _lockSymbol The new Symbol for the lock\r\n   * @dev Throws if called by other than a Lock manager\r\n   */\r\n  function updateLockSymbol(\r\n    string calldata _lockSymbol\r\n  ) external;\r\n\r\n  /**\r\n    * @dev Gets the token symbol\r\n    * @return string representing the token symbol\r\n    */\r\n  function symbol()\r\n    external view\r\n    returns(string memory);\r\n\r\n    /**\r\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _baseTokenURI String representing the base of the URI for this lock.\r\n   */\r\n  function setBaseTokenURI(\r\n    string calldata _baseTokenURI\r\n  ) external;\r\n\r\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n   *  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n   *  Metadata JSON Schema\".\r\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n   * @param _tokenId The tokenID we're inquiring about\r\n   * @return String representing the URI for the requested token\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  ) external view returns(string memory);\r\n\r\n  /**\r\n   * @notice Allows a Lock manager to add or remove an event hook\r\n   */\r\n  function setEventHooks(\r\n    address _onKeyPurchaseHook,\r\n    address _onKeyCancelHook\r\n  ) external;\r\n\r\n  /**\r\n   * Allows a Lock manager to give a collection of users a key with no charge.\r\n   * Each key may be assigned a different expiration date.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _recipients An array of receiving addresses\r\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\r\n   */\r\n  function grantKeys(\r\n    address[] calldata _recipients,\r\n    uint[] calldata _expirationTimestamps,\r\n    address[] calldata _keyManagers\r\n  ) external;\r\n\r\n  /**\r\n  * @dev Purchase function\r\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\r\n  * (_value is ignored when using ETH)\r\n  * @param _recipient address of the recipient of the purchased key\r\n  * @param _referrer address of the user making the referral\r\n  * @param _data arbitrary data populated by the front-end which initiated the sale\r\n  * @dev Throws if lock is disabled. Throws if lock is sold-out. Throws if _recipient == address(0).\r\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if a Lock manager increases the\r\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\r\n  * than keyPrice is approved for spending).\r\n  */\r\n  function purchase(\r\n    uint256 _value,\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external payable;\r\n\r\n  /**\r\n   * @notice returns the minimum price paid for a purchase with these params.\r\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\r\n   */\r\n  function purchasePriceFor(\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external view\r\n    returns (uint);\r\n\r\n  /**\r\n   * Allow a Lock manager to change the transfer fee.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\r\n   * Ex: 200 bps = 2%\r\n   */\r\n  function updateTransferFee(\r\n    uint _transferFeeBasisPoints\r\n  ) external;\r\n\r\n  /**\r\n   * Determines how much of a fee a key owner would need to pay in order to\r\n   * transfer the key to another account.  This is pro-rated so the fee goes down\r\n   * overtime.\r\n   * @dev Throws if _keyOwner does not have a valid key\r\n   * @param _keyOwner The owner of the key check the transfer fee for.\r\n   * @param _time The amount of time to calculate the fee for.\r\n   * @return The transfer fee in seconds.\r\n   */\r\n  function getTransferFee(\r\n    address _keyOwner,\r\n    uint _time\r\n  ) external view returns (uint);\r\n\r\n  /**\r\n   * @dev Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key\r\n   * @param _keyOwner The key owner to whom we wish to send a refund to\r\n   * @param amount The amount to refund the key-owner\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @dev Throws if _keyOwner does not have a valid key\r\n   */\r\n  function expireAndRefundFor(\r\n    address _keyOwner,\r\n    uint amount\r\n  ) external;\r\n\r\n   /**\r\n   * @dev allows the key manager to expire a given tokenId\r\n   * and send a refund to the keyOwner based on the amount of time remaining.\r\n   * @param _tokenId The id of the key to cancel.\r\n   */\r\n  function cancelAndRefund(uint _tokenId) external;\r\n\r\n  /**\r\n   * @dev Cancels a key managed by a different user and sends the funds to the keyOwner.\r\n   * @param _keyManager the key managed by this user will be canceled\r\n   * @param _v _r _s getCancelAndRefundApprovalHash signed by the _keyManager\r\n   * @param _tokenId The key to cancel\r\n   */\r\n  function cancelAndRefundFor(\r\n    address _keyManager,\r\n    uint8 _v,\r\n    bytes32 _r,\r\n    bytes32 _s,\r\n    uint _tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Sets the minimum nonce for a valid off-chain approval message from the\r\n   * senders account.\r\n   * @dev This can be used to invalidate a previously signed message.\r\n   */\r\n  function invalidateOffchainApproval(\r\n    uint _nextAvailableNonce\r\n  ) external;\r\n\r\n  /**\r\n   * Allow a Lock manager to change the refund penalty.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _freeTrialLength The new duration of free trials for this lock\r\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\r\n   */\r\n  function updateRefundPenalty(\r\n    uint _freeTrialLength,\r\n    uint _refundPenaltyBasisPoints\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Determines how much of a refund a key owner would receive if they issued\r\n   * @param _keyOwner The key owner to get the refund value for.\r\n   * a cancelAndRefund block.timestamp.\r\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\r\n   * than what the user reads from this call.\r\n   */\r\n  function getCancelAndRefundValueFor(\r\n    address _keyOwner\r\n  ) external view returns (uint refund);\r\n\r\n  function keyManagerToNonce(address ) external view returns (uint256 );\r\n\r\n  /**\r\n   * @notice returns the hash to sign in order to allow another user to cancel on your behalf.\r\n   * @dev this can be computed in JS instead of read from the contract.\r\n   * @param _keyManager The key manager's address (also the message signer)\r\n   * @param _txSender The address cancelling cancel on behalf of the keyOwner\r\n   * @return approvalHash The hash to sign\r\n   */\r\n  function getCancelAndRefundApprovalHash(\r\n    address _keyManager,\r\n    address _txSender\r\n  ) external view returns (bytes32 approvalHash);\r\n\r\n  function addKeyGranter(address account) external;\r\n\r\n  function addLockManager(address account) external;\r\n\r\n  function isKeyGranter(address account) external view returns (bool);\r\n\r\n  function isLockManager(address account) external view returns (bool);\r\n\r\n  function onKeyPurchaseHook() external view returns(address);\r\n\r\n  function onKeyCancelHook() external view returns(address);\r\n\r\n  function revokeKeyGranter(address _granter) external;\r\n\r\n  function renounceLockManager() external;\r\n\r\n  ///===================================================================\r\n  /// Auto-generated getter functions from public state variables\r\n\r\n  function beneficiary() external view returns (address );\r\n\r\n  function expirationDuration() external view returns (uint256 );\r\n\r\n  function freeTrialLength() external view returns (uint256 );\r\n\r\n  function isAlive() external view returns (bool );\r\n\r\n  function keyPrice() external view returns (uint256 );\r\n\r\n  function maxNumberOfKeys() external view returns (uint256 );\r\n\r\n  function owners(uint256 ) external view returns (address );\r\n\r\n  function refundPenaltyBasisPoints() external view returns (uint256 );\r\n\r\n  function tokenAddress() external view returns (address );\r\n\r\n  function transferFeeBasisPoints() external view returns (uint256 );\r\n\r\n  function unlockProtocol() external view returns (address );\r\n\r\n  function keyManagerOf(uint) external view returns (address );\r\n\r\n  ///===================================================================\r\n\r\n  /**\r\n  * @notice Allows the key owner to safely share their key (parent key) by\r\n  * transferring a portion of the remaining time to a new key (child key).\r\n  * @dev Throws if key is not valid.\r\n  * @dev Throws if `_to` is the zero address\r\n  * @param _to The recipient of the shared key\r\n  * @param _tokenId the key to share\r\n  * @param _timeShared The amount of time shared\r\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n  * `onERC721Received` on `_to` and throws if the return value is not\r\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\r\n  * @dev Emit Transfer event\r\n  */\r\n  function shareKey(\r\n    address _to,\r\n    uint _tokenId,\r\n    uint _timeShared\r\n  ) external;\r\n\r\n  /**\r\n  * @notice Update transfer and cancel rights for a given key\r\n  * @param _tokenId The id of the key to assign rights for\r\n  * @param _keyManager The address to assign the rights to for the given key\r\n  */\r\n  function setKeyManagerOf(\r\n    uint _tokenId,\r\n    address _keyManager\r\n  ) external;\r\n\r\n  /// @notice A descriptive name for a collection of NFTs in this contract\r\n  function name() external view returns (string memory _name);\r\n  ///===================================================================\r\n\r\n  /// From ERC165.sol\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool );\r\n  ///===================================================================\r\n\r\n  /// From ERC-721\r\n  /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address _owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    /**\r\n    * @notice Get the approved address for a single NFT\r\n    * @dev Throws if `_tokenId` is not a valid NFT.\r\n    * @param _tokenId The NFT to find the approved address for\r\n    * @return The approved address for this NFT, or the zero address if there is none\r\n    */\r\n    function getApproved(uint256 _tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address operator) public view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: contracts\\mixins\\LockRoles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for interfacing with roles from a lock.\r\n */\r\ncontract LockRoles\r\n{\r\n  /**\r\n   * @notice Lock managers are admins for the lock contract.\r\n   */\r\n  modifier onlyLockManager(\r\n    IPublicLockV7 _lock\r\n  )\r\n  {\r\n    require(_lock.isLockManager(msg.sender), 'ONLY_LOCK_MANAGER');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Key granters and lock managers have permission to distribute keys without any expense.\r\n   */\r\n  modifier onlyKeyGranterOrManager(\r\n    IPublicLockV7 _lock\r\n  )\r\n  {\r\n    require(_lock.isKeyGranter(msg.sender) || _lock.isLockManager(msg.sender), 'ONLY_KEY_GRANTER');\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts\\hooks\\DiscountCodeHook.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Used with a Lock to offer discounts if the user enters a code.\r\n * @dev One instance of this contract may be used for all v7 locks.\r\n */\r\ncontract DiscountCodeHook is ILockKeyPurchaseHookV7, LockRoles\r\n{\r\n  using SafeMath for uint;\r\n\r\n  event AddCode(address indexed lock, address codeAddress, uint discountBasisPoints);\r\n\r\n  /**\r\n   * @notice The code expressed as an address where the private key is\r\n   * keccak256(abi.encode(code, lock.address)).\r\n   * The discount is in basis points, so 1000 == 10%\r\n   */\r\n  mapping(address => mapping(address => uint)) public lockToCodeAddressToDiscountBasisPoints;\r\n\r\n  /**\r\n   * @notice Allows a lock manager to add or remove discount codes.\r\n   * @dev To remove a code, just set the discount to 0.\r\n   */\r\n  function addCodes(\r\n    IPublicLockV7 _lock,\r\n    address[] calldata _codeAddresses,\r\n    uint[] calldata _discountBasisPoints\r\n  ) external\r\n    onlyLockManager(_lock)\r\n  {\r\n    for(uint i = 0; i < _codeAddresses.length; i++)\r\n    {\r\n      address codeAddress = _codeAddresses[i];\r\n      require(codeAddress != address(0), 'INVALID_CODE');\r\n      uint discountBasisPoints = _discountBasisPoints[i];\r\n      lockToCodeAddressToDiscountBasisPoints[address(_lock)][codeAddress] = discountBasisPoints;\r\n      emit AddCode(address(_lock), codeAddress, discountBasisPoints);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the price per key after considering the code entered.\r\n   * If the code is missing or incorrect, the lock's normal keyPrice will be used.\r\n   * @param _recipient the account which will be granted a key\r\n   * @param _signature the signature created from the code's private key, signing\r\n   * the message `\"\\x19Ethereum Signed Message:\\n32\" + keccak256(_recipient)`.\r\n   * This is passed through the lock by setting the `_data` field on purchase.\r\n   */\r\n  function keyPurchasePrice(\r\n    address /*from*/,\r\n    address _recipient,\r\n    address /*referrer*/,\r\n    bytes calldata _signature\r\n  ) external view\r\n    returns (uint minKeyPrice)\r\n  {\r\n    bytes32 secretMessage = ECDSA.toEthSignedMessageHash(keccak256(abi.encode(_recipient)));\r\n    address codeAddress = ECDSA.recover(secretMessage, _signature);\r\n    uint discountBP = lockToCodeAddressToDiscountBasisPoints[msg.sender][codeAddress];\r\n    minKeyPrice = IPublicLockV7(msg.sender).keyPrice();\r\n    if(discountBP > 0)\r\n    {\r\n      uint discount = minKeyPrice.mul(discountBP).div(10000);\r\n      minKeyPrice = minKeyPrice.sub(discount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice This function allows the hook to reject purchases, but that's\r\n   * not applicable for this use case.\r\n   */\r\n  function onKeyPurchase(\r\n    address /*from*/,\r\n    address /*_recipient*/,\r\n    address /*referrer*/,\r\n    bytes calldata /*_data*/,\r\n    uint /*minKeyPrice*/,\r\n    uint /*pricePaid*/\r\n  ) external\r\n  {\r\n    // no-op\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountBasisPoints\",\"type\":\"uint256\"}],\"name\":\"AddCode\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPublicLockV7\",\"name\":\"_lock\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_codeAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_discountBasisPoints\",\"type\":\"uint256[]\"}],\"name\":\"addCodes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockToCodeAddressToDiscountBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DiscountCodeHook","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"2000000","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://10d8538347fead1d2268d580aa4acb52f52a90c0d99551d788eb97da05d45d86"}]}