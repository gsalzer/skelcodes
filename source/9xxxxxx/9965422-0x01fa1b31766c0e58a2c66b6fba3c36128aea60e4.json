{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\ncontract ITokensTypeStorage {\r\n  mapping(address => bool) public isRegistred;\r\n\r\n  mapping(address => bytes32) public getType;\r\n\r\n  mapping(address => bool) public isPermittedAddress;\r\n\r\n  address public owner;\r\n\r\n  function addNewTokenType(address _token, string _type) public;\r\n\r\n  function setTokenTypeAsOwner(address _token, string _type) public;\r\n}\r\n\r\n\r\ncontract UniswapFactoryInterface {\r\n    // Public Variables\r\n    address public exchangeTemplate;\r\n    uint256 public tokenCount;\r\n    // Create Exchange\r\n    function createExchange(address token) external returns (address exchange);\r\n    // Get Exchange and Token Info\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    // Never use\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n\r\ncontract IBancorFormula {\r\n    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _depositAmount) public view returns (uint256);\r\n    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint32 _reserveRatio, uint256 _sellAmount) public view returns (uint256);\r\n    function calculateCrossReserveReturn(uint256 _fromReserveBalance, uint32 _fromReserveRatio, uint256 _toReserveBalance, uint32 _toReserveRatio, uint256 _amount) public view returns (uint256);\r\n    function calculateFundCost(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) public view returns (uint256);\r\n    function calculateLiquidateReturn(uint256 _supply, uint256 _reserveBalance, uint32 _totalRatio, uint256 _amount) public view returns (uint256);\r\n}\r\n\r\n\r\ncontract IGetBancorAddressFromRegistry{\r\n  function getBancorContractAddresByName(string _name) public view returns (address result);\r\n}\r\n\r\n\r\ncontract IGetRatioForBancorAssets {\r\n  function getRatio(address _from, address _to, uint256 _amount) public view returns(uint256 result);\r\n}\r\n\r\n\r\n\r\ncontract BancorConverterInterface {\r\n  ERC20[] public connectorTokens;\r\n  function fund(uint256 _amount) public;\r\n  function liquidate(uint256 _amount) public;\r\n  function getConnectorBalance(ERC20 _connectorToken) public view returns (uint256);\r\n}\r\n\r\n\r\n/*\r\n* This contract allow buy/sell pool for Bancor and Uniswap assets\r\n* and provide ratio and addition info for pool assets\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract SmartTokenInterface is ERC20 {\r\n  function disableTransfers(bool _disable) public;\r\n  function issue(address _to, uint256 _amount) public;\r\n  function destroy(address _from, uint256 _amount) public;\r\n  function owner() public view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoolPortal {\r\n  using SafeMath for uint256;\r\n\r\n  IGetRatioForBancorAssets public bancorRatio;\r\n  IGetBancorAddressFromRegistry public bancorRegistry;\r\n  UniswapFactoryInterface public uniswapFactory;\r\n\r\n  address public BancorEtherToken;\r\n\r\n  // CoTrader platform recognize ETH by this address\r\n  ERC20 constant private ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n  // Enum\r\n  // NOTE: You can add a new type at the end, but do not change this order\r\n  enum PortalType { Bancor, Uniswap }\r\n\r\n  // events\r\n  event BuyPool(address poolToken, uint256 amount, address trader);\r\n  event SellPool(address poolToken, uint256 amount, address trader);\r\n\r\n  // Contract for handle tokens types\r\n  ITokensTypeStorage public tokensTypes;\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _bancorRegistryWrapper  address of GetBancorAddressFromRegistry\r\n  * @param _bancorRatio            address of GetRatioForBancorAssets\r\n  * @param _bancorEtherToken       address of Bancor ETH wrapper\r\n  * @param _uniswapFactory         address of Uniswap factory contract\r\n  * @param _tokensTypes            address of the ITokensTypeStorage\r\n  */\r\n  constructor(\r\n    address _bancorRegistryWrapper,\r\n    address _bancorRatio,\r\n    address _bancorEtherToken,\r\n    address _uniswapFactory,\r\n    address _tokensTypes\r\n\r\n  )\r\n  public\r\n  {\r\n    bancorRegistry = IGetBancorAddressFromRegistry(_bancorRegistryWrapper);\r\n    bancorRatio = IGetRatioForBancorAssets(_bancorRatio);\r\n    BancorEtherToken = _bancorEtherToken;\r\n    uniswapFactory = UniswapFactoryInterface(_uniswapFactory);\r\n    tokensTypes = ITokensTypeStorage(_tokensTypes);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev buy Bancor or Uniswap pool\r\n  *\r\n  * @param _amount     amount of pool token\r\n  * @param _type       pool type\r\n  * @param _poolToken  pool token address\r\n  */\r\n  function buyPool\r\n  (\r\n    uint256 _amount,\r\n    uint _type,\r\n    ERC20 _poolToken\r\n  )\r\n  external\r\n  payable\r\n  {\r\n    if(_type == uint(PortalType.Bancor)){\r\n      buyBancorPool(_poolToken, _amount);\r\n    }\r\n    else if (_type == uint(PortalType.Uniswap)){\r\n      require(_amount == msg.value, \"Not enough ETH\");\r\n      buyUniswapPool(_poolToken, _amount);\r\n    }\r\n    else{\r\n      // unknown portal type\r\n      revert();\r\n    }\r\n\r\n    emit BuyPool(address(_poolToken), _amount, msg.sender);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Bancor network\r\n  *\r\n  * @param _poolToken        address of bancor converter\r\n  * @param _amount           amount of bancor relay\r\n  */\r\n  function buyBancorPool(ERC20 _poolToken, uint256 _amount) private {\r\n    // get Bancor converter\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken));\r\n    // calculate connectors amount for buy certain pool amount\r\n    (uint256 bancorAmount,\r\n     uint256 connectorAmount) = getBancorConnectorsAmountByRelayAmount(_amount, _poolToken);\r\n    // get converter as contract\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n    // approve bancor and coonector amount to converter\r\n    // get connectors\r\n    (ERC20 bancorConnector,\r\n    ERC20 ercConnector) = getBancorConnectorsByRelay(address(_poolToken));\r\n    // reset approve (some ERC20 not allow do new approve if already approved)\r\n    bancorConnector.approve(converterAddress, 0);\r\n    ercConnector.approve(converterAddress, 0);\r\n    // transfer from fund and approve to converter\r\n    _transferFromSenderAndApproveTo(bancorConnector, bancorAmount, converterAddress);\r\n    _transferFromSenderAndApproveTo(ercConnector, connectorAmount, converterAddress);\r\n    // buy relay from converter\r\n    converter.fund(_amount);\r\n\r\n    require(_amount > 0, \"BNT pool recieved amount can not be zerro\");\r\n\r\n    // transfer relay back to smart fund\r\n    _poolToken.transfer(msg.sender, _amount);\r\n\r\n    // transfer connectors back if a small amount remains\r\n    uint256 bancorRemains = bancorConnector.balanceOf(address(this));\r\n    if(bancorRemains > 0)\r\n       bancorConnector.transfer(msg.sender, bancorRemains);\r\n\r\n    uint256 ercRemains = ercConnector.balanceOf(address(this));\r\n    if(ercRemains > 0)\r\n        ercConnector.transfer(msg.sender, ercRemains);\r\n\r\n    setTokenType(_poolToken, \"BANCOR POOL\");\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for buy pool in Uniswap network\r\n  *\r\n  * @param _poolToken        address of Uniswap exchange\r\n  * @param _ethAmount        ETH amount (in wei)\r\n  */\r\n  function buyUniswapPool(address _poolToken, uint256 _ethAmount)\r\n  private\r\n  returns(uint256 poolAmount)\r\n  {\r\n    // get token address\r\n    address tokenAddress = uniswapFactory.getToken(_poolToken);\r\n    // check if such a pool exist\r\n    if(tokenAddress != address(0x0000000000000000000000000000000000000000)){\r\n      // get tokens amd approve to exchange\r\n      uint256 erc20Amount = getUniswapTokenAmountByETH(tokenAddress, _ethAmount);\r\n      _transferFromSenderAndApproveTo(ERC20(tokenAddress), erc20Amount, _poolToken);\r\n      // get exchange contract\r\n      UniswapExchangeInterface exchange = UniswapExchangeInterface(_poolToken);\r\n      // set deadline\r\n      uint256 deadline = now + 15 minutes;\r\n      // buy pool\r\n      poolAmount = exchange.addLiquidity.value(_ethAmount)(\r\n        1,\r\n        erc20Amount,\r\n        deadline);\r\n      // reset approve (some ERC20 not allow do new approve if already approved)\r\n      ERC20(tokenAddress).approve(_poolToken, 0);\r\n\r\n      require(poolAmount > 0, \"UNI pool recieved amount can not be zerro\");\r\n\r\n      // transfer pool token back to smart fund\r\n      ERC20(_poolToken).transfer(msg.sender, poolAmount);\r\n      // transfer ERC20 remains\r\n      uint256 remainsERC = ERC20(tokenAddress).balanceOf(address(this));\r\n      if(remainsERC > 0)\r\n          ERC20(tokenAddress).transfer(msg.sender, remainsERC);\r\n\r\n      setTokenType(_poolToken, \"UNISWAP POOL\");\r\n    }else{\r\n      // throw if such pool not Exist in Uniswap network\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev return token amount by ETH input ratio\r\n  *\r\n  * @param _token     address of ERC20 token\r\n  * @param _amount    ETH amount (in wei)\r\n  */\r\n  function getUniswapTokenAmountByETH(address _token, uint256 _amount)\r\n  public\r\n  view\r\n  returns(uint256)\r\n  {\r\n    UniswapExchangeInterface exchange = UniswapExchangeInterface(\r\n      uniswapFactory.getExchange(_token));\r\n    return exchange.getTokenToEthOutputPrice(_amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev sell Bancor or Uniswap pool\r\n  *\r\n  * @param _amount     amount of pool token\r\n  * @param _type       pool type\r\n  * @param _poolToken  pool token address\r\n  */\r\n  function sellPool\r\n  (\r\n    uint256 _amount,\r\n    uint _type,\r\n    ERC20 _poolToken\r\n  )\r\n  external\r\n  payable\r\n  {\r\n    if(_type == uint(PortalType.Bancor)){\r\n      sellPoolViaBancor(_poolToken, _amount);\r\n    }\r\n    else if (_type == uint(PortalType.Uniswap)){\r\n      sellPoolViaUniswap(_poolToken, _amount);\r\n    }\r\n    else{\r\n      // unknown portal type\r\n      revert();\r\n    }\r\n\r\n    emit SellPool(address(_poolToken), _amount, msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for sell pool in Bancor network\r\n  *\r\n  * @param _poolToken        address of bancor relay\r\n  * @param _amount           amount of bancor relay\r\n  */\r\n  function sellPoolViaBancor(ERC20 _poolToken, uint256 _amount) private {\r\n    // transfer pool from fund\r\n    _poolToken.transferFrom(msg.sender, address(this), _amount);\r\n    // get Bancor Converter address\r\n    address converterAddress = getBacorConverterAddressByRelay(address(_poolToken));\r\n    // liquidate relay\r\n    BancorConverterInterface(converterAddress).liquidate(_amount);\r\n    // get connectors\r\n    (ERC20 bancorConnector,\r\n    ERC20 ercConnector) = getBancorConnectorsByRelay(address(_poolToken));\r\n    // transfer connectors back to fund\r\n    bancorConnector.transfer(msg.sender, bancorConnector.balanceOf(this));\r\n    ercConnector.transfer(msg.sender, ercConnector.balanceOf(this));\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for sell pool in Uniswap network\r\n  *\r\n  * @param _poolToken        address of uniswap exchane\r\n  * @param _amount           amount of uniswap pool\r\n  */\r\n  function sellPoolViaUniswap(ERC20 _poolToken, uint256 _amount) private {\r\n    address tokenAddress = uniswapFactory.getToken(_poolToken);\r\n    // check if such a pool exist\r\n    if(tokenAddress != address(0x0000000000000000000000000000000000000000)){\r\n      UniswapExchangeInterface exchange = UniswapExchangeInterface(_poolToken);\r\n      // approve pool token\r\n      _transferFromSenderAndApproveTo(ERC20(_poolToken), _amount, _poolToken);\r\n      // get min returns\r\n      (uint256 minEthAmount,\r\n        uint256 minErcAmount) = getUniswapConnectorsAmountByPoolAmount(\r\n          _amount,\r\n          address(_poolToken));\r\n      // set deadline\r\n      uint256 deadline = now + 15 minutes;\r\n      // liquidate\r\n      (uint256 eth_amount,\r\n       uint256 token_amount) = exchange.removeLiquidity(\r\n         _amount,\r\n         minEthAmount,\r\n         minErcAmount,\r\n         deadline);\r\n      // transfer assets back to smart fund\r\n      msg.sender.transfer(eth_amount);\r\n      ERC20(tokenAddress).transfer(msg.sender, token_amount);\r\n    }else{\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev helper for get bancor converter by bancor relay addrses\r\n  *\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBacorConverterAddressByRelay(address _relay)\r\n  public\r\n  view\r\n  returns(address converter)\r\n  {\r\n    converter = SmartTokenInterface(_relay).owner();\r\n  }\r\n\r\n  /**\r\n  * @dev helper for get Bancor ERC20 connectors addresses\r\n  *\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBancorConnectorsByRelay(address _relay)\r\n  public\r\n  view\r\n  returns(\r\n    ERC20 BNTConnector,\r\n    ERC20 ERCConnector\r\n  )\r\n  {\r\n    address converterAddress = getBacorConverterAddressByRelay(_relay);\r\n    BancorConverterInterface converter = BancorConverterInterface(converterAddress);\r\n    BNTConnector = converter.connectorTokens(0);\r\n    ERCConnector = converter.connectorTokens(1);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev return ERC20 address from Uniswap exchange address\r\n  *\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getTokenByUniswapExchange(address _exchange)\r\n  public\r\n  view\r\n  returns(address)\r\n  {\r\n    return uniswapFactory.getToken(_exchange);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get amounts for both Uniswap connectors for input amount of pool\r\n  *\r\n  * @param _amount         relay amount\r\n  * @param _exchange       address of uniswap exchane\r\n  */\r\n  function getUniswapConnectorsAmountByPoolAmount(\r\n    uint256 _amount,\r\n    address _exchange\r\n  )\r\n  public\r\n  view\r\n  returns(uint256 ethAmount, uint256 ercAmount)\r\n  {\r\n    ERC20 token = ERC20(uniswapFactory.getToken(_exchange));\r\n    // total_liquidity exchange.totalSupply\r\n    uint256 totalLiquidity = UniswapExchangeInterface(_exchange).totalSupply();\r\n    // ethAmount = amount * exchane.eth.balance / total_liquidity\r\n    ethAmount = _amount.mul(_exchange.balance).div(totalLiquidity);\r\n    // ercAmount = amount * token.balanceOf(exchane) / total_liquidity\r\n    ercAmount = _amount.mul(token.balanceOf(_exchange)).div(totalLiquidity);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev helper for get amount for both Bancor connectors for input amount of pool\r\n  *\r\n  * @param _amount      relay amount\r\n  * @param _relay       address of bancor relay\r\n  */\r\n  function getBancorConnectorsAmountByRelayAmount\r\n  (\r\n    uint256 _amount,\r\n    ERC20 _relay\r\n  )\r\n  public view returns(uint256 bancorAmount, uint256 connectorAmount) {\r\n    // get converter contract\r\n    BancorConverterInterface converter = BancorConverterInterface(\r\n      SmartTokenInterface(_relay).owner());\r\n    // calculate BNT and second connector amount\r\n    // get connectors\r\n    ERC20 bancorConnector = converter.connectorTokens(0);\r\n    ERC20 ercConnector = converter.connectorTokens(1);\r\n    // get connectors balance\r\n    uint256 bntBalance = converter.getConnectorBalance(bancorConnector);\r\n    uint256 ercBalance = converter.getConnectorBalance(ercConnector);\r\n    // get bancor formula contract\r\n    IBancorFormula bancorFormula = IBancorFormula(\r\n      bancorRegistry.getBancorContractAddresByName(\"BancorFormula\"));\r\n    // calculate input\r\n    bancorAmount = bancorFormula.calculateFundCost(\r\n      _relay.totalSupply(),\r\n      bntBalance,\r\n      1000000,\r\n       _amount);\r\n    connectorAmount = bancorFormula.calculateFundCost(\r\n      _relay.totalSupply(),\r\n      ercBalance,\r\n      1000000,\r\n       _amount);\r\n  }\r\n\r\n  /**\r\n  * @dev helper for get ratio between assets in bancor newtork\r\n  *\r\n  * @param _from      token or relay address\r\n  * @param _to        token or relay address\r\n  * @param _amount    amount from\r\n  */\r\n  function getBancorRatio(address _from, address _to, uint256 _amount)\r\n  public\r\n  view\r\n  returns(uint256)\r\n  {\r\n    // Change ETH to Bancor ETH wrapper\r\n    address fromAddress = ERC20(_from) == ETH_TOKEN_ADDRESS ? BancorEtherToken : _from;\r\n    address toAddress = ERC20(_to) == ETH_TOKEN_ADDRESS ? BancorEtherToken : _to;\r\n    // return Bancor ratio\r\n    return bancorRatio.getRatio(fromAddress, toAddress, _amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Transfers tokens to this contract and approves them to another address\r\n  *\r\n  * @param _source          Token to transfer and approve\r\n  * @param _sourceAmount    The amount to transfer and approve (in _source token)\r\n  * @param _to              Address to approve to\r\n  */\r\n  function _transferFromSenderAndApproveTo(ERC20 _source, uint256 _sourceAmount, address _to) private {\r\n    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\r\n\r\n    _source.approve(_to, _sourceAmount);\r\n  }\r\n\r\n  // Pool portal can mark each pool token as UNISWAP or BANCOR\r\n  function setTokenType(address _token, string _type) private {\r\n    // no need add type, if token alredy registred\r\n    if(tokensTypes.isRegistred(_token))\r\n      return;\r\n\r\n    tokensTypes.addNewTokenType(_token,  _type);\r\n  }\r\n\r\n  // fallback payable function to receive ether from other contract addresses\r\n  function() public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bancorRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getUniswapConnectorsAmountByPoolAmount\",\"outputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"ercAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"getTokenByUniswapExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBancorConnectorsByRelay\",\"outputs\":[{\"name\":\"BNTConnector\",\"type\":\"address\"},{\"name\":\"ERCConnector\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getUniswapTokenAmountByETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"sellPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBancorConnectorsAmountByRelayAmount\",\"outputs\":[{\"name\":\"bancorAmount\",\"type\":\"uint256\"},{\"name\":\"connectorAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBancorRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BancorEtherToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"buyPool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"getBacorConverterAddressByRelay\",\"outputs\":[{\"name\":\"converter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bancorRegistryWrapper\",\"type\":\"address\"},{\"name\":\"_bancorRatio\",\"type\":\"address\"},{\"name\":\"_bancorEtherToken\",\"type\":\"address\"},{\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"name\":\"_tokensTypes\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"BuyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"SellPool\",\"type\":\"event\"}]","ContractName":"PoolPortal","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000178c68aefdcae5c9818e43addf6a2b66df534ed50000000000000000000000003079a42efbd0027318baa0dd81d002c0929b502c000000000000000000000000c0829421c1d260bd3cb3e0f06cfe2d52db2ce315000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d9500000000000000000000000067d635a86d5bff3d3742a93761be0e272bb7541e","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://59ad9446ea6f4c8b443ae0269ae0029c32793eb4c0a8f31e5a080229ec90d8c5"}]}