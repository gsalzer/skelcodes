{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token contract\r\n * returns false). Tokens that return no value (and instead revert or throw on failure)\r\n * are also supported, non-reverting calls are assumed to be successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\r\n    function safeTransfer(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 value,\r\n        string memory location\r\n    )\r\n        internal\r\n    {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.transfer.selector,\r\n                to,\r\n                value\r\n            ),\r\n            \"transfer\",\r\n            location\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string memory location\r\n    )\r\n        internal\r\n    {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.transferFrom.selector,\r\n                from,\r\n                to,\r\n                value\r\n            ),\r\n            \"transferFrom\",\r\n            location\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 token,\r\n        address spender,\r\n        uint256 value,\r\n        string memory location\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: wrong approve call\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                value\r\n            ),\r\n            \"approve\",\r\n            location\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract),\r\n     * relaxing the requirement on the return value: the return value is optional\r\n     * (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     * @param location Location of the call (for debug).\r\n     */\r\n    function callOptionalReturn(\r\n        ERC20 token,\r\n        bytes memory data,\r\n        string memory functionName,\r\n        string memory location\r\n    )\r\n        private\r\n    {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking\r\n        // mechanism, since we're implementing it ourselves.\r\n\r\n        // We implement two-steps call as callee is a contract is a responsibility of a caller.\r\n        //  1. The call itself is made, and success asserted\r\n        //  2. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(\r\n            success,\r\n            string(\r\n                abi.encodePacked(\r\n                    \"SafeERC20: \",\r\n                    functionName,\r\n                    \" failed in \",\r\n                    location\r\n                )\r\n            )\r\n        );\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: false returned\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nstruct Action {\r\n    ActionType actionType;\r\n    bytes32 protocolName;\r\n    uint256 adapterIndex;\r\n    address[] tokens;\r\n    uint256[] amounts;\r\n    AmountType[] amountTypes;\r\n    bytes data;\r\n}\r\n\r\nenum ActionType { None, Deposit, Withdraw }\r\n\r\n\r\nenum AmountType { None, Relative, Absolute }\r\n\r\n\r\n/**\r\n * @title Protocol adapter interface.\r\n * @dev adapterType(), tokenType(), and getBalance() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\nabstract contract ProtocolAdapter {\r\n\r\n    /**\r\n     * @dev MUST return \"Asset\" or \"Debt\".\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function adapterType() external pure virtual returns (bytes32);\r\n\r\n    /**\r\n     * @dev MUST return token type (default is \"ERC20\").\r\n     * SHOULD be implemented by the public constant state variable.\r\n     */\r\n    function tokenType() external pure virtual returns (bytes32);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given token locked on the protocol by the given account.\r\n     */\r\n    function getBalance(address token, address account) public view virtual returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Adapter for OneSplit exchange.\r\n * @dev Implementation of ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract OneSplitAdapter is ProtocolAdapter {\r\n\r\n    bytes32 public constant override adapterType = \"Exchange\";\r\n\r\n    bytes32 public constant override tokenType = \"\";\r\n\r\n    /**\r\n     * @return Amount of Uniswap pool tokens held by the given account.\r\n     * @dev Implementation of ProtocolAdapter interface function.\r\n     */\r\n    function getBalance(address, address) public view override returns (uint256) {\r\n        revert(\"OSA: no balance!\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Base contract for interactive protocol adapters.\r\n * @dev deposit() and withdraw() functions MUST be implemented\r\n * as well as all the functions from ProtocolAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\nabstract contract InteractiveAdapter is ProtocolAdapter {\r\n\r\n    uint256 internal constant RELATIVE_AMOUNT_BASE = 1e18;\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /**\r\n     * @dev The function must deposit assets to the protocol.\r\n     * @return MUST return assets to be sent back to the `msg.sender`.\r\n     */\r\n    function deposit(\r\n        address[] memory tokens,\r\n        uint256[] memory amounts,\r\n        AmountType[] memory amountTypes,\r\n        bytes memory data\r\n    )\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address[] memory);\r\n\r\n    /**\r\n     * @dev The function must withdraw assets from the protocol.\r\n     * @return MUST return assets to be sent back to the `msg.sender`.\r\n     */\r\n    function withdraw(\r\n        address[] memory tokens,\r\n        uint256[] memory amounts,\r\n        AmountType[] memory amountTypes,\r\n        bytes memory data\r\n    )\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address[] memory);\r\n\r\n    function getAbsoluteAmountDeposit(\r\n        address token,\r\n        uint256 amount,\r\n        AmountType amountType\r\n    )\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        if (amountType == AmountType.Relative) {\r\n            require(amount <= RELATIVE_AMOUNT_BASE, \"L: wrong relative value!\");\r\n\r\n            uint256 totalAmount;\r\n            if (token == ETH) {\r\n                totalAmount = address(this).balance;\r\n            } else {\r\n                totalAmount = ERC20(token).balanceOf(address(this));\r\n            }\r\n\r\n            if (amount == RELATIVE_AMOUNT_BASE) {\r\n                return totalAmount;\r\n            } else {\r\n                return totalAmount * amount / RELATIVE_AMOUNT_BASE; // TODO overflow check\r\n            }\r\n        } else {\r\n            return amount;\r\n        }\r\n    }\r\n\r\n    function getAbsoluteAmountWithdraw(\r\n        address token,\r\n        uint256 amount,\r\n        AmountType amountType\r\n    )\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        if (amountType == AmountType.Relative) {\r\n            require(amount <= RELATIVE_AMOUNT_BASE, \"L: wrong relative value!\");\r\n\r\n            if (amount == RELATIVE_AMOUNT_BASE) {\r\n                return getBalance(token, address(this));\r\n            } else {\r\n                return getBalance(token, address(this)) * amount / RELATIVE_AMOUNT_BASE; // TODO overflow check\r\n            }\r\n        } else {\r\n            return amount;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev OneSplit contract interface.\r\n * Only the functions required for OneSplitInteractiveAdapter contract are added.\r\n * The OneSplit contract is available here\r\n * github.com/CryptoManiacsZone/1split/blob/master/contracts/OneSplit.sol.\r\n */\r\ninterface OneSplit {\r\n    function swap(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256[] calldata,\r\n        uint256\r\n    )\r\n        external\r\n        payable;\r\n    function getExpectedReturn(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256\r\n    )\r\n        external\r\n        view\r\n        returns (uint256, uint256[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @title Interactive adapter for OneSplit exchange.\r\n * @dev Implementation of InteractiveAdapter abstract contract.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract OneSplitInteractiveAdapter is InteractiveAdapter, OneSplitAdapter {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address internal constant ONE_SPLIT = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n\r\n    /**\r\n     * @notice Exchanges tokens using OneSplit contract.\r\n     * @param tokens Array with one element - `fromToken` address.\r\n     * @param amounts Array with one element - token amount to be exchanged.\r\n     * @param amountTypes Array with one element - amount type.\r\n     * @param data Bytes array with ABI-encoded `toToken` address.\r\n     * @return Asset sent back to the msg.sender.\r\n     * @dev Implementation of InteractiveAdapter function.\r\n     */\r\n    function deposit(\r\n        address[] memory tokens,\r\n        uint256[] memory amounts,\r\n        AmountType[] memory amountTypes,\r\n        bytes memory data\r\n    )\r\n        public\r\n        payable\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        require(tokens.length == 1, \"OSIA: should be 1 token/amount/type!\");\r\n\r\n        uint256 amount = getAbsoluteAmountDeposit(tokens[0], amounts[0], amountTypes[0]);\r\n\r\n        address fromToken = tokens[0];\r\n        if (fromToken == ETH) {\r\n            fromToken = address(0);\r\n        } else {\r\n            ERC20(fromToken).safeApprove(ONE_SPLIT, amount, \"OSIA!\");\r\n        }\r\n\r\n        address[] memory tokensToBeWithdrawn;\r\n\r\n        address toToken = abi.decode(data, (address));\r\n        if (toToken == ETH) {\r\n            tokensToBeWithdrawn = new address[](0);\r\n            toToken = address(0);\r\n        } else {\r\n            tokensToBeWithdrawn = new address[](1);\r\n            tokensToBeWithdrawn[0] = toToken;\r\n        }\r\n\r\n        swap(fromToken, toToken, amount);\r\n\r\n        return tokensToBeWithdrawn;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is unavailable in Exchange type adapters.\r\n     * @dev Implementation of InteractiveAdapter function.\r\n     */\r\n    function withdraw(\r\n        address[] memory,\r\n        uint256[] memory,\r\n        AmountType[] memory,\r\n        bytes memory\r\n    )\r\n        public\r\n        payable\r\n        override\r\n        returns (address[] memory)\r\n    {\r\n        revert(\"OSIA: no withdraw!\");\r\n    }\r\n\r\n    function swap(address fromToken, address toToken, uint256 amount) internal {\r\n        uint256[] memory distribution;\r\n\r\n        try OneSplit(ONE_SPLIT).getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            uint256(1),\r\n            uint256(0x040df0) // 0x040dfc to enable curve; 0x04fdf0 to enable base exchanges;\r\n        ) returns (uint256, uint256[] memory result) {\r\n            distribution = result;\r\n        } catch Error(string memory reason) {\r\n            revert(reason);\r\n        } catch (bytes memory) {\r\n            revert(\"OSIA: 1split fail![1]\");\r\n        }\r\n\r\n        uint256 value = fromToken == address(0) ? amount : 0;\r\n        try OneSplit(ONE_SPLIT).swap.value(value)(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            uint256(1),\r\n            distribution,\r\n            uint256(0x040df0) // 0x040dfc to enable curve; 0x04fdf0 to enable base exchanges;\r\n        ) {} catch Error(string memory reason) {\r\n            revert(reason);\r\n        } catch (bytes memory) {\r\n            revert(\"OSIA: 1split fail![2]\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"adapterType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AmountType[]\",\"name\":\"amountTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"enum AmountType[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"OneSplitInteractiveAdapter","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://8e6906f4098059edc2c690ebb3bdec6ff1f72ef46d7190143d8a62a2d10ceb71"}]}