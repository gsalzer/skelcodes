{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/InternalModule.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ncontract InternalModule {\r\n\r\n    address[] _authAddress;\r\n\r\n    address payable[] public _contractOwners = [\r\n        address(0x16F2F7eaC61e53271593C6F0BF301afb62837c9c),  // BBE\r\n        address(0xB3707f6130DBe9a0EceB1278172Dce9B0c9a2EFB)\r\n    ];\r\n\r\n    address payable public _defaultReciver = address(0xf2B64c2fFBD458cCC667c66c0C4B278A88450a63);\r\n\r\n    constructor() public {\r\n\r\n        require(_contractOwners.length > 0);\r\n\r\n        _defaultReciver = _contractOwners[0];\r\n    }\r\n\r\n    modifier OwnerOnly() {\r\n\r\n        bool exist = false;\r\n        for ( uint i = 0; i < _contractOwners.length; i++ ) {\r\n            if ( _contractOwners[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(exist); _;\r\n    }\r\n\r\n    modifier DAODefense() {\r\n        uint256 size;\r\n        address payable safeAddr = msg.sender;\r\n        assembly {size := extcodesize(safeAddr)}\r\n        require( size == 0, \"DAO_Warning\" );\r\n        _;\r\n    }\r\n\r\n    modifier APIMethod() {\r\n\r\n        bool exist = false;\r\n\r\n        for (uint i = 0; i < _authAddress.length; i++) {\r\n            if ( _authAddress[i] == msg.sender ) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(exist); _;\r\n    }\r\n\r\n    function AuthAddresses() external view returns (address[] memory authAddr) {\r\n        return _authAddress;\r\n    }\r\n\r\n    function AddAuthAddress(address _addr) external OwnerOnly {\r\n        _authAddress.push(_addr);\r\n    }\r\n\r\n    function DelAuthAddress(address _addr) external OwnerOnly {\r\n\r\n        for (uint i = 0; i < _authAddress.length; i++) {\r\n            if (_authAddress[i] == _addr) {\r\n                for (uint j = 0; j < _authAddress.length - 1; j++) {\r\n                    _authAddress[j] = _authAddress[j+1];\r\n                }\r\n                delete _authAddress[_authAddress.length - 1];\r\n                _authAddress.length--;\r\n                return ;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // function EndTestRound() external {\r\n    //     address payable lpiaddrA = address( uint160( address(_contractOwners[0]) ) );\r\n    //     selfdestruct(lpiaddrA);\r\n    // }\r\n}\r\n\r\n// File: contracts/interface/luckassetspool/LuckAssetsPoolInterface.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\ninterface LuckAssetsPoolInterface {\r\n\r\n    /// get my reward prices\r\n    function RewardsAmount() external view returns (uint256);\r\n\r\n    /// withdraw my all rewards\r\n    function WithdrawRewards() external returns (uint256);\r\n\r\n    function InPoolProp() external view returns (uint256);\r\n\r\n    /// append user to latest.\r\n    function API_AddLatestAddress( address owner, uint256 amount ) external returns (bool openable);\r\n\r\n    /// only in LuckAssetsPoolA\r\n    function NeedPauseGame() external view returns (bool);\r\n    function API_Reboot() external returns (bool);\r\n\r\n    /// only in LuckAssetsPoolB\r\n    function API_GameOver() external returns (bool);\r\n\r\n    function API_Clear( address owner ) external;\r\n\r\n    event Log_Winner( address owner, uint256 when, uint256 amount);\r\n}\r\n\r\n// File: contracts/interface/lib_math.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\nlibrary lib_math {\r\n\r\n    function CurrentDayzeroTime() public view returns (uint256) {\r\n        return (now / OneDay()) * OneDay();\r\n    }\r\n\r\n    function ConvertTimeToDay(uint256 t) public pure returns (uint256) {\r\n        return (t / OneDay()) * OneDay();\r\n    }\r\n\r\n    function OneDay() public pure returns (uint256) {\r\n\r\n        return 1 days;\r\n    }\r\n\r\n    function OneHours() public pure returns (uint256) {\r\n        return 1 hours;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/LuckAssetsPoolA.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\ncontract LuckAssetsPoolA is InternalModule {\r\n\r\n    struct Invest {\r\n        address who;\r\n        uint256 when;\r\n        uint256 amount;\r\n        bool rewardable;\r\n    }\r\n\r\n    bool public _needPauseGame = false;\r\n\r\n\r\n    uint256 public _winningThePrizeHours = 36;\r\n    uint256 public _lotteryTime;\r\n\r\n\r\n    uint256 public _inPoolProp = 5;\r\n\r\n\r\n    Invest[] public _investList;\r\n\r\n\r\n    uint256 public rewardsCount = 300;\r\n\r\n\r\n    uint256 public defualtProp = 3;\r\n\r\n    mapping(uint256 => uint256) public specialRewardsDescMapping;\r\n\r\n    mapping(address => uint256) public rewardsAmountMapping;\r\n\r\n    event Log_NewDeposited(address indexed owner, uint256 indexed when, uint256 indexed amount);\r\n    event Log_WinningThePrized();\r\n\r\n    constructor() public {\r\n\r\n        _lotteryTime = now + lib_math.OneDay() * 60;\r\n\r\n        specialRewardsDescMapping[0] = 100;\r\n        specialRewardsDescMapping[1] = 5;\r\n        specialRewardsDescMapping[2] = 5;\r\n        specialRewardsDescMapping[3] = 5;\r\n        specialRewardsDescMapping[4] = 5;\r\n        specialRewardsDescMapping[5] = 5;\r\n    }\r\n\r\n    /// get my reward prices\r\n    function RewardsAmount() external view returns (uint256) {\r\n        return rewardsAmountMapping[msg.sender];\r\n    }\r\n\r\n    /// withdraw my all rewards\r\n    function WithdrawRewards() external returns (uint256) {\r\n\r\n        require( rewardsAmountMapping[msg.sender] > 0, \"No Rewards\" );\r\n\r\n        uint256 size;\r\n        address payable safeAddr = msg.sender;\r\n        assembly { size := extcodesize(safeAddr) }\r\n        require( size == 0, \"DAO_Warning\" );\r\n\r\n        uint256 amount = rewardsAmountMapping[msg.sender];\r\n        rewardsAmountMapping[msg.sender] = 0;\r\n        safeAddr.transfer( amount );\r\n\r\n        return amount;\r\n    }\r\n\r\n    function InPoolProp() external view returns (uint256) {\r\n        return _inPoolProp;\r\n    }\r\n\r\n    function API_AddLatestAddress( address owner, uint256 amount ) external APIMethod returns (bool openable) {\r\n\r\n        if ( now > _lotteryTime ) {\r\n\r\n            address payable payAddress = address( uint160( address(owner) ) );\r\n\r\n            payAddress.transfer(amount + 10 ether);\r\n\r\n            WinningThePrize();\r\n\r\n            return true;\r\n        }\r\n\r\n        _investList.push( Invest(owner, now, amount, false) );\r\n        emit Log_NewDeposited(owner, now, amount);\r\n\r\n        if ( amount / 1 ether > 1 ) {\r\n\r\n            _lotteryTime += (amount / 1 ether) * lib_math.OneHours();\r\n\r\n        } else {\r\n\r\n            _lotteryTime += lib_math.OneHours();\r\n        }\r\n\r\n        if ( _lotteryTime - now > _winningThePrizeHours * lib_math.OneHours() ) {\r\n            _lotteryTime = now + _winningThePrizeHours * lib_math.OneHours();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function WinningThePrize() internal {\r\n\r\n        emit Log_WinningThePrized();\r\n\r\n        _needPauseGame = true;\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n        uint256 loopImin;\r\n\r\n        if ( _investList.length > rewardsCount ) {\r\n\r\n            loopImin = _investList.length - rewardsCount;\r\n\r\n        } else {\r\n\r\n            loopImin = 0;\r\n        }\r\n\r\n        for ( uint256 li = _investList.length; li != loopImin; li-- ) {\r\n\r\n            uint256 i = li - 1;\r\n\r\n            uint256 descIndex = (_investList.length - i) - 1;\r\n\r\n            Invest storage invest = _investList[i];\r\n\r\n            if ( invest.rewardable ) {\r\n                continue;\r\n            }\r\n\r\n            invest.rewardable = true;\r\n\r\n            uint256 rewardMul = specialRewardsDescMapping[descIndex];\r\n            if ( rewardMul == 0 ) {\r\n                rewardMul = defualtProp;\r\n            }\r\n\r\n            uint256 rewardAmount = invest.amount * rewardMul;\r\n\r\n            if ( rewardAmount < contractBalance ) {\r\n\r\n                rewardsAmountMapping[ invest.who ] = rewardAmount;\r\n                contractBalance -= rewardAmount;\r\n\r\n            } else {\r\n\r\n                rewardsAmountMapping[ invest.who ] = contractBalance;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function NeedPauseGame() external view returns (bool) {\r\n        return _needPauseGame;\r\n    }\r\n\r\n    function API_Reboot() external APIMethod returns (bool) {\r\n\r\n        _needPauseGame = false;\r\n\r\n        _lotteryTime = now + _winningThePrizeHours * lib_math.OneHours();\r\n    }\r\n\r\n    function Owner_SetInPoolProp(uint256 p) external OwnerOnly {\r\n        _inPoolProp = p;\r\n    }\r\n\r\n    function Owner_SetRewardsMulValue(uint256 desci, uint256 mulValue) external OwnerOnly {\r\n        specialRewardsDescMapping[desci] = mulValue;\r\n    }\r\n\r\n    function Owner_SetRewardsCount(uint256 c) external OwnerOnly {\r\n        rewardsCount = c;\r\n    }\r\n\r\n    function API_Clear( address owner ) external APIMethod {}\r\n\r\n    function () payable external {}\r\n\r\n    function API_GameOver() external pure returns (bool) {\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"API_AddLatestAddress\",\"outputs\":[{\"name\":\"openable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lotteryTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defualtProp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialRewardsDescMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NeedPauseGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_contractOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"AddAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_needPauseGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RewardsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"API_GameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AuthAddresses\",\"outputs\":[{\"name\":\"authAddr\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"API_Reboot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsAmountMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_investList\",\"outputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"when\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rewardable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"API_Clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"Owner_SetRewardsCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"desci\",\"type\":\"uint256\"},{\"name\":\"mulValue\",\"type\":\"uint256\"}],\"name\":\"Owner_SetRewardsMulValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"Owner_SetInPoolProp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_defaultReciver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InPoolProp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_winningThePrizeHours\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_inPoolProp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"DelAuthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Log_NewDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Log_WinningThePrized\",\"type\":\"event\"}]","ContractName":"LuckAssetsPoolA","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"lib_math:a6c9488614ec2d624e1d50700f257642a03af68e","LicenseType":"None","SwarmSource":"bzzr://6dfe962c9513710fe604000a730a8d1eb3424a0984fec7f46d6ee1d7ec17e9b6"}]}