{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract MultiSigInterface{\r\n  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);\r\n  function is_signer(address addr) public view returns(bool);\r\n}\r\n\r\ncontract MultiSigTools{\r\n  MultiSigInterface public multisig_contract;\r\n  constructor(address _contract) public{\r\n    require(_contract!= address(0x0));\r\n    multisig_contract = MultiSigInterface(_contract);\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(multisig_contract.is_signer(msg.sender), \"only a signer can call in MultiSigTools\");\r\n    _;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){\r\n      _;\r\n    }\r\n  }\r\n\r\n  event TransferMultiSig(address _old, address _new);\r\n\r\n  function transfer_multisig(uint64 id, address _contract) public only_signer\r\n  is_majority_sig(id, \"transfer_multisig\"){\r\n    require(_contract != address(0x0));\r\n    address old = address(multisig_contract);\r\n    multisig_contract = MultiSigInterface(_contract);\r\n    emit TransferMultiSig(old, _contract);\r\n  }\r\n}\r\n\r\ncontract TrustListInterface{\r\n  function is_trusted(address addr) public returns(bool);\r\n}\r\ncontract TrustListTools{\r\n  TrustListInterface public list;\r\n  constructor(address _list) public {\r\n    require(_list != address(0x0));\r\n    list = TrustListInterface(_list);\r\n  }\r\n\r\n  modifier is_trusted(address addr){\r\n    require(list.is_trusted(addr), \"not a trusted issuer\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\ncontract TransferableToken{\r\n    function balanceOf(address _owner) public returns (uint256 balance) ;\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) ;\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) ;\r\n}\r\n\r\n\r\ncontract TokenClaimer{\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n  function _claimStdTokens(address _token, address payable to) internal {\r\n        if (_token == address(0x0)) {\r\n            to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        TransferableToken token = TransferableToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n\r\n        (bool status,) = _token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, balance));\r\n        require(status, \"call failed\");\r\n        emit ClaimedTokens(_token, to, balance);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract IERC20Auction{\r\n function is_expired() public view returns(bool);\r\n\r\n function is_finished() public view returns(bool);\r\n\r\n function auction_expiration() public returns(bool);\r\n}\r\n\r\ncontract IERC20AuctionFactory{\r\n\r\n  function createERC20Auction(address _auction_proxy,\r\n              uint _min_obj_amount,\r\n              uint _min_bid_price,\r\n              uint _obj_price_unit,\r\n              uint _start_block,\r\n              uint _end_block,\r\n              address _creator,\r\n              address _multisig\r\n                             ) public returns(address);\r\n\r\n}\r\ncontract IERC20DepositPool {\r\n  event Transfer(address from, address to, uint amount);\r\n  event OutsideTransfer(address from, address to, uint amount);\r\n  event InternalTransfer(address from, address to, uint amount);\r\n  event DepositERC20(address addr, uint amount);\r\n  event WithdrawERC20(address addr, uint amount);\r\n\r\n  event LockERC20(address from, address addr, uint amount);\r\n  event UnlockERC20(address from, address addr, uint amount);\r\n\r\n  function deposit(uint _amount) public returns (bool);\r\n\r\n  function transfer(address _to, uint _amount) public returns (bool);\r\n\r\n  function withdraw(uint _amount) public returns(bool);\r\n\r\n  function lock(address addr, uint amount) public  returns (bool);\r\n\r\n  function unlock(address addr, uint amount) public  returns(bool);\r\n\r\n  function outside_transfer(address from, address to, uint _amount) public returns(bool);\r\n\r\n  function internal_transfer(address from, address to, uint amount) public returns(bool);\r\n}\r\n\r\ncontract IERC20AuctionOpProxy {\r\n  function add_auction(address _auction) public;\r\n  function apply_bid(address addr, uint amount, uint price, uint price_unit) public;\r\n  function revoke_bid(address addr, uint amount, uint price, uint price_unit) public;\r\n  function apply_auction(address addr, uint amount, uint price, uint price_unit) public;\r\n  function object_token() public view returns(address, string memory);\r\n  function object_total_amount() public view returns(uint);\r\n}\r\n\r\n\r\ncontract ERC20TokenBankInterface{\r\n  function balance() public view returns(uint);\r\n  function token() public view returns(address, string memory);\r\n  function issue(address _to, uint _amount) public returns (bool success);\r\n}\r\n\r\n\r\ncontract ERC20Auction is IERC20Auction, MultiSigTools, TokenClaimer{\r\n\r\n  IERC20AuctionOpProxy public auction_proxy;\r\n\r\n  uint public minimum_object_amount;\r\n  uint public minimum_bid_price;\r\n  uint public obj_price_unit;\r\n\r\n  uint public auction_start_block;\r\n  uint public auction_end_block;\r\n\r\n\r\n  address public current_buyer;\r\n  uint public current_bid_price;\r\n  uint public current_bid_amount;\r\n  bool public is_auction_settled;\r\n  address public auction_creator;\r\n\r\n  constructor(address _auction_proxy,\r\n              uint _min_obj_amount,\r\n              uint _min_bid_price,\r\n              uint _obj_price_unit,\r\n              uint _start_block,\r\n              uint _end_block,\r\n              address _creator,\r\n              address _multisig\r\n) public MultiSigTools(_multisig){\r\n    auction_proxy = IERC20AuctionOpProxy(_auction_proxy);\r\n    minimum_object_amount = _min_obj_amount;\r\n    minimum_bid_price = _min_bid_price;\r\n    obj_price_unit = _obj_price_unit;\r\n    auction_start_block = _start_block;\r\n    auction_end_block = _end_block;\r\n    auction_creator = _creator;\r\n    current_buyer = address(0x0);\r\n    current_bid_price = 0;\r\n    current_bid_amount = 0;\r\n    is_auction_settled = false;\r\n  }\r\n\r\n  function auction_info() public view returns (uint _min_obj_amount, uint _min_bid_price,\r\n                                              uint _obj_price_unit, uint _start_block,\r\n                                              uint _end_block){\r\n    return (minimum_object_amount, minimum_bid_price, obj_price_unit, auction_start_block, auction_end_block);\r\n  }\r\n\r\n  function hammer_info() public view returns (address buyer, uint price, uint amount){\r\n    require(is_auction_settled, \"no hammer price until auction expired\");\r\n    buyer = current_buyer;\r\n    price = current_bid_price;\r\n    amount = current_bid_amount;\r\n  }\r\n\r\n  function object_token() public view returns(address, string memory){\r\n    return auction_proxy.object_token();\r\n  }\r\n  function object_total_amount() public view returns(uint){\r\n    return auction_proxy.object_total_amount();\r\n  }\r\n\r\n  event Bid(address addr, uint amount, uint price);\r\n\r\n  function bid(uint amount, uint price) public returns (bool){\r\n    require(block.number >= auction_start_block, \"not start yet\");\r\n    require(block.number <= auction_end_block, \"already expired\");\r\n    require(price >= current_bid_price, \"should bid with higher price than current bid\");\r\n    require(price >= minimum_bid_price, \"should be higher than the reserve price\");\r\n    require(amount >= minimum_object_amount, \"should be more than minimum object amount\");\r\n    require(msg.sender != current_buyer, \"you already got the bid\");\r\n    if(price == current_bid_price){\r\n      require(amount > current_bid_amount, \"same bid price should come with more amount\");\r\n    }\r\n\r\n    require(amount <= object_total_amount(), \"not enough object token for bid\");\r\n\r\n    auction_proxy.apply_bid(msg.sender, amount, price, obj_price_unit);\r\n\r\n    if(current_buyer != address(0x0)){\r\n      auction_proxy.revoke_bid(current_buyer, current_bid_amount, current_bid_price, obj_price_unit);\r\n    }\r\n    current_buyer = msg.sender;\r\n    current_bid_price = price;\r\n    current_bid_amount = amount;\r\n    emit Bid(msg.sender, amount, price);\r\n    return true;\r\n  }\r\n\r\n  function is_expired() public view returns(bool){\r\n    return block.number > auction_end_block;\r\n  }\r\n\r\n  function is_finished() public view returns(bool){\r\n    return is_auction_settled;\r\n  }\r\n\r\n  function auction_expiration() public returns (bool){\r\n    require(block.number > auction_end_block, \"not expired yet\");\r\n    require(!is_auction_settled, \"auction settled already\");\r\n    if(current_buyer == address(0x0)){\r\n      is_auction_settled = true;\r\n      return true;\r\n    }\r\n    auction_proxy.apply_auction(current_buyer, current_bid_amount, current_bid_price, obj_price_unit);\r\n\r\n    is_auction_settled = true;\r\n    return true;\r\n  }\r\n\r\n  function claimStdTokens(uint64 id, address _token, address payable to) public only_signer is_majority_sig(id, \"claimStdTokens\"){\r\n    _claimStdTokens(_token, to);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"auction_start_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimStdTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"transfer_multisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_object_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_bid_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction_info\",\"outputs\":[{\"name\":\"_min_obj_amount\",\"type\":\"uint256\"},{\"name\":\"_min_bid_price\",\"type\":\"uint256\"},{\"name\":\"_obj_price_unit\",\"type\":\"uint256\"},{\"name\":\"_start_block\",\"type\":\"uint256\"},{\"name\":\"_end_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"object_total_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_auction_settled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hammer_info\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"object_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_expired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"auction_expiration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction_creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"obj_price_unit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction_end_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_bid_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_bid_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_finished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_auction_proxy\",\"type\":\"address\"},{\"name\":\"_min_obj_amount\",\"type\":\"uint256\"},{\"name\":\"_min_bid_price\",\"type\":\"uint256\"},{\"name\":\"_obj_price_unit\",\"type\":\"uint256\"},{\"name\":\"_start_block\",\"type\":\"uint256\"},{\"name\":\"_end_block\",\"type\":\"uint256\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"TransferMultiSig\",\"type\":\"event\"}]","ContractName":"ERC20Auction","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e43f270858a86a7b44a69490b79fd16bf134bed300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000009568740000000000000000000000000000000000000000000000000000000000983860000000000000000000000000c7f3e458a4ecfa84b37a2d00e6ba414bd57fdaa4000000000000000000000000d030fffd702b037235676af30612577a7ca201a2","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://c2486071d52f4c83e444b5c99f16c7533629a6ead8149e594339de9073d7051d"}]}