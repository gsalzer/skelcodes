{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\ncontract LiquidDemocracyInterface{\r\n  function setNoMajority(bool t) public ;\r\n  function getVoterCount() public view returns(uint);\r\n  function getWeight(address addr) public view returns(uint) ;\r\n  function getDelegatee(address addr) public view returns (address [] memory);\r\n  function getDelegator(address addr) public view returns(address);\r\n  function delegate(address _to) public returns(bool);\r\n  function undelegate() public returns(bool);\r\n  function setWeight(address addr, uint weight) public returns(bool);\r\n  function removeVoter(address addr) public returns(bool);\r\n  function lastUpdateHeight() public view returns(uint);\r\n}\r\n\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] storage self, address addr) public view returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] storage self, address addr) public view returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n  }\r\n\r\n  function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){\r\n    uint index = index_of(self, old_addr);\r\n    self[index] = new_addr;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract LiquidDemocracy is LiquidDemocracyInterface{\r\n  using AddressArray for address[];\r\n\r\n  address public owner;\r\n\r\n  mapping (address => uint) public vote_weight;\r\n  mapping (address => address) public v_to_parent;\r\n  mapping (address => address[]) public v_to_children;\r\n  uint public voter_count;\r\n  uint public total_power;\r\n\r\n  bool public force_no_majority;\r\n  uint public last_update_height;\r\n\r\n\r\n  event LiquidDelegate(address from, address to);\r\n  event LiquidUndelegate(address from, address to);\r\n  event LiquidSetWeight(address addr, uint weight);\r\n  event LiquidRemoveVoter(address addr);\r\n\r\n  constructor() public{\r\n    owner = msg.sender;\r\n    voter_count = 0;\r\n    force_no_majority = true;\r\n    last_update_height = block.number;\r\n  }\r\n\r\n  modifier isOwner{\r\n    require(msg.sender == owner, \"only owner can call this\");\r\n    _;\r\n  }\r\n\r\n  function setNoMajority(bool t) public isOwner{\r\n    force_no_majority = t;\r\n  }\r\n\r\n  function transferOwner(address new_owner) public isOwner{\r\n    require(new_owner != address(0x0), \"transferOwner: invalid address\");\r\n    owner = new_owner;\r\n  }\r\n\r\n\r\n  function setWeight(address addr, uint weight) public isOwner returns(bool){\r\n    require(weight > 0, \"invalid weight\");\r\n    require(addr != address(0x0), \"setWeight: invalid address\");\r\n    vote_weight[addr] = weight;\r\n    voter_count ++;\r\n    total_power += weight;\r\n    last_update_height = block.number;\r\n    emit LiquidSetWeight(addr, weight);\r\n    return true;\r\n  }\r\n  function removeVoter(address addr) public isOwner returns(bool){\r\n    require(addr != address(0x0), \"removeVoter: invalid address\");\r\n    total_power -= vote_weight[addr];\r\n    vote_weight[addr] = 0;\r\n    _undelegate(addr);\r\n    address[] storage children = v_to_children[addr];\r\n    for(uint i = 0; i < children.length; i++){\r\n      delete v_to_parent[children[i]];\r\n    }\r\n    delete v_to_children[addr];\r\n\r\n    voter_count --;\r\n    last_update_height = block.number;\r\n    emit LiquidRemoveVoter(addr);\r\n    return true;\r\n  }\r\n\r\n  function check_circle(address _from, address _to) internal view returns(bool){\r\n    address parent = _to;\r\n    while(parent != address(0x0)){\r\n      parent = v_to_parent[parent];\r\n      if(parent == _from){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function delegate(address _to) public  returns(bool){\r\n    require(_to != msg.sender, \"cannot be self\");\r\n    require(vote_weight[msg.sender] != 0, \"no sender\");\r\n    require(vote_weight[_to] != 0, \"no _to\");\r\n    bool has_circle = check_circle(msg.sender, _to);\r\n    require(!has_circle, \"cannot have delegate circle\");\r\n\r\n    address old = v_to_parent[msg.sender];\r\n    if(old != address(0x0)){\r\n      address[] storage children = v_to_children[old];\r\n      children.remove(msg.sender);\r\n    }\r\n    v_to_parent[msg.sender] = _to;\r\n    v_to_children[_to].push(msg.sender);\r\n\r\n    if(force_no_majority){\r\n      address fp = getFinalDelegator(msg.sender);\r\n      uint p = getVoterTotalPower(fp);\r\n      require(p <= getTotalPower()/2, \"this delegate causes a majority, call getFinalDelegator(...) to know the potential majority\");\r\n    }\r\n\r\n    last_update_height = block.number;\r\n    emit LiquidDelegate(msg.sender, _to);\r\n    return true;\r\n  }\r\n\r\n  function _undelegate(address from) internal {\r\n    address old = v_to_parent[from];\r\n    if(old == address(0x0)) {\r\n      return;\r\n    }\r\n    address[] storage children = v_to_children[old];\r\n    children.remove(from);\r\n    v_to_parent[from] = address(0x0);\r\n    last_update_height = block.number;\r\n    emit LiquidUndelegate(from, old);\r\n\r\n  }\r\n  function undelegate() public returns(bool){\r\n    _undelegate(msg.sender);\r\n    return true;\r\n  }\r\n\r\n  function getDelegator(address addr) public view returns(address ){\r\n    return v_to_parent[addr];\r\n  }\r\n\r\n  function getDelegatee(address addr) public view returns (address [] memory){\r\n    return v_to_children[addr];\r\n  }\r\n\r\n  function getWeight(address addr) public view returns(uint) {\r\n    return vote_weight[addr];\r\n  }\r\n  function getVoterCount() public view returns(uint){\r\n    return voter_count;\r\n  }\r\n\r\n  function getTotalPower() public view returns(uint){\r\n    return total_power;\r\n  }\r\n\r\n  function getVoterTotalPower(address addr) public view returns(uint){\r\n    address[] memory to_visit = new address[](getVoterCount());\r\n    uint power = 0;\r\n    uint index = 0;\r\n    to_visit[index] = addr;\r\n    index ++;\r\n    while(index != 0){\r\n      index --;\r\n      address last = to_visit[index];\r\n      power += getWeight(last);\r\n      address[] memory children = getDelegatee(last);\r\n      for(uint i = 0; i < children.length; i++){\r\n          to_visit[index] = children[i];\r\n          index ++;\r\n      }\r\n    }\r\n    return power;\r\n  }\r\n\r\n  function getFinalDelegator(address addr) public view returns(address){\r\n    require(addr != address(0x0), \"get_voted_parent: invalid address\");\r\n    address next = getDelegator(addr);\r\n    while(next != address(0x0)){\r\n      if(getDelegator(next) == address(0x0)){\r\n        return next;\r\n      }\r\n      next = getDelegator(next);\r\n    }\r\n    return address(0x0);\r\n  }\r\n\r\n  function lastUpdateHeight() public view returns(uint){\r\n    return last_update_height;\r\n  }\r\n}\r\n\r\ncontract LiquidDemocracyFactory{\r\n  event NewLiquidDemocracy(address addr);\r\n  function createLiquidDemocracy() public returns(address){\r\n    LiquidDemocracy ld = new LiquidDemocracy();\r\n    ld.transferOwner(msg.sender);\r\n    emit NewLiquidDemocracy(address(ld));\r\n    return address(ld);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"createLiquidDemocracy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewLiquidDemocracy\",\"type\":\"event\"}]","ContractName":"LiquidDemocracyFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"AddressArray:0493163ff05664a1add5f87374ef78940ae33bc4","LicenseType":"MIT","SwarmSource":"bzzr://9c8ed7abae37bd63f4fbeeb61f217f02187d7bc75bdd78f4aa789cafdf4fc615"}]}