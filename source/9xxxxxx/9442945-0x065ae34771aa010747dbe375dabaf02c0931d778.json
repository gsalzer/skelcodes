{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title Gods Unchained ERC-721 Token Raffle\r\n * @author Unchained Games\r\n */\r\ncontract RaffleMarket {\r\n    // Host Raffles Sell Tickets, Buy Tickets Win Tokens\r\n\r\n    // ==== EVENTS ==== //\r\n\r\n    /**\r\n     * @dev OnBuyRaffleTickets emits an event when raffle tickets are purchased\r\n     *\r\n     * @param _raffleId - The raffle ID\r\n     * @param _ticketHolder - Address buying raffle tickets\r\n     * @param _tickets - Number of raffle tickets purchased\r\n     */\r\n    event OnBuyRaffleTickets(\r\n        uint256 indexed _raffleId,\r\n        address indexed _ticketHolder,\r\n        uint256 _tickets\r\n    );\r\n\r\n    /**\r\n     * @dev OnCancelRaffle emits an event when a host cancels a raffle\r\n     *\r\n     * @param _raffleId - The raffle ID\r\n     * @param _host - The raffle Host\r\n     */\r\n    event OnCancelRaffle(\r\n        uint256 indexed _raffleId,\r\n        address indexed _host\r\n    );\r\n\r\n    /**\r\n     * @dev OnCreateRaffle emits an event when a raffle is created\r\n     *\r\n     * @param _raffleId - The raffle ID\r\n     * @param _tokenId - The token ID\r\n     * @param _host - The host of the raffle\r\n     * @param _costPerTicket - Cost in wei of a raffle ticket\r\n     * @param _minimumTickets - Minimum number of tickets needed to select a raffle winner\r\n     */\r\n    event OnCreateRaffle(\r\n        uint256 indexed _raffleId,\r\n        uint256 indexed _tokenId,\r\n        address indexed _host,\r\n        uint256 _costPerTicket,\r\n        uint256 _minimumTickets\r\n    );\r\n\r\n    /**\r\n     * @dev OnDeleteTickets emits an event when raffle tickets are deleted\r\n     *\r\n     * @param _expiredRaffleId - An expired raffle ID\r\n     * @param _tickets - Number of raffle tickets deleted\r\n     */\r\n    event OnDeleteTickets(\r\n        uint256 indexed _expiredRaffleId,\r\n        uint256 _tickets\r\n    );\r\n\r\n    /**\r\n     * @dev OnRaffleWinner emits an event when a winning raffle ticket is selected\r\n     *\r\n     * @param _raffleId - The raffle ID\r\n     * @param _winner - The raffle winner\r\n     * @param _random - Randomly selected index\r\n     * @param _payout - Amount of wei sent to the host\r\n     * @param _contribution - Amount of wei sent to the treasury\r\n     */\r\n    event OnRaffleWinner(\r\n        uint256 indexed _raffleId,\r\n        address indexed _winner,\r\n        uint256 _random,\r\n        uint256 _payout,\r\n        uint256 _contribution\r\n    );\r\n\r\n    /**\r\n     * @dev OnRefundTickets emits an event when raffle tickets are refunded\r\n     *\r\n     * @param _raffleId - The ID of some raffle\r\n     * @param _quantity - The number of tickets to refund\r\n     */\r\n    event OnRefundTickets(\r\n        uint256 _raffleId,\r\n        uint256 _quantity\r\n    );\r\n\r\n    /**\r\n     * @dev OnRemoveAdmin emits an event when an admin is removed\r\n     *\r\n     * @param _admin - The removed admin\r\n     */\r\n    event OnRemoveAdmin(\r\n        address _admin\r\n    );\r\n\r\n    /**\r\n     * @dev OnSetAdmin emits an event when an admin address is set\r\n     *\r\n     * @param _admin - The new admin\r\n     */\r\n    event OnSetAdmin(\r\n        address _admin\r\n    );\r\n\r\n    /**\r\n     * @dev OnSetMinimumCostPerTicket emits an event when minimum cost per ticket is updated\r\n     *\r\n     * @param _minimumCostPerTicket - The minimum cost in wei for a raffle ticket\r\n     */\r\n    event OnSetMinimumCostPerTicket(\r\n        uint256 _minimumCostPerTicket\r\n    );\r\n\r\n    /**\r\n     * @dev OnSetTokenAddress emits an event when the token address is set in the constructor\r\n     *\r\n     * @param _tokenAddress - The ERC721 token address\r\n     */\r\n    event OnSetTokenAddress(\r\n        address _tokenAddress\r\n    );\r\n\r\n    /**\r\n     * @dev OnSetTreasury emits an event when the treasury is updated\r\n     *\r\n     * @param _treasury - The treasury address\r\n     */\r\n    event OnSetTreasury(\r\n        address _treasury\r\n    );\r\n\r\n    /**\r\n     * @dev OnSetContributionPercent emits an event when the contribution percent is updated\r\n     * For example a contributionPercent of 25 is equal to 2.5%\r\n     *\r\n     * @param _contributionPercent - The contribution percent\r\n     */\r\n    event OnSetContributionPercent(\r\n        uint256 _contributionPercent\r\n    );\r\n\r\n    /**\r\n     * @dev OnWithdrawRaffleTickets emits an event when raffle tickets are withdrawn\r\n     *\r\n     * @param _raffleId - The raffle ID\r\n     * @param _ticketHolder - The ticket holder that withdrew raffle tickets\r\n     * @param _indexes - The indexes of withdrawn tickets\r\n     */\r\n    event OnWithdrawRaffleTickets(\r\n        uint256 indexed _raffleId,\r\n        address indexed _ticketHolder,\r\n        uint256[] _indexes\r\n    );\r\n\r\n    /**\r\n     * @dev Raffle is a struct containing information about a given raffle\r\n     *\r\n     * @param tokenId - An ERC721 token ID to be raffled\r\n     * @param host - Address of the wallet hosting the raffle\r\n     * @param costPerTicket - The cost of a ticket in wei\r\n     * @param minimumTickets - The minimum number of tickets to activate a raffle\r\n     * @param participants - An array of ticket holder addresses participating in the raffle\r\n     */\r\n    struct Raffle {\r\n        uint256 tokenId;\r\n        address host;\r\n        uint256 costPerTicket;\r\n        uint256 minimumTickets;\r\n        address payable[] participants;\r\n    }\r\n\r\n    // ==== GLOBAL PUBLIC VARIABLES ==== //\r\n\r\n    // Mapping raffle ID to Raffle\r\n    mapping(uint256 => Raffle) public raffles;\r\n\r\n    /**\r\n     * @dev contributionPercent is the percent of a raffle contributed to the treasury\r\n     */\r\n    uint256 public contributionPercent;\r\n\r\n    /**\r\n     * @dev minRaffleTicketCost is the minimum amount of wei a raffle ticket can cost\r\n     */\r\n    uint256 public minRaffleTicketCost;\r\n\r\n    /**\r\n     * @dev tokenAddress is the ERC721 Token address eligible to raffle\r\n     */\r\n    address public tokenAddress;\r\n\r\n    /**\r\n     * @dev tokenInterface interfaces with the ERC721\r\n     */\r\n    interfaceERC721 public tokenInterface;\r\n\r\n    /**\r\n     * @dev totalRaffles is the total number of raffles that have been created\r\n     */\r\n    uint256 public totalRaffles;\r\n\r\n    // ==== GLOBAL VARIABLES PRIVATE ==== //\r\n\r\n    // Mapping admin address to boolean\r\n    mapping(address => bool) private admin;\r\n\r\n    /**\r\n     * @dev treasury is the address where contributions are sent\r\n     */\r\n    address payable private treasury;\r\n\r\n    // ==== CONSTRUCTOR ==== //\r\n\r\n    /**\r\n     * @dev constructor runs once during contract deployment\r\n     *\r\n     * @param _contributionPercent - Percent of a raffle contributed to the treasury\r\n     * @param _minRaffleTicketCost - Minimum cost of a raffle ticket in wei\r\n     * @param _tokenAddress - The token address eligible to Raffle\r\n     * @param _treasury - Address where contributions are sent\r\n     */\r\n    constructor(uint256 _contributionPercent, uint256 _minRaffleTicketCost, address _tokenAddress, address payable _treasury)\r\n        public\r\n    {\r\n        admin[msg.sender] = true;\r\n        tokenInterface = interfaceERC721(_tokenAddress);\r\n        setAdmin(msg.sender);\r\n        setContributionPercent(_contributionPercent);\r\n        setMinRaffleTicketCost(_minRaffleTicketCost);\r\n        setTokenAddress(_tokenAddress);\r\n        setTreasury(_treasury);\r\n    }\r\n\r\n    // ==== MODIFIERS ==== //\r\n\r\n    /**\r\n     * @dev onlyAdmin requires the msg.sender to be an admin\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(admin[msg.sender], \"only admins\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev onlyEOA requires msg.sender to be an externally owned account\r\n     */\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"only externally owned accounts\");\r\n        _;\r\n    }\r\n\r\n    // ==== PUBLIC WRITE FUNCTIONS ==== //\r\n\r\n    /**\r\n     * @dev activateRaffle draws a winning raffle ticket\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     */\r\n    function activateRaffle(uint256 raffleId)\r\n        public\r\n        onlyEOA\r\n    {\r\n        // Reference the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Require minimum number of tickets before drawing a winning raffle ticket\r\n        require(raffle.participants.length >= raffle.minimumTickets, \"requires minimum number of tickets\");\r\n\r\n        selectWinningTicket(raffleId);\r\n    }\r\n\r\n    /**\r\n     * @dev activateRaffleAsHost allows the host to activate a raffle at any time\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     */\r\n    function activateRaffleAsHost(uint256 raffleId)\r\n        public\r\n        onlyEOA\r\n    {\r\n        // Reference the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Require raffle host to be the msg.sender\r\n        require(raffle.host == msg.sender, \"only the raffle host can activate\");\r\n\r\n        // Raffle must have at least one ticket\r\n        require(raffle.participants.length >= 1, \"at least one participant needed to raffle\");\r\n\r\n        selectWinningTicket(raffleId);\r\n    }\r\n\r\n    /**\r\n     * @dev buyRaffleTickets buys tickets for a given raffle\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     */\r\n    function buyRaffleTickets(uint256 raffleId)\r\n        public\r\n        payable\r\n        onlyEOA\r\n    {\r\n        // Reference to the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Require a valid raffle\r\n        require(raffle.host != address(0), \"invalid raffle\");\r\n\r\n        // Confirm amount of ETH sent is enough for a ticket\r\n        require(msg.value >= raffle.costPerTicket, \"must send enough ETH for at least 1 ticket\");\r\n\r\n        // Number of remaining tickets to raffle\r\n        uint256 remainingTickets = raffle.minimumTickets - raffle.participants.length;\r\n\r\n        // Require tickets available in raffle\r\n        require(remainingTickets > 0, \"no tickets remaining in this raffle\");\r\n\r\n        // Calculate total tickets based on msg.value and ticket cost\r\n        uint256 tickets = msg.value / raffle.costPerTicket;\r\n\r\n        // Calculate any change\r\n        uint256 remainder = msg.value % raffle.costPerTicket;\r\n\r\n        // Check available tickets\r\n        if (tickets > remainingTickets) {\r\n            // Recalculate change\r\n            remainder = remainder + (raffle.costPerTicket * (tickets - remainingTickets));\r\n\r\n            // Set tickets equal to the number of remaining tickets\r\n            tickets = remainingTickets;\r\n        }\r\n\r\n        // Add tickets to the raffle\r\n        for (uint256 i = 0; i < tickets; i++) {\r\n            raffle.participants.push(msg.sender);\r\n        }\r\n\r\n        // return change back to the address buying tickets\r\n        if (remainder > 0) {\r\n            msg.sender.transfer(remainder);\r\n        }\r\n\r\n        emit OnBuyRaffleTickets(raffleId, msg.sender, tickets);\r\n    }\r\n\r\n    /**\r\n     * @dev cancelRaffle transfers the token back to the raffle host and deletes the raffle\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     */\r\n    function cancelRaffle(uint256 raffleId)\r\n        public\r\n    {\r\n        // Reference the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Require the raffle host is the message sender\r\n        require(raffle.host == msg.sender, \"raffle host only\");\r\n\r\n        // Require no participants in the raffle\r\n        require(raffle.participants.length == 0, \"must be no participants in attendance\");\r\n\r\n        // Store token ID\r\n        uint256 tokenId = raffle.tokenId;\r\n\r\n        // Delete the raffle\r\n        deleteRaffle(raffleId);\r\n\r\n        // Transfer the token to the host\r\n        tokenInterface.transferFrom(address(this), msg.sender, tokenId);\r\n\r\n        emit OnCancelRaffle(raffleId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev deleteAndBuyRaffleTickets deletes old storage and buys tickets for a given raffle to save gas\r\n     *\r\n     * @param expiredRaffleId - Expired Raffle ID\r\n     * @param tickets - Total number of expired raffle tickets to delete\r\n     * @param raffleId - Raffle ID to buy tickets for\r\n     */\r\n    function deleteAndBuyRaffleTickets(uint256 expiredRaffleId, uint256 tickets, uint256 raffleId)\r\n        public\r\n        payable\r\n    {\r\n        // Reference the expired raffle\r\n        Raffle storage raffle = raffles[expiredRaffleId];\r\n\r\n        // Require the raffle has ended\r\n        require(raffle.host == address(0), \"raffle expired\");\r\n\r\n        // Handle deleting expired raffle tickets to free up storage\r\n        if (raffle.participants.length > tickets) {\r\n            do {\r\n                raffle.participants.pop();\r\n            }\r\n            while (raffle.participants.length < raffle.participants.length - tickets);\r\n            emit OnDeleteTickets(expiredRaffleId, tickets);\r\n        } else if (raffle.participants.length > 0) {\r\n            do {\r\n                raffle.participants.pop();\r\n            }\r\n            while (raffle.participants.length > 0);\r\n            emit OnDeleteTickets(expiredRaffleId, raffle.participants.length);\r\n        }\r\n\r\n        buyRaffleTickets(raffleId);\r\n    }\r\n\r\n    /**\r\n     * @dev withdrawRaffleTickets allows a ticket holder to withdraw their tickets before a raffle is activated\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     * @param indexes - Index of each ticket to withdraw\r\n     */\r\n    function withdrawRaffleTickets(uint256 raffleId, uint256[] memory indexes)\r\n        public\r\n    {\r\n        // Reference the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Require a valid raffle\r\n        require(raffle.host != address(0), \"invalid raffle\");\r\n\r\n        // Require a least one ticket to withdraw\r\n        require(indexes.length > 0, \"must be greater than 0\");\r\n\r\n        // Loop through each ticket to withdraw\r\n        for(uint256 i = 0; i < indexes.length; i++) {\r\n            // Require sender to be the owner of the ticket\r\n            require(raffle.participants[indexes[i]] == msg.sender, \"must be ticket owner\");\r\n\r\n            // Require indexes are sorted from highest index to lowest index\r\n            if (i > 0) {\r\n                require(indexes[i] < indexes[i - 1], \"must be sorted from highest index to lowest index\");\r\n            }\r\n\r\n            // Set the ticket's index to equal the value of the last ticket\r\n            raffle.participants[indexes[i]] = raffle.participants[raffle.participants.length - 1];\r\n\r\n            // Delete the last index\r\n            raffle.participants.pop();\r\n        }\r\n\r\n        emit OnWithdrawRaffleTickets(raffleId, msg.sender, indexes);\r\n\r\n        // Send refund to the ticket holder\r\n        msg.sender.transfer(indexes.length * raffle.costPerTicket);\r\n    }\r\n\r\n    /**\r\n     * @dev refundRaffleTickets allows a raffle host to refund raffle tickets in order to cancel a raffle\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     * @param quantity - Number of tickets to refund\r\n     */\r\n    function refundRaffleTickets(uint256 raffleId, uint256 quantity)\r\n        public\r\n    {\r\n        // Reference the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Require raffle host to be the message sender\r\n        require(raffle.host == msg.sender, \"must be raffle host\");\r\n\r\n        // Require at least one ticket to refund\r\n        require(quantity > 0, \"must refund at least one ticket\");\r\n\r\n        // Require tickets in raffle to refund\r\n        require(raffle.participants.length > 0, \"must have participants to refund\");\r\n\r\n        // Number of tickets to refund\r\n        uint256 numberOfTicketsToRefund = quantity;\r\n\r\n        // Check quantity of raffle tickets\r\n        if (quantity > raffle.participants.length) {\r\n            numberOfTicketsToRefund = raffle.participants.length;\r\n        }\r\n\r\n        // Loop through each raffle ticket to refund\r\n        for(uint256 i = 0; i < numberOfTicketsToRefund; i++) {\r\n            // Store reference to the last participant\r\n            address payable participant = raffle.participants[raffle.participants.length - 1];\r\n\r\n            // Delete the last index\r\n            raffle.participants.pop();\r\n\r\n            // Transfer raffle cost to the participant\r\n            participant.transfer(raffle.costPerTicket);\r\n        }\r\n\r\n        emit OnRefundTickets(raffleId, quantity);\r\n    }\r\n\r\n    // ==== PUBLIC READ FUNCTIONS ==== //\r\n\r\n    /**\r\n     * @dev getRaffle gets info from a given raffle\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     *\r\n     * @return _tokenId - ERC721 Token ID\r\n     * @return _host - Address hosting the raffle\r\n     * @return _costPerTicket - The cost in wei for a raffle ticket\r\n     * @return _minimumTickets - The minimum number of tickets needed to activate a raffle\r\n     * @return _participants - The current number of tickets in the raffle\r\n     */\r\n    function getRaffle(uint256 raffleId)\r\n        public\r\n        view\r\n        returns(uint256 _tokenId, address _host, uint256 _costPerTicket, uint256 _minimumTickets, uint256 _participants)\r\n    {\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        _tokenId = raffle.tokenId;\r\n        _host = raffle.host;\r\n        _costPerTicket = raffle.costPerTicket;\r\n        _minimumTickets = raffle.minimumTickets;\r\n        _participants = raffle.participants.length;\r\n    }\r\n\r\n    /**\r\n     * @dev getRaffles gets info from a list of raffles\r\n     *\r\n     * @param raffleIds - List of Raffle IDs\r\n     *\r\n     * @return _tokenId - List of Token IDs\r\n     * @return _host - List of addresses hosting the raffle\r\n     * @return _costPerTicket - List of costs in wei for a raffle ticket\r\n     * @return _minimumTickets - List of minimum number of tickets needed to activate a raffle\r\n     * @return _participants - List of current number of tickets in the raffle\r\n     */\r\n    function getRaffles(uint256[] memory raffleIds)\r\n        public\r\n        view\r\n        returns(uint256[] memory _tokenId, address[] memory _host, uint256[] memory _costPerTicket, uint256[] memory _minimumTickets, uint256[] memory _participants)\r\n    {\r\n        for(uint256 i = 0; i < raffleIds.length; i++) {\r\n            Raffle storage raffle = raffles[raffleIds[i]];\r\n\r\n            _tokenId[i] = raffle.tokenId;\r\n            _host[i] = raffle.host;\r\n            _costPerTicket[i] = raffle.costPerTicket;\r\n            _minimumTickets[i] = raffle.minimumTickets;\r\n            _participants[i] = raffle.participants.length;\r\n        }\r\n    }\r\n\r\n    // ==== ADMIN FUNCTIONS ==== //\r\n\r\n    /**\r\n     * @dev setContributionPercent sets the percent of a raffle contributed to the treasury\r\n     * Example: A contributionPercent of 25 is equal to 2.5%\r\n     *\r\n     * @param _contributionPercent - Percent of a raffle to contribute to the treasury\r\n     */\r\n    function setContributionPercent(uint256 _contributionPercent)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(_contributionPercent < 500, \"Can not exceed 50%\");\r\n        contributionPercent = _contributionPercent;\r\n\r\n        emit OnSetContributionPercent(_contributionPercent);\r\n    }\r\n\r\n    /**\r\n     * @dev setMinRaffleTicketCost sets the minimum cost of a raffle ticket in wei\r\n     *\r\n     * @param _minRaffleTicketCost - The minimum allowable cost of a raffle ticket\r\n     */\r\n    function setMinRaffleTicketCost(uint256 _minRaffleTicketCost)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        minRaffleTicketCost = _minRaffleTicketCost;\r\n\r\n        emit OnSetMinimumCostPerTicket(_minRaffleTicketCost);\r\n    }\r\n\r\n    /**\r\n     * @dev setAdmin sets a new admin\r\n     *\r\n     * @param _admin - The new admin address\r\n     */\r\n    function setAdmin(address _admin)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        admin[_admin] = true;\r\n\r\n        emit OnSetAdmin(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev removeAdmin removes an existing admin\r\n     *\r\n     * @param _admin - The admin address to remove\r\n     */\r\n    function removeAdmin(address _admin)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        require(msg.sender != _admin, \"self deletion not allowed\");\r\n        delete admin[_admin];\r\n\r\n        emit OnRemoveAdmin(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev setTreasury sets the treasury address\r\n     *\r\n     * @param _treasury - The treasury address\r\n     */\r\n    function setTreasury(address payable _treasury)\r\n        public\r\n        onlyAdmin\r\n    {\r\n        treasury = _treasury;\r\n\r\n        emit OnSetTreasury(_treasury);\r\n    }\r\n\r\n    // ==== EXTERNAL FUNCTIONS ==== //\r\n\r\n    /**\r\n     * @dev onERC721Received handles receiving an ERC721 token\r\n     *\r\n     * _operator - The address which called `safeTransferFrom` function\r\n     * @param _from - The address which previously owned the token\r\n     * @param _tokenId - The NFT IDentifier which is being transferred\r\n     * @param _data - Additional data with no specified format\r\n     *\r\n     * @return Receipt\r\n     */\r\n    function onERC721Received(address /*_operator*/, address _from, uint256 _tokenId, bytes calldata _data)\r\n        external\r\n        returns(bytes4)\r\n    {\r\n        // Require the token address is authorized\r\n        require(msg.sender == tokenAddress, \"must be the token address\");\r\n\r\n        // Require host is an externally owned account\r\n        require(tx.origin == _from, \"token owner must be an externally owned account\");\r\n\r\n        // Parse data payload\r\n        (uint256 costPerTicket, uint256 minimumTickets) = abi.decode(_data, (uint256, uint256));\r\n\r\n        // Create a raffle\r\n        createRaffle(_tokenId, _from, costPerTicket, minimumTickets);\r\n\r\n        // ERC721_RECEIVED Receipt (magic value)\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    // ==== PRIVATE FUNCTIONS ==== //\r\n\r\n    /**\r\n     * @dev createRaffle creates a new raffle\r\n     *\r\n     * @param tokenId - ERC721 Token ID\r\n     * @param host - The host of the raffle\r\n     * @param costPerTicket - The cost of one raffle ticket\r\n     * @param minimumTickets - The minimum number of tickets needed for a raffle\r\n     */\r\n    function createRaffle(uint256 tokenId, address host, uint256 costPerTicket, uint256 minimumTickets)\r\n        private\r\n    {\r\n        // Require the cost of a ticket to be greater than or equal to the minimum cost of a raffle ticket\r\n        require(costPerTicket >= minRaffleTicketCost, \"ticket price must meet the minimum\");\r\n\r\n        // Require at least one ticket to create a raffle\r\n        require(minimumTickets > 0, \"must set at least one raffle ticket\");\r\n\r\n        // Increment total raffles\r\n        totalRaffles = totalRaffles + 1;\r\n        uint256 raffleId = totalRaffles;\r\n\r\n        // Creates a raffle\r\n        raffles[raffleId] = Raffle({\r\n            tokenId: tokenId,\r\n            host: host,\r\n            costPerTicket: costPerTicket,\r\n            minimumTickets: minimumTickets,\r\n            participants: new address payable[](0)\r\n        });\r\n\r\n        // Emit event when a raffle is created\r\n        emit OnCreateRaffle(raffleId, tokenId, host, costPerTicket, minimumTickets);\r\n    }\r\n\r\n    /**\r\n     * @dev deleteRaffle invalidates a given raffle\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     */\r\n    function deleteRaffle(uint256 raffleId)\r\n        private\r\n    {\r\n        // Delete the raffle\r\n        delete raffles[raffleId].tokenId;\r\n        delete raffles[raffleId].host;\r\n        delete raffles[raffleId].costPerTicket;\r\n        delete raffles[raffleId].minimumTickets;\r\n    }\r\n\r\n    /**\r\n     * @dev selectWinningTicket selects the winning ticket for a given raffle\r\n     *\r\n     * @param raffleId - The Raffle ID\r\n     */\r\n    function selectWinningTicket(uint256 raffleId)\r\n        private\r\n    {\r\n        // Reference the raffle\r\n        Raffle storage raffle = raffles[raffleId];\r\n\r\n        // Get a random number based on total participants\r\n        (uint256 random) = getRandom(raffle.participants.length);\r\n\r\n        // Select a winner at random\r\n        address winner = raffle.participants[random];\r\n\r\n        // Confirm winner is a participant\r\n        assert(winner != address(0));\r\n\r\n        // The total amount of ETH allocated to the raffle\r\n        uint256 pot = raffle.participants.length * raffle.costPerTicket;\r\n\r\n        // Amount to contribute to the treasury\r\n        uint256 contribution = (pot * contributionPercent) / 1000;\r\n\r\n        // Amount to payout to the host\r\n        uint256 payout = pot - contribution;\r\n\r\n        // Cast host address as payable\r\n        address payable host = address(uint160(raffle.host));\r\n\r\n        // Store the token ID\r\n        uint256 tokenId = raffle.tokenId;\r\n\r\n        // Delete the raffle\r\n        deleteRaffle(raffleId);\r\n\r\n        // Transfer prize to the raffle winner\r\n        interfaceERC721(tokenAddress).transferFrom(address(this), winner, tokenId);\r\n\r\n        // Assert the winner is now the owner of the prize\r\n        assert(tokenInterface.ownerOf(tokenId) == winner);\r\n\r\n        // Transfer contribution to the treasury\r\n        treasury.transfer(contribution);\r\n\r\n        // Transfer pot to the raffle host\r\n        host.transfer(payout);\r\n\r\n        emit OnRaffleWinner(raffleId, winner, random, payout, contribution);\r\n    }\r\n\r\n    /**\r\n     * @dev getRandom generates a random integer from 0 to (max - 1)\r\n     *\r\n     * @param max - Maximum number of integers to select from\r\n     * @return random - The randomly selected integer\r\n     */\r\n    function getRandom(uint256 max)\r\n        private\r\n        view\r\n        returns(uint256 random)\r\n    {\r\n        // Blockhash from last block\r\n        uint256 blockhash_ = uint256(blockhash(block.number - 1));\r\n\r\n        // Contract balance\r\n        uint256 balance = address(this).balance;\r\n\r\n        // Randomly generated integer\r\n        random = uint256(keccak256(abi.encodePacked(\r\n            // Unix timestamp in seconds\r\n            block.timestamp,\r\n            // Address of the block miner\r\n            block.coinbase,\r\n            // Difficulty of the block\r\n            block.difficulty,\r\n            // Blockhash from last block\r\n            blockhash_,\r\n            // Contract balance\r\n            balance\r\n        ))) % max;\r\n    }\r\n\r\n    /**\r\n     * @dev setTokenAddress sets the ERC721 token address once from the constructor\r\n     *\r\n     * @param _tokenAddress - The ERC721 token address\r\n     */\r\n    function setTokenAddress(address _tokenAddress)\r\n        private\r\n    {\r\n        tokenAddress = _tokenAddress;\r\n        emit OnSetTokenAddress(_tokenAddress);\r\n    }\r\n}\r\n\r\n// ==== INTERFACE ==== //\r\n/**\r\n * @title Abstract Contract Interface\r\n */\r\ncontract interfaceERC721 {\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function ownerOf(uint256 tokenId) public view returns (address);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"withdrawRaffleTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contributionPercent\",\"type\":\"uint256\"}],\"name\":\"setContributionPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"buyRaffleTickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"costPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTickets\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"cancelRaffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"raffleIds\",\"type\":\"uint256[]\"}],\"name\":\"getRaffles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_host\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costPerTicket\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minimumTickets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_participants\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRaffleTicketCost\",\"type\":\"uint256\"}],\"name\":\"setMinRaffleTicketCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiredRaffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"deleteAndBuyRaffleTickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"refundRaffleTickets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"activateRaffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRaffleTicketCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"getRaffle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_costPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_participants\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"internalType\":\"contract interfaceERC721\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"activateRaffleAsHost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contributionPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRaffleTicketCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ticketHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tickets\",\"type\":\"uint256\"}],\"name\":\"OnBuyRaffleTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_host\",\"type\":\"address\"}],\"name\":\"OnCancelRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_host\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_costPerTicket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumTickets\",\"type\":\"uint256\"}],\"name\":\"OnCreateRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_expiredRaffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tickets\",\"type\":\"uint256\"}],\"name\":\"OnDeleteTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_random\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contribution\",\"type\":\"uint256\"}],\"name\":\"OnRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"OnRefundTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"OnRemoveAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"OnSetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumCostPerTicket\",\"type\":\"uint256\"}],\"name\":\"OnSetMinimumCostPerTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"OnSetTokenAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"OnSetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_contributionPercent\",\"type\":\"uint256\"}],\"name\":\"OnSetContributionPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_ticketHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"OnWithdrawRaffleTickets\",\"type\":\"event\"}]","ContractName":"RaffleMarket","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000e3a2a1f2146d86a604adc220b4967a898d7fe070000000000000000000000008f12c5e9ee33880451a68ca8265daaad12d66e0f","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://458c243cae6af0c2ff52c46d5341675da458a200cdc4dbda28973ae4c978a891"}]}