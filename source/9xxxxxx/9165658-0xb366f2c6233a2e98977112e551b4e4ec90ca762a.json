{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\n\ncontract IERC20 {\n    function balanceOf(\n        address whom\n    )\n    external\n    view\n    returns (uint);\n\n\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n    external\n    returns (bool);\n\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    external\n    returns (bool);\n\n\n\n    function approve(\n        address _spender,\n        uint256 _value\n    )\n    public\n    returns (bool);\n\n\n\n    function decimals()\n    external\n    view\n    returns (uint);\n\n\n    function symbol()\n    external\n    view\n    returns (string);\n\n\n    function name()\n    external\n    view\n    returns (string);\n\n\n    function freezeTransfers()\n    external;\n\n\n    function unfreezeTransfers()\n    external;\n}\n\ncontract IStructuredStorage {\n\n    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;\n    function setProxyLogicContract(address _proxyLogicContract) external;\n\n    // *** Getter Methods ***\n    function getUint(bytes32 _key) external view returns(uint);\n    function getString(bytes32 _key) external view returns(string);\n    function getAddress(bytes32 _key) external view returns(address);\n    function getBytes(bytes32 _key) external view returns(bytes);\n    function getBool(bytes32 _key) external view returns(bool);\n    function getInt(bytes32 _key) external view returns(int);\n    function getBytes32(bytes32 _key) external view returns(bytes32);\n\n    // *** Getter Methods For Arrays ***\n    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);\n    function getAddressArray(bytes32 _key) external view returns (address[]);\n    function getUintArray(bytes32 _key) external view returns (uint[]);\n    function getIntArray(bytes32 _key) external view returns (int[]);\n    function getBoolArray(bytes32 _key) external view returns (bool[]);\n\n    // *** Setter Methods ***\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setAddress(bytes32 _key, address _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // *** Setter Methods For Arrays ***\n    function setBytes32Array(bytes32 _key, bytes32[] _value) external;\n    function setAddressArray(bytes32 _key, address[] _value) external;\n    function setUintArray(bytes32 _key, uint[] _value) external;\n    function setIntArray(bytes32 _key, int[] _value) external;\n    function setBoolArray(bytes32 _key, bool[] _value) external;\n\n    // *** Delete Methods ***\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteAddress(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n}\n\ncontract ITwoKeyAdmin {\n    function getDefaultIntegratorFeePercent() public view returns (uint);\n    function getDefaultNetworkTaxPercent() public view returns (uint);\n    function getTwoKeyRewardsReleaseDate() external view returns(uint);\n    function updateReceivedTokensAsModerator(uint amountOfTokens) public;\n    function updateReceivedTokensAsModeratorPPC(uint amountOfTokens, address campaignPlasma) public;\n    function addFeesCollectedInCurrency(string currency, uint amount) public payable;\n\n    function updateTokensReceivedFromDistributionFees(uint amountOfTokens) public;\n}\n\ncontract ITwoKeyMaintainersRegistry {\n    function checkIsAddressMaintainer(address _sender) public view returns (bool);\n    function checkIsAddressCoreDev(address _sender) public view returns (bool);\n\n    function addMaintainers(address [] _maintainers) public;\n    function addCoreDevs(address [] _coreDevs) public;\n    function removeMaintainers(address [] _maintainers) public;\n    function removeCoreDevs(address [] _coreDevs) public;\n}\n\ncontract ITwoKeySingletoneRegistryFetchAddress {\n    function getContractProxyAddress(string _contractName) public view returns (address);\n    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n    function getLatestCampaignApprovedVersion(string campaignType) public view returns (string);\n}\n\ninterface ITwoKeySingletonesRegistry {\n\n    /**\n    * @dev This event will be emitted every time a new proxy is created\n    * @param proxy representing the address of the proxy created\n    */\n    event ProxyCreated(address proxy);\n\n\n    /**\n    * @dev This event will be emitted every time a new implementation is registered\n    * @param version representing the version name of the registered implementation\n    * @param implementation representing the address of the registered implementation\n    * @param contractName is the name of the contract we added new version\n    */\n    event VersionAdded(string version, address implementation, string contractName);\n\n    /**\n    * @dev Registers a new version with its implementation address\n    * @param version representing the version name of the new implementation to be registered\n    * @param implementation representing the address of the new implementation to be registered\n    */\n    function addVersion(string _contractName, string version, address implementation) public;\n\n    /**\n    * @dev Tells the address of the implementation for a given version\n    * @param _contractName is the name of the contract we're querying\n    * @param version to query the implementation of\n    * @return address of the implementation registered for the given version\n    */\n    function getVersion(string _contractName, string version) public view returns (address);\n}\n\ncontract ITwoKeyMPSNMiningPoolStorage is IStructuredStorage {\n\n}\n\ncontract ITwoKeySingletonUtils {\n\n    address public TWO_KEY_SINGLETON_REGISTRY;\n\n    // Modifier to restrict method calls only to maintainers\n    modifier onlyMaintainer {\n        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyMaintainersRegistry\");\n        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).checkIsAddressMaintainer(msg.sender));\n        _;\n    }\n\n    /**\n     * @notice Function to get any singleton contract proxy address from TwoKeySingletonRegistry contract\n     * @param contractName is the name of the contract we're looking for\n     */\n    function getAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getContractProxyAddress(contractName);\n    }\n\n    function getNonUpgradableContractAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getNonUpgradableContractAddress(contractName);\n    }\n}\n\ncontract UpgradeabilityStorage {\n    // Versions registry\n    ITwoKeySingletonesRegistry internal registry;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\ncontract Upgradeable is UpgradeabilityStorage {\n    /**\n     * @dev Validates the caller is the versions registry.\n     * @param sender representing the address deploying the initial behavior of the contract\n     */\n    function initialize(address sender) public payable {\n        require(msg.sender == address(registry));\n    }\n}\n\ncontract TokenPool is Upgradeable, ITwoKeySingletonUtils {\n\n    bool initialized = false;\n\n    string constant _twoKeyAdmin = \"TwoKeyAdmin\";\n    string constant _twoKeyEconomy = \"TwoKeyEconomy\";\n\n    modifier onlyTwoKeyAdmin {\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(_twoKeyAdmin);\n        require(msg.sender == twoKeyAdmin);\n        _;\n    }\n\n    /**\n     * @notice Function to retrieve the balance of tokens on the contract\n     */\n    function getContractBalance()\n    public\n    view\n    returns (uint)\n    {\n        address twoKeyEconomy = getNonUpgradableContractAddressFromTwoKeySingletonRegistry(_twoKeyEconomy);\n        return IERC20(twoKeyEconomy).balanceOf(address(this));\n    }\n\n    /**\n     * @notice Function to transfer tokens\n     */\n    function transferTokens(\n        address receiver,\n        uint amount\n    )\n    internal\n    {\n        address twoKeyEconomy = getNonUpgradableContractAddressFromTwoKeySingletonRegistry(_twoKeyEconomy);\n        IERC20(twoKeyEconomy).transfer(receiver,amount);\n    }\n\n}\n\ncontract TwoKeyMPSNMiningPool is TokenPool {\n\n    string constant _isAddressWhitelisted = \"isAddressWhitelisted\";\n\n    ITwoKeyMPSNMiningPoolStorage public PROXY_STORAGE_CONTRACT;\n\n\n    function setInitialParams(\n        address _twoKeySingletonesRegistry,\n        address _proxyStorage\n    )\n    public\n    {\n        require(initialized == false);\n\n        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonesRegistry;\n        PROXY_STORAGE_CONTRACT = ITwoKeyMPSNMiningPoolStorage(_proxyStorage);\n\n        initialized = true;\n    }\n\n    /**\n     * @notice Modifier to restrict calls only to TwoKeyAdmin or\n     * some of whitelisted addresses inside this contract\n     */\n    modifier onlyTwoKeyAdminOrWhitelistedAddress {\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(_twoKeyAdmin);\n        require(msg.sender == twoKeyAdmin || isAddressWhitelisted(msg.sender));\n        _;\n    }\n\n    /**\n     * @notice Function which can only be called by TwoKeyAdmin contract\n     * to add new whitelisted addresses to the contract. Whitelisted address\n     * can send tokens out of this contract\n     * @param _newWhitelistedAddress is the new whitelisted address we want to add\n     */\n    function addWhitelistedAddress(\n        address _newWhitelistedAddress\n    )\n    public\n    onlyTwoKeyAdmin\n    {\n        bytes32 keyHash = keccak256(_isAddressWhitelisted,_newWhitelistedAddress);\n        PROXY_STORAGE_CONTRACT.setBool(keyHash, true);\n    }\n\n    /**\n     * @notice Function which can only be called by TwoKeyAdmin contract\n     * to remove any whitelisted address from the contract.\n     * @param _addressToBeRemovedFromWhitelist is the new whitelisted address we want to remove\n     */\n    function removeWhitelistedAddress(\n        address _addressToBeRemovedFromWhitelist\n    )\n    public\n    onlyTwoKeyAdmin\n    {\n        bytes32 keyHash = keccak256(_isAddressWhitelisted, _addressToBeRemovedFromWhitelist);\n        PROXY_STORAGE_CONTRACT.setBool(keyHash, false);\n    }\n\n    /**\n     * @notice Function to check if the selected address is whitelisted\n     * @param _address is the address we want to get this information\n     * @return result of address being whitelisted\n     */\n    function isAddressWhitelisted(\n        address _address\n    )\n    public\n    view\n    returns (bool)\n    {\n        bytes32 keyHash = keccak256(_isAddressWhitelisted, _address);\n        return PROXY_STORAGE_CONTRACT.getBool(keyHash);\n    }\n\n\n    /**\n     * @notice Function to transfer tokens from this contract\n     * can be done only by TwoKeyAdmin or whitelisted address\n     * once rewards release date has passed\n     * @param _receiver is the address of tokens receiver\n     * @param _amount is the amount of tokens we want to transfer\n     */\n    function transferTokensFromContract(\n        address _receiver,\n        uint _amount\n    )\n    onlyTwoKeyAdminOrWhitelistedAddress\n    {\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(_twoKeyAdmin);\n        require(ITwoKeyAdmin(twoKeyAdmin).getTwoKeyRewardsReleaseDate() <= block.timestamp);\n        super.transferTokens(_receiver,_amount);\n    }\n\n\n\n\n\n}\n\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_twoKeySingletonesRegistry\",\"type\":\"address\"},{\"name\":\"_proxyStorage\",\"type\":\"address\"}],\"name\":\"setInitialParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_STORAGE_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhitelistedAddress\",\"type\":\"address\"}],\"name\":\"addWhitelistedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToBeRemovedFromWhitelist\",\"type\":\"address\"}],\"name\":\"removeWhitelistedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_KEY_SINGLETON_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TwoKeyMPSNMiningPool","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}