{"status":"1","message":"OK","result":[{"SourceCode":"/* \r\n\r\n*Submitted for verification at Etherscan.io on 2019-11-12\r\n*Deployed to Ethereum Mainnet on 28-02-2020\r\n*Developed by the Technical Team of Greyzdorf BTR LLC\r\n\r\nBacked By : Glass Apple Farm Property\r\nValuation : $8.5 Million - 27-02-2020\r\nTicker : APR\r\nTotalSupply : Variable Supply\r\nDecimal : 0\r\nBurning : available\r\nMinting : available\r\nWhitelisting : available\r\nFreeze : available\r\nType of Asset : Real Estate Backed\r\n\r\n*/\r\n\r\npragma solidity ^ 0.6.3;\r\n\r\n/* SafeMath functions */\r\n\r\ncontract SafeMath {\r\n    \r\n  function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract APR is SafeMath {\r\n    \r\n    string public constant name = \"Glass Apple Estate\";\r\n    string public constant symbol = \"APR\";\r\n    uint256 public constant decimals = 0;\r\n    uint256 public totalSupply = 0;\r\n    uint256 public constant version = 1.0;\r\n    address payable public owner;\r\n    uint256 public lendersCount;\r\n    string public constant issuer = \"Greyzdorf BTR LLC\";\r\n    string public constant website = \"https://www.greyzdorf.io\";\r\n    \r\n    constructor() public{\r\n        uint256 initalSupply = 0;\r\n        owner = msg.sender;\r\n        balanceOf[msg.sender]=initalSupply;\r\n        totalSupply+=initalSupply;\r\n        emit Transfer(address(0), owner, initalSupply);\r\n     }\r\n\r\n    \r\n    struct Lenders{\r\n        address LenderId;\r\n        bool verified;\r\n        string name;\r\n        string website;\r\n        string location;\r\n        string createdAt;\r\n    }\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public freezeOf;\r\n    mapping (address => Lenders) lenders;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    \r\n    modifier onlyOwner(){\r\n        require(msg.sender==owner);\r\n        _;\r\n    }\r\n    \r\n    function createLender(string memory _name,address _lender,string memory _website,string memory _location,string memory _createdDate) public onlyOwner returns (bool){\r\n        Lenders storage lender = lenders[_lender];\r\n        if(lender.LenderId != _lender){\r\n        lender.LenderId = _lender;\r\n        lender.name = _name;\r\n        lender.website = _website;\r\n        lender.location = _location;\r\n        lender.createdAt=_createdDate;\r\n        lender.verified = true;\r\n        lendersCount++;\r\n        return true;\r\n        }\r\n        else return false;\r\n     }\r\n    \r\n    function fetchLender(address _address)public view returns(string memory,string memory,string memory,string memory, bool){\r\n        Lenders storage lender = lenders[_address];\r\n        if(lender.LenderId==_address){\r\n            return(lender.name,lender.website,lender.location,lender.createdAt,lender.verified);\r\n        }\r\n        else if(_address == owner){\r\n            return(\"Owner of Property\",\"https://greyzdorf.io\",\"Atanta, GA, USA\",\"28-02-2020\",false);\r\n        }\r\n        else return(\"No Lender Found\",\"No Website Info\",\"No Location Info\",\"Not Created Yet\",false);\r\n    }\r\n    \r\n    function disableLender(address _lender) public onlyOwner returns(bool){\r\n        Lenders storage lender = lenders[_lender];\r\n        if(lender.LenderId == _lender){\r\n            lender.verified = false;\r\n            lendersCount--;\r\n            return true;\r\n        }\r\n        else return false;\r\n    }\r\n    \r\n    function enableLender(address _lender) public onlyOwner returns(bool){\r\n        Lenders storage lender = lenders[_lender];\r\n        if(lender.LenderId == _lender){\r\n            lender.verified = true;\r\n            lendersCount++;\r\n            return true;\r\n        }\r\n        else return false;\r\n    }\r\n    \r\n    function mint(uint256 _value) public onlyOwner returns (bool){\r\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_value);\r\n        totalSupply = SafeMath.safeAdd(totalSupply,_value);\r\n        emit Transfer(address(0),msg.sender,_value);\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 _value) public onlyOwner returns (bool success){\r\n        if(balanceOf[msg.sender]>=_value){\r\n            balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value);\r\n            totalSupply = SafeMath.safeSub(totalSupply,_value);\r\n            emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n        else return false;\r\n    }\r\n    \r\n    function transfer(address _reciever, uint256 _value) public returns (string memory){\r\n         Lenders storage lender = lenders[_reciever];\r\n         uint256 amount = SafeMath.safeSub(_value,freezeOf[msg.sender]);\r\n         if(balanceOf[msg.sender]>=_value && lender.verified==true && amount != 0){\r\n            balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],amount);\r\n            balanceOf[_reciever] = SafeMath.safeAdd(balanceOf[_reciever],amount);\r\n            emit Transfer(msg.sender,_reciever,amount);\r\n            return(\"Transaction Success\");\r\n        }\r\n        else if (_reciever==owner && balanceOf[msg.sender]>=_value && amount !=0){\r\n          balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender],_value);\r\n          balanceOf[_reciever] = SafeMath.safeAdd(balanceOf[_reciever],_value);\r\n          emit Transfer(msg.sender,_reciever,amount);\r\n          return(\"Transaction Success\");   \r\n        }\r\n        else return(\"Transaction Failed\");\r\n    }\r\n    \r\n    function freeze(address _lender, uint256 _value)  public onlyOwner returns (bool){\r\n        if(balanceOf[_lender]>=_value){\r\n            freezeOf[_lender] = SafeMath.safeAdd(freezeOf[_lender],_value);\r\n            return true;\r\n        }\r\n        else return false;\r\n        \r\n    }\r\n    \r\n    function Unfreeze(address _lender,uint256 _value) public onlyOwner returns (bool){\r\n        if(freezeOf[_lender]>=_value){\r\n            freezeOf[_lender] = SafeMath.safeSub(balanceOf[_lender],_value);\r\n            return true;\r\n        }\r\n        else  return false;\r\n    }\r\n    \r\n    function withdrawEther(uint256 amount) public onlyOwner returns (bool) {\r\n\t\tif(msg.sender == owner){\r\n\t\towner.transfer(amount);\r\n\t\treturn true;\r\n\t\t}\r\n\t\telse return false;\r\n\t}\r\n\t\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_createdDate\",\"type\":\"string\"}],\"name\":\"createLender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"disableLender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"enableLender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"fetchLender\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"APR","CompilerVersion":"v0.6.3+commit.8dda9521","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"ipfs://92f18a4b2398749098c592802480ffd1008e055e6e4e19e036e5736b13c5e584"}]}