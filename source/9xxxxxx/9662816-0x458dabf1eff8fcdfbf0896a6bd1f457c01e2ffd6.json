{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.15;\r\n\r\ncontract Lock {\r\n    // address owner; slot #0\r\n    // address unlockTime; slot #1\r\n    constructor (address owner, uint256 unlockTime) public payable {\r\n        assembly {\r\n            sstore(0x00, owner)\r\n            sstore(0x01, unlockTime)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev        Withdraw function once timestamp has passed unlock time\r\n    */\r\n    function () external payable {\r\n        assembly {\r\n            switch gt(timestamp, sload(0x01))\r\n            case 0 { revert(0, 0) }\r\n            case 1 {\r\n                switch call(gas, sload(0x00), balance(address), 0, 0, 0, 0)\r\n                case 0 { revert(0, 0) }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Lockdrop {\r\n    // Time constants\r\n    uint256 constant public LOCK_DROP_PERIOD = 30 days;\r\n    uint256 public LOCK_START_TIME;\r\n    uint256 public LOCK_END_TIME;\r\n\r\n    // ETH locking events\r\n    event Locked(uint256 indexed eth, uint256 indexed duration, address lock, address introducer);\r\n\r\n    constructor(uint startTime) public {\r\n        LOCK_START_TIME = startTime;\r\n        LOCK_END_TIME = startTime + LOCK_DROP_PERIOD;\r\n    }\r\n\r\n    /**\r\n     * @dev        Locks up the value sent to contract in a new Lock\r\n     * @param      _days         The length of the lock up\r\n     * @param      _introducer   The introducer of the user.\r\n     */\r\n    function lock(uint256 _days, address _introducer)\r\n        external\r\n        payable\r\n        didStart\r\n        didNotEnd\r\n    {\r\n        // Accept External Owned Accounts only\r\n        require(msg.sender == tx.origin);\r\n\r\n        // Accept only fixed set of durations\r\n        require(_days == 30 || _days == 100 || _days == 300 || _days == 1000); \r\n        uint256 unlockTime = now + _days * 1 days;\r\n\r\n        // Accept non-zero payments only\r\n        require(msg.value > 0);\r\n        uint256 eth = msg.value;\r\n\r\n        // Create ETH lock contract\r\n        Lock lockAddr = (new Lock).value(eth)(msg.sender, unlockTime);\r\n\r\n        // ensure lock contract has all ETH, or fail\r\n        assert(address(lockAddr).balance >= eth);\r\n\r\n        emit Locked(eth, _days, address(lockAddr), _introducer);\r\n    }\r\n\r\n    /**\r\n     * @dev        Ensures the lockdrop has started\r\n     */\r\n    modifier didStart() {\r\n        require(now >= LOCK_START_TIME);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev        Ensures the lockdrop has not ended\r\n     */\r\n    modifier didNotEnd() {\r\n        require(now <= LOCK_END_TIME);\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"introducer\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_DROP_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_END_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_introducer\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Lockdrop","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005e6d7000","Library":"","LicenseType":"None","SwarmSource":"bzzr://4e19f9c974509cadd995b0246fd82bb8873200bbd389ec7bf218d174645b3c10"}]}