{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     */\r\n    function _pause() internal whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     */\r\n    function _unpause() internal whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\nRestrictions start off as enabled.\r\nOnce they are disabled, they cannot be re-enabled.\r\nOnly the owner may disable restrictions.\r\n */\r\ncontract Restrictable is Ownable {\r\n    // State variable to track whether restrictions are enabled.  Defaults to true.\r\n    bool private _restrictionsEnabled = true;\r\n\r\n    // Event emitted when flag is disabled\r\n    event RestrictionsDisabled(address indexed owner);\r\n\r\n    /**\r\n    View function to determine if restrictions are enabled\r\n     */\r\n    function isRestrictionEnabled() public view returns (bool) {\r\n        return _restrictionsEnabled;\r\n    }\r\n\r\n    /**\r\n    Function to update the enabled flag on restrictions to disabled.  Only the owner should be able to call.\r\n    This is a permanent change that cannot be undone\r\n     */\r\n    function disableRestrictions() public onlyOwner {\r\n        require(_restrictionsEnabled, \"Restrictions are already disabled.\");\r\n        \r\n        // Set the flag\r\n        _restrictionsEnabled = false;\r\n\r\n        // Trigger the event\r\n        emit RestrictionsDisabled(msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\nThis contract allows a list of administrators to be tracked.  This list can then be enforced\r\non functions with administrative permissions.  Only the owner of the contract should be allowed\r\nto modify the administrator list.\r\n */\r\ncontract Administratable is Ownable {\r\n    // The mapping to track administrator accounts - true is reserved for admin addresses.\r\n    mapping (address => bool) public administrators;\r\n\r\n    // Events to allow tracking add/remove.\r\n    event AdminAdded(address indexed addedAdmin, address indexed addedBy);\r\n    event AdminRemoved(address indexed removedAdmin, address indexed removedBy);\r\n\r\n    /**\r\n    Function modifier to enforce administrative permissions.\r\n     */\r\n    modifier onlyAdministrator() {\r\n        require(isAdministrator(msg.sender), \"Calling account is not an administrator.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    Determine if the message sender is in the administrators list.\r\n     */\r\n    function isAdministrator(address addressToTest) public view returns (bool) {\r\n        return administrators[addressToTest];\r\n    }\r\n\r\n    /**\r\n    Add an admin to the list.  This should only be callable by the owner of the contract.\r\n     */\r\n    function addAdmin(address adminToAdd) public onlyOwner {\r\n        // Verify the account is not already an admin\r\n        require(administrators[adminToAdd] == false, \"Account to be added to admin list is already an admin\");\r\n\r\n        // Set the address mapping to true to indicate it is an administrator account.\r\n        administrators[adminToAdd] = true;\r\n\r\n        // Emit the event for any watchers.\r\n        emit AdminAdded(adminToAdd, msg.sender);\r\n    }\r\n\r\n    /**\r\n    Remove an admin from the list.  This should only be callable by the owner of the contract.\r\n     */\r\n    function removeAdmin(address adminToRemove) public onlyOwner {\r\n        // Verify the account is an admin\r\n        require(administrators[adminToRemove] == true, \"Account to be removed from admin list is not already an admin\");\r\n\r\n        // Set the address mapping to false to indicate it is NOT an administrator account.  \r\n        administrators[adminToRemove] = false;\r\n\r\n        // Emit the event for any watchers.\r\n        emit AdminRemoved(adminToRemove, msg.sender);\r\n    }\r\n}\r\n\r\n/**\r\nKeeps track of whitelists and can check if sender and reciever are configured to allow a transfer.\r\nOnly administrators can update the whitelists.\r\nAny address can only be a member of one whitelist at a time.\r\n */\r\ncontract Whitelistable is Administratable {\r\n    /**\r\n    Sets an address's whitelist ID.  Only administrators should be allowed to update this.\r\n    If an address is on an existing whitelist, it will just get updated to the new value (removed from previous).\r\n     */\r\n    function addToWhitelist(address[] memory addressToAdd, uint8 whitelist) public onlyAdministrator {\r\n        for (uint256 i = 0; i < addressToAdd.length; i++) {\r\n        // Verify the whitelist is valid\r\n        require(whitelist != NO_WHITELIST, \"Invalid whitelist ID supplied\");\r\n\r\n        // Save off the previous whitelist\r\n        uint8 previousWhitelist = addressWhitelists[addressToAdd[i]];\r\n\r\n        // Set the address's whitelist ID\r\n        addressWhitelists[addressToAdd[i]] = whitelist;        \r\n\r\n        // If the previous whitelist existed then we want to indicate it has been removed\r\n        if(previousWhitelist != NO_WHITELIST) {\r\n            // Emit the event for tracking\r\n            emit AddressRemovedFromWhitelist(addressToAdd[i], previousWhitelist, msg.sender);\r\n        }\r\n\r\n        // Emit the event for new whitelist\r\n        emit AddressAddedToWhitelist(addressToAdd[i], whitelist, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n    Clears out an address's whitelist ID.  Only administrators should be allowed to update this.\r\n     */\r\n    function removeFromWhitelist(address[] memory addressToRemove) public onlyAdministrator {\r\n        for (uint256 i = 0; i < addressToRemove.length; i++) {\r\n        // Save off the previous whitelist\r\n        uint8 previousWhitelist = addressWhitelists[addressToRemove[i]];\r\n\r\n        // Zero out the previous whitelist\r\n        addressWhitelists[addressToRemove[i]] = NO_WHITELIST;\r\n\r\n        // Emit the event for tracking\r\n        emit AddressRemovedFromWhitelist(addressToRemove[i], previousWhitelist, msg.sender);\r\n        }\r\n    }\r\n        \r\n    // Zero is reserved for indicating it is not on a whitelist\r\n    uint8 constant NO_WHITELIST = 0;\r\n\r\n    // The mapping to keep track of which whitelist any address belongs to.\r\n    // 0 is reserved for no whitelist and is the default for all addresses.\r\n    mapping (address => uint8) public addressWhitelists;\r\n\r\n    // The mapping to keep track of each whitelist's outbound whitelist flags.\r\n    // Boolean flag indicates whether outbound transfers are enabled.\r\n    mapping(uint8 => mapping (uint8 => bool)) public outboundWhitelistsEnabled;\r\n\r\n    // Events to allow tracking add/remove.\r\n    event AddressAddedToWhitelist(address indexed addedAddress, uint8 indexed whitelist, address indexed addedBy);\r\n    event AddressRemovedFromWhitelist(address indexed removedAddress, uint8 indexed whitelist, address indexed removedBy);\r\n    event OutboundWhitelistUpdated(address indexed updatedBy, uint8 indexed sourceWhitelist, uint8 indexed destinationWhitelist, bool from, bool to);\r\n\r\n    /**\r\n    Sets the flag to indicate whether source whitelist is allowed to send to destination whitelist.\r\n    Only administrators should be allowed to update this.\r\n     */\r\n    function updateOutboundWhitelistEnabled(uint8 sourceWhitelist, uint8 destinationWhitelist, bool newEnabledValue) public onlyAdministrator {\r\n        // Get the old enabled flag\r\n        bool oldEnabledValue = outboundWhitelistsEnabled[sourceWhitelist][destinationWhitelist];\r\n\r\n        // Update to the new value\r\n        outboundWhitelistsEnabled[sourceWhitelist][destinationWhitelist] = newEnabledValue;\r\n\r\n        // Emit event for tracking\r\n        emit OutboundWhitelistUpdated(msg.sender, sourceWhitelist, destinationWhitelist, oldEnabledValue, newEnabledValue);\r\n    }\r\n\r\n    /**\r\n    Determine if the sender is allowed to send to the receiver.\r\n    The source whitelist must be enabled to send to the whitelist where the receiver exists.\r\n     */\r\n    function checkWhitelistAllowed(address sender, address receiver) public view returns (bool) {\r\n        // First get each address whitelist\r\n        uint8 senderWhiteList = addressWhitelists[sender];\r\n        uint8 receiverWhiteList = addressWhitelists[receiver];\r\n\r\n        // If either address is not on a whitelist then the check should fail\r\n        if(senderWhiteList == NO_WHITELIST || receiverWhiteList == NO_WHITELIST){\r\n            return false;\r\n        }\r\n\r\n        // Determine if the sending whitelist is allowed to send to the destination whitelist        \r\n        return outboundWhitelistsEnabled[senderWhiteList][receiverWhiteList];\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations with safety checks that revert on error\r\n * @dev SafeMath adapted for int256\r\n * Based on code of https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\r\n */\r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when multiplying INT256_MIN with -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n    int256 c = a * b;\r\n    require((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when dividing INT256_MIN by -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n    return a / b;\r\n  }\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n\r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    require(a >= 0);\r\n    return uint256(a);\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name}, {symbol}, and {decimals}. \r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n */\r\ncontract ERC20Mintable is MinterRole, ERC20 {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 with pausable transfers and allowances.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\ncontract ERC20Pausable is Pausable, ERC20 {\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\ncontract ERC1404 is IERC20 {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferRestriction (address from, address to, uint256 value) public view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    /// @dev Overwrite with your custom message and restrictionCode handling\r\n    function messageForTransferRestriction (uint8 restrictionCode) public view returns (string memory);\r\n}\r\n\r\ninterface IFundsDistributionToken {\r\n\t/**\r\n\t * @dev Returns the total amount of funds a given address is able to withdraw currently.\r\n\t * @param owner Address of FundsDistributionToken holder\r\n\t * @return A uint256 representing the available funds for a given account\r\n\t */\r\n\tfunction withdrawableFundsOf(address owner) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Withdraws all available funds for a FundsDistributionToken holder.\r\n\t */\r\n\tfunction withdrawFunds() external;\r\n\r\n\t/**\r\n\t * @dev This event emits when new funds are distributed\r\n\t * @param by the address of the sender who distributed funds\r\n\t * @param fundsDistributed the amount of funds received for distribution\r\n\t */\r\n\tevent FundsDistributed(address indexed by, uint256 fundsDistributed);\r\n\r\n\t/**\r\n\t * @dev This event emits when distributed funds are withdrawn by a token holder.\r\n\t * @param by the address of the receiver of funds\r\n\t * @param fundsWithdrawn the amount of funds that were withdrawn\r\n\t */\r\n\tevent FundsWithdrawn(address indexed by, uint256 fundsWithdrawn);\r\n}\r\n\r\n/** \r\n * @title FundsDistributionToken\r\n * @author Johannes Escherich\r\n * @author Roger-Wu\r\n * @author Johannes Pfeffer\r\n * @author Tom Lam\r\n * @dev A mintable token that can represent claims on cash flow of arbitrary assets such as dividends, loan repayments, \r\n * fee or revenue shares among large numbers of token holders. Anyone can deposit funds, token holders can withdraw \r\n * their claims.\r\n * FundsDistributionToken (FDT) implements the accounting logic. FDT-Extension contracts implement methods for depositing and \r\n * withdrawing funds in Ether or according to a token standard such as ERC20, ERC223, ERC777.\r\n */\r\ncontract FundsDistributionToken is ERC20Mintable, IFundsDistributionToken {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\t// optimize, see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n\tuint256 constant internal pointsMultiplier = 2**128;\r\n\tuint256 internal pointsPerShare;\r\n\r\n\tmapping(address => int256) internal pointsCorrection;\r\n\tmapping(address => uint256) internal withdrawnFunds;\r\n\r\n\t/** \r\n\t * prev. distributeDividends\r\n\t * @notice Distributes funds to token holders.\r\n\t * @dev It reverts if the total supply of tokens is 0.\r\n\t * It emits the `FundsDistributed` event if the amount of received ether is greater than 0.\r\n\t * About undistributed funds:\r\n\t *   In each distribution, there is a small amount of funds which does not get distributed,\r\n\t *     which is `(msg.value * pointsMultiplier) % totalSupply()`.\r\n\t *   With a well-chosen `pointsMultiplier`, the amount funds that are not getting distributed\r\n\t *     in a distribution can be less than 1 (base unit).\r\n\t *   We can actually keep track of the undistributed ether in a distribution\r\n\t *     and try to distribute it in the next distribution ....... todo implement  \r\n\t */\r\n\tfunction _distributeFunds(uint256 value) internal {\r\n\t\trequire(totalSupply() > 0, \"FundsDistributionToken._distributeFunds: SUPPLY_IS_ZERO\");\r\n\r\n\t\tif (value > 0) {\r\n\t\t\tpointsPerShare = pointsPerShare.add(\r\n\t\t\t\tvalue.mul(pointsMultiplier) / totalSupply()\r\n\t\t\t);\r\n\t\t\temit FundsDistributed(msg.sender, value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * prev. withdrawDividend\r\n\t * @notice Prepares funds withdrawal\r\n\t * @dev It emits a `FundsWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n\t */\r\n\tfunction _prepareWithdraw() internal returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableFundsOf(msg.sender);\r\n\r\n\t\twithdrawnFunds[msg.sender] = withdrawnFunds[msg.sender].add(_withdrawableDividend);\r\n\r\n\t\temit FundsWithdrawn(msg.sender, _withdrawableDividend);\r\n\r\n\t\treturn _withdrawableDividend;\r\n\t}\r\n\r\n\t/** \r\n\t * prev. withdrawableDividendOf\r\n\t * @notice View the amount of funds that an address can withdraw.\r\n\t * @param _owner The address of a token holder.\r\n\t * @return The amount funds that `_owner` can withdraw.\r\n\t */\r\n\tfunction withdrawableFundsOf(address _owner) public view returns(uint256) {\r\n\t\treturn accumulativeFundsOf(_owner).sub(withdrawnFunds[_owner]);\r\n\t}\r\n\r\n\t/**\r\n\t * prev. withdrawnDividendOf\r\n\t * @notice View the amount of funds that an address has withdrawn.\r\n\t * @param _owner The address of a token holder.\r\n\t * @return The amount of funds that `_owner` has withdrawn.\r\n\t */\r\n\tfunction withdrawnFundsOf(address _owner) public view returns(uint256) {\r\n\t\treturn withdrawnFunds[_owner];\r\n\t}\r\n\r\n\t/**\r\n\t * prev. accumulativeDividendOf\r\n\t * @notice View the amount of funds that an address has earned in total.\r\n\t * @dev accumulativeFundsOf(_owner) = withdrawableFundsOf(_owner) + withdrawnFundsOf(_owner)\r\n\t * = (pointsPerShare * balanceOf(_owner) + pointsCorrection[_owner]) / pointsMultiplier\r\n\t * @param _owner The address of a token holder.\r\n\t * @return The amount of funds that `_owner` has earned in total.\r\n\t */\r\n\tfunction accumulativeFundsOf(address _owner) public view returns(uint256) {\r\n\t\treturn pointsPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n\t\t\t.add(pointsCorrection[_owner]).toUint256Safe() / pointsMultiplier;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that transfer tokens from one address to another.\r\n\t * Update pointsCorrection to keep funds unchanged.\r\n\t * @param from The address to transfer from.\r\n\t * @param to The address to transfer to.\r\n\t * @param value The amount to be transferred.\r\n\t */\r\n\tfunction _transfer(address from, address to, uint256 value) internal {\r\n\t\tsuper._transfer(from, to, value);\r\n\r\n\t\tint256 _magCorrection = pointsPerShare.mul(value).toInt256Safe();\r\n\t\tpointsCorrection[from] = pointsCorrection[from].add(_magCorrection);\r\n\t\tpointsCorrection[to] = pointsCorrection[to].sub(_magCorrection);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function that mints tokens to an account.\r\n\t * Update pointsCorrection to keep funds unchanged.\r\n\t * @param account The account that will receive the created tokens.\r\n\t * @param value The amount that will be created.\r\n\t */\r\n\tfunction _mint(address account, uint256 value) internal {\r\n\t\tsuper._mint(account, value);\r\n\r\n\t\tpointsCorrection[account] = pointsCorrection[account]\r\n\t\t\t.sub( (pointsPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\r\n\t/** \r\n\t * @dev Internal function that burns an amount of the token of a given account.\r\n\t * Update pointsCorrection to keep funds unchanged.\r\n\t * @param account The account whose tokens will be burnt.\r\n\t * @param value The amount that will be burnt.\r\n\t */\r\n\tfunction _burn(address account, uint256 value) internal {\r\n\t\tsuper._burn(account, value);\r\n\r\n\t\tpointsCorrection[account] = pointsCorrection[account]\r\n\t\t\t.add( (pointsPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n}\r\n\r\ncontract SecurityToken is Restrictable, Whitelistable, ERC1404, FundsDistributionToken {\r\n    // presented by OpenEsquire || lexDAO LLC ~ Hybrid ERC-1404_2222 ~ Use at own risk!\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n    // message to describe token status (e.g., transfer restriction string)\r\n    string public legend; \r\n    \r\n\t// ERC1404 Error codes and messages\r\n    uint8 public constant SUCCESS_CODE = 0;\r\n    uint8 public constant FAILURE_NON_WHITELIST = 1;\r\n    string public constant SUCCESS_MESSAGE = \"SUCCESS\";\r\n    string public constant FAILURE_NON_WHITELIST_MESSAGE = \"The transfer was restricted due to whitelist configuration.\";\r\n    string public constant UNKNOWN_ERROR = \"Unknown Error Code\";\r\n\r\n\t// token in which the funds can be sent to the FundsDistributionToken\r\n\tIERC20 public fundsToken;\r\n\r\n\t// balance of fundsToken that the FundsDistributionToken currently holds\r\n\tuint256 public fundsTokenBalance;\r\n\r\n\tmodifier onlyFundsToken () {\r\n\t\trequire(msg.sender == address(fundsToken), \"SecurityToken: UNAUTHORIZED_SENDER\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tstring memory name, \r\n\t\tstring memory symbol,\r\n\t\tstring memory _legend,\r\n\t\tuint8 decimals,\r\n\t\tIERC20 _fundsToken,\r\n        address[] memory ownership,\r\n        uint256[] memory issuance\r\n\t) \r\n\t\tpublic \r\n\t\tERC20(name, symbol, decimals)\r\n\t{\r\n\t\trequire(address(_fundsToken) != address(0), \"SecurityToken: INVALID_FUNDS_TOKEN_ADDRESS\");\r\n\r\n        for (uint256 i = 0; i < ownership.length; i++) {\r\n\t\t    _mint(ownership[i], issuance[i]);\r\n        }\r\n        \r\n        legend = _legend;\r\n\t\tfundsToken = _fundsToken;\r\n\t\t\r\n        _addMinter(ownership[0]); \r\n        transferOwnership(ownership[0]);\r\n        administrators[ownership[0]] = true;\r\n\t}\r\n\r\n    /**\r\n    This function detects whether a transfer should be restricted and not allowed.\r\n    If the function returns SUCCESS_CODE (0) then it should be allowed.\r\n     */\r\n    function detectTransferRestriction (address from, address to, uint256)\r\n        public\r\n        view\r\n        returns (uint8)\r\n    {               \r\n        // If the restrictions have been disabled by the owner, then just return success\r\n        // Logic defined in Restrictable parent class\r\n        if(!isRestrictionEnabled()) {\r\n            return SUCCESS_CODE;\r\n        }\r\n\r\n        // If the contract owner is transferring, then ignore restrictions        \r\n        if(from == owner()) {\r\n            return SUCCESS_CODE;\r\n        }\r\n\r\n        // Restrictions are enabled, so verify the whitelist config allows the transfer.\r\n        // Logic defined in Whitelistable parent class\r\n        if(!checkWhitelistAllowed(from, to)) {\r\n            return FAILURE_NON_WHITELIST;\r\n        }\r\n\r\n        // If no restrictions were triggered return success\r\n        return SUCCESS_CODE;\r\n    }\r\n    \r\n    /**\r\n    This function allows a wallet or other client to get a human readable string to show\r\n    a user if a transfer was restricted.  It should return enough information for the user\r\n    to know why it failed.\r\n     */\r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        if (restrictionCode == SUCCESS_CODE) {\r\n            return SUCCESS_MESSAGE;\r\n        }\r\n\r\n        if (restrictionCode == FAILURE_NON_WHITELIST) {\r\n            return FAILURE_NON_WHITELIST_MESSAGE;\r\n        }\r\n\r\n        // An unknown error code was passed in.\r\n        return UNKNOWN_ERROR;\r\n    }\r\n\r\n    /**\r\n    Evaluates whether a transfer should be allowed or not.\r\n     */\r\n    modifier notRestricted (address from, address to, uint256 value) {        \r\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\r\n        require(restrictionCode == SUCCESS_CODE, messageForTransferRestriction(restrictionCode));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    Overrides the parent class token transfer function to enforce restrictions.\r\n     */\r\n    function transfer (address to, uint256 value)\r\n        public\r\n        notRestricted(msg.sender, to, value)\r\n        returns (bool success)\r\n    {\r\n        success = super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n    Overrides the parent class token transferFrom function to enforce restrictions.\r\n     */\r\n    function transferFrom (address from, address to, uint256 value)\r\n        public\r\n        notRestricted(from, to, value)\r\n        returns (bool success)\r\n    {\r\n        success = super.transferFrom(from, to, value);\r\n    }\r\n\r\n\t/**\r\n\t * @notice Withdraws all available funds for a token holder\r\n\t */\r\n\tfunction withdrawFunds() \r\n\t\texternal \r\n\t{\r\n\t\tuint256 withdrawableFunds = _prepareWithdraw();\r\n\r\n\t\trequire(fundsToken.transfer(msg.sender, withdrawableFunds), \"SecurityToken: TRANSFER_FAILED\");\r\n\r\n\t\t_updateFundsTokenBalance();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Updates the current funds token balance \r\n\t * and returns the difference of new and previous funds token balances\r\n\t * @return A int256 representing the difference of the new and previous funds token balance\r\n\t */\r\n\tfunction _updateFundsTokenBalance() internal returns (int256) {\r\n\t\tuint256 prevFundsTokenBalance = fundsTokenBalance;\r\n\r\n\t\tfundsTokenBalance = fundsToken.balanceOf(address(this));\r\n\r\n\t\treturn int256(fundsTokenBalance).sub(int256(prevFundsTokenBalance));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Register a payment of funds in tokens. May be called directly after a deposit is made.\r\n\t * @dev Calls _updateFundsTokenBalance(), whereby the contract computes the delta of the previous and the new \r\n\t * funds token balance and increments the total received funds (cumulative) by delta by calling _registerFunds()\r\n\t */\r\n\tfunction updateFundsReceived() external {\r\n\t\tint256 newFunds = _updateFundsTokenBalance();\r\n\r\n\t\tif (newFunds > 0) {\r\n\t\t\t_distributeFunds(newFunds.toUint256Safe());\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract SecurityTokenFactory {\r\n    // presented by OpenEsquire || lexDAO LLC ~ Hybrid ERC-1404_2222 Factory ~ Use at own risk!\r\n    \r\n    // factory settings\r\n    string public stamp;\r\n    uint256 factoryFee; \r\n    address payable public manager;\r\n    \r\n    SecurityToken private ST;\r\n    \r\n    address[] public tokens;\r\n    \r\n    event Deployed(address indexed ST, address indexed owner);\r\n    \r\n    constructor (string memory _stamp, uint256 _factoryFee, address payable _manager) public \r\n\t{\r\n        stamp = _stamp;\r\n        factoryFee =_factoryFee;\r\n        manager = _manager;\r\n\t}\r\n    \r\n    function newSecurityToken(\r\n        string memory name, \r\n\t\tstring memory symbol,\r\n\t\tstring memory _legend,\r\n\t\tuint8 decimals,\r\n\t\tIERC20 _fundsToken,\r\n\t\taddress[] memory ownership,\r\n\t\tuint256[] memory issuance) public payable {\r\n\t\trequire(msg.value == factoryFee);\r\n       \r\n        ST = new SecurityToken(\r\n            name, \r\n            symbol,\r\n            _legend,\r\n            decimals,\r\n            _fundsToken,\r\n            ownership,\r\n            issuance);\r\n        \r\n        tokens.push(address(ST));\r\n        \r\n        address(manager).transfer(msg.value);\r\n        \r\n        emit Deployed(address(ST), ownership[0]);\r\n    }\r\n    \r\n    function getTokenCount() public view returns (uint256 tokenCount) {\r\n        return tokens.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_stamp\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_factoryFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ST\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_legend\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"_fundsToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"ownership\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"issuance\",\"type\":\"uint256[]\"}],\"name\":\"newSecurityToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stamp\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SecurityTokenFactory","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000005543df729c00000000000000000000000000097103fda00a2b47eac669568063c00e65866a6330000000000000000000000000000000000000000000000000000000000000010e29a96efb88ff09f8cb1e29a94efb88f00000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://2118a6a996970670b9b2c7927ac48ba234ed2121b359479c7e0e6cf74b444d0a"}]}