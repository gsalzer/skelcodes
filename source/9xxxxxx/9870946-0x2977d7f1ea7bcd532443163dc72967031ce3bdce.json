{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nabstract contract AbstractSweeper {\r\n    function sweep(address token, uint amount) virtual external returns (bool);\r\n\r\n    fallback() external {}\r\n\r\n    BitslerController controller;\r\n\r\n    constructor(address _controller) internal{\r\n        controller = BitslerController(_controller);\r\n    }\r\n\r\n    modifier canSweep() {\r\n        require((controller.isAuthorizedCaller(msg.sender) && msg.sender == controller.owner()) || msg.sender == controller.dev(), \"unauthorized\");\r\n        require(!controller.halted(), \"halted\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function balanceOf(address a) external pure returns (uint) {\r\n        (a);\r\n        return 0;\r\n    }\r\n\r\n    function transfer(address a, uint val) external pure returns (bool) {\r\n        (a);\r\n        (val);\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract DefaultSweeper is AbstractSweeper {\r\n    constructor(address controller) public\r\n             AbstractSweeper(controller) {}\r\n\r\n    function sweep(address _token, uint _amount)\r\n    override\r\n    external\r\n    canSweep\r\n    returns (bool) {\r\n        bool success = false;\r\n        address payable destination = controller.destination();\r\n\r\n        if (_token != address(0)) {\r\n            Token token = Token(_token);\r\n            uint amount = _amount;\r\n            if (amount > token.balanceOf(address(this))) {\r\n                return false;\r\n            }\r\n            token.transfer(destination, amount);\r\n            success = true;\r\n        }\r\n        else {\r\n            uint amountInWei = _amount;\r\n            if (amountInWei > address(this).balance) {\r\n                return false;\r\n            }\r\n\r\n            success = destination.send(amountInWei);\r\n        }\r\n\r\n        if (success) {\r\n            controller.logSweep(address(this), destination, _token, _amount);\r\n        }\r\n        return success;\r\n    }\r\n}\r\n\r\ncontract UserWallet {\r\n    AbstractSweeperList sweeperList;\r\n    constructor(address _sweeperlist) public {\r\n        sweeperList = AbstractSweeperList(_sweeperlist);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public pure {\r\n        (_from);\r\n        (_value);\r\n        (_data);\r\n     }\r\n\r\n    function sweep(address _token, uint _amount) external returns (bool) {\r\n        (_amount);\r\n        (bool success,) = sweeperList.sweeperOf(_token).delegatecall(msg.data);\r\n        return success;\r\n    }\r\n}\r\n\r\nabstract contract AbstractSweeperList {\r\n    function sweeperOf(address _token) virtual external returns (address);\r\n}\r\n\r\ncontract BitslerController is AbstractSweeperList {\r\n    address public owner;\r\n    address public dev;\r\n    mapping (address => bool) authorizedCaller;\r\n    address[] private authorizedCallerLists;\r\n    address payable public destination;\r\n    bool public halted;\r\n\r\n    event LogNewWallet(address receiver);\r\n    event LogSweep(address indexed from, address indexed to, address indexed token, uint amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"unauthorized\"); \r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedCaller() {\r\n        require(msg.sender == dev || authorizedCaller[msg.sender] == true, \"unauthorized\"); \r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmins() {\r\n        require(msg.sender == dev || (authorizedCaller[msg.sender] == true && msg.sender == owner),\"unauthorized\"); \r\n        _;\r\n    }\r\n\r\n    constructor(address _dev) public\r\n    {\r\n        owner = msg.sender;\r\n        destination = msg.sender;\r\n        authorizedCaller[msg.sender] = true;\r\n        authorizedCallerLists.push(msg.sender);\r\n        dev = _dev;\r\n    }\r\n\r\n    function addAuthorizedCaller(address _newCaller) external onlyOwner {\r\n        require(!authorizedCaller[_newCaller], \"already added\");\r\n        authorizedCaller[_newCaller] == true;\r\n        authorizedCallerLists.push(_newCaller);\r\n    }\r\n\r\n    function changeDestination(address payable _dest) external onlyOwner {\r\n        destination = _dest;\r\n    }\r\n\r\n    function changeOwner(address _owner) external onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function makeWallet() external onlyAdmins returns (address wallet)  {\r\n        wallet = address(new UserWallet(address(this)));\r\n        emit LogNewWallet(wallet);\r\n    }\r\n    \r\n    function isAuthorizedCaller(address _caller) external view returns(bool) {\r\n        return authorizedCaller[_caller] || dev == _caller;\r\n    }\r\n\r\n    function _authorizedCallers() public view returns (address[] memory){\r\n        return authorizedCallerLists;\r\n    }\r\n    \r\n    function halt() external onlyAdmins {\r\n        halted = true;\r\n    }\r\n\r\n    function start() external onlyOwner {\r\n        halted = false;\r\n    }\r\n\r\n    address public defaultSweeper = address(new DefaultSweeper(address(this)));\r\n    mapping (address => address) sweepers;\r\n\r\n    function addSweeper(address _token, address _sweeper) external onlyOwner {\r\n        sweepers[_token] = _sweeper;\r\n    }\r\n\r\n    function sweeperOf(address _token) override external returns (address) {\r\n        address sweeper = sweepers[_token];\r\n        if (sweeper == address(0)) sweeper = defaultSweeper;\r\n        return sweeper;\r\n    }\r\n\r\n    function logSweep(address from, address to, address token, uint amount) external {\r\n        emit LogSweep(from, to, token, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"LogNewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogSweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_authorizedCallers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCaller\",\"type\":\"address\"}],\"name\":\"addAuthorizedCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sweeper\",\"type\":\"address\"}],\"name\":\"addSweeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"changeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSweeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"isAuthorizedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweeperOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BitslerController","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c1c78a66a3f5c0e4d1dacaee0608816fca0c461","Library":"","LicenseType":"","SwarmSource":""}]}