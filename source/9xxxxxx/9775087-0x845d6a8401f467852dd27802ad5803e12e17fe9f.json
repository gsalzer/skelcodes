{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.6.4;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function mint(address account, uint256 amount) external;\r\n  function burn(address account, uint256 amount) external;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract glare is Owned {\r\n  using SafeMath for uint;\r\n\r\n  constructor() public {\r\n    buyMinimum = 10**16;\r\n    sellMinimum = 10**16;\r\n    buyTax = 10 * 10**2;\r\n    referRate = 25 * 10**2;\r\n    referRateMasternode = 50 * 10**2;\r\n\r\n    earlyPenalty = 90 * 10**2;\r\n    cdGLXMin = 10**17;\r\n    cdDurrationMax = 365;\r\n\r\n    scalefactor = 10**12;\r\n  }\r\n\r\n  struct accountCDStruct {\r\n    uint256 tokenAmount;\r\n    uint256 created;\r\n    uint256 contractDurration;\r\n    bool closed;\r\n  }\r\n\r\n  IERC20 public glaretoken; //GLX token interface\r\n\r\n  //BASE BUY AND SELL VARIABLES\r\n  uint256 public scalefactor;         //Price scalar\r\n  uint256 public buyMinimum;          //minimum buy value in ETH\r\n  uint256 public sellMinimum;         //minimum sell value in ETH\r\n  uint256 public buyTax;              //buy tax in 100x tax %\r\n  uint256 public referRate;           //ref rate in 100x ref %\r\n  uint256 public referRateMasternode; //masternode ref rate in 100x ref %\r\n\r\n  mapping(address => bool) public masternode; //is a refer address a masternode?\r\n  mapping(address => address) public referBook; //refer book address --> refer address\r\n\r\n  //CD VARIABLES\r\n  uint256 public tokenTime; //Total number of GLX days\r\n  uint256 public cdGLXMin;\r\n  uint256 public cdDurrationMax;\r\n  uint256 public earlyPenalty; //penalty for closing contract early in 100x 100% - penalty %\r\n  mapping(address => accountCDStruct[]) public accountCD; //account --> id --> contract data\r\n\r\n\r\n\r\n  function buyTokens(address inputrefer) public payable {\r\n    require(msg.value >= buyMinimum, \"Does not meet buy minimum\");\r\n    uint256 tokens = getTokenBuyResult();\r\n    uint256 taxedTokens = tokens.mul(buyTax).div(10**4);\r\n    uint256 userTokens = tokens.sub(taxedTokens);\r\n\r\n\r\n    //REF CHECK\r\n    address refer = referBook[msg.sender];\r\n    if(refer == address(0)) {\r\n      refer = inputrefer;\r\n    }\r\n    if(refer != msg.sender) {\r\n      if(refer != address(0)) {\r\n        if(referBook[msg.sender] == address(0)) {\r\n          referBook[msg.sender] = refer;\r\n        }\r\n      }\r\n    }\r\n    //IF REFER PAY THEM\r\n    if(referBook[msg.sender] != address(0)) {\r\n      if(masternode[refer] == true){\r\n        uint256 refamt = referRateMasternode.mul(taxedTokens).div(10**4);\r\n        mintGlareToken(refer, refamt);\r\n        mintGlareToken(address(this), taxedTokens.sub(refamt));\r\n      }\r\n      else {\r\n        uint256 refamt = referRate.mul(taxedTokens).div(10**4);\r\n        mintGlareToken(refer, refamt);\r\n        mintGlareToken(address(this), taxedTokens.sub(refamt));\r\n      }\r\n    }\r\n    else {\r\n      mintGlareToken(address(this), taxedTokens);\r\n    }\r\n\r\n    mintGlareToken(msg.sender, userTokens);\r\n  }\r\n\r\n  function sellTokens(uint256 amount) public {\r\n    uint256 eth = getTokenSellResult(amount);\r\n    address payable account = msg.sender;\r\n    require(eth >= sellMinimum, \"Does not meet sell minimum\");\r\n    require(glaretoken.balanceOf(msg.sender) >= amount, \"Sell amount exceeds balance\");\r\n    burnGlareToken(account, amount);\r\n    account.transfer(eth);\r\n  }\r\n\r\n  function openCD(uint256 amount, uint256 durration) public {\r\n    require(amount >= cdGLXMin, \"Token amount less than minimum\");\r\n    require(durration > 0, \"CD durration must be at least 1 day\");\r\n    require(durration <= cdDurrationMax, \"CD durration longer than maximum\");\r\n    require(glaretoken.balanceOf(msg.sender) >= amount, \"Lock amount exceeds balance\");\r\n    require(glaretoken.transferFrom(msg.sender, address(this), amount));\r\n    tokenTime = amount.mul(durration).div(10**13).add(tokenTime);\r\n\r\n    accountCDStruct memory newcd;\r\n    newcd.tokenAmount = amount;\r\n    newcd.contractDurration = durration;\r\n    newcd.created = now;\r\n\r\n    accountCD[msg.sender].push(newcd);\r\n  }\r\n\r\n  function closeCD(uint256 index) public {\r\n    require(accountCD[msg.sender][index].tokenAmount != 0);\r\n    require(accountCD[msg.sender][index].closed == false);\r\n\r\n    uint256 contractTokenTime = accountCD[msg.sender][index].contractDurration.mul(accountCD[msg.sender][index].tokenAmount).div(10**13);\r\n    uint256 tokensdue = contractTokenTime.mul(glaretoken.balanceOf(address(this))).div(tokenTime);\r\n\r\n    if(accountCD[msg.sender][index].created.add(accountCD[msg.sender][index].contractDurration.mul(1 days)) > now) {\r\n      tokensdue = earlyPenalty.mul(accountCD[msg.sender][index].tokenAmount).div(10**4);\r\n    }\r\n\r\n    tokenTime = tokenTime.sub(contractTokenTime);\r\n\r\n    accountCD[msg.sender][index].closed = true;\r\n    glaretoken.transfer(msg.sender, tokensdue);\r\n  }\r\n\r\n  //VIEW FUNCTIONS\r\n  //returns the spot price in terms of eth / token\r\n  function spotprice() public view returns(uint256) {\r\n    if(glaretoken.totalSupply() == 0) {\r\n      return(0);\r\n    }\r\n    else {\r\n      return(address(this).balance.mul(2 * 10**18).div(glaretoken.totalSupply()));\r\n    }\r\n  }\r\n  function getTokenBuyResult() public view returns(uint256) {\r\n    uint256 _sold = glaretoken.totalSupply();\r\n    uint256 _ethnew = address(this).balance;\r\n    uint256 _snew = sqrt(_ethnew.mul(2 * 10**18).div(scalefactor)).mul(10**9);\r\n    uint256 _sout = _snew - _sold;\r\n    return(_sout);\r\n  }\r\n  function getTokenSellResult(uint256 amount) public view returns(uint256) {\r\n    uint256 _ethold = address(this).balance;\r\n    uint256 _sold = glaretoken.totalSupply();\r\n    uint256 _snew = _sold.sub(amount);\r\n    uint256 _ethnew = scalefactor.mul(_snew**2).div(2*10**36);\r\n    uint256 _ethout = _ethold - _ethnew;\r\n    return(_ethout);\r\n  }\r\n\r\n  function getAccountCDLength(address account) public view returns(uint256) {\r\n    return(accountCD[account].length);\r\n  }\r\n\r\n  //INTERNAL FUNCTIONS\r\n  function mintGlareToken(address account, uint256 amount) internal {\r\n    glaretoken.mint(account, amount);\r\n  }\r\n  function burnGlareToken(address account, uint256 amount) internal {\r\n    glaretoken.burn(account, amount);\r\n  }\r\n\r\n  //ADMIN FUNCTIONS\r\n  function setBuyMinimum(uint256 eth) public onlyOwner() {\r\n    buyMinimum = eth;\r\n  }\r\n  function setSellMinimum(uint256 eth) public onlyOwner() {\r\n    sellMinimum = eth;\r\n  }\r\n  function setMasternode(address account, bool status) public onlyOwner() {\r\n    masternode[account] = status;\r\n  }\r\n  function setGlareToken(IERC20 _glaretoken) public onlyOwner() {\r\n    glaretoken = _glaretoken;\r\n  }\r\n  function setCdGLXMin(uint256 amount) public onlyOwner() {\r\n    cdGLXMin = amount;\r\n  }\r\n  function setCdDurrationMax(uint256 durration) public onlyOwner() {\r\n    cdDurrationMax = durration;\r\n  }\r\n\r\n  //Additional needed math functions not part of safemath\r\n  function sqrt(uint x) internal pure returns (uint y) {\r\n    uint z = (x + 1) / 2;\r\n    y = x;\r\n    while (z < y) {\r\n        y = z;\r\n        z = (x / z + z) / 2;\r\n    }\r\n}\r\n\r\n  fallback() external payable{\r\n    revert();\r\n  }\r\n    receive() external payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Returns the addition of two unsigned integers, reverting on\r\n  * overflow.\r\n  *\r\n  * Counterpart to Solidity's `+` operator.\r\n  *\r\n  * Requirements:\r\n  * - Addition cannot overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the subtraction of two unsigned integers, reverting on\r\n  * overflow (when the result is negative).\r\n  *\r\n  * Counterpart to Solidity's `-` operator.\r\n  *\r\n  * Requirements:\r\n  * - Subtraction cannot overflow.\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n  * overflow (when the result is negative).\r\n  *\r\n  * Counterpart to Solidity's `-` operator.\r\n  *\r\n  * Requirements:\r\n  * - Subtraction cannot overflow.\r\n  *\r\n  * _Available since v2.4.0._\r\n  */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the multiplication of two unsigned integers, reverting on\r\n  * overflow.\r\n  *\r\n  * Counterpart to Solidity's `*` operator.\r\n  *\r\n  * Requirements:\r\n  * - Multiplication cannot overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the integer division of two unsigned integers. Reverts on\r\n  * division by zero. The result is rounded towards zero.\r\n  *\r\n  * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n  * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n  * uses an invalid opcode to revert (consuming all remaining gas).\r\n  *\r\n  * Requirements:\r\n  * - The divisor cannot be zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n  * division by zero. The result is rounded towards zero.\r\n  *\r\n  * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n  * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n  * uses an invalid opcode to revert (consuming all remaining gas).\r\n  *\r\n  * Requirements:\r\n  * - The divisor cannot be zero.\r\n  *\r\n  * _Available since v2.4.0._\r\n  */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n  * Reverts when dividing by zero.\r\n  *\r\n  * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n  * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n  * invalid opcode to revert (consuming all remaining gas).\r\n  *\r\n  * Requirements:\r\n  * - The divisor cannot be zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n  * Reverts with custom message when dividing by zero.\r\n  *\r\n  * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n  * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n  * invalid opcode to revert (consuming all remaining gas).\r\n  *\r\n  * Requirements:\r\n  * - The divisor cannot be zero.\r\n  *\r\n  * _Available since v2.4.0._\r\n  */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountCD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractDurration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputrefer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdDurrationMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdGLXMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeCD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountCDLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBuyResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenSellResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glaretoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masternode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durration\",\"type\":\"uint256\"}],\"name\":\"openCD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referRateMasternode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scalefactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setBuyMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durration\",\"type\":\"uint256\"}],\"name\":\"setCdDurrationMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setCdGLXMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_glaretoken\",\"type\":\"address\"}],\"name\":\"setGlareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMasternode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"setSellMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"glare","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://567c880d7ecafec0100acfeaf910a68636d849b4b086c225ec6733aa76818d5c"}]}