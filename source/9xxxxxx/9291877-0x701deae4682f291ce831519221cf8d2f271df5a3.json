{"status":"1","message":"OK","result":[{"SourceCode":"{\"VERCO.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./VERCO_ERC20_SmartContract.sol\\\";\\n\\ncontract VERCO is ERC1384BasicContract {\\n  //  using SafeMath for uint256;\\n\\n\\tconstructor() public {\\n\\t\\tname = \\\"Vector Robotics\\\";\\n\\t\\tdecimals = 18;\\n\\t\\ttotalSupply = 1000000000000000000;\\n\\t\\tsymbol = \\\"VERCO\\\";\\n\\t\\tversion = \\\"1.0\\\";\\n\\t\\tbalances[msg.sender] = totalSupply;\\n\\t}\\n}\\n\\ncontract Crowdsale is VERCO {\\n\\n\\n    /**@dev Sell tokens for ether\\n    \\n    */\\n    function buyTokens () public payable{\\n\\t    require(balances[project_owner] \\u003e= msg.value);\\n\\t    require(msg.value \\u003e 0, \\\"AMOUNT EQUALS ZERO\\\");\\n\\t    require(msg.sender != project_owner, \\\"NOT BUYER\\\");\\n\\t    balances[project_owner] = balances[project_owner].sub(msg.value);\\n\\t    balances[msg.sender] = balances[msg.sender].add(msg.value);\\n    }\\n\\n\\n    //@dev  accept ETH\\n    function () external payable {\\n    buyTokens();\\n    saleAgent.transfer(msg.value);\\n    }\\n    \\n}\"},\"VERCO_ERC20_SmartContract.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n/**\\n* Version: 0.1.0\\n*  * Equity agreement standard used for Ethereum smart contracts\\n blockchain for the apportionment of the capital project.\\n* The current standard version of the Agreement is 0.1.0, which includes the main \\n* information about the project application, creation of equity, confirming the validity of equity,\\n* capital transfer, capital transfer accounting and other functions.\\n*  Payment of dividends. \\n*  Decentralized management of the company through voting. \\n*  Acceptance of a member to the Board of Directors. \\n* * Exclusion of a participant from the Board of Directors.\\n*/\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        require(c \\u003e= a);\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b \\u003c= a);\\n        c = a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n        require(a == 0 || c / a == b);\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b \\u003e 0);\\n        c = a / b;\\n    }\\n}\\n\\n\\ncontract ERC20Basic{\\n\\n    function balanceOf(address tokenOwner) public view returns (uint256 amount);\\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\\n    function transfer(address to, uint tokens) public;\\n    function approve(address spender, uint tokens) public;\\n    function transferFrom(address _from, address to, uint tokens) public;\\n    function dividendToReward() internal;\\n    function rewardTreasury () public view returns (uint256);\\n    function dividendPaymentsTime (uint256 _start) public returns (uint256 Start_reward, uint256 End_reward);\\n    event Transfer(address indexed _from, address indexed to, uint tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\n\\n}\\n\\ncontract ERC20 is ERC20Basic{\\n    using SafeMath for uint256;\\n    \\n    // Tokens total supply\\n    uint public totalSupply;\\n\\t\\n\\t// Company\\u0027s name\\n\\tstring public name;\\n\\t\\n\\t// Number of decimals\\n\\tuint8 public decimals;\\n\\t\\n\\t// Token symbol\\n\\tstring public symbol;\\n\\t\\n\\t// Start of dividend payments\\n\\tuint256 public dividend_start;\\n\\t\\n\\t// end of dividend payments\\n\\tuint256 public dividend_end;\\n\\t\\n\\t// Token version\\n\\tstring public version;\\n\\t\\n\\t//Token buyer\\n\\taddress payable saleAgent;\\n\\t\\n\\t// Project owner address\\n\\taddress payable project_owner = msg.sender;\\n\\t\\n\\t// Dividend to receive\\n\\tuint256 dividend;\\n\\t\\n\\t// Token owner address\\n\\taddress payable token_owner;\\n\\t\\n\\t// Balances blockchain\\n\\tmapping (address =\\u003e uint256) balances;\\n\\t\\n\\t// Balances blockchain\\n\\tmapping (address =\\u003e mapping (address =\\u003e uint)) allowed;\\n\\t\\n\\t// Holder struct\\n\\t struct Holder {\\n\\t    uint256 quantity;\\n        uint256 rewardWithdrawTime;\\n    }\\n    \\n    // Holder blockchain\\n    mapping(address =\\u003e Holder) holders;\\n    \\n    \\n    \\n\\t\\t//Fix for short address attack against ERC20\\n\\tmodifier onlyPayloadSize(uint size) {\\n\\t\\tassert(msg.data.length == size + 4);\\n\\t\\t_;\\n\\t}\\n\\t\\n\\t// Owner modifier\\n\\t modifier onlyOwner {\\n        require(msg.sender == project_owner, \\\"ACCESS DENIED\\\");\\n        _;\\n    }\\n\\n    /** @dev Shows balances `_token_owner`.\\n     * @return amount of tokens owned by `_token_owner`.\\n     */\\n\\n\\tfunction balanceOf(address _token_owner) public view returns (uint256 amount) {\\n\\t\\treturn balances[_token_owner];\\n    }\\n\\n    /**\\n     * @dev Moves `tokens` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n\\n\\tfunction transfer(address to, uint tokens) public  onlyPayloadSize(2*32) {\\n\\t    require(balances[msg.sender] \\u003e= tokens \\u0026\\u0026 tokens \\u003e 0);\\n\\t    balances[msg.sender] = balances[msg.sender].sub(tokens);\\n\\t    balances[to] = balances[to].add(tokens);\\n\\t    emit Transfer(msg.sender, to, tokens);        \\n    }\\n\\n    /**\\n     * @dev Moves `tokens` tokens from `_from` to `_to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n\\n    function transferFrom (address _from, address to, uint tokens) public {\\n\\t    require(balances[_from] \\u003e= tokens \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= tokens \\u0026\\u0026 tokens \\u003e 0);\\n            balances[to] = balances[to].add(tokens);\\n            balances[_from] = balances[_from].sub(tokens);\\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(tokens);\\n            emit Transfer(_from, to, tokens);\\n    }\\n\\n    /** @dev Sets `tokens` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     *  boolean value indicating whether the operation succeeded.\\n     * Emits an {Approval} event.\\n     */\\n\\n\\tfunction  approve(address spender, uint tokens) public {\\n\\t\\tallowed[msg.sender][spender] = tokens;\\n\\t\\temit Approval(msg.sender, spender, tokens);\\n\\t}\\n\\n    /**@dev allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     * @return remaining number of tokens that `spender` will be\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n\\n\\tfunction allowance(address _token_owner, address spender) public view returns (uint256 remaining) {\\n\\t\\treturn allowed[_token_owner][spender];\\n\\t}\\n\\t\\n\\t/**\\n\\t * @dev Set time of dividend Payments.\\n\\t * @return Start_reward\\n\\t*/\\n\\t\\n\\tfunction dividendPaymentsTime (uint256 _start) public onlyOwner returns (uint256 Start_reward, uint256 End_reward)  {\\n\\t    uint256 check_time = block.timestamp;\\n\\t   \\trequire (check_time \\u003c _start, \\\"WRONG TIME, LESS THEM CURRENT\\\");\\n\\t   //\\trequire (check_time \\u003c _start.add(2629743), \\\"ONE MONTH BEFORE THE START OF PAYMENTS\\\");\\n\\t    dividend_start = _start;\\n        dividend_end = dividend_start.add(2629743);\\n        return (dividend_start, dividend_end);\\n\\t}\\n\\t\\n\\t/**@dev Shows balance of ether on project_owner address\\n    * @return project_owner.balance\\n    */\\n\\n    function rewardTreasury () public view returns (uint256){\\n     return    project_owner.balance;\\n    }\\n\\t\\n\\t/*@dev call _token_owner address \\n\\t* @return Revard _dividend\\n\\t* private function dividend withdraw \\n\\t*/\\n\\tfunction reward () public view returns (uint256 Reward) {\\n\\tuint256 temp_allowance = project_owner.balance;\\n    require(temp_allowance \\u003e 0, \\\"BALANCE IS EMPTY\\\");\\n    require(balances[msg.sender] != 0, \\\"ZERO BALANCE\\\");\\n    uint256 temp_Fas_count = balances[msg.sender];\\n    uint256 _percentage = temp_Fas_count.mul(100000).div(totalSupply);\\n    uint256 _dividend = temp_allowance.mul(_percentage).div(100000);\\n    return _dividend;\\n  }\\n\\t\\n\\t /** \\n    * Distribution of benefits\\n    * param _token_owner Divider\\u0027s Token address\\n    * binds the time stamp of receipt of dividends in struct \\u0027Holder\\u0027 to\\n    * \\u0027holders\\u0027 to exclude multiple receipt of dividends, valid for 30 days. \\n    * Dividends are received once a month. \\n    * Dividends are debited from the Treasury address. \\n    * The Treasury is replenished with ether depending on the results of the company\\u0027s work.\\n    */\\n    function dividendToReward() internal {\\n           \\tuint256 temp_allowance = project_owner.balance;\\n            require(balances[msg.sender] != 0, \\\"ZERO BALANCE\\\");\\n            require(temp_allowance \\u003e 0, \\\"BALANCE IS EMPTY\\\");\\n            uint256 withdraw_time = block.timestamp;\\n            require (withdraw_time \\u003e dividend_start, \\\"PAYMENTS HAVEN\\u0027T STARTED YET\\\");\\n            require (withdraw_time \\u003c dividend_end, \\\"PAYMENTS HAVE ALREADY ENDED\\\");\\n            uint256 period = withdraw_time.sub(holders[msg.sender].rewardWithdrawTime);\\n            require (period \\u003e 2505600, \\\"DIVIDENDS RECIEVED ALREADY\\\");\\n            dividend = reward ();\\n            holders[msg.sender].rewardWithdrawTime = withdraw_time;\\n    }\\n    /**@dev withdraw dividends to holders\\n     * \\n    */\\n\\n    function withdrawDividend() external {\\n            dividendToReward();\\n            require(project_owner.balance \\u003e dividend, \\\"BALANCE IS EMPTY\\\");\\n            project_owner.transfer(dividend);  \\n    }\\n}\\n\\ncontract ERC1384Interface is ERC20 {\\n    \\n    function acceptOwnership() public;\\n    function idOf (address address_owner) public view returns (uint256);\\n    function exist(uint256 Owner_Id) public view returns (address);\\n    function getOwnersList() public view returns (address[] memory Owners_List);\\n    function getNumOfOwners() public view returns (uint256);\\n    function projectOwner() external view returns (address);\\n    function newOwnerInvite(address _to) public;\\n    function createVote() public returns (uint256);\\n    function currentVoting () public view returns (uint256 _votes_num, uint256 _start_vote, uint256 _end_vote);\\n    function vote(uint256 Owner_Id, uint256 _vote_status_value) public;\\n    function getVoteResult() public returns (uint256[] memory);\\n    function getVotingDataBase (uint256 _votes_num) public returns (uint256[] memory);\\n}\\n\\n\\ncontract ERC1384BasicContract is ERC1384Interface {\\n    using SafeMath for uint256;\\n\\n    // Project Create Time\\n    uint256 internal project_create_time;\\n    \\n    //Board Of Directors composition\\n    uint256 internal Fas_number;\\n\\n    // Vote Number\\n    uint256 internal votes_num;\\n    \\n    // Board Of Directors addresses list \\n    address[] internal FASList;\\n    \\n    //Number of voters Dissagree\\n    uint256 internal voteResult_Dissagree;\\n    \\n     //Number of voters Dissagree\\n    uint256 internal voteResult_Agree;\\n    \\n    // Agree vote\\n     uint256 agree;\\n    \\n    // Dissagree vote\\n    uint256 disagree;\\n    \\n    // vote Result\\n    uint256 internal voteResult;\\n    \\n    // Vote start time\\n    uint256 internal vote_start;\\n    \\n    // Voting period\\n    uint256 internal voting_period;\\n   \\n    // Result of last voting \\n    uint256[] internal lastVoteResult;\\n    \\n    // Voting data base\\n    uint256[] internal votingData;\\n\\n    // Board of Directors acception Id\\n    uint256 internal acception_Id; \\n    \\n    // Difference time for new member acception\\n    uint256 internal difference_time;\\n    \\n    // Temporary address for new member\\n    address internal temporary_address;\\n    \\n    // Vote end time\\n    uint256 internal voteEndTime;\\n    \\n    // Ids of owners struct\\n    struct OwnerId {\\n       \\n       // Owners Ids\\n        uint256 ID;\\n     }\\n     \\n    // Owners Ids blockchain\\n    mapping(address =\\u003e OwnerId) internal owners;\\n        \\n    // Owners addresses struct    \\n    struct OwnerAddress{\\n        \\n        // Owners addresses\\n        address owner_address;\\n        \\n        // Voted time\\n        uint256 voted_time;\\n    }\\n    \\n    // Owners addresses Ids\\n    mapping (uint256=\\u003e OwnerAddress) internal FasID;\\n    \\n    // Voing data base struct \\n    struct VotingDataBase {\\n        \\n        // Number of participants in the voting\\n        uint256 quorum;\\n        \\n        // Voting result\\n        uint256 voting_result;\\n        \\n        // Voting start time\\n        uint256 voting_starts;\\n        \\n        // Voting end time\\n        uint256 voting_ends;\\n    }\\n    \\n    // Voting blockchain\\n    mapping (uint256 =\\u003e VotingDataBase) internal voteNum;\\n \\n    constructor () public{\\n       project_create_time = block.timestamp;\\n       project_owner = msg.sender;\\n       FASList.push(project_owner);\\n       votes_num = 0;\\n       voting_period = 86400; \\n       FasID[project_create_time].owner_address = project_owner;\\n       owners[project_owner].ID = project_create_time;\\n       Fas_number = 1;\\n    }\\n    \\n    /** @dev Shows project_owner address\\n     * @return project owner address\\n    */\\n    \\n    function projectOwner() external view returns (address) { \\n        return project_owner;\\n    }\\n    \\n    /**@dev New member accepts the invitation of the Board of Directors.\\n    * param Owner_Id used to confirm your consent to the invitation\\n    * to the Board of Directors of the company valid for 24 hours.\\n    * if the Owner_Id is not used during the day, the invitation is canceled\\n    * \\u0027Owner_Id\\u0027 is deleted.\\n    * only a new member of the company\\u0027s Board of Directors has access to the function call\\n    */\\n   \\n    function acceptOwnership() public {\\n        address new_owner = temporary_address;\\n        require(msg.sender == new_owner, \\\"ACCESS DENIED\\\"); \\n        uint256 time_accept = block.timestamp;\\n        difference_time = time_accept - acception_Id;\\n        if (difference_time \\u003c 86400){    \\n            FASList.push(new_owner);\\n            Fas_number++;\\n            }\\n        else{\\n            delete owners[new_owner];\\n            delete FasID[acception_Id].owner_address; \\n        }\\n    }\\n    \\n    /**@dev Removes a member from the company\\u0027s Board of Directors.\\n    * param address_owner this is the address of the Board member being \\n    * removed. Only the project owner has access to call the function. \\n    * The \\u0027project_owner\\u0027 cannot be deleted. \\n    */\\n    \\n    function delOwner (address address_owner) public {\\n    require(msg.sender == project_owner, \\\"ACCESS DENIED\\\");\\n    require (address_owner != project_owner, \\\"IT IS IMPOSSIBLE TO REMOVE PROJECT OWNER\\\");\\n    uint256 Id_toDel = owners[address_owner].ID;\\n    delete owners[address_owner];\\n    delete FasID[Id_toDel].owner_address; \\n    uint256 new_FASListLength = FASList.length;\\n    new_FASListLength--;\\n    uint256 index_array_del;\\n    address [] memory _FASList = new address[](new_FASListLength);\\n    for (uint256 j = 0; j\\u003c Fas_number; j++){\\n       if (FASList[j] == address_owner){\\n           index_array_del = j;\\n       }\\n     }\\n      for (uint256 i = 0; i\\u003c new_FASListLength; i++){\\n       if (i \\u003c index_array_del){\\n           _FASList[i] = FASList[i];\\n       }\\n      else\\n      {\\n         _FASList[i] = FASList[i+1]; \\n      }\\n     }\\n     Fas_number--;\\n     FASList = _FASList;\\n    }\\n   \\n   /**@dev Only the \\u0027Owner_Id\\u0027 owner and \\u0027project_owner\\u0027 have access to the function call.\\n    * @return Owner_Id of a member of the company\\u0027s Board of Directors\\n   */\\n    \\n   function idOf (address address_owner) public view returns (uint256 Owner_Id){\\n        uint256 _Owner_Id = owners[address_owner].ID;\\n        address_owner = FasID[_Owner_Id].owner_address;\\n        require (msg.sender == address_owner || msg.sender == project_owner, \\\"ACCESS DENIED\\\");\\n        return owners[address_owner].ID;\\n    }\\n\\n   /** @dev  Only the \\u0027address_owner\\u0027 owner and \\u0027project_owner\\u0027 have access to the function call\\n    * @return address_owner of a member of the company\\u0027s Board of Directors\\n   */\\n  \\n   function exist(uint256 Owner_Id) public view returns (address address_owner){\\n      address check_address = FasID[Owner_Id].owner_address;\\n      require (msg.sender == check_address || msg.sender == project_owner, \\\"ACCESS DENIED\\\");\\n      return FasID[Owner_Id].owner_address;\\n    }\\n    \\n    /**@dev Shows addresses of company\\u0027s Owners\\n     * @return Owners_List a listing of addresses of the company\\u0027s Board of Directors\\n     */\\n    \\n    function getOwnersList() public view returns (address[] memory Owners_List){\\n        address[] memory _FASList = new address[](FASList.length);\\n        _FASList = FASList;\\n        return _FASList;\\n    }\\n\\n    /**@dev Shows number of Owners\\n     * @return number of members of the company\\u0027s Board of Directors\\n     */\\n\\n    function getNumOfOwners() public view returns (uint256 number){\\n        return Fas_number;\\n    }\\n \\n    /**Invitation of a new member of the company\\u0027s Board of Directors.\\n     * Only the project owner has access to the function call.\\n     * param _to address of the invited member of the company\\u0027s Board of Directors\\n     * A new member of the company\\u0027s Board of Directors receives \\u0027Owner_Id\\u0027.\\n    */\\n   \\n    function newOwnerInvite(address _to) public {\\n            require (msg.sender == project_owner, \\\"ACCESS DENIED\\\");\\n            require (balances[_to]\\u003e0, \\\"ZERO BALANCE\\\");\\n            for (uint256 j = 0; j\\u003c Fas_number; j++){\\n            require (FASList[j] != _to);\\n            }\\n            beforeNewOwnerInvite(_to);\\n            acception_Id = block.timestamp;\\n            temporary_address = _to;\\n    }\\n\\n    /**internal function generates a constructor for binding the address and ID\\n     * of a new member of the company\\u0027s Board of Directors.\\n     */\\n\\n    function beforeNewOwnerInvite(address _who) internal {\\n            uint256 time_accept = block.timestamp;\\n            owners[_who].ID = time_accept;\\n            FasID[time_accept].owner_address = _who;\\n    }\\n    /** @dev Function to start the voting process. Call access only project_owner. \\n     * Clears the previous result of the vote. Sets a time stamp for the \\n     * start of voting.\\n     * @return votes_num\\n     */\\n\\n   function createVote() public returns (uint256){\\n        require (msg.sender == project_owner, \\\"ACCESS DENIED\\\");\\n        votes_num = votes_num.add(1);\\n        vote_start = block.timestamp;\\n        voteEndTime = vote_start.add(voting_period);\\n        voteResult_Agree = 0;\\n        voteResult_Dissagree = 0;\\n        lastVoteResult = [0, 0, 0, 0, 0];\\n\\n        return votes_num;\\n    }\\n\\n    /**\\n    * vote for a given votes_num\\n    * param Owner_Id the given rights to vote\\n    * param _vote_status_value uint256 the vote of status, 1 Agree, 0 Disagree\\n    * Only a member of the company\\u0027s Board of Directors has the right to vote.\\n    * You can only vote once during the voting period\\n    */\\n    \\n    function vote(uint256 Owner_Id, uint256 _vote_status_value) public{\\n        require(_vote_status_value \\u003e= 0, \\\"INPUT: 1 = AGREE, 0 = DISAGREE\\\");\\n        require(_vote_status_value \\u003c= 1, \\\"INPUT: 1 = AGREE, 0 = DISAGREE\\\");\\n        uint256 voting_time = block.timestamp;\\n        address check_address = FasID[Owner_Id].owner_address;\\n        require (msg.sender == check_address, \\\"ACCESS DENIED\\\");\\n        uint256 lastVotingOwnerCheck = voting_time.sub(FasID[Owner_Id].voted_time);\\n        require(voting_time \\u003c voteEndTime, \\\"THE VOTE IS ALREADY OVER\\\");\\n        require(voting_period \\u003c lastVotingOwnerCheck, \\\"YOU HAVE ALREADY VOTED\\\");\\n\\n        if(_vote_status_value == 0)\\n        {\\n            disagree = balances[check_address];\\n            voteResult_Dissagree = voteResult_Dissagree.add(disagree); \\n            FasID[Owner_Id].voted_time = voting_time;\\n        }\\n        if (_vote_status_value == 1)\\n        {\\n            agree = balances[check_address];\\n            voteResult_Agree = voteResult_Agree.add(agree); \\n            FasID[Owner_Id].voted_time = voting_time;\\n        }\\n    }\\n\\t/**\\n     * @dev Sows current voting process.\\n     * @return _votes_num\\n    */\\n    function currentVoting () public view returns (uint256 _votes_num, uint256 _start_vote, uint256 _end_vote){\\n        return (votes_num, vote_start, voteEndTime);\\n    }\\n\\n    /**\\n    * @dev Called only after the end of the voting time.\\n    * @return the voting restult: vote_num, voteResult, quorum_summ, vote_start, vote_end\\n    */\\n   function getVoteResult() public returns (uint256[] memory){\\n        uint256 current_time = block.timestamp;\\n        require (vote_start \\u003c current_time, \\\"VOTING HAS NOT STARTED\\\");\\n        voteEndTime = vote_start.add(voting_period);\\n        require (current_time \\u003e voteEndTime, \\\"THE VOTE ISN\\u0027T OVER YET\\\");\\n        \\n    \\n        uint256 quorum_summ = voteResult_Agree.add(voteResult_Dissagree);\\n\\n        if(voteResult_Agree \\u003e= voteResult_Dissagree)\\n        {\\n            voteResult = 1;\\n        }\\n\\n        if(voteResult_Agree \\u003c voteResult_Dissagree)\\n        {\\n            voteResult = 0;\\n        }\\n\\n        lastVoteResult = [votes_num, voteResult, quorum_summ, vote_start, voteEndTime];\\n        voteNum[votes_num].quorum = quorum_summ;\\n        voteNum[votes_num].voting_result = voteResult;\\n        voteNum[votes_num].voting_starts = vote_start;\\n        voteNum[votes_num].voting_ends = voteEndTime;\\n        vote_start = 0;\\n        return lastVoteResult;\\n       \\n    }\\n    \\n    \\n    \\n    /**\\n     * @dev Shows voting data\\n    * @return Ballot of all completed votes by \\u0027_voting_num\\u0027\\n    * output format \\u0027voting_result\\u0027, \\u0027quorum\\u0027, \\u0027voting_starts\\u0027, \\u0027voting_ends\\u0027.\\n    */\\n\\n   function getVotingDataBase (uint256 _voting_num) public returns (uint256[] memory Ballot){\\n       require (_voting_num != 0, \\\"THE VOTING ID IS NOT FILLED IN\\\");\\n       votingData = [voteNum[_voting_num].voting_result,\\n       voteNum[_voting_num].quorum, \\n       voteNum[_voting_num].voting_starts, \\n       voteNum[_voting_num].voting_ends];\\n       return votingData;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVoting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_votes_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start_vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end_vote\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_owner\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"dividendPaymentsTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Start_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"End_reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividend_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividend_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Owner_Id\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumOfOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Owners_List\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getVoteResult\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voting_num\",\"type\":\"uint256\"}],\"name\":\"getVotingDataBase\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"Ballot\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_owner\",\"type\":\"address\"}],\"name\":\"idOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Owner_Id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"newOwnerInvite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Owner_Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote_status_value\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://4290272fca773fe40d99b185c0fde283b8d218bd51d1bb030560f51de4bce089"}]}