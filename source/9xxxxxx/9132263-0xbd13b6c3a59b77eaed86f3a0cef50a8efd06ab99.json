{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IDarkEnergyCrystals {\r\n\r\n    function mint(uint256 _quantity) external;\r\n    function burn(uint256 _quantity) external;\r\n    function unlock(address _holder, uint256 _quantity) external;\r\n}\r\n\r\ncontract CrystalMinter {\r\n\r\n    IDarkEnergyCrystals crystals;\r\n    address signer1;\r\n    address signer2;\r\n    address signer3;\r\n\r\n    struct SubstitutionProposal {\r\n        address proposer;\r\n        address affirmer;\r\n        address retiree;\r\n        address replacement;\r\n    }\r\n\r\n    mapping(address => SubstitutionProposal) proposals;\r\n\r\n    constructor(address _crystalsAddr, address _signer1, address _signer2, address _signer3) public {\r\n        crystals = IDarkEnergyCrystals(_crystalsAddr);\r\n        signer1 = _signer1;\r\n        signer2 = _signer2;\r\n        signer3 = _signer3;\r\n    }\r\n\r\n    function mint(uint256 _quantity) public onlySigner() {\r\n        crystals.mint(_quantity);\r\n    }\r\n\r\n    function burn(uint256 _quantity) public onlySigner() {\r\n        crystals.burn(_quantity);\r\n    }\r\n\r\n    function unlock(address _holder, uint256 _quantity) public onlySigner() {\r\n        crystals.unlock(_holder, _quantity);\r\n    }\r\n\r\n    function proposeSubstitution(\r\n                address _affirmer,\r\n                address _retiree,\r\n                address _replacement\r\n            )\r\n                public\r\n                onlySigner\r\n                isSigner(_affirmer)\r\n                isSigner(_retiree)\r\n                notSigner(_replacement)\r\n    {\r\n        address _proposer = msg.sender;\r\n\r\n        require(_affirmer != _proposer, \"CrystalMinter: Affirmer Is Proposer\");\r\n        require(_affirmer != _retiree, \"CrystalMinter: Affirmer Is Retiree\");\r\n        require(_proposer != _retiree, \"CrystalMinter: Retiree Is Proposer\");\r\n\r\n        proposals[_proposer] = SubstitutionProposal(_proposer, _affirmer, _retiree, _replacement);\r\n    }\r\n\r\n    function withdrawProposal() public onlySigner {\r\n        delete proposals[msg.sender];\r\n    }\r\n\r\n    function withdrawStaleProposal(address _oldProposer) public onlySigner notSigner(_oldProposer) {\r\n        delete proposals[_oldProposer];\r\n    }\r\n\r\n    function acceptProposal(address _proposer) public onlySigner isSigner(_proposer) {\r\n        SubstitutionProposal storage proposal = proposals[_proposer];\r\n\r\n        require(proposal.affirmer == msg.sender, \"CrystalMinter: Not Affirmer\");\r\n\r\n        if (signer1 == proposal.retiree) {\r\n            signer1 = proposal.replacement;\r\n        } else if (signer2 == proposal.retiree) {\r\n            signer2 = proposal.replacement;\r\n        } else if (signer3 == proposal.retiree) {\r\n            signer3 = proposal.replacement;\r\n        }\r\n\r\n        delete proposals[_proposer];\r\n    }\r\n\r\n    modifier onlySigner() {\r\n        require(msg.sender == signer1 ||\r\n                msg.sender == signer2 ||\r\n                msg.sender == signer3,\r\n                \"CrystalMinter: Not Signer\");\r\n        _;\r\n    }\r\n\r\n    modifier isSigner(address _addr) {\r\n        require(_addr == signer1 ||\r\n                _addr == signer2 ||\r\n                _addr == signer3,\r\n                \"CrystalMinter: Addr Not Signer\");\r\n        _;\r\n    }\r\n\r\n    modifier notSigner(address _addr) {\r\n        require(_addr != signer1 &&\r\n                _addr != signer2 &&\r\n                _addr != signer3,\r\n                \"CrystalMinter: Addr Is Signer\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposer\",\"type\":\"address\"}],\"name\":\"acceptProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affirmer\",\"type\":\"address\"},{\"name\":\"_retiree\",\"type\":\"address\"},{\"name\":\"_replacement\",\"type\":\"address\"}],\"name\":\"proposeSubstitution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldProposer\",\"type\":\"address\"}],\"name\":\"withdrawStaleProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crystalsAddr\",\"type\":\"address\"},{\"name\":\"_signer1\",\"type\":\"address\"},{\"name\":\"_signer2\",\"type\":\"address\"},{\"name\":\"_signer3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CrystalMinter","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009393fdc77090f31c7db989390d43f454b1a6e7f30000000000000000000000007aec46a3601d9b040dfd2150a612d92a393c90f900000000000000000000000008f8d73bd1d580c1682cc3667640f16a8dd08d2b000000000000000000000000f42fcbe92d0814c352d8c0e2acd3ed17ab17d2b1","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://fc858051026587de6341b453773d7e84afb565db7a92c0a500e8e86df6a2493c"}]}