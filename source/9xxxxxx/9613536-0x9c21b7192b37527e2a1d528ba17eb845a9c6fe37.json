{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address user) external view returns (bool);\r\n    function sheild(address user) external view returns (bool);\r\n    function version() external view returns (uint);\r\n}\r\n\r\ninterface ListInterface {\r\n    struct UserLink {\r\n        uint64 first;\r\n        uint64 last;\r\n        uint64 count;\r\n    }\r\n\r\n    struct UserList {\r\n        uint64 prev;\r\n        uint64 next;\r\n    }\r\n\r\n    struct AccountLink {\r\n        address first;\r\n        address last;\r\n        uint64 count;\r\n    }\r\n\r\n    struct AccountList {\r\n        address prev;\r\n        address next;\r\n    }\r\n\r\n    function accounts() external view returns (uint);\r\n    function accountID(address) external view returns (uint64);\r\n    function accountAddr(uint64) external view returns (address);\r\n    function userLink(address) external view returns (UserLink memory);\r\n    function userList(address, uint64) external view returns (UserList memory);\r\n    function accountLink(uint64) external view returns (AccountLink memory);\r\n    function accountList(uint64, address) external view returns (AccountList memory);\r\n\r\n}\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n    function list() external view returns (address);\r\n    function connectors(uint) external view returns (address);\r\n    function account(uint) external view returns (address);\r\n    function check(uint) external view returns (address);\r\n    function versionCount() external view returns (uint);\r\n\r\n}\r\n\r\ninterface ConnectorsInterface {\r\n    struct List {\r\n        address prev;\r\n        address next;\r\n    }\r\n    function chief(address) external view returns (bool);\r\n    function connectors(address) external view returns (bool);\r\n    function staticConnectors(address) external view returns (bool);\r\n\r\n    function count() external view returns (uint);\r\n    function first() external view returns (address);\r\n    function last() external view returns (address);\r\n    function list(address) external view returns (List memory);\r\n    function staticCount() external view returns (uint);\r\n    function staticList(uint) external view returns (address);\r\n\r\n    function isConnector(address[] calldata _connectors) external view returns (bool isOk);\r\n    function isStaticConnector(address[] calldata _connectors) external view returns (bool isOk);\r\n\r\n}\r\n\r\ncontract Helpers {\r\n    address public index = 0x1c503F1544500C05da80cd326D97342f2B13a732;\r\n    address public list;\r\n    address public connectors;\r\n    IndexInterface indexContract;\r\n    ListInterface listContract;\r\n    ConnectorsInterface connectorsContract;\r\n}\r\n\r\ncontract SmartAccountResolver is Helpers {\r\n\r\n    function getID(address account) public view returns(uint id){\r\n        return listContract.accountID(account);\r\n    }\r\n\r\n    function getAccount(uint64 id) public view returns(address account){\r\n        return listContract.accountAddr(uint64(id));\r\n    }\r\n\r\n    function getOwnerIDs(address owner) public view returns(uint64[] memory){\r\n        ListInterface.UserLink memory userLink = listContract.userLink(owner);\r\n        uint64[] memory IDs = new uint64[](userLink.count);\r\n        uint64 id = userLink.first;\r\n        for (uint i = 0; i < userLink.count; i++) {\r\n            IDs[i] = id;\r\n            ListInterface.UserList memory userList = listContract.userList(owner, id);\r\n            id = userList.next;\r\n        }\r\n        return IDs;\r\n    }\r\n\r\n    function getOwnerAccounts(address owner) public view returns(address[] memory){\r\n        uint64[] memory IDs = getOwnerIDs(owner);\r\n        address[] memory accounts = new address[](IDs.length);\r\n        for (uint i = 0; i < IDs.length; i++) {\r\n            accounts[i] = getAccount(IDs[i]);\r\n        }\r\n        return accounts;\r\n    }\r\n\r\n    function getIDOwners(uint id) public view returns(address[] memory){\r\n        ListInterface.AccountLink memory accountLink = listContract.accountLink(uint64(id));\r\n        address[] memory owners = new address[](accountLink.count);\r\n        address owner = accountLink.first;\r\n        for (uint i = 0; i < accountLink.count; i++) {\r\n            owners[i] = owner;\r\n            ListInterface.AccountList memory accountList = listContract.accountList(uint64(id), owner);\r\n            owner = accountList.next;\r\n        }\r\n        return owners;\r\n    }\r\n\r\n    function getAccountOwners(address account) public view returns(address[] memory){\r\n        return getIDOwners(getID(account));\r\n    }\r\n\r\n    function getAccountVersions(address[] memory accounts) public view returns(uint[] memory) {\r\n        uint[] memory versions = new uint[](accounts.length);\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            versions[i] = AccountInterface(accounts[i]).version();\r\n        }\r\n        return versions;\r\n    }\r\n\r\n    struct OwnerData {\r\n        uint64[] IDs;\r\n        address[] accounts;\r\n        uint[] versions;\r\n    }\r\n    function getOwnerDetails(address owner) public view returns(OwnerData memory){\r\n        address[] memory accounts = getOwnerAccounts(owner);\r\n        return OwnerData(\r\n            getOwnerIDs(owner),\r\n            accounts,\r\n            getAccountVersions(accounts)\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectorsResolver is SmartAccountResolver {\r\n    string public constant name = \"v1\";\r\n    uint public constant version = 1;\r\n\r\n    constructor() public{\r\n        indexContract = IndexInterface(index);\r\n        list = indexContract.list();\r\n        listContract = ListInterface(list);\r\n        connectors = indexContract.connectors(version);\r\n        connectorsContract = ConnectorsInterface(connectors);\r\n    }\r\n\r\n    function getEnabledConnectores() public view returns(uint, address[] memory){\r\n        uint count = connectorsContract.count();\r\n        address enabledAddr = connectorsContract.first();\r\n        address[] memory addressess = new address[](count);\r\n        addressess[0] = enabledAddr;\r\n        for (uint i = 1; i < count; i++) {\r\n            ConnectorsInterface.List memory list = connectorsContract.list(enabledAddr);\r\n            addressess[i] = list.next;\r\n        }\r\n        return (count, addressess);\r\n    }\r\n\r\n    function getStaticConnectores() public view returns(address[] memory){\r\n        uint count = connectorsContract.staticCount();\r\n        address[] memory addressess = new address[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            addressess[i] = connectorsContract.staticList(i);\r\n        }\r\n        return addressess;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"getAccountVersions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledConnectores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getIDOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"IDs\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"versions\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SmartAccountResolver.OwnerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIDs\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConnectores\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectorsResolver","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://d25fb1e755b195dc8da3cab71171a27d0a7d7e42fab18450ad96b5293051b0b9"}]}