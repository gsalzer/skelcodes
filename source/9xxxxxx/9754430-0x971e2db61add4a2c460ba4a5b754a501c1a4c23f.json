{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.4;\r\n\r\n\r\n/// @dev basic erc20 transfer\r\ninterface Token {\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\n\r\nlibrary Math {\r\n    /// @return uint256 = a + b\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /// @return uint256 = a - b\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"too big value\");\r\n        return a - b;\r\n    }\r\n\r\n    /// @return uint256 = a * b\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /// @return uint256 = a / b\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /// @return int256 = a + b\r\n    function signedAdd(int256 a, uint256 b) internal pure returns (int256) {\r\n        int256 c = a + int256(b);\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /// @return int256 = a - b\r\n    function signedSub(int256 a, uint256 b) internal pure returns (int256) {\r\n        int256 c = a - int256(b);\r\n        assert(c <= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title fixed-price erc20 token linked with nft, both tokens with dividends\r\n/// @author aqoleg\r\ncontract Ft {\r\n    using Math for uint256;\r\n    using Math for int256;\r\n\r\n    uint256 public totalSupply; // erc20\r\n    mapping(address => uint256) public balanceOf; // erc20\r\n    mapping(address => mapping (address => uint256)) public allowance; // erc20, [owner][spender]\r\n    uint8 public constant decimals = 18; // erc20\r\n    string public constant name = \"Funge Token\"; // erc20\r\n    string public constant symbol = \"F\"; // erc20\r\n\r\n    // wei*price = totalSupply + totalShares*profitPerShare/multiplicator - totalPayouts\r\n    // dividends = sharesOf*profitPerShare/multiplicator - payoutsOf\r\n    uint256 public constant price = 10; // wei = ft / price\r\n    uint256 public totalShares; // ft = sum(sharesOf)\r\n    mapping(address => uint256) public sharesOf; // ft = balanceOf() + sum(nftPrices)\r\n    uint256 public profitPerShare; // ft = shares * profitPerShare / multiplicator\r\n    uint256 public constant multiplicator = 2**64;\r\n    mapping(address => int256) public payoutsOf; // ft\r\n\r\n    address public nft = address(0);\r\n    bool public hasFee = true;\r\n    address private biz = msg.sender;\r\n    address private dev = msg.sender;\r\n\r\n    /// @dev erc20\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /// @dev erc20\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    event Update();\r\n\r\n    modifier onlyNft() {\r\n        require(msg.sender == nft, \"not nft\");\r\n        _;\r\n    }\r\n\r\n    /// @notice converts 90% of incoming eth into ft, spreads rest among shareholders; set gasLimit > 200000!\r\n    receive() external payable {\r\n        buy();\r\n    }\r\n\r\n    /// @notice keep clean from other tokens\r\n    function clean(address _contract, uint256 _value) external {\r\n        Token(_contract).transfer(msg.sender, _value);\r\n    }\r\n\r\n    function setNft(address _nft) external {\r\n        require(nft == address(0), \"already set\");\r\n        nft = _nft;\r\n    }\r\n\r\n    function setBiz(address _biz) external {\r\n        require(msg.sender == biz, \"not a biz\");\r\n        biz = _biz;\r\n    }\r\n\r\n    function setDev(address _dev) external {\r\n        require(msg.sender == dev, \"not a dev\");\r\n        dev = _dev;\r\n    }\r\n\r\n    function disableFee() external {\r\n        require(msg.sender == biz || msg.sender == dev, \"not a biz or dev\");\r\n        require(hasFee, \"already disabled\");\r\n        hasFee = false;\r\n    }\r\n\r\n    /// @dev converts ft into nft, all price distributed as dividends\r\n    function onMint(address _minter, uint256 _price) external onlyNft returns (bool) {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // wei*price = Sp-p + Sh*(pSh + p*M/Sh))/M - P\r\n\r\n        balanceOf[_minter] = balanceOf[_minter].sub(_price);\r\n        totalSupply = totalSupply.sub(_price);\r\n        emit Transfer(_minter, address(0), _price);\r\n\r\n        profitPerShare = profitPerShare.add(_price.mul(multiplicator).div(totalShares));\r\n        return true;\r\n    }\r\n\r\n    /// @dev buys nft with ft, transfers 90% of price delta to seller, spread rests among shareholders\r\n    function onBuy(\r\n        address _seller,\r\n        address _buyer,\r\n        uint256 _previousPrice,\r\n        uint256 _price\r\n    ) external onlyNft returns (bool) {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // wei*price = Sp-f + (Sh+d)*(pSh + f*M/Sh)/M - (P + d*(pSh + f*M/Sh)/M)\r\n\r\n        uint256 delta = _price.sub(_previousPrice);\r\n        uint256 fee = delta.div(10);\r\n        uint256 transferred = _price.sub(fee);\r\n        delta = delta.sub(fee);\r\n\r\n        profitPerShare = profitPerShare.add(fee.mul(multiplicator).div(totalShares)); // ft > 0\r\n\r\n        balanceOf[_seller] = balanceOf[_seller].add(transferred);\r\n        balanceOf[_buyer] = balanceOf[_buyer].sub(_price);\r\n        totalSupply = totalSupply.sub(fee); // + (_price - fee) - _price\r\n        emit Transfer(_buyer, _seller, transferred);\r\n        emit Transfer(_buyer, address(0), fee);\r\n\r\n        sharesOf[_seller] = sharesOf[_seller].add(delta); // + transferred - _previousPrice\r\n        // sharesOf[_buyer] = sharesOf[_buyer] - _price + _price\r\n        totalShares = totalShares.add(delta);\r\n\r\n        uint256 payout = delta.mul(profitPerShare).div(multiplicator);\r\n        payoutsOf[_seller] = payoutsOf[_seller].signedAdd(payout);\r\n        return true;\r\n    }\r\n\r\n    /// @dev transfers nft, no fee\r\n    function onTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _price\r\n    ) external onlyNft returns (bool) {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // wei*price = Sp + Sh*pSh/M - (P + p*pSh/M - p*pSh/M)\r\n\r\n        sharesOf[_from] = sharesOf[_from].sub(_price);\r\n        sharesOf[_to] = sharesOf[_to].add(_price);\r\n\r\n        uint256 payout = _price.mul(profitPerShare).div(multiplicator);\r\n        payoutsOf[_from] = payoutsOf[_from].signedSub(payout);\r\n        payoutsOf[_to] = payoutsOf[_to].signedAdd(payout);\r\n\r\n        emit Update();\r\n        return true;\r\n    }\r\n\r\n    /// @notice converts 90% into dividends, spreads rest among shareholders\r\n    function sell(uint256 _tokens) external {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // wei*price = Sp-t + (Sh-t)*(pSh + f*M/(Sh-t))/M - (P - ((t-f) + t*pSh/M))\r\n\r\n        uint256 fee = _tokens.div(10);\r\n        uint256 withdraw = _tokens.sub(fee);\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_tokens);\r\n        totalSupply = totalSupply.sub(_tokens);\r\n        emit Transfer(msg.sender, address(0), _tokens);\r\n\r\n        sharesOf[msg.sender] = sharesOf[msg.sender].sub(_tokens);\r\n        totalShares = totalShares.sub(_tokens);\r\n\r\n        uint256 payout = withdraw.add(_tokens.mul(profitPerShare).div(multiplicator));\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedSub(payout);\r\n\r\n        profitPerShare = profitPerShare.add(fee.mul(multiplicator).div(totalShares)); // nft > 0\r\n    }\r\n\r\n    /// @notice withdraws all of dividends\r\n    function withdraw() external {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // (wei - d/price)*price = Sp + Sh*pSh/M - (P + d)\r\n\r\n        uint256 dividends = dividendsOf(msg.sender);\r\n        require(dividends != 0, \"zero dividends\");\r\n\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedAdd(dividends);\r\n\r\n        emit Update();\r\n        msg.sender.transfer(dividends.div(price));\r\n    }\r\n\r\n    /// @notice converts all of dividends into ft\r\n    function reinvest() external {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // wei*price = (Sp+d) + (Sh+d)*pSh/M - (P + (d + d*pSh/M))\r\n\r\n        uint256 dividends = dividendsOf(msg.sender);\r\n        require(dividends != 0, \"zero dividends\");\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(dividends);\r\n        totalSupply = totalSupply.add(dividends);\r\n        emit Transfer(address(0), msg.sender, dividends);\r\n\r\n        sharesOf[msg.sender] = sharesOf[msg.sender].add(dividends);\r\n        totalShares = totalShares.add(dividends);\r\n\r\n        uint256 payout = dividends.add(dividends.mul(profitPerShare).div(multiplicator));\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedAdd(payout);\r\n    }\r\n\r\n    /// @notice converts 90% of incoming eth into ft, spreads rest among shareholders\r\n    function buy() public payable {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // in * price = t + f + bFee + dFee\r\n        // (wei + in)*price = Sp+t + (Sh+t)*(pSh + f*M/Sh)/M - (P - bFee - dFee + t*(pSh + f*M/Sh)/M)\r\n        // first:\r\n        // (wei + in)*price = Sp+t+f + (Sh+t+f)*pSh/M - (P - bFee - dFee + (t+f)*pSh/M)\r\n\r\n        uint256 tokens = msg.value.mul(price);\r\n        uint256 fee = tokens.div(10);\r\n        tokens = tokens.sub(fee);\r\n        uint256 devFee = fee.div(10);\r\n        if (hasFee) {\r\n            fee = fee.sub(devFee).sub(devFee);\r\n        }\r\n\r\n        if (totalShares != 0) {\r\n            profitPerShare = profitPerShare.add(fee.mul(multiplicator).div(totalShares));\r\n        } else {\r\n            tokens = tokens.add(fee);\r\n        }\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\r\n        totalSupply = totalSupply.add(tokens);\r\n        emit Transfer(address(0), msg.sender, tokens);\r\n\r\n        sharesOf[msg.sender] = sharesOf[msg.sender].add(tokens);\r\n        totalShares = totalShares.add(tokens);\r\n\r\n        if (hasFee) {\r\n            payoutsOf[biz] = payoutsOf[biz].signedSub(devFee);\r\n            payoutsOf[dev] = payoutsOf[dev].signedSub(devFee);\r\n        }\r\n        uint256 payout = tokens.mul(profitPerShare).div(multiplicator);\r\n        payoutsOf[msg.sender] = payoutsOf[msg.sender].signedAdd(payout);\r\n    }\r\n\r\n    /// @notice transfers ft, spreads plus 5% among shareholders\r\n    /// @dev erc20\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        transferFt(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice transfers ft, spreads plus 5% among shareholders\r\n    /// @dev erc20\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n\r\n        transferFt(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice approves other address to spend your ft\r\n    /// @dev erc20\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0), \"zero _spender\");\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function dividendsOf(address _owner) public view returns (uint256) {\r\n        // dividends = sharesOf*profitPerShare/multiplicator - payoutsOf\r\n\r\n        uint256 a = sharesOf[_owner].mul(profitPerShare).div(multiplicator);\r\n        int256 b = payoutsOf[_owner];\r\n        // a - b\r\n        if (b < 0) {\r\n            return a.add(uint256(-b));\r\n        } else {\r\n            uint256 c = uint256(b);\r\n            if (c > a) {\r\n                return 0;\r\n            }\r\n            return a - c;\r\n        }\r\n    }\r\n\r\n    function transferFt(address _from, address _to, uint256 _value) private {\r\n        // wei*price = Sp + Sh*pSh/M - P\r\n        // newPSh = pSh + f*M/(Sh-v-f)\r\n        // wei*price = Sp-f + (Sh-f)*newPSh/M - (P - (f+v)*pSh/M + v*newPSh/M)\r\n\r\n        require(_to != address(0), \"zero _to\");\r\n        uint256 fee = _value.div(20);\r\n        uint256 cost = _value.add(fee);\r\n\r\n        uint256 payout = cost.mul(profitPerShare).div(multiplicator);\r\n        profitPerShare = profitPerShare.add(fee.mul(multiplicator).div(totalShares.sub(cost))); // nft > 0\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(cost);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        totalSupply = totalSupply.sub(fee);\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(_from, address(0), fee);\r\n\r\n        sharesOf[_from] = sharesOf[_from].sub(cost);\r\n        sharesOf[_to] = sharesOf[_to].add(_value);\r\n        totalShares = totalShares.sub(fee);\r\n\r\n        payoutsOf[_from] = payoutsOf[_from].signedSub(payout);\r\n        payout = _value.mul(profitPerShare).div(multiplicator);\r\n        payoutsOf[_to] = payoutsOf[_to].signedAdd(payout);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplicator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_previousPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"onBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"onMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_biz\",\"type\":\"address\"}],\"name\":\"setBiz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Ft","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://c5600c34ac6e3c9506fed9e0d66f9617e5b69640bf29bddaabf795fba402aef1"}]}