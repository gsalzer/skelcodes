{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\ncontract IConvertPortal {\r\n  function isConvertibleToCOT(address _token, uint256 _amount)\r\n  public\r\n  view\r\n  returns(uint256);\r\n\r\n  function isConvertibleToETH(address _token, uint256 _amount)\r\n  public\r\n  view\r\n  returns(uint256);\r\n\r\n  function convertTokentoCOT(address _token, uint256 _amount)\r\n  public\r\n  payable\r\n  returns (uint256 cotAmount);\r\n\r\n  function convertTokentoCOTviaETH(address _token, uint256 _amount)\r\n  public\r\n  returns (uint256 cotAmount);\r\n}\r\ncontract IStake {\r\n  function addReserve(uint256 _amount) public;\r\n}\r\n/**\r\n* This contract get 10% from CoTrader managers profit and then distributes assets\r\n*\r\n* 50% convert to COT and burn\r\n* 10% convert to COT and send to stake reserve\r\n* 40% to owner of this contract (CoTrader team)\r\n*\r\n* NOTE: 51% CoTrader token holders can change owner of this contract\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract CoTraderDAOWallet is Ownable{\r\n  using SafeMath for uint256;\r\n  // COT address\r\n  ERC20 public COT;\r\n  // exchange portal for convert tokens to COT\r\n  IConvertPortal public convertPortal;\r\n  // stake contract\r\n  IStake public stake;\r\n  // array of voters\r\n  address[] public voters;\r\n  // voter => candidate\r\n  mapping(address => address) public candidatesMap;\r\n  // voter => register status\r\n  mapping(address => bool) public votersMap;\r\n  // this contract recognize ETH by this address\r\n  ERC20 constant private ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n  // burn address\r\n  address public deadAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _COT                           address of CoTrader ERC20\r\n  * @param _stake                         address of Stake contract\r\n  * @param _convertPortal                 address of exchange contract\r\n  */\r\n  constructor(address _COT, address _stake, address _convertPortal) public {\r\n    COT = ERC20(_COT);\r\n    stake = IStake(_stake);\r\n    convertPortal = IConvertPortal(_convertPortal);\r\n  }\r\n\r\n  // send assets to burn address\r\n  function _burn(ERC20 _token, uint256 _amount) private {\r\n    uint256 cotAmount = (_token == COT)\r\n    ? _amount\r\n    : convertTokenToCOT(_token, _amount);\r\n    if(cotAmount > 0)\r\n      COT.transfer(deadAddress, cotAmount);\r\n  }\r\n\r\n  // send assets to stake contract\r\n  function _stake(ERC20 _token, uint256 _amount) private {\r\n    uint256 cotAmount = (_token == COT)\r\n    ? _amount\r\n    : convertTokenToCOT(_token, _amount);\r\n\r\n    if(cotAmount > 0){\r\n      COT.approve(address(stake), cotAmount);\r\n      stake.addReserve(cotAmount);\r\n    }\r\n  }\r\n\r\n  // send assets to owner\r\n  function _withdraw(ERC20 _token, uint256 _amount) private {\r\n    if(_amount > 0)\r\n      if(_token == ETH_TOKEN_ADDRESS){\r\n        address(owner).transfer(_amount);\r\n      }else{\r\n        _token.transfer(owner, _amount);\r\n      }\r\n  }\r\n\r\n  /**\r\n  * @dev destribute assest from this contract to stake, burn, and owner of this contract\r\n  *\r\n  * @param tokens                          array of token addresses for destribute\r\n  */\r\n  function destribute(ERC20[] tokens) {\r\n   for(uint i = 0; i < tokens.length; i++){\r\n      // get current token balance\r\n      uint256 curentTokenTotalBalance = getTokenBalance(tokens[i]);\r\n      // get 50% of balance for burn\r\n      uint256 burnAmount = curentTokenTotalBalance.div(2);\r\n      // get 10% of balance\r\n      uint256 stakeAmount = burnAmount.div(5);\r\n      // get 40% of balance\r\n      uint256 managerAmount = stakeAmount.mul(4);\r\n\r\n      // 50% burn\r\n      _burn(tokens[i], burnAmount);\r\n      // 10% stake\r\n      _stake(tokens[i], stakeAmount);\r\n      // 40% to owner address\r\n      _withdraw(tokens[i], managerAmount);\r\n    }\r\n  }\r\n\r\n  // return balance of ERC20 or ETH for this contract\r\n  function getTokenBalance(ERC20 _token) public view returns(uint256){\r\n    if(_token == ETH_TOKEN_ADDRESS){\r\n      return address(this).balance;\r\n    }else{\r\n      return _token.balanceOf(address(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Owner can withdraw non convertible token if this token,\r\n  * can't be converted to COT directly or to COT via ETH\r\n  *\r\n  *\r\n  * @param _token                          address of token\r\n  * @param _amount                         amount of token\r\n  */\r\n  function withdrawNonConvertibleERC(ERC20 _token, uint256 _amount) public onlyOwner {\r\n    uint256 cotReturnAmount = convertPortal.isConvertibleToCOT(_token, _amount);\r\n    uint256 ethReturnAmount = convertPortal.isConvertibleToETH(_token, _amount);\r\n\r\n    require(_token != ETH_TOKEN_ADDRESS, \"token can not be a ETH\");\r\n    require(cotReturnAmount == 0, \"token can not be converted to COT\");\r\n    require(ethReturnAmount == 0, \"token can not be converted to ETH\");\r\n\r\n    _token.transfer(owner, _amount);\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev this function try convert token to COT via DEXs which has COT in circulation\r\n  * if there are no such pair on this COT supporting DEXs, function try convert to COT on another DEXs\r\n  * via convert ERC20 input to ETH, and then ETH to COT on COT supporting DEXs.\r\n  * If such a conversion is not possible return 0 for cotAmount\r\n  *\r\n  *\r\n  * @param _token                          address of token\r\n  * @param _amount                         amount of token\r\n  */\r\n  function convertTokenToCOT(address _token, uint256 _amount)\r\n  private\r\n  returns(uint256 cotAmount)\r\n  {\r\n    // try convert current token to COT\r\n    uint256 cotReturnAmount = convertPortal.isConvertibleToCOT(_token, _amount);\r\n    if(cotReturnAmount > 0) {\r\n      if(ERC20(_token) == ETH_TOKEN_ADDRESS){\r\n        cotAmount = convertPortal.convertTokentoCOT.value(_amount)(_token, _amount);\r\n      }\r\n      else{\r\n        ERC20(_token).approve(address(convertPortal), _amount);\r\n        cotAmount = convertPortal.convertTokentoCOT(_token, _amount);\r\n      }\r\n    }\r\n    // try convert current token to COT via ETH\r\n    else {\r\n      uint256 ethReturnAmount = convertPortal.isConvertibleToETH(_token, _amount);\r\n      if(ethReturnAmount > 0) {\r\n        ERC20(_token).approve(address(convertPortal), _amount);\r\n        cotAmount = convertPortal.convertTokentoCOTviaETH(_token, _amount);\r\n      }\r\n      // there are no way convert token to COT\r\n      else{\r\n        cotAmount = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  // owner can change version of exchange portal contract\r\n  function changeConvertPortal(address _newConvertPortal)\r\n  public\r\n  onlyOwner\r\n  {\r\n    convertPortal = IConvertPortal(_newConvertPortal);\r\n  }\r\n\r\n  // any user can donate to stake reserve from msg.sender balance\r\n  function addStakeReserveFromSender(uint256 _amount) public {\r\n    require(COT.transferFrom(msg.sender, address(this), _amount));\r\n    COT.approve(address(stake), _amount);\r\n    stake.addReserve(_amount);\r\n  }\r\n\r\n\r\n  /*\r\n  ** VOTE LOGIC\r\n  *\r\n  *  users can change owner if total COT balance of all voters for a certain candidate\r\n  *  more than 50% of COT total supply\r\n  *\r\n  */\r\n\r\n  // register a new vote wallet\r\n  function voterRegister() public {\r\n    require(!votersMap[msg.sender], \"not allowed register the same wallet twice\");\r\n    // register a new wallet\r\n    voters.push(msg.sender);\r\n    votersMap[msg.sender] = true;\r\n  }\r\n\r\n  // vote for a certain candidate address\r\n  function vote(address _candidate) public {\r\n    require(votersMap[msg.sender], \"wallet must be registered to vote\");\r\n    // vote for a certain candidate\r\n    candidatesMap[msg.sender] = _candidate;\r\n  }\r\n\r\n  // return half of (total supply - burned balance)\r\n  function calculateCOTHalfSupply() public view returns(uint256){\r\n    uint256 supply = COT.totalSupply();\r\n    uint256 burned = COT.balanceOf(deadAddress);\r\n    return supply.sub(burned).div(2);\r\n  }\r\n\r\n  // calculate all vote subscribers for a certain candidate\r\n  // return balance of COT of all voters of a certain candidate\r\n  function calculateVoters(address _candidate)public view returns(uint256){\r\n    uint256 count;\r\n    for(uint i = 0; i<voters.length; i++){\r\n      // take into account current voter balance\r\n      // if this user voted for current candidate\r\n      if(_candidate == candidatesMap[voters[i]]){\r\n          count = count.add(COT.balanceOf(voters[i]));\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  // Any user can change owner with a certain candidate\r\n  // if this candidate address have 51% voters\r\n  function changeOwner(address _newOwner) public {\r\n    // get vote data\r\n    uint256 totalVotersBalance = calculateVoters(_newOwner);\r\n    // get half of COT supply in market circulation\r\n    uint256 totalCOT = calculateCOTHalfSupply();\r\n    // require 51% COT on voters balance\r\n    require(totalVotersBalance > totalCOT);\r\n    // change owner\r\n    super._transferOwnership(_newOwner);\r\n  }\r\n\r\n  // fallback payable function to receive ether from other contract addresses\r\n  function() public payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addStakeReserveFromSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNonConvertibleERC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"destribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidatesMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"calculateVoters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateCOTHalfSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"convertPortal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newConvertPortal\",\"type\":\"address\"}],\"name\":\"changeConvertPortal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voterRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_COT\",\"type\":\"address\"},{\"name\":\"_stake\",\"type\":\"address\"},{\"name\":\"_convertPortal\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CoTraderDAOWallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005c872500c00565505f3624ab435c222e558e9ff8000000000000000000000000f0089381815ed89b52fc9531bc2569c4f945079f000000000000000000000000892508bfae3db114c291774c1ed221e761af8f71","Library":"","LicenseType":"None","SwarmSource":"bzzr://cd555558d975638e4b683569857d479b4b037e034e8c3c17c1b134125a769eee"}]}