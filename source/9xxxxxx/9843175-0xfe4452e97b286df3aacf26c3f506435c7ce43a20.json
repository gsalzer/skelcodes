{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract CryptoLotto {\r\n  uint256 constant public TxCharge = 0.01 * 1 ether;\r\n  uint256 constant public MaxFund = 50 * 1 ether;\r\n  uint256 constant public MinDrawValue = 0.1 * 1 ether;\r\n  uint256 constant public MinSponsorValue = 0.5 * 1 ether;\r\n  \r\n  event EventDraw(address drawer, int code); \r\n  event EventSponsor(address sponsor, int code); \r\n  event EventDebug(uint256 code); \r\n  \r\n  uint8 public ITEM_NUMBER;\r\n  address payable mContractOwner;\r\n  \r\n  struct Lotto_info{\r\n      uint256 mFund;\r\n      address payable mSponsor;\r\n      bool mLocked;\r\n      uint256 mTxNum;\r\n  }\r\n  mapping(uint8 => Lotto_info) mLottoItems;\r\n \r\n  constructor(uint8 _itemNumber) public {\r\n    require(_itemNumber > 0);\r\n    ITEM_NUMBER = _itemNumber;\r\n    mContractOwner = msg.sender;\r\n  }\r\n  \r\n  function getDifficulty(uint8 itemID) public view returns(uint256){\r\n      require(itemID >=0 && itemID < ITEM_NUMBER);\r\n      uint256 curFund = mLottoItems[itemID].mFund;\r\n      uint256 factor = curFund / MinDrawValue;\r\n      return  factor * factor;\r\n  }\r\n  \r\n  function sponsorable(uint8 itemID) public view returns(bool){\r\n       require(itemID >=0 && itemID < ITEM_NUMBER);\r\n       uint256 curFund = mLottoItems[itemID].mFund;\r\n       if(curFund == 0) return true;\r\n       else return false;\r\n  }\r\n  \r\n  function becomeSponsor(uint8 itemID) public payable returns(bool){\r\n      require(itemID >=0 && itemID < ITEM_NUMBER);\r\n      require(msg.value >= MinSponsorValue);\r\n      require(sponsorable(itemID));\r\n      \r\n      if (!mLottoItems[itemID].mLocked){\r\n          mLottoItems[itemID].mLocked = true;\r\n          mLottoItems[itemID].mFund = msg.value;\r\n          mLottoItems[itemID].mSponsor = msg.sender;\r\n          mLottoItems[itemID].mLocked = false;\r\n          emit EventSponsor(msg.sender, 1);\r\n          return true;\r\n      }else{\r\n        msg.sender.transfer(msg.value);\r\n        emit EventSponsor(msg.sender, 0);\r\n        return false; //revert the fund\r\n      }\r\n  }\r\n  \r\n  function drawable(uint8 itemID) public view returns(bool){\r\n      if(itemID >=0 && itemID < ITEM_NUMBER && mLottoItems[itemID].mFund >= MinSponsorValue)\r\n        return true;\r\n      else\r\n        return false;\r\n  }\r\n \r\n  function draw(uint8 itemID, uint256 guess, uint256 seed) public payable returns(int) {\r\n    require(drawable(itemID));\r\n    require(msg.value >= MinDrawValue);\r\n    \r\n    if (!mLottoItems[itemID].mLocked){\r\n      uint256 curFund = mLottoItems[itemID].mFund;\r\n      curFund += msg.value;\r\n      \r\n      uint256 difficulty = getDifficulty(itemID);\r\n      //emit EventDebug(difficulty); \r\n      uint256 rnd = rand(seed, difficulty);\r\n      //emit EventDebug(rnd); \r\n      if (rnd == guess % difficulty){\r\n          require(curFund > TxCharge);\r\n          require(curFund <= address(this).balance);\r\n          uint256 reward = curFund - TxCharge;\r\n          \r\n          mLottoItems[itemID].mLocked = true;\r\n          msg.sender.transfer(reward);\r\n          mLottoItems[itemID].mFund = 0;\r\n          mLottoItems[itemID].mTxNum = 0;\r\n          mLottoItems[itemID].mSponsor = address(0);\r\n          mContractOwner.transfer(TxCharge);          \r\n          mLottoItems[itemID].mLocked = false;\r\n          \r\n          emit EventDraw(msg.sender, 1);\r\n          return 1; //lucky draw\r\n      }else if(curFund >= MaxFund){ //reach the max fund, then the sponsor gets the rewards\r\n          require(curFund > TxCharge);\r\n          require(curFund <= address(this).balance);\r\n          uint256 reward = curFund - TxCharge;\r\n          \r\n          mLottoItems[itemID].mLocked = true;\r\n          mLottoItems[itemID].mSponsor.transfer(reward);\r\n          mLottoItems[itemID].mFund = 0;\r\n          mLottoItems[itemID].mTxNum = 0;\r\n          mLottoItems[itemID].mSponsor = address(0);\r\n          mContractOwner.transfer(TxCharge);          \r\n          mLottoItems[itemID].mLocked = false;\r\n          \r\n          emit EventDraw(msg.sender, 2);\r\n          return 2; //this round is over\r\n      }\r\n      else{\r\n          require(msg.value > TxCharge);\r\n          \r\n          mLottoItems[itemID].mLocked = true;\r\n          mLottoItems[itemID].mFund += msg.value - TxCharge;\r\n          mLottoItems[itemID].mTxNum += 1;\r\n          mContractOwner.transfer(TxCharge);\r\n          mLottoItems[itemID].mLocked = false;\r\n          \r\n          emit EventDraw(msg.sender, -1);\r\n          return -1; //unlucky\r\n      }\r\n    }else{\r\n      msg.sender.transfer(msg.value);\r\n      emit EventDraw(msg.sender, 0);\r\n      return 0; //revert the fund\r\n    }\r\n  }\r\n  \r\n\r\n  function getTxNum(uint8 itemID) public view returns(uint256){\r\n    require(itemID >=0 && itemID < ITEM_NUMBER);\r\n    return mLottoItems[itemID].mTxNum;\r\n  }\r\n  \r\n  function checkReward(uint8 itemID) public view returns(uint256){\r\n    require(itemID >=0 && itemID < ITEM_NUMBER);\r\n    return mLottoItems[itemID].mFund;\r\n  }\r\n  \r\n  function rand(uint256 seed, uint max) private view returns (uint256 result){\r\n      /*\r\n      uint256 lastBlockNumber = block.number - 1;\r\n      uint256 hashVal = uint256(blockhash(lastBlockNumber));\r\n      return uint256((hashVal + seed) % max);\r\n      */ //the above does not work on JVM\r\n      return uint256((block.timestamp + block.difficulty + seed) % max);\r\n  }\r\n\r\n  function isOwner(address _from, uint8 itemID) public view returns(bool){\r\n    require(itemID >=0 && itemID < ITEM_NUMBER);\r\n    return mLottoItems[itemID].mSponsor == _from;\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_itemNumber\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"EventDebug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"drawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"EventDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"EventSponsor\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ITEM_NUMBER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinDrawValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinSponsorValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TxCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"becomeSponsor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"drawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"getDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"getTxNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"itemID\",\"type\":\"uint8\"}],\"name\":\"sponsorable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CryptoLotto","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a","Library":"","LicenseType":"None","SwarmSource":"bzzr://f0aaedf05ad6c4af628ef65576f6115800ace72f6a68f14f738ad721c3b42059"}]}