{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n// Access controls access contracts' private methods\r\ncontract Access {\r\n\r\n    mapping(address => bool) private _admins;\r\n    mapping(address => bool) private _services;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_admins[msg.sender], \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(_admins[msg.sender] || _services[msg.sender], \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _admins[msg.sender] = true;\r\n    }\r\n\r\n    function addAdmin(address addr) public onlyAdmin {\r\n        _admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) public onlyAdmin {\r\n        _admins[addr] = false;\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns (bool) {\r\n        return _admins[addr];\r\n    }\r\n\r\n    function addService(address addr) public onlyAdmin {\r\n        _services[addr] = true;\r\n    }\r\n\r\n    function removeService(address addr) public onlyAdmin {\r\n        _services[addr] = false;\r\n    }\r\n\r\n    function isService(address addr) public view returns (bool) {\r\n        return _services[addr];\r\n    }\r\n}\r\n\r\n\r\n// Cyberbridge receives ETH deposits\r\ncontract Cyberbridge {\r\n\r\n    Access public access;\r\n\r\n    bool public isActive = true;\r\n\r\n    event onDeposit(address from, uint256 amount, uint64 userID, bytes32 token);\r\n    event onWithdraw(address to, uint256 amount, uint64 userID, bytes32 token);\r\n    event onRefill(address from, uint256 amount);\r\n\r\n    modifier onlyAdmin() {\r\n        require(access.isAdmin(msg.sender), \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(access.isAdmin(msg.sender) || access.isService(msg.sender), \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address addr) {\r\n        require(addr != address(0x0), \"nil address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActiveContract() {\r\n        require(isActive, \"inactive contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(address accessAddr) public onlyValidAddress(accessAddr) {\r\n        access = Access(accessAddr);\r\n    }\r\n\r\n    function setActive(bool active) public onlyAdmin {\r\n        isActive = active;\r\n    }\r\n\r\n    function refill() public onlyAdmin payable {\r\n        emit onRefill(msg.sender, msg.value);\r\n    }\r\n\r\n    function drain(address ethRecipientAddr) public onlyAdmin onlyValidAddress(ethRecipientAddr) {\r\n        uint256 ethAmount = address(this).balance;\r\n        if (ethAmount > 0) {\r\n            ethRecipientAddr.transfer(ethAmount);\r\n        }\r\n    }\r\n\r\n    // ---\r\n\r\n    function deposit(uint64 userID, bytes32 token) public onlyActiveContract payable {\r\n        require(msg.value > 0, \"zero eth amount\");\r\n        emit onDeposit(msg.sender, msg.value, userID, token);\r\n    }\r\n\r\n    function withdraw(address to, uint256 amount, uint64 userID, bytes32 token)\r\n        public onlyActiveContract onlyAdminOrService onlyValidAddress(to)\r\n    {\r\n        require(amount > 0, \"zero eth amount\");\r\n        require(amount <= address(this).balance, \"not enough eth\");\r\n        to.transfer(amount);\r\n        emit onWithdraw(msg.sender, amount, userID, token);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"userID\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"userID\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refill\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"access\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ethRecipientAddr\",\"type\":\"address\"}],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"accessAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userID\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"bytes32\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onRefill\",\"type\":\"event\"}]","ContractName":"Cyberbridge","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006aa840fae066a9d94afee8b903572ca8282b7a67","Library":"","LicenseType":"None","SwarmSource":"bzzr://c3222fcf44a7c22e592d61e2b2783e6d138e62c8d6b987c3989c8d69d2efb031"}]}