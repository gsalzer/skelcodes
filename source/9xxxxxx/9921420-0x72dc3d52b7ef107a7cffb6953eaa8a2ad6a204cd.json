{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, uint256 _extraData) external;\r\n}\r\n\r\ncontract SoulToken\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public decimals = 6;\r\n    uint256 public totalSupply = 333333333 * (10 ** uint256(decimals));\r\n    string public name = \"SOUL\";\r\n    string public symbol = \"SOUL\";\r\n\r\n    address addrOwner; \r\n    address addrMiningPool;\r\n    uint256 transferOpen = 2145888000;              // 2038骞?鏈?鏃?GMT+8)\r\n    bool burnOn;\r\n    bool approveAndCallOn;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping(address => uint256)) private _allowed;\r\n\r\n    mapping (address => bool) private _fromWhiteList;\r\n    mapping (address => bool) private _toWhiteList;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed _from, uint256 _value);\r\n\r\n    constructor() public {\r\n        addrOwner = msg.sender;\r\n        addrMiningPool = msg.sender;\r\n        burnOn = false;\r\n        approveAndCallOn = true;\r\n        _balances[addrOwner] = totalSupply;\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == addrOwner);\r\n        _;\r\n    }\r\n\r\n    function setOption(bool _burnOn, bool _acOn, uint256 _transTime) external onlyOwner {\r\n        burnOn = _burnOn;\r\n        approveAndCallOn = _acOn;\r\n        transferOpen = _transTime;\r\n    }\r\n\r\n    function getOption() external view returns(bool _burnOn, bool _acOn, uint256 _transTime) {\r\n        _burnOn = burnOn;\r\n        _acOn = approveAndCallOn;\r\n        _transTime = transferOpen;\r\n    }\r\n\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0) && _newOwner != addrOwner);\r\n        addrOwner = _newOwner;\r\n    }\r\n\r\n    function setMiningPool(address _newPool) external onlyOwner {\r\n        require(_newPool != address(0) && _newPool != addrOwner);\r\n        addrMiningPool = _newPool;\r\n    }\r\n\r\n    function getRole() external view returns(address _owner, address _miningPool) {\r\n        _owner = addrOwner;\r\n        _miningPool = addrMiningPool;\r\n    }\r\n\r\n    function setFromPermission(address _addr, bool _useful) external onlyOwner {\r\n        require(_addr != address(0));\r\n        _fromWhiteList[_addr] = _useful;\r\n    }\r\n\r\n    function setToPermission(address _addr, bool _useful) external onlyOwner {\r\n        require(_addr != address(0));\r\n        _toWhiteList[_addr] = _useful;\r\n    }\r\n\r\n    function adjustSupply(uint256 _newSupply) external onlyOwner {\r\n        require(_newSupply > 0 && _newSupply < 9999999999);\r\n        require(_newSupply != totalSupply);\r\n        if (_newSupply > totalSupply) {\r\n            uint256 addVal = _newSupply - totalSupply;\r\n            _balances[addrMiningPool] = _balances[addrMiningPool].add(addVal);\r\n            emit Transfer(address(0), addrMiningPool, addVal);\r\n        } else {\r\n            uint256 subVal = totalSupply - _newSupply;\r\n            uint256 miningPoolBalance = _balances[addrMiningPool];\r\n            require(miningPoolBalance >= subVal);\r\n            _balances[addrMiningPool] = _balances[addrMiningPool].sub(subVal);\r\n            emit Transfer(addrMiningPool, address(0), subVal);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        return _balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return _allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        require(_value <= _balances[msg.sender] && _value > 0);\r\n        require(_to != address(0));\r\n\r\n        if (block.timestamp < transferOpen) {\r\n            require(_fromWhiteList[msg.sender] || _toWhiteList[_to]);\r\n        }\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;    \r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n\r\n        _allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= _balances[_from] && _value > 0);\r\n        require(_value <= _allowed[_from][msg.sender]);\r\n\r\n        if (block.timestamp < transferOpen) {\r\n            require(_fromWhiteList[_from] || _toWhiteList[_to]);\r\n        }\r\n\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) \r\n        external \r\n        returns (bool success) \r\n    {\r\n        require(burnOn == true);\r\n        require(_balances[msg.sender] >= _value && totalSupply > _value);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);                                \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, uint256 _extraData)\r\n        external\r\n        returns (bool success) \r\n    {\r\n        require(approveAndCallOn == true);\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPool\",\"type\":\"address\"}],\"name\":\"setMiningPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnOn\",\"type\":\"bool\"},{\"name\":\"_acOn\",\"type\":\"bool\"},{\"name\":\"_transTime\",\"type\":\"uint256\"}],\"name\":\"setOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOption\",\"outputs\":[{\"name\":\"_burnOn\",\"type\":\"bool\"},{\"name\":\"_acOn\",\"type\":\"bool\"},{\"name\":\"_transTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"adjustSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setToPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setFromPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRole\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_miningPool\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"SoulToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3e4c750cca1136fb4cefe03ecc2f14913167974c73df27570bf51b9ac18c6dff"}]}