{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *  \r\n *  __                      _   __    __                               \r\n * / _\\_ __ ___   __ _ _ __| |_/ / /\\ \\ \\__ _ _   _   _ __ _   _ _ __  \r\n * \\ \\| '_ ` _ \\ / _` | '__| __\\ \\/  \\/ / _` | | | | | '__| | | | '_ \\ \r\n * _\\ \\ | | | | | (_| | |  | |_ \\  /\\  / (_| | |_| |_| |  | |_| | | | |\r\n * \\__/_| |_| |_|\\__,_|_|   \\__| \\/  \\/ \\__,_|\\__, (_)_|   \\__,_|_| |_|\r\n *                                            |___/                    \r\n * Version 2.0\r\n * https://smartway.run/\r\n * \r\n**/\r\n\r\npragma solidity 0.5.13;\r\n\r\ncontract SmartWay {\r\n\r\n    struct User {\r\n        uint64 id;\r\n        uint64 referrerId;\r\n        address payable[] referrals;\r\n        mapping(uint8 => uint64) levelExpired;\r\n    }\r\n    \r\n    SmartWay public oldSC = SmartWay(0x99280ceFeECcEAf2C5B1537Cd4eeb3B44c3c171F);\r\n    uint64 public oldSCUserId = 1;\r\n\r\n    uint8 public constant REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint64 public constant PERIOD_LENGTH = 30 days;\r\n\r\n    address payable public ownerWallet;\r\n    uint64 public lastUserId;\r\n    \r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint => uint8) public priceLevel;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint64 => address payable) public userList;\r\n    \r\n    event Registration(address indexed user, address referrer);\r\n    event LevelBought(address indexed user, uint8 level);\r\n    event GetMoneyForLevel(address indexed user, address indexed referral, uint8 level);\r\n    event SendMoneyError(address indexed user, address indexed referral, uint8 level);\r\n    event LostMoneyForLevel(address indexed user, address indexed referral, uint8 level);\r\n\r\n    constructor(address payable owner) public {\r\n        _initData();\r\n        ownerWallet = owner;\r\n\r\n        lastUserId++;\r\n        \r\n        userList[lastUserId] = owner;\r\n        users[owner].id = lastUserId;\r\n        \r\n        for(uint8 i = 1; i <= 12; i++) {\r\n            users[owner].levelExpired[i] = 77777777777;\r\n        }\r\n    }\r\n\r\n    function () external payable {\r\n        uint8 level = priceLevel[msg.value];\r\n        require(level != 0, 'Incorrect value sent');\r\n        \r\n        if(users[msg.sender].id != 0)\r\n            return buyLevel(level);\r\n        \r\n        require(level == 1, 'Please buy level 1 for 0.2 ETH');\r\n        \r\n        address referrer = bytesToAddress(msg.data);\r\n\r\n        if(users[referrer].id != 0)\r\n            return regUser(users[referrer].id);\r\n\r\n        require(referrer == address(0));\r\n    }\r\n\r\n    function regUser(uint64 referrerId) public payable {\r\n        require(address(oldSC) == address(0), 'Initialize not finished');\r\n        require(users[msg.sender].id == 0, 'User exist');\r\n        require(referrerId > 0 && referrerId <= lastUserId, 'Incorrect referrer Id');\r\n        require(msg.value == levelPrice[1], 'Incorrect Value');\r\n\r\n        if(users[userList[referrerId]].referrals.length >= REFERRER_1_LEVEL_LIMIT) {\r\n            address freeReferrer = findFreeReferrer(userList[referrerId]);\r\n            referrerId = users[freeReferrer].id;\r\n        }\r\n            \r\n        lastUserId++;\r\n\r\n        users[msg.sender] = User({\r\n            id: lastUserId,\r\n            referrerId: referrerId,\r\n            referrals: new address payable[](0) \r\n        });\r\n        \r\n        userList[lastUserId] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = uint64(now + PERIOD_LENGTH);\r\n\r\n        users[userList[referrerId]].referrals.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit Registration(msg.sender, userList[referrerId]);\r\n    }\r\n\r\n    function buyLevel(uint8 level) public payable {\r\n        require(users[msg.sender].id != 0, 'User is not exists'); \r\n        require(level > 0 && level <= 12, 'Incorrect level');\r\n        require(msg.value == levelPrice[level], 'Incorrect Value');\r\n    \r\n        \r\n        for(uint8 i = level - 1; i > 0; i--) {\r\n            require(users[msg.sender].levelExpired[i] >= now, 'Buy the previous level');\r\n        }\r\n        \r\n        if(users[msg.sender].levelExpired[level] == 0 || users[msg.sender].levelExpired[level] < now) {\r\n            users[msg.sender].levelExpired[level] = uint64(now + PERIOD_LENGTH);\r\n        } else {\r\n            users[msg.sender].levelExpired[level] += PERIOD_LENGTH;\r\n        }\r\n        \r\n        payForLevel(level, msg.sender);\r\n\r\n        emit LevelBought(msg.sender, level);\r\n    }\r\n    \r\n\r\n    function payForLevel(uint8 level, address user) private {\r\n        address payable referrer;\r\n\r\n        if (level%2 == 0) {\r\n            referrer = userList[users[userList[users[user].referrerId]].referrerId]; //extra variable will decrease aroud 50 recursion levels\r\n        } else {\r\n            referrer = userList[users[user].referrerId];\r\n        }\r\n\r\n        if(users[referrer].id == 0) {\r\n            referrer = userList[1];\r\n        } \r\n\r\n        if(users[referrer].levelExpired[level] >= now) {\r\n            if (referrer.send(levelPrice[level])) {\r\n                emit GetMoneyForLevel(referrer, msg.sender, level);\r\n            } else {\r\n                emit SendMoneyError(referrer, msg.sender, level);\r\n            }\r\n        } else {\r\n            emit LostMoneyForLevel(referrer, msg.sender, level);\r\n\r\n            payForLevel(level, referrer);\r\n        }\r\n    }\r\n\r\n    function _initData() private {\r\n        levelPrice[1] = 0.2 ether;\r\n        levelPrice[2] = 0.22 ether;\r\n        levelPrice[3] = 0.4 ether;\r\n        levelPrice[4] = 0.44 ether;\r\n        levelPrice[5] = 0.7 ether;\r\n        levelPrice[6] = 0.77 ether;\r\n        levelPrice[7] = 1.2 ether;\r\n        levelPrice[8] = 1.3 ether;\r\n        levelPrice[9] = 2 ether;\r\n        levelPrice[10] = 2.2 ether;\r\n        levelPrice[11] = 3 ether;\r\n        levelPrice[12] = 3.3 ether;\r\n\r\n        priceLevel[0.2 ether] = 1;\r\n        priceLevel[0.22 ether] = 2;\r\n        priceLevel[0.4 ether] = 3;\r\n        priceLevel[0.44 ether] = 4;\r\n        priceLevel[0.7 ether] = 5;\r\n        priceLevel[0.77 ether] = 6;\r\n        priceLevel[1.2 ether] = 7;\r\n        priceLevel[1.3 ether] = 8;\r\n        priceLevel[2 ether] = 9;\r\n        priceLevel[2.2 ether] = 10;\r\n        priceLevel[3 ether] = 11;\r\n        priceLevel[3.3 ether] = 12;\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referrals.length < REFERRER_1_LEVEL_LIMIT) \r\n            return _user;\r\n\r\n        address[] memory referrals = new address[](256);\r\n        address[] memory referralsBuf = new address[](256);\r\n\r\n        referrals[0] = users[_user].referrals[0];\r\n        referrals[1] = users[_user].referrals[1];\r\n\r\n        uint32 j = 2;\r\n        \r\n        while(true) {\r\n            for(uint32 i = 0; i < j; i++) {\r\n                if(users[referrals[i]].referrals.length < 1) {\r\n                    return referrals[i];\r\n                }\r\n            }\r\n            \r\n            for(uint32 i = 0; i < j; i++) {\r\n                if (users[referrals[i]].referrals.length < REFERRER_1_LEVEL_LIMIT) {\r\n                    return referrals[i];\r\n                }\r\n            }\r\n\r\n            for(uint32 i = 0; i < j; i++) {\r\n                referralsBuf[i] = users[referrals[i]].referrals[0];\r\n                referralsBuf[j+i] = users[referrals[i]].referrals[1];\r\n            }\r\n\r\n            j = j*2;\r\n\r\n            for(uint32 i = 0; i < j; i++) {\r\n                referrals[i] = referralsBuf[i];\r\n            }\r\n        }\r\n    }\r\n    \r\n    function syncWithOldSC(uint limit) public {\r\n        require(address(oldSC) != address(0), 'Initialize closed');\r\n        require(msg.sender == ownerWallet, 'Access denied');\r\n\r\n        for(uint i = 0; i < limit; i++) {\r\n            address payable user = oldSC.userList(oldSCUserId);\r\n            (uint64 id, uint64 referrerId) = oldSC.users(user);\r\n\r\n            if(id != 0) {\r\n                oldSCUserId++;\r\n                \r\n                address ref = oldSC.userList(referrerId);\r\n\r\n                if(users[user].id == 0 && users[ref].id != 0) {\r\n                    users[user].id = ++lastUserId;\r\n                    users[user].referrerId = users[ref].id;\r\n\r\n                    userList[lastUserId] = user;\r\n                    users[ref].referrals.push(user);\r\n\r\n                    for(uint8 j = 1; j <= 12; j++) {\r\n                        uint levelExpired = oldSC.viewUserLevelExpired(user, j);\r\n                        if (levelExpired > now) {\r\n                            users[user].levelExpired[j] = uint64(levelExpired + 30 days);\r\n                        }\r\n                    }\r\n\r\n                    emit Registration(user, ref);\r\n                }\r\n            }\r\n            else break;\r\n        }\r\n    }\r\n\r\n    function syncClose() external {\r\n        require(address(oldSC) != address(0), 'Initialize already closed');\r\n        require(msg.sender == ownerWallet, 'Access denied');\r\n\r\n        oldSC = SmartWay(0);\r\n    }\r\n\r\n    function viewUserReferral(address user) public view returns(address payable[] memory) {\r\n        return users[user].referrals;\r\n    }\r\n\r\n    function viewUserLevelExpired(address user, uint8 level) public view returns(uint) {\r\n        return users[user].levelExpired[level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"GetMoneyForLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"LevelBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"LostMoneyForLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SendMoneyError\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERIOD_LENGTH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRER_1_LEVEL_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldSC\",\"outputs\":[{\"internalType\":\"contract SmartWay\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldSCUserId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"referrerId\",\"type\":\"uint64\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"syncClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"syncWithOldSC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"referrerId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"viewUserLevelExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SmartWay","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afc9a5f9a2d9c7033288e422ae6600b03972fa08","Library":"","LicenseType":"None","SwarmSource":"bzzr://1cb545aa04b38f6e298c7176400925a811dd69ad3cb21963c831fe30f66a9185"}]}