{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\n/// @title Version\r\ncontract Version {\r\n    string public semanticVersion;\r\n\r\n    /// @notice Constructor saves a public version of the deployed Contract.\r\n    /// @param _version Semantic version of the contract.\r\n    constructor(string memory _version) internal {\r\n        semanticVersion = _version;\r\n    }\r\n}\r\n\r\n\r\n/// @title Factory\r\ncontract Factory is Version {\r\n    event FactoryAddedContract(address indexed _contract);\r\n\r\n    modifier contractHasntDeployed(address _contract) {\r\n        require(contracts[_contract] == false);\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) public contracts;\r\n\r\n    constructor(string memory _version) internal Version(_version) {}\r\n\r\n    function hasBeenDeployed(address _contract) public view returns (bool) {\r\n        return contracts[_contract];\r\n    }\r\n\r\n    function addContract(address _contract)\r\n        internal\r\n        contractHasntDeployed(_contract)\r\n        returns (bool)\r\n    {\r\n        contracts[_contract] = true;\r\n        emit FactoryAddedContract(_contract);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract PaymentAddress is Ownable {\r\n    address public collector;\r\n\r\n    event PaymentMade(\r\n        address indexed _payer,\r\n        address indexed _collector,\r\n        uint256 _value\r\n    );\r\n    event ClaimedTokens(\r\n        address indexed _token,\r\n        address indexed _collector,\r\n        uint256 _amount\r\n    );\r\n\r\n    constructor(address _collector, address _owner) public {\r\n        collector = _collector;\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    function() external payable {\r\n        emit PaymentMade(msg.sender, collector, msg.value);\r\n        // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\r\n        (bool success, ) = collector.call.value(msg.value)(\"\");\r\n        require(success, \"Eth forward failed.\");\r\n    }\r\n\r\n    /// @notice This method can be used by the controller to extract tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    function claimTokens(address _token) public onlyOwner {\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n\r\n        require(\r\n            erc20token.transfer(collector, balance),\r\n            \"Token transfer could not be executed.\"\r\n        );\r\n\r\n        emit ClaimedTokens(_token, collector, balance);\r\n    }\r\n}\r\n\r\n\r\ncontract PaymentAddressFactory is Factory {\r\n    // index of created contracts\r\n    mapping(address => address[]) public paymentAddresses;\r\n\r\n    constructor() public Factory(\"1.1.0\") {}\r\n\r\n    // deploy a new contract\r\n    function newPaymentAddress(address _collector, address _owner)\r\n        public\r\n        returns (address newContract)\r\n    {\r\n        address paymentAddress = address(\r\n            new PaymentAddress(_collector, _owner)\r\n        );\r\n        paymentAddresses[_collector].push(paymentAddress);\r\n        addContract(paymentAddress);\r\n        return paymentAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"FactoryAddedContract\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"hasBeenDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newPaymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"semanticVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PaymentAddressFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://1b79f4dc84ca9c8a1f46c810edc18b4236b9e47de3d462fd21fdf99040defed6"}]}