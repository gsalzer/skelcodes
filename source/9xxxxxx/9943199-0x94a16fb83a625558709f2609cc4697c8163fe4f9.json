{"status":"1","message":"OK","result":[{"SourceCode":"###############load interface#####################\r\nfrom vyper.interfaces import ERC20\r\nimplements: ERC20\r\n#################staking structure################\r\nstruct staking:\r\n    holder : address\r\n    value : uint256\r\n    setDate : timestamp\r\n\r\nstruct hold:\r\n    seller : address\r\n    buyer : address\r\n    value : uint256\r\n    netValue: uint256\r\n    setDate : timestamp\r\n    subDate : timestamp\r\n    declined : bool\r\n\r\n################Event log###########################\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\r\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\r\nPay : event({_from : indexed(address),_to : indexed(address), _value : uint256})\r\nStake: event({_owner:indexed(address),_value:uint256})\r\n#############variables#############################\r\nname:public(string[50])\r\nsymbol:public(string[10])\r\ntotal_supply: uint256\r\n_netValue : uint256\r\n\r\ndecimals: public(uint256)\r\nburnStatus:bool\r\n\r\nbalanceOf:public(map(address, uint256))\r\nallowances: map(address, map(address, uint256))\r\nholdOf: public(map(address,uint256))\r\nstakeOf:public(map(address,map(uint256,staking)))\r\ndueTransferOf : public(map(address,map(uint256,hold)))\r\n#############StakingRates#######################\r\nStakingRate1:constant(uint256) = 1/100\r\nStakingRate2:constant(uint256) = 2/100\r\nStakingRate3:constant(uint256) = 3/100\r\n###############Addresses#########################\r\nburnAddress:address\r\nliquidityAddress:address\r\nresolutionAddress: address\r\ncreatorAddress : address\r\ncontractAddress:address\r\n###################initialization#################\r\n@public\r\ndef __init__(namear : string[50], symbolar : string[10], burnAddressar : address, resolutionAddressar : address, liquidityAddressar : address, decimalsar : uint256, initialar : uint256, burnar : uint256, liquidityar : uint256, burnStatusar : bool):\r\n    self.name = namear\r\n    self.symbol = symbolar\r\n    self.creatorAddress = msg.sender\r\n    self.contractAddress = self\r\n    self.burnAddress = burnAddressar\r\n    self.resolutionAddress = resolutionAddressar\r\n    self.liquidityAddress = liquidityAddressar\r\n    self.decimals = decimalsar\r\n    init_supply: uint256 = initialar*10**self.decimals\r\n    burnAmount : uint256 = burnar*10**self.decimals\r\n    liquidityAmount : uint256 = liquidityar*10**self.decimals\r\n    self.balanceOf[msg.sender] += init_supply - burnAmount - liquidityAmount\r\n    self.balanceOf[self.burnAddress] += burnAmount\r\n    self.balanceOf[self.liquidityAddress] += liquidityAmount\r\n    self.total_supply = init_supply\r\n    self.burnStatus = burnStatusar\r\n    log.Transfer(ZERO_ADDRESS, msg.sender, init_supply-burnAmount-liquidityAmount)\r\n    log.Transfer(ZERO_ADDRESS,self.burnAddress,burnAmount)\r\n    log.Transfer(ZERO_ADDRESS,self.liquidityAddress,liquidityAmount)\r\n\r\n#################get total supply#################\r\n@public\r\n@constant\r\ndef totalSupply()-> uint256:\r\n    return self.total_supply\r\n##################update token value############\r\n@public\r\ndef update(tokenValue:uint256,etherValue:uint256,USDValue:uint256)-> bool:\r\n    assert msg.sender == self.resolutionAddress     ,'Not the correct Address'                                            #Values in USDT tokens\r\n    self._netValue = tokenValue\r\n    return True\r\n\r\n######################set burn status###########\r\n@public\r\ndef setBurnStatus(status : bool) -> bool:\r\n    assert msg.sender == self.creatorAddress,'Not the correct Address'\r\n    self.burnStatus = status\r\n    return True\r\n##################check burn status#############\r\n@public\r\n@constant\r\ndef checkBurnStatus() -> bool:\r\n    return self.burnStatus\r\n#####################burnfunction################\r\n@private\r\ndef _burn(_value: uint256):\r\n    if self.burnStatus == True:\r\n        assert self.burnAddress != ZERO_ADDRESS\r\n        self.balanceOf[self.burnAddress] -= _value\r\n        log.Transfer(self.burnAddress, ZERO_ADDRESS, _value)\r\n######################burn####################\r\n@private\r\ndef burn(_value: uint256):\r\n    self._burn(_value)\r\n\r\n####################allowances##################\r\n@public\r\n@constant\r\ndef allowance(_owner : address, _spender : address) -> uint256:\r\n    return self.allowances[_owner][_spender]\r\n#########################staking##################\r\n@public\r\ndef stake(_value : uint256, stakeId : uint256) -> bool:\r\n    assert self.balanceOf[msg.sender]>=_value\r\n    self.stakeOf[msg.sender][stakeId]=staking({holder : msg.sender, value : _value, setDate : block.timestamp})\r\n    self.holdOf[msg.sender] +=_value\r\n    return True\r\n#######################remove staking#############\r\n@public\r\ndef removeStake(stakeId : uint256) -> bool:\r\n    assert self.stakeOf[msg.sender][stakeId].value>0\r\n    _value : uint256 = self.stakeOf[msg.sender][stakeId].value\r\n    _setDate : timestamp = self.stakeOf[msg.sender][stakeId].setDate\r\n    if (block.timestamp>_setDate+300 and block.timestamp<_setDate+1800):\r\n        _reward : uint256 = _value*StakingRate1\r\n        self.balanceOf[msg.sender] += _reward\r\n        self.balanceOf[self.liquidityAddress] -= _reward\r\n        log.Transfer(self.liquidityAddress,msg.sender,_reward)\r\n        self.stakeOf[msg.sender][stakeId]=staking({holder : msg.sender, value : 0,setDate : 0})\r\n        self.holdOf[msg.sender] -=_value\r\n        return True\r\n\r\n    elif(block.timestamp>_setDate+1800 and block.timestamp<_setDate+3600):\r\n        _reward : uint256 = _value*StakingRate2\r\n        self.balanceOf[msg.sender] += _reward\r\n        self.balanceOf[self.liquidityAddress] -= _reward\r\n        log.Transfer(self.liquidityAddress,msg.sender,_reward)\r\n        self.stakeOf[msg.sender][stakeId]=staking({holder : msg.sender, value : 0,setDate : 0})\r\n        self.holdOf[msg.sender] -=_value\r\n        return True\r\n\r\n    elif(block.timestamp>_setDate+3600):\r\n        _reward : uint256 = _value*StakingRate3\r\n        self.balanceOf[msg.sender] += _reward\r\n        self.balanceOf[self.liquidityAddress] -= _reward\r\n        log.Transfer(self.liquidityAddress,msg.sender,_reward)\r\n        self.stakeOf[msg.sender][stakeId]=staking({holder : msg.sender, value : 0,setDate : 0 })\r\n        self.holdOf[msg.sender] -=_value\r\n        return True\r\n\r\n    else:\r\n        self.stakeOf[msg.sender][stakeId]=staking({holder : msg.sender, value : 0,setDate : 0 })\r\n        self.holdOf[msg.sender] -=_value\r\n        return True\r\n#####################setDueTransfer################\r\n@public\r\ndef setDueTransfer(workId : uint256,seller : address,_value : uint256, days : uint256) -> bool:\r\n    assert self.balanceOf[msg.sender]>=_value,'Not enough balance in account'\r\n    assert self.dueTransferOf[msg.sender][workId].value==0,'Already have data in the workId'\r\n    subDate : timestamp = 86400*days + block.timestamp\r\n    self.dueTransferOf[msg.sender][workId]= hold({seller: seller, buyer : msg.sender, value : _value, netValue: self._netValue,setDate : block.timestamp, subDate : subDate, declined : False})\r\n    self.holdOf[msg.sender] += _value\r\n    return True\r\n\r\n######################transfer function#########\r\n@public\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    assert self.holdOf[msg.sender]<=self.balanceOf[msg.sender]-_value,'Not enoough balance in account'\r\n    burnAmount : uint256=_value/100\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log.Transfer(msg.sender, _to, _value)\r\n    self.burn(burnAmount)\r\n    return True\r\n########################transfer from to#############\r\n@public\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:  ###########why this??\r\n    assert self.holdOf[_from]<=self.balanceOf[_from]-_value\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    burnAmount : uint256=_value/100\r\n    self.allowances[_from][msg.sender] -= _value\r\n    log.Transfer(_from, _to, _value)\r\n    self.burn(burnAmount)\r\n    return True\r\n\r\n#########################submitTransfer###########\r\n@public\r\ndef submitTransfer(workId : uint256) -> bool:\r\n    assert self.dueTransferOf[msg.sender][workId].value>0\r\n    _toAddress : address = self.dueTransferOf[msg.sender][workId].seller\r\n    _value : uint256 = self.dueTransferOf[msg.sender][workId].value\r\n    _pastValue: uint256 = self.dueTransferOf[msg.sender][workId].netValue\r\n    _newValue: uint256 = self._netValue\r\n    if _newValue>_pastValue:\r\n        _liqVal : uint256 = ((_newValue-_pastValue)*_value)/self._netValue\r\n        self.balanceOf[msg.sender] -= _value\r\n        self.balanceOf[self.liquidityAddress] -= _liqVal\r\n        self.balanceOf[_toAddress] += _value*(_newValue/_pastValue)\r\n        log.Pay(msg.sender,_toAddress,_value*(_newValue/_pastValue))\r\n        log.Transfer(self.liquidityAddress,_toAddress,_liqVal)\r\n    elif _newValue<_pastValue:\r\n        _liqVal : uint256 =((_pastValue-_newValue)*_value)/self._netValue\r\n        self.balanceOf[msg.sender] -= _value\r\n        self.balanceOf[self.liquidityAddress] += _liqVal\r\n        self.balanceOf[_toAddress] += _value*(_newValue/_pastValue)\r\n        log.Pay(msg.sender,_toAddress,_value*(_newValue/_pastValue))\r\n        log.Transfer(msg.sender,self.liquidityAddress,_liqVal)\r\n    else:\r\n        self.balanceOf[msg.sender] -= _value\r\n        self.balanceOf[_toAddress] += _value\r\n        log.Pay(msg.sender,_toAddress,_value)\r\n    self.burn(_value)\r\n    self.holdOf[msg.sender] -= _value\r\n    self.dueTransferOf[msg.sender][workId].value = 0\r\n    return True\r\n########################declineTransfer#########\r\n@public\r\ndef declineTransfer(workId : uint256) -> bool:\r\n    assert self.dueTransferOf[msg.sender][workId].value>0\r\n    _toAddress : address = self.resolutionAddress\r\n    _value : uint256 = self.dueTransferOf[msg.sender][workId].value\r\n    _seller : address = self.dueTransferOf[msg.sender][workId].seller\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_toAddress] += _value\r\n    self.holdOf[msg.sender] -= _value\r\n    self.dueTransferOf[msg.sender][workId].declined=True\r\n    log.Transfer(msg.sender,_toAddress,_value)\r\n    return True\r\n#######################approval of allowances####################\r\n@public\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log.Approval(msg.sender, _spender, _value)\r\n    return True\r\n#######################resolve##################\r\n@public\r\ndef resolve(workId : uint256, buyer : address, ret : bool) -> bool:        #ret==True ->send money to buyer\r\n    assert msg.sender == self.resolutionAddress\r\n    _value : uint256 = self.dueTransferOf[buyer][workId].value\r\n    _toAddress : address = self.dueTransferOf[buyer][workId].seller\r\n    _pastValue: uint256 = self.dueTransferOf[buyer][workId].netValue\r\n    _newValue: uint256 = self._netValue\r\n\r\n    if ret==True:\r\n        if _newValue>_pastValue:\r\n            _liqVal : uint256 = ((_newValue-_pastValue)*_value)/self._netValue\r\n            self.balanceOf[self.liquidityAddress] -= _liqVal\r\n            self.balanceOf[_toAddress] += _value*(_newValue/_pastValue)\r\n            log.Pay(buyer,_toAddress,_value*(_newValue/_pastValue))\r\n            log.Transfer(self.liquidityAddress,_toAddress,_liqVal)\r\n        elif _newValue<_pastValue:\r\n            _liqVal : uint256 =((_pastValue-_newValue)*_value)/self._netValue\r\n            self.balanceOf[msg.sender] -= _value\r\n            self.balanceOf[self.liquidityAddress] += _liqVal\r\n            self.balanceOf[_toAddress] += _value*(_newValue/_pastValue)\r\n            log.Pay(msg.sender,_toAddress,_value*(_newValue/_pastValue))\r\n            log.Transfer(buyer,self.liquidityAddress,_liqVal)\r\n\r\n        else:\r\n            self.balanceOf[msg.sender] -= _value\r\n            self.balanceOf[_toAddress] -= _value\r\n            log.Pay(buyer,_toAddress,_value)\r\n    if ret==False:\r\n        self.balanceOf[self.liquidityAddress]-=_value\r\n        self.balanceOf[buyer]+=_value\r\n    self.burn(_value)\r\n    return True\r\n######################request###########################        #################?\r\n@public\r\ndef request(buyer : address,workId : uint256) -> bool:\r\n    assert self.dueTransferOf[buyer][workId].subDate+259200<=block.timestamp\r\n    assert self.dueTransferOf[buyer][workId].declined == False\r\n    assert self.dueTransferOf[buyer][workId].value>0\r\n    _toAddress : address = self.dueTransferOf[buyer][workId].seller\r\n    _value : uint256 = self.dueTransferOf[buyer][workId].value\r\n    _pastValue: uint256 = self.dueTransferOf[buyer][workId].netValue\r\n    _newValue: uint256 = self._netValue\r\n    if _newValue>_pastValue:\r\n        _liqVal : uint256 = ((_newValue-_pastValue)*_value)/self._netValue\r\n        self.balanceOf[buyer] -= _value\r\n        self.balanceOf[self.liquidityAddress] -= _liqVal\r\n        self.balanceOf[_toAddress] += _value*(_newValue/_pastValue)\r\n        log.Pay(buyer,_toAddress,_value*(_newValue/_pastValue))\r\n        log.Transfer(self.liquidityAddress,_toAddress,_liqVal)\r\n    elif _newValue<_pastValue:\r\n        _liqVal : uint256 =((_pastValue-_newValue)*_value)/self._netValue\r\n        self.balanceOf[buyer] -= _value\r\n        self.balanceOf[self.liquidityAddress] += _liqVal\r\n        self.balanceOf[_toAddress] += _value*(_newValue/_pastValue)\r\n        log.Pay(buyer,_toAddress,_value*(_newValue/_pastValue))\r\n        log.Transfer(buyer,self.liquidityAddress,_liqVal)\r\n\r\n    else:\r\n        self.balanceOf[buyer] -= _value\r\n        self.balanceOf[_toAddress] += _value\r\n        log.Pay(buyer,_toAddress,_value)\r\n\r\n    self.burn(_value)\r\n    self.holdOf[buyer] -= _value\r\n    self.dueTransferOf[buyer][workId].value = 0\r\n    return True\r\n###################################################","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_spender\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Pay\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Stake\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"namear\"},{\"type\":\"string\",\"name\":\"symbolar\"},{\"type\":\"address\",\"name\":\"burnAddressar\"},{\"type\":\"address\",\"name\":\"resolutionAddressar\"},{\"type\":\"address\",\"name\":\"liquidityAddressar\"},{\"type\":\"uint256\",\"name\":\"decimalsar\"},{\"type\":\"uint256\",\"name\":\"initialar\"},{\"type\":\"uint256\",\"name\":\"burnar\"},{\"type\":\"uint256\",\"name\":\"liquidityar\"},{\"type\":\"bool\",\"name\":\"burnStatusar\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":551},{\"name\":\"update\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"tokenValue\"},{\"type\":\"uint256\",\"name\":\"etherValue\"},{\"type\":\"uint256\",\"name\":\"USDValue\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35745},{\"name\":\"setBurnStatus\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"status\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":35811},{\"name\":\"checkBurnStatus\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":641},{\"name\":\"allowance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_spender\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1039},{\"name\":\"stake\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_value\"},{\"type\":\"uint256\",\"name\":\"stakeId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":141858},{\"name\":\"removeStake\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"stakeId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":187893},{\"name\":\"setDueTransfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"workId\"},{\"type\":\"address\",\"name\":\"seller\"},{\"type\":\"uint256\",\"name\":\"_value\"},{\"type\":\"uint256\",\"name\":\"days\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":268341},{\"name\":\"transfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":153744},{\"name\":\"transferFrom\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":189324},{\"name\":\"submitTransfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"workId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":250296},{\"name\":\"declineTransfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"workId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":146511},{\"name\":\"approve\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_spender\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":38153},{\"name\":\"resolve\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"workId\"},{\"type\":\"address\",\"name\":\"buyer\"},{\"type\":\"bool\",\"name\":\"ret\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":265694},{\"name\":\"request\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"buyer\"},{\"type\":\"uint256\",\"name\":\"workId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":251871},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":5663},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":5316},{\"name\":\"decimals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1121},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1305},{\"name\":\"holdOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1335},{\"name\":\"stakeOf__holder\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1552},{\"name\":\"stakeOf__value\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1588},{\"name\":\"stakeOf__setDate\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"sec\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1618},{\"name\":\"dueTransferOf__seller\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1642},{\"name\":\"dueTransferOf__buyer\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1678},{\"name\":\"dueTransferOf__value\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1708},{\"name\":\"dueTransferOf__netValue\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1738},{\"name\":\"dueTransferOf__setDate\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"sec\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1768},{\"name\":\"dueTransferOf__subDate\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"sec\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1798},{\"name\":\"dueTransferOf__declined\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"},{\"type\":\"uint256\",\"name\":\"arg1\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1828}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b14","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000001945189cae231d622d7cf05466827a2a034c8a910000000000000000000000006f2f0cd65c5e55a46e9e78c6903475a4a4e30dae000000000000000000000000fc8aa73d0131ff1d5810e9a4a77b46b7f56b7ac9000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008414243205445535400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066162633132330000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":""}]}