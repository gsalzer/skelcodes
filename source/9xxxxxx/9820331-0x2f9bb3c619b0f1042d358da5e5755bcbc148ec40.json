{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n// OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\"},\"DPiggyBaseProxy.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"Address.sol\\\";\\r\\nimport \\\"DPiggyBaseProxyData.sol\\\";\\r\\nimport \\\"DPiggyBaseProxyInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DPiggyBaseProxy\\r\\n * @dev A proxy contract that implements delegation of calls to other contracts.\\r\\n * The stored data is on DPiggyBaseProxyData contract.\\r\\n */\\r\\ncontract DPiggyBaseProxy is DPiggyBaseProxyData, DPiggyBaseProxyInterface {\\r\\n\\r\\n    constructor(address _admin, address _implementation, bytes memory data) public payable {\\r\\n        admin = _admin;\\r\\n        _setImplementation(_implementation, data);\\r\\n    } \\r\\n  \\r\\n    /**\\r\\n     * @dev Fallback function that delegates the execution to an implementation contract.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        address addr = implementation;\\r\\n        assembly {\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n  \\r\\n    /**\\r\\n     * @dev Function to be compliance with EIP 897.\\r\\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-897.md\\r\\n     * It is an \\\"upgradable proxy\\\".\\r\\n     */\\r\\n    function proxyType() public pure returns(uint256) {\\r\\n        return 2; \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the proxy implementation address.\\r\\n     * Only can be called by the proxy admin.\\r\\n     * The implementation address must a contract.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     * @param data ABI encoded with signature data that will be delegated over the new implementation.\\r\\n     */\\r\\n    function setImplementation(address newImplementation, bytes calldata data) onlyAdmin external override(DPiggyBaseProxyInterface) payable {\\r\\n        require(Address.isContract(newImplementation));\\r\\n        address oldImplementation = implementation;\\r\\n        _setImplementation(newImplementation, data);\\r\\n        emit SetProxyImplementation(newImplementation, oldImplementation);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the proxy admin address.\\r\\n     * Only can be called by the proxy admin.\\r\\n     * @param newAdmin Address of the new proxy admin.\\r\\n     */\\r\\n    function setAdmin(address newAdmin) onlyAdmin external override(DPiggyBaseProxyInterface) {\\r\\n        require(newAdmin != address(0));\\r\\n        address oldAdmin = admin;\\r\\n        admin = newAdmin;\\r\\n        emit SetProxyAdmin(newAdmin, oldAdmin);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the implementation address.\\r\\n     * @param _implementation Address of the new proxy implementation.\\r\\n     * @param data ABI encoded with signature data that will be delegated over the new implementation.\\r\\n     */\\r\\n    function _setImplementation(address _implementation, bytes memory data) internal {\\r\\n        implementation = _implementation;\\r\\n        if (data.length \\u003e 0) {\\r\\n            (bool success,) = _implementation.delegatecall(data);\\r\\n            assert(success);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"DPiggyBaseProxyData.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title DPiggyBaseProxyData\\r\\n * @dev Contract for all DPiggyBaseProxyData stored data.\\r\\n */\\r\\ncontract DPiggyBaseProxyData {\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the proxy implementation has been changed.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     * @param oldImplementation Address of the previous proxy implementation.\\r\\n     */\\r\\n    event SetProxyImplementation(address indexed newImplementation, address oldImplementation);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the admin address has been changed.\\r\\n     * @param newAdmin Address of the new admin.\\r\\n     * @param oldAdmin Address of the previous admin.\\r\\n     */\\r\\n    event SetProxyAdmin(address indexed newAdmin, address oldAdmin);\\r\\n    \\r\\n    /**\\r\\n     * @dev Modifier to check if the `msg.sender` is the admin.\\r\\n     * Only admin address can execute.\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev The contract address of the implementation.\\r\\n     */\\r\\n    address public implementation;\\r\\n    \\r\\n    /**\\r\\n     * @dev The admin address.\\r\\n     */\\r\\n    address public admin;\\r\\n}\\r\\n\"},\"DPiggyBaseProxyInterface.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title DPiggyBaseProxyInterface\\r\\n * @dev DPiggyBaseProxy interface with external functions.\\r\\n */\\r\\ninterface DPiggyBaseProxyInterface {\\r\\n    function setImplementation(address newImplementation, bytes calldata data) external payable;\\r\\n    function setAdmin(address newAdmin) external;\\r\\n}\"},\"DPiggyData.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"DPiggyBaseProxyData.sol\\\";\\r\\nimport \\\"ReentrancyGuard.sol\\\";\\r\\nimport \\\"DPiggyInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DPiggyData\\r\\n * @dev Contract for all dPiggy stored data.\\r\\n * It must inherit from DPiggyBaseProxyData contract for properly generate the proxy.\\r\\n */\\r\\ncontract DPiggyData is DPiggyBaseProxyData, ReentrancyGuard, DPiggyDataInterface {\\r\\n    \\r\\n    /**\\r\\n     * @dev The Struct to store each user escrow data.\\r\\n     */\\r\\n    struct EscrowData {\\r\\n        /**\\r\\n         * @dev The amount of Auc escrowed.\\r\\n         */\\r\\n        uint256 amount;\\r\\n        \\r\\n        /**\\r\\n         * @dev The time in Unix that the escrow occurred.\\r\\n         */\\r\\n        uint256 time;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev The Struct to store each dPiggy asset data.\\r\\n     */\\r\\n    struct AssetData {\\r\\n        /**\\r\\n         * @dev The proxy contract address that runs the asset base implementation contract.\\r\\n         */\\r\\n        address proxy;\\r\\n        \\r\\n        /**\\r\\n         * @dev It defines whether the deposit of Dai is allowed.\\r\\n         */\\r\\n        bool depositAllowed;\\r\\n        \\r\\n        /**\\r\\n         * @dev The creation time in Unix.\\r\\n         */\\r\\n        uint256 time;\\r\\n        \\r\\n        /**\\r\\n         * @dev The minimum amount of Dai that can be deposited.\\r\\n         */\\r\\n        uint256 minimumDeposit;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the daily fee has been changed.\\r\\n     * @param newDailylFee The new daily fee.\\r\\n     * @param oldDailylFee The previous daily fee.\\r\\n     */\\r\\n    event SetDailyFee(uint256 newDailylFee, uint256 oldDailylFee);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the minimum amount of Auc escrowed to have the fee exemption has been changed.\\r\\n     * @param newMinimumAuc The new minimum amount of Auc escrowed to have the fee exemption.\\r\\n     * @param oldMinimumAuc The previous minimum amount of Auc escrowed to have the fee exemption.\\r\\n     */\\r\\n    event SetMinimumAucToFreeFee(uint256 newMinimumAuc, uint256 oldMinimumAuc);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a user has escrowed Auc on the contract.\\r\\n     * @param user The user\\u0027s address.\\r\\n     * @param amount The amount of Auc escrowed.\\r\\n     */\\r\\n    event SetUserAucEscrow(address indexed user, uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a user has redeemed the Auc escrowed.\\r\\n     * @param user The user\\u0027s address.\\r\\n     * @param amount The amount of Auc redeemed.\\r\\n     */\\r\\n    event RedeemUserAucEscrow(address indexed user, uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a new dPiggy asset has been created.\\r\\n     * @param tokenAddress The ERC20 token address (0x0 for Ethereum).\\r\\n     * @param proxy The proxy contract address created that runs the asset base implementation contract.\\r\\n     */\\r\\n    event SetNewAsset(address indexed tokenAddress, address proxy);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the dPiggy asset deposit permission has changed.\\r\\n     * @param tokenAddress The ERC20 token address (0x0 for Ethereum).\\r\\n     * @param newDepositAllowed The new condition for the permission for the deposit of Dai.\\r\\n     * @param oldDepositAllowed The previous condition for the permission for the deposit of Dai.\\r\\n     */\\r\\n    event SetAssetDepositAllowed(address indexed tokenAddress, bool newDepositAllowed, bool oldDepositAllowed);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the dPiggy asset minimum Dai for deposit has changed.\\r\\n     * @param tokenAddress The ERC20 token address (0x0 for Ethereum).\\r\\n     * @param newMinimumDeposit The new minimum amount of Dai that can be deposited.\\r\\n     * @param oldMinimumDeposit The previous minimum amount of Dai that can be deposited.\\r\\n     */\\r\\n    event SetAssetMinimumDeposit(address indexed tokenAddress, uint256 newMinimumDeposit, uint256 oldMinimumDeposit);\\r\\n\\r\\n    /**\\r\\n     * @dev Address for the Auc token contract.\\r\\n     */\\r\\n    address public override(DPiggyDataInterface) auc;\\r\\n    \\r\\n    /**\\r\\n     * @dev Address for the Dai token contract.\\r\\n     */\\r\\n    address public override(DPiggyDataInterface) dai;\\r\\n    \\r\\n    /**\\r\\n     * @dev Address for the cDai (the Compound contract).\\r\\n     */\\r\\n    address public override(DPiggyDataInterface) compound;\\r\\n    \\r\\n    /**\\r\\n     * @dev Address for the Uniswap Dai exchange contract.\\r\\n     */\\r\\n    address public override(DPiggyDataInterface) exchange;\\r\\n    \\r\\n    /**\\r\\n     * @dev Address for the Uniswap factory contract.\\r\\n     */\\r\\n    address public uniswapFactory;\\r\\n    \\r\\n    /**\\r\\n     * @dev Address for the asset base implementation contract.\\r\\n     */\\r\\n    address public assetImplementation;\\r\\n    \\r\\n    /**\\r\\n     * @dev The percentage precision. \\r\\n     * The value represents the 100%.\\r\\n     */\\r\\n    uint256 public override(DPiggyDataInterface) percentagePrecision;\\r\\n    \\r\\n    /**\\r\\n     * @dev The minimum amount of Auc escrowed to have the fee exemption.\\r\\n     */\\r\\n    uint256 public minimumAucToFreeFee;\\r\\n    \\r\\n    /**\\r\\n     * @dev Total amount of Auc escrowed.\\r\\n     */\\r\\n    uint256 public totalEscrow;\\r\\n    \\r\\n    /**\\r\\n     * @dev The maximum value that can be defined for the daily fee percentage.\\r\\n     */\\r\\n    uint256 public maximumDailyFee;\\r\\n    \\r\\n    /**\\r\\n     * @dev The daily fee percentage (with percentage precision).\\r\\n     */\\r\\n    uint256 public dailyFee;\\r\\n    \\r\\n    /**\\r\\n     * @dev The number of dPiggy assets.\\r\\n     */\\r\\n    uint256 public numberOfAssets;\\r\\n    \\r\\n    /**\\r\\n     * @dev Array for all dPiggy assets. \\r\\n     * The ERC20 token addresses (0x0 for Ethereum).\\r\\n     */\\r\\n    address[] public assets;\\r\\n    \\r\\n    /**\\r\\n     * @dev The user escrow data.\\r\\n     * _key is the user address.\\r\\n     * _value is the user escrow data.\\r\\n     */\\r\\n    mapping(address =\\u003e EscrowData) public usersEscrow;\\r\\n    \\r\\n    /**\\r\\n     * @dev The dPiggy asset data.\\r\\n     * _key is the ERC20 token address (0x0 for Ethereum).\\r\\n     * _value is the dPiggy asset data.\\r\\n     */\\r\\n    mapping(address =\\u003e AssetData) public assetsData;\\r\\n}\"},\"DPiggyInterface.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title DPiggyDataInterface\\r\\n * @dev DPiggyData interface with stored data used by other contracts.\\r\\n */\\r\\ninterface DPiggyDataInterface {\\r\\n    function auc() external view returns(address);\\r\\n    function dai() external view returns(address);\\r\\n    function compound() external view returns(address);\\r\\n    function exchange() external view returns(address);\\r\\n    function percentagePrecision() external view returns(uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title DPiggyInterface\\r\\n * @dev DPiggy interface with stored data and functions used by other contracts.\\r\\n */\\r\\ninterface DPiggyInterface is DPiggyDataInterface {\\r\\n    function executionFee(uint256 baseTime) external view returns(uint256);\\r\\n    function escrowStart(address user) external view returns(uint256);\\r\\n}\"},\"DPiggyProxy.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"DPiggyBaseProxy.sol\\\";\\r\\nimport \\\"DPiggyData.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DPiggyProxy\\r\\n * @dev A proxy contract for dPiggy.\\r\\n * It must inherit first from DPiggyBaseProxy contract for properly works.\\r\\n * The stored data is on DPiggyData contract.\\r\\n */\\r\\ncontract DPiggyProxy is DPiggyBaseProxy, DPiggyData {\\r\\n    constructor(\\r\\n        address _admin, \\r\\n        address _implementation, \\r\\n        bytes memory data\\r\\n    ) public payable DPiggyBaseProxy(_admin, _implementation, data) {\\r\\n    } \\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title ReentrancyGuard\\r\\n * @dev Base contract with a modifier that implements a reentrancy guard.\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    /**\\r\\n     * @dev Internal data to control the reentrancy.\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to prevents a contract from calling itself during the function execution.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"ReentrancyGuard:: reentry\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemUserAucEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newDepositAllowed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldDepositAllowed\",\"type\":\"bool\"}],\"name\":\"SetAssetDepositAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumDeposit\",\"type\":\"uint256\"}],\"name\":\"SetAssetMinimumDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDailylFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDailylFee\",\"type\":\"uint256\"}],\"name\":\"SetDailyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumAuc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinimumAuc\",\"type\":\"uint256\"}],\"name\":\"SetMinimumAucToFreeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"SetNewAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"SetProxyAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"}],\"name\":\"SetProxyImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetUserAucEscrow\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetsData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"depositAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDailyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAucToFreeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentagePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEscrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersEscrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DPiggyProxy","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cac3380f9c6cf86e4903f88dc81e76b2bc07bb74000000000000000000000000af66cc5411d730a6421f9b58aafc028425f6b07200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000124a96b428c0000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000004dac98b2ba90a0000000000000000000000000000000000000000000000000013467c5d98a88900000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95000000000000000000000000c12d099be31567add4e4e4d0d45691c3f58f566300000000000000000000000031d9d2660c00d193f5b23373318244a1330d4f9100000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"ipfs://d002e15d0030de15f09539f2e9fdef5c86d9fff31f81cbda284a0d1ccdf06607"}]}