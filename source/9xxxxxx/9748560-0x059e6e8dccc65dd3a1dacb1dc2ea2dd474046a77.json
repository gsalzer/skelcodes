{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-03-27\r\n*/\r\npragma solidity ^0.5.7;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract INRSToken{\r\n    \r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal _totalburnt;\r\n    uint256 mintLimit;\r\n    uint256 burnLimit;\r\n    address public owner;\r\n    address public newOwner;\r\n    address central_account;\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping (address=>uint256) internal blocklist;\r\n    bool stopped=false;\r\n    \r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    \r\n    \r\n    \r\n    constructor () public {\r\n        _name = 'INR STABLE';\r\n        _symbol = 'INRS';\r\n        _decimals = 18;\r\n        _totalSupply = 0;\r\n        _totalburnt = 0;\r\n        mintLimit = 1000000;\r\n        burnLimit = 1000000;\r\n        \r\n        owner = msg.sender;\r\n  }\r\n  \r\n  \r\n   modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n   }\r\n   \r\n   function isBlockList(address _ads) public view returns (bool){\r\n       if(blocklist[_ads]>0)\r\n        return true;\r\n       else\r\n        return false;\r\n   }\r\n   \r\n   function mintStatus()public view returns (bool status){\r\n       return !stopped;\r\n   }\r\n   \r\n   function set_centralAccount(address central_Acccount) external onlyOwner\r\n    {\r\n        require(blocklist[central_Acccount]==0);\r\n        central_account = central_Acccount;\r\n    }\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     \r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n     require(blocklist[_spender]==0 && blocklist[msg.sender]==0);\r\n     require( _spender != address(0));\r\n     \r\n     allowed[msg.sender][_spender] = _value;\r\n     emit Approval(msg.sender, _spender, _value);\r\n     return true;\r\n   }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n      require( _owner != address(0) && _spender !=address(0));\r\n     return allowed[_owner][_spender];\r\n   }\r\n\r\n   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n     require(blocklist[_spender]==0 && blocklist[msg.sender]==0);\r\n     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\r\n     emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n     return true;\r\n   }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n     require(blocklist[_spender]==0 && blocklist[msg.sender]==0);\r\n     uint oldValue = allowed[msg.sender][_spender];\r\n     if (_subtractedValue > oldValue) {\r\n       allowed[msg.sender][_spender] = 0;\r\n     } else {\r\n       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\r\n    }\r\n     emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n     return true;\r\n   }\r\n   \r\n   // Transfer the balance from owner's account to another account\r\n   \r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        \r\n        require( balances[msg.sender]>= _value && _value > 0 );\r\n        require(blocklist[_to]==0 && blocklist[msg.sender]==0);\r\n\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender] , _value);\r\n        balances[_to] = SafeMath.add(balances[_to] , _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /** Send _value amount of tokens from address _from to address _to\r\n      * \r\n      * The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n      * \r\n      * tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n      * \r\n      * fees in sub-currencies; the command should fail unless the _from account has\r\n      * \r\n      * deliberately authorized the sender of the message via some mechanism; we propose\r\n      * \r\n      * these standardized APIs for approval:\r\n      */\r\n     \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(blocklist[_to]==0 && blocklist[msg.sender]==0);\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(_value > 0 );\r\n\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n   }\r\n   \r\n   function transferby(address _from,address _to,uint256 _amount) external onlycentralAccount returns(bool success) {\r\n        require( _to != address(0)); \r\n        require(blocklist[_from]==0 && blocklist[_to]==0);\r\n        require (balances[_from] >= _amount && _amount > 0);\r\n        \r\n        balances[_from] = SafeMath.sub( balances[_from] , _amount);\r\n        balances[_to] = SafeMath.add(balances[_to] , _amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /** @notice  Mint the specified value from the given address.\r\n      *\r\n      * @dev  ads balance is added by the value they mentioned.\r\n      *\r\n      * @param  value  The amount to mint.\r\n      *\r\n      * @param  ads     address of the user\r\n      * \r\n      * @return  success  true if the mint succeeded.\r\n      */\r\n   \r\n   function mint(uint value , address ads) external onlycentralAccount returns (bool){\r\n       \r\n       require(!stopped);\r\n       require(ads!=address(0) && value > 0 && value <= mintLimit);\r\n       require(blocklist[ads]==0);\r\n       \r\n       _totalSupply = SafeMath.add(_totalSupply, value);\r\n      balances[ads] = SafeMath.add(balances[ads], value);\r\n      emit Transfer(address(0), ads, value);\r\n      return true;\r\n       \r\n   }\r\n   \r\n   /** @notice  Burns the specified value from the given address.\r\n      *\r\n      * @dev  ads balance is subtracted by the value they mentioned.\r\n      *\r\n      * @param  value  The amount to burn.\r\n      *\r\n      * @param  ads     address of the user\r\n      * \r\n      * @return  success  true if the burn succeeded.\r\n      */\r\n   \r\n   function burn(uint value ,  address ads) external onlycentralAccount returns (bool){\r\n        \r\n        require(ads!=address(0) && value > 0 && !stopped);\r\n        require(blocklist[ads]==0);\r\n        require(balances[ads]>=value && value <= burnLimit);\r\n        \r\n        balances[ads] = SafeMath.sub(balances[ads], value);\r\n        _totalSupply = SafeMath.sub(_totalSupply, value);\r\n        _totalburnt = SafeMath.add(_totalburnt,value);\r\n        emit Transfer(ads, address(0), value);\r\n        return true;\r\n   }\r\n   \r\n    function increaseSupply(uint value, address to) external onlyOwner returns (bool) {\r\n      \r\n      require(to!= address(0) && value > 0);\r\n      _totalSupply = SafeMath.add(_totalSupply, value);\r\n      balances[to] = SafeMath.add(balances[to], value);\r\n      emit Transfer(address(0), to, value);\r\n      return true;\r\n}\r\n\r\n\r\n\r\n    function decreaseSupply(uint value, address from) external onlyOwner returns (bool) {\r\n        \r\n        require(from!=address(0) && value > 0);\r\n        require(balances[from]>=value);\r\n        balances[from] = SafeMath.sub(balances[from], value);\r\n        _totalSupply = SafeMath.sub(_totalSupply, value);  \r\n        _totalburnt = SafeMath.add(_totalburnt,value);\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n}\r\n\r\n     // called by the owner, pause Mint & Burn\r\n    function PauseMint() external onlyOwner{\r\n        stopped = true;\r\n       }\r\n    \r\n    // called by the owner, resume Mint & Burn\r\n    function ResumeMint() external onlyOwner{\r\n        stopped = false;\r\n      }\r\n    \r\n    // called by the owner, set Mint Limit for the Central Account\r\n    function SetMintLimit(uint256 _limit) external onlyOwner{\r\n        mintLimit = _limit;\r\n    }\r\n    \r\n    function getMintLimit() public view returns(uint256){\r\n        return mintLimit;\r\n    }\r\n    \r\n    // called by the owner, set Burn Limit for the Central Account\r\n    function SetBurnLimit(uint256 _limit) external onlyOwner{\r\n        burnLimit = _limit;\r\n    }\r\n    \r\n    function getBurnLimit()public view returns(uint256){\r\n        return burnLimit;\r\n    }\r\n      \r\n     \r\n    // called by the owner, to add particular address to the blocklist\r\n    function addBlockLIst(address ads) external onlyOwner{\r\n         require(ads != owner);\r\n         blocklist[ads] = 1;\r\n     }\r\n     \r\n    // called by the owner, to remove particular address from the blocklist\r\n    function removeBlockList(address ads) external onlyOwner{\r\n         blocklist[ads] = 0;\r\n     }\r\n     \r\n     \r\n      /** @notice This function transfers the balances of all the given addresses \r\n       \r\n      * to the given destination.\r\n      *\r\n      * @dev The central account is the only authorized caller of\r\n      * this function. This function accepts an array of addresses to have their\r\n      * balances transferred for gas efficiency purposes.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _froms  The addresses to have their balances swept.\r\n      * @param  _to  The destination address of all these transfers.\r\n      */\r\n     \r\n      function sweep(address[] calldata _froms, address _to) external  onlycentralAccount returns(bool) {\r\n        require(_to != address(0));\r\n        uint256 lenFroms = _froms.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i=0; i<lenFroms; ++i) {\r\n            address from = _froms[i];\r\n\r\n                uint256 fromBalance = balances[from];\r\n\r\n                if (fromBalance > 0) {\r\n                    sweptBalance += fromBalance;\r\n\r\n                    balances[from] = 0;\r\n\r\n                     emit Transfer(from, _to, fromBalance);\r\n                }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n            balances[_to] = SafeMath.add(balances[_to],sweptBalance);\r\n            return true;\r\n        }\r\n    }\r\n      \r\n      \r\n       /** @notice  A function for a sender to issue multiple transfers to multiple\r\n      * different addresses at once. This function is implemented for gas\r\n      * considerations when someone wishes to transfer, as one transaction is\r\n      * cheaper than issuing several distinct individual `transfer` transactions.\r\n      *\r\n      * @dev  By specifying a set of destination addresses and values, the\r\n      * sender can issue one transaction to transfer multiple amounts to\r\n      * distinct addresses, rather than issuing each as a separate\r\n      * transaction. The `_tos` and `_values` arrays must be equal length, and\r\n      * an index in one array corresponds to the same index in the other array\r\n      * (e.g. `_tos[0]` will receive `_values[0]`, `_tos[1]` will receive\r\n      * `_values[1]`, and so on.)\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _tos  The destination addresses to receive the transfers.\r\n      * @param  _values  The values for each destination address.\r\n      * @return  success  If transfers succeeded.\r\n      */\r\n      \r\n     function batchTransfer(address[] memory _tos, uint256[] memory  _values) public returns (bool success) {\r\n        require(_tos.length == _values.length);\r\n\r\n        uint256 totalTransfers = _tos.length;\r\n        uint256 senderBalance = balances[msg.sender];\r\n\r\n        for (uint256 i = 0; i < totalTransfers; i++) {\r\n          address to = _tos[i];\r\n          require(to != address(0));\r\n          uint256 amount = _values[i];\r\n          require(senderBalance >= amount);\r\n\r\n          if (msg.sender != to) {\r\n            senderBalance -= amount;\r\n            SafeMath.add(balances[to], amount);\r\n          }\r\n          emit Transfer(msg.sender, to, amount);\r\n        }\r\n\r\n        balances[msg.sender] = senderBalance;\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(blocklist[_newOwner]==0);\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner && blocklist[msg.sender]==0);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"PauseMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResumeMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"SetBurnLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"SetMintLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"addBlockLIst\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"increaseSupply\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ads\",\"type\":\"address\"}],\"name\":\"isBlockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"removeBlockList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"central_Acccount\",\"type\":\"address\"}],\"name\":\"set_centralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_froms\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"INRSToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://1089bb5df7f9e9c296c4d21ca93b86cee906c6b1143379333de78aae3916312a"}]}