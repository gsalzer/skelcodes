{"status":"1","message":"OK","result":[{"SourceCode":"/*! 0xswap.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n\npragma solidity 0.5.16;\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function totalSupply() external view returns(uint256);\n    function balanceOf(address account) external view returns(uint256);\n    function transfer(address recipient, uint256 amount) external returns(bool);\n    function allowance(address owner, address spender) external view returns(uint256);\n    function approve(address spender, uint256 amount) external returns(bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\n}\n\ncontract Uniswap {\n    function tokenAddress() external view returns (address token);\n    function factoryAddress() external view returns (address factory);\n    \n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    \n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    \n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    \n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n}\n\ncontract Swap0x {\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    Uniswap uniswap = Uniswap(0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667);\n\n    mapping(address => bytes32) public coins;\n\n    constructor() public {\n        coins[ETH_ADDRESS] = \"ETH\";\n        coins[0x6B175474E89094C44Da98b954EedeAC495271d0F] = \"DAI\";\n    }\n\n    function _send(address payable _addr, address _coin, uint256 _value) private {\n        if(_coin != ETH_ADDRESS) {\n            IERC20 token = IERC20(_coin);\n            require(token.transfer(_addr, _value), \"Revert transfer\");\n        }\n        else {\n            require(address(_addr).send(_value), \"Revert transfer\");\n        }\n    }\n\n    function _swap(address payable _addr, address _sell, address _buy, uint256 _sellAmount) private returns(uint256 res) {\n        require(coins[_sell].length > 0 && coins[_buy].length > 0 && _sell != _buy, \"Bad pair\");\n\n        if(_sell != ETH_ADDRESS) {\n            IERC20 token = IERC20(_sell);\n\n            require(token.transferFrom(_addr, address(this), _sellAmount), \"Failed to transfer\");\n            require(token.approve(address(uniswap), _sellAmount), \"Failed to set allowance\");\n            \n            if(_buy != ETH_ADDRESS) {\n                res = uniswap.tokenToTokenSwapInput(_sellAmount, 0, 0, 0, _buy);\n            }\n            else {\n                res = uniswap.tokenToEthSwapInput(_sellAmount, 0, 0);\n            }\n        }\n        else res = uniswap.ethToTokenSwapInput(0, 0);\n\n        require(res > 0, \"Bad result\");\n\n        _send(_addr, _buy, res);\n    }\n\n    function swap(address _buy) payable external {\n        _swap(msg.sender, ETH_ADDRESS, _buy, msg.value);\n    }\n\n    function swap(address _sell, address _buy, uint256 _sellAmount) external {\n        _swap(msg.sender, _sell, _buy, _sellAmount);\n    }\n\n    function price(address _sell, address _buy, uint256 _sellAmount) external view returns(uint256) {\n        require(coins[_sell].length > 0 && coins[_buy].length > 0 && _sell != _buy, \"Bad pair\");\n\n        if(_sell != ETH_ADDRESS) {\n            if(_buy != ETH_ADDRESS) {\n                return uniswap.getTokenToEthInputPrice(_sellAmount);\n            }\n            else {\n                return uniswap.getTokenToEthInputPrice(_sellAmount);\n            }\n        }\n        else return uniswap.getEthToTokenInputPrice(_sellAmount);\n    }\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buy\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swap0x","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}