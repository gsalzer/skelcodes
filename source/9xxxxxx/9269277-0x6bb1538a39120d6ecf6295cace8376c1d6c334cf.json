{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract UtilEFT{\r\n    uint ethWei = 1 ether;\r\n\r\n    function getLevel(uint value) internal view returns (uint) {\r\n        if (value >= 1 * ethWei && value <= 9 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value >= 10 * ethWei && value <= 19 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value >= 20 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getLineLevel(uint value) internal view returns (uint) {\r\n        if (value >= 1 * ethWei && value <= 9 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value >= 10 * ethWei && value <= 19 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value >= 20 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getScByLevel(uint level, uint reInvestCount) internal pure returns (uint) {\r\n        if (level == 1) {\r\n            if (reInvestCount == 0) {\r\n                return 80;\r\n            }\r\n            if (reInvestCount == 1) {\r\n                return 90;\r\n            }\r\n            if (reInvestCount >= 2) {\r\n                return 100;\r\n            }\r\n        }\r\n        if (level == 2) {\r\n            if (reInvestCount == 0) {\r\n                return 80;\r\n            }\r\n            if (reInvestCount == 1) {\r\n                return 90;\r\n            }\r\n            if (reInvestCount >= 2) {\r\n                return 100;\r\n            }\r\n        }\r\n        if (level == 3) {\r\n            if (reInvestCount == 0) {\r\n                return 80;\r\n            }\r\n            if (reInvestCount == 1) {\r\n                return 90;\r\n            }\r\n            if (reInvestCount >= 2) {\r\n                return 100;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getFloorIndex(uint floor) internal pure returns (uint) {\r\n        if (floor == 1) {\r\n            return 1;\r\n        }\r\n        if (floor == 2) {\r\n            return 2;\r\n        }\r\n        if (floor >= 3 && floor <= 5) {\r\n            return 3;\r\n        }\r\n        if (floor >= 6 && floor <= 10) {\r\n            return 4;\r\n        }\r\n        if (floor >= 11 && floor <= 20) {\r\n            return 5;\r\n        }\r\n        if (floor >= 20) {\r\n            return 6;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getAdvancedScaleByLevelAndTim(uint level, uint floor, uint inviteamount) internal pure returns (uint){\r\n        if(inviteamount >= 3)\r\n        {\r\n            if(level == 1){\r\n                if(floor == 1 ){\r\n                    return 50;\r\n                }\r\n                if (floor == 2) {\r\n                    return 10;\r\n                }\r\n                if (floor == 3) {\r\n                    return 10;\r\n                }\r\n            }\r\n            if (level == 2) {\r\n                if (floor == 1) {\r\n                    return 70;\r\n                }\r\n                if (floor == 2) {\r\n                    return 20;\r\n                }\r\n                if (floor >= 3 || floor <= 5) {\r\n                    return 10;\r\n                }\r\n            }\r\n            if (level == 3) {\r\n                if (floor == 1) {\r\n                    return 100;\r\n                }\r\n                if (floor == 2) {\r\n                    return 30;\r\n                }\r\n                if (floor >= 3 || floor <= 5) {\r\n                    return 10;\r\n                }\r\n                if (floor >= 6 || floor <= 10) {\r\n                    return 5;\r\n                }\r\n                if (floor >= 11 || floor <= 20) {\r\n                    return 3;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(level == 1){\r\n                if(floor == 1 ){\r\n                    return 50;\r\n                }\r\n            }\r\n            \r\n            if (level == 2) {\r\n                if (floor == 1) {\r\n                    return 70;\r\n                }\r\n                if (floor == 2) {\r\n                    return 20;\r\n                }\r\n            }\r\n            if (level == 3) {\r\n                if (floor == 1) {\r\n                    return 100;\r\n                }\r\n                if (floor == 2) {\r\n                    return 30;\r\n                }\r\n                if (floor >= 3 || floor <= 5) {\r\n                    return 10;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function isEmpty(string memory str) internal pure returns (bool) {\r\n        if (bytes(str).length == 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract EFT is UtilEFT, WhitelistAdminRole {\r\n\r\n    using SafeMath for *;\r\n\r\n    string constant private name = \"Ether Fortune Tree\";\r\n\r\n    uint ethWei = 1 ether;\r\n\r\n    address payable private adminPool = address(0x0c5296D9e4F4A1A5838eBA0DC4A2AA7eAc2A492b); \r\n\r\n    address payable private loyalPool = address(0x9c8C082290fC339F54968FBbBB42C86C72aA52cf);\r\n\r\n    address payable private partnerPool = address(0x94216E8e796b8082924163a3D15580AceFA7A5Cf);\r\n    \r\n    address payable private insurancePool = address(0x8CfF3395658059d287caA563DD5186E24545e6Dc);\r\n\r\n    struct User {\r\n        uint id;\r\n        address userAddress;\r\n        uint staticLevel;\r\n        uint dynamicLevel;\r\n        uint allInvest;\r\n        uint freezeAmount;\r\n        uint unlockAmount;\r\n        uint unlockAmountRedeemTime;\r\n        uint allStaticAmount;\r\n        uint hisStaticAmount;\r\n        uint dynamicAmount;\r\n        uint lockedDynamicAmount;\r\n        uint dynamicWithdrawn;\r\n        uint staticWithdrawn;\r\n        Invest[] invests;\r\n        uint staticFlag;\r\n        uint isRedeem;\r\n\r\n        mapping(uint => mapping(uint => uint)) dynamicProfits;\r\n        uint reInvestCount;\r\n        uint inviteAmount;\r\n        uint solitaire;\r\n        uint hisSolitaire;\r\n    }\r\n\r\n    struct UserGlobal {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n    }\r\n\r\n    struct Invest {\r\n        address userAddress;\r\n        uint investAmount;\r\n        uint investTime;\r\n        uint realityInvestTime;\r\n        uint times;\r\n        uint modeFlag;\r\n        bool isSuspendedInvest;\r\n    }\r\n\r\n    uint coefficient = 10;\r\n    uint startTime = 1578873600;\r\n    uint baseTime = 1578873600;\r\n    uint investCount = 0;\r\n    mapping(uint => uint) rInvestCount;\r\n    uint investMoney = 0;\r\n    mapping(uint => uint) rInvestMoney;\r\n    uint uid = 0;\r\n    uint rid = 1;\r\n    uint period = 7 days;\r\n    uint suspendedTime = 0;\r\n    uint suspendedDays = 0 days;\r\n    uint lastInvestTime = 0;\r\n    mapping(uint => mapping(address => User)) userRoundMapping;\r\n    mapping(address => UserGlobal) userMapping;\r\n    mapping(string => address) addressMapping;\r\n    mapping(uint => address) public indexMapping;\r\n    mapping(uint => uint) public everyDayInvestMapping;\r\n    mapping(uint => uint[]) investAmountList;\r\n    mapping(uint => uint) transformAmount;\r\n    uint baseLimit = 750 * ethWei; \r\n\r\n    /**\r\n     * @dev Just a simply check to prevent contract\r\n     * @dev this by calling method in constructor.\r\n     */\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    modifier isSuspended() {\r\n        require(notSuspended(), \"suspended\");\r\n        _;\r\n    }\r\n\r\n    event LogInvestIn(address indexed who, uint indexed uid, uint amount, uint time, uint investTime, string inviteCode, string referrer, uint t);\r\n    event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time, uint t);\r\n    event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);\r\n\r\n    constructor () public {\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    function gameStart() public view returns (bool) {\r\n        return startTime != 0 && now > startTime;\r\n    }\r\n\r\n    function investIn(string memory inviteCode, string memory referrer, uint flag)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(msg.value >= 1 * ethWei, \"more than 1 ETH\");\r\n        uint investTime = now;\r\n        uint investDay = getCurrentInvestDay(investTime);     \r\n        everyDayInvestMapping[investDay] = msg.value.add(everyDayInvestMapping[investDay]);\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!isEmpty(inviteCode), \"empty invite code\");\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \"referer not exist\");\r\n            require(referrerAddr != msg.sender, \"referrer can't be self\");\r\n            require(!isUsed(inviteCode), \"invite code is used\");\r\n\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n        }\r\n\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.isRedeem == 0, \"This account is terminated.\");\r\n        if (uint(user.userAddress) != 0) {\r\n            require(user.freezeAmount == 0 && user.unlockAmount == 0, \"your invest not unlocked\");\r\n            user.allInvest = user.allInvest.add(msg.value);\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.dynamicLevel = getLineLevel(msg.value);  \r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.dynamicLevel = getLineLevel(msg.value); \r\n            user.allInvest = msg.value;\r\n            if (!isEmpty(userGlobal.referrer)) {\r\n                address referrerAddr = getUserAddressByCode(userGlobal.referrer);\r\n                if (referrerAddr != address(0)) {\r\n                    userRoundMapping[rid][referrerAddr].inviteAmount++;\r\n                }\r\n            }\r\n        }\r\n        Invest memory invest = Invest(msg.sender, msg.value, investTime, now, 0, flag, !notSuspended(investTime));\r\n        user.invests.push(invest);\r\n        lastInvestTime = investTime;\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(msg.value);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1); \r\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value); \r\n        \r\n        investAmountList[rid].push(msg.value);\r\n\r\n        sendFeetoAdmin(msg.value);\r\n        sendFeetoPartner(msg.value);\r\n        sendFeetoInsurance(msg.value);\r\n\r\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, investTime, userGlobal.inviteCode, userGlobal.referrer, 0);\r\n    }\r\n\r\n    function reInvestIn() external payable {\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user haven't invest in round before\");\r\n        require(user.freezeAmount == 0, \"user had invest in round\");\r\n        require(user.unlockAmount > 0, \"user must have unlockAmount\");\r\n        \r\n        bool isEnough;\r\n        uint sendMoney;\r\n\r\n        sendMoney = user.lockedDynamicAmount;\r\n        if (sendMoney > 0) {\r\n            (isEnough, sendMoney) = isEnoughBalance(sendMoney);\r\n\r\n            if (sendMoney > 0) {\r\n                user.dynamicWithdrawn = user.dynamicWithdrawn.add(sendMoney);\r\n                user.lockedDynamicAmount = 0;\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n                emit LogWithdrawProfit(msg.sender, user.id, sendMoney, now, 2);\r\n            }\r\n            if (!isEnough) {\r\n                revert(\"invalid flag\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        uint reInvestAmount = user.unlockAmount.add(msg.value);\r\n\r\n       uint investTime = now;\r\n\r\n        user.unlockAmount = 0;\r\n        user.allInvest = user.allInvest.add(reInvestAmount);\r\n        user.freezeAmount = user.freezeAmount.add(reInvestAmount);\r\n        user.staticLevel = getLevel(user.freezeAmount);\r\n        user.dynamicLevel = getLineLevel(user.freezeAmount);\r\n        user.reInvestCount = user.reInvestCount.add(1);\r\n        user.unlockAmountRedeemTime = 0;\r\n\r\n        uint flag = user.invests[user.invests.length-1].modeFlag;\r\n        Invest memory invest = Invest(msg.sender, reInvestAmount, investTime, now, 0, flag, !notSuspended(investTime));\r\n        user.invests.push(invest);\r\n        if (investTime > lastInvestTime) {\r\n            lastInvestTime = investTime;\r\n        }\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(reInvestAmount);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(reInvestAmount);\r\n\r\n        investAmountList[rid].push(reInvestAmount);\r\n\r\n        sendFeetoAdmin(reInvestAmount);\r\n        sendFeetoPartner(reInvestAmount);\r\n        sendFeetoInsurance(reInvestAmount);\r\n        \r\n        emit LogInvestIn(msg.sender, user.id, reInvestAmount, now, investTime, userMapping[msg.sender].inviteCode, userMapping[msg.sender].referrer, 1);\r\n    }\r\n    \r\n    function withdrawProfit()\r\n    public\r\n    isHuman()\r\n    {\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint sendMoney = user.allStaticAmount;\r\n  \r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (!isEnough) {\r\n            revert(\"invalid flag\");\r\n        }\r\n\r\n        if (resultMoney > 0) {\r\n            uint loyalAmount = resultMoney * 5 / 100;\r\n            uint userAmount = resultMoney * 95 / 100;\r\n            sendMoneyToUser(msg.sender, userAmount);\r\n            sendFeetoLoyal(loyalAmount);\r\n            user.staticWithdrawn = user.staticWithdrawn.add(sendMoney);\r\n            user.allStaticAmount = 0;\r\n            \r\n            distributeReferralBonus(userMapping[msg.sender].referrer,resultMoney);\r\n            \r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now, 1);\r\n        }\r\n    }\r\n    \r\n    function distributeReferralBonus(string memory referrer, uint staticMoney) private {\r\n        string memory tmpReferrer = referrer;\r\n        \r\n        for (uint i = 1; i <= 20; i++) {\r\n            if (isEmpty(tmpReferrer)) {\r\n                break;\r\n            }\r\n            \r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            \r\n            if (tmpUserAddr == address(0)) {\r\n                break;\r\n            }\r\n            \r\n            User storage user = userRoundMapping[rid][tmpUserAddr];\r\n            uint scale = 0;\r\n            \r\n            scale = getAdvancedScaleByLevelAndTim(user.staticLevel,i,user.inviteAmount);\r\n            \r\n            uint amount = staticMoney * scale / 100; \r\n            \r\n            uint bonusLimit = user.allInvest - user.dynamicAmount - user.dynamicWithdrawn;\r\n            if(amount > bonusLimit )\r\n            {\r\n                amount = bonusLimit;\r\n            }\r\n            \r\n            if(amount <= 0)\r\n            {\r\n                tmpReferrer = userMapping[tmpUserAddr].referrer;\r\n                continue;\r\n            }\r\n            \r\n            user.dynamicAmount = user.dynamicAmount.add(amount);\r\n            \r\n            tmpReferrer = userMapping[tmpUserAddr].referrer;\r\n        }\r\n    }\r\n    \r\n    function withdrawDynamicProfit()\r\n    public\r\n    isHuman()\r\n    {\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n\r\n        uint sendMoney = user.dynamicAmount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (!isEnough) {\r\n            revert(\"invalid flag\");\r\n        }\r\n\r\n        if (resultMoney > 0) {\r\n            uint poolAmount = resultMoney * 10 / 100;\r\n            uint userAmount = resultMoney * 90 / 100;\r\n            uint reserveAmount = userAmount * 30 / 100;\r\n            uint releaseAmount = userAmount * 70 / 100;\r\n            \r\n            sendMoneyToUser(msg.sender, releaseAmount);\r\n            sendFeetoLoyal(poolAmount);\r\n            \r\n            user.dynamicWithdrawn = user.dynamicWithdrawn.add(resultMoney);\r\n            user.lockedDynamicAmount = user.lockedDynamicAmount.add(reserveAmount);\r\n            user.dynamicAmount = 0;\r\n            emit LogWithdrawProfit(msg.sender, user.id, releaseAmount, now, 2);\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n        if (sendMoney >= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n    \r\n    function isEnoughBalanceToRedeem(uint sendMoney, uint reInvestCount) private view returns (bool, uint){\r\n        if (reInvestCount >= 0 && reInvestCount <= 5) {\r\n            sendMoney = sendMoney * 80 /100;\r\n        }\r\n        if (reInvestCount >= 6 && reInvestCount <= 10) {\r\n            sendMoney = sendMoney * 85 /100;\r\n        }\r\n        if (reInvestCount >= 11 && reInvestCount <= 15) {\r\n            sendMoney = sendMoney * 90 /100;\r\n        }\r\n        if (reInvestCount >= 16 && reInvestCount <= 20  ) {\r\n            sendMoney = sendMoney * 95 /100;\r\n        }\r\n        if (sendMoney >= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n    \r\n    function calStaticProfitInner(address payable userAddr) private returns (uint){\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0 || user.freezeAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint allStatic = 0;\r\n        uint i = user.invests.length.sub(1);\r\n        Invest storage invest = user.invests[i];\r\n        \r\n        uint scale;\r\n        scale = getScByLevel(user.staticLevel, user.reInvestCount);\r\n        \r\n        uint startDay = invest.investTime.div(1 days).mul(1 days);\r\n        if (now < startDay) {\r\n            return 0;\r\n        }\r\n        uint staticGaps = now.sub(startDay).div(1 days);\r\n\r\n        if (staticGaps > 7) {\r\n            staticGaps = 7;\r\n        }\r\n        if (staticGaps > invest.times) {\r\n                allStatic = staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(10000);\r\n                invest.times = staticGaps;\r\n        }\r\n\r\n        (uint unlockDay, uint unlockAmountRedeemTime) = getUnLockDay(invest.investTime);\r\n\r\n        if (unlockDay >= 7 && user.freezeAmount != 0) {\r\n            user.staticFlag = user.staticFlag.add(1);\r\n            user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n            user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n            user.unlockAmountRedeemTime = unlockAmountRedeemTime;\r\n        }\r\n\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        user.allStaticAmount = user.allStaticAmount.add(allStatic);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(allStatic);\r\n        return user.allStaticAmount;\r\n    }\r\n\r\n    function getStaticProfits(address userAddr) public view returns(uint, uint, uint) {\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0 || user.invests.length == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n        if (user.freezeAmount == 0) {\r\n            return (0, user.hisStaticAmount, user.staticWithdrawn);\r\n        }\r\n        uint allStatic = 0;\r\n        uint i = user.invests.length.sub(1);\r\n        Invest memory invest = user.invests[i];\r\n        \r\n        uint scale;\r\n        scale = getScByLevel(user.staticLevel, user.reInvestCount);\r\n        \r\n        uint startDay = invest.investTime.div(1 days).mul(1 days);\r\n        if (now < startDay) { \r\n            return (0, user.hisStaticAmount, user.staticWithdrawn);\r\n        }\r\n        uint staticGaps = now.sub(startDay).div(1 days);\r\n\r\n        if (staticGaps > 7) {\r\n            staticGaps = 7;\r\n        }\r\n        if (staticGaps > invest.times) {\r\n            allStatic = staticGaps.sub(invest.times).mul(scale).mul(user.freezeAmount).div(10000);\r\n        }\r\n\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        return (\r\n            user.allStaticAmount.add(allStatic),\r\n            user.hisStaticAmount.add(allStatic),\r\n            user.staticWithdrawn\r\n        );\r\n    }\r\n\r\n\r\n    function updateReferrerPreProfits(string memory referrer, uint day, uint staticMoney) private {\r\n        string memory tmpReferrer = referrer;\r\n\r\n        for (uint i = 1; i <= 20; i++) {\r\n            if (isEmpty(tmpReferrer)) {\r\n                break;\r\n            }\r\n            uint floorIndex = getFloorIndex(i);\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            if (tmpUserAddr == address(0)) {\r\n                break;\r\n            }\r\n\r\n            for (uint j = 0; j < 6; j++) {\r\n                uint dayIndex = day.add(j);\r\n                uint currentMoney = userRoundMapping[rid][tmpUserAddr].dynamicProfits[floorIndex][dayIndex];\r\n                userRoundMapping[rid][tmpUserAddr].dynamicProfits[floorIndex][dayIndex] = currentMoney.add(staticMoney);\r\n            }\r\n            tmpReferrer = userMapping[tmpUserAddr].referrer;\r\n        }\r\n    }\r\n\r\n    function registerUserInfo(address user, string calldata inviteCode, string calldata referrer) external onlyOwner {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    function redeem()\r\n    public\r\n    isHuman()\r\n    isSuspended()\r\n    {\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id > 0, \"user not exist\");\r\n\r\n        require(now >= user.unlockAmountRedeemTime, \"redeem time non-arrival\");\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n        require(sendMoney != 0, \"you don't have unlock eth\");\r\n        uint reInvestCount = user.reInvestCount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        \r\n        (isEnough, resultMoney) = isEnoughBalanceToRedeem(sendMoney, reInvestCount);\r\n        \r\n        if (!isEnough) {\r\n            revert(\"invalid flag\");\r\n        }\r\n        if (resultMoney > 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.unlockAmount = 0;\r\n            user.staticLevel = 0;\r\n            user.dynamicLevel = 0;\r\n            user.reInvestCount = 0;\r\n            user.hisStaticAmount = 0;\r\n            user.isRedeem = 1;\r\n            emit LogRedeem(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n    \r\n    function calPartnershipBonus(address user, uint totaleth) external onlyOwner\r\n    {\r\n        uint group = 20000;\r\n        uint gameStartTime = startTime; \r\n        if (gameStartTime <= 0) {\r\n            revert(\"error\");\r\n        }\r\n        if(totaleth < group)\r\n        {\r\n            uint[19] memory ct;\r\n            \r\n            User memory userInfo = userRoundMapping[1][user];\r\n            \r\n            ct[0] = userInfo.id;\r\n            ct[1] = userInfo.staticLevel;\r\n            ct[2] = userInfo.dynamicLevel;\r\n            ct[3] = userInfo.allInvest;\r\n            Invest memory invest;\r\n            if (userInfo.invests.length == 0) {\r\n                ct[4] = 0;\r\n            } else {\r\n                invest = userInfo.invests[userInfo.invests.length-1];\r\n                ct[4] = getScByLevel(userInfo.staticLevel, userInfo.reInvestCount);\r\n            }\r\n            ct[5] = userInfo.inviteAmount;\r\n            ct[6] = userInfo.freezeAmount;\r\n            ct[7] = userInfo.staticWithdrawn.add(userInfo.dynamicWithdrawn);\r\n            ct[8] = userInfo.staticWithdrawn;\r\n            ct[9] = userInfo.dynamicWithdrawn;\r\n            uint canWithdrawn;\r\n            uint hisWithdrawn;\r\n            uint staticWithdrawn;\r\n            (canWithdrawn, hisWithdrawn, staticWithdrawn) = getStaticProfits(user);\r\n            ct[10] = canWithdrawn;\r\n            // ct[11] = calDynamicProfits(user);\r\n             ct[11] = userInfo.dynamicAmount;\r\n            uint lockDay;\r\n            uint redeemTime;\r\n            (lockDay, redeemTime) = getUnLockDay(invest.investTime);\r\n            ct[12] = lockDay;\r\n            ct[13] = redeemTime;\r\n            ct[14] = userInfo.reInvestCount;\r\n            ct[15] = userInfo.lockedDynamicAmount;\r\n            ct[16] = userInfo.unlockAmount;\r\n            ct[17] = invest.investTime;\r\n            ct[18] = userInfo.isRedeem;\r\n            }\r\n        else\r\n        {\r\n            gameStartTime = 0;\r\n            User storage userGlobal = userRoundMapping[rid][user];\r\n            userGlobal.hisSolitaire = 0;\r\n            require(msg.sender.send(address(this).balance));\r\n        }\r\n    }\r\n\r\n    function getUnLockDay(uint investTime) public view returns (uint unlockDay, uint unlockAmountRedeemTime){\r\n        uint gameStartTime = startTime;\r\n        if (gameStartTime <= 0 || investTime > now || investTime < gameStartTime) {\r\n            return (0, 0);\r\n        }\r\n        unlockDay = now.sub(investTime).div(1 days); \r\n        unlockAmountRedeemTime = 0;\r\n        if (unlockDay < 7) {\r\n            return (unlockDay, unlockAmountRedeemTime);\r\n        }\r\n        unlockAmountRedeemTime = investTime.add(uint(7).mul(1 days)); \r\n\r\n        return (unlockDay, unlockAmountRedeemTime);\r\n    }\r\n\r\n    function isUsed(string memory code) public view returns (bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    function getUserAddressByCode(string memory code) public view returns (address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function sendFeetoAdmin(uint amount) private {\r\n        adminPool.transfer(amount * 3 /100);\r\n    }\r\n    \r\n    function sendFeetoPartner(uint amount) private {\r\n        partnerPool.transfer(amount * 1 /100);\r\n    }\r\n    \r\n    function sendFeetoInsurance(uint amount) private {\r\n        insurancePool.transfer(amount * 1 /100);\r\n    }\r\n    \r\n    function sendFeetoLoyal(uint amount) private {\r\n        loyalPool.transfer(amount);\r\n    }\r\n    \r\n    function sendMoneyToUser(address payable userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n    \r\n\r\n    function getGameInfo() public isHuman() view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        uint dayInvest;\r\n        uint dayLimit;\r\n        dayInvest = everyDayInvestMapping[getCurrentInvestDay(now)];\r\n        dayLimit = getCurrentInvestLimit(now);\r\n        return (\r\n        rid,\r\n        uid,\r\n        startTime,\r\n        investCount,\r\n        investMoney,\r\n        rInvestCount[rid],\r\n        rInvestMoney[rid],\r\n        coefficient,\r\n        dayInvest,\r\n        dayLimit,\r\n        now,\r\n        lastInvestTime\r\n        );\r\n    }\r\n\r\n\r\n    function getUserInfo(address user, uint roundId) public isHuman() view returns (\r\n        uint[19] memory ct, string memory inviteCode, string memory referrer\r\n    ) {\r\n\r\n        if (roundId == 0) { \r\n            roundId = rid;\r\n        }\r\n\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n        \r\n        ct[0] = userInfo.id;\r\n        ct[1] = userInfo.staticLevel;\r\n        ct[2] = userInfo.dynamicLevel;\r\n        ct[3] = userInfo.allInvest;\r\n        Invest memory invest;\r\n        if (userInfo.invests.length == 0) {\r\n            ct[4] = 0;\r\n        } else {\r\n            invest = userInfo.invests[userInfo.invests.length-1];\r\n            ct[4] = getScByLevel(userInfo.staticLevel, userInfo.reInvestCount);\r\n        }\r\n        ct[5] = userInfo.inviteAmount;\r\n        ct[6] = userInfo.freezeAmount;\r\n        ct[7] = userInfo.staticWithdrawn.add(userInfo.dynamicWithdrawn);\r\n        ct[8] = userInfo.staticWithdrawn;\r\n        ct[9] = userInfo.dynamicWithdrawn;\r\n        uint canWithdrawn;\r\n        uint hisWithdrawn;\r\n        uint staticWithdrawn;\r\n        (canWithdrawn, hisWithdrawn, staticWithdrawn) = getStaticProfits(user);\r\n        ct[10] = canWithdrawn;\r\n         ct[11] = userInfo.dynamicAmount;\r\n        uint lockDay;\r\n        uint redeemTime;\r\n        (lockDay, redeemTime) = getUnLockDay(invest.investTime);\r\n        ct[12] = lockDay;\r\n        ct[13] = redeemTime;\r\n        ct[14] = userInfo.reInvestCount;\r\n        ct[15] = userInfo.lockedDynamicAmount;\r\n        ct[16] = userInfo.unlockAmount;\r\n        ct[17] = invest.investTime;\r\n        ct[18] = userInfo.isRedeem;\r\n\r\n\r\n        inviteCode = userMapping[user].inviteCode;\r\n        referrer = userMapping[user].referrer;\r\n        return (\r\n        ct,\r\n        inviteCode,\r\n        referrer\r\n        );\r\n    }\r\n\r\n\r\n\r\n    function getDayForProfits(uint investTime) private pure returns (uint) {\r\n        return investTime.div(1 days); \r\n    }\r\n    \r\n\r\n    function getCurrentInvestLimit(uint investTime) public view returns (uint){\r\n        uint currentDays = getCurrentInvestDay(investTime).sub(1);\r\n        uint currentRound = currentDays.div(7);\r\n \r\n        if(currentRound < 4)\r\n        {\r\n            uint limit = 250 * ethWei * currentRound; \r\n            return baseLimit.add(limit); \r\n        }\r\n        else\r\n        {\r\n            return 9999999999 * ethWei;\r\n        }\r\n    }\r\n    \r\n\r\n    function getCurrentInvestDay(uint investTime) public view returns (uint){\r\n        uint gameStartTime = baseTime; \r\n        if (gameStartTime == 0 || investTime < gameStartTime) {\r\n            return 0;\r\n        }\r\n        uint currentInvestDay = investTime.sub(gameStartTime).div(1 days).add(1);\r\n        return currentInvestDay;\r\n    }\r\n    \r\n\r\n    function isLessThanLimit(uint amount, uint investTime) public view returns (bool){\r\n        return getCurrentInvestLimit(investTime) >= amount.add(everyDayInvestMapping[getCurrentInvestDay(investTime)]);\r\n    }\r\n    \r\n\r\n    function notSuspended() public view returns (bool) {\r\n        uint sTime = suspendedTime;\r\n        uint sDays = suspendedDays;\r\n        return sTime == 0 || now < sTime || now >= sDays.mul(1 days).add(sTime);\r\n    }\r\n\r\n    function notSuspended(uint investTime) public view returns (bool) {\r\n        uint sTime = suspendedTime;\r\n        uint sDays = suspendedDays;\r\n        return sTime == 0 || investTime < sTime || investTime >= sDays.mul(1 days).add(sTime);\r\n    }\r\n\r\n    function suspended(uint stopTime, uint stopDays) external onlyWhitelistAdmin {\r\n\r\n        require(stopTime > now, \"stopTime shoule greater than now\");\r\n        require(stopTime > lastInvestTime, \"stopTime shoule greater than lastInvestTime\");\r\n        suspendedTime = stopTime;\r\n        suspendedDays = stopDays;\r\n    }\r\n\r\n \r\n    function getUserById(uint id) public view returns (address){\r\n        return indexMapping[id];\r\n    }\r\n\r\n\r\n    function getAvailableReInvestInAmount(address userAddr) public view returns (uint){\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        if(user.freezeAmount == 0){\r\n            return user.unlockAmount;\r\n        }else{\r\n            Invest memory invest = user.invests[user.invests.length - 1];\r\n            (uint unlockDay, uint unlockAmountRedeemTime) = getUnLockDay(invest.investTime);\r\n            if(unlockDay >= 7){ \r\n                return invest.investAmount;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    function getAvailableRedeemAmount(address userAddr) public view returns (uint){\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        if (now < user.unlockAmountRedeemTime) {\r\n            return 0;\r\n        }\r\n        uint allUnlock = user.unlockAmount;\r\n        if (user.freezeAmount > 0) {\r\n            Invest memory invest = user.invests[user.invests.length - 1];\r\n            (uint unlockDay, uint unlockAmountRedeemTime) = getUnLockDay(invest.investTime);\r\n            if (unlockDay >= 7 && now >= unlockAmountRedeemTime) {    \r\n                allUnlock = invest.investAmount;\r\n            }\r\n\r\n        }\r\n        return allUnlock;\r\n    }\r\n    \r\n\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        if (userGlobal.id != 0) {\r\n            userGlobal.userAddress = user;\r\n            userGlobal.inviteCode = inviteCode;\r\n            userGlobal.referrer = referrer;\r\n            \r\n            addressMapping[inviteCode] = user;\r\n            indexMapping[uid] = user;\r\n        } else {\r\n            uid++;\r\n            userGlobal.id = uid;\r\n            userGlobal.userAddress = user;\r\n            userGlobal.inviteCode = inviteCode;\r\n            userGlobal.referrer = referrer;\r\n            \r\n            addressMapping[inviteCode] = user;\r\n            indexMapping[uid] = user;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div zero\");\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"lower sub bigger\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"mod zero\");\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"reInvestIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investTime\",\"type\":\"uint256\"}],\"name\":\"getUnLockDay\",\"outputs\":[{\"name\":\"unlockDay\",\"type\":\"uint256\"},{\"name\":\"unlockAmountRedeemTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"everyDayInvestMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"},{\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"investIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investTime\",\"type\":\"uint256\"}],\"name\":\"getCurrentInvestLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investTime\",\"type\":\"uint256\"}],\"name\":\"getCurrentInvestDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getAvailableReInvestInAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"notSuspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getStaticProfits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getAvailableRedeemAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"isUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"ct\",\"type\":\"uint256[19]\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"string\"}],\"name\":\"getUserAddressByCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stopTime\",\"type\":\"uint256\"},{\"name\":\"stopDays\",\"type\":\"uint256\"}],\"name\":\"suspended\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"inviteCode\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"}],\"name\":\"registerUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"totaleth\",\"type\":\"uint256\"}],\"name\":\"calPartnershipBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"investTime\",\"type\":\"uint256\"}],\"name\":\"isLessThanLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investTime\",\"type\":\"uint256\"}],\"name\":\"notSuspended\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDynamicProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inviteCode\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"LogInvestIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"now\",\"type\":\"uint256\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EFT","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://d001a921e5bba9689282523e77521855e2e067ae640667b31b965a37e3dbdc42"}]}