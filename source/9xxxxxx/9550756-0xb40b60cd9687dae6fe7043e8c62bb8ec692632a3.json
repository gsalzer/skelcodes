{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/LoihiExchange.sol\npragma solidity >0.4.13 >=0.4.23 >=0.5.0 <0.6.0 >=0.5.12 <0.6.0 >=0.5.15 <0.6.0;\n\n////// lib/ds-math/src/math.sol\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity >0.4.13; */\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n////// src/LoihiDelegators.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.15; */\n\ncontract LoihiDelegators {\n\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize)\n            }\n        }\n        return returnData;\n    }\n\n    function staticTo(address callee, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returnData) = callee.staticcall(data);\n        assembly {\n            if eq(success, 0) {\n                revert(add(returnData, 0x20), returndatasize)\n            }\n        }\n        return returnData;\n    }\n\n\n    function dViewRawAmount (address addr, uint256 amount) internal view returns (uint256) {\n        bytes memory result = staticTo(addr, abi.encodeWithSelector(0x049ca270, amount)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dViewNumeraireAmount (address addr, uint256 amount) internal view returns (uint256) {\n        bytes memory result = staticTo(addr, abi.encodeWithSelector(0xf5e6c0ca, amount)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dViewNumeraireBalance (address addr, address _this) internal view returns (uint256) {\n        bytes memory result = staticTo(addr, abi.encodeWithSelector(0xac969a73, _this)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dGetNumeraireAmount (address addr, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0xb2e87f0f, amount)); // encoded selector of \"getNumeraireAmount(uint256\");\n        return abi.decode(result, (uint256));\n    }\n\n    function dGetNumeraireBalance (address addr) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0x10df6430)); // encoded selector of \"getNumeraireBalance()\";\n        return abi.decode(result, (uint256));\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions for retrieving and transfering numeraire and raw values and vice versa\n    /// @param addr the address to the interface wrapper to be delegatecall'd\n    /// @param amount the numeraire amount to be transfered into the contract. will be adjusted to the raw amount before transfer\n    function dIntakeRaw (address addr, uint256 amount) internal {\n        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0xfa00102a, amount)); // encoded selector of \"intakeRaw(uint256)\";\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions for retrieving and transfering numeraire and raw values and vice versa\n    /// @param addr the address to the interface wrapper to be delegatecall'd\n    /// @param amount the numeraire amount to be transfered into the contract. will be adjusted to the raw amount before transfer\n    function dIntakeNumeraire (address addr, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0x7695ab51, amount)); // encoded selector of \"intakeNumeraire(uint256)\";\n        return abi.decode(result, (uint256));\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions for retrieving and transfering numeraire and raw values and vice versa\n    /// @param addr the address of the interface wrapper to be delegatecall'd\n    /// @param dst the destination to which to send the raw amount\n    /// @param amount the raw amount of the asset to send\n    function dOutputRaw (address addr, address dst, uint256 amount) internal {\n        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0xf09a3fc3, dst, amount)); // encoded selector of \"outputRaw(address,uint256)\";\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @dev this function delegate calls addr, which is an interface to the required functions to retrieve the numeraire and raw values and vice versa\n    /// @param addr address of the interface wrapper\n    /// @param dst the destination to send the raw amount to\n    /// @param amount the numeraire amount of the asset to be sent. this will be adjusted to the corresponding raw amount\n    /// @return the raw amount of the asset that was transfered\n    function dOutputNumeraire (address addr, address dst, uint256 amount) internal returns (uint256) {\n        bytes memory result = delegateTo(addr, abi.encodeWithSelector(0xef40df22, dst, amount)); // encoded selector of \"outputNumeraire(address,uint256)\";\n        return abi.decode(result, (uint256));\n    }\n}\n////// src/LoihiRoot.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.15; */\n\n/* import \"ds-math/math.sol\"; */\n\ncontract LoihiRoot is DSMath {\n\n\n    string  public constant name = \"Shells\";\n    string  public constant symbol = \"SHL\";\n    uint8   public constant decimals = 18;\n\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowances;\n    uint256 public totalSupply;\n\n    mapping(address => Flavor) public flavors;\n    address[] public reserves;\n    address[] public numeraires;\n    struct Flavor { address adapter; address reserve; uint256 weight; }\n\n    address public owner;\n    bool internal notEntered = true;\n    bool internal frozen = false;\n\n    uint256 alpha;\n    uint256 beta;\n    uint256 feeBase;\n    uint256 feeDerivative;\n\n    bytes4 constant internal ERC20ID = 0x36372b07;\n    bytes4 constant internal ERC165ID = 0x01ffc9a7;\n\n    address internal constant exchange = 0x179117cfD46D8D7e2EA873A63A113B0e0136C45D;\n    address internal constant views = 0xdB264f3b85F838b1E1cAC5F160E9eb1dD8644BA7;\n    address internal constant liquidity = 0x1C0024bDeA446F82a2Eb3C6DC9241AAFe2Cbbc0B;\n    address internal constant erc20 = 0x2d5cBAB179Be33Ade692A1C95908AD5d556E2c65;\n\n    event ShellsMinted(address indexed minter, uint256 amount, address[] indexed coins, uint256[] amounts);\n    event ShellsBurned(address indexed burner, uint256 amount, address[] indexed coins, uint256[] amounts);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Trade(address indexed trader, address indexed origin, address indexed target, uint256 originAmount, uint256 targetAmount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    modifier nonReentrant() {\n        require(notEntered, \"re-entered\");\n        notEntered = false;\n        _;\n        notEntered = true;\n    }\n\n    modifier notFrozen () {\n        require(!frozen, \"swaps, selective deposits and selective withdraws have been frozen.\");\n        _;\n    }\n\n}\n////// src/LoihiExchange.sol\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity ^0.5.15; */\n\n/* import \"./LoihiRoot.sol\"; */\n/* import \"./LoihiDelegators.sol\"; */\n\ncontract LoihiExchange is LoihiRoot, LoihiDelegators {\n\n    /// @author james foley http://github.com/realisation\n    /// @notice given an origin amount this function will find the corresponding target amount according to the contracts state and make the swap between the two\n    /// @param _origin the address of the origin flavor\n    /// @param _target the address of the target flavor\n    /// @param _oAmt the raw amount of the origin flavor - will be converted to numeraire amount\n    /// @param _minTAmt the minimum target amount you are willing to accept for this trade\n    /// @param _deadline the block by which this transaction is no longer valid\n    /// @param _recipient the address for where to send the resultant target amount\n    /// @return tNAmt_ the target numeraire amount\n    function executeOriginTrade (address _origin, address _target, uint256 _oAmt, uint256 _minTAmt, uint256 _deadline, address _recipient) external returns (uint256) {\n\n        Flavor memory _o = flavors[_origin]; // origin adapter + weight\n        Flavor memory _t = flavors[_target]; // target adapter + weight\n\n        require(_o.adapter != address(0), \"origin flavor not supported\");\n        require(_t.adapter != address(0), \"target flavor not supported\");\n\n        ( uint256 _NAmt,\n          uint256 _oBal,\n          uint256 _tBal,\n          uint256 _grossLiq ) = getOriginTradeVariables(_o, _t, _oAmt);\n\n        _NAmt = calculateOriginTradeOriginAmount(_o.weight, _oBal, _NAmt, _grossLiq);\n        _NAmt = calculateOriginTradeTargetAmount(_t.weight, _tBal, _NAmt, _grossLiq);\n\n        require(dViewRawAmount(_t.adapter, _NAmt) >= _minTAmt, \"target amount is less than minimum target amount\");\n\n        dIntakeRaw(_o.adapter, _oAmt);\n        uint256 tAmt_ = dOutputNumeraire(_t.adapter, _recipient, _NAmt);\n\n        emit Trade(msg.sender, _origin, _target, _oAmt, tAmt_);\n\n        return tAmt_;\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice builds the relevant variables for a target trade\n    /// @param _o the record for the origin flavor containing the address of its adapter and its reserve\n    /// @param _t the record for the target flavor containing the address of its adapter and its reserve\n    /// @param _oAmt the raw amount of the origin flavor to be converted into numeraire\n    /// @return NAmt_ the numeraire amount of the trade before origin and target fees are applied\n    /// @return oBal_ the new origin numeraire balance including the origin numeraire amount\n    /// @return tBal_ the current numereraire balance of the contracts reserve for the target\n    /// @return grossLiq_ total numeraire value across all reserves in the contract\n    function getOriginTradeVariables (Flavor memory _o, Flavor memory _t, uint256 _oAmt) private returns (uint, uint, uint, uint) {\n\n        uint oNAmt_ = dGetNumeraireAmount(_o.adapter, _oAmt);\n        uint oBal_ = dGetNumeraireBalance(_o.adapter);\n        uint tBal_ = dGetNumeraireBalance(_t.adapter);\n        uint grossLiq_ = add(oBal_, tBal_);\n        oBal_ = add(oBal_, oNAmt_);\n\n        for (uint i = 0; i < reserves.length; i++) {\n            if (reserves[i] != _o.reserve && reserves[i] != _t.reserve){\n                grossLiq_ += dGetNumeraireBalance(reserves[i]);\n            }\n        }\n\n        return (oNAmt_, oBal_, tBal_, grossLiq_);\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice calculates the origin amount in an origin trade including the fees\n    /// @param _oWeight the balance weighting of the origin flavor\n    /// @param _oBal the new numeraire balance of the origin reserve including the origin amount being swapped\n    /// @param _oNAmt the origin numeraire amount being swapped\n    /// @param _grossLiq the numeraire amount across all stablecoin reserves in the contract\n    /// @return oNAmt_ the origin numeraire amount for the swap with fees applied\n    function calculateOriginTradeOriginAmount (uint256 _oWeight, uint256 _oBal, uint256 _oNAmt, uint256 _grossLiq) private view returns (uint256) {\n\n        require(_oBal <= wmul(_oWeight, wmul(_grossLiq, alpha + WAD)), \"origin swap origin halt check\");\n\n        uint256 oNAmt_;\n\n        uint256 _feeThreshold = wmul(_oWeight, wmul(_grossLiq, beta + WAD));\n        if (_oBal <= _feeThreshold) {\n\n            oNAmt_ = _oNAmt;\n\n        } else if (sub(_oBal, _oNAmt) >= _feeThreshold) {\n\n            uint256 _fee = wdiv(\n                sub(_oBal, _feeThreshold),\n                wmul(_oWeight, _grossLiq)\n            );\n            _fee = wmul(_fee, feeDerivative);\n            oNAmt_ = wmul(_oNAmt, WAD - _fee);\n\n        } else {\n\n            uint256 _fee = wmul(feeDerivative, wdiv(\n                sub(_oBal, _feeThreshold),\n                wmul(_oWeight, _grossLiq)\n            ));\n\n            oNAmt_ = add(\n                sub(_feeThreshold, sub(_oBal, _oNAmt)),\n                wmul(sub(_oBal, _feeThreshold), WAD - _fee)\n            );\n\n        }\n\n        return oNAmt_;\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice calculates the fees to apply to the target amount in an origin trade\n    /// @param _tWeight the balance weighting of the target flavor\n    /// @param _tBal the current balance of the target in the reserve\n    /// @param _grossLiq the current total balance across all the reserves in the contract\n    /// @return tNAmt_ the target numeraire amount including any applied fees\n    function calculateOriginTradeTargetAmount (uint256 _tWeight, uint256 _tBal, uint256 _tNAmt, uint256 _grossLiq) private view returns (uint256 tNAmt_) {\n\n\n        uint256 _feeThreshold = wmul(_tWeight, wmul(_grossLiq, WAD - beta));\n        if (sub(_tBal, _tNAmt) >= _feeThreshold) {\n\n            tNAmt_ = wmul(_tNAmt, WAD - feeBase);\n\n        } else if (_tBal <= _feeThreshold) {\n\n            uint256 _fee = wdiv(\n                sub(_feeThreshold, sub(_tBal, _tNAmt)),\n                wmul(_tWeight, _grossLiq)\n            );\n\n            _fee = wmul(_fee, feeDerivative);\n            _tNAmt = wmul(_tNAmt, WAD - _fee);\n            tNAmt_ = wmul(_tNAmt, WAD - feeBase);\n\n        } else {\n\n            uint256 _fee = wmul(feeDerivative, wdiv(\n                sub(_feeThreshold, sub(_tBal, _tNAmt)),\n                wmul(_tWeight, _grossLiq)\n            ));\n            tNAmt_ = wmul(add(\n                sub(_tBal, _feeThreshold),\n                wmul(sub(_feeThreshold, sub(_tBal, _tNAmt)), WAD - _fee)\n            ), WAD - feeBase);\n\n        }\n\n        require(sub(_tBal, tNAmt_) >= wmul(_tWeight, wmul(_grossLiq, WAD - alpha)), \"origin swap target halt check\");\n\n        return tNAmt_;\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice given an amount of the target currency this function will derive the corresponding origin amount according to the current state of the contract\n    /// @param _origin the address of the origin stablecoin flavor\n    /// @param _target the address of the target stablecoin flavor\n    /// @param _maxOAmt the highest amount of the origin stablecoin flavor you are willing to trade\n    /// @param _tAmt the raw amount of the target stablecoin flavor to be converted into numeraire amount\n    /// @param _deadline the block number at which this transaction is no longer valid\n    /// @param _recipient the address for where to send the target amount\n    function executeTargetTrade (address _origin, address _target, uint256 _maxOAmt, uint256 _tAmt, uint256 _deadline, address _recipient) external returns (uint256) {\n        require(_deadline >= now, \"deadline has passed for this trade\");\n\n        Flavor memory _o = flavors[_origin];\n        Flavor memory _t = flavors[_target];\n\n        require(_o.adapter != address(0), \"origin flavor not supported\");\n        require(_t.adapter != address(0), \"target flavor not supported\");\n\n        ( uint256 _NAmt,\n          uint256 _oBal,\n          uint256 _tBal,\n          uint256 _grossLiq ) = getTargetTradeVariables(_o, _t, _tAmt) ;\n\n        _NAmt = calculateTargetTradeTargetAmount(_t.weight, _tBal, _NAmt, _grossLiq);\n        _NAmt = calculateTargetTradeOriginAmount(_o.weight, _oBal, _NAmt, _grossLiq);\n        \n        require(dViewRawAmount(_o.adapter, _NAmt) <= _maxOAmt, \"origin amount is greater than max origin amount\");\n\n        dOutputRaw(_t.adapter, _recipient, _tAmt);\n        uint256 oAmt_ = dIntakeNumeraire(_o.adapter, _NAmt);\n\n        emit Trade(msg.sender, _origin, _target, oAmt_, _tAmt);\n\n        return oAmt_;\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice builds the relevant variables for the target trade. total liquidity, numeraire amounts and new balances\n    /// @param _o the record of the origin flavor containing its adapter and reserve address\n    /// @param _t the record of the target flavor containing its adapter and reserve address\n    /// @param _tAmt the raw target amount to be converted into numeraire amount\n    /// @return NAmt_ numeraire amount for trade before target and origin fees are applied\n    /// @return tBal_ the new numeraire balance of the target\n    /// @return oBal_ the numeraire balance of the origin\n    /// @return grossLiq_ the total liquidity in all the reserves of the pool\n    function getTargetTradeVariables (Flavor memory _o, Flavor memory _t, uint256 _tAmt) private returns (uint, uint, uint, uint) {\n\n        uint tNAmt_ = dGetNumeraireAmount(_t.adapter, _tAmt);\n        uint tBal_ = dGetNumeraireBalance(_t.adapter);\n        uint oBal_ = dGetNumeraireBalance(_o.adapter);\n        uint grossLiq_ = add(tBal_, oBal_);\n        tBal_ = sub(tBal_, tNAmt_);\n\n        for (uint i = 0; i < reserves.length; i++) {\n            if (reserves[i] != _o.reserve && reserves[i] != _t.reserve) {\n                grossLiq_ += dGetNumeraireBalance(reserves[i]);\n            }\n        }\n\n        return (tNAmt_, oBal_, tBal_, grossLiq_);\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice this function applies fees to the target amount according to how balanced it is relative to its weight\n    /// @param _tWeight the weighted balance point of the target token\n    /// @param _tBal the contract's balance of the target\n    /// @param _tNAmt the numeraire value of the target amount being traded\n    /// @param _grossLiq the total numeraire value of all liquidity across all the reserves of the contract\n    /// @return tNAmt_ the target numeraire amount after applying fees\n    function calculateTargetTradeTargetAmount(uint256 _tWeight, uint256 _tBal, uint256 _tNAmt, uint256 _grossLiq) private view returns (uint256 tNAmt_) {\n\n        require(_tBal >= wmul(_tWeight, wmul(_grossLiq, WAD - alpha)), \"target halt check for target trade\");\n\n        uint256 _feeThreshold = wmul(_tWeight, wmul(_grossLiq, WAD - beta));\n\n        if (_tBal >= _feeThreshold) {\n\n            tNAmt_ = wmul(_tNAmt, WAD + feeBase);\n\n        } else if (add(_tBal, _tNAmt) <= _feeThreshold) {\n\n            uint256 _fee = wdiv(sub(_feeThreshold, _tBal), wmul(_tWeight, _grossLiq));\n            _fee = wmul(_fee, feeDerivative);\n            _tNAmt = wmul(_tNAmt, WAD + _fee);\n            tNAmt_ = wmul(_tNAmt, WAD + feeBase);\n\n        } else {\n\n            uint256 _fee = wmul(feeDerivative, wdiv(\n                    sub(_feeThreshold, _tBal),\n                    wmul(_tWeight, _grossLiq)\n            ));\n\n            _tNAmt = add(\n                sub(add(_tBal, _tNAmt), _feeThreshold),\n                wmul(sub(_feeThreshold, _tBal), WAD + _fee)\n            );\n\n            tNAmt_ = wmul(_tNAmt, WAD + feeBase);\n\n        }\n\n        return tNAmt_;\n\n    }\n\n    /// @author james foley http://github.com/realisation\n    /// @notice this function applies fees to the origin amount according to how balanced it is relative to its weight\n    /// @param _oWeight the weighted balance point of the origin token\n    /// @param _oBal the contract's balance of the origin\n    /// @param _oNAmt the numeraire value for the origin amount being traded\n    /// @param _grossLiq the total numeraire value of all liquidity across all the reserves of the contract\n    /// @return oNAmt_ the origin numeraire amount after applying fees\n    function calculateTargetTradeOriginAmount (uint256 _oWeight, uint256 _oBal, uint256 _oNAmt, uint256 _grossLiq) private view returns (uint256 oNAmt_) {\n\n\n        uint256 _feeThreshold = wmul(_oWeight, wmul(_grossLiq, WAD + beta));\n        if (_oBal + _oNAmt <= _feeThreshold) {\n\n            oNAmt_ = _oNAmt;\n\n        } else if (_oBal >= _feeThreshold) {\n\n            uint256 _fee = wdiv(\n                sub(add(_oNAmt, _oBal), _feeThreshold),\n                wmul(_oWeight, _grossLiq)\n            );\n            _fee = wmul(_fee, feeDerivative);\n            oNAmt_ = wmul(_oNAmt, WAD + _fee);\n\n        } else {\n\n            uint256 _fee = wmul(feeDerivative, wdiv(\n                sub(add(_oBal, _oNAmt), _feeThreshold),\n                wmul(_oWeight, _grossLiq)\n            ));\n\n            oNAmt_ = add(\n                sub(_feeThreshold, _oBal),\n                wmul(sub(add(_oBal, _oNAmt), _feeThreshold), WAD + _fee)\n            );\n\n        }\n\n        require(add(_oBal, oNAmt_) <= wmul(_oWeight, wmul(_grossLiq, WAD + alpha)), \"origin halt check for target trade\");\n\n        return oNAmt_;\n\n    }\n\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ShellsBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"coins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ShellsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"executeOriginTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxOAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"executeTargetTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flavors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numeraires\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LoihiExchange","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}