{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-02-06\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\r\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\r\n    function swapTokenToToken(address _src, address _dest, uint _amount) external payable returns(uint);\r\n\r\n    function getExpectedRate(address src, address dest, uint srcQty) external view\r\n        returns (uint expectedRate);\r\n}\r\n\r\ncontract SaverLogger {\r\n    event Repay(uint indexed cdpId, address indexed owner, uint collateralAmount, uint daiAmount);\r\n    event Boost(uint indexed cdpId, address indexed owner, uint daiAmount, uint collateralAmount);\r\n\r\n    function LogRepay(uint _cdpId, address _owner, uint _collateralAmount, uint _daiAmount) public {\r\n        emit Repay(_cdpId, _owner, _collateralAmount, _daiAmount);\r\n    }\r\n\r\n    function LogBoost(uint _cdpId, address _owner, uint _daiAmount, uint _collateralAmount) public {\r\n        emit Boost(_cdpId, _owner, _daiAmount, _collateralAmount);\r\n    }\r\n}\r\n\r\ncontract Discount {\r\n\r\n    address public owner;\r\n    mapping (address => CustomServiceFee) public serviceFees;\r\n\r\n    uint constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint amount;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\r\n\r\n        serviceFees[_user] = CustomServiceFee({\r\n            active: true,\r\n            amount: _fee\r\n        });\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({\r\n            active: false,\r\n            amount: 0\r\n        });\r\n    }\r\n}\r\n\r\ncontract PipInterface {\r\n    function read() public returns (bytes32);\r\n}\r\n\r\ncontract Spotter {\r\n    struct Ilk {\r\n        PipInterface pip;\r\n        uint256 mat;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    uint256 public par;\r\n\r\n}\r\n\r\ncontract Jug {\r\n    struct Ilk {\r\n        uint256 duty;\r\n        uint256  rho;\r\n    }\r\n\r\n    mapping (bytes32 => Ilk) public ilks;\r\n\r\n    function drip(bytes32) public returns (uint);\r\n}\r\n\r\ncontract Vat {\r\n\r\n    struct Urn {\r\n        uint256 ink;   \r\n        uint256 art;   \r\n    }\r\n\r\n    struct Ilk {\r\n        uint256 Art;   \r\n        uint256 rate;  \r\n        uint256 spot;  \r\n        uint256 line;  \r\n        uint256 dust;  \r\n    }\r\n\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n\r\n    function can(address, address) public view returns (uint);\r\n    function dai(address) public view returns (uint);\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\ncontract Gem {\r\n    function dec() public returns (uint);\r\n    function gem() public returns (Gem);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n    function allowance(address, address) public returns (uint);\r\n}\r\n\r\ncontract DaiJoin {\r\n    function vat() public returns (Vat);\r\n    function dai() public returns (Gem);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract TokenInterface {\r\n    function allowance(address, address) public returns (uint);\r\n    function balanceOf(address) public returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract SaverExchangeInterface {\r\n    function getBestPrice(uint _amount, address _srcToken, address _destToken, uint _exchangeType) public view returns (address, uint);\r\n}\r\n\r\ncontract ConstantAddressesExchange {\r\n    address public constant MAKER_DAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant MKR_ADDRESS = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\r\n    address public constant LOGGER_ADDRESS = 0xeCf88e1ceC2D2894A0295DB3D86Fe7CE4991E6dF;\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n\r\n    address public constant GAS_TOKEN_INTERFACE_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\r\n    address public constant SAVER_EXCHANGE_ADDRESS = 0xC8A48a440315d63d3da8E2d2030f6F6fC6701811;\r\n\r\n    \r\n    address public constant MANAGER_ADDRESS = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public constant PROXY_ACTIONS = 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\r\n\r\n    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public constant ETH_JOIN_ADDRESS = 0x2F0b23f53734252Bda2277357e97e1517d6B042A;\r\n    address public constant MIGRATION_ACTIONS_PROXY = 0xe4B22D484958E582098A98229A24e8A43801b674;\r\n\r\n    address public constant SAI_ADDRESS = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address payable public constant SCD_MCD_MIGRATION = 0xc73e0383F3Aff3215E6f04B0331D58CeCf0Ab849;\r\n    \r\n    address public constant NEW_IDAI_ADDRESS = 0x493C57C4763932315A328269E1ADaD09653B9081;\r\n    \r\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n}\r\n\r\ncontract ExchangeHelper is ConstantAddressesExchange {\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function swap(uint[4] memory _data, address _src, address _dest, address _exchangeAddress, bytes memory _callData) internal returns (uint) {\r\n        address wrapper;\r\n        uint price;\r\n        uint tokensReturned;\r\n        bool success;\r\n\r\n        _src = wethToKyberEth(_src);\r\n        _dest = wethToKyberEth(_dest);\r\n\r\n        \r\n        if (_data[2] == 4) {\r\n            if (_src != KYBER_ETH_ADDRESS) {\r\n                ERC20(_src).approve(address(ERC20_PROXY_0X), _data[0]);\r\n            }\r\n\r\n            (success, tokensReturned) = takeOrder(_exchangeAddress, _callData, address(this).balance, _dest);\r\n\r\n            \r\n            require(success && tokensReturned > 0, \"0x transaction failed\");\r\n        }\r\n\r\n        if (tokensReturned == 0) {\r\n            (wrapper, price) = SaverExchangeInterface(SAVER_EXCHANGE_ADDRESS).getBestPrice(_data[0], _src, _dest, _data[2]);\r\n\r\n            require(price > _data[1] || _data[3] > _data[1], \"Slippage hit\");\r\n\r\n            \r\n            if (_data[3] >= price) {\r\n                if (_src != KYBER_ETH_ADDRESS) {\r\n                    ERC20(_src).approve(address(ERC20_PROXY_0X), _data[0]);\r\n                }\r\n                (success, tokensReturned) = takeOrder(_exchangeAddress, _callData, address(this).balance, _dest);\r\n            }\r\n\r\n            if (tokensReturned == 0) {\r\n                require(price > _data[1], \"Slippage hit onchain price\");\r\n                if (_src == KYBER_ETH_ADDRESS) {\r\n                    (tokensReturned,) = ExchangeInterface(wrapper).swapEtherToToken.value(_data[0])(_data[0], _dest, uint(-1));\r\n                } else {\r\n                    ERC20(_src).transfer(wrapper, _data[0]);\r\n\r\n                    if (_dest == KYBER_ETH_ADDRESS) {\r\n                        tokensReturned = ExchangeInterface(wrapper).swapTokenToEther(_src, _data[0], uint(-1));\r\n                    } else {\r\n                        tokensReturned = ExchangeInterface(wrapper).swapTokenToToken(_src, _dest, _data[0]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return tokensReturned;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function takeOrder(address _exchange, bytes memory _data, uint _value, address _dest) private returns(bool, uint) {\r\n        bool success;\r\n\r\n        (success, ) = _exchange.call.value(_value)(_data);\r\n\r\n        uint tokensReturned = 0;\r\n        if (success){\r\n            if (_dest == KYBER_ETH_ADDRESS) {\r\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\r\n                tokensReturned = address(this).balance;\r\n            } else {\r\n                tokensReturned = ERC20(_dest).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        return (success, tokensReturned);\r\n    }\r\n\r\n    \r\n    \r\n    function wethToKyberEth(address _src) internal pure returns (address) {\r\n        return _src == WETH_ADDRESS ? KYBER_ETH_ADDRESS : _src;\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint              wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache;  \r\n\r\n    constructor(address _cacheAddr) public {\r\n        require(setCache(_cacheAddr));\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    \r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        returns (address target, bytes32 response)\r\n    {\r\n        target = cache.read(_code);\r\n        if (target == address(0)) {\r\n            \r\n            target = cache.write(_code);\r\n        }\r\n\r\n        response = execute(target, _data);\r\n    }\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        auth\r\n        note\r\n        payable\r\n        returns (bytes32 response)\r\n    {\r\n        require(_target != address(0));\r\n\r\n        \r\n        assembly {\r\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\r\n            response := mload(0)      \r\n            switch iszero(succeeded)\r\n            case 1 {\r\n                \r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function setCache(address _cacheAddr)\r\n        public\r\n        payable\r\n        auth\r\n        note\r\n        returns (bool)\r\n    {\r\n        require(_cacheAddr != address(0));        \r\n        cache = DSProxyCache(_cacheAddr);  \r\n        return true;\r\n    }\r\n}\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n            case 1 {\r\n                \r\n                revert(0, 0)\r\n            }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\ncontract Manager {\r\n    function last(address) public returns (uint);\r\n    function cdpCan(address, uint, address) public view returns (uint);\r\n    function ilks(uint) public view returns (bytes32);\r\n    function owns(uint) public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function vat() public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function give(uint, address) public;\r\n    function cdpAllow(uint, address, uint) public;\r\n    function urnAllow(address, uint) public;\r\n    function frob(uint, int, int) public;\r\n    function flux(uint, address, uint) public;\r\n    function move(uint, address, uint) public;\r\n    function exit(address, uint, address, uint) public;\r\n    function quit(uint, address) public;\r\n    function enter(address, uint) public;\r\n    function shift(uint, uint) public;\r\n}\r\n\r\ncontract Join {\r\n    bytes32 public ilk;\r\n\r\n    function dec() public returns (uint);\r\n    function gem() public returns (Gem);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract SaverProxyHelper is DSMath {\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\r\n        if (_daiVatBalance < mul(_amount, RAY)) {\r\n            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\r\n            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    function toRad(uint _wad) internal pure returns (uint) {\r\n        return mul(_wad, 10 ** 27);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function convertTo18(address _joinAddr, uint256 _amount) internal returns (uint256) {\r\n        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\r\n    }\r\n\r\n    \r\n    \r\n    function toPositiveInt(uint _x) internal pure returns (int y) {\r\n        y = int(_x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\r\n        uint dai = Vat(_vat).dai(_urn);\r\n\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n\r\n        amount = toPositiveInt(dai / rate);\r\n        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\r\n        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\r\n        (, uint art) = Vat(_vat).urns(_ilk, _urn);\r\n        uint dai = Vat(_vat).dai(_usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        daiAmount = rad / RAY;\r\n\r\n        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\r\n    }\r\n\r\n    \r\n    \r\n    function getCollateralAddr(address _joinAddr) internal returns (address) {\r\n        return address(Join(_joinAddr).gem());\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\r\n        address vat = _manager.vat();\r\n        address urn = _manager.urns(_cdpId);\r\n\r\n        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\r\n        (,uint rate,,,) = Vat(vat).ilks(_ilk);\r\n\r\n        return (collateral, rmul(debt, rate));\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\r\n        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\r\n\r\n        return proxy.owner();\r\n    }\r\n}\r\n\r\ncontract MCDSaverProxy is SaverProxyHelper, ExchangeHelper {\r\n\r\n    uint public constant SERVICE_FEE = 400; \r\n    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\r\n\r\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\r\n    Vat public constant vat = Vat(VAT_ADDRESS);\r\n    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\r\n    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\r\n\r\n    \r\n    \r\n    modifier boostCheck(uint _cdpId) {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n        address urn = manager.urns(_cdpId);\r\n\r\n        (uint collateralBefore, ) = vat.urns(ilk, urn);\r\n\r\n        _;\r\n\r\n        (uint collateralAfter, ) = vat.urns(ilk, urn);\r\n\r\n        require(collateralAfter > collateralBefore);\r\n    }\r\n\r\n    \r\n    \r\n    modifier repayCheck(uint _cdpId) {\r\n        bytes32 ilk = manager.ilks(_cdpId);\r\n\r\n        uint beforeRatio = getRatio(_cdpId, ilk);\r\n\r\n        _;\r\n\r\n        uint afterRatio = getRatio(_cdpId, ilk);\r\n\r\n        require(afterRatio > beforeRatio || afterRatio == 0);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function repay(\r\n        \r\n        uint[6] memory _data,\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData\r\n    ) public payable repayCheck(_data[0]) {\r\n\r\n        address owner = getOwner(manager, _data[0]);\r\n        bytes32 ilk = manager.ilks(_data[0]);\r\n\r\n        \r\n        \r\n        \r\n        uint[3] memory temp;\r\n\r\n        temp[0] = drawCollateral(_data[0], ilk, _joinAddr, _data[1]);\r\n\r\n                                \r\n        uint[4] memory swapData = [temp[0], _data[2], _data[3], _data[5]];\r\n        temp[1] = swap(swapData, getCollateralAddr(_joinAddr), DAI_ADDRESS, _exchangeAddress, _callData);\r\n        temp[2] = sub(temp[1], getFee(temp[1], _data[4], owner));\r\n\r\n        paybackDebt(_data[0], ilk, temp[2], owner);\r\n\r\n        SaverLogger(LOGGER_ADDRESS).LogRepay(_data[0], owner, temp[0], temp[1]);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function boost(\r\n        \r\n        uint[6] memory _data,\r\n        address _joinAddr,\r\n        address _exchangeAddress,\r\n        bytes memory _callData\r\n    ) public payable boostCheck(_data[0]) {\r\n        address owner = getOwner(manager, _data[0]);\r\n        bytes32 ilk = manager.ilks(_data[0]);\r\n\r\n        \r\n        \r\n        \r\n        uint[3] memory temp;\r\n\r\n        temp[0] = drawDai(_data[0], ilk, _data[1]);\r\n        temp[1] = sub(temp[0], getFee(temp[0], _data[4], owner));\r\n                                \r\n        uint[4] memory swapData = [temp[1], _data[2], _data[3], _data[5]];\r\n        temp[2] = swap(swapData, DAI_ADDRESS, getCollateralAddr(_joinAddr), _exchangeAddress, _callData);\r\n\r\n        addCollateral(_data[0], _joinAddr, temp[2]);\r\n\r\n        SaverLogger(LOGGER_ADDRESS).LogBoost(_data[0], owner, temp[0], temp[2]);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function drawDai(uint _cdpId, bytes32 _ilk, uint _daiAmount) internal returns (uint) {\r\n        uint rate = Jug(JUG_ADDRESS).drip(_ilk);\r\n        uint daiVatBalance = vat.dai(manager.urns(_cdpId));\r\n\r\n        uint maxAmount = getMaxDebt(_cdpId, _ilk);\r\n\r\n        if (_daiAmount >= maxAmount) {\r\n            _daiAmount = sub(maxAmount, 1);\r\n        }\r\n\r\n        manager.frob(_cdpId, int(0), normalizeDrawAmount(_daiAmount, rate, daiVatBalance));\r\n        manager.move(_cdpId, address(this), toRad(_daiAmount));\r\n\r\n        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\r\n            vat.hope(DAI_JOIN_ADDRESS);\r\n        }\r\n\r\n        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\r\n\r\n        return _daiAmount;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function addCollateral(uint _cdpId, address _joinAddr, uint _amount) internal {\r\n        int convertAmount = 0;\r\n\r\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\r\n            Join(_joinAddr).gem().deposit.value(_amount)();\r\n            convertAmount = toPositiveInt(_amount);\r\n        } else {\r\n            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\r\n        }\r\n\r\n        Join(_joinAddr).gem().approve(_joinAddr, _amount);\r\n        Join(_joinAddr).join(address(this), _amount);\r\n\r\n        vat.frob(\r\n            manager.ilks(_cdpId),\r\n            manager.urns(_cdpId),\r\n            address(this),\r\n            address(this),\r\n            convertAmount,\r\n            0\r\n        );\r\n\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function drawCollateral(uint _cdpId, bytes32 _ilk, address _joinAddr, uint _amount) internal returns (uint) {\r\n        uint maxCollateral = getMaxCollateral(_cdpId, _ilk);\r\n\r\n        if (_amount >= maxCollateral) {\r\n            _amount = sub(maxCollateral, 1);\r\n        }\r\n\r\n        manager.frob(_cdpId, -toPositiveInt(_amount), 0);\r\n        manager.flux(_cdpId, address(this), _amount);\r\n\r\n        Join(_joinAddr).exit(address(this), _amount);\r\n\r\n        if (_joinAddr == ETH_JOIN_ADDRESS) {\r\n            Join(_joinAddr).gem().withdraw(_amount); \r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    function paybackDebt(uint _cdpId, bytes32 _ilk, uint _daiAmount, address _owner) internal {\r\n        address urn = manager.urns(_cdpId);\r\n\r\n        uint wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\r\n\r\n        if (_daiAmount > wholeDebt) {\r\n            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\r\n            _daiAmount = wholeDebt;\r\n        }\r\n\r\n        daiJoin.dai().approve(DAI_JOIN_ADDRESS, _daiAmount);\r\n        daiJoin.join(urn, _daiAmount);\r\n\r\n        manager.frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function getFee(uint _amount, uint _gasCost, address _owner) internal returns (uint feeAmount) {\r\n        uint fee = SERVICE_FEE;\r\n\r\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_owner)) {\r\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_owner);\r\n        }\r\n\r\n        feeAmount = (fee == 0) ? 0 : (_amount / fee);\r\n\r\n        if (_gasCost != 0) {\r\n            uint ethDaiPrice = getPrice(ETH_ILK);\r\n            _gasCost = rmul(_gasCost, ethDaiPrice);\r\n\r\n            feeAmount = add(feeAmount, _gasCost);\r\n        }\r\n\r\n        \r\n        if (feeAmount > (_amount / 5)) {\r\n            feeAmount = _amount / 5;\r\n        }\r\n\r\n        ERC20(DAI_ADDRESS).transfer(WALLET_ID, feeAmount);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function getMaxCollateral(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice(_ilk);\r\n\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\r\n\r\n        return sub(sub(collateral, (div(mul(mat, debt), price))), 10);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    function getMaxDebt(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice(_ilk);\r\n\r\n        (, uint mat) = spotter.ilks(_ilk);\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        return sub(sub(div(mul(collateral, price), mat), debt), 10);\r\n    }\r\n\r\n    \r\n    \r\n    function getPrice(bytes32 _ilk) public view returns (uint) {\r\n        (, uint mat) = spotter.ilks(_ilk);\r\n        (,,uint spot,,) = vat.ilks(_ilk);\r\n\r\n        return rmul(rmul(spot, spotter.par()), mat);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function getRatio(uint _cdpId, bytes32 _ilk) public view returns (uint) {\r\n        uint price = getPrice( _ilk);\r\n\r\n        (uint collateral, uint debt) = getCdpInfo(manager, _cdpId, _ilk);\r\n\r\n        if (debt == 0) return 0;\r\n\r\n        return rdiv(wmul(collateral, price), debt);\r\n    }\r\n\r\n    \r\n    \r\n    function getCdpDetailedInfo(uint _cdpId) public view returns (uint collateral, uint debt, uint price, bytes32 ilk) {\r\n        address urn = manager.urns(_cdpId);\r\n        ilk = manager.ilks(_cdpId);\r\n\r\n        (collateral, debt) = vat.urns(ilk, urn);\r\n        (,uint rate,,,) = vat.ilks(ilk);\r\n\r\n        debt = rmul(debt, rate);\r\n        price = getPrice(ilk);\r\n    }\r\n\r\n}\r\n\r\ncontract GemLike {\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public;\r\n    function transferFrom(address, address, uint) public;\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract ManagerLike {\r\n    function cdpCan(address, uint, address) public view returns (uint);\r\n    function ilks(uint) public view returns (bytes32);\r\n    function owns(uint) public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function vat() public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function give(uint, address) public;\r\n    function cdpAllow(uint, address, uint) public;\r\n    function urnAllow(address, uint) public;\r\n    function frob(uint, int, int) public;\r\n    function flux(uint, address, uint) public;\r\n    function move(uint, address, uint) public;\r\n    function exit(address, uint, address, uint) public;\r\n    function quit(uint, address) public;\r\n    function enter(address, uint) public;\r\n    function shift(uint, uint) public;\r\n}\r\n\r\ncontract VatLike {\r\n    function can(address, address) public view returns (uint);\r\n    function ilks(bytes32) public view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) public view returns (uint);\r\n    function urns(bytes32, address) public view returns (uint, uint);\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\ncontract GemJoinLike {\r\n    function dec() public returns (uint);\r\n    function gem() public returns (GemLike);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract GNTJoinLike {\r\n    function bags(address) public view returns (address);\r\n    function make(address) public returns (address);\r\n}\r\n\r\ncontract DaiJoinLike {\r\n    function vat() public returns (VatLike);\r\n    function dai() public returns (GemLike);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract HopeLike {\r\n    function hope(address) public;\r\n    function nope(address) public;\r\n}\r\n\r\ncontract ProxyRegistryInterface {\r\n    function build(address) public returns (address);\r\n}\r\n\r\ncontract EndLike {\r\n    function fix(bytes32) public view returns (uint);\r\n    function cash(bytes32, uint) public;\r\n    function free(bytes32) public;\r\n    function pack(uint) public;\r\n    function skim(bytes32, address) public;\r\n}\r\n\r\ncontract JugLike {\r\n    function drip(bytes32) public returns (uint);\r\n}\r\n\r\ncontract PotLike {\r\n    function pie(address) public view returns (uint);\r\n    function drip() public returns (uint);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n}\r\n\r\ncontract ProxyRegistryLike {\r\n    function proxies(address) public view returns (address);\r\n    function build(address) public returns (address);\r\n}\r\n\r\ncontract ProxyLike {\r\n    function owner() public view returns (address);\r\n}\r\n\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    // Internal functions\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function daiJoin_join(address apt, address urn, uint wad) public {\r\n        // Gets DAI from the user's wallet\r\n        DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\r\n        // Approves adapter to take the DAI amount\r\n        DaiJoinLike(apt).dai().approve(apt, wad);\r\n        // Joins DAI into the vat\r\n        DaiJoinLike(apt).join(urn, wad);\r\n    }\r\n}\r\n\r\ncontract MCDOpenProxyActions is Common {\r\n\r\n    // Internal functions\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function toInt(uint x) internal pure returns (int y) {\r\n        y = int(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint wad) internal pure returns (uint rad) {\r\n        rad = mul(wad, 10 ** 27);\r\n    }\r\n\r\n    function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {\r\n        // For those collaterals that have less than 18 decimals precision we need to do the conversion before passing to frob function\r\n        // Adapters will automatically handle the difference of precision\r\n        wad = mul(\r\n            amt,\r\n            10 ** (18 - GemJoinLike(gemJoin).dec())\r\n        );\r\n    }\r\n\r\n    function _getDrawDart(\r\n        address vat,\r\n        address jug,\r\n        address urn,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) internal returns (int dart) {\r\n        // Updates stability fee rate\r\n        uint rate = JugLike(jug).drip(ilk);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint dai = VatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < mul(wad, RAY)) {\r\n            // Calculates the needed dart so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            dart = toInt(sub(mul(wad, RAY), dai) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra dart wei (for the given DAI wad amount)\r\n            dart = mul(uint(dart), rate) < mul(wad, RAY) ? dart + 1 : dart;\r\n        }\r\n    }\r\n\r\n    function _getWipeDart(\r\n        address vat,\r\n        uint dai,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (int dart) {\r\n        // Gets actual rate from the vat\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        dart = toInt(dai / rate);\r\n        // Checks the calculated dart is not higher than urn.art (total debt), otherwise uses its value\r\n        dart = uint(dart) <= art ? - dart : - toInt(art);\r\n    }\r\n\r\n    function _getWipeAllWad(\r\n        address vat,\r\n        address usr,\r\n        address urn,\r\n        bytes32 ilk\r\n    ) internal view returns (uint wad) {\r\n        // Gets actual rate from the vat\r\n        (, uint rate,,,) = VatLike(vat).ilks(ilk);\r\n        // Gets actual art value of the urn\r\n        (, uint art) = VatLike(vat).urns(ilk, urn);\r\n        // Gets actual dai amount in the urn\r\n        uint dai = VatLike(vat).dai(usr);\r\n\r\n        uint rad = sub(mul(art, rate), dai);\r\n        wad = rad / RAY;\r\n\r\n        // If the rad precision has some dust, it will need to request for 1 extra wad wei\r\n        wad = mul(wad, RAY) < rad ? wad + 1 : wad;\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function transfer(address gem, address dst, uint wad) public {\r\n        GemLike(gem).transfer(dst, wad);\r\n    }\r\n\r\n    function ethJoin_join(address apt, address urn) public payable {\r\n        // Wraps ETH in WETH\r\n        GemJoinLike(apt).gem().deposit.value(msg.value)();\r\n        // Approves adapter to take the WETH amount\r\n        GemJoinLike(apt).gem().approve(address(apt), msg.value);\r\n        // Joins WETH collateral into the vat\r\n        GemJoinLike(apt).join(urn, msg.value);\r\n    }\r\n\r\n    function gemJoin_join(address apt, address urn, uint wad, bool transferFrom) public {\r\n        // Only executes for tokens that have approval/transferFrom implementation\r\n        if (transferFrom) {\r\n            // Gets token from the user's wallet\r\n            GemJoinLike(apt).gem().transferFrom(msg.sender, address(this), wad);\r\n            // Approves adapter to take the token amount\r\n            GemJoinLike(apt).gem().approve(apt, wad);\r\n        }\r\n        // Joins token collateral into the vat\r\n        GemJoinLike(apt).join(urn, wad);\r\n    }\r\n\r\n    function hope(\r\n        address obj,\r\n        address usr\r\n    ) public {\r\n        HopeLike(obj).hope(usr);\r\n    }\r\n\r\n    function nope(\r\n        address obj,\r\n        address usr\r\n    ) public {\r\n        HopeLike(obj).nope(usr);\r\n    }\r\n\r\n    function open(\r\n        address manager,\r\n        bytes32 ilk,\r\n        address usr\r\n    ) public returns (uint cdp) {\r\n        cdp = ManagerLike(manager).open(ilk, usr);\r\n    }\r\n\r\n    function give(\r\n        address manager,\r\n        uint cdp,\r\n        address usr\r\n    ) public {\r\n        ManagerLike(manager).give(cdp, usr);\r\n    }\r\n\r\n    function move(\r\n        address manager,\r\n        uint cdp,\r\n        address dst,\r\n        uint rad\r\n    ) public {\r\n        ManagerLike(manager).move(cdp, dst, rad);\r\n    }\r\n\r\n    function frob(\r\n        address manager,\r\n        uint cdp,\r\n        int dink,\r\n        int dart\r\n    ) public {\r\n        ManagerLike(manager).frob(cdp, dink, dart);\r\n    }\r\n\r\n    function lockETH(\r\n        address manager,\r\n        address ethJoin,\r\n        uint cdp\r\n    ) public payable {\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        ethJoin_join(ethJoin, address(this));\r\n        // Locks WETH amount into the CDP\r\n        VatLike(ManagerLike(manager).vat()).frob(\r\n            ManagerLike(manager).ilks(cdp),\r\n            ManagerLike(manager).urns(cdp),\r\n            address(this),\r\n            address(this),\r\n            toInt(msg.value),\r\n            0\r\n        );\r\n    }\r\n\r\n    function lockGem(\r\n        address manager,\r\n        address gemJoin,\r\n        uint cdp,\r\n        uint wad,\r\n        bool transferFrom\r\n    ) public {\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        gemJoin_join(gemJoin, address(this), wad, transferFrom);\r\n        // Locks token amount into the CDP\r\n        VatLike(ManagerLike(manager).vat()).frob(\r\n            ManagerLike(manager).ilks(cdp),\r\n            ManagerLike(manager).urns(cdp),\r\n            address(this),\r\n            address(this),\r\n            toInt(convertTo18(gemJoin, wad)),\r\n            0\r\n        );\r\n\r\n    }\r\n\r\n\r\n    function draw(\r\n        address manager,\r\n        address jug,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wad\r\n    ) public {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Generates debt in the CDP\r\n        frob(manager, cdp, 0, _getDrawDart(vat, jug, urn, ilk, wad));\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(manager, cdp, address(this), toRad(wad));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wad);\r\n\r\n    }\r\n\r\n    function lockETHAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadD\r\n    ) public payable {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Receives ETH amount, converts it to WETH and joins it into the vat\r\n        ethJoin_join(ethJoin, urn);\r\n        // Locks WETH amount into the CDP and generates debt\r\n        frob(manager, cdp, toInt(msg.value), _getDrawDart(vat, jug, urn, ilk, wadD));\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(manager, cdp, address(this), toRad(wadD));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n    }\r\n\r\n    function openLockETHAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address ethJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint wadD,\r\n        address owner\r\n    ) public payable returns (uint cdp) {\r\n        cdp = open(manager, ilk, address(this));\r\n        lockETHAndDraw(manager, jug, ethJoin, daiJoin, cdp, wadD);\r\n        give(manager, cdp, owner);\r\n\r\n    }\r\n\r\n    function lockGemAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        uint cdp,\r\n        uint wadC,\r\n        uint wadD,\r\n        bool transferFrom\r\n    ) public {\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        address vat = ManagerLike(manager).vat();\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        // Takes token amount from user's wallet and joins into the vat\r\n        gemJoin_join(gemJoin, urn, wadC, transferFrom);\r\n        // Locks token amount into the CDP and generates debt\r\n        frob(manager, cdp, toInt(convertTo18(gemJoin, wadC)), _getDrawDart(vat, jug, urn, ilk, wadD));\r\n        // Moves the DAI amount (balance in the vat in rad) to proxy's address\r\n        move(manager, cdp, address(this), toRad(wadD));\r\n        // Allows adapter to access to proxy's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), address(daiJoin)) == 0) {\r\n            VatLike(vat).hope(daiJoin);\r\n        }\r\n        // Exits DAI to the user's wallet as a token\r\n        DaiJoinLike(daiJoin).exit(msg.sender, wadD);\r\n\r\n    }\r\n\r\n    function openLockGemAndDraw(\r\n        address manager,\r\n        address jug,\r\n        address gemJoin,\r\n        address daiJoin,\r\n        bytes32 ilk,\r\n        uint wadC,\r\n        uint wadD,\r\n        bool transferFrom,\r\n        address owner\r\n    ) public returns (uint cdp) {\r\n        cdp = open(manager, ilk, address(this));\r\n        lockGemAndDraw(manager, jug, gemJoin, daiJoin, cdp, wadC, wadD, transferFrom);\r\n        give(manager, cdp, owner);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract MCDOpenFlashProxy is MCDSaverProxy {\r\n\r\n    Manager public constant manager = Manager(MANAGER_ADDRESS);\r\n\r\n    address public constant OPEN_PROXY_ACTIONS = 0x6d0984E80a86f26c0dd564ca0CF74a8E9Da03305;\r\n\r\n    function openAndLeverage(\r\n        uint[6] memory _data,\r\n        bytes32 _ilk,\r\n        address[3] memory addrData, // [_collJoin, _exchangeAddress, _proxy]\r\n        bytes memory _callData,\r\n        bool _isEth\r\n    ) public {\r\n\r\n        // Exchange the Dai loaned to Eth\r\n        uint collSwaped = swap([_data[1], _data[2], _data[3], _data[4]],\r\n             DAI_ADDRESS, getCollateralAddr(addrData[0]), addrData[1], _callData);\r\n\r\n        if (_isEth) {\r\n            MCDOpenProxyActions(OPEN_PROXY_ACTIONS).openLockETHAndDraw.value(address(this).balance)(\r\n                address(manager),\r\n                JUG_ADDRESS,\r\n                ETH_JOIN_ADDRESS,\r\n                DAI_JOIN_ADDRESS,\r\n                _ilk,\r\n                _data[1],\r\n                addrData[2]\r\n            );\r\n        } else {\r\n\r\n            ERC20(getCollateralAddr(addrData[0])).approve(OPEN_PROXY_ACTIONS, uint(-1));\r\n\r\n            MCDOpenProxyActions(OPEN_PROXY_ACTIONS).openLockGemAndDraw(\r\n                address(manager),\r\n                JUG_ADDRESS,\r\n                addrData[0],\r\n                DAI_JOIN_ADDRESS,\r\n                _ilk,\r\n                _data[0],\r\n                _data[1],\r\n                true,\r\n                addrData[2]\r\n            );\r\n        }\r\n\r\n         // Repay debt\r\n        ERC20(DAI_ADDRESS).transfer(address(NEW_IDAI_ADDRESS), _data[1]);\r\n\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ILK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_JOIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_TOKEN_INTERFACE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JUG_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOGGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAKER_DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIGRATION_ACTIONS_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MKR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_IDAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_PROXY_ACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_ACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAVER_EXCHANGE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCD_MCD_MIGRATION\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPOTTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"boost\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoin\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getCdpDetailedInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract Manager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getCdpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getMaxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract Manager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"}],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract Manager\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"bytes32\",\"name\":\"_ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address[3]\",\"name\":\"addrData\",\"type\":\"address[3]\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isEth\",\"type\":\"bool\"}],\"name\":\"openAndLeverage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"_data\",\"type\":\"uint256[6]\"},{\"internalType\":\"address\",\"name\":\"_joinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"repay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract Spotter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract Vat\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MCDOpenFlashProxy","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://0ef0952eeedb2d729b8b8926809503f0c061e284d84760a3a9d848e45a49941f"}]}