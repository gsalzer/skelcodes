{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\roles\\WhiteListAdminRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts\\Vesting.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Vesting is Ownable, WhitelistAdminRole {\r\n\r\n    struct Round {\r\n        uint cliff; \r\n        uint rateFirstInit; \r\n        uint ratePerWeek;  \r\n        uint count;\r\n        bool isExist;\r\n        address[] holder;\r\n        uint[] balance;\r\n        uint[] withdraw;\r\n        bool[] enable;\r\n    }\r\n\r\n    uint listingDate = 0;\r\n\r\n    address public tokenAddress;\r\n    string public roundList;\r\n\r\n    mapping (string => Round) public rounds;\r\n\r\n    constructor() public {}\r\n\r\n    modifier onlyListed() {\r\n        require(listingDate > 0, \"No ListingDate\");\r\n        _;\r\n    }\r\n\r\n    function setToken(address token) public onlyWhitelistAdmin {\r\n        tokenAddress = token;\r\n    }\r\n\r\n    function setListingDate(uint timestamp) public onlyWhitelistAdmin {\r\n        listingDate = timestamp;\r\n    }\r\n    \r\n    function addHolders(string memory roundName, uint cliff, uint firstUnlock, uint weekUnlock, address[] memory holders, uint256[] memory tokens) public onlyWhitelistAdmin {\r\n\r\n        if (rounds[roundName].isExist != true) {\r\n\r\n            if (bytes(roundList).length == 0){\r\n                roundList = roundName;\r\n            } else {\r\n                roundList = concat(roundList, roundName);\r\n            }\r\n\r\n            rounds[roundName] = Round(cliff, firstUnlock, weekUnlock, 0, true,\r\n                new address[](0),\r\n                new uint[](0),\r\n                new uint[](0),\r\n                new bool[](0)\r\n            );\r\n        }\r\n\r\n        for (uint8 i = 0; i < holders.length; i++) {\r\n            rounds[roundName].count++;\r\n            rounds[roundName].holder.push(holders[i]);\r\n            rounds[roundName].balance.push(tokens[i]);\r\n            rounds[roundName].withdraw.push(0);\r\n            rounds[roundName].enable.push(true);\r\n        }\r\n    }\r\n\r\n    function setEnable(string memory roundName, address addr, bool enable) public onlyWhitelistAdmin {\r\n        Round storage r = rounds[roundName];\r\n\r\n        for (uint8 i = 0; i < r.holder.length; i++) {\r\n            if (r.holder[i] == addr) {\r\n                r.enable[i] = enable;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function send(string memory roundName) public onlyWhitelistAdmin onlyListed {\r\n        Round storage r = rounds[roundName];\r\n\r\n        for (uint8 i = 0; i < r.holder.length; i++) {\r\n            uint available = calcUnlock(r.balance[i], r.cliff, listingDate, r.rateFirstInit, 7, r.ratePerWeek, now);\r\n            uint afterBal = SafeMath.add(r.withdraw[i], available);\r\n\r\n            if (r.balance[i] < afterBal) {\r\n                available = SafeMath.sub(r.balance[i], r.withdraw[i]);\r\n            }\r\n\r\n            if (available > 0) {\r\n                ERC20(tokenAddress).transfer(r.holder[i], available);\r\n                r.withdraw[i] = SafeMath.add(r.withdraw[i], available);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function sendTest(string memory roundName, uint timestamp) public onlyWhitelistAdmin onlyListed {\r\n        Round storage r = rounds[roundName];\r\n\r\n        for (uint8 i = 0; i < r.holder.length; i++) {\r\n            if (r.enable[i] == false) continue;\r\n\r\n            uint available = calcUnlock(r.balance[i], r.cliff, listingDate, r.rateFirstInit, 7, r.ratePerWeek, timestamp) - r.withdraw[i];\r\n            uint afterBal = SafeMath.add(r.withdraw[i], available);\r\n\r\n            if (r.balance[i] < afterBal) {\r\n                available = SafeMath.sub(r.balance[i], r.withdraw[i]);\r\n            }\r\n\r\n            if (available > 0) {\r\n                ERC20(tokenAddress).transfer(r.holder[i], available);\r\n                r.withdraw[i] = SafeMath.add(r.withdraw[i], available);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAvailable(string memory roundName, address addr, uint timestamp) public view returns (uint256) {\r\n        Round memory r = rounds[roundName];\r\n        uint256 available = 0;\r\n\r\n        for (uint8 i = 0; i < r.holder.length; i++) {\r\n            if (r.holder[i] == addr) {\r\n                available = calcUnlock(r.balance[i], r.cliff, listingDate, r.rateFirstInit, 7, r.ratePerWeek, timestamp) - r.withdraw[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return available;\r\n    }\r\n\r\n    function getInfo(string memory roundName, address addr) public view returns (uint256, uint256) {\r\n        Round memory r = rounds[roundName];\r\n        uint256 withdraw;\r\n        uint256 balance;\r\n\r\n        for (uint8 i = 0; i < r.holder.length; i++) {\r\n            if (r.holder[i] == addr) {\r\n                balance = r.balance[i];\r\n                withdraw = r.withdraw[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (balance, withdraw);\r\n    }\r\n    \r\n    function calcUnlock(uint fund, uint cliff, uint listing, uint firstUnlockRate, uint unlockTerm, uint unlockRate, uint target) public pure returns (uint256) {\r\n\r\n        uint cliff_days = cliff * 86400; // 864000 = 24h * 60min * 60sec;\r\n        uint unlock_days = unlockTerm * 86400;\r\n\r\n        uint delta = (target - listing) - cliff_days;\r\n        uint deltaW = SafeMath.mul(SafeMath.div(delta, unlock_days), getRate(fund, unlockRate));\r\n        uint avail = getRate(fund, firstUnlockRate) + deltaW;\r\n        return avail;\r\n    }\r\n    \r\n    function tokenBalance() public view returns (uint256) {\r\n        return ERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n    \r\n    function distribute(address[] memory holders, uint256[] memory values) public onlyWhitelistAdmin {        \r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            ERC20(tokenAddress).transfer(holders[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = ERC20(tokenAddress).balanceOf(address(this));\r\n        ERC20(tokenAddress).transfer(owner(), balance);\r\n    }\r\n    \r\n    function getRate(uint value, uint rate) public pure returns (uint256) {\r\n        return (value * rate) / 1000;\r\n    }\r\n\r\n    function concat(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, \",\", b));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holders\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundName\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"sendTest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundList\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundName\",\"type\":\"string\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"firstUnlock\",\"type\":\"uint256\"},{\"name\":\"weekUnlock\",\"type\":\"uint256\"},{\"name\":\"holders\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"addHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundName\",\"type\":\"string\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setListingDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundName\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"string\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"rateFirstInit\",\"type\":\"uint256\"},{\"name\":\"ratePerWeek\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"roundName\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fund\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"listing\",\"type\":\"uint256\"},{\"name\":\"firstUnlockRate\",\"type\":\"uint256\"},{\"name\":\"unlockTerm\",\"type\":\"uint256\"},{\"name\":\"unlockRate\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"calcUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundName\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vesting","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a922a8f8f682bd452dfe7cc78bf4340d9a26de760e38d7aa430acd933cad16cf"}]}