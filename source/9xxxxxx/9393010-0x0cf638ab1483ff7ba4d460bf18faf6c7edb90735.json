{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ninterface ChainFaces {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction getFace(uint256 id) external view returns (string memory);\r\n\tfunction getGolfScore(uint256 id) external view returns (uint256);\r\n\tfunction getPercentBear(uint256 id) external view returns (uint256);\r\n\tfunction getFaceSymmetry(uint256 id) external view returns (uint256);\r\n\tfunction getTextColor(uint256 id) external view returns (uint256);\r\n\tfunction getBackgroundColor(uint256 id) external view returns (uint256);\r\n}\r\n\r\ncontract PagedFaces {\r\n\r\n\tChainFaces private cf = ChainFaces(0x91047Abf3cAb8da5A9515c8750Ab33B4f1560a7A);\r\n\r\n\tfunction getFace(uint256 _id) public view returns (bytes32 face, uint256 golfScore, uint256 percentBear, uint256 faceSymmetry, uint256 textColor, uint256 backgroundColor) {\r\n\t\treturn (_stringToBytes32(cf.getFace(_id)), cf.getGolfScore(_id), cf.getPercentBear(_id), cf.getFaceSymmetry(_id), cf.getTextColor(_id), cf.getBackgroundColor(_id));\r\n\t}\r\n\r\n\tfunction getFaces(uint256[] memory _ids) public view returns (bytes32[] memory faces, uint256[] memory golfScores, uint256[] memory percentBears, uint256[] memory faceSymmetries, uint256[] memory textColors, uint256[] memory backgroundColors) {\r\n\t\tuint256 _length = _ids.length;\r\n\t\tfaces = new bytes32[](_length);\r\n\t\tgolfScores = new uint256[](_length);\r\n\t\tpercentBears = new uint256[](_length);\r\n\t\tfaceSymmetries = new uint256[](_length);\r\n\t\ttextColors = new uint256[](_length);\r\n\t\tbackgroundColors = new uint256[](_length);\r\n\t\tfor (uint256 i = 0; i < _length; i++) {\r\n\t\t\t(faces[i], golfScores[i], percentBears[i], faceSymmetries[i], textColors[i], backgroundColors[i]) = getFace(_ids[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getFacesTable(uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory ids, bytes32[] memory faces, uint256[] memory percentBears, uint256[] memory faceSymmetries, uint256[] memory textColors, uint256[] memory backgroundColors, uint256 totalFaces, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalFaces = cf.totalSupply();\r\n\r\n\t\tif (totalFaces > 0) {\r\n\t\t\ttotalPages = (totalFaces / _limit) + (totalFaces % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalFaces % _limit != 0) {\r\n\t\t\t\t_limit = totalFaces % _limit;\r\n\t\t\t}\r\n\r\n\t\t\tids = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\tids[i] = (_isAsc ? _offset + i : totalFaces - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\tids = new uint256[](0);\r\n\t\t}\r\n\t\t/* stack too deep so 1 return value needs to be dropped (golf score) */\r\n\t\t(faces, , percentBears, faceSymmetries, textColors, backgroundColors) = getFaces(ids);\r\n\t}\r\n\r\n\tfunction _stringToBytes32(string memory _s) internal pure returns (bytes32 b) {\r\n\t\tif (bytes(_s).length == 0) {\r\n\t\t\treturn 0x0;\r\n\t\t}\r\n\t\tassembly { b := mload(add(_s, 32)) }\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getFace\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"face\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"golfScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentBear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceSymmetry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"textColor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"backgroundColor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getFaces\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"faces\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"golfScores\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentBears\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"faceSymmetries\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"textColors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"backgroundColors\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getFacesTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"faces\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentBears\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"faceSymmetries\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"textColors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"backgroundColors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalFaces\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PagedFaces","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2197f6330f8d676ecd299859fdb381177597695d266d8ee5f14ae90461d6cfa4"}]}