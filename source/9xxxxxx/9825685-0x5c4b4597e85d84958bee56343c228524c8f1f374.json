{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IOneSplitConsts {\r\n    // disableFlags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_KYBER + ...\r\n    uint256 public constant FLAG_DISABLE_UNISWAP = 0x01;\r\n    uint256 public constant FLAG_DISABLE_KYBER = 0x02;\r\n    uint256 public constant FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\r\n    uint256 public constant FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\r\n    uint256 public constant FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\r\n    uint256 public constant FLAG_DISABLE_BANCOR = 0x04;\r\n    uint256 public constant FLAG_DISABLE_OASIS = 0x08;\r\n    uint256 public constant FLAG_DISABLE_COMPOUND = 0x10;\r\n    uint256 public constant FLAG_DISABLE_FULCRUM = 0x20;\r\n    uint256 public constant FLAG_DISABLE_CHAI = 0x40;\r\n    uint256 public constant FLAG_DISABLE_AAVE = 0x80;\r\n    uint256 public constant FLAG_DISABLE_SMART_TOKEN = 0x100;\r\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Turned off by default\r\n    uint256 public constant FLAG_DISABLE_BDAI = 0x400;\r\n    uint256 public constant FLAG_DISABLE_IEARN = 0x800;\r\n    uint256 public constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\r\n    uint256 public constant FLAG_DISABLE_CURVE_USDT = 0x2000;\r\n    uint256 public constant FLAG_DISABLE_CURVE_Y = 0x4000;\r\n    uint256 public constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\r\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Turned off by default\r\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Turned off by default\r\n    uint256 public constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\r\n    uint256 public constant FLAG_DISABLE_WETH = 0x80000;\r\n    uint256 public constant FLAG_ENABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 public constant FLAG_ENABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 public constant FLAG_ENABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 public constant FLAG_DISABLE_IDLE = 0x800000;\r\n}\r\n\r\n\r\ncontract IOneSplit is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) public payable;\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapExchange {\r\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns (uint256 tokensBought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 ethBought);\r\n\r\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 tokensBought);\r\n\r\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline)\r\n        external\r\n        returns (uint256 ethBought);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokensSold,\r\n        uint256 minTokensBought,\r\n        uint256 minEthBought,\r\n        uint256 deadline,\r\n        address tokenAddr\r\n    ) external returns (uint256 tokensBought);\r\n}\r\n\r\n// File: contracts/interface/IUniswapFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapFactory {\r\n    function getExchange(IERC20 token) external view returns (IUniswapExchange exchange);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkContract.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkContract {\r\n    function searchBestRate(IERC20 src, IERC20 dest, uint256 srcAmount, bool usePermissionless)\r\n        external\r\n        view\r\n        returns (address reserve, uint256 rate);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkProxy {\r\n    function getExpectedRate(IERC20 src, IERC20 dest, uint256 srcQty)\r\n        external\r\n        view\r\n        returns (uint256 expectedRate, uint256 slippageRate);\r\n\r\n    function tradeWithHint(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        address destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address walletId,\r\n        bytes calldata hint\r\n    ) external payable returns (uint256);\r\n\r\n    function kyberNetworkContract() external view returns (IKyberNetworkContract);\r\n\r\n    // TODO: Limit usage by tx.gasPrice\r\n    // function maxGasPrice() external view returns (uint256);\r\n\r\n    // TODO: Limit usage by user cap\r\n    // function getUserCapInWei(address user) external view returns (uint256);\r\n    // function getUserCapInTokenWei(address user, IERC20 token) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IKyberUniswapReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IKyberUniswapReserve {\r\n    function uniswapFactory() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IKyberOasisReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IKyberOasisReserve {\r\n    function otc() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IKyberBancorReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IKyberBancorReserve {\r\n    function bancorEth() public view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetwork.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBancorNetwork {\r\n    function getReturnByPath(address[] calldata path, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 returnAmount, uint256 conversionFee);\r\n\r\n    function claimAndConvert(address[] calldata path, uint256 amount, uint256 minReturn)\r\n        external\r\n        returns (uint256);\r\n\r\n    function convert(address[] calldata path, uint256 amount, uint256 minReturn)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IBancorContractRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IBancorContractRegistry {\r\n    function addressOf(bytes32 contractName) external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetworkPathFinder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBancorNetworkPathFinder {\r\n    function generatePath(IERC20 sourceToken, IERC20 targetToken)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n\r\n// File: contracts/interface/IBancorEtherToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBancorEtherToken is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/IOasisExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IOasisExchange {\r\n    function getBuyAmount(IERC20 buyGem, IERC20 payGem, uint256 payAmt)\r\n        external\r\n        view\r\n        returns (uint256 fillAmt);\r\n\r\n    function sellAllAmount(IERC20 payGem, uint256 payAmt, IERC20 buyGem, uint256 minFillAmount)\r\n        external\r\n        returns (uint256 fillAmt);\r\n}\r\n\r\n// File: contracts/interface/IWETH.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interface/ICurve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface ICurve {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external;\r\n}\r\n\r\n// File: contracts/interface/IChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IPot {\r\n    function dsr() external view returns (uint256);\r\n\r\n    function chi() external view returns (uint256);\r\n\r\n    function rho() external view returns (uint256);\r\n\r\n    function drip() external returns (uint256);\r\n\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n\r\ncontract IChai is IERC20 {\r\n    function POT() public view returns (IPot);\r\n\r\n    function join(address dst, uint256 wad) external;\r\n\r\n    function exit(address src, uint256 wad) external;\r\n}\r\n\r\n\r\nlibrary ChaiHelper {\r\n    IPot private constant POT = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\r\n    uint256 private constant RAY = 10**27;\r\n\r\n    function _mul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function _rmul(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, y) / RAY;\r\n    }\r\n\r\n    function _rdiv(uint256 x, uint256 y) private pure returns (uint256 z) {\r\n        // always rounds down\r\n        z = _mul(x, RAY) / y;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n, uint256 base) private pure returns (uint256 z) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch x\r\n                case 0 {\r\n                    switch n\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := 0\r\n                        }\r\n                }\r\n                default {\r\n                    switch mod(n, 2)\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := x\r\n                        }\r\n                    let half := div(base, 2) // for rounding.\r\n                    for {\r\n                        n := div(n, 2)\r\n                    } n {\r\n                        n := div(n, 2)\r\n                    } {\r\n                        let xx := mul(x, x)\r\n                        if iszero(eq(div(xx, x), x)) {\r\n                            revert(0, 0)\r\n                        }\r\n                        let xxRound := add(xx, half)\r\n                        if lt(xxRound, xx) {\r\n                            revert(0, 0)\r\n                        }\r\n                        x := div(xxRound, base)\r\n                        if mod(n, 2) {\r\n                            let zx := mul(z, x)\r\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\r\n                                revert(0, 0)\r\n                            }\r\n                            let zxRound := add(zx, half)\r\n                            if lt(zxRound, zx) {\r\n                                revert(0, 0)\r\n                            }\r\n                            z := div(zxRound, base)\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    function potDrip() private view returns (uint256) {\r\n        return _rmul(rpow(POT.dsr(), now - POT.rho(), RAY), POT.chi());\r\n    }\r\n\r\n    function daiToChai(\r\n        IChai, /*chai*/\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rdiv(amount, chi);\r\n    }\r\n\r\n    function chaiToDai(\r\n        IChai, /*chai*/\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        uint256 chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rmul(chi, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ICompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ICompound {\r\n    function markets(address cToken)\r\n        external\r\n        view\r\n        returns (bool isListed, uint256 collateralFactorMantissa);\r\n}\r\n\r\n\r\ncontract ICompoundToken is IERC20 {\r\n    function underlying() external view returns (address);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\n\r\ncontract ICompoundEther is IERC20 {\r\n    function mint() external payable;\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IAaveToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IAaveToken is IERC20 {\r\n    function underlyingAssetAddress() external view returns (IERC20);\r\n\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\n\r\ninterface IAaveLendingPool {\r\n    function core() external view returns (address);\r\n\r\n    function deposit(IERC20 token, uint256 amount, uint16 refCode) external payable;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            require(from == msg.sender && msg.value >= amount, \"Wrong useage of ETH.universalTransferFrom()\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            if (msg.value > amount) {\r\n                // Return remainder if exist\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\r\n                token.safeApprove(to, 0);\r\n            }\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\r\n\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success || data.length == 0) {\r\n            (success, data) = address(token).staticcall.gas(10000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitBase.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IOneSplitView is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n}\r\n\r\n\r\nlibrary DisableFlags {\r\n    function check(uint256 disableFlags, uint256 flag) internal pure returns(bool) {\r\n        return (disableFlags & flag) != 0;\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitRoot {\r\n    using SafeMath for uint256;\r\n    using DisableFlags for uint256;\r\n\r\n    using UniversalERC20 for IERC20;\r\n    using UniversalERC20 for IWETH;\r\n    using UniversalERC20 for IBancorEtherToken;\r\n    using ChaiHelper for IChai;\r\n\r\n    uint256 constant public DEXES_COUNT = 12;\r\n    IERC20 constant public ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    IERC20 public dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IERC20 public usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 public usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20 public tusd = IERC20(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    IERC20 public busd = IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);\r\n    IERC20 public susd = IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n    IWETH public wethToken = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IBancorEtherToken public bancorEtherToken = IBancorEtherToken(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\r\n    IChai public chai = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n\r\n    IKyberNetworkProxy public kyberNetworkProxy = IKyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    IUniswapFactory public uniswapFactory = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n    IBancorContractRegistry public bancorContractRegistry = IBancorContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n    IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n    IOasisExchange public oasisExchange = IOasisExchange(0x794e6e91555438aFc3ccF1c5076A74F42133d08D);\r\n    ICurve public curveCompound = ICurve(0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56);\r\n    ICurve public curveUsdt = ICurve(0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C);\r\n    ICurve public curveY = ICurve(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    ICurve public curveBinance = ICurve(0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27);\r\n    ICurve public curveSynthetix = ICurve(0x3b12e1fBb468BEa80B492d635976809Bf950186C);\r\n    IAaveLendingPool public aave = IAaveLendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n\r\n    function _getCompoundToken(IERC20 token) internal pure returns(ICompoundToken) {\r\n        if (token.isETH()) { // ETH\r\n            return ICompoundToken(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n        }\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) { // DAI\r\n            return ICompoundToken(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n        }\r\n        if (token == IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)) { // BAT\r\n            return ICompoundToken(0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E);\r\n        }\r\n        if (token == IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862)) { // REP\r\n            return ICompoundToken(0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1);\r\n        }\r\n        if (token == IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) { // USDC\r\n            return ICompoundToken(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\r\n        }\r\n        if (token == IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) { // WBTC\r\n            return ICompoundToken(0xC11b1268C1A384e55C48c2391d8d480264A3A7F4);\r\n        }\r\n        if (token == IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498)) { // ZRX\r\n            return ICompoundToken(0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407);\r\n        }\r\n\r\n        return ICompoundToken(0);\r\n    }\r\n\r\n    function _getAaveToken(IERC20 token) internal pure returns(IAaveToken) {\r\n        if (token.isETH()) { // ETH\r\n            return IAaveToken(0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04);\r\n        }\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) { // DAI\r\n            return IAaveToken(0xfC1E690f61EFd961294b3e1Ce3313fBD8aa4f85d);\r\n        }\r\n        if (token == IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) { // USDC\r\n            return IAaveToken(0x9bA00D6856a4eDF4665BcA2C2309936572473B7E);\r\n        }\r\n        if (token == IERC20(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51)) { // SUSD\r\n            return IAaveToken(0x625aE63000f46200499120B906716420bd059240);\r\n        }\r\n        if (token == IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53)) { // BUSD\r\n            return IAaveToken(0x6Ee0f7BB50a54AB5253dA0667B0Dc2ee526C30a8);\r\n        }\r\n        if (token == IERC20(0x0000000000085d4780B73119b644AE5ecd22b376)) { // TUSD\r\n            return IAaveToken(0x4DA9b813057D04BAef4e5800E36083717b4a0341);\r\n        }\r\n        if (token == IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7)) { // USDT\r\n            return IAaveToken(0x71fc860F7D3A592A4a98740e39dB31d25db65ae8);\r\n        }\r\n        if (token == IERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF)) { // BAT\r\n            return IAaveToken(0xE1BA0FB44CCb0D11b80F92f4f8Ed94CA3fF51D00);\r\n        }\r\n        if (token == IERC20(0xdd974D5C2e2928deA5F71b9825b8b646686BD200)) { // KNC\r\n            return IAaveToken(0x9D91BE44C06d373a8a226E1f3b146956083803eB);\r\n        }\r\n        if (token == IERC20(0x80fB784B7eD66730e8b1DBd9820aFD29931aab03)) { // LEND\r\n            return IAaveToken(0x7D2D3688Df45Ce7C552E19c27e007673da9204B8);\r\n        }\r\n        if (token == IERC20(0x514910771AF9Ca656af840dff83E8264EcF986CA)) { // LINK\r\n            return IAaveToken(0xA64BD6C70Cb9051F6A9ba1F163Fdc07E0DfB5F84);\r\n        }\r\n        if (token == IERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942)) { // MANA\r\n            return IAaveToken(0x6FCE4A401B6B80ACe52baAefE4421Bd188e76F6f);\r\n        }\r\n        if (token == IERC20(0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2)) { // MKR\r\n            return IAaveToken(0x7deB5e830be29F91E298ba5FF1356BB7f8146998);\r\n        }\r\n        if (token == IERC20(0x1985365e9f78359a9B6AD760e32412f4a445E862)) { // REP\r\n            return IAaveToken(0x71010A9D003445aC60C4e6A7017c1E89A477B438);\r\n        }\r\n        if (token == IERC20(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F)) { // SNX\r\n            return IAaveToken(0x328C4c80BC7aCa0834Db37e6600A6c49E12Da4DE);\r\n        }\r\n        if (token == IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) { // WBTC\r\n            return IAaveToken(0xFC4B8ED459e00e5400be803A9BB3954234FD50e3);\r\n        }\r\n        if (token == IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498)) { // ZRX\r\n            return IAaveToken(0x6Fb0855c404E09c47C3fBCA25f08d4E41f9F062f);\r\n        }\r\n\r\n        return IAaveToken(0);\r\n    }\r\n\r\n    function _infiniteApproveIfNeeded(IERC20 token, address to) internal {\r\n        if (!token.isETH()) {\r\n            if ((token.allowance(address(this), to) >> 255) == 0) {\r\n                token.universalApprove(to, uint256(- 1));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBaseView is IOneSplitView, OneSplitRoot {\r\n    function log(uint256) external view {\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags // See constants in IOneSplit.sol\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        distribution = new uint256[](DEXES_COUNT);\r\n\r\n        if (fromToken == toToken) {\r\n            return (amount, distribution);\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256,uint256) view returns(uint256)[DEXES_COUNT] memory reserves = [\r\n            disableFlags.check(FLAG_DISABLE_UNISWAP)          ? _calculateNoReturn : calculateUniswapReturn,\r\n            disableFlags.check(FLAG_DISABLE_KYBER)            ? _calculateNoReturn : calculateKyberReturn,\r\n            disableFlags.check(FLAG_DISABLE_BANCOR)           ? _calculateNoReturn : calculateBancorReturn,\r\n            disableFlags.check(FLAG_DISABLE_OASIS)            ? _calculateNoReturn : calculateOasisReturn,\r\n            disableFlags.check(FLAG_DISABLE_CURVE_COMPOUND)   ? _calculateNoReturn : calculateCurveCompound,\r\n            disableFlags.check(FLAG_DISABLE_CURVE_USDT)       ? _calculateNoReturn : calculateCurveUsdt,\r\n            disableFlags.check(FLAG_DISABLE_CURVE_Y)          ? _calculateNoReturn : calculateCurveY,\r\n            disableFlags.check(FLAG_DISABLE_CURVE_BINANCE)    ? _calculateNoReturn : calculateCurveBinance,\r\n            disableFlags.check(FLAG_DISABLE_CURVE_SYNTHETIX)  ? _calculateNoReturn : calculateCurveSynthetix,\r\n            !disableFlags.check(FLAG_ENABLE_UNISWAP_COMPOUND) ? _calculateNoReturn : calculateUniswapCompound,\r\n            !disableFlags.check(FLAG_ENABLE_UNISWAP_CHAI)     ? _calculateNoReturn : calculateUniswapChai,\r\n            !disableFlags.check(FLAG_ENABLE_UNISWAP_AAVE)     ? _calculateNoReturn : calculateUniswapAave\r\n        ];\r\n\r\n        uint256[DEXES_COUNT] memory rates;\r\n        uint256[DEXES_COUNT] memory fullRates;\r\n        for (uint i = 0; i < rates.length; i++) {\r\n            rates[i] = reserves[i](fromToken, toToken, amount.div(parts), disableFlags);\r\n            this.log(rates[i]);\r\n            fullRates[i] = rates[i];\r\n        }\r\n\r\n        for (uint j = 0; j < parts; j++) {\r\n            // Find best part\r\n            uint256 bestIndex = 0;\r\n            for (uint i = 1; i < rates.length; i++) {\r\n                if (rates[i] > rates[bestIndex]) {\r\n                    bestIndex = i;\r\n                }\r\n            }\r\n\r\n            // Add best part\r\n            returnAmount = returnAmount.add(rates[bestIndex]);\r\n            distribution[bestIndex]++;\r\n\r\n            // Avoid CompilerError: Stack too deep\r\n            uint256 srcAmount = amount;\r\n\r\n            // Recalc part if needed\r\n            if (j + 1 < parts) {\r\n                uint256 newRate = reserves[bestIndex](\r\n                    fromToken,\r\n                    toToken,\r\n                    srcAmount.mul(distribution[bestIndex] + 1).div(parts),\r\n                    disableFlags\r\n                );\r\n                if (newRate > fullRates[bestIndex]) {\r\n                    rates[bestIndex] = newRate.sub(fullRates[bestIndex]);\r\n                } else {\r\n                    rates[bestIndex] = 0;\r\n                }\r\n                this.log(rates[bestIndex]);\r\n                fullRates[bestIndex] = newRate;\r\n            }\r\n        }\r\n    }\r\n\r\n    // View Helpers\r\n\r\n    function calculateCurveCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) + (fromToken == usdc ? 2 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) + (destToken == usdc ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return curveCompound.get_dy_underlying(i - 1, j - 1, amount);\r\n    }\r\n\r\n    function calculateCurveUsdt(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return curveUsdt.get_dy_underlying(i - 1, j - 1, amount);\r\n    }\r\n\r\n    function calculateCurveY(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == tusd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == tusd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return curveY.get_dy_underlying(i - 1, j - 1, amount);\r\n    }\r\n\r\n    function calculateCurveBinance(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == busd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == busd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return curveBinance.get_dy_underlying(i - 1, j - 1, amount);\r\n    }\r\n\r\n    function calculateCurveSynthetix(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == tusd ? 4 : 0) +\r\n            (fromToken == susd ? 5 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == tusd ? 4 : 0) +\r\n            (destToken == susd ? 5 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (fromToken != susd && destToken != susd) {\r\n            return 0;\r\n        }\r\n\r\n        return curveSynthetix.get_dy_underlying(i - 1, j - 1, amount);\r\n    }\r\n\r\n    function calculateUniswapReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        uint256 returnAmount = amount;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange != IUniswapExchange(0)) {\r\n                (bool success, bytes memory data) = address(fromExchange).staticcall.gas(200000)(\r\n                    abi.encodeWithSelector(\r\n                        fromExchange.getTokenToEthInputPrice.selector,\r\n                        returnAmount\r\n                    )\r\n                );\r\n                if (success) {\r\n                    returnAmount = abi.decode(data, (uint256));\r\n                } else {\r\n                    returnAmount = 0;\r\n                }\r\n            } else {\r\n                returnAmount = 0;\r\n            }\r\n        }\r\n\r\n        if (!toToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(toToken);\r\n            if (toExchange != IUniswapExchange(0)) {\r\n                (bool success, bytes memory data) = address(toExchange).staticcall.gas(200000)(\r\n                    abi.encodeWithSelector(\r\n                        toExchange.getEthToTokenInputPrice.selector,\r\n                        returnAmount\r\n                    )\r\n                );\r\n                if (success) {\r\n                    returnAmount = abi.decode(data, (uint256));\r\n                } else {\r\n                    returnAmount = 0;\r\n                }\r\n            } else {\r\n                returnAmount = 0;\r\n            }\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function calculateUniswapCompound(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256) {\r\n        if (!fromToken.isETH() && !toToken.isETH()) {\r\n            return 0;\r\n        }\r\n\r\n        if (!fromToken.isETH()) {\r\n            ICompoundToken fromCompound = _getCompoundToken(fromToken);\r\n            if (fromCompound != ICompoundToken(0)) {\r\n                return calculateUniswapReturn(\r\n                    fromCompound,\r\n                    toToken,\r\n                    amount.mul(1e18).div(fromCompound.exchangeRateStored()),\r\n                    disableFlags\r\n                );\r\n            }\r\n        } else {\r\n            ICompoundToken toCompound = _getCompoundToken(toToken);\r\n            if (toCompound != ICompoundToken(0)) {\r\n                return calculateUniswapReturn(\r\n                    fromToken,\r\n                    toCompound,\r\n                    amount,\r\n                    disableFlags\r\n                ).mul(toCompound.exchangeRateStored()).div(1e18);\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function calculateUniswapChai(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256) {\r\n        if (fromToken == dai && toToken.isETH()) {\r\n            return calculateUniswapReturn(\r\n                chai,\r\n                toToken,\r\n                chai.daiToChai(amount),\r\n                disableFlags\r\n            );\r\n        }\r\n\r\n        if (fromToken.isETH() && toToken == dai) {\r\n            return chai.chaiToDai(calculateUniswapReturn(\r\n                fromToken,\r\n                chai,\r\n                amount,\r\n                disableFlags\r\n            ));\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function calculateUniswapAave(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256) {\r\n        if (!fromToken.isETH() && !toToken.isETH()) {\r\n            return 0;\r\n        }\r\n\r\n        if (!fromToken.isETH()) {\r\n            IAaveToken fromAave = _getAaveToken(fromToken);\r\n            if (fromAave != IAaveToken(0)) {\r\n                return calculateUniswapReturn(\r\n                    fromAave,\r\n                    toToken,\r\n                    amount,\r\n                    disableFlags\r\n                );\r\n            }\r\n        } else {\r\n            IAaveToken toAave = _getAaveToken(toToken);\r\n            if (toAave != IAaveToken(0)) {\r\n                return calculateUniswapReturn(\r\n                    fromToken,\r\n                    toAave,\r\n                    amount,\r\n                    disableFlags\r\n                );\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function calculateKyberReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256) {\r\n        (bool success, bytes memory data) = address(kyberNetworkProxy).staticcall.gas(2300)(abi.encodeWithSelector(\r\n            kyberNetworkProxy.kyberNetworkContract.selector\r\n        ));\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        IKyberNetworkContract kyberNetworkContract = IKyberNetworkContract(abi.decode(data, (address)));\r\n\r\n        if (fromToken.isETH() || toToken.isETH()) {\r\n            return _calculateKyberReturnWithEth(kyberNetworkContract, fromToken, toToken, amount, disableFlags);\r\n        }\r\n\r\n        uint256 value = _calculateKyberReturnWithEth(kyberNetworkContract, fromToken, ETH_ADDRESS, amount, disableFlags);\r\n        if (value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _calculateKyberReturnWithEth(kyberNetworkContract, ETH_ADDRESS, toToken, value, disableFlags);\r\n    }\r\n\r\n    function _calculateKyberReturnWithEth(\r\n        IKyberNetworkContract kyberNetworkContract,\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256) {\r\n        require(fromToken.isETH() || toToken.isETH(), \"One of the tokens should be ETH\");\r\n\r\n        (bool success, bytes memory data) = address(kyberNetworkContract).staticcall.gas(1500000)(abi.encodeWithSelector(\r\n            kyberNetworkContract.searchBestRate.selector,\r\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n            toToken.isETH() ? ETH_ADDRESS : toToken,\r\n            amount,\r\n            true\r\n        ));\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        (address reserve, uint256 rate) = abi.decode(data, (address,uint256));\r\n\r\n        if (rate == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if ((reserve == 0x31E085Afd48a1d6e51Cc193153d625e8f0514C7F && !disableFlags.check(FLAG_ENABLE_KYBER_UNISWAP_RESERVE)) ||\r\n            (reserve == 0x1E158c0e93c30d24e918Ef83d1e0bE23595C3c0f && !disableFlags.check(FLAG_ENABLE_KYBER_OASIS_RESERVE)) ||\r\n            (reserve == 0x053AA84FCC676113a57e0EbB0bD1913839874bE4 && !disableFlags.check(FLAG_ENABLE_KYBER_BANCOR_RESERVE)))\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_ENABLE_KYBER_UNISWAP_RESERVE)) {\r\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n                IKyberUniswapReserve(reserve).uniswapFactory.selector\r\n            ));\r\n            if (success) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_ENABLE_KYBER_OASIS_RESERVE)) {\r\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n                IKyberOasisReserve(reserve).otc.selector\r\n            ));\r\n            if (success) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_ENABLE_KYBER_BANCOR_RESERVE)) {\r\n            (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n                IKyberBancorReserve(reserve).bancorEth.selector\r\n            ));\r\n            if (success) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return rate.mul(amount)\r\n            .mul(10 ** IERC20(toToken).universalDecimals())\r\n            .div(10 ** IERC20(fromToken).universalDecimals())\r\n            .div(1e18);\r\n    }\r\n\r\n    function calculateBancorReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = bancorNetworkPathFinder.generatePath(\r\n            fromToken.isETH() ? bancorEtherToken : fromToken,\r\n            toToken.isETH() ? bancorEtherToken : toToken\r\n        );\r\n\r\n        (bool success, bytes memory data) = address(bancorNetwork).staticcall.gas(500000)(\r\n            abi.encodeWithSelector(\r\n                bancorNetwork.getReturnByPath.selector,\r\n                path,\r\n                amount\r\n            )\r\n        );\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        (uint256 returnAmount,) = abi.decode(data, (uint256,uint256));\r\n        return returnAmount;\r\n    }\r\n\r\n    function calculateOasisReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 /*disableFlags*/\r\n    ) public view returns(uint256) {\r\n        (bool success, bytes memory data) = address(oasisExchange).staticcall.gas(500000)(\r\n            abi.encodeWithSelector(\r\n                oasisExchange.getBuyAmount.selector,\r\n                toToken.isETH() ? wethToken : toToken,\r\n                fromToken.isETH() ? wethToken : fromToken,\r\n                amount\r\n            )\r\n        );\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    function _calculateNoReturn(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*toToken*/,\r\n        uint256 /*amount*/,\r\n        uint256 /*disableFlags*/\r\n    ) internal view returns(uint256) {\r\n        this;\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBase is IOneSplit, OneSplitRoot {\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 /*disableFlags*/ // See constants in IOneSplit.sol\r\n    ) internal {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256) returns(uint256)[DEXES_COUNT] memory reserves = [\r\n            _swapOnUniswap,\r\n            _swapOnKyber,\r\n            _swapOnBancor,\r\n            _swapOnOasis,\r\n            _swapOnCurveCompound,\r\n            _swapOnCurveUsdt,\r\n            _swapOnCurveY,\r\n            _swapOnCurveBinance,\r\n            _swapOnCurveSynthetix,\r\n            _swapOnUniswapCompound,\r\n            _swapOnUniswapChai,\r\n            _swapOnUniswapAave\r\n        ];\r\n\r\n        require(distribution.length <= reserves.length, \"OneSplit: Distribution array should not exceed reserves array size\");\r\n\r\n        uint256 parts = 0;\r\n        uint256 lastNonZeroIndex = 0;\r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            if (distribution[i] > 0) {\r\n                parts = parts.add(distribution[i]);\r\n                lastNonZeroIndex = i;\r\n            }\r\n        }\r\n\r\n        require(parts > 0, \"OneSplit: distribution should contain non-zeros\");\r\n\r\n        uint256 remainingAmount = amount;\r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            if (distribution[i] == 0) {\r\n                continue;\r\n            }\r\n\r\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\r\n            if (i == lastNonZeroIndex) {\r\n                swapAmount = remainingAmount;\r\n            }\r\n            remainingAmount -= swapAmount;\r\n            reserves[i](fromToken, toToken, swapAmount);\r\n        }\r\n    }\r\n\r\n    // Swap helpers\r\n\r\n    function _swapOnCurveCompound(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) + (fromToken == usdc ? 2 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) + (destToken == usdc ? 2 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken, address(curveCompound));\r\n        curveCompound.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveUsdt(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken, address(curveUsdt));\r\n        curveUsdt.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveY(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == tusd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == tusd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken, address(curveY));\r\n        curveY.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveBinance(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == busd ? 4 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == busd ? 4 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken, address(curveBinance));\r\n        curveBinance.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnCurveSynthetix(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        int128 i = (fromToken == dai ? 1 : 0) +\r\n            (fromToken == usdc ? 2 : 0) +\r\n            (fromToken == usdt ? 3 : 0) +\r\n            (fromToken == tusd ? 4 : 0) +\r\n            (fromToken == susd ? 5 : 0);\r\n        int128 j = (destToken == dai ? 1 : 0) +\r\n            (destToken == usdc ? 2 : 0) +\r\n            (destToken == usdt ? 3 : 0) +\r\n            (destToken == tusd ? 4 : 0) +\r\n            (destToken == susd ? 5 : 0);\r\n        if (i == 0 || j == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (fromToken != susd && destToken != susd) {\r\n            return 0;\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken, address(curveSynthetix));\r\n        curveSynthetix.exchange_underlying(i - 1, j - 1, amount, 0);\r\n    }\r\n\r\n    function _swapOnUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n\r\n        uint256 returnAmount = amount;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange != IUniswapExchange(0)) {\r\n                _infiniteApproveIfNeeded(fromToken, address(fromExchange));\r\n                returnAmount = fromExchange.tokenToEthSwapInput(returnAmount, 1, now);\r\n            }\r\n        }\r\n\r\n        if (!toToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(toToken);\r\n            if (toExchange != IUniswapExchange(0)) {\r\n                returnAmount = toExchange.ethToTokenSwapInput.value(returnAmount)(1, now);\r\n            }\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function _swapOnUniswapCompound(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (!fromToken.isETH()) {\r\n            ICompoundToken fromCompound = _getCompoundToken(fromToken);\r\n            _infiniteApproveIfNeeded(fromToken, address(fromCompound));\r\n            fromCompound.mint(amount);\r\n            return _swapOnUniswap(IERC20(fromCompound), toToken, IERC20(fromCompound).universalBalanceOf(address(this)));\r\n        }\r\n\r\n        if (!toToken.isETH()) {\r\n            ICompoundToken toCompound = _getCompoundToken(toToken);\r\n            uint256 compoundAmount = _swapOnUniswap(fromToken, IERC20(toCompound), amount);\r\n            toCompound.redeem(compoundAmount);\r\n            return toToken.universalBalanceOf(address(this));\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _swapOnUniswapChai(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken == dai) {\r\n            _infiniteApproveIfNeeded(fromToken, address(chai));\r\n            chai.join(address(this), amount);\r\n            return _swapOnUniswap(IERC20(chai), toToken, IERC20(chai).universalBalanceOf(address(this)));\r\n        }\r\n\r\n        if (toToken == dai) {\r\n            uint256 chaiAmount = _swapOnUniswap(fromToken, IERC20(chai), amount);\r\n            chai.exit(address(this), chaiAmount);\r\n            return toToken.universalBalanceOf(address(this));\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _swapOnUniswapAave(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (!fromToken.isETH()) {\r\n            IAaveToken fromAave = _getAaveToken(fromToken);\r\n            _infiniteApproveIfNeeded(fromToken, address(fromAave));\r\n            aave.deposit(fromToken, amount, 1101);\r\n            return _swapOnUniswap(IERC20(fromAave), toToken, IERC20(fromAave).universalBalanceOf(address(this)));\r\n        }\r\n\r\n        if (!toToken.isETH()) {\r\n            IAaveToken toAave = _getAaveToken(toToken);\r\n            uint256 aaveAmount = _swapOnUniswap(fromToken, IERC20(toAave), amount);\r\n            toAave.redeem(aaveAmount);\r\n            return aaveAmount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _swapOnKyber(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        _infiniteApproveIfNeeded(fromToken, address(kyberNetworkProxy));\r\n        return kyberNetworkProxy.tradeWithHint.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n            amount,\r\n            toToken.isETH() ? ETH_ADDRESS : toToken,\r\n            address(this),\r\n            1 << 255,\r\n            0,\r\n            0x4D37f28D2db99e8d35A6C725a5f1749A085850a3,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function _swapOnBancor(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken.isETH()) {\r\n            bancorEtherToken.deposit.value(amount)();\r\n        }\r\n\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = bancorNetworkPathFinder.generatePath(\r\n            fromToken.isETH() ? bancorEtherToken : fromToken,\r\n            toToken.isETH() ? bancorEtherToken : toToken\r\n        );\r\n\r\n        _infiniteApproveIfNeeded(fromToken.isETH() ? bancorEtherToken : fromToken, address(bancorNetwork));\r\n        uint256 returnAmount = bancorNetwork.claimAndConvert(path, amount, 1);\r\n\r\n        if (toToken.isETH()) {\r\n            bancorEtherToken.withdraw(bancorEtherToken.balanceOf(address(this)));\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function _swapOnOasis(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken.isETH()) {\r\n            wethToken.deposit.value(amount)();\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken.isETH() ? wethToken : fromToken, address(oasisExchange));\r\n        uint256 returnAmount = oasisExchange.sellAllAmount(\r\n            fromToken.isETH() ? wethToken : fromToken,\r\n            amount,\r\n            toToken.isETH() ? wethToken : toToken,\r\n            1\r\n        );\r\n\r\n        if (toToken.isETH()) {\r\n            wethToken.withdraw(wethToken.balanceOf(address(this)));\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitMultiPath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract OneSplitMultiPathView is OneSplitBaseView {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns (\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!fromToken.isETH() && !toToken.isETH() && disableFlags.check(FLAG_ENABLE_MULTI_PATH_ETH)) {\r\n            (returnAmount, distribution) = super.getExpectedReturn(\r\n                fromToken,\r\n                ETH_ADDRESS,\r\n                amount,\r\n                parts,\r\n                disableFlags | FLAG_DISABLE_BANCOR | FLAG_DISABLE_CURVE_COMPOUND | FLAG_DISABLE_CURVE_USDT | FLAG_DISABLE_CURVE_Y | FLAG_DISABLE_CURVE_BINANCE\r\n            );\r\n\r\n            uint256[] memory dist;\r\n            (returnAmount, dist) = super.getExpectedReturn(\r\n                ETH_ADDRESS,\r\n                toToken,\r\n                returnAmount,\r\n                parts,\r\n                disableFlags | FLAG_DISABLE_BANCOR | FLAG_DISABLE_CURVE_COMPOUND | FLAG_DISABLE_CURVE_USDT | FLAG_DISABLE_CURVE_Y | FLAG_DISABLE_CURVE_BINANCE\r\n            );\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                distribution[i] = distribution[i].add(dist[i] << 8);\r\n            }\r\n            return (returnAmount, distribution);\r\n        }\r\n\r\n        if (fromToken != dai && toToken != dai && disableFlags.check(FLAG_ENABLE_MULTI_PATH_DAI)) {\r\n            (returnAmount, distribution) = super.getExpectedReturn(\r\n                fromToken,\r\n                dai,\r\n                amount,\r\n                parts,\r\n                disableFlags\r\n            );\r\n\r\n            uint256[] memory dist;\r\n            (returnAmount, dist) = super.getExpectedReturn(\r\n                dai,\r\n                toToken,\r\n                returnAmount,\r\n                parts,\r\n                disableFlags\r\n            );\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                distribution[i] = distribution[i].add(dist[i] << 8);\r\n            }\r\n            return (returnAmount, distribution);\r\n        }\r\n\r\n        if (fromToken != usdc && toToken != usdc && disableFlags.check(FLAG_ENABLE_MULTI_PATH_USDC)) {\r\n            (returnAmount, distribution) = super.getExpectedReturn(\r\n                fromToken,\r\n                usdc,\r\n                amount,\r\n                parts,\r\n                disableFlags\r\n            );\r\n\r\n            uint256[] memory dist;\r\n            (returnAmount, dist) = super.getExpectedReturn(\r\n                usdc,\r\n                toToken,\r\n                returnAmount,\r\n                parts,\r\n                disableFlags\r\n            );\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                distribution[i] = distribution[i].add(dist[i] << 8);\r\n            }\r\n            return (returnAmount, distribution);\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitMultiPath is OneSplitBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        if (!fromToken.isETH() && !toToken.isETH() && disableFlags.check(FLAG_ENABLE_MULTI_PATH_ETH)) {\r\n            uint256[] memory dist = new uint256[](distribution.length);\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = distribution[i] & 0xFF;\r\n            }\r\n            super._swap(\r\n                fromToken,\r\n                ETH_ADDRESS,\r\n                amount,\r\n                dist,\r\n                disableFlags\r\n            );\r\n\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = (distribution[i] >> 8) & 0xFF;\r\n            }\r\n            super._swap(\r\n                ETH_ADDRESS,\r\n                toToken,\r\n                address(this).balance,\r\n                dist,\r\n                disableFlags\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (fromToken != dai && toToken != dai && disableFlags.check(FLAG_ENABLE_MULTI_PATH_DAI)) {\r\n            uint256[] memory dist = new uint256[](distribution.length);\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = distribution[i] & 0xFF;\r\n            }\r\n            super._swap(\r\n                fromToken,\r\n                dai,\r\n                amount,\r\n                dist,\r\n                disableFlags\r\n            );\r\n\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = (distribution[i] >> 8) & 0xFF;\r\n            }\r\n            super._swap(\r\n                dai,\r\n                toToken,\r\n                dai.balanceOf(address(this)),\r\n                dist,\r\n                disableFlags\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (fromToken != usdc && toToken != usdc && disableFlags.check(FLAG_ENABLE_MULTI_PATH_USDC)) {\r\n            uint256[] memory dist = new uint256[](distribution.length);\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = distribution[i] & 0xFF;\r\n            }\r\n            super._swap(\r\n                fromToken,\r\n                usdc,\r\n                amount,\r\n                dist,\r\n                disableFlags\r\n            );\r\n\r\n            for (uint i = 0; i < distribution.length; i++) {\r\n                dist[i] = (distribution[i] >> 8) & 0xFF;\r\n            }\r\n            super._swap(\r\n                usdc,\r\n                toToken,\r\n                usdc.balanceOf(address(this)),\r\n                dist,\r\n                disableFlags\r\n            );\r\n            return;\r\n        }\r\n\r\n        super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitCompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitCompoundBase {\r\n    ICompound public compound = ICompound(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    ICompoundEther public cETH = ICompoundEther(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n\r\n    function _isCompoundToken(IERC20 token) internal view returns(bool) {\r\n        if (token == cETH) {\r\n            return true;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(compound).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            compound.markets.selector,\r\n            token\r\n        ));\r\n        if (!success) {\r\n            return false;\r\n        }\r\n\r\n        (bool isListed,) = abi.decode(data, (bool,uint256));\r\n        return isListed;\r\n    }\r\n\r\n    function _compoundUnderlyingAsset(IERC20 asset) internal view returns(IERC20) {\r\n        if (asset == cETH) {\r\n            return IERC20(address(0));\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(asset).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            ICompoundToken(address(asset)).underlying.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitCompoundView is OneSplitBaseView, OneSplitCompoundBase {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _compoundGetExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _compoundGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        private\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_COMPOUND)) {\r\n            if (_isCompoundToken(fromToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(fromToken);\r\n                if (underlying != IERC20(-1)) {\r\n                    uint256 compoundRate = ICompoundToken(address(fromToken)).exchangeRateStored();\r\n\r\n                    return _compoundGetExpectedReturn(\r\n                        underlying,\r\n                        toToken,\r\n                        amount.mul(compoundRate).div(1e18),\r\n                        parts,\r\n                        disableFlags\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (_isCompoundToken(toToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(toToken);\r\n                if (underlying != IERC20(-1)) {\r\n                    uint256 compoundRate = ICompoundToken(address(toToken)).exchangeRateStored();\r\n\r\n                    (returnAmount, distribution) = super.getExpectedReturn(\r\n                        fromToken,\r\n                        underlying,\r\n                        amount,\r\n                        parts,\r\n                        disableFlags\r\n                    );\r\n\r\n                    returnAmount = returnAmount.mul(1e18).div(compoundRate);\r\n                    return (returnAmount, distribution);\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitCompound is OneSplitBase, OneSplitCompoundBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        _compundSwap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _compundSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) private {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_COMPOUND)) {\r\n            if (_isCompoundToken(fromToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(fromToken);\r\n\r\n                ICompoundToken(address(fromToken)).redeem(amount);\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return _compundSwap(\r\n                    underlying,\r\n                    toToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (_isCompoundToken(toToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(toToken);\r\n\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    cETH.mint.value(underlyingAmount)();\r\n                } else {\r\n                    _infiniteApproveIfNeeded(underlying, address(toToken));\r\n                    ICompoundToken(address(toToken)).mint(underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IFulcrumToken is IERC20 {\r\n    function tokenPrice() external view returns (uint256);\r\n\r\n    function loanTokenAddress() external view returns (address);\r\n\r\n    function mintWithEther(address receiver) external payable returns (uint256 mintAmount);\r\n\r\n    function mint(address receiver, uint256 depositAmount) external returns (uint256 mintAmount);\r\n\r\n    function burnToEther(address receiver, uint256 burnAmount)\r\n        external\r\n        returns (uint256 loanAmountPaid);\r\n\r\n    function burn(address receiver, uint256 burnAmount) external returns (uint256 loanAmountPaid);\r\n}\r\n\r\n// File: contracts/OneSplitFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract OneSplitFulcrumBase {\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function _isFulcrumToken(IERC20 token) public view returns(IERC20) {\r\n        if (token.isETH()) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            ERC20Detailed(address(token)).name.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        bool foundBZX = false;\r\n        for (uint i = 0; i + 6 < data.length; i++) {\r\n            if (data[i + 0] == \"F\" &&\r\n                data[i + 1] == \"u\" &&\r\n                data[i + 2] == \"l\" &&\r\n                data[i + 3] == \"c\" &&\r\n                data[i + 4] == \"r\" &&\r\n                data[i + 5] == \"u\" &&\r\n                data[i + 6] == \"m\")\r\n            {\r\n                foundBZX = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundBZX) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            IFulcrumToken(address(token)).loanTokenAddress.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitFulcrumView is OneSplitBaseView, OneSplitFulcrumBase {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _fulcrumGetExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _fulcrumGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        private\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 fulcrumRate = IFulcrumToken(address(fromToken)).tokenPrice();\r\n\r\n                return _fulcrumGetExpectedReturn(\r\n                    underlying,\r\n                    toToken,\r\n                    amount.mul(fulcrumRate).div(1e18),\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isFulcrumToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 fulcrumRate = IFulcrumToken(address(toToken)).tokenPrice();\r\n\r\n                (returnAmount, distribution) = super.getExpectedReturn(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n\r\n                returnAmount = returnAmount.mul(1e18).div(fulcrumRate);\r\n                return (returnAmount, distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitFulcrum is OneSplitBase, OneSplitFulcrumBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        _fulcrumSwap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _fulcrumSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) private {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(fromToken)).burnToEther(address(this), amount);\r\n                } else {\r\n                    IFulcrumToken(address(fromToken)).burn(address(this), amount);\r\n                }\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return super._swap(\r\n                    underlying,\r\n                    toToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isFulcrumToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(toToken)).mintWithEther.value(underlyingAmount)(address(this));\r\n                } else {\r\n                    _infiniteApproveIfNeeded(underlying, address(toToken));\r\n                    IFulcrumToken(address(toToken)).mint(address(this), underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitChaiView is OneSplitBaseView {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                return super.getExpectedReturn(\r\n                    dai,\r\n                    toToken,\r\n                    chai.chaiToDai(amount),\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (toToken == IERC20(chai)) {\r\n                (returnAmount, distribution) = super.getExpectedReturn(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n                return (chai.daiToChai(returnAmount), distribution);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitChai is OneSplitBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                chai.exit(address(this), amount);\r\n\r\n                return super._swap(\r\n                    dai,\r\n                    toToken,\r\n                    dai.balanceOf(address(this)),\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (toToken == IERC20(chai)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                _infiniteApproveIfNeeded(dai, address(chai));\r\n                chai.join(address(this), dai.balanceOf(address(this)));\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IBdai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBdai is IERC20 {\r\n    function join(uint256) external;\r\n\r\n    function exit(uint256) external;\r\n}\r\n\r\n// File: contracts/OneSplitBdai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitBdaiBase {\r\n    IBdai public bdai = IBdai(0x6a4FFAafa8DD400676Df8076AD6c724867b0e2e8);\r\n    IERC20 public btu = IERC20(0xb683D83a532e2Cb7DFa5275eED3698436371cc9f);\r\n}\r\n\r\n\r\ncontract OneSplitBdaiView is OneSplitBaseView, OneSplitBdaiBase {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns (uint256 returnAmount, uint256[] memory distribution)\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_BDAI)) {\r\n            if (fromToken == IERC20(bdai)) {\r\n                return super.getExpectedReturn(\r\n                    dai,\r\n                    toToken,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (toToken == IERC20(bdai)) {\r\n                return super.getExpectedReturn(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitBdai is OneSplitBase, OneSplitBdaiBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_BDAI)) {\r\n            if (fromToken == IERC20(bdai)) {\r\n                bdai.exit(amount);\r\n\r\n                uint256 btuBalance = btu.balanceOf(address(this));\r\n                if (btuBalance > 0) {\r\n                    (,uint256[] memory btuDistribution) = getExpectedReturn(\r\n                        btu,\r\n                        toToken,\r\n                        btuBalance,\r\n                        1,\r\n                        disableFlags\r\n                    );\r\n\r\n                    _swap(\r\n                        btu,\r\n                        toToken,\r\n                        btuBalance,\r\n                        btuDistribution,\r\n                        disableFlags\r\n                    );\r\n                }\r\n\r\n                return super._swap(\r\n                    dai,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (toToken == IERC20(bdai)) {\r\n                super._swap(fromToken, dai, amount, distribution, disableFlags);\r\n\r\n                _infiniteApproveIfNeeded(dai, address(bdai));\r\n                bdai.join(dai.balanceOf(address(this)));\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, toToken, amount, distribution, disableFlags);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IIearn.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IIearn is IERC20 {\r\n    function token() external view returns(IERC20);\r\n\r\n    function calcPoolValueInToken() external view returns(uint256);\r\n\r\n    function deposit(uint256 _amount) external;\r\n\r\n    function withdraw(uint256 _shares) external;\r\n}\r\n\r\n// File: contracts/OneSplitIearn.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitIearnBase {\r\n    function _yTokens() internal pure returns(IIearn[10] memory) {\r\n        return [\r\n            IIearn(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01),\r\n            IIearn(0x04Aa51bbcB46541455cCF1B8bef2ebc5d3787EC9),\r\n            IIearn(0x73a052500105205d34Daf004eAb301916DA8190f),\r\n            IIearn(0x83f798e925BcD4017Eb265844FDDAbb448f1707D),\r\n            IIearn(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e),\r\n            IIearn(0xF61718057901F84C4eEC4339EF8f0D86D2B45600),\r\n            IIearn(0x04bC0Ab673d88aE9dbC9DA2380cB6B79C4BCa9aE),\r\n            IIearn(0xC2cB1040220768554cf699b0d863A3cd4324ce32),\r\n            IIearn(0xE6354ed5bC4b393a5Aad09f21c46E101e692d447),\r\n            IIearn(0x26EA744E5B887E5205727f55dFBE8685e3b21951)\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIearnView is OneSplitBaseView, OneSplitIearnBase {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns (uint256 returnAmount, uint256[] memory distribution)\r\n    {\r\n        return _iearnGetExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _iearnGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        private\r\n        returns (uint256 returnAmount, uint256[] memory distribution)\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        IIearn[10] memory yTokens = _yTokens();\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_IEARN)) {\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (fromToken == IERC20(yTokens[i])) {\r\n                    return _iearnGetExpectedReturn(\r\n                        yTokens[i].token(),\r\n                        toToken,\r\n                        amount\r\n                            .mul(yTokens[i].calcPoolValueInToken())\r\n                            .div(yTokens[i].totalSupply()),\r\n                        parts,\r\n                        disableFlags\r\n                    );\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (toToken == IERC20(yTokens[i])) {\r\n                    (uint256 ret, uint256[] memory dist) = super.getExpectedReturn(\r\n                        fromToken,\r\n                        yTokens[i].token(),\r\n                        amount,\r\n                        parts,\r\n                        disableFlags\r\n                    );\r\n\r\n                    return (\r\n                        ret\r\n                            .mul(yTokens[i].totalSupply())\r\n                            .div(yTokens[i].calcPoolValueInToken()),\r\n                        dist\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIearn is OneSplitBase, OneSplitIearnBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        _iearnSwap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _iearnSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) private {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        IIearn[10] memory yTokens = _yTokens();\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_IEARN)) {\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (fromToken == IERC20(yTokens[i])) {\r\n                    IERC20 underlying = yTokens[i].token();\r\n                    yTokens[i].withdraw(amount);\r\n                    _iearnSwap(underlying, toToken, underlying.balanceOf(address(this)), distribution, disableFlags);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < yTokens.length; i++) {\r\n                if (toToken == IERC20(yTokens[i])) {\r\n                    IERC20 underlying = yTokens[i].token();\r\n                    super._swap(fromToken, underlying, amount, distribution, disableFlags);\r\n                    _infiniteApproveIfNeeded(underlying, address(yTokens[i]));\r\n                    yTokens[i].deposit(underlying.balanceOf(address(this)));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return super._swap(fromToken, toToken, amount, distribution, disableFlags);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IIdle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IIdle is IERC20 {\r\n    function token()\r\n        external view returns (IERC20);\r\n\r\n    function tokenPrice()\r\n        external view returns (uint256);\r\n\r\n    function mintIdleToken(uint256 _amount, uint256[] calldata _clientProtocolAmounts)\r\n        external returns (uint256 mintedTokens);\r\n\r\n    function redeemIdleToken(uint256 _amount, bool _skipRebalance, uint256[] calldata _clientProtocolAmounts)\r\n        external returns (uint256 redeemedTokens);\r\n}\r\n\r\n// File: contracts/OneSplitIdle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitIdleBase {\r\n\r\n    OneSplitIdleExtension internal idleExt;\r\n\r\n    constructor(address payable ext) public {\r\n        idleExt = OneSplitIdleExtension(ext);\r\n    }\r\n\r\n    function _idleTokens() internal pure returns(IIdle[2] memory) {\r\n        return [\r\n            IIdle(0x10eC0D497824e342bCB0EDcE00959142aAa766dD),\r\n            IIdle(0xeB66ACc3d011056B00ea521F8203580C2E5d3991)\r\n        ];\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdleView is OneSplitBaseView, OneSplitIdleBase {\r\n\r\n    constructor(address payable ext) public OneSplitIdleBase(ext) {\r\n    }\r\n\r\n    function _superOneSplitIdleViewGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        external\r\n        returns (uint256 returnAmount, uint256[] memory distribution)\r\n    {\r\n        require(msg.sender == address(this));\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns (uint256 /*returnAmount*/, uint256[] memory /*distribution*/)\r\n    {\r\n        if (disableFlags.check(FLAG_DISABLE_IDLE)) {\r\n            return super.getExpectedReturn(\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                parts,\r\n                disableFlags\r\n            );\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(idleExt).delegatecall(\r\n            abi.encodeWithSelector(\r\n                idleExt._idleGetExpectedReturn.selector,\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                parts,\r\n                disableFlags\r\n            )\r\n        );\r\n\r\n        assembly {\r\n            switch success\r\n                // delegatecall returns 0 on error.\r\n                case 0 { revert(add(data, 32), returndatasize) }\r\n                default { return(add(data, 32), returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdle is OneSplitBase, OneSplitIdleBase {\r\n\r\n    constructor(address payable ext) public OneSplitIdleBase(ext) {\r\n    }\r\n\r\n    function _superOneSplitIdleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] calldata distribution,\r\n        uint256 disableFlags\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender == address(this));\r\n        return super._swap(fromToken, toToken, amount, distribution, disableFlags);\r\n    }\r\n\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        _idleSwap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _idleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) private {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (disableFlags.check(FLAG_DISABLE_IDLE)) {\r\n            super._swap(fromToken, toToken, amount, distribution, disableFlags);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(idleExt).delegatecall(\r\n            abi.encodeWithSelector(\r\n                idleExt._idleSwap.selector,\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                distribution,\r\n                disableFlags\r\n            )\r\n        );\r\n\r\n        assembly {\r\n            switch success\r\n                // delegatecall returns 0 on error.\r\n                case 0 { revert(add(data, 32), returndatasize) }\r\n                default { return(add(data, 32), returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitIdleExtension is IOneSplitConsts, OneSplitRoot, OneSplitIdleBase(address(0)) {\r\n    function _superOneSplitIdleViewGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        external\r\n        returns (uint256 returnAmount, uint256[] memory distribution)\r\n    {\r\n        // No need to implement\r\n    }\r\n\r\n    function _superOneSplitIdleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] calldata distribution,\r\n        uint256 disableFlags\r\n    )\r\n        external\r\n    {\r\n        // No need to implement\r\n    }\r\n\r\n    function _idleGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        public\r\n        returns (uint256 returnAmount, uint256[] memory distribution)\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        IIdle[2] memory tokens = _idleTokens();\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (fromToken == IERC20(tokens[i])) {\r\n                return _idleGetExpectedReturn(\r\n                    tokens[i].token(),\r\n                    toToken,\r\n                    amount.mul(tokens[i].tokenPrice()).div(1e18),\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n        }\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (toToken == IERC20(tokens[i])) {\r\n                (uint256 ret, uint256[] memory dist) = this._superOneSplitIdleViewGetExpectedReturn(\r\n                    fromToken,\r\n                    tokens[i].token(),\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n\r\n                return (\r\n                    ret.mul(1e18).div(tokens[i].tokenPrice()),\r\n                    dist\r\n                );\r\n            }\r\n        }\r\n\r\n        return this._superOneSplitIdleViewGetExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _idleSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) public {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        IIdle[2] memory tokens = _idleTokens();\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_IDLE)) {\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (fromToken == IERC20(tokens[i])) {\r\n                    IERC20 underlying = tokens[i].token();\r\n                    uint256 minted = tokens[i].redeemIdleToken(amount, true, new uint256[](0));\r\n                    _idleSwap(underlying, toToken, minted, distribution, disableFlags);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                if (toToken == IERC20(tokens[i])) {\r\n                    IERC20 underlying = tokens[i].token();\r\n                    this._superOneSplitIdleSwap(fromToken, underlying, amount, distribution, disableFlags);\r\n                    _infiniteApproveIfNeeded(underlying, address(tokens[i]));\r\n                    tokens[i].mintIdleToken(underlying.balanceOf(address(this)), new uint256[](0));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._superOneSplitIdleSwap(fromToken, toToken, amount, distribution, disableFlags);\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitAave.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract OneSplitAaveBase {\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function _isAaveToken(IERC20 token) public view returns(IERC20) {\r\n        if (token.isETH()) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            ERC20Detailed(address(token)).name.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        bool foundAave = false;\r\n        for (uint i = 0; i + 3 < data.length; i++) {\r\n            if (data[i + 0] == \"A\" &&\r\n                data[i + 1] == \"a\" &&\r\n                data[i + 2] == \"v\" &&\r\n                data[i + 3] == \"e\")\r\n            {\r\n                foundAave = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundAave) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            IAaveToken(address(token)).underlyingAssetAddress.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitAaveView is OneSplitBaseView, OneSplitAaveBase {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _aaveGetExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _aaveGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        private\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, distribution);\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_AAVE)) {\r\n            IERC20 underlying = _isAaveToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                return _aaveGetExpectedReturn(\r\n                    underlying,\r\n                    toToken,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isAaveToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                return super.getExpectedReturn(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitAave is OneSplitBase, OneSplitAaveBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        _aaveSwap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _aaveSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) private {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_AAVE)) {\r\n            IERC20 underlying = _isAaveToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                IAaveToken(address(fromToken)).redeem(amount);\r\n\r\n                return _aaveSwap(\r\n                    underlying,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isAaveToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                super._swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                _infiniteApproveIfNeeded(underlying, aave.core());\r\n                aave.deposit.value(underlying.isETH() ? underlyingAmount : 0)(\r\n                    underlying.isETH() ? ETH_ADDRESS : underlying,\r\n                    underlyingAmount,\r\n                    1101\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplitWeth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract OneSplitWethView is OneSplitBaseView {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        return _wethGetExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _wethGetExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        private\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_WETH)) {\r\n            if (fromToken == wethToken || fromToken == bancorEtherToken) {\r\n                return super.getExpectedReturn(ETH_ADDRESS, toToken, amount, parts, disableFlags);\r\n            }\r\n\r\n            if (toToken == wethToken || toToken == bancorEtherToken) {\r\n                return super.getExpectedReturn(fromToken, ETH_ADDRESS, amount, parts, disableFlags);\r\n            }\r\n        }\r\n\r\n        return super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplitWeth is OneSplitBase {\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) internal {\r\n        _wethSwap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    function _wethSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) private {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (!disableFlags.check(FLAG_DISABLE_WETH)) {\r\n            if (fromToken == wethToken) {\r\n                wethToken.withdraw(wethToken.balanceOf(address(this)));\r\n                super._swap(\r\n                    ETH_ADDRESS,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (fromToken == bancorEtherToken) {\r\n                bancorEtherToken.withdraw(bancorEtherToken.balanceOf(address(this)));\r\n                super._swap(\r\n                    ETH_ADDRESS,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (toToken == wethToken) {\r\n                _wethSwap(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n                wethToken.deposit.value(address(this).balance)();\r\n                return;\r\n            }\r\n\r\n            if (toToken == bancorEtherToken) {\r\n                _wethSwap(\r\n                    fromToken,\r\n                    ETH_ADDRESS,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n                bancorEtherToken.deposit.value(address(this).balance)();\r\n                return;\r\n            }\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import \"./OneSplitSmartToken.sol\";\r\n\r\n\r\ncontract OneSplitView is\r\n    IOneSplitView,\r\n    OneSplitBaseView,\r\n    OneSplitMultiPathView,\r\n    OneSplitChaiView,\r\n    OneSplitBdaiView,\r\n    OneSplitAaveView,\r\n    OneSplitFulcrumView,\r\n    OneSplitCompoundView,\r\n    OneSplitIearnView,\r\n    OneSplitIdleView(0x2E9Cd3Dc69E20042Df5F52ED62Dd6183fe42d835),\r\n    OneSplitWethView\r\n    //OneSplitSmartTokenView\r\n{\r\n    function() external {\r\n        if (msg.sig == IOneSplit(0).getExpectedReturn.selector) {\r\n            (\r\n                ,\r\n                IERC20 fromToken,\r\n                IERC20 toToken,\r\n                uint256 amount,\r\n                uint256 parts,\r\n                uint256 disableFlags\r\n            ) = abi.decode(\r\n                abi.encodePacked(bytes28(0), msg.data),\r\n                (uint256,IERC20,IERC20,uint256,uint256,uint256)\r\n            );\r\n\r\n            (\r\n                uint256 returnAmount,\r\n                uint256[] memory distribution\r\n            ) = getExpectedReturn(\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                parts,\r\n                disableFlags\r\n            );\r\n\r\n            bytes memory result = abi.encodePacked(returnAmount, distribution);\r\n            assembly {\r\n                return(add(result, 32), sload(result))\r\n            }\r\n        }\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        internal\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        )\r\n    {\r\n        if (fromToken == toToken) {\r\n            return (amount, new uint256[](DEXES_COUNT));\r\n        }\r\n\r\n        super.getExpectedReturn(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            parts,\r\n            disableFlags\r\n        );\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplit is\r\n    OneSplitBase,\r\n    OneSplitMultiPath,\r\n    OneSplitChai,\r\n    OneSplitBdai,\r\n    OneSplitAave,\r\n    OneSplitFulcrum,\r\n    OneSplitCompound,\r\n    OneSplitIearn,\r\n    OneSplitIdle(0x2E9Cd3Dc69E20042Df5F52ED62Dd6183fe42d835),\r\n    OneSplitWeth\r\n    //OneSplitSmartToken\r\n{\r\n    IOneSplitView public oneSplitView;\r\n\r\n    constructor(IOneSplitView _oneSplitView) public {\r\n        oneSplitView = _oneSplitView;\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 /*returnAmount*/,\r\n            uint256[] memory /*distribution*/\r\n        )\r\n    {\r\n        (bool success, bytes memory data) = address(oneSplitView).staticcall(\r\n            abi.encodeWithSelector(\r\n                this.getExpectedReturn.selector,\r\n                fromToken,\r\n                toToken,\r\n                amount,\r\n                parts,\r\n                disableFlags\r\n            )\r\n        );\r\n\r\n        assembly {\r\n            switch success\r\n                // delegatecall returns 0 on error.\r\n                case 0 { revert(add(data, 32), returndatasize) }\r\n                default { return(add(data, 32), returndatasize) }\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) public payable {\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _swap(fromToken, toToken, amount, distribution, disableFlags);\r\n\r\n        uint256 returnAmount = toToken.universalBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        toToken.universalTransfer(msg.sender, returnAmount);\r\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\r\n    }\r\n\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken, 1024 - bDAI\r\n    ) internal {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        return super._swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    // DEPERECATED:\r\n\r\n    function getAllRatesForDEX(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256[] memory results) {\r\n        results = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            (results[i],) = getExpectedReturn(\r\n                fromToken,\r\n                toToken,\r\n                amount.mul(i + 1).div(parts),\r\n                1,\r\n                disableFlags\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"DEXES_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_AAVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_BANCOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_BDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_CHAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_CURVE_BINANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_CURVE_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_CURVE_SYNTHETIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_CURVE_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_CURVE_Y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_FULCRUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_IDLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_IEARN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_KYBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_OASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_SMART_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_UNISWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_DISABLE_WETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_KYBER_BANCOR_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_KYBER_OASIS_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_KYBER_UNISWAP_RESERVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_MULTI_PATH_DAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_MULTI_PATH_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_MULTI_PATH_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_UNISWAP_AAVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_UNISWAP_CHAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_ENABLE_UNISWAP_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"_idleGetExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"_idleSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"_superOneSplitIdleSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"_superOneSplitIdleViewGetExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"contract IAaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorContractRegistry\",\"outputs\":[{\"internalType\":\"contract IBancorContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorEtherToken\",\"outputs\":[{\"internalType\":\"contract IBancorEtherToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"contract IChai\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveBinance\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveCompound\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveSynthetix\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveUsdt\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveY\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxy\",\"outputs\":[{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oasisExchange\",\"outputs\":[{\"internalType\":\"contract IOasisExchange\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"susd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tusd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OneSplitIdleExtension","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a0b9bc81a23b69998cc485b794f0c7a2e55e7f5483c3e88bdcd2add0fb7022f3"}]}