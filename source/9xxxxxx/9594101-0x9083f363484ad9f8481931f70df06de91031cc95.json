{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Project Society Construction and Terraforming Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka)\r\n *\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Core Blockchain Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka) by\r\n * [Basic Agreement](ipfs/QmaCiXUmSrP16Gz8Jdzq6AJESY1EAANmmwha15uR3c1bsS)).\r\n * \r\n * üåé Galt Project is an international decentralized land and real estate property registry\r\n * governed by DAO (Decentralized autonomous organization) and self-governance platform for communities\r\n * of homeowners on Ethereum.\r\n * \r\n * üè° https://galtproject.io\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IPPTokenController {\r\n  event Mint(address indexed to, uint256 indexed tokenId);\r\n  event SetGeoDataManager(address indexed geoDataManager);\r\n  event SetContourVerificationManager(address indexed contourVerificationManager);\r\n  event SetFeeManager(address indexed feeManager);\r\n  event SetFeeCollector(address indexed feeCollector);\r\n  event ReportCVMisbehaviour(uint256 tokenId);\r\n  event NewProposal(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId,\r\n    address indexed creator\r\n  );\r\n  event ProposalExecuted(uint256 indexed proposalId);\r\n  event ProposalExecutionFailed(uint256 indexed proposalId);\r\n  event ProposalApproval(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalRejection(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event ProposalCancellation(\r\n    uint256 indexed proposalId,\r\n    uint256 indexed tokenId\r\n  );\r\n  event SetMinter(address indexed minter);\r\n  event SetBurner(address indexed burner);\r\n  event SetBurnTimeout(uint256 indexed tokenId, uint256 timeout);\r\n  event InitiateTokenBurn(uint256 indexed tokenId, uint256 timeoutAt);\r\n  event BurnTokenByTimeout(uint256 indexed tokenId);\r\n  event CancelTokenBurn(uint256 indexed tokenId);\r\n  event SetFee(bytes32 indexed key, uint256 value);\r\n  event WithdrawEth(address indexed to, uint256 amount);\r\n  event WithdrawErc20(address indexed to, address indexed tokenAddress, uint256 amount);\r\n  event UpdateContourUpdatedAt(uint256 indexed tokenId, uint256 timestamp);\r\n  event UpdateDetailsUpdatedAt(uint256 indexed tokenId, uint256 timestamp);\r\n\r\n  enum PropertyInitialSetupStage {\r\n    PENDING,\r\n    DETAILS,\r\n    DONE\r\n  }\r\n\r\n  function contourVerificationManager() external view returns (address);\r\n  function fees(bytes32) external view returns (uint256);\r\n  function setBurner(address _burner) external;\r\n  function setGeoDataManager(address _geoDataManager) external;\r\n  function setFeeManager(address _feeManager) external;\r\n  function setFeeCollector(address _feeCollector) external;\r\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external;\r\n  function setFee(bytes32 _key, uint256 _value) external;\r\n  function withdrawErc20(address _tokenAddress, address _to) external;\r\n  function withdrawEth(address payable _to) external;\r\n  function initiateTokenBurn(uint256 _tokenId) external;\r\n  function cancelTokenBurn(uint256 _tokenId) external;\r\n  function burnTokenByTimeout(uint256 _tokenId) external;\r\n  function reportCVMisbehaviour(uint256 _tokenId) external;\r\n  function propose(bytes calldata _data, string calldata _dataLink) external payable;\r\n  function approve(uint256 _proposalId) external;\r\n  function execute(uint256 _proposalId) external;\r\n  function fetchTokenId(bytes calldata _data) external pure returns (uint256 tokenId);\r\n  function() external payable;\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ninterface IPPToken {\r\n  event SetBaseURI(string baseURI);\r\n  event SetContractDataLink(string indexed dataLink);\r\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\r\n  event SetController(address indexed controller);\r\n  event SetDetails(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetContour(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetHumanAddress(uint256 indexed tokenId, string humanAddress);\r\n  event SetDataLink(uint256 indexed tokenId, string dataLink);\r\n  event SetLedgerIdentifier(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexRootHash(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexStorageLink(uint256 indexed tokenId, string vertexStorageLink);\r\n  event SetArea(uint256 indexed tokenId, uint256 area, AreaSource areaSource);\r\n  event SetExtraData(bytes32 indexed key, bytes32 value);\r\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\r\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\r\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\r\n\r\n  enum AreaSource {\r\n    USER_INPUT,\r\n    CONTRACT\r\n  }\r\n\r\n  enum TokenType {\r\n    NULL,\r\n    LAND_PLOT,\r\n    BUILDING,\r\n    ROOM,\r\n    PACKAGE\r\n  }\r\n\r\n  struct Property {\r\n    uint256 setupStage;\r\n\r\n    // (LAND_PLOT,BUILDING,ROOM) Type cannot be changed after token creation\r\n    TokenType tokenType;\r\n    // Geohash5z (x,y,z)\r\n    uint256[] contour;\r\n    // Meters above the sea\r\n    int256 highestPoint;\r\n\r\n    // USER_INPUT or CONTRACT\r\n    AreaSource areaSource;\r\n    // Calculated either by contract (for land plots and buildings) or by manual input\r\n    // in sq. meters (1 sq. meter == 1 eth)\r\n    uint256 area;\r\n\r\n    bytes32 ledgerIdentifier;\r\n    string humanAddress;\r\n    string dataLink;\r\n\r\n    // Reserved for future use\r\n    bytes32 vertexRootHash;\r\n    string vertexStorageLink;\r\n  }\r\n\r\n  // PERMISSIONED METHODS\r\n\r\n  function setContractDataLink(string calldata _dataLink) external;\r\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\r\n  function setController(address payable _controller) external;\r\n  function setDetails(\r\n    uint256 _tokenId,\r\n    TokenType _tokenType,\r\n    AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink\r\n  )\r\n    external;\r\n\r\n  function setContour(\r\n    uint256 _tokenId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external;\r\n\r\n  function setArea(uint256 _tokenId, uint256 _area, AreaSource _areaSource) external;\r\n  function setLedgerIdentifier(uint256 _tokenId, bytes32 _ledgerIdentifier) external;\r\n  function setDataLink(uint256 _tokenId, string calldata _dataLink) external;\r\n  function setVertexRootHash(uint256 _tokenId, bytes32 _vertexRootHash) external;\r\n  function setVertexStorageLink(uint256 _tokenId, string calldata _vertexStorageLink) external;\r\n  function setExtraData(bytes32 _key, bytes32 _value) external;\r\n  function setPropertyExtraData(uint256 _tokenId, bytes32 _key, bytes32 _value) external;\r\n\r\n  function incrementSetupStage(uint256 _tokenId) external;\r\n\r\n  function mint(address _to) external returns (uint256);\r\n  function burn(uint256 _tokenId) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  // GETTERS\r\n  function controller() external view returns (address payable);\r\n  function extraData(bytes32 _key) external view returns (bytes32);\r\n  function propertyExtraData(uint256 _tokenId, bytes32 _key) external view returns (bytes32);\r\n  function propertyCreatedAt(uint256 _tokenId) external view returns (uint256);\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function exists(uint256 _tokenId) external view returns (bool);\r\n  function getType(uint256 _tokenId) external view returns (TokenType);\r\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\r\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\r\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\r\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\r\n  function getArea(uint256 _tokenId) external view returns (uint256);\r\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\r\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\r\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\r\n  function getVertexRootHash(uint256 _tokenId) external view returns (bytes32);\r\n  function getVertexStorageLink(uint256 _tokenId) external view returns (string memory);\r\n  function getSetupStage(uint256 _tokenId) external view returns (uint256);\r\n  function getDetails(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (\r\n      TokenType tokenType,\r\n      uint256[] memory contour,\r\n      int256 highestPoint,\r\n      AreaSource areaSource,\r\n      uint256 area,\r\n      bytes32 ledgerIdentifier,\r\n      string memory humanAddress,\r\n      string memory dataLink,\r\n      uint256 setupStage,\r\n      bytes32 vertexRootHash,\r\n      string memory vertexStorageLink\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IACL {\r\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\r\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\r\n}\r\n\r\ninterface IPPGlobalRegistry {\r\n  function setContract(bytes32 _key, address _value) external;\r\n\r\n  // GETTERS\r\n  function getContract(bytes32 _key) external view returns (address);\r\n  function getACL() external view returns (IACL);\r\n  function getGaltTokenAddress() external view returns (address);\r\n  function getPPTokenRegistryAddress() external view returns (address);\r\n  function getPPLockerRegistryAddress() external view returns (address);\r\n  function getPPMarketAddress() external view returns (address);\r\n}\r\n\r\ncontract PPTokenController is IPPTokenController, Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public constant VERSION = 3;\r\n\r\n  bytes32 public constant PROPOSAL_GALT_FEE_KEY = bytes32(\"CONTROLLER_PROPOSAL_GALT\");\r\n  bytes32 public constant PROPOSAL_ETH_FEE_KEY = bytes32(\"CONTROLLER_PROPOSAL_ETH\");\r\n  bytes32 public constant DETAILS_UPDATED_EXTRA_KEY = bytes32(\"DETAILS_UPDATED_AT\");\r\n  bytes32 public constant CONTOUR_UPDATED_EXTRA_KEY = bytes32(\"CONTOUR_UPDATED_AT\");\r\n  bytes32 public constant CLAIM_UNIQUENESS_KEY = bytes32(\"CLAIM_UNIQUENESS\");\r\n\r\n  // setDetails(uint256,uint8,uint8,uint256,bytes32,string,string)\r\n  bytes32 internal constant TOKEN_SET_DETAILS_SIGNATURE = 0x18212fc600000000000000000000000000000000000000000000000000000000;\r\n  // setContour(uint256,uint256[],int256)\r\n  bytes32 internal constant TOKEN_SET_CONTOUR_SIGNATURE = 0x89e8915f00000000000000000000000000000000000000000000000000000000;\r\n\r\n  enum ProposalStatus {\r\n    NULL,\r\n    PENDING,\r\n    APPROVED,\r\n    EXECUTED,\r\n    REJECTED,\r\n    CANCELLED\r\n  }\r\n\r\n  struct Proposal {\r\n    address creator;\r\n    ProposalStatus status;\r\n    bool tokenOwnerApproved;\r\n    bool geoDataManagerApproved;\r\n    bytes data;\r\n    string dataLink;\r\n  }\r\n\r\n  IPPGlobalRegistry public globalRegistry;\r\n  IPPToken public tokenContract;\r\n  address public contourVerificationManager;\r\n  address public geoDataManager;\r\n  address public feeManager;\r\n  address public feeCollector;\r\n  address public minter;\r\n  address public burner;\r\n  uint256 public defaultBurnTimeoutDuration;\r\n  uint256 internal idCounter;\r\n\r\n  mapping(uint256 => Proposal) public proposals;\r\n  // tokenId => timeoutDuration (in seconds)\r\n  mapping(uint256 => uint256) public burnTimeoutDuration;\r\n  // tokenId => burnTimeoutAt\r\n  mapping(uint256 => uint256) public burnTimeoutAt;\r\n  // key => fee\r\n  mapping(bytes32 => uint256) public fees;\r\n\r\n  modifier onlyMinter() {\r\n    require(msg.sender == minter, \"Only minter allowed\");\r\n\r\n    _;\r\n  }\r\n\r\n  modifier onlyContourVerifier() {\r\n    require(msg.sender == contourVerificationManager, \"Only contourVerifier allowed\");\r\n\r\n    _;\r\n  }\r\n\r\n  constructor(IPPGlobalRegistry _globalRegistry, IPPToken _tokenContract, uint256 _defaultBurnTimeoutDuration) public {\r\n    require(_defaultBurnTimeoutDuration > 0, \"Invalid burn timeout duration\");\r\n\r\n    defaultBurnTimeoutDuration = _defaultBurnTimeoutDuration;\r\n    tokenContract = _tokenContract;\r\n    globalRegistry = _globalRegistry;\r\n  }\r\n\r\n  function() external payable {\r\n  }\r\n\r\n  // CONTRACT OWNER INTERFACE\r\n\r\n  function setContourVerificationManager(address _contourVerificationManager) external onlyOwner {\r\n    contourVerificationManager = _contourVerificationManager;\r\n\r\n    emit SetContourVerificationManager(_contourVerificationManager);\r\n  }\r\n\r\n  function setGeoDataManager(address _geoDataManager) external onlyOwner {\r\n    geoDataManager = _geoDataManager;\r\n\r\n    emit SetGeoDataManager(_geoDataManager);\r\n  }\r\n\r\n  function setFeeManager(address _feeManager) external onlyOwner {\r\n    feeManager = _feeManager;\r\n\r\n    emit SetFeeManager(_feeManager);\r\n  }\r\n\r\n  function setFeeCollector(address _feeCollector) external onlyOwner {\r\n    feeCollector = _feeCollector;\r\n\r\n    emit SetFeeCollector(_feeCollector);\r\n  }\r\n\r\n  function setMinter(address _minter) external onlyOwner {\r\n    minter = _minter;\r\n\r\n    emit SetMinter(_minter);\r\n  }\r\n\r\n  function setBurner(address _burner) external onlyOwner {\r\n    burner = _burner;\r\n\r\n    emit SetBurner(_burner);\r\n  }\r\n\r\n  function withdrawErc20(address _tokenAddress, address _to) external {\r\n    require(msg.sender == feeCollector, \"Missing permissions\");\r\n\r\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n\r\n    IERC20(_tokenAddress).transfer(_to, balance);\r\n\r\n    emit WithdrawErc20(_to, _tokenAddress, balance);\r\n  }\r\n\r\n  function withdrawEth(address payable _to) external {\r\n    require(msg.sender == feeCollector, \"Missing permissions\");\r\n\r\n    uint256 balance = address(this).balance;\r\n\r\n    _to.transfer(balance);\r\n\r\n    emit WithdrawEth(_to, balance);\r\n  }\r\n\r\n  function setFee(bytes32 _key, uint256 _value) external {\r\n    require(msg.sender == feeManager, \"Missing permissions\");\r\n\r\n    fees[_key] = _value;\r\n    emit SetFee(_key, _value);\r\n  }\r\n\r\n  // BURNER INTERFACE\r\n\r\n  function initiateTokenBurn(uint256 _tokenId) external {\r\n    require(msg.sender == burner, \"Only burner allowed\");\r\n    require(burnTimeoutAt[_tokenId] == 0, \"Burn already initiated\");\r\n    require(tokenContract.ownerOf(_tokenId) != address(0), \"Token doesn't exists\");\r\n\r\n    uint256 duration = burnTimeoutDuration[_tokenId];\r\n    if (duration == 0) {\r\n      duration = defaultBurnTimeoutDuration;\r\n    }\r\n\r\n    uint256 timeoutAt = block.timestamp.add(duration);\r\n    burnTimeoutAt[_tokenId] = timeoutAt;\r\n\r\n    emit InitiateTokenBurn(_tokenId, timeoutAt);\r\n  }\r\n\r\n  // MINTER INTERFACE\r\n  function mint(address _to) external onlyMinter {\r\n    uint256 _tokenId = tokenContract.mint(_to);\r\n\r\n    emit Mint(_to, _tokenId);\r\n  }\r\n\r\n  // CONTOUR VERIFICATION INTERFACE\r\n\r\n  function reportCVMisbehaviour(uint256 _tokenId) external onlyContourVerifier {\r\n    tokenContract.burn(_tokenId);\r\n\r\n    emit ReportCVMisbehaviour(_tokenId);\r\n  }\r\n\r\n  // CONTROLLER INTERFACE\r\n\r\n  function setInitialDetails(\r\n    uint256 _privatePropertyId,\r\n    IPPToken.TokenType _tokenType,\r\n    IPPToken.AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink,\r\n    bool _claimUniqueness\r\n  )\r\n    external\r\n    onlyMinter\r\n  {\r\n    // Will REVERT if there is no owner assigned to the token\r\n    tokenContract.ownerOf(_privatePropertyId);\r\n\r\n    uint256 setupStage = tokenContract.getSetupStage(_privatePropertyId);\r\n    require(setupStage == uint256(PropertyInitialSetupStage.PENDING), \"Requires PENDING setup stage\");\r\n\r\n    tokenContract.setDetails(_privatePropertyId, _tokenType, _areaSource, _area, _ledgerIdentifier, _humanAddress, _dataLink);\r\n\r\n    tokenContract.incrementSetupStage(_privatePropertyId);\r\n\r\n    _updateDetailsUpdatedAt(_privatePropertyId);\r\n\r\n    tokenContract.setPropertyExtraData(_privatePropertyId, CLAIM_UNIQUENESS_KEY, bytes32(uint256(_claimUniqueness ? 1 : 0)));\r\n  }\r\n\r\n  function setInitialContour(\r\n    uint256 _privatePropertyId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external\r\n    onlyMinter\r\n  {\r\n    uint256 setupStage = tokenContract.getSetupStage(_privatePropertyId);\r\n\r\n    require(setupStage == uint256(PropertyInitialSetupStage.DETAILS), \"Requires DETAILS setup stage\");\r\n\r\n    tokenContract.setContour(_privatePropertyId, _contour, _highestPoint);\r\n\r\n    tokenContract.incrementSetupStage(_privatePropertyId);\r\n\r\n    _updateContourUpdatedAt(_privatePropertyId);\r\n  }\r\n\r\n  // TOKEN OWNER INTERFACE\r\n\r\n  function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external {\r\n    require(tokenContract.ownerOf(_tokenId) == msg.sender, \"Only token owner allowed\");\r\n    require(_duration > 0, \"Invalid timeout duration\");\r\n\r\n    burnTimeoutDuration[_tokenId] = _duration;\r\n\r\n    emit SetBurnTimeout(_tokenId, _duration);\r\n  }\r\n\r\n  function cancelTokenBurn(uint256 _tokenId) external {\r\n    require(burnTimeoutAt[_tokenId] != 0, \"Burn not initiated\");\r\n    require(tokenContract.ownerOf(_tokenId) == msg.sender, \"Only token owner allowed\");\r\n\r\n    burnTimeoutAt[_tokenId] = 0;\r\n\r\n    emit CancelTokenBurn(_tokenId);\r\n  }\r\n\r\n  // COMMON INTERFACE\r\n\r\n  function propose(\r\n    bytes calldata _data,\r\n    string calldata _dataLink\r\n  )\r\n    external\r\n    payable\r\n  {\r\n    address msgSender = msg.sender;\r\n    uint256 tokenId = fetchTokenId(_data);\r\n    uint256 proposalId = _nextId();\r\n\r\n    Proposal storage p = proposals[proposalId];\r\n\r\n    if (msgSender == geoDataManager) {\r\n      p.geoDataManagerApproved = true;\r\n    } else if (msgSender == tokenContract.ownerOf(tokenId)) {\r\n      _acceptProposalFee();\r\n      p.tokenOwnerApproved = true;\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    p.creator = msgSender;\r\n    p.data = _data;\r\n    p.dataLink = _dataLink;\r\n    p.status = ProposalStatus.PENDING;\r\n\r\n    emit NewProposal(proposalId, tokenId, msg.sender);\r\n  }\r\n\r\n  function approve(uint256 _proposalId) external {\r\n    Proposal storage p = proposals[_proposalId];\r\n    uint256 tokenId = fetchTokenId(p.data);\r\n\r\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\r\n\r\n    if (p.geoDataManagerApproved == true) {\r\n      require(msg.sender == tokenContract.ownerOf(tokenId), \"Missing permissions\");\r\n      p.tokenOwnerApproved = true;\r\n    } else if (p.tokenOwnerApproved == true) {\r\n      require(msg.sender == geoDataManager, \"Missing permissions\");\r\n      p.geoDataManagerApproved = true;\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    emit ProposalApproval(_proposalId, tokenId);\r\n\r\n    p.status = ProposalStatus.APPROVED;\r\n\r\n    execute(_proposalId);\r\n  }\r\n\r\n  function reject(uint256 _proposalId) external {\r\n    Proposal storage p = proposals[_proposalId];\r\n    uint256 tokenId = fetchTokenId(p.data);\r\n\r\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\r\n\r\n    if (p.geoDataManagerApproved == true) {\r\n      require(msg.sender == tokenContract.ownerOf(tokenId), \"Missing permissions\");\r\n    } else if (p.tokenOwnerApproved == true) {\r\n      require(msg.sender == geoDataManager, \"Missing permissions\");\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    p.status = ProposalStatus.REJECTED;\r\n\r\n    emit ProposalRejection(_proposalId, tokenId);\r\n  }\r\n\r\n  function cancel(uint256 _proposalId) external {\r\n    Proposal storage p = proposals[_proposalId];\r\n    uint256 tokenId = fetchTokenId(p.data);\r\n\r\n    require(p.status == ProposalStatus.PENDING, \"Expect PENDING status\");\r\n\r\n    if (msg.sender == geoDataManager) {\r\n      require(p.geoDataManagerApproved == true, \"Only own proposals can be cancelled\");\r\n    } else if (msg.sender == tokenContract.ownerOf(tokenId)) {\r\n      require(p.tokenOwnerApproved == true, \"Only own proposals can be cancelled\");\r\n    } else {\r\n      revert(\"Missing permissions\");\r\n    }\r\n\r\n    p.status = ProposalStatus.CANCELLED;\r\n\r\n    emit ProposalCancellation(_proposalId, tokenId);\r\n  }\r\n\r\n  // PERMISSIONLESS INTERFACE\r\n\r\n  function execute(uint256 _proposalId) public {\r\n    Proposal storage p = proposals[_proposalId];\r\n\r\n    require(p.tokenOwnerApproved == true, \"Token owner approval required\");\r\n    require(p.geoDataManagerApproved == true, \"GeoDataManager approval required\");\r\n    require(p.status == ProposalStatus.APPROVED, \"Expect APPROVED status\");\r\n\r\n    _preExecuteHook(p.data);\r\n\r\n    p.status = ProposalStatus.EXECUTED;\r\n\r\n    (bool ok,) = address(tokenContract)\r\n      .call\r\n      .gas(gasleft().sub(50000))(p.data);\r\n\r\n    if (ok == false) {\r\n      emit ProposalExecutionFailed(_proposalId);\r\n      p.status = ProposalStatus.APPROVED;\r\n    } else {\r\n      emit ProposalExecuted(_proposalId);\r\n    }\r\n  }\r\n\r\n  function _preExecuteHook(bytes memory data) internal {\r\n    bytes32 signature = fetchSignature(data);\r\n    uint256 tokenId = fetchTokenId(data);\r\n\r\n    if (signature == TOKEN_SET_DETAILS_SIGNATURE) {\r\n      _updateDetailsUpdatedAt(tokenId);\r\n    } else if (signature == TOKEN_SET_CONTOUR_SIGNATURE) {\r\n      _updateContourUpdatedAt(tokenId);\r\n    }\r\n  }\r\n\r\n  function burnTokenByTimeout(uint256 _tokenId) external {\r\n    require(burnTimeoutAt[_tokenId] != 0, \"Timeout not set\");\r\n    require(block.timestamp > burnTimeoutAt[_tokenId], \"Timeout has not passed yet\");\r\n    require(tokenContract.ownerOf(_tokenId) != address(0), \"Token already burned\");\r\n\r\n    tokenContract.burn(_tokenId);\r\n\r\n    emit BurnTokenByTimeout(_tokenId);\r\n  }\r\n\r\n  // @dev Assuming that a tokenId is always the first argument in a method\r\n  function fetchTokenId(bytes memory _data) public pure returns (uint256 tokenId) {\r\n    assembly {\r\n      tokenId := mload(add(_data, 0x24))\r\n    }\r\n\r\n    require(tokenId > 0, \"Failed fetching tokenId from encoded data\");\r\n  }\r\n\r\n  function fetchSignature(bytes memory _data) public pure returns (bytes32 signature) {\r\n    assembly {\r\n      signature := and(mload(add(_data, 0x20)), 0xffffffff00000000000000000000000000000000000000000000000000000000)\r\n    }\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _nextId() internal returns (uint256) {\r\n    idCounter += 1;\r\n    return idCounter;\r\n  }\r\n\r\n  function _galtToken() internal view returns (IERC20) {\r\n    return IERC20(globalRegistry.getGaltTokenAddress());\r\n  }\r\n\r\n  function _acceptProposalFee() internal {\r\n    if (msg.value == 0) {\r\n      _galtToken().transferFrom(msg.sender, address(this), fees[PROPOSAL_GALT_FEE_KEY]);\r\n    } else {\r\n      require(msg.value == fees[PROPOSAL_ETH_FEE_KEY], \"Invalid fee\");\r\n    }\r\n  }\r\n\r\n  function _updateDetailsUpdatedAt(uint256 _tokenId) internal {\r\n    bytes32 value = bytes32(now);\r\n\r\n    tokenContract.setPropertyExtraData(_tokenId, DETAILS_UPDATED_EXTRA_KEY, value);\r\n\r\n    emit UpdateDetailsUpdatedAt(_tokenId, now);\r\n  }\r\n\r\n  function _updateContourUpdatedAt(uint256 _tokenId) internal {\r\n    bytes32 value = bytes32(now);\r\n\r\n    tokenContract.setPropertyExtraData(_tokenId, CONTOUR_UPDATED_EXTRA_KEY, value);\r\n\r\n    emit UpdateDetailsUpdatedAt(_tokenId, now);\r\n  }\r\n\r\n  // GETTERS\r\n\r\n  function getDetailsUpdatedAt(uint256 _tokenId) public view returns (uint256) {\r\n    return uint256(tokenContract.propertyExtraData(_tokenId, DETAILS_UPDATED_EXTRA_KEY));\r\n  }\r\n\r\n  function getContourUpdatedAt(uint256 _tokenId) public view returns (uint256) {\r\n    return uint256(tokenContract.propertyExtraData(_tokenId, CONTOUR_UPDATED_EXTRA_KEY));\r\n  }\r\n\r\n  function getClaimUniquenessFlag(uint256 _tokenId) public view returns (bool) {\r\n    return tokenContract.propertyExtraData(_tokenId, CLAIM_UNIQUENESS_KEY) != 0x0;\r\n  }\r\n}\r\n\r\ncontract PPTokenControllerFactory {\r\n  event NewPPTokenController(address indexed token, address controller);\r\n\r\n  // USER INTERFACE\r\n\r\n  function build(\r\n    IPPGlobalRegistry _globalRegistry,\r\n    IPPToken _tokenContract,\r\n    uint256 _defaultBurnTimeoutDuration\r\n  )\r\n    external\r\n    returns (PPTokenController)\r\n  {\r\n    PPTokenController ppTokenController = new PPTokenController(\r\n      _globalRegistry,\r\n      _tokenContract,\r\n      _defaultBurnTimeoutDuration\r\n    );\r\n\r\n    ppTokenController.transferOwnership(msg.sender);\r\n\r\n    emit NewPPTokenController(address(_tokenContract), address(ppTokenController));\r\n\r\n    return ppTokenController;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"NewPPTokenController\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"_globalRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IPPToken\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultBurnTimeoutDuration\",\"type\":\"uint256\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"contract PPTokenController\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPTokenControllerFactory","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://4842e4db3c7f9acf676a0fb5277ccf0a0b013a73f341ba7613f8b1326e3b23a0"}]}