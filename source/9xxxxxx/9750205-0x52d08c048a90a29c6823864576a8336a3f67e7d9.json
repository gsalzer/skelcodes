{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n \r\n    contract RMBTT\r\n    {\r\n        string public constant name = \"RMBTT\";\r\n        \r\n        string public constant symbol = \"RMBTT\";\r\n        \r\n        uint public constant decimals = 18;\r\n        \r\n        uint256 _totalSupply = 20000000 * 10**decimals;\r\n        \r\n        function totalSupply() constant returns (uint256 supply)\r\n        {\r\n            return _totalSupply;\r\n        }\r\n \r\n        function balanceOf(address _owner) constant returns (uint256 balance)\r\n        {\r\n            return balances[_owner];\r\n        }\r\n \r\n        function approve(address _spender, uint256 _value) returns (bool success) \r\n        {\r\n            allowed[msg.sender][_spender] = _value;\r\n            Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n \r\n        function allowance(address _owner, address _spender) constant returns (uint256 remaining)\r\n        {\r\n          return allowed[_owner][_spender];\r\n        }\r\n \r\n        mapping(address => uint256) balances;\r\n        mapping(address => mapping (address => uint256)) allowed;\r\n \r\n        uint public baseStartTime;\r\n        address public founder;\r\n \r\n        event AllocateFounderTokens(address indexed sender);\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        event Burn(address indexed from, uint256 value);\r\n \r\n        function RMBTT() \r\n        {\r\n            founder = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner \r\n        {\r\n            require (msg.sender == founder);\r\n            _;\r\n        }\r\n        \r\n        function setStartTime(uint _startTime) \r\n        {\r\n            if (msg.sender!=founder) revert();\r\n            baseStartTime = _startTime;\r\n        }\r\n \r\n        function distribute(uint256 _amount, address _to) \r\n        {\r\n            if (msg.sender!=founder) revert();\r\n            if (_amount > _totalSupply) revert();\r\n\r\n            balances[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n        }\r\n \r\n        function transfer(address _to, uint256 _value) returns (bool success)\r\n        {\r\n            if (msg.sender != founder)\r\n            {\r\n                if (now < baseStartTime)\r\n                {\r\n                    revert();\r\n                }\r\n            }\r\n            if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to])\r\n            {\r\n                uint _freeAmount = freeAmount(msg.sender);\r\n                if (_freeAmount < _value) \r\n                {\r\n                    return false;\r\n                } \r\n                \r\n                balances[msg.sender] -= _value;\r\n                balances[_to] += _value;\r\n                Transfer(msg.sender, _to, _value);\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n \r\n        function freeAmount(address user) returns (uint256 amount)\r\n        {\r\n            if (user == founder) \r\n            {\r\n                return balances[user];\r\n            }\r\n\r\n            if (now < baseStartTime)\r\n            {\r\n                return 0;\r\n            }\r\n            else\r\n            {\r\n                return balances[user];\r\n            }\r\n        }\r\n\r\n        function changeFounder(address newFounder)\r\n        {\r\n            if (msg.sender!=founder) revert();\r\n            founder = newFounder;\r\n        }\r\n      \r\n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success)\r\n        {\r\n            if (msg.sender != founder) \r\n            {\r\n                revert();\r\n            }\r\n            if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to])\r\n            {\r\n                uint _freeAmount = freeAmount(_from);\r\n                if (_freeAmount < _value)\r\n                {\r\n                    return false;\r\n                } \r\n \r\n                balances[_to] += _value;\r\n                balances[_from] -= _value;\r\n                allowed[_from][msg.sender] -= _value;\r\n                Transfer(_from, _to, _value);\r\n                \r\n                return true;\r\n            } \r\n            else \r\n            { \r\n                return false; \r\n            }\r\n        }\r\n\r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public\r\n        {\r\n            balances[target] += mintedAmount;\r\n            _totalSupply += mintedAmount;\r\n            Transfer(0, this, mintedAmount);\r\n            Transfer(this, target, mintedAmount);\r\n        }\r\n        \r\n        function burn(uint256 _value) public returns (bool success) \r\n        {\r\n            require(balances[msg.sender] >= _value);\r\n            balances[msg.sender] -= _value;\r\n            _totalSupply -= _value;\r\n            Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n     \r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) \r\n        {\r\n            require(balances[_from] >= _value);\r\n            require(_value <= allowed[_from][msg.sender]);\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            _totalSupply -= _value;\r\n            Burn(_from, _value);\r\n            return true;\r\n        }\r\n     \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"freeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFounder\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllocateFounderTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"RMBTT","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://ccf833b8e8f4211db06462be3f25ae8549e7f6feafadd20e6567a22fed24e672"}]}