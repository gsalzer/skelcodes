{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/role/interface/IBaseOperators.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n    function isAdmin(address _account) external view returns (bool);\r\n    function isSystem(address _account) external view returns (bool);\r\n    function confirmFor(address _address) external;\r\n}\r\n\r\n// File: contracts/helpers/Initializable.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  modifier whenInitialized() {\r\n    require(initialized, \"Initializable: Contract has not been initialized\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Initializable: Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  function isInitialized() public view returns (bool) {\r\n    return initialized;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/role/Operatorable.sol\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns(address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns(address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n// File: contracts/role/BaseOperators.sol\r\n\r\n/**\r\n * @title BaseOperators\r\n * @author Connor Howe <Connor.howe@sygnum.com>\r\n * @dev For managing operators, admins, and system accounts.\r\n */\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\ncontract BaseOperators {\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _operators;\r\n    Roles.Role private _admins;\r\n    Roles.Role private _systems;\r\n\r\n    event OperatorAdded(address indexed caller, address indexed account);\r\n    event OperatorRemoved(address indexed caller, address indexed account);\r\n    event AdminAdded(address indexed caller, address indexed account);\r\n    event AdminRemoved(address indexed caller, address indexed account);\r\n    event SystemAdded(address indexed caller, address indexed account);\r\n    event SystemRemoved(address indexed caller, address indexed account);\r\n\r\n    /**\r\n     * @dev Reverts if caller does not have admin role assigned.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"BaseOperators: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _admin) public {\r\n        _addAdmin(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Confirms operator contract address once active.\r\n     * @param _address Operatorable contract addres.\r\n     */\r\n    function confirmFor(address _address) public onlyAdmin {\r\n        require(_address != address(0), \"BaseOperators: address cannot be empty.\");\r\n        Operatorable(_address).confirmOperatorsContract();\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return _operators.has(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address operator privileges.\r\n     * @param _account address that should be given operator privileges.\r\n     */\r\n    function addOperator(address _account) public onlyAdmin {\r\n        _addOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address operator privileges.\r\n     * @param _account address that should be revoked operator privileges.\r\n     */\r\n    function removeOperator(address _account) public onlyAdmin {\r\n        _removeOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return _admins.has(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address admin privileges.\r\n     * @param _account address that should be given admin privileges.\r\n     */\r\n    function addAdmin(address _account) public onlyAdmin {\r\n        _addAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address admin privileges.\r\n     * @param _account address that should be revoked admin privileges.\r\n     */\r\n    function removeAdmin(address _account) public onlyAdmin {\r\n        require(_account != msg.sender, \"BaseOperators: admin can not remove himself\");\r\n        _removeAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or operator privileges.\r\n     */\r\n    function isOperatorOrAdmin(address _account) public view returns (bool) {\r\n        return (isAdmin(_account) || isOperator(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin and operator privileges, also known as a Super Admin.\r\n     */\r\n    function isOperatorAndAdmin(address _account) public view returns (bool) {\r\n        return (isAdmin(_account) && isOperator(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address operator and admin privileges making the '_account' a super admin, whereby they can call operator and admin functions.\r\n     * @param _account address that should be given operator and admin privileges.\r\n     */\r\n    function addOperatorAndAdmin(address _account) public onlyAdmin {\r\n        _addAdmin(_account);\r\n        _addOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address operator and admin privileges.\r\n     * @param _account address that should be revoked operator and admin privileges.\r\n     */\r\n    function removeOperatorAndAdmin(address _account) public onlyAdmin {\r\n        require(_account != msg.sender, \"BaseOperators: admin can not remove himself\");\r\n        _removeAdmin(_account);\r\n        _removeOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return _systems.has(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can give '_account' address system privileges.\r\n     * @param _account address that should be given system privileges.\r\n     */\r\n    function addSystem(address _account) public onlyAdmin {\r\n        _addSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can revoke '_account' address system privileges.\r\n     * @param _account address that should be revoked system privileges.\r\n     */\r\n    function removeSystem(address _account) public onlyAdmin {\r\n        _removeSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change '_account' admin privileges to an operator privileges.\r\n     * @param _account address that should be given operator and admin privileges.\r\n     */\r\n    function changeToOperator(address _account) public onlyAdmin {\r\n        require(_account != msg.sender, \"BaseOperators: admin can not change himself\");\r\n        _removeAdmin(_account);\r\n        _addOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin can change '_account' operator privileges to admin privileges.\r\n     * @param _account address that should be given operator and admin privileges.\r\n     */\r\n    function changeToAdmin(address _account) public onlyAdmin {\r\n        _addAdmin(_account);\r\n        _removeOperator(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _addOperator(address _account) internal {\r\n        _operators.add(_account);\r\n        emit OperatorAdded(msg.sender, _account);\r\n    }\r\n\r\n    function _removeOperator(address _account) internal {\r\n        _operators.remove(_account);\r\n        emit OperatorRemoved(msg.sender, _account);\r\n    }\r\n\r\n    function _addAdmin(address _account) internal {\r\n        _admins.add(_account);\r\n        emit AdminAdded(msg.sender, _account);\r\n    }\r\n\r\n    function _removeAdmin(address _account) internal {\r\n        _admins.remove(_account);\r\n        emit AdminRemoved(msg.sender, _account);\r\n    }\r\n\r\n    function _addSystem(address _account) internal {\r\n        _systems.add(_account);\r\n        emit SystemAdded(msg.sender, _account);\r\n    }\r\n\r\n    function _removeSystem(address _account) internal {\r\n        _systems.remove(_account);\r\n        emit SystemRemoved(msg.sender, _account);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"changeToAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addOperatorAndAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"confirmFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeOperatorAndAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorAndAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"changeToOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SystemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SystemRemoved\",\"type\":\"event\"}]","ContractName":"BaseOperators","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000006b7aa768a031a1258779823fa00797eac8893ce","Library":"","LicenseType":"None","SwarmSource":"bzzr://4edea33be0f6d562239bc879e0a3d332eb804997d6fd103778b65c6468b96291"}]}