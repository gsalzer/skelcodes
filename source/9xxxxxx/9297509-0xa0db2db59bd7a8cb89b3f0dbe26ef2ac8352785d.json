{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/b84c145c12b89a0efe2cb2c92d1357ff294f0107/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ERC20 {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) { // YES, anyone can mint\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/TrustlessTokenTransfer.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract TrustlessTokenTransferTrade {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event Trade(uint ETH, uint tokens, uint rate); // THINK: rate can be derived?\r\n    event ExchangeRateUpdated(uint rate);\r\n    ERC20 public token;\r\n    uint public rate;\r\n    uint public validTo;\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner { owner = newOwner; }\r\n    modifier onlyOwner {require(msg.sender == address(owner), \"Can only be called by the owner.\"); _;}\r\n    address payable public owner;\r\n\r\n    constructor(ERC20 _ERC20TokenAddress, uint _rate, uint _validTo) public {\r\n        owner = msg.sender;\r\n        token = _ERC20TokenAddress;\r\n        updateRate(_rate, _validTo);\r\n    }\r\n\r\n    function updateRate(uint _rate, uint _validTo) public onlyOwner {\r\n        require(_rate > 0, \"Rate must be greater than zero\");\r\n        rate = _rate;\r\n        validTo = _validTo;\r\n        emit ExchangeRateUpdated(rate);\r\n    }\r\n\r\n    function kamikaze() public payable { // nice error messages: https://github.com/blocknative/assist/issues/164\r\n        require(msg.value > 0, \"Need to send ETH\");\r\n        require(isRateValid(), \"Rate is no longer valid\");\r\n        uint tokensToSend = msg.value * rate;\r\n        uint tokensOwned = token.balanceOf(address(this));\r\n\r\n        if (tokensOwned >= tokensToSend) {\r\n            token.transfer(msg.sender, tokensToSend); // sending tokens to sender\r\n            owner.transfer(msg.value); // sending ETH to owner\r\n            emit Trade(msg.value, tokensToSend, rate);\r\n        } else { // contract does not have enough tokens, send everything and refund the remainng ETH\r\n            tokensToSend = tokensOwned;\r\n            uint tokensToSendETHValue = tokensToSend.div(rate);\r\n            uint refundValue = msg.value - tokensToSendETHValue;\r\n\r\n            msg.sender.transfer(refundValue);\r\n            token.transfer(msg.sender, tokensToSend);\r\n            owner.transfer(tokensToSendETHValue);\r\n            emit Trade(tokensToSendETHValue, tokensToSend, rate);\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        kamikaze(); // hold my beer, trust me, I know what I'm doing ğŸ”¥ğŸ”¥ğŸ”¥\r\n    }\r\n\r\n    function isRateValid() public view returns(bool) {\r\n        return validTo > now;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n        selfdestruct(owner); // cleaning storage, getting gas refund\r\n    }\r\n\r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_ERC20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validTo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRateValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kamikaze\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validTo\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrustlessTokenTransferTrade","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005d3a4b00db536f7e2be988bc84d92598ed1162170000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000005fee65ff","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://902b1d4ac9bb157e931853cfe0da8c0475beff949c389a730716c69a01e437ee"}]}