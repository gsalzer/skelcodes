{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25; /*\r\n\r\n________________________________________________________________\r\n// 'KewCover' Token contract with following functionalities:\r\n//      => In-built ICO functionality\r\n//      => ERC20 Compliance\r\n//      => Higher control of ICO by owner\r\n//      => selfdestruct functionality\r\n//      => SafeMath implementation \r\n//      => Air-drop\r\n//      => User whitelisting\r\n//      => Minting/Burning tokens by owner\r\n//\r\n// Name             : KewCover\r\n// Symbol           : KEW\r\n// Total supply     : 500,000,000 (500 Million)\r\n// Reserved for ICO : 350,000,000 (350 Million)\r\n// Decimals         : 8\r\n//\r\n// Copyright (c) 2019 KewCover Inc. (https://KewCover.com) The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n*/ \r\n\r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\n    contract owned {\r\n        address public owner;\r\n        \r\n         constructor () public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n\r\n//***************************************************************//\r\n//------------------ ERC20 Standard Template -------------------//\r\n//***************************************************************//\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n        string public name;\r\n        string public symbol;\r\n        uint256 public decimals = 8; \r\n        uint256 public totalSupply;\r\n        uint256 public reservedForICO;\r\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor (\r\n            uint256 initialSupply,\r\n            uint256 allocatedForICO,\r\n            string tokenName,\r\n            string tokenSymbol\r\n        ) public {\r\n            totalSupply = initialSupply * (1e8);       // Update total supply with the decimal amount\r\n            reservedForICO = allocatedForICO * (1e8);   // Tokens reserved For ICO\r\n            balanceOf[this] = reservedForICO;               // 350 million Tokens will remain in the contract\r\n            balanceOf[msg.sender] = totalSupply - reservedForICO; // Rest of tokens will be sent to owner\r\n            name = tokenName;                               // Set the name for display purposes\r\n            symbol = tokenSymbol;                           // Set the symbol for display purposes\r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, only can be called by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeguard);\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != 0x0);\r\n            // Check if the sender has enough\r\n            require(balanceOf[_from] >= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            // Add the same to the recipient\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public returns (bool success) {\r\n            _transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send `_value` tokens to `_to` in behalf of `_from`\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            require(!safeguard);\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n            public\r\n            returns (bool success) {\r\n            require(!safeguard);\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n            emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n            emit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n//************************************************************************//\r\n//---------------------  KEWCOVER MAIN CODE STARTS HERE --------------------//\r\n//************************************************************************//\r\n    \r\n    contract KewCover is owned, TokenERC20 {\r\n        \r\n        /*************************************/\r\n        /*  User whitelisting functionality  */\r\n        /*************************************/\r\n        bool public whitelistingStatus = false;\r\n        mapping (address => bool) public whitelisted;\r\n        \r\n        /**\r\n         * Change whitelisting status on or off\r\n         *\r\n         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\r\n         */\r\n        function changeWhitelistingStatus() onlyOwner public{\r\n            if (whitelistingStatus == false){\r\n                whitelistingStatus = true;\r\n            }\r\n            else{\r\n                whitelistingStatus = false;    \r\n            }\r\n        }\r\n        \r\n        /**\r\n         * Whitelist any user address - only Owner can do this\r\n         *\r\n         * It will add user address in whitelisted mapping\r\n         */\r\n        function whitelistUser(address userAddress) onlyOwner public{\r\n            require(whitelistingStatus == true);\r\n            require(userAddress != 0x0);\r\n            whitelisted[userAddress] = true;\r\n        }\r\n        \r\n        /**\r\n         * Whitelist Many user address at once - only Owner can do this\r\n         * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\r\n         * It will add user address in whitelisted mapping\r\n         */\r\n        function whitelistManyUsers(address[] userAddresses) onlyOwner public{\r\n            require(whitelistingStatus == true);\r\n            uint256 addressCount = userAddresses.length;\r\n            require(addressCount <= 150);\r\n            for(uint256 i = 0; i < addressCount; i++){\r\n                require(userAddresses[i] != 0x0);\r\n                whitelisted[userAddresses[i]] = true;\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        /********************************/\r\n        /* Code for the ERC20 KEW Token */\r\n        /********************************/\r\n    \r\n        /* Public variables of the token */\r\n        string private tokenName = \"KewCover\";\r\n        string private tokenSymbol = \"KEW\";\r\n        uint256 private initialSupply = 500000000;     // 500 Million\r\n        uint256 private allocatedForICO = 350000000;   // 350 Million\r\n        \r\n        \r\n        /* Records for the fronzen accounts */\r\n        mapping (address => bool) public frozenAccount;\r\n        \r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\r\n\r\n        /* Internal transfer, only can be called by this contract */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeguard);\r\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\r\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n        \r\n        /// @notice Create `mintedAmount` tokens and send it to `target`\r\n        /// @param target Address to receive the tokens\r\n        /// @param mintedAmount the amount of tokens it will receive\r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n            totalSupply = totalSupply.add(mintedAmount);\r\n            emit Transfer(0, this, mintedAmount);\r\n            emit Transfer(this, target, mintedAmount);\r\n        }\r\n\r\n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        /// @param target Address to be frozen\r\n        /// @param freeze either to freeze it or not\r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n                frozenAccount[target] = freeze;\r\n            emit  FrozenFunds(target, freeze);\r\n        }\r\n\r\n        /******************************/\r\n        /* Code for the  Crowdsale */\r\n        /******************************/\r\n        \r\n        /* TECHNICAL SPECIFICATIONS:\r\n        \r\n        => ICO starts           :  Will be specified by owner\r\n        => ICO Ends             :  Will be specified by owner\r\n        => Token Exchange Rate  :  1 ETH = 40,000 Tokens \r\n        => Bonus                :  25%   \r\n        => Coins reserved for ICO : 350,000,000  (350 Million)\r\n        => Contribution Limits  : No minimum or maximum Contribution \r\n        => Ether Withdrawal     : Ether can only be transfered after ICO is over\r\n\r\n        */\r\n\r\n        //public variables for the Crowdsale\r\n        uint256 public icoStartDate = 123 ;         // ICO start timestamp will be updated by owner after contract deployment\r\n        uint256 public icoEndDate   = 999999999999; // ICO end timestamp will be updated by owner after contract deployment\r\n        uint256 public exchangeRate = 50000;        // 1 ETH = 50,000 Tokens \r\n        uint256 public tokensSold = 0;              // How many tokens sold through crowdsale\r\n        uint256 public purchaseBonus = 25;          // Purchase Bonus purcentage - 25%\r\n        \r\n        //@dev fallback function, only accepts ether if pre-sale or ICO is running or Reject\r\n        function () payable external {\r\n            require(!safeguard);\r\n            require(!frozenAccount[msg.sender]);\r\n            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\r\n            require(icoStartDate < now && icoEndDate > now);\r\n            // calculate token amount to be sent\r\n            uint256 token = msg.value.mul(exchangeRate).div(1e10);              //weiamount * exchangeRate\r\n            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     //add bonus if available\r\n            tokensSold = tokensSold.add(finalTokens);\r\n            _transfer(this, msg.sender, finalTokens);                           //makes the transfers\r\n            \r\n        }\r\n\r\n        \r\n        //calculating purchase bonus\r\n        //SafeMath library is not used here at some places intentionally, as overflow is impossible here\r\n        //And thus it saves gas cost if we avoid using SafeMath in such cases\r\n        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\r\n            if(purchaseBonus > 0){\r\n                return token.mul(purchaseBonus).div(100);  //25% bonus\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n        }\r\n        \r\n\r\n        //Function to update an ICO parameter.\r\n        //It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens)\r\n        //Owner need to make sure the contract has enough tokens for ICO. \r\n        //If not enough, then he needs to transfer some tokens into contract addresss from his wallet\r\n        //If there are no tokens in smart contract address, then ICO will not work.\r\n        function updateCrowdsale(uint256 icoStartDateNew, uint256 icoEndDateNew, uint256 exchangeRateNew) onlyOwner public {\r\n            require(icoStartDateNew < icoEndDateNew);\r\n            icoStartDate = icoStartDateNew;\r\n            icoEndDate = icoEndDateNew;\r\n            exchangeRate = exchangeRateNew;\r\n        }\r\n        \r\n        //Stops an ICO.\r\n        //It will just set the ICO end date to zero and thus it will stop an ICO\r\n        function stopICO() onlyOwner public{\r\n            icoEndDate = 0;\r\n        }\r\n        \r\n        //function to check wheter ICO is running or not. \r\n        //It will return current state of the crowdsale\r\n        function icoStatus() public view returns(string){\r\n            if(icoStartDate < now && icoEndDate > now ){\r\n                return \"ICO is running\";\r\n            }else if(icoStartDate > now){\r\n                return \"ICO has not started yet\";\r\n            }else{\r\n                return \"ICO is over\";\r\n            }\r\n        }\r\n        \r\n        //Function to set ICO Exchange rate. \r\n        //1 ETH = How many Tokens ?\r\n        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\r\n            exchangeRate=newExchangeRate;\r\n        }\r\n        \r\n        //Function to update ICO Purchase Bonus. \r\n        //Enter percentage of the bonus. eg, 25 for 25% bonus\r\n        function updatePurchaseBonus(uint256 newPurchaseBonus) onlyOwner public {\r\n            purchaseBonus=newPurchaseBonus;\r\n        }\r\n        \r\n        //Just in case, owner wants to transfer Tokens from contract to owner address\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n            uint256 tokenAmount = _amount * (1e8);\r\n            _transfer(this, msg.sender, tokenAmount);\r\n        }\r\n          \r\n        //When owner wants to transfer Ether from contract to owner address\r\n        //ICO must be over in order to do the ether transfer\r\n        //Entire Ether balance will be transfered to owner address\r\n        function manualWithdrawEther() onlyOwner public{\r\n            require(icoEndDate < now, 'ICO is not over!');\r\n            address(owner).transfer(address(this).balance);\r\n        }\r\n        \r\n        //selfdestruct function. just in case owner decided to destruct this contract.\r\n        function destructContract() onlyOwner public{\r\n            selfdestruct(owner);\r\n        }\r\n        \r\n        /**\r\n         * Change safeguard status on or off\r\n         *\r\n         * When safeguard is true, then all the non-owner functions will stop working.\r\n         * When safeguard is false, then all the functions will resume working back again!\r\n         */\r\n        function changeSafeguardStatus() onlyOwner public{\r\n            if (safeguard == false){\r\n                safeguard = true;\r\n            }\r\n            else{\r\n                safeguard = false;    \r\n            }\r\n        }\r\n        \r\n        \r\n        /********************************/\r\n        /* Code for the Air drop of KEW */\r\n        /********************************/\r\n        \r\n        /**\r\n         * Run an Air-Drop\r\n         *\r\n         * It requires an array of all the addresses and amount of tokens to distribute\r\n         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\r\n         */\r\n        function airdrop(address[] recipients,uint tokenAmount) public onlyOwner {\r\n            uint256 addressCount = recipients.length;\r\n            require(addressCount <= 150);\r\n            for(uint i = 0; i < addressCount; i++)\r\n            {\r\n                  //This will loop through all the recipients and send them the specified tokens\r\n                  _transfer(this, recipients[i], tokenAmount * (1e8));\r\n            }\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"icoStartDateNew\",\"type\":\"uint256\"},{\"name\":\"icoEndDateNew\",\"type\":\"uint256\"},{\"name\":\"exchangeRateNew\",\"type\":\"uint256\"}],\"name\":\"updateCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPurchaseBonus\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeWhitelistingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setICOExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"KewCover","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f4ccdf6b680e96f276077d07805e2b4a589c7aff4cad9818d794ef672adadff6"}]}