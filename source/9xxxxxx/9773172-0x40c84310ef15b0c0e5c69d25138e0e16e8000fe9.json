{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.5.4;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Basic proxy that delegates all calls to a fixed implementing contract.\r\n * The implementing contract cannot be upgraded.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Proxy {\r\n\r\n    address implementation;\r\n\r\n    event Received(uint indexed value, address indexed sender, bytes data);\r\n\r\n    constructor(address _implementation) public {\r\n        implementation = _implementation;\r\n    }\r\n\r\n    function() external payable {\r\n\r\n        if (msg.data.length == 0 && msg.value > 0) {\r\n            emit Received(msg.value, msg.sender, msg.data);\r\n        } else {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                let target := sload(0)\r\n                calldatacopy(0, 0, calldatasize())\r\n                let result := delegatecall(gas, target, 0, calldatasize(), 0, 0)\r\n                returndatacopy(0, 0, returndatasize())\r\n                switch result\r\n                case 0 {revert(0, returndatasize())}\r\n                default {return (0, returndatasize())}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n    function init(address _owner, address[] calldata _modules) external;\r\n    function authoriseModule(address _module, bool _value) external;\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n    function setOwner(address _newOwner) external;\r\n    function invoke(address _target, uint _value, bytes calldata _data) external returns (bytes memory _result);\r\n    function() external payable;\r\n}\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Managed\r\n * @dev Basic contract that defines a set of managers. Only the owner can add/remove managers.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract Managed is Owned {\r\n\r\n    // The managers\r\n    mapping (address => bool) public managers;\r\n\r\n    /**\r\n     * @dev Throws if the sender is not a manager.\r\n     */\r\n    modifier onlyManager {\r\n        require(managers[msg.sender] == true, \"M: Must be manager\");\r\n        _;\r\n    }\r\n\r\n    event ManagerAdded(address indexed _manager);\r\n    event ManagerRevoked(address indexed _manager);\r\n\r\n    /**\r\n    * @dev Adds a manager.\r\n    * @param _manager The address of the manager.\r\n    */\r\n    function addManager(address _manager) external onlyOwner {\r\n        require(_manager != address(0), \"M: Address must not be null\");\r\n        if (managers[_manager] == false) {\r\n            managers[_manager] = true;\r\n            emit ManagerAdded(_manager);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Revokes a manager.\r\n    * @param _manager The address of the manager.\r\n    */\r\n    function revokeManager(address _manager) external onlyOwner {\r\n        require(managers[_manager] == true, \"M: Target must be an existing manager\");\r\n        delete managers[_manager];\r\n        emit ManagerRevoked(_manager);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface for an ENS Mananger.\r\n */\r\ninterface IENSManager {\r\n    event RootnodeOwnerChange(bytes32 indexed _rootnode, address indexed _newOwner);\r\n    event ENSResolverChanged(address addr);\r\n    event Registered(address indexed _owner, string _ens);\r\n    event Unregistered(string _ens);\r\n\r\n    function changeRootnodeOwner(address _newOwner) external;\r\n    function register(string calldata _label, address _owner) external;\r\n    function isAvailable(bytes32 _subnode) external view returns(bool);\r\n    function getENSReverseRegistrar() external view returns (address);\r\n    function ensResolver() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules.\r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n    function deregisterModule(address _module) external;\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n    function deregisterUpgrader(address _upgrader) external;\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for a contract storing guardian addresses.\r\n */\r\ninterface IGuardianStorage{\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title WalletFactory\r\n * @dev The WalletFactory contract creates and assigns wallets to accounts.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract WalletFactory is Owned, Managed {\r\n\r\n    // The address of the module dregistry\r\n    address public moduleRegistry;\r\n    // The address of the base wallet implementation\r\n    address public walletImplementation;\r\n    // The address of the ENS manager\r\n    address public ensManager;\r\n    // The address of the GuardianStorage\r\n    address public guardianStorage;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event ModuleRegistryChanged(address addr);\r\n    event ENSManagerChanged(address addr);\r\n    event GuardianStorageChanged(address addr);\r\n    event WalletCreated(address indexed wallet, address indexed owner, address indexed guardian);\r\n\r\n    // *************** Modifiers *************************** //\r\n\r\n    /**\r\n     * @dev Throws if the guardian storage address is not set.\r\n     */\r\n    modifier guardianStorageDefined {\r\n        require(guardianStorage != address(0), \"GuardianStorage address not defined\");\r\n        _;\r\n    }\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    /**\r\n     * @dev Default constructor.\r\n     */\r\n    constructor(address _moduleRegistry, address _walletImplementation, address _ensManager) public {\r\n        moduleRegistry = _moduleRegistry;\r\n        walletImplementation = _walletImplementation;\r\n        ensManager = _ensManager;\r\n    }\r\n\r\n    // *************** External Functions ********************* //\r\n\r\n    /**\r\n     * @dev Lets the manager create a wallet for an owner account.\r\n     * The wallet is initialised with a list of modules and an ENS..\r\n     * The wallet is created using the CREATE opcode.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     */\r\n    function createWallet(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        string calldata _label\r\n    )\r\n        external\r\n        onlyManager\r\n    {\r\n        _createWallet(_owner, _modules, _label, address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the manager create a wallet for an owner account.\r\n     * The wallet is initialised with a list of modules, a first guardian, and an ENS..\r\n     * The wallet is created using the CREATE opcode.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     * @param _guardian The guardian address.\r\n     */\r\n    function createWalletWithGuardian(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        string calldata _label,\r\n        address _guardian\r\n    )\r\n        external\r\n        onlyManager\r\n        guardianStorageDefined\r\n    {\r\n        require(_guardian != (address(0)), \"WF: guardian cannot be null\");\r\n        _createWallet(_owner, _modules, _label, _guardian);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the manager create a wallet for an owner account at a specific address.\r\n     * The wallet is initialised with a list of modules and an ENS.\r\n     * The wallet is created using the CREATE2 opcode.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     * @param _salt The salt.\r\n     */\r\n    function createCounterfactualWallet(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        string calldata _label,\r\n        bytes32 _salt\r\n    )\r\n        external\r\n        onlyManager\r\n    {\r\n        _createCounterfactualWallet(_owner, _modules, _label, address(0), _salt);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the manager create a wallet for an owner account at a specific address.\r\n     * The wallet is initialised with a list of modules, a first guardian, and an ENS.\r\n     * The wallet is created using the CREATE2 opcode.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     * @param _guardian The guardian address.\r\n     * @param _salt The salt.\r\n     */\r\n    function createCounterfactualWalletWithGuardian(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        string calldata _label,\r\n        address _guardian,\r\n        bytes32 _salt\r\n    )\r\n        external\r\n        onlyManager\r\n        guardianStorageDefined\r\n    {\r\n        require(_guardian != (address(0)), \"WF: guardian cannot be null\");\r\n        _createCounterfactualWallet(_owner, _modules, _label, _guardian, _salt);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the address of a counterfactual wallet.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _salt The salt.\r\n     * @return the address that the wallet will have when created using CREATE2 and the same input parameters.\r\n     */\r\n    function getAddressForCounterfactualWallet(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        bytes32 _salt\r\n    )\r\n        external\r\n        view\r\n        returns (address _wallet)\r\n    {\r\n        _wallet = _getAddressForCounterfactualWallet(_owner, _modules, address(0), _salt);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the address of a counterfactual wallet with a first default guardian.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _guardian The guardian address.\r\n     * @param _salt The salt.\r\n     * @return the address that the wallet will have when created using CREATE2 and the same input parameters.\r\n     */\r\n    function getAddressForCounterfactualWalletWithGuardian(\r\n        address _owner,\r\n        address[] calldata _modules,\r\n        address _guardian,\r\n        bytes32 _salt\r\n    )\r\n        external\r\n        view\r\n        returns (address _wallet)\r\n    {\r\n        require(_guardian != (address(0)), \"WF: guardian cannot be null\");\r\n        _wallet = _getAddressForCounterfactualWallet(_owner, _modules, _guardian, _salt);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner change the address of the module registry contract.\r\n     * @param _moduleRegistry The address of the module registry contract.\r\n     */\r\n    function changeModuleRegistry(address _moduleRegistry) external onlyOwner {\r\n        require(_moduleRegistry != address(0), \"WF: address cannot be null\");\r\n        moduleRegistry = _moduleRegistry;\r\n        emit ModuleRegistryChanged(_moduleRegistry);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner change the address of the ENS manager contract.\r\n     * @param _ensManager The address of the ENS manager contract.\r\n     */\r\n    function changeENSManager(address _ensManager) external onlyOwner {\r\n        require(_ensManager != address(0), \"WF: address cannot be null\");\r\n        ensManager = _ensManager;\r\n        emit ENSManagerChanged(_ensManager);\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner change the address of the GuardianStorage contract.\r\n     * @param _guardianStorage The address of the GuardianStorage contract.\r\n     */\r\n    function changeGuardianStorage(address _guardianStorage) external onlyOwner {\r\n        require(_guardianStorage != address(0), \"WF: address cannot be null\");\r\n        guardianStorage = _guardianStorage;\r\n        emit GuardianStorageChanged(_guardianStorage);\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external pure { // solium-disable-line no-empty-blocks\r\n        //do nothing\r\n    }\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n     * @dev Helper method to create a wallet for an owner account.\r\n     * The wallet is initialised with a list of modules, a first guardian, and an ENS.\r\n     * The wallet is created using the CREATE opcode.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     * @param _guardian (Optional) The guardian address.\r\n     */\r\n    function _createWallet(address _owner, address[] memory _modules, string memory _label, address _guardian) internal {\r\n        _validateInputs(_owner, _modules, _label);\r\n        Proxy proxy = new Proxy(walletImplementation);\r\n        address payable wallet = address(proxy);\r\n        _configureWallet(BaseWallet(wallet), _owner, _modules, _label, _guardian);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to create a wallet for an owner account at a specific address.\r\n     * The wallet is initialised with a list of modules, a first guardian, and an ENS.\r\n     * The wallet is created using the CREATE2 opcode.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     * @param _guardian The guardian address.\r\n     * @param _salt The salt.\r\n     */\r\n    function _createCounterfactualWallet(\r\n        address _owner,\r\n        address[] memory _modules,\r\n        string memory _label,\r\n        address _guardian,\r\n        bytes32 _salt\r\n    )\r\n        internal\r\n    {\r\n        _validateInputs(_owner, _modules, _label);\r\n        bytes32 newsalt = _newSalt(_salt, _owner, _modules, _guardian);\r\n        bytes memory code = abi.encodePacked(type(Proxy).creationCode, uint256(walletImplementation));\r\n        address payable wallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            wallet := create2(0, add(code, 0x20), mload(code), newsalt)\r\n            if iszero(extcodesize(wallet)) { revert(0, returndatasize) }\r\n        }\r\n        _configureWallet(BaseWallet(wallet), _owner, _modules, _label, _guardian);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to configure a wallet for a set of input parameters.\r\n     * @param _wallet The target wallet\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _label ENS label of the new wallet, e.g. franck.\r\n     * @param _guardian (Optional) The guardian address.\r\n     */\r\n    function _configureWallet(\r\n        BaseWallet _wallet,\r\n        address _owner,\r\n        address[] memory _modules,\r\n        string memory _label,\r\n        address _guardian\r\n    )\r\n        internal\r\n    {\r\n        // add the factory to modules so it can claim the reverse ENS or add a guardian\r\n        address[] memory extendedModules = new address[](_modules.length + 1);\r\n        extendedModules[0] = address(this);\r\n        for (uint i = 0; i < _modules.length; i++) {\r\n            extendedModules[i + 1] = _modules[i];\r\n        }\r\n        // initialise the wallet with the owner and the extended modules\r\n        _wallet.init(_owner, extendedModules);\r\n        // add guardian if needed\r\n        if (_guardian != address(0)) {\r\n            IGuardianStorage(guardianStorage).addGuardian(_wallet, _guardian);\r\n        }\r\n        // register ENS\r\n        _registerWalletENS(address(_wallet), _label);\r\n        // remove the factory from the authorised modules\r\n        _wallet.authoriseModule(address(this), false);\r\n        // emit event\r\n        emit WalletCreated(address(_wallet), _owner, _guardian);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the address of a counterfactual wallet.\r\n     * @param _owner The account address.\r\n     * @param _modules The list of modules.\r\n     * @param _salt The salt.\r\n     * @param _guardian (Optional) The guardian address.\r\n     * @return the address that the wallet will have when created using CREATE2 and the same input parameters.\r\n     */\r\n    function _getAddressForCounterfactualWallet(\r\n        address _owner,\r\n        address[] memory _modules,\r\n        address _guardian,\r\n        bytes32 _salt\r\n    )\r\n        internal\r\n        view\r\n        returns (address _wallet)\r\n    {\r\n        bytes32 newsalt = _newSalt(_salt, _owner, _modules, _guardian);\r\n        bytes memory code = abi.encodePacked(type(Proxy).creationCode, uint256(walletImplementation));\r\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), newsalt, keccak256(code)));\r\n        _wallet = address(uint160(uint256(hash)));\r\n    }\r\n\r\n    /**\r\n     * @dev Generates a new salt based on a provided salt, an owner, a list of modules and an optional guardian.\r\n     * @param _salt The slat provided.\r\n     * @param _owner The owner address.\r\n     * @param _modules The list of modules.\r\n     * @param _guardian The guardian address.\r\n     */\r\n    function _newSalt(bytes32 _salt, address _owner, address[] memory _modules, address _guardian) internal pure returns (bytes32) {\r\n        if (_guardian == address(0)) {\r\n            return keccak256(abi.encodePacked(_salt, _owner, _modules));\r\n        } else {\r\n            return keccak256(abi.encodePacked(_salt, _owner, _modules, _guardian));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the owner and the modules are not valid.\r\n     * @param _owner The owner address.\r\n     * @param _modules The list of modules.\r\n     */\r\n    function _validateInputs(address _owner, address[] memory _modules, string memory _label) internal view {\r\n        require(_owner != address(0), \"WF: owner cannot be null\");\r\n        require(_modules.length > 0, \"WF: cannot assign with less than 1 module\");\r\n        require(ModuleRegistry(moduleRegistry).isRegisteredModule(_modules), \"WF: one or more modules are not registered\");\r\n        bytes memory labelBytes = bytes(_label);\r\n        require(labelBytes.length != 0, \"WF: ENS lable must be defined\");\r\n    }\r\n\r\n    /**\r\n     * @dev Register an ENS subname to a wallet.\r\n     * @param _wallet The wallet address.\r\n     * @param _label ENS label of the new wallet (e.g. franck).\r\n     */\r\n    function _registerWalletENS(address payable _wallet, string memory _label) internal {\r\n        // claim reverse\r\n        address ensResolver = IENSManager(ensManager).ensResolver();\r\n        bytes memory methodData = abi.encodeWithSignature(\"claimWithResolver(address,address)\", ensManager, ensResolver);\r\n        address ensReverseRegistrar = IENSManager(ensManager).getENSReverseRegistrar();\r\n        BaseWallet(_wallet).invoke(ensReverseRegistrar, 0, methodData);\r\n        // register with ENS manager\r\n        IENSManager(ensManager).register(_label, _wallet);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_moduleRegistry\",\"type\":\"address\"}],\"name\":\"changeModuleRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createCounterfactualWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"revokeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ensManager\",\"type\":\"address\"}],\"name\":\"changeENSManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianStorage\",\"type\":\"address\"}],\"name\":\"changeGuardianStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"createWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moduleRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getAddressForCounterfactualWallet\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_guardian\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getAddressForCounterfactualWalletWithGuardian\",\"outputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_guardian\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createCounterfactualWalletWithGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_modules\",\"type\":\"address[]\"},{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"createWalletWithGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardianStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_moduleRegistry\",\"type\":\"address\"},{\"name\":\"_walletImplementation\",\"type\":\"address\"},{\"name\":\"_ensManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModuleRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ENSManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GuardianStorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"WalletFactory","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db0105000000000000000000000000b6d64221451edbac7736d4c3da7fc827457dec03000000000000000000000000c4baabb5b7dff84aa8023183e3ca0ba3b2fee519","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://1646289776505048747e848d8c96bb3ca8d0290d10176cc2429cae1233c7c135"}]}