{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ncontract GemLike {\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public;\r\n    function transferFrom(address, address, uint) public;\r\n    function deposit() public payable;\r\n    function withdraw(uint) public;\r\n}\r\n\r\ncontract ManagerLike {\r\n    function cdpCan(address, uint, address) public view returns (uint);\r\n    function ilks(uint) public view returns (bytes32);\r\n    function owns(uint) public view returns (address);\r\n    function urns(uint) public view returns (address);\r\n    function vat() public view returns (address);\r\n    function open(bytes32, address) public returns (uint);\r\n    function give(uint, address) public;\r\n    function cdpAllow(uint, address, uint) public;\r\n    function urnAllow(address, uint) public;\r\n    function frob(uint, int, int) public;\r\n    function flux(uint, address, uint) public;\r\n    function move(uint, address, uint) public;\r\n    function exit(address, uint, address, uint) public;\r\n    function quit(uint, address) public;\r\n    function enter(address, uint) public;\r\n    function shift(uint, uint) public;\r\n}\r\n\r\ncontract VatLike {\r\n    function can(address, address) public view returns (uint);\r\n    function ilks(bytes32) public view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) public view returns (uint);\r\n    function urns(bytes32, address) public view returns (uint, uint);\r\n    function frob(bytes32, address, address, address, int, int) public;\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\ncontract GemJoinLike {\r\n    function dec() public returns (uint);\r\n    function gem() public returns (GemLike);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract GNTJoinLike {\r\n    function bags(address) public view returns (address);\r\n    function make(address) public returns (address);\r\n}\r\n\r\ncontract DaiJoinLike {\r\n    function vat() public returns (VatLike);\r\n    function dai() public returns (GemLike);\r\n    function join(address, uint) public payable;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract HopeLike {\r\n    function hope(address) public;\r\n    function nope(address) public;\r\n}\r\n\r\ncontract EndLike {\r\n    function fix(bytes32) public view returns (uint);\r\n    function cash(bytes32, uint) public;\r\n    function free(bytes32) public;\r\n    function pack(uint) public;\r\n    function skim(bytes32, address) public;\r\n}\r\n\r\ncontract JugLike {\r\n    function drip(bytes32) public returns (uint);\r\n}\r\n\r\ncontract PotLike {\r\n    function pie(address) public view returns (uint);\r\n    function drip() public returns (uint);\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n}\r\n\r\ncontract ProxyRegistryLike {\r\n    function proxies(address) public view returns (address);\r\n    function build(address) public returns (address);\r\n}\r\n\r\ncontract ProxyLike {\r\n    function owner() public view returns (address);\r\n}\r\n\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\r\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\ncontract Common {\r\n    uint256 constant RAY = 10 ** 27;\r\n\r\n    // Internal functions\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"mul-overflow\");\r\n    }\r\n\r\n    // Public functions\r\n\r\n    function daiJoin_join(address apt, address urn, uint wad) public {\r\n        // Gets DAI from the user's wallet\r\n        DaiJoinLike(apt).dai().transferFrom(msg.sender, address(this), wad);\r\n        // Approves adapter to take the DAI amount\r\n        DaiJoinLike(apt).dai().approve(apt, wad);\r\n        // Joins DAI into the vat\r\n        DaiJoinLike(apt).join(urn, wad);\r\n    }\r\n}\r\n\r\ncontract DssProxyActionsEnd is Common {\r\n    // Internal functions\r\n\r\n    function _free(\r\n        address manager,\r\n        address end,\r\n        uint cdp\r\n    ) internal returns (uint ink) {\r\n        bytes32 ilk = ManagerLike(manager).ilks(cdp);\r\n        address urn = ManagerLike(manager).urns(cdp);\r\n        VatLike vat = VatLike(ManagerLike(manager).vat());\r\n        uint art;\r\n        (ink, art) = vat.urns(ilk, urn);\r\n\r\n        // If CDP still has debt, it needs to be paid\r\n        if (art > 0) {\r\n            EndLike(end).skim(ilk, urn);\r\n            (ink,) = vat.urns(ilk, urn);\r\n        }\r\n        // Approves the manager to transfer the position to proxy's address in the vat\r\n        if (vat.can(address(this), address(manager)) == 0) {\r\n            vat.hope(manager);\r\n        }\r\n        // Transfers position from CDP to the proxy address\r\n        ManagerLike(manager).quit(cdp, address(this));\r\n        // Frees the position and recovers the collateral in the vat registry\r\n        EndLike(end).free(ilk);\r\n    }\r\n\r\n    // Public functions\r\n    function freeETH(\r\n        address manager,\r\n        address ethJoin,\r\n        address end,\r\n        uint cdp\r\n    ) public {\r\n        uint wad = _free(manager, end, cdp);\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wad);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wad);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wad);\r\n    }\r\n\r\n    function freeGem(\r\n        address manager,\r\n        address gemJoin,\r\n        address end,\r\n        uint cdp\r\n    ) public {\r\n        uint amt = _free(manager, end, cdp) / 10 ** (18 - GemJoinLike(gemJoin).dec());\r\n        // Exits token amount to the user's wallet as a token\r\n        GemJoinLike(gemJoin).exit(msg.sender, amt);\r\n    }\r\n\r\n    function pack(\r\n        address daiJoin,\r\n        address end,\r\n        uint wad\r\n    ) public {\r\n        daiJoin_join(daiJoin, address(this), wad);\r\n        VatLike vat = DaiJoinLike(daiJoin).vat();\r\n        // Approves the end to take out DAI from the proxy's balance in the vat\r\n        if (vat.can(address(this), address(end)) == 0) {\r\n            vat.hope(end);\r\n        }\r\n        EndLike(end).pack(wad);\r\n    }\r\n\r\n    function cashETH(\r\n        address ethJoin,\r\n        address end,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) public {\r\n        EndLike(end).cash(ilk, wad);\r\n        uint wadC = mul(wad, EndLike(end).fix(ilk)) / RAY;\r\n        // Exits WETH amount to proxy address as a token\r\n        GemJoinLike(ethJoin).exit(address(this), wadC);\r\n        // Converts WETH to ETH\r\n        GemJoinLike(ethJoin).gem().withdraw(wadC);\r\n        // Sends ETH back to the user's wallet\r\n        msg.sender.transfer(wadC);\r\n    }\r\n\r\n    function cashGem(\r\n        address gemJoin,\r\n        address end,\r\n        bytes32 ilk,\r\n        uint wad\r\n    ) public {\r\n        EndLike(end).cash(ilk, wad);\r\n        // Exits token amount to the user's wallet as a token\r\n        uint amt = mul(wad, EndLike(end).fix(ilk)) / RAY / 10 ** (18 - GemJoinLike(gemJoin).dec());\r\n        GemJoinLike(gemJoin).exit(msg.sender, amt);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"cashETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"cashGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"apt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"urn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"daiJoin_join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"freeGem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"pack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DssProxyActionsEnd","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://32681f95d64d32b3fda8a0bdf29707adaeb3be24556ab50b34b45f1cfe0ad31c"}]}