{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ERC20Token {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract hodlRich {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address public adminWallet;\r\n    address public withdrawWallet;\r\n    \r\n    uint256 public unlockFee;  // prefer 10% \r\n    uint256 public depositFee; // prefer 0% \r\n    \r\n    ERC20Token _token;\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminWallet, 'you are not an admin');\r\n        _;\r\n    }\r\n    \r\n    function changeUnlockFee(uint256 _newFee) external onlyAdmin {\r\n        unlockFee = _newFee;\r\n    }\r\n\r\n    function changeDepositkFee(uint256 _newFee) external onlyAdmin {\r\n        depositFee = _newFee;\r\n    }\r\n    \r\n    function changeWithdrawWallet(address _newWallet) external onlyAdmin {\r\n        withdrawWallet = _newWallet;\r\n    }\r\n    \r\n    function changeAdmin(address _newAdmin) external onlyAdmin {\r\n        adminWallet = _newAdmin;\r\n    }\r\n    \r\n    struct Deposit {\r\n        address tokenAddress;\r\n        uint256 tokenAmount;\r\n        uint256 unlockTime;\r\n    }\r\n    \r\n    mapping(address => Deposit[]) public deposits;\r\n    \r\n    //example input parameters: 20 / 200 / 0x.... (uint256/uint256/_adminWallet); 100 - 10%; 20\r\n    constructor(uint256 _depositFee, uint256 _unlockFee, address _adminWallet) public {\r\n        depositFee = _depositFee;\r\n        unlockFee = _unlockFee;\r\n        adminWallet = _adminWallet;\r\n        withdrawWallet = _adminWallet;\r\n    }\r\n\r\n    function depositTokens(address _tokenAddress, uint256 _tokenAmount, uint256 _lockTime) external {\r\n        _token = ERC20Token(_tokenAddress);\r\n        uint256 approved = _token.allowance(msg.sender, address(this));\r\n        require(approved >= _tokenAmount, 'you must allow this contract to transfer tokens on your behalf');\r\n        \r\n        //get tokens\r\n        _token.transferFrom(msg.sender, address(this), _tokenAmount);\r\n        uint256 fee = _tokenAmount.mul(depositFee).div(1000);\r\n        uint256 _tokenAmountAfterFee = _tokenAmount.sub(fee);\r\n        _token.transfer(withdrawWallet, fee);\r\n\r\n        //create new deposit\r\n        Deposit memory newDeposit;\r\n        newDeposit.tokenAddress = _tokenAddress;\r\n        newDeposit.tokenAmount = _tokenAmountAfterFee;\r\n        newDeposit.unlockTime = now.add(_lockTime);\r\n\r\n        //store deposit\r\n        deposits[msg.sender].push(newDeposit);\r\n        \r\n    }\r\n\r\n    \r\n    function withdrawTokens(uint256 _depositID) external {\r\n        require(deposits[msg.sender][_depositID].tokenAmount > 0, 'deposit doesnt exists');\r\n        \r\n        Deposit memory currentDeposit = deposits[msg.sender][_depositID];\r\n        if (currentDeposit.unlockTime < now) {\r\n            //return without substracting unlock fee\r\n            uint256 amount = currentDeposit.tokenAmount;\r\n            delete deposits[msg.sender][_depositID];\r\n            _token.transfer(msg.sender, amount);\r\n        } else {\r\n            //return after substracting unlock fee for breaking the rules\r\n            uint256 fee = currentDeposit.tokenAmount.mul(unlockFee).div(1000);\r\n            uint256 _tokenAmountAfterFee = currentDeposit.tokenAmount.sub(fee);\r\n            delete deposits[msg.sender][_depositID];\r\n            _token.transfer(withdrawWallet, fee);\r\n            _token.transfer(msg.sender, _tokenAmountAfterFee);\r\n        }\r\n    }\r\n    \r\n    function checkDepositByID(uint256 _depositID) external view returns (address tokenAddress, uint256 tokenAmount, uint256 unlockTime) {\r\n        require(deposits[msg.sender].length > 0, 'you dont have deposits');\r\n        require(deposits[msg.sender][_depositID].tokenAmount > 0, 'deposit doesnt exists');\r\n        tokenAddress = deposits[msg.sender][_depositID].tokenAddress;\r\n        tokenAmount = deposits[msg.sender][_depositID].tokenAmount;\r\n        unlockTime = deposits[msg.sender][_depositID].unlockTime;\r\n    }\r\n    \r\n    function latestDeposit() external view returns (uint256 _depositID) {\r\n        require(deposits[msg.sender].length > 0, 'you dont have deposits');\r\n        _depositID = deposits[msg.sender].length.sub(1);\r\n    }\r\n\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adminWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeDepositkFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeUnlockFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeWithdrawWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"checkDepositByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositID\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"hodlRich","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000083433a1c604ca804e5f945a2dd21973d21670f50","Library":"","LicenseType":"None","SwarmSource":"bzzr://b308210ad5364fcb27825880270c4f8ec92e1b9cc9d8c75e8b25b31e36ad100f"}]}