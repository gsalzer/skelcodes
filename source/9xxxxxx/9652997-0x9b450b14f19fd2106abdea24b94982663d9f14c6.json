{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\n\ncontract IHandleCampaignDeployment {\n\n    /**\n     * @notice Function which will be used as simulation for constructor under TwoKeyAcquisitionCampaign contract\n     * @dev This is just an interface of the function, the actual logic\n     * is implemented under TwoKeyAcquisitionCampaignERC20.sol contract\n     * This function can be called only once per proxy address\n     */\n    function setInitialParamsCampaign(\n        address _twoKeySingletonesRegistry,\n        address _twoKeyAcquisitionLogicHandler,\n        address _conversionHandler,\n        address _moderator,\n        address _assetContractERC20,\n        address _contractor,\n        address _twoKeyEconomy,\n        uint [] values\n    ) public;\n\n    /**\n     * @notice Function which will be used as simulation for constructor under TwoKeyAcquisitionLogicHandler contract\n     * @dev This is just an interface of the function, the actual logic\n     * is implemented under TwoKeyAcquisitionLogicHandler.sol contract\n     * This function can be called only once per proxy address\n     */\n    function setInitialParamsLogicHandler(\n        uint [] values,\n        string _currency,\n        address _assetContractERC20,\n        address _moderator,\n        address _contractor,\n        address _acquisitionCampaignAddress,\n        address _twoKeySingletoneRegistry,\n        address _twoKeyConversionHandler\n    ) public;\n\n    /**\n     * @notice Function which will be used as simulation for constructor under TwoKeyConversionHandler contract\n     * @dev This is just an interface of the function, the actual logic\n     * is implemented under TwoKeyConversionHandler.sol contract\n     * This function can be called only once per proxy address\n     */\n    function setInitialParamsConversionHandler(\n        uint [] values,\n        address _twoKeyAcquisitionCampaignERC20,\n        address _twoKeyPurchasesHandler,\n        address _contractor,\n        address _assetContractERC20,\n        address _twoKeySingletonRegistry\n    ) public;\n\n\n    /**\n     * @notice Function which will be used as simulation for constructor under TwoKeyPurchasesHandler contract\n     * @dev This is just an interface of the function, the actual logic\n     * is implemented under TwoKeyPurchasesHandler.sol contract\n     * This function can be called only once per proxy address\n     */\n    function setInitialParamsPurchasesHandler(\n        uint[] values,\n        address _contractor,\n        address _assetContractERC20,\n        address _twoKeyEventSource,\n        address _proxyConversionHandler\n    ) public;\n\n\n    /**\n     * @notice Function which will be used as simulation for constructor under TwoKeyDonationCampaign contract\n     * @dev This is just an interface of the function, the actual logic\n     * is implemented under TwoKeyDonationCampaign.sol contract\n     * This function can be called only once per proxy address\n     */\n    function setInitialParamsDonationCampaign(\n        address _contractor,\n        address _moderator,\n        address _twoKeySingletonRegistry,\n        address _twoKeyDonationConversionHandler,\n        address _twoKeyDonationLogicHandler,\n        uint [] numberValues,\n        bool [] booleanValues\n    ) public;\n\n    /**\n     * @notice Function which will be used as simulation for constructor under TwoKeyDonationConversionHandler contract\n     * @dev This is just an interface of the function, the actual logic\n     * is implemented under TwoKeyDonationConversionHandler.sol contract\n     * This function can be called only once per proxy address\n     */\n    function setInitialParamsDonationConversionHandler(\n        string tokenName,\n        string tokenSymbol,\n        string _currency,\n        address _contractor,\n        address _twoKeyDonationCampaign,\n        address _twoKeySingletonRegistry\n    ) public;\n\n\n    function setInitialParamsDonationLogicHandler(\n        uint[] numberValues,\n        string currency,\n        address contractor,\n        address moderator,\n        address twoKeySingletonRegistry,\n        address twoKeyDonationCampaign,\n        address twokeyDonationConversionHandler\n    ) public;\n\n\n    function setInitialParamsCPCCampaign(\n        address _contractor,\n        address _twoKeySingletonRegistry,\n        string _url,\n        address _mirrorCampaignOnPlasma,\n        uint _bountyPerConversion,\n        address _twoKeyEconomy\n    )\n    public;\n}\n\ncontract IStructuredStorage {\n\n    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;\n    function setProxyLogicContract(address _proxyLogicContract) external;\n\n    // *** Getter Methods ***\n    function getUint(bytes32 _key) external view returns(uint);\n    function getString(bytes32 _key) external view returns(string);\n    function getAddress(bytes32 _key) external view returns(address);\n    function getBytes(bytes32 _key) external view returns(bytes);\n    function getBool(bytes32 _key) external view returns(bool);\n    function getInt(bytes32 _key) external view returns(int);\n    function getBytes32(bytes32 _key) external view returns(bytes32);\n\n    // *** Getter Methods For Arrays ***\n    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);\n    function getAddressArray(bytes32 _key) external view returns (address[]);\n    function getUintArray(bytes32 _key) external view returns (uint[]);\n    function getIntArray(bytes32 _key) external view returns (int[]);\n    function getBoolArray(bytes32 _key) external view returns (bool[]);\n\n    // *** Setter Methods ***\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setAddress(bytes32 _key, address _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // *** Setter Methods For Arrays ***\n    function setBytes32Array(bytes32 _key, bytes32[] _value) external;\n    function setAddressArray(bytes32 _key, address[] _value) external;\n    function setUintArray(bytes32 _key, uint[] _value) external;\n    function setIntArray(bytes32 _key, int[] _value) external;\n    function setBoolArray(bytes32 _key, bool[] _value) external;\n\n    // *** Delete Methods ***\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteAddress(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n}\n\ncontract ITwoKeyCampaignValidator {\n    function isCampaignValidated(address campaign) public view returns (bool);\n    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n    function validateDonationCampaign(address campaign, address donationConversionHandler, address donationLogicHandler, string nonSingletonHash) public;\n    function validateCPCCampaign(address campaign, string nonSingletonHash) public;\n}\n\ncontract ITwoKeyEventSourceEvents {\n    // This 2 functions will be always in the interface since we need them very often\n    function ethereumOf(address me) public view returns (address);\n    function plasmaOf(address me) public view returns (address);\n\n    function created(\n        address _campaign,\n        address _owner,\n        address _moderator\n    )\n    external;\n\n    function rewarded(\n        address _campaign,\n        address _to,\n        uint256 _amount\n    )\n    external;\n\n    function acquisitionCampaignCreated(\n        address proxyLogicHandler,\n        address proxyConversionHandler,\n        address proxyAcquisitionCampaign,\n        address proxyPurchasesHandler,\n        address contractor\n    )\n    external;\n\n    function donationCampaignCreated(\n        address proxyDonationCampaign,\n        address proxyDonationConversionHandler,\n        address proxyDonationLogicHandler,\n        address contractor\n    )\n    external;\n\n    function priceUpdated(\n        bytes32 _currency,\n        uint newRate,\n        uint _timestamp,\n        address _updater\n    )\n    external;\n\n    function userRegistered(\n        string _name,\n        address _address,\n        string _fullName,\n        string _email,\n        string _username_walletName\n    )\n    external;\n\n    function cpcCampaignCreated(\n        address proxyCPC,\n        address contractor\n    )\n    external;\n\n\n    function emitHandleChangedEvent(\n        address _userPlasmaAddress,\n        string _newHandle\n    )\n    public;\n\n\n}\n\ncontract ITwoKeyMaintainersRegistry {\n    function checkIsAddressMaintainer(address _sender) public view returns (bool);\n    function checkIsAddressCoreDev(address _sender) public view returns (bool);\n\n    function addMaintainers(address [] _maintainers) public;\n    function addCoreDevs(address [] _coreDevs) public;\n    function removeMaintainers(address [] _maintainers) public;\n    function removeCoreDevs(address [] _coreDevs) public;\n}\n\ncontract ITwoKeySingletoneRegistryFetchAddress {\n    function getContractProxyAddress(string _contractName) public view returns (address);\n    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n    function getLatestCampaignApprovedVersion(string campaignType) public view returns (string);\n}\n\ninterface ITwoKeySingletonesRegistry {\n\n    /**\n    * @dev This event will be emitted every time a new proxy is created\n    * @param proxy representing the address of the proxy created\n    */\n    event ProxyCreated(address proxy);\n\n\n    /**\n    * @dev This event will be emitted every time a new implementation is registered\n    * @param version representing the version name of the registered implementation\n    * @param implementation representing the address of the registered implementation\n    * @param contractName is the name of the contract we added new version\n    */\n    event VersionAdded(string version, address implementation, string contractName);\n\n    /**\n    * @dev Registers a new version with its implementation address\n    * @param version representing the version name of the new implementation to be registered\n    * @param implementation representing the address of the new implementation to be registered\n    */\n    function addVersion(string _contractName, string version, address implementation) public;\n\n    /**\n    * @dev Tells the address of the implementation for a given version\n    * @param _contractName is the name of the contract we're querying\n    * @param version to query the implementation of\n    * @return address of the implementation registered for the given version\n    */\n    function getVersion(string _contractName, string version) public view returns (address);\n}\n\ncontract ITwoKeyFactoryStorage is IStructuredStorage {\n\n}\n\ncontract ITwoKeySingletonUtils {\n\n    address public TWO_KEY_SINGLETON_REGISTRY;\n\n    // Modifier to restrict method calls only to maintainers\n    modifier onlyMaintainer {\n        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyMaintainersRegistry\");\n        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).checkIsAddressMaintainer(msg.sender));\n        _;\n    }\n\n    /**\n     * @notice Function to get any singleton contract proxy address from TwoKeySingletonRegistry contract\n     * @param contractName is the name of the contract we're looking for\n     */\n    function getAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getContractProxyAddress(contractName);\n    }\n\n    function getNonUpgradableContractAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getNonUpgradableContractAddress(contractName);\n    }\n}\n\ncontract Proxy {\n\n\n    // Gives the possibility to delegate any call to a foreign implementation.\n\n\n    /**\n    * @dev Tells the address of the implementation where every call will be delegated.\n    * @return address of the implementation to which it will be delegated\n    */\n    function implementation() public view returns (address);\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function () payable public {\n        address _impl = implementation();\n        require(_impl != address(0));\n\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize)\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n            let size := returndatasize\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\ncontract UpgradeabilityStorage {\n    // Versions registry\n    ITwoKeySingletonesRegistry internal registry;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\ncontract Upgradeable is UpgradeabilityStorage {\n    /**\n     * @dev Validates the caller is the versions registry.\n     * @param sender representing the address deploying the initial behavior of the contract\n     */\n    function initialize(address sender) public payable {\n        require(msg.sender == address(registry));\n    }\n}\n\ncontract TwoKeyFactory is Upgradeable, ITwoKeySingletonUtils {\n\n    bool initialized;\n\n    string constant _addressToCampaignType = \"addressToCampaignType\";\n    string constant _twoKeyEventSource = \"TwoKeyEventSource\";\n    string constant _twoKeyCampaignValidator = \"TwoKeyCampaignValidator\";\n\n    ITwoKeyFactoryStorage PROXY_STORAGE_CONTRACT;\n\n    event ProxyForCampaign(\n        address proxyLogicHandler,\n        address proxyConversionHandler,\n        address proxyAcquisitionCampaign,\n        address proxyPurchasesHandler,\n        address contractor\n    );\n\n    event ProxyForDonationCampaign(\n        address proxyDonationCampaign,\n        address proxyDonationConversionHandler,\n        address proxyDonationLogicHandler,\n        address contractor\n    );\n\n\n    /**\n     * @notice Function to set initial parameters for the contract\n     * @param _twoKeySingletonRegistry is the address of singleton registry contract\n     */\n    function setInitialParams(\n        address _twoKeySingletonRegistry,\n        address _proxyStorage\n    )\n    public\n    {\n        require(initialized == false);\n\n        TWO_KEY_SINGLETON_REGISTRY = ITwoKeySingletoneRegistryFetchAddress(_twoKeySingletonRegistry);\n        PROXY_STORAGE_CONTRACT = ITwoKeyFactoryStorage(_proxyStorage);\n        initialized = true;\n    }\n\n    function getLatestApprovedCampaignVersion(\n        string campaignType\n    )\n    public\n    view\n    returns (string)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getLatestCampaignApprovedVersion(campaignType);\n    }\n\n    function createProxyForCampaign(\n        string campaignType,\n        string campaignName\n    )\n    internal\n    returns (address)\n    {\n        ProxyCampaign proxy = new ProxyCampaign(\n            campaignName,\n            getLatestApprovedCampaignVersion(campaignType),\n            address(TWO_KEY_SINGLETON_REGISTRY)\n        );\n        return address(proxy);\n    }\n\n\n    /**\n     * @notice Function used to deploy all necessary proxy contracts in order to use the campaign.\n     * @dev This function will handle all necessary actions which should be done on the contract\n     * in order to make them ready to work. Also, we've been unfortunately forced to use arrays\n     * as arguments since the stack is not deep enough to handle this amount of input information\n     * since this method handles kick-start of 3 contracts\n     * @param addresses is array of addresses needed [assetContractERC20,moderator]\n     * @param valuesConversion is array containing necessary values to start conversion handler contract\n     * @param valuesLogicHandler is array of values necessary to start logic handler contract\n     * @param values is array containing values necessary to start campaign contract\n     * @param _currency is the main currency token price is set\n     * @param _nonSingletonHash is the hash of non-singleton contracts active with responding\n     * 2key-protocol version at the moment\n     */\n    function createProxiesForAcquisitions(\n        address[] addresses,\n        uint[] valuesConversion,\n        uint[] valuesLogicHandler,\n        uint[] values,\n        string _currency,\n        string _nonSingletonHash\n    )\n    public\n    payable\n    {\n\n        //Deploy proxy for Acquisition contract\n        address proxyAcquisition = createProxyForCampaign(\"TOKEN_SELL\",\"TwoKeyAcquisitionCampaignERC20\");\n\n        //Deploy proxy for ConversionHandler contract\n        address proxyConversions = createProxyForCampaign(\"TOKEN_SELL\",\"TwoKeyConversionHandler\");\n\n        //Deploy proxy for TwoKeyAcquisitionLogicHandler contract\n        address proxyLogicHandler = createProxyForCampaign(\"TOKEN_SELL\",\"TwoKeyAcquisitionLogicHandler\");\n\n        //Deploy proxy for TwoKeyPurchasesHandler contract\n        address proxyPurchasesHandler = createProxyForCampaign(\"TOKEN_SELL\",\"TwoKeyPurchasesHandler\");\n\n\n        IHandleCampaignDeployment(proxyPurchasesHandler).setInitialParamsPurchasesHandler(\n            valuesConversion,\n            msg.sender,\n            addresses[0],\n            getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource),\n            proxyConversions\n        );\n\n        // Set initial arguments inside Conversion Handler contract\n        IHandleCampaignDeployment(proxyConversions).setInitialParamsConversionHandler(\n            valuesConversion,\n            proxyAcquisition,\n            proxyPurchasesHandler,\n            msg.sender,\n            addresses[0], //ERC20 address\n            TWO_KEY_SINGLETON_REGISTRY\n        );\n\n        // Set initial arguments inside Logic Handler contract\n        IHandleCampaignDeployment(proxyLogicHandler).setInitialParamsLogicHandler(\n            valuesLogicHandler,\n            _currency,\n            addresses[0], //asset contract erc20\n            addresses[1], // moderator\n            msg.sender,\n            proxyAcquisition,\n            address(TWO_KEY_SINGLETON_REGISTRY),\n            proxyConversions\n        );\n\n        // Set initial arguments inside AcquisitionCampaign contract\n        IHandleCampaignDeployment(proxyAcquisition).setInitialParamsCampaign(\n            address(TWO_KEY_SINGLETON_REGISTRY),\n            address(proxyLogicHandler),\n            address(proxyConversions),\n            addresses[1], //moderator\n            addresses[0], //asset contract\n            msg.sender, //contractor\n            getNonUpgradableContractAddressFromTwoKeySingletonRegistry(\"TwoKeyEconomy\"),\n            values\n        );\n\n        // Validate campaign so it will be approved to interact (and write) to/with our singleton contracts\n        ITwoKeyCampaignValidator(getAddressFromTwoKeySingletonRegistry(_twoKeyCampaignValidator))\n        .validateAcquisitionCampaign(proxyAcquisition, _nonSingletonHash);\n\n        setAddressToCampaignType(proxyAcquisition, \"TOKEN_SELL\");\n\n        ITwoKeyEventSourceEvents(getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource))\n        .acquisitionCampaignCreated(\n            proxyLogicHandler,\n            proxyConversions,\n            proxyAcquisition,\n            proxyPurchasesHandler,\n            plasmaOf(msg.sender)\n        );\n    }\n\n\n    /**\n     * @notice Function to deploy proxy contracts for donation campaigns\n     */\n    function createProxiesForDonationCampaign(\n        address _moderator,\n        uint [] numberValues,\n        bool [] booleanValues,\n        string _currency,\n        string tokenName,\n        string tokenSymbol,\n        string nonSingletonHash\n    )\n    public\n    {\n\n        // Deploying a proxy contract for donations\n        address proxyDonationCampaign = createProxyForCampaign(\"DONATION\",\"TwoKeyDonationCampaign\");\n\n        //Deploying a proxy contract for donation conversion handler\n        address proxyDonationConversionHandler = createProxyForCampaign(\"DONATION\",\"TwoKeyDonationConversionHandler\");\n\n        //Deploying a proxy contract for donation logic handler\n        address proxyDonationLogicHandler = createProxyForCampaign(\"DONATION\",\"TwoKeyDonationLogicHandler\");\n\n        IHandleCampaignDeployment(proxyDonationLogicHandler).setInitialParamsDonationLogicHandler(\n            numberValues,\n            _currency,\n            msg.sender,\n            _moderator,\n            TWO_KEY_SINGLETON_REGISTRY,\n            proxyDonationCampaign,\n            proxyDonationConversionHandler\n        );\n\n        // Set initial parameters under Donation conversion handler\n        IHandleCampaignDeployment(proxyDonationConversionHandler).setInitialParamsDonationConversionHandler(\n            tokenName,\n            tokenSymbol,\n            _currency,\n            msg.sender, //contractor\n            proxyDonationCampaign,\n            address(TWO_KEY_SINGLETON_REGISTRY)\n        );\n//\n        // Set initial parameters under Donation campaign contract\n        IHandleCampaignDeployment(proxyDonationCampaign).setInitialParamsDonationCampaign(\n            msg.sender, //contractor\n            _moderator, //moderator address\n            TWO_KEY_SINGLETON_REGISTRY,\n            proxyDonationConversionHandler,\n            proxyDonationLogicHandler,\n            numberValues,\n            booleanValues\n        );\n\n        // Validate campaign\n        ITwoKeyCampaignValidator(getAddressFromTwoKeySingletonRegistry(_twoKeyCampaignValidator))\n        .validateDonationCampaign(\n            proxyDonationCampaign,\n            proxyDonationConversionHandler,\n            proxyDonationLogicHandler,\n            nonSingletonHash\n        );\n\n        setAddressToCampaignType(proxyDonationCampaign, \"DONATION\");\n\n        ITwoKeyEventSourceEvents(getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource))\n        .donationCampaignCreated(\n            proxyDonationCampaign,\n            proxyDonationConversionHandler,\n            proxyDonationLogicHandler,\n            plasmaOf(msg.sender)\n        );\n    }\n\n    function createProxyForCPCCampaign(\n        string _url,\n        uint _bountyPerConversion,\n        address _mirrorCampaignOnPlasma,\n        string _nonSingletonHash\n    )\n    public\n    {\n        address proxyCPC = createProxyForCampaign(\"CPC_PUBLIC\",\"TwoKeyCPCCampaign\");\n\n        IHandleCampaignDeployment(proxyCPC).setInitialParamsCPCCampaign(\n            msg.sender,\n            TWO_KEY_SINGLETON_REGISTRY,\n            _url,\n            _mirrorCampaignOnPlasma,\n            _bountyPerConversion,\n            getNonUpgradableContractAddressFromTwoKeySingletonRegistry(\"TwoKeyEconomy\")\n        );\n\n        setAddressToCampaignType(proxyCPC, \"CPC_PUBLIC\");\n\n        //Validate campaign\n        ITwoKeyCampaignValidator(getAddressFromTwoKeySingletonRegistry(_twoKeyCampaignValidator))\n        .validateCPCCampaign(\n            proxyCPC,\n            _nonSingletonHash\n        );\n\n        //Emit event that TwoKeyCPCCampaign contract is created\n        ITwoKeyEventSourceEvents(getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource))\n        .cpcCampaignCreated(\n            proxyCPC,\n            plasmaOf(msg.sender)\n        );\n    }\n\n    /**\n     * @notice internal function to set address to campaign type\n     * @param _campaignAddress is the address of campaign\n     * @param _campaignType is the type of campaign (String)\n     */\n    function setAddressToCampaignType(address _campaignAddress, string _campaignType) internal {\n        bytes32 keyHash = keccak256(_addressToCampaignType, _campaignAddress);\n        PROXY_STORAGE_CONTRACT.setString(keyHash, _campaignType);\n    }\n\n    /**\n     * @notice Function working as a getter\n     * @param _key is the address of campaign\n     */\n    function addressToCampaignType(address _key) public view returns (string) {\n        return PROXY_STORAGE_CONTRACT.getString(keccak256(_addressToCampaignType, _key));\n    }\n\n    function plasmaOf(address _address) internal view returns (address) {\n        address twoKeyEventSource = getAddressFromTwoKeySingletonRegistry(_twoKeyEventSource);\n        address plasma = ITwoKeyEventSourceEvents(twoKeyEventSource).plasmaOf(_address);\n        return plasma;\n    }\n\n\n\n}\n\ncontract UpgradeabilityCampaignStorage {\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\ncontract ProxyCampaign is Proxy, UpgradeabilityCampaignStorage {\n\n    constructor (string _contractName, string _version, address twoKeySingletonRegistry) public {\n        _implementation = ITwoKeySingletonesRegistry(twoKeySingletonRegistry).getVersion(_contractName, _version);\n    }\n}\n\ncontract UpgradeableCampaign is UpgradeabilityCampaignStorage {\n\n}\n\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_twoKeySingletonRegistry\",\"type\":\"address\"},{\"name\":\"_proxyStorage\",\"type\":\"address\"}],\"name\":\"setInitialParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"addressToCampaignType\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_bountyPerConversion\",\"type\":\"uint256\"},{\"name\":\"_mirrorCampaignOnPlasma\",\"type\":\"address\"},{\"name\":\"_nonSingletonHash\",\"type\":\"string\"}],\"name\":\"createProxyForCPCCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_moderator\",\"type\":\"address\"},{\"name\":\"numberValues\",\"type\":\"uint256[]\"},{\"name\":\"booleanValues\",\"type\":\"bool[]\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"nonSingletonHash\",\"type\":\"string\"}],\"name\":\"createProxiesForDonationCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"valuesConversion\",\"type\":\"uint256[]\"},{\"name\":\"valuesLogicHandler\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_nonSingletonHash\",\"type\":\"string\"}],\"name\":\"createProxiesForAcquisitions\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_KEY_SINGLETON_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"campaignType\",\"type\":\"string\"}],\"name\":\"getLatestApprovedCampaignVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyLogicHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyConversionHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyAcquisitionCampaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyPurchasesHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"ProxyForCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyDonationCampaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyDonationConversionHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyDonationLogicHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"ProxyForDonationCampaign\",\"type\":\"event\"}]","ContractName":"TwoKeyFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}