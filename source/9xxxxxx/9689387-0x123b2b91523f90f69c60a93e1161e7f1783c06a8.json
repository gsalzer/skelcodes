{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n *    ______                           ____                    __               ______\r\n *   / ____/____ _ ____ ___   ___     / __ \\ ___   ____ _ ____/ /___   _____   / ____/____   _____\r\n *  / / __ / __ `// __ `__ \\ / _ \\   / /_/ // _ \\ / __ `// __  // _ \\ / ___/  / /_   / __ \\ / ___/\r\n * / /_/ // /_/ // / / / / //  __/  / _, _//  __// /_/ // /_/ //  __// /     / __/  / /_/ // /\r\n * \\____/ \\__,_//_/ /_/ /_/ \\___/  /_/ |_| \\___/ \\__,_/ \\__,_/ \\___//_/     /_/     \\____//_/\r\n *    _____               _____                          __   __     _               ___                            __     __\r\n *   / ___/ ____ _ __  __/ ___/ ____   ____ ___   ___   / /_ / /_   (_)____   ____ _|__ \\   _      __ ____   _____ / /____/ /\r\n *   \\__ \\ / __ `// / / /\\__ \\ / __ \\ / __ `__ \\ / _ \\ / __// __ \\ / // __ \\ / __ `/__/ /  | | /| / // __ \\ / ___// // __  /\r\n *  ___/ // /_/ // /_/ /___/ // /_/ // / / / / //  __// /_ / / / // // / / // /_/ // __/ _ | |/ |/ // /_/ // /   / // /_/ /\r\n * /____/ \\__,_/ \\__, //____/ \\____//_/ /_/ /_/ \\___/ \\__//_/ /_//_//_/ /_/ \\__, //____/(_)|__/|__/ \\____//_/   /_/ \\__,_/\r\n *              /____/                                                     /____/\r\n */\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of GAME\r\n */\r\ninterface IGame {\r\n    function block2timestamp(uint256 blockNumber) external view returns (uint256);\r\n    function serial2player(uint256 serial) external view returns (address payable);\r\n\r\n    function getStatus() external view\r\n        returns (\r\n            uint256 timer,\r\n            uint256 roundCounter,\r\n            uint256 playerCounter,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n\r\n            uint256 cookieFund,\r\n            uint256 winnerFund,\r\n\r\n            uint256 surpriseIssued,\r\n            uint256 bonusIssued,\r\n            uint256 cookieIssued,\r\n            uint256 shareholderIssued\r\n        );\r\n\r\n    function getPlayer(address account) external view\r\n        returns (\r\n            uint256 serial,\r\n            bytes memory name,\r\n            bytes memory adviserName,\r\n            address payable adviser,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n            uint256 followerCounter,\r\n            uint256 followerMessageCounter,\r\n            uint256 followerCookieCounter,\r\n            uint256 bonusWeis,\r\n            uint256 surpriseWeis\r\n        );\r\n\r\n    function getPlayerPrime(address account) external view\r\n        returns (\r\n            bytes memory playerName,\r\n            uint256 pinnedMessageSerial,\r\n            uint8 topPlayerPosition,\r\n            uint8 shareholderPosition,\r\n            uint256 shareholderStakingWeis,\r\n            uint256 shareholderProfitWeis,\r\n            uint256 shareholderFirstBlockNumber\r\n        );\r\n\r\n    function getPlayerDisplay(address account) external view\r\n        returns (\r\n            uint256 messageCounter,\r\n            uint256 pinnedMessageSerial,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getPlayerMessage(address account, uint256 serial) external view\r\n        returns (\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getPlayerCookie(address account, uint256 serial) external view\r\n        returns (\r\n            uint256 cookieSerial,\r\n\r\n            address payable player,\r\n            address payable adviser,\r\n            bytes memory playerName,\r\n            bytes memory adviserName,\r\n            uint256 playerWeis,\r\n            uint256 adviserWeis,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getPlayerFollowerCookie(address account, uint256 serial) external view\r\n        returns (\r\n            uint256 cookieSerial,\r\n\r\n            address payable player,\r\n            address payable adviser,\r\n            bytes memory playerName,\r\n            bytes memory adviserName,\r\n            uint256 playerWeis,\r\n            uint256 adviserWeis,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getPlayerFollower(address account, uint256 serial) external view\r\n        returns (address payable);\r\n}\r\n\r\n\r\n/**\r\n * @dev Structs of game.\r\n */\r\nlibrary GameLib {\r\n    struct Message {\r\n        uint256 serial;\r\n        address account;\r\n        bytes name;\r\n        bytes text;\r\n        uint256 blockNumber;\r\n    }\r\n\r\n    struct Cookie {\r\n        uint256 serial;\r\n\r\n        address payable player;\r\n        address payable adviser;\r\n        bytes playerName;\r\n        bytes adviserName;\r\n        uint256 playerWeis;\r\n        uint256 adviserWeis;\r\n\r\n        uint256 messageSerial;\r\n        bytes text;\r\n        uint256 blockNumber;\r\n    }\r\n\r\n    struct Round {\r\n        uint256 openedBlock;\r\n        uint256 closingBlock;\r\n        uint256 closedTimestamp;\r\n        uint256 openingWinnerFund;\r\n        uint256 closingWinnerFund;\r\n        address payable opener;\r\n        uint256 openerBonus;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Structs of player.\r\n */\r\nlibrary PlayerLib {\r\n    struct Player {\r\n        uint256 serial;\r\n\r\n        bytes name;\r\n        bytes adviserName;\r\n        address payable adviser;\r\n        uint256 messageCounter;\r\n        uint256 cookieCounter;\r\n        uint256 followerCounter;\r\n        uint256 followerMessageCounter;\r\n        uint256 followerCookieCounter;\r\n        uint256 bonusWeis;\r\n        uint256 surpriseWeis;\r\n    }\r\n}\r\n\r\n/**\r\n * @title GameReaderB contract.\r\n */\r\ncontract ReaderB {\r\n    using SafeMath for uint256;\r\n    using PlayerLib for PlayerLib.Player;\r\n\r\n    IGame private _game;\r\n\r\n    uint8 constant SM_PAGE = 10;\r\n    uint8 constant LG_PAGE = 20;\r\n    uint8 constant SHAREHOLDER_MAX_POSITION = 6;\r\n    uint8 constant TOP_PLAYER_MAX_POSITION = 20;\r\n    uint8 constant WINNERS_PER_ROUND = 10;\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor ()\r\n        public\r\n    {\r\n        _game = IGame(0x1234567B172f040f45D7e924C0a7d088016191A6);\r\n    }\r\n\r\n    function () external payable {\r\n        revert(\"Cannot deposit\");\r\n    }\r\n\r\n    function game()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(_game);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns player info of `account`.\r\n     */\r\n    function player(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 serial,\r\n            bytes memory name,\r\n            bytes memory adviserName,\r\n            address payable adviser,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n            uint256 followerCounter,\r\n            uint256 followerMessageCounter,\r\n            uint256 followerCookieCounter,\r\n            uint256 bonusWeis,\r\n            uint256 surpriseWeis,\r\n            uint256 firstMessageTimestamp\r\n        )\r\n    {\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        serial = thePlayer.serial;\r\n        name = thePlayer.name;\r\n        adviserName = thePlayer.adviserName;\r\n        adviser = thePlayer.adviser;\r\n        messageCounter = thePlayer.messageCounter;\r\n        cookieCounter = thePlayer.cookieCounter;\r\n        followerCounter = thePlayer.followerCounter;\r\n        followerMessageCounter = thePlayer.followerMessageCounter;\r\n        followerCookieCounter = thePlayer.followerCookieCounter;\r\n        bonusWeis = thePlayer.bonusWeis;\r\n        surpriseWeis = thePlayer.surpriseWeis;\r\n\r\n        (, firstMessageTimestamp) = _playerFirstMessageBT(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns player info @ `playerSerial`.\r\n     */\r\n    function playerAt(uint256 playerSerial)\r\n        public\r\n        view\r\n        returns (\r\n            bytes memory name,\r\n            bytes memory adviserName,\r\n            address payable account,\r\n            address payable adviser,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n            uint256 followerCounter,\r\n            uint256 followerMessageCounter,\r\n            uint256 followerCookieCounter,\r\n            uint256 bonusWeis,\r\n            uint256 surpriseWeis,\r\n            uint256 firstMessageTimestamp\r\n        )\r\n    {\r\n        if (playerSerial > 0)\r\n        {\r\n            account =_game.serial2player(playerSerial);\r\n\r\n            PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n            adviser = thePlayer.adviser;\r\n\r\n            name = thePlayer.name;\r\n            adviserName = thePlayer.adviserName;\r\n            messageCounter = thePlayer.messageCounter;\r\n            cookieCounter = thePlayer.cookieCounter;\r\n            followerCounter = thePlayer.followerCounter;\r\n            followerMessageCounter = thePlayer.followerMessageCounter;\r\n            followerCookieCounter = thePlayer.followerCookieCounter;\r\n            bonusWeis = thePlayer.bonusWeis;\r\n            surpriseWeis = thePlayer.surpriseWeis;\r\n\r\n            (, firstMessageTimestamp) = _playerFirstMessageBT(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return player top-player and shareholder position, of `account`.\r\n     */\r\n    function playerPrime(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 pinnedMessageSerial,\r\n\r\n            uint256 firstMessageBlockNumber,\r\n            uint256 firstMessageTimestamp,\r\n\r\n            uint8 topPlayerPosition,\r\n\r\n            uint8 shareholderPosition,\r\n            uint256 shareholderStakingWeis,\r\n            uint256 shareholderProfitWeis,\r\n            uint256 shareholderFirstBlockNumber,\r\n            uint256 shareholderFirstTimestamp\r\n        )\r\n    {\r\n        (\r\n            firstMessageBlockNumber,\r\n            firstMessageTimestamp\r\n        )\r\n        = _playerFirstMessageBT(account);\r\n\r\n        (\r\n            , // bytes memory playerName,\r\n            pinnedMessageSerial,\r\n\r\n            topPlayerPosition,\r\n\r\n            shareholderPosition,\r\n            shareholderStakingWeis,\r\n            shareholderProfitWeis,\r\n            shareholderFirstBlockNumber\r\n        )\r\n        = _game.getPlayerPrime(account);\r\n\r\n        shareholderFirstTimestamp = _game.block2timestamp(shareholderFirstBlockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns messages of `account`, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function playerMessages(address account, uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            bytes[SM_PAGE] memory texts,\r\n            uint256[SM_PAGE] memory blockNumbers,\r\n            uint256[SM_PAGE] memory timestamps\r\n        )\r\n    {\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        if (thePlayer.messageCounter > 0)\r\n        {\r\n            if (till == 0)\r\n            {\r\n                till = thePlayer.messageCounter;\r\n            }\r\n\r\n            if (till <= thePlayer.messageCounter)\r\n            {\r\n                for (uint256 i = 0; i < SM_PAGE; i++)\r\n                {\r\n                    uint256 serial = till.sub(i);\r\n                    if (serial < 1)\r\n                    {\r\n                        break;\r\n                    }\r\n\r\n                    GameLib.Message memory theMessage = _playerMessage(account, serial);\r\n\r\n                    serials[i] = serial;\r\n\r\n                    messageSerials[i] = theMessage.serial;\r\n                    texts[i] = theMessage.text;\r\n                    blockNumbers[i] = theMessage.blockNumber;\r\n                    timestamps[i] = _game.block2timestamp(theMessage.blockNumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns cookies of `account`, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function playerCookies(address account, uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory advisers,\r\n            bytes[SM_PAGE] memory adviserNames,\r\n            uint256[SM_PAGE] memory playerWeis,\r\n            uint256[SM_PAGE] memory adviserWeis,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            bytes[SM_PAGE] memory texts,\r\n            uint256[SM_PAGE] memory blockNumbers,\r\n            uint256[SM_PAGE] memory timestamps\r\n        )\r\n    {\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        if (thePlayer.cookieCounter > 0)\r\n        {\r\n            if (till == 0)\r\n            {\r\n                till = thePlayer.cookieCounter;\r\n            }\r\n\r\n            if (till <= thePlayer.cookieCounter)\r\n            {\r\n                for (uint256 i = 0; i < SM_PAGE; i++)\r\n                {\r\n                    uint256 serial = till.sub(i);\r\n                    if (serial < 1)\r\n                    {\r\n                        break;\r\n                    }\r\n\r\n                    GameLib.Cookie memory cookie = _playerCookie(account, serial);\r\n\r\n                    serials[i] = cookie.serial;\r\n                    advisers[i] = cookie.adviser;\r\n                    adviserNames[i] = cookie.adviserName;\r\n                    playerWeis[i] = cookie.playerWeis;\r\n                    adviserWeis[i] = cookie.adviserWeis;\r\n\r\n                    messageSerials[i] = cookie.messageSerial;\r\n                    texts[i] = cookie.text;\r\n                    blockNumbers[i] = cookie.blockNumber;\r\n                    timestamps[i] = _game.block2timestamp(cookie.blockNumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns follower-cookies of `account`, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function playerFollowerCookies(address account, uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory players,\r\n            bytes[SM_PAGE] memory playerNames,\r\n            uint256[SM_PAGE] memory playerWeis,\r\n            uint256[SM_PAGE] memory adviserWeis,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            bytes[SM_PAGE] memory texts,\r\n            uint256[SM_PAGE] memory blockNumbers,\r\n            uint256[SM_PAGE] memory timestamps\r\n        )\r\n    {\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        if (thePlayer.followerCookieCounter > 0)\r\n        {\r\n            if (till == 0)\r\n            {\r\n                till = thePlayer.followerCookieCounter;\r\n            }\r\n\r\n            if (till <= thePlayer.followerCookieCounter)\r\n            {\r\n                for (uint256 i = 0; i < SM_PAGE; i++)\r\n                {\r\n                    uint256 serial = till.sub(i);\r\n                    if (serial < 1)\r\n                    {\r\n                        break;\r\n                    }\r\n\r\n                    GameLib.Cookie memory cookie = _playerFollowerCookie(account, serial);\r\n\r\n                    serials[i] = cookie.serial;\r\n                    players[i] = cookie.player;\r\n                    // advisers[i] = cookie.adviser;\r\n                    playerNames[i] = cookie.playerName;\r\n                    // adviserNames[i] = cookie.adviserName;\r\n                    playerWeis[i] = cookie.playerWeis;\r\n                    adviserWeis[i] = cookie.adviserWeis;\r\n\r\n                    messageSerials[i] = cookie.messageSerial;\r\n                    texts[i] = cookie.text;\r\n                    blockNumbers[i] = cookie.blockNumber;\r\n                    timestamps[i] = _game.block2timestamp(cookie.blockNumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns followers of `account`, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function playerFollowersA(address account, uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory playerSerials,\r\n            bytes[SM_PAGE] memory names,\r\n            bytes[SM_PAGE] memory adviserNames,\r\n            address[SM_PAGE] memory advisers,\r\n            uint256[SM_PAGE] memory bonusWeis,\r\n            uint256[SM_PAGE] memory surpriseWeis,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            uint256[SM_PAGE] memory messageBlockNumbers,\r\n            uint256[SM_PAGE] memory messageTimestamps,\r\n            bytes[SM_PAGE] memory messageTexts\r\n        )\r\n    {\r\n        (serials, accounts) = _playerFollowerAccounts(account, till);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                playerSerials[i] = thePlayer.serial;\r\n                names[i] = thePlayer.name;\r\n\r\n                adviserNames[i] = thePlayer.adviserName;\r\n                advisers[i] = thePlayer.adviser;\r\n\r\n                bonusWeis[i] = thePlayer.bonusWeis;\r\n                surpriseWeis[i] = thePlayer.surpriseWeis;\r\n\r\n                (\r\n                    , // uint256 messageCounter,\r\n                    , // uint256 pinnedMessageSerial,\r\n                    messageSerials[i],\r\n                    messageTexts[i],\r\n                    messageBlockNumbers[i]\r\n                )\r\n                = _game.getPlayerDisplay(accounts[i]);\r\n\r\n                messageTimestamps[i] = _game.block2timestamp(messageBlockNumbers[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerFollowersB(address account, uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory messageCounters,\r\n            uint256[SM_PAGE] memory cookieCounters,\r\n            uint256[SM_PAGE] memory followerCounters,\r\n            uint256[SM_PAGE] memory followerMessageCounters,\r\n            uint256[SM_PAGE] memory followerCookieCounters,\r\n\r\n            uint256[SM_PAGE] memory firstMessageBlockNumbers,\r\n            uint256[SM_PAGE] memory firstMessageTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerFollowerAccounts(account, till);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                messageCounters[i] = thePlayer.messageCounter;\r\n                cookieCounters[i] = thePlayer.cookieCounter;\r\n\r\n                followerCounters[i] = thePlayer.followerCounter;\r\n                followerMessageCounters[i] = thePlayer.followerMessageCounter;\r\n                followerCookieCounters[i] = thePlayer.followerCookieCounter;\r\n\r\n                (\r\n                    firstMessageBlockNumbers[i],\r\n                    firstMessageTimestamps[i]\r\n                )\r\n                = _playerFirstMessageBT(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerFollowersC(address account, uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory pinnedMessageSerials,\r\n\r\n            uint8[SM_PAGE] memory topPlayerPositions,\r\n            uint8[SM_PAGE] memory shareholderPositions,\r\n            uint256[SM_PAGE] memory shareholderStakingWeis,\r\n            uint256[SM_PAGE] memory shareholderProfitWeis,\r\n            uint256[SM_PAGE] memory shareholderFirstBlockNumbers,\r\n            uint256[SM_PAGE] memory shareholderFirstTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerFollowerAccounts(account, till);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                (\r\n                    pinnedMessageSerials[i],\r\n                    , // uint256 firstMessageBlockNumber,\r\n                    , // uint256 firstMessageTimestamp,\r\n                    topPlayerPositions[i],\r\n                    shareholderPositions[i],\r\n                    shareholderStakingWeis[i],\r\n                    shareholderProfitWeis[i],\r\n                    shareholderFirstBlockNumbers[i],\r\n                    shareholderFirstTimestamps[i]\r\n                )\r\n                = playerPrime(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Returns advisers of `account`.\r\n     */\r\n    function playerAdvisersA(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory playerSerials,\r\n            bytes[SM_PAGE] memory names,\r\n            bytes[SM_PAGE] memory adviserNames,\r\n            address[SM_PAGE] memory advisers,\r\n            uint256[SM_PAGE] memory bonusWeis,\r\n            uint256[SM_PAGE] memory surpriseWeis,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            uint256[SM_PAGE] memory messageBlockNumbers,\r\n            uint256[SM_PAGE] memory messageTimestamps,\r\n            bytes[SM_PAGE] memory messageTexts\r\n        )\r\n    {\r\n        (serials, accounts) = _playerAdviserAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                playerSerials[i] = thePlayer.serial;\r\n                names[i] = thePlayer.name;\r\n\r\n                adviserNames[i] = thePlayer.adviserName;\r\n                advisers[i] = thePlayer.adviser;\r\n\r\n                bonusWeis[i] = thePlayer.bonusWeis;\r\n                surpriseWeis[i] = thePlayer.surpriseWeis;\r\n\r\n                (\r\n                    , // uint256 messageCounter,\r\n                    , // uint256 pinnedMessageSerial,\r\n                    messageSerials[i],\r\n                    messageTexts[i],\r\n                    messageBlockNumbers[i]\r\n                )\r\n                = _game.getPlayerDisplay(accounts[i]);\r\n\r\n                messageTimestamps[i] = _game.block2timestamp(messageBlockNumbers[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerAdvisersB(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory messageCounters,\r\n            uint256[SM_PAGE] memory cookieCounters,\r\n            uint256[SM_PAGE] memory followerCounters,\r\n            uint256[SM_PAGE] memory followerMessageCounters,\r\n            uint256[SM_PAGE] memory followerCookieCounters,\r\n\r\n            uint256[SM_PAGE] memory firstMessageBlockNumbers,\r\n            uint256[SM_PAGE] memory firstMessageTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerAdviserAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                messageCounters[i] = thePlayer.messageCounter;\r\n                cookieCounters[i] = thePlayer.cookieCounter;\r\n\r\n                followerCounters[i] = thePlayer.followerCounter;\r\n                followerMessageCounters[i] = thePlayer.followerMessageCounter;\r\n                followerCookieCounters[i] = thePlayer.followerCookieCounter;\r\n\r\n                (\r\n                    firstMessageBlockNumbers[i],\r\n                    firstMessageTimestamps[i]\r\n                )\r\n                = _playerFirstMessageBT(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerAdvisersC(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory pinnedMessageSerials,\r\n\r\n            uint8[SM_PAGE] memory topPlayerPositions,\r\n            uint8[SM_PAGE] memory shareholderPositions,\r\n            uint256[SM_PAGE] memory shareholderStakingWeis,\r\n            uint256[SM_PAGE] memory shareholderProfitWeis,\r\n            uint256[SM_PAGE] memory shareholderFirstBlockNumbers,\r\n            uint256[SM_PAGE] memory shareholderFirstTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerAdviserAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                (\r\n                    pinnedMessageSerials[i],\r\n                    , // uint256 firstMessageBlockNumber,\r\n                    , // uint256 firstMessageTimestamp,\r\n                    topPlayerPositions[i],\r\n                    shareholderPositions[i],\r\n                    shareholderStakingWeis[i],\r\n                    shareholderProfitWeis[i],\r\n                    shareholderFirstBlockNumbers[i],\r\n                    shareholderFirstTimestamps[i]\r\n                )\r\n                = playerPrime(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns previous of `account`.\r\n     */\r\n    function playerPreviousA(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory playerSerials,\r\n            bytes[SM_PAGE] memory names,\r\n            bytes[SM_PAGE] memory adviserNames,\r\n            address[SM_PAGE] memory advisers,\r\n            uint256[SM_PAGE] memory bonusWeis,\r\n            uint256[SM_PAGE] memory surpriseWeis,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            uint256[SM_PAGE] memory messageBlockNumbers,\r\n            uint256[SM_PAGE] memory messageTimestamps,\r\n            bytes[SM_PAGE] memory messageTexts\r\n        )\r\n    {\r\n        (serials, accounts) = _playerPreviousAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                playerSerials[i] = thePlayer.serial;\r\n                names[i] = thePlayer.name;\r\n\r\n                adviserNames[i] = thePlayer.adviserName;\r\n                advisers[i] = thePlayer.adviser;\r\n\r\n                bonusWeis[i] = thePlayer.bonusWeis;\r\n                surpriseWeis[i] = thePlayer.surpriseWeis;\r\n\r\n                (\r\n                    , // uint256 messageCounter,\r\n                    , // uint256 pinnedMessageSerial,\r\n                    messageSerials[i],\r\n                    messageTexts[i],\r\n                    messageBlockNumbers[i]\r\n                )\r\n                = _game.getPlayerDisplay(accounts[i]);\r\n\r\n                messageTimestamps[i] = _game.block2timestamp(messageBlockNumbers[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerPreviousB(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory messageCounters,\r\n            uint256[SM_PAGE] memory cookieCounters,\r\n            uint256[SM_PAGE] memory followerCounters,\r\n            uint256[SM_PAGE] memory followerMessageCounters,\r\n            uint256[SM_PAGE] memory followerCookieCounters,\r\n\r\n            uint256[SM_PAGE] memory firstMessageBlockNumbers,\r\n            uint256[SM_PAGE] memory firstMessageTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerPreviousAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                messageCounters[i] = thePlayer.messageCounter;\r\n                cookieCounters[i] = thePlayer.cookieCounter;\r\n\r\n                followerCounters[i] = thePlayer.followerCounter;\r\n                followerMessageCounters[i] = thePlayer.followerMessageCounter;\r\n                followerCookieCounters[i] = thePlayer.followerCookieCounter;\r\n\r\n                (\r\n                    firstMessageBlockNumbers[i],\r\n                    firstMessageTimestamps[i]\r\n                )\r\n                = _playerFirstMessageBT(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerPreviousC(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory pinnedMessageSerials,\r\n\r\n            uint8[SM_PAGE] memory topPlayerPositions,\r\n            uint8[SM_PAGE] memory shareholderPositions,\r\n            uint256[SM_PAGE] memory shareholderStakingWeis,\r\n            uint256[SM_PAGE] memory shareholderProfitWeis,\r\n            uint256[SM_PAGE] memory shareholderFirstBlockNumbers,\r\n            uint256[SM_PAGE] memory shareholderFirstTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerPreviousAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                (\r\n                    pinnedMessageSerials[i],\r\n                    , // uint256 firstMessageBlockNumber,\r\n                    , // uint256 firstMessageTimestamp,\r\n                    topPlayerPositions[i],\r\n                    shareholderPositions[i],\r\n                    shareholderStakingWeis[i],\r\n                    shareholderProfitWeis[i],\r\n                    shareholderFirstBlockNumbers[i],\r\n                    shareholderFirstTimestamps[i]\r\n                )\r\n                = playerPrime(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns next of `account`.\r\n     */\r\n    function playerNextA(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory playerSerials,\r\n            bytes[SM_PAGE] memory names,\r\n            bytes[SM_PAGE] memory adviserNames,\r\n            address[SM_PAGE] memory advisers,\r\n            uint256[SM_PAGE] memory bonusWeis,\r\n            uint256[SM_PAGE] memory surpriseWeis,\r\n\r\n            uint256[SM_PAGE] memory messageSerials,\r\n            uint256[SM_PAGE] memory messageBlockNumbers,\r\n            uint256[SM_PAGE] memory messageTimestamps,\r\n            bytes[SM_PAGE] memory messageTexts\r\n        )\r\n    {\r\n        (serials, accounts) = _playerNextAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                playerSerials[i] = thePlayer.serial;\r\n                names[i] = thePlayer.name;\r\n\r\n                adviserNames[i] = thePlayer.adviserName;\r\n                advisers[i] = thePlayer.adviser;\r\n\r\n                bonusWeis[i] = thePlayer.bonusWeis;\r\n                surpriseWeis[i] = thePlayer.surpriseWeis;\r\n\r\n                (\r\n                    , // uint256 messageCounter,\r\n                    , // uint256 pinnedMessageSerial,\r\n                    messageSerials[i],\r\n                    messageTexts[i],\r\n                    messageBlockNumbers[i]\r\n                )\r\n                = _game.getPlayerDisplay(accounts[i]);\r\n\r\n                messageTimestamps[i] = _game.block2timestamp(messageBlockNumbers[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerNextB(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory messageCounters,\r\n            uint256[SM_PAGE] memory cookieCounters,\r\n            uint256[SM_PAGE] memory followerCounters,\r\n            uint256[SM_PAGE] memory followerMessageCounters,\r\n            uint256[SM_PAGE] memory followerCookieCounters,\r\n\r\n            uint256[SM_PAGE] memory firstMessageBlockNumbers,\r\n            uint256[SM_PAGE] memory firstMessageTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerNextAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                PlayerLib.Player memory thePlayer = _player(accounts[i]);\r\n\r\n                messageCounters[i] = thePlayer.messageCounter;\r\n                cookieCounters[i] = thePlayer.cookieCounter;\r\n\r\n                followerCounters[i] = thePlayer.followerCounter;\r\n                followerMessageCounters[i] = thePlayer.followerMessageCounter;\r\n                followerCookieCounters[i] = thePlayer.followerCookieCounter;\r\n\r\n                (\r\n                    firstMessageBlockNumbers[i],\r\n                    firstMessageTimestamps[i]\r\n                )\r\n                = _playerFirstMessageBT(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n    function playerNextC(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts,\r\n\r\n            uint256[SM_PAGE] memory pinnedMessageSerials,\r\n\r\n            uint8[SM_PAGE] memory topPlayerPositions,\r\n            uint8[SM_PAGE] memory shareholderPositions,\r\n            uint256[SM_PAGE] memory shareholderStakingWeis,\r\n            uint256[SM_PAGE] memory shareholderProfitWeis,\r\n            uint256[SM_PAGE] memory shareholderFirstBlockNumbers,\r\n            uint256[SM_PAGE] memory shareholderFirstTimestamps\r\n        )\r\n    {\r\n        (serials, accounts) = _playerNextAccounts(account);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                (\r\n                    pinnedMessageSerials[i],\r\n                    , // uint256 firstMessageBlockNumber,\r\n                    , // uint256 firstMessageTimestamp,\r\n                    topPlayerPositions[i],\r\n                    shareholderPositions[i],\r\n                    shareholderStakingWeis[i],\r\n                    shareholderProfitWeis[i],\r\n                    shareholderFirstBlockNumbers[i],\r\n                    shareholderFirstTimestamps[i]\r\n                )\r\n                = playerPrime(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- ---------\r\n     *     ____         _                __           ______                     __   _\r\n     *    / __ \\ _____ (_)_   __ ____ _ / /_ ___     / ____/__  __ ____   _____ / /_ (_)____   ____   _____\r\n     *   / /_/ // ___// /| | / // __ `// __// _ \\   / /_   / / / // __ \\ / ___// __// // __ \\ / __ \\ / ___/\r\n     *  / ____// /   / / | |/ // /_/ // /_ /  __/  / __/  / /_/ // / / // /__ / /_ / // /_/ // / / /(__  )\r\n     * /_/    /_/   /_/  |___/ \\__,_/ \\__/ \\___/  /_/     \\__,_//_/ /_/ \\___/ \\__//_/ \\____//_/ /_//____/\r\n     *\r\n     * --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- ---------\r\n     */\r\n\r\n    /**\r\n     * @dev Returns first message `blockNumber` and `timestamp` of `account`.\r\n     */\r\n    function _playerFirstMessageBT(address account)\r\n        private\r\n        view\r\n        returns (\r\n            uint256 blockNumber,\r\n            uint256 timestamp\r\n        )\r\n    {\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        if (thePlayer.messageCounter > 0)\r\n        {\r\n            GameLib.Message memory theMessage = _playerMessage(account, 1);\r\n\r\n            blockNumber = theMessage.blockNumber;\r\n            timestamp = _game.block2timestamp(blockNumber);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns follower accounts, of player `account`, `till` a  serial.\r\n     */\r\n    function _playerFollowerAccounts(address account, uint256 till)\r\n        private\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts\r\n        )\r\n    {\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        if (thePlayer.followerCounter > 0)\r\n        {\r\n            if (till == 0)\r\n            {\r\n                till = thePlayer.followerCounter;\r\n            }\r\n\r\n            if (till <= thePlayer.followerCounter)\r\n            {\r\n                for (uint256 i = 0; i < SM_PAGE; i++)\r\n                {\r\n                    uint256 serial = till.sub(i);\r\n                    if (serial < 1)\r\n                    {\r\n                        break;\r\n                    }\r\n\r\n                    address payable follower = _game.getPlayerFollower(account, serial);\r\n\r\n                    serials[i] = serial;\r\n                    accounts[i] = follower;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns follower accounts, of player `account`.\r\n     */\r\n    function _playerAdviserAccounts(address account)\r\n        private\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts\r\n        )\r\n    {\r\n        if (account != address(0))\r\n        {\r\n            for (uint8 i = 0; i < SM_PAGE; i++)\r\n            {\r\n                address adviser = _player(account).adviser;\r\n\r\n                if (adviser == account || adviser == address(0))\r\n                {\r\n                    break;\r\n                }\r\n\r\n                serials[i] = i + 1;\r\n                accounts[i] = adviser;\r\n                account = adviser;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns previous accounts, of player `account`.\r\n     */\r\n    function _playerPreviousAccounts(address account)\r\n        private\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts\r\n        )\r\n    {\r\n        uint256 previousPlayerSerial;\r\n\r\n        uint8 i = 0;\r\n\r\n        if (account == address(0))\r\n        {\r\n            (\r\n                , // uint256 timer,\r\n                , // uint256 roundCounter,\r\n                previousPlayerSerial,\r\n                , // uint256 messageCounter,\r\n                , // uint256 cookieCounter,\r\n\r\n                , // uint256 cookieFund,\r\n                , // uint256 winnerFund,\r\n\r\n                , // uint256 surpriseIssued,\r\n                , // uint256 bonusIssued,\r\n                , // uint256 cookieIssued,\r\n                // uint256 shareholderIssued\r\n            )\r\n            = _game.getStatus();\r\n\r\n            serials[i] = 1;\r\n            accounts[i] = _game.serial2player(previousPlayerSerial);\r\n\r\n            i++;\r\n        } else {\r\n            previousPlayerSerial = _player(account).serial.sub(1);\r\n        }\r\n\r\n        uint256 playerSerial;\r\n\r\n        for (i; i < SM_PAGE; i++)\r\n        {\r\n            playerSerial = previousPlayerSerial.sub(i);\r\n\r\n            if (playerSerial < 1)\r\n            {\r\n                break;\r\n            }\r\n\r\n            serials[i] = i + 1;\r\n            accounts[i] = _game.serial2player(playerSerial);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns next accounts, of player `account`.\r\n     */\r\n    function _playerNextAccounts(address account)\r\n        private\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n            address[SM_PAGE] memory accounts\r\n        )\r\n    {\r\n        (\r\n            , // uint256 timer,\r\n            , // uint256 roundCounter,\r\n            uint256 playerCounter,\r\n            , // uint256 messageCounter,\r\n            , // uint256 cookieCounter,\r\n\r\n            , // uint256 cookieFund,\r\n            , // uint256 winnerFund,\r\n\r\n            , // uint256 surpriseIssued,\r\n            , // uint256 bonusIssued,\r\n            , // uint256 cookieIssued,\r\n            // uint256 shareholderIssued\r\n        )\r\n        = _game.getStatus();\r\n\r\n        uint256 nextPlayerSerial = _player(account).serial.add(1);\r\n        uint256 playerSerial;\r\n\r\n        for (uint8 i = 0; i < SM_PAGE; i++)\r\n        {\r\n            playerSerial = nextPlayerSerial.add(i);\r\n\r\n            if (playerSerial > playerCounter)\r\n            {\r\n                break;\r\n            }\r\n\r\n            serials[i] = i + 1;\r\n            accounts[i] = _game.serial2player(playerSerial);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns player {PlayerLib.Player} of `account`.\r\n     */\r\n    function _player(address account)\r\n        private\r\n        view\r\n        returns (PlayerLib.Player memory)\r\n    {\r\n        (\r\n            uint256 serial,\r\n            bytes memory name,\r\n            bytes memory adviserName,\r\n            address payable adviser,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n            uint256 followerCounter,\r\n            uint256 followerMessageCounter,\r\n            uint256 followerCookieCounter,\r\n            uint256 bonusWeis,\r\n            uint256 surpriseWeis\r\n        )\r\n        = _game.getPlayer(account);\r\n\r\n        return PlayerLib.Player(\r\n            serial,\r\n            name,\r\n            adviserName,\r\n            adviser,\r\n            messageCounter,\r\n            cookieCounter,\r\n            followerCounter,\r\n            followerMessageCounter,\r\n            followerCookieCounter,\r\n            bonusWeis,\r\n            surpriseWeis\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns message of `account` {GameLib.Message} @ `serial`.\r\n     */\r\n    function _playerMessage(address account, uint256 serial)\r\n        private\r\n        view\r\n        returns (GameLib.Message memory)\r\n    {\r\n        (\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        )\r\n        = _game.getPlayerMessage(account, serial);\r\n\r\n        PlayerLib.Player memory thePlayer = _player(account);\r\n\r\n        return GameLib.Message(messageSerial, account, thePlayer.name, text, blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns cookie of `account` {GameLib.Cookie} @ `serial`.\r\n     */\r\n    function _playerCookie(address account, uint256 serial)\r\n        private\r\n        view\r\n        returns (GameLib.Cookie memory)\r\n    {\r\n        (\r\n            uint256 cookieSerial,\r\n\r\n            address payable playerAccount,\r\n            address payable adviserAccount,\r\n            bytes memory playerName,\r\n            bytes memory adviserName,\r\n            uint256 playerWeis,\r\n            uint256 adviserWeis,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        )\r\n        = _game.getPlayerCookie(account, serial);\r\n\r\n        return GameLib.Cookie(cookieSerial, playerAccount, adviserAccount, playerName, adviserName, playerWeis, adviserWeis, messageSerial, text, blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns follower-cookie of `account` {GameLib.Cookie} @ `serial`.\r\n     */\r\n    function _playerFollowerCookie(address account, uint256 serial)\r\n        private\r\n        view\r\n        returns (GameLib.Cookie memory)\r\n    {\r\n        (\r\n            uint256 cookieSerial,\r\n\r\n            address payable playerAccount,\r\n            address payable adviserAccount,\r\n            bytes memory playerName,\r\n            bytes memory adviserName,\r\n            uint256 playerWeis,\r\n            uint256 adviserWeis,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        )\r\n        = _game.getPlayerFollowerCookie(account, serial);\r\n\r\n        return GameLib.Cookie(cookieSerial, playerAccount, adviserAccount, playerName, adviserName, playerWeis, adviserWeis, messageSerial, text, blockNumber);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"player\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"adviserName\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"adviser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messageCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookieCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerMessageCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerCookieCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusWeis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surpriseWeis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstMessageTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerAdvisersA\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"playerSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"names\",\"type\":\"bytes[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"adviserNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"address[10]\",\"name\":\"advisers\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"bonusWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"surpriseWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageTimestamps\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"messageTexts\",\"type\":\"bytes[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerAdvisersB\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"cookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerMessageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerAdvisersC\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"pinnedMessageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"topPlayerPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"shareholderPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderStakingWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderProfitWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerSerial\",\"type\":\"uint256\"}],\"name\":\"playerAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"adviserName\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"adviser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messageCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookieCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerMessageCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followerCookieCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusWeis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surpriseWeis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstMessageTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"playerCookies\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"advisers\",\"type\":\"address[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"adviserNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"playerWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"adviserWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"texts\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"blockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"timestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"playerFollowerCookies\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"players\",\"type\":\"address[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"playerNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"playerWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"adviserWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"texts\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"blockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"timestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"playerFollowersA\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"playerSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"names\",\"type\":\"bytes[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"adviserNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"address[10]\",\"name\":\"advisers\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"bonusWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"surpriseWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageTimestamps\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"messageTexts\",\"type\":\"bytes[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"playerFollowersB\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"cookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerMessageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"playerFollowersC\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"pinnedMessageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"topPlayerPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"shareholderPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderStakingWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderProfitWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"playerMessages\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"texts\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"blockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"timestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerNextA\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"playerSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"names\",\"type\":\"bytes[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"adviserNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"address[10]\",\"name\":\"advisers\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"bonusWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"surpriseWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageTimestamps\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"messageTexts\",\"type\":\"bytes[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerNextB\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"cookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerMessageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerNextC\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"pinnedMessageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"topPlayerPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"shareholderPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderStakingWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderProfitWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerPreviousA\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"playerSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"names\",\"type\":\"bytes[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"adviserNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"address[10]\",\"name\":\"advisers\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"bonusWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"surpriseWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageTimestamps\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"messageTexts\",\"type\":\"bytes[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerPreviousB\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"cookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerMessageCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"followerCookieCounters\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"firstMessageTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerPreviousC\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"pinnedMessageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"topPlayerPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint8[10]\",\"name\":\"shareholderPositions\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderStakingWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderProfitWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstBlockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"shareholderFirstTimestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"playerPrime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pinnedMessageSerial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstMessageBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstMessageTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"topPlayerPosition\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shareholderPosition\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"shareholderStakingWeis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareholderProfitWeis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareholderFirstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareholderFirstTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReaderB","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://30e71983511da55c266ea977b8e481cfe90dff3fef3343ea572ddb688d8d45ba"}]}