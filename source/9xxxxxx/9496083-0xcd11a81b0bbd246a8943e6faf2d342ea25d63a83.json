{"status":"1","message":"OK","result":[{"SourceCode":"# Burnin (based on the ERC-721 specification)\r\n# https://burni.co\r\n\r\nfrom vyper.interfaces import ERC721\r\n\r\nimplements: ERC721\r\n\r\n# Used to verify a transfer into a NFT-ready smart contract.\r\ncontract BurninReceiver:\r\n\tdef onERC721Received(_operator: address, _from: address, _tokenId: uint256, _data: bytes[1024]) -> bytes32: modifying\r\n\r\n# Used to verify a transfer into the Burni smart contract.\r\ncontract Burni:\r\n\tdef transfer(_to: address, _value: uint256) -> bool: modifying\r\n\tdef burn(_value: uint256): modifying\r\n\r\n# Events\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _tokenId: indexed(uint256)})\r\nApproval: event({_owner: indexed(address), _approved: indexed(address), _tokenId: indexed(uint256)})\r\nApprovalForAll: event({_owner: indexed(address), _operator: indexed(address), _approved: bool})\r\nImmutable_Multihash: event({_from: indexed(address), _hash: string[256], _tokenId: indexed(uint256)})\r\n\r\nname: public(string[6])     # Burnin\r\nsymbol: public(string[6])   # BURNIN\r\ndecimals: public(uint256)   # 0\r\nidToOwner: map(uint256, address)                       # Id -> Owner address\r\nidToApprovals: map(uint256, address)                   # Id -> Spender address\r\nidToImmutableMultihash: map(uint256, string[256])      # Id -> Permanent multihash\r\nidToValuation: map(uint256, uint256)                   # Id -> Burni used to mint token\r\nidToOwnerIdx: map(uint256, uint256)                    # Id -> Index of token (relative to owner)\r\nimmutableHashToId: map(string[256], uint256)           # Permanent multihash -> Id\r\nownerIdxToTokenId: map(address, map(uint256, uint256)) # Index of token (relative to owner) -> Id\r\nownerToNFTokenCount: map(address, uint256)             # Total supply of tokens for an address\r\nownerToOperators: map(address, map(address, bool))     # Owner address -> Operator address -> isOperator\r\nsupportedInterfaces: map(bytes32, bool)                # Interface -> isSupported\r\n\r\n# Supported Interface Ids\r\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\r\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\r\nERC721_METADATA_INTERFACE_ID: constant(bytes32) = 0x000000000000000000000000000000000000000000000000000000005b5e139f\r\nERC721_ENUMERABLE_INTERFACE_ID: constant(bytes32) = 0x00000000000000000000000000000000000000000000000000000000780e9d63\r\n\r\nburni_address: address\r\npayment_address: address\r\ntotal_supply: uint256\r\nbase_uri: string[64]\r\n\r\n@public\r\ndef __init__():\r\n\t# Define the token\r\n\tself.name = 'Burnin'\r\n\tself.symbol = 'BURNIN'\r\n\tself.decimals = 0\r\n\tself.total_supply = 0\r\n\tself.base_uri = 'https://burni.co/nft/'\r\n\r\n\tself.supportedInterfaces[ERC165_INTERFACE_ID] = True\r\n\tself.supportedInterfaces[ERC721_INTERFACE_ID] = True\r\n\tself.supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = True\r\n\tself.supportedInterfaces[ERC721_ENUMERABLE_INTERFACE_ID] = True\r\n\r\n\t# Associate the token with the Burni smart contract and operator address.\r\n\tself.payment_address = 0x7bde389181EC80591ED40E011b0Ff576a2Beb74b\r\n\tself.burni_address = 0x076a7c93343579355626F1426dE63F8827C9b9B2\r\n\r\n@public\r\n@constant\r\ndef baseTokenURI() -> string[64]:\r\n\t# Returns the base URI address for Burnin tokens.\r\n\treturn self.base_uri\r\n\r\n@public\r\n@constant\r\ndef tokenURI(_tokenId: uint256) -> string[320]:\r\n\t# Returns the URI address for the specified token (throws if owner is zero).\r\n\tassert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n\r\n\tmultihash: string[256] = self.idToImmutableMultihash[_tokenId]\r\n\tif multihash == '': return self.base_uri\r\n\r\n\treturn concat(self.base_uri, multihash)\r\n\r\n@public\r\n@constant\r\ndef exists(_tokenId: uint256) -> bool:\r\n\t# Checks if a token exists.\r\n\towner: address = self.idToOwner[_tokenId]\r\n\treturn owner != ZERO_ADDRESS\r\n\r\n@public\r\n@constant\r\ndef totalSupply() -> uint256:\r\n\t# The total supply of Burnin will gradually increase as tokens are created from Burni.\r\n\treturn self.total_supply\r\n\r\n@public\r\n@constant\r\ndef supportsInterface(_interfaceID: bytes32) -> bool:\r\n\t# Returns the supported ERC-165 interface ids.\r\n\treturn self.supportedInterfaces[_interfaceID]\r\n\r\n@public\r\n@constant\r\ndef balanceOf(_owner: address) -> uint256:\r\n\t# Returns the total Burnins owned by an address (throws if owner is zero).\r\n\tassert _owner != ZERO_ADDRESS\r\n\treturn self.ownerToNFTokenCount[_owner]\r\n\r\n@public\r\n@constant\r\ndef ownerOf(_tokenId: uint256) -> address:\r\n\t# Returns the owner of a Burnin token by id (throws if owner is zero).\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\treturn owner\r\n\r\n@public\r\n@constant\r\ndef tokenByIndex(_index: uint256) -> uint256:\r\n\t# Tokens are numbered with 1-based indexing (throws if 0-based index is >= supply).\r\n\tassert _index < self.total_supply\r\n\treturn _index + 1\r\n\r\n@public\r\n@constant\r\ndef tokenOfOwnerByIndex(_owner: address, _index: uint256) -> uint256:\r\n\t# Returns the token id by an owner's token index (throws if owner is zero or index >= supply).\r\n\tassert _owner != ZERO_ADDRESS\r\n\tassert _index < self.ownerToNFTokenCount[_owner]\r\n\treturn self.ownerIdxToTokenId[_owner][_index]\r\n\r\n@public\r\n@constant\r\ndef getApproved(_tokenId: uint256) -> address:\r\n\t# Returns approved spender for a Burnin token (throws if owner is zero).\r\n\tassert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n\treturn self.idToApprovals[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef getValuation(_tokenId: uint256) -> uint256:\r\n\t# Returns the Burni used to create the Burnin @ 97.5% of the total Burni tx cost (throws if invalid token).\r\n\tassert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n\treturn self.idToValuation[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef getImmutableMultihashOf(_tokenId: uint256) -> string[256]:\r\n\t# Returns the permanent multihash for an id (throws if owner is zero).\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\treturn self.idToImmutableMultihash[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\r\n\t# Checks if an operator is approved for the specified owner.\r\n\treturn (self.ownerToOperators[_owner])[_operator]\r\n\r\n@private\r\n@constant\r\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\r\n\t# Checks if the given spender can transfer a specified token.\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tspenderIsOwner: bool = owner == _spender\r\n\tspenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\r\n\tspenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\r\n\treturn (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\r\n\r\n@private\r\ndef _addTokenTo(_to: address, _tokenId: uint256):\r\n\t# Adds a token to a new owner (throws if owner is zero).\r\n\tassert self.idToOwner[_tokenId] == ZERO_ADDRESS\r\n\tself.idToOwner[_tokenId] = _to\r\n\tself.idToOwnerIdx[_tokenId] = self.ownerToNFTokenCount[_to]\r\n\tself.ownerIdxToTokenId[_to][self.ownerToNFTokenCount[_to]] = _tokenId\r\n\tself.ownerToNFTokenCount[_to] += 1\r\n\r\n@private\r\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\r\n\t# Removes a token from a previous owner (throws if the token belongs to another owner).\r\n\tassert self.idToOwner[_tokenId] == _from\r\n\tself.idToOwner[_tokenId] = ZERO_ADDRESS\r\n\r\n\t# Checks the owner's token index and reindexes if necessary.\r\n\ttokenIdx: uint256 = self.idToOwnerIdx[_tokenId]\r\n\tlastTokenIdx: uint256 = self.ownerToNFTokenCount[_from] - 1\r\n\r\n\tif self.ownerToNFTokenCount[_from] > 1 and tokenIdx < lastTokenIdx:\r\n\t\t# When an inner token is removed, fill the gap using the last token.\r\n\t\tlastTokenId: uint256 = self.ownerIdxToTokenId[_from][lastTokenIdx]\r\n\t\tself.ownerIdxToTokenId[_from][tokenIdx] = lastTokenId\r\n\t\tself.ownerIdxToTokenId[_from][lastTokenIdx] = 0\r\n\r\n\tself.ownerToNFTokenCount[_from] -= 1\r\n\r\n@private\r\ndef _clearApproval(_owner: address, _tokenId: uint256):\r\n\t# Clear an approval for a specified address (throws if the token belongs to another owner).\r\n\tassert self.idToOwner[_tokenId] == _owner\r\n\tif self.idToApprovals[_tokenId] != ZERO_ADDRESS:\r\n\t\tself.idToApprovals[_tokenId] = ZERO_ADDRESS\r\n\r\n@private\r\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\r\n\t# Transfer to a new owner (throws if unauthorized or invalid recipient).\r\n\tassert self._isApprovedOrOwner(_sender, _tokenId)\r\n\tassert _to != ZERO_ADDRESS\r\n\tself._clearApproval(_from, _tokenId)\r\n\tself._removeTokenFrom(_from, _tokenId)\r\n\tself._addTokenTo(_to, _tokenId)\r\n\tlog.Transfer(_from, _to, _tokenId)\r\n\r\n@public\r\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\r\n\t# Transfer a Burnin token.\r\n\tself._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\r\n@public\r\ndef safeTransferFrom(_from: address, _to: address, _tokenId: uint256, _data: bytes[1024]=\"\"):\r\n\t# Transfer to a new owner or smart contract (throws if unauthorized or invalid recipient).\r\n\tself._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\tif _to.is_contract:\r\n\t\treturnValue: bytes32 = BurninReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\r\n\t\tassert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", bytes32)\r\n\r\n@public\r\ndef approve(_approved: address, _tokenId: uint256):\r\n\t# Approve an address for a token (throws if the owner is zero or unauthorized).\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\tassert _approved != owner\r\n\tsenderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\r\n\tsenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\r\n\tassert (senderIsOwner or senderIsApprovedForAll)\r\n\tself.idToApprovals[_tokenId] = _approved\r\n\tlog.Approval(owner, _approved, _tokenId)\r\n\r\n@public\r\ndef clearApproval(_from: address, _tokenId: uint256):\r\n\t# Removes an approval address (throws if the token is invalid or belongs to another owner).\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\tassert owner == msg.sender\r\n\tself._clearApproval(_from, _tokenId)\r\n\r\n@public\r\ndef setApprovalForAll(_operator: address, _approved: bool):\r\n\t# Approves an operator for an owner's assets (throws if self-approving).\r\n\tassert _operator != msg.sender\r\n\tself.ownerToOperators[msg.sender][_operator] = _approved\r\n\tlog.ApprovalForAll(msg.sender, _operator, _approved)\r\n\r\n@public\r\ndef setImmutableMultihash(_hash: string[256], _tokenId: uint256):\r\n\t# Sets a permanent multihash (throws if invalid/predefined hash or the token belongs to another owner).\r\n\tassert self.idToOwner[_tokenId] == msg.sender\r\n\tassert _hash != ''\r\n\tassert self.idToImmutableMultihash[_tokenId] == ''\r\n\tassert self.immutableHashToId[_hash] == 0\r\n\tself.idToImmutableMultihash[_tokenId] = _hash\r\n\tlog.Immutable_Multihash(msg.sender, _hash, _tokenId)\r\n\r\n@public\r\ndef updatePaymentAddress(_payment_address: address):\r\n\t# Admin function to change the 2.5% tx fee if necessary (eg. wallet change).\r\n\tassert msg.sender == self.payment_address\r\n\tself.payment_address = _payment_address\r\n\r\n@public\r\ndef updateBaseTokenURI(_baseURI: string[64]):\r\n\t# Admin function to change baseTokenURI if necessary (eg. domain change).\r\n\tassert msg.sender == self.payment_address\r\n\tself.base_uri = _baseURI\r\n\r\n@public\r\ndef onERC20Received(_from: address, _value: uint256) -> bytes32:\r\n\t# Mint if 40+ Burni are received (throws if unauthorized or insufficient funds).\r\n\tassert msg.sender == self.burni_address\r\n\tassert _value >= 40\r\n\r\n\t# 2.5% of the total Burni are spared.\r\n\tfee: uint256 = _value / 40\r\n\tvaluation: uint256 = _value - fee\r\n\tdidPayFee: bool = Burni(self.burni_address).transfer(self.payment_address, fee)\r\n\tBurni(self.burni_address).burn(valuation)\r\n\tassert didPayFee\r\n\r\n\t# Create token\r\n\tself.total_supply += 1\r\n\tself.idToValuation[self.total_supply] = valuation\r\n\tself._addTokenTo(_from, self.total_supply)\r\n\r\n\t# Handshake with Burni smart contract.\r\n\treturn method_id(\"onERC20Received(address,uint256)\", bytes32)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_to\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_approved\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApprovalForAll\",\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"_operator\",\"indexed\":true},{\"type\":\"bool\",\"name\":\"_approved\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Immutable_Multihash\",\"inputs\":[{\"type\":\"address\",\"name\":\"_from\",\"indexed\":true},{\"type\":\"string\",\"name\":\"_hash\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"_tokenId\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"baseTokenURI\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":7553},{\"name\":\"tokenURI\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":27829},{\"name\":\"exists\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1350},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1241},{\"name\":\"supportsInterface\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_interfaceID\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1386},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1552},{\"name\":\"ownerOf\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1558},{\"name\":\"tokenByIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_index\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1634},{\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"uint256\",\"name\":\"_index\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2769},{\"name\":\"getApproved\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2545},{\"name\":\"getValuation\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2575},{\"name\":\"getImmutableMultihashOf\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":14885},{\"name\":\"isApprovedForAll\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_operator\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1819},{\"name\":\"transferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":583804},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"safeTransferFrom\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"},{\"type\":\"bytes\",\"name\":\"_data\"}],\"constant\":false,\"payable\":false,\"type\":\"function\"},{\"name\":\"approve\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_approved\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":41165},{\"name\":\"clearApproval\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":25126},{\"name\":\"setApprovalForAll\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_operator\"},{\"type\":\"bool\",\"name\":\"_approved\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":38480},{\"name\":\"setImmutableMultihash\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_hash\"},{\"type\":\"uint256\",\"name\":\"_tokenId\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":340366},{\"name\":\"updatePaymentAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_payment_address\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":36967},{\"name\":\"updateBaseTokenURI\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_baseURI\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":107797},{\"name\":\"onERC20Received\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":229901},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":7386},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":7416},{\"name\":\"decimals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2021}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.1.0b16","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":""}]}