{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.20;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\n/**\r\n * owned 是一个管理者\r\n */\r\ncontract owned {\r\n    address public owner;\r\n\r\n    /**\r\n     * 初台化构造函数\r\n     */\r\n    function owned () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * 判断当前合约调用者是否是管理员\r\n     */\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * 指派一个新的管理员\r\n     * @param  newOwner address 新的管理员帐户地址\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n}\r\n\r\n/**\r\n * @title 基础版的代币合约\r\n */\r\ncontract token {\r\n    /* 公共变量 */\r\n    string public standard = 'https://mshk.top';\r\n    string public name; //代币名称\r\n    string public symbol; //代币符号比如'$'\r\n    uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0,和以太币一样后面是是18个0\r\n    uint256 public totalSupply; //代币总量\r\n\r\n    /*记录所有余额的映射*/\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* 在区块链上创建一个事件，用以通知客户端*/\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件\r\n    event Burn(address indexed from, uint256 value);  //减去用户余额事件\r\n\r\n    /* 初始化合约，并且把初始的所有代币都给这合约的创建者\r\n     * @param initialSupply 代币的总数\r\n     * @param tokenName 代币名称\r\n     * @param tokenSymbol 代币符号\r\n     */\r\n    function token(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\r\n        //初始化总量\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);    //以太币是10^18，后面18个0，所以默认decimals是18\r\n\r\n        //给指定帐户初始化代币总量，初始化用于奖励合约创建者\r\n        //balanceOf[msg.sender] = totalSupply;\r\n        balanceOf[this] = totalSupply;\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 私有方法从一个帐户发送给另一个帐户代币\r\n     * @param  _from address 发送代币的地址\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n      //避免转帐的地址是0x0\r\n      require(_to != 0x0);\r\n\r\n      //检查发送者是否拥有足够余额\r\n      require(balanceOf[_from] >= _value);\r\n\r\n      //检查是否溢出\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n      //保存数据用于后面的判断\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n      //从发送者减掉发送额\r\n      balanceOf[_from] -= _value;\r\n\r\n      //给接收者加上相同的量\r\n      balanceOf[_to] += _value;\r\n\r\n      //通知任何监听该交易的客户端\r\n      Transfer(_from, _to, _value);\r\n\r\n      //判断买、卖双方的数据是否和转换前一致\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n\r\n    /**\r\n     * 从主帐户合约调用者发送给别人代币\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * 从某个指定的帐户中，向另一个帐户发送代币\r\n     *\r\n     * 调用过程，会检查设置的允许最大交易额\r\n     *\r\n     * @param  _from address 发送者地址\r\n     * @param  _to address 接受者地址\r\n     * @param  _value uint256 要转移的代币数量\r\n     * @return success        是否交易成功\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        //检查发送者是否拥有足够余额\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置帐户允许支付的最大金额\r\n     *\r\n     * 一般在智能合约的时候，避免支付过多，造成风险\r\n     *\r\n     * @param _spender 帐户地址\r\n     * @param _value 金额\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 设置帐户允许支付的最大金额\r\n     *\r\n     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\r\n     *\r\n     * @param _spender 帐户地址\r\n     * @param _value 金额\r\n     * @param _extraData 操作的时间\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 减少代币调用者的余额\r\n     *\r\n     * 操作以后是不可逆的\r\n     *\r\n     * @param _value 要删除的数量\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        //检查帐户余额是否大于要减去的值\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        //给指定帐户减去余额\r\n        balanceOf[msg.sender] -= _value;\r\n\r\n        //代币问题做相应扣除\r\n        totalSupply -= _value;\r\n\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 删除帐户的余额（含其他帐户）\r\n     *\r\n     * 删除以后是不可逆的\r\n     *\r\n     * @param _from 要操作的帐户地址\r\n     * @param _value 要减去的数量\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        //检查帐户余额是否大于要减去的值\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        //检查 其他帐户 的余额是否够使用\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\r\n        //减掉代币\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        //更新总量\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 匿名方法，预防有人向这合约发送以太币\r\n     */\r\n    /*function() {\r\n        //return;     // Prevents accidental sending of ether\r\n    }*/\r\n}\r\n\r\n/**\r\n * @title 高级版代币\r\n * 增加冻结用户、挖矿、根据指定汇率购买(售出)代币价格的功能\r\n */\r\ncontract MyAdvancedToken is owned, token {\r\n\r\n    //卖出的汇率,一个代币，可以卖出多少个以太币，单位是wei\r\n    uint256 public sellPrice;\r\n\r\n    //买入的汇率,1个以太币，可以买几个代币\r\n    uint256 public buyPrice;\r\n\r\n    //是否冻结帐户的列表\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    //定义一个事件，当有资产被冻结的时候，通知正在监听事件的客户端\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n\r\n    /*初始化合约，并且把初始的所有的令牌都给这合约的创建者\r\n     * @param initialSupply 所有币的总数\r\n     * @param tokenName 代币名称\r\n     * @param tokenSymbol 代币符号\r\n     * @param centralMinter 是否指定其他帐户为合约所有者,为0是去中心化\r\n     */\r\n    function MyAdvancedToken (\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      string tokenSymbol,\r\n      address centralMinter\r\n    ) token (initialSupply, tokenName, tokenSymbol) public {\r\n\r\n        //设置合约的管理者\r\n        if(centralMinter != 0 ) owner = centralMinter;\r\n\r\n        sellPrice = 2;     //设置1个单位的代币(单位是wei)，能够卖出2个以太币\r\n        buyPrice = 4;      //设置1个以太币，可以买0.25个代币\r\n    }\r\n\r\n\r\n    /**\r\n     * 私有方法，从指定帐户转出余额\r\n     * @param  _from address 发送代币的地址\r\n     * @param  _to address 接受代币的地址\r\n     * @param  _value uint256 接受代币的数量\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        //避免转帐的地址是0x0\r\n        require (_to != 0x0);\r\n\r\n        //检查发送者是否拥有足够余额\r\n        require (balanceOf[_from] > _value);\r\n\r\n        //检查是否溢出\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        //检查 冻结帐户\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n\r\n\r\n\r\n        //从发送者减掉发送额\r\n        balanceOf[_from] -= _value;\r\n\r\n        //给接收者加上相同的量\r\n        balanceOf[_to] += _value;\r\n\r\n        //通知任何监听该交易的客户端\r\n        Transfer(_from, _to, _value);\r\n\r\n    }\r\n\r\n    /**\r\n     * 合约拥有者，可以为指定帐户创造一些代币\r\n     * @param  target address 帐户地址\r\n     * @param  mintedAmount uint256 增加的金额(单位是wei)\r\n     */\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n\r\n        //给指定地址增加代币，同时总量也相加\r\n        balanceOf[target] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n\r\n\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /**\r\n     * 增加冻结帐户名称\r\n     *\r\n     * 你可能需要监管功能以便你能控制谁可以/谁不可以使用你创建的代币合约\r\n     *\r\n     * @param  target address 帐户地址\r\n     * @param  freeze bool    是否冻结\r\n     */\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /**\r\n     * 设置买卖价格\r\n     *\r\n     * 如果你想让ether(或其他代币)为你的代币进行背书,以便可以市场价自动化买卖代币,我们可以这么做。如果要使用浮动的价格，也可以在这里设置\r\n     *\r\n     * @param newSellPrice 新的卖出价格\r\n     * @param newBuyPrice 新的买入价格\r\n     */\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    /**\r\n     * 使用以太币购买代币\r\n     */\r\n    function buy() payable public {\r\n      uint amount = msg.value / buyPrice;\r\n\r\n      _transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev 卖出代币\r\n     * @return 要卖出的数量(单位是wei)\r\n     */\r\n    function sell(uint256 amount) public {\r\n\r\n        //检查合约的余额是否充足\r\n        require(this.balance >= amount * sellPrice);\r\n\r\n        _transfer(msg.sender, this, amount);\r\n\r\n        msg.sender.transfer(amount * sellPrice);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"centralMinter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000218711a00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000003bb91a2e21c8b01ae36d0ffaa6aac8a15cb3e0f7000000000000000000000000000000000000000000000000000000000000000858584e544f4b454e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000358584e0000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://583ad2decd27f5bdee4fe4a7139818702c9fb5c955f5991448cb9919eed21064"}]}