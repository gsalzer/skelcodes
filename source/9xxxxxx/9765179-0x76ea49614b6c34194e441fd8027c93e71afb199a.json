{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\ncontract Ownable {\r\n\r\n// A list of owners which will be saved as a list here, \r\n// and the values are the owner’s names. \r\n\r\n  address newOwner; // temp for confirm;\r\n  mapping (address=>bool) owners;\r\n  address owner;\r\n\r\n// all events will be saved as log files\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event AddOwner(address newOwner,string name);\r\n  event RemoveOwner(address owner);\r\n  /**\r\n   * @dev Ownable constructor , initializes sender’s account and \r\n   * set as owner according to default value according to contract\r\n   *\r\n   */\r\n\r\n   // this function will be executed during initial load and will keep the smart contract creator (msg.sender) as Owner\r\n   // and also saved in Owners. This smart contract creator/owner is \r\n   // Mr. Samret Wajanasathian CTO of Shuttle One Pte Ltd (https://www.shuttle.one)\r\n\r\n   constructor() public {\r\n    owner = msg.sender;\r\n    owners[msg.sender] = true;\r\n  }\r\n\r\n// function to check if the executor is the owner? This to ensure that only the person \r\n// who has right to execute/call the function has the permission to do so.\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n// This function has only one Owner. The ownership can be transferrable and only\r\n//  the current Owner will only be  able to execute this function.\r\n//  Onwer can be Contract address\r\n  function transferOwnership(address  _newOwner) public onlyOwner{\r\n    emit OwnershipTransferred(owner,_newOwner);\r\n    newOwner = _newOwner;\r\n\r\n  }\r\n  \r\n  // Function to confirm New Owner can execute\r\n  function newOwnerConfirm() public returns(bool){\r\n        if(newOwner == msg.sender)\r\n        {\r\n            owner = newOwner;\r\n            return true;\r\n        }\r\n        return false;\r\n  }\r\n\r\n// Function to check if the person is listed in a group of Owners and determine\r\n// if the person has the any permissions in this smart contract such as Exec permission.\r\n  \r\n  modifier onlyOwners(){\r\n    require(owners[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n// Function to add Owner into a list. The person who wanted to add a new owner into this list but be an existing\r\n// member of the Owners list. The log will be saved and can be traced / monitor who’s called this function.\r\n  \r\n  function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{\r\n    require(owners[_newOwner] == false);\r\n    require(newOwner != msg.sender);\r\n    owners[_newOwner] = true;\r\n    emit AddOwner(_newOwner,newOwnerName);\r\n  }\r\n\r\n// Function to remove the Owner from the Owners list. The person who wanted to remove any owner from Owners\r\n// List must be an existing member of the Owners List. The owner cannot evict himself from the Owners\r\n// List by his own, this is to ensure that there is at least one Owner of this ShuttleOne Smart Contract.\r\n// This ShuttleOne Smart Contract will become useless if there is no owner at all.\r\n\r\n  function removeOwner(address _owner) public onlyOwners{\r\n    require(_owner != msg.sender);  // can't remove your self\r\n    owners[_owner] = false;\r\n    emit RemoveOwner(_owner);\r\n  }\r\n// this function is to check of the given address is allowed to call/execute the particular function\r\n// return true if the given address has right to execute the function.\r\n// for transparency purpose, anyone can use this to trace/monitor the behaviors of this ShuttleOne smart contract.\r\n\r\n  function isOwner(address _owner) public view returns(bool){\r\n    return owners[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n\t   event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n       event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n   \t   function totalSupply() public view returns (uint256);\r\n       function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n       function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n       function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n       function approve(address spender, uint256 tokens) public returns (bool success);\r\n       function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract WDAI is Ownable {\r\n    string public name     = \"Wrapped DAI\";\r\n    string public symbol   = \"WDAI\";\r\n    uint8  public decimals = 18;\r\n    string public company  = \"ShuttleOne Pte Ltd\";\r\n\r\n    event  Approval(address indexed _tokenOwner, address indexed _spender, uint256 _amount);\r\n    event  Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    \r\n    event  Deposit(address indexed _from, uint256 _amount);\r\n    event  Withdraw(address indexed _to, uint256 _amount);\r\n\r\n    mapping (address => uint256) public  balance;\r\n    mapping (address => mapping (address => uint256))  public  allowed;\r\n\r\n    mapping (address => bool)  public allowTransfer;\r\n\r\n    ERC20  daiToken;\r\n    \r\n     constructor() public {\r\n         daiToken = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); //Dai Stablecoin (DAI)\r\n         \r\n     }\r\n     \r\n    function deposit(address _from,uint256 amount) public returns (bool) {\r\n        \r\n        if(daiToken.transferFrom(_from,address(this),amount) == true){\r\n            balance[_from] += amount;\r\n            emit Deposit(_from,amount);\r\n            emit Transfer(address(0),_from,amount);\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint256 _amount) public {\r\n        require(balance[msg.sender] >= _amount,\"WDAI/ERROR-out-of-balance-withdraw\");\r\n        balance[msg.sender] -= _amount;\r\n        daiToken.transfer(msg.sender,_amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n        emit Transfer(msg.sender,address(0),_amount);\r\n    }\r\n\r\n    function balanceOf(address _addr) public view returns (uint256){\r\n        return balance[_addr]; \r\n     }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return daiToken.balanceOf(address(this));\r\n    }\r\n\r\n     function approve(address _spender, uint256 _amount) public returns (bool){\r\n            allowed[msg.sender][_spender] = _amount;\r\n            emit Approval(msg.sender, _spender, _amount);\r\n            return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256){\r\n          return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        require(balance[msg.sender] >= _amount,\"WDAI/ERROR-out-of-balance-transfer\");\r\n        require(_to != address(0),\"WDAI/ERROR-transfer-addr-0\");\r\n        require(allowTransfer[msg.sender],\"WDAI/ERROR-transfer-not-allow\");\r\n\r\n        balance[msg.sender] -= _amount;\r\n        balance[_to] += _amount;\r\n        emit Transfer(msg.sender,_to,_amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool)\r\n    {\r\n        require(balance[_from] >= _amount,\"WDAI/ERROR-transFrom-out-of\");\r\n        require(allowed[_from][msg.sender] >= _amount,\"WDAI/ERROR-spender-outouf\"); \r\n        require(allowTransfer[msg.sender],\"WDAI/ERROR-transfrom-not-allow\");\r\n\r\n        balance[_from] -= _amount;\r\n        balance[_to] += _amount;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function intTransfer(address _from, address _to, uint256 _amount) external onlyOwners returns(bool){\r\n           require(balance[_from] >= _amount,\"WDAI/ERROR-intran-outof\");\r\n           require(_to != address(0),\"WDAI/ERROR-intran-addr0\");\r\n           \r\n           balance[_from] -= _amount; \r\n           balance[_to] += _amount;\r\n    \r\n           emit Transfer(_from,_to,_amount);\r\n           return true;\r\n    }\r\n     \r\n    function intWithdraw(address _to,uint256 _amount) public onlyOwners returns(bool){\r\n        require(balance[_to] >= _amount,\"WDAI/ERROR-withdraw-outof\");\r\n        balance[_to] -= _amount;\r\n        daiToken.transfer(_to,_amount);\r\n        emit Withdraw(_to, _amount);\r\n        emit Transfer(_to,address(0),_amount);\r\n    } \r\n    \r\n    function setAllowTransfer(address _addr,bool _allow) public onlyOwners returns(bool){\r\n        allowTransfer[_addr] = _allow;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"newOwnerName\",\"type\":\"string\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"intWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"intTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newOwnerConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"}]","ContractName":"WDAI","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://97ef78be1ca59f91a9d3205c06476a254ebc08302eb1c6da6f59be0dc7838380"}]}