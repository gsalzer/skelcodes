{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.7.0;\r\n\r\ncontract Besunray {\r\n  address payable public owner;\r\n  struct User { //Used to store user details\r\n    uint uid;\r\n    address payable wallet;\r\n    uint package;\r\n    uint256 etherValue;\r\n    address payable refferer;\r\n    uint level;\r\n    bool status;\r\n    uint commissions;\r\n  }\r\n  struct Plan { //Used to store commission configuration\r\n    uint level;\r\n    uint package;\r\n    uint percentage;\r\n  }\r\n  struct Qualification{\r\n    uint status;\r\n    uint level_1;\r\n    uint level_2;\r\n    uint level_3;\r\n    uint level_4;\r\n    uint level_5;\r\n    uint level_6;\r\n    uint level_7;\r\n    uint level_8;\r\n    uint level_9;\r\n    uint level_10;\r\n  }\r\n  mapping(address => User) public users;\r\n  mapping(address => Qualification) public qualifications;\r\n  mapping(uint => Plan) public plans;\r\n\r\n  event DistributeCommission(\r\n    address to,\r\n    address from,\r\n    uint amount\r\n  );\r\n  event UserRegistration(\r\n    uint uid,\r\n    address wallet,\r\n    address refferer,\r\n    uint package,\r\n    uint256 etherValue,\r\n    uint256 commissions\r\n  );\r\n  event EmQualification(\r\n    address wallet,\r\n    uint level\r\n  );\r\n  /**\r\n  * @dev Constructor sets admin.\r\n  *\r\n  * This is public constructor.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * -\r\n  */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    plans[1] = Plan(1, 200, 10);\r\n    plans[2] = Plan(2, 200, 6);\r\n    plans[3] = Plan(3, 200, 4);\r\n    plans[4] = Plan(4, 200, 2);\r\n    plans[5] = Plan(5, 500, 2);\r\n    plans[6] = Plan(6, 500, 2);\r\n    plans[7] = Plan(7, 500, 1);\r\n    plans[8] = Plan(8, 500, 1);\r\n    plans[9] = Plan(9, 1000, 1);\r\n    plans[10] = Plan(10, 1000, 1);\r\n  }\r\n/**\r\n  * @dev fallback for .\r\n  *\r\n  * This is public fallback.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * -\r\n  */\r\n  function() external payable {}\r\n  /**\r\n  * @dev access modifier.\r\n  *\r\n  * restrict access this enables sensitive information available only for admin.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `msg.sender` must be an admin.\r\n  */\r\n  modifier onlyAdmin() { //Admin modifier\r\n    require(\r\n      msg.sender == owner,\r\n      \"This function can only invoked by admin\"\r\n      );\r\n      _;\r\n  }\r\n  /**\r\n  * @dev register users in to blockchain.\r\n  *\r\n  * This is public function.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `msg.sender` must be admin.\r\n  * - `_wallet` must be a valid address.\r\n  * - `_package` must be a valid address.\r\n  * - `_etherValue` must be a valid address.\r\n  * - `_status` must be a valid address.\r\n  */\r\n  function registerUser(\r\n    uint _uid,\r\n    address payable _wallet,\r\n    uint _package,\r\n    uint256 _etherValue,\r\n    address payable _refferer,\r\n    bool _status\r\n    ) public onlyAdmin {\r\n    require(users[_wallet].wallet != _wallet,\"User is already registered\");\r\n    uint level = users[_refferer].level + 1;\r\n    users[_wallet] = User(_uid, _wallet, _package,_etherValue, _refferer, level, _status, 0);\r\n    emit UserRegistration(_uid, _wallet, _refferer, _package, _etherValue, 0);\r\n  }\r\n  /**\r\n  * @dev Deactivate user\r\n  *\r\n  * This is public function onlyAdmin.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_wallet` should be a registered user.\r\n  */\r\n  function deactivateUser(address _wallet) public onlyAdmin {\r\n    require(users[_wallet].wallet == _wallet,\"User is not registered in blockchain\");\r\n    users[_wallet].status = false;\r\n  }\r\n  /**\r\n  * @dev Activate user\r\n  *\r\n  * This is public function onlyAdmin.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_wallet` should be a registered user.\r\n  */\r\n  function activateUser(address _wallet) public onlyAdmin {\r\n    require(users[_wallet].wallet == _wallet,\"User is not registered in blockchain\");\r\n    users[_wallet].status = true;\r\n  }\r\n  /**\r\n  * @dev Upgrade user package\r\n  * Access modified with OnlyAdmin\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_wallet` should be a registered user.\r\n  * - `_package` should be a registered user.\r\n  */\r\n  function upgradePackage(address _wallet, uint _package) public onlyAdmin {\r\n    require(users[_wallet].wallet == _wallet,\"User is not registered in blockchain\");\r\n    require(users[_wallet].package < _package, 'perform upgarde only');\r\n    users[_wallet].package = _package;\r\n  }\r\n  /**\r\n  * @dev Enables admin to set compensation plan.\r\n  *\r\n  * This is public function.\r\n  ** Access modified with OnlyAdmin\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_level` cannot be the zero.\r\n  * - `_package` cannot be the zero.\r\n  * - `_percentage` cannot be the zero.\r\n  */\r\n  function setPlan(uint _level, uint _package, uint _percentage) public onlyAdmin {\r\n    plans[_level] = Plan(_level, _package, _percentage);\r\n  }\r\n  /**\r\n  * @dev Withdraws contract balance to owner waller\r\n  *\r\n  ** Access modified with OnlyAdmin\r\n  *\r\n  * Requirements:\r\n  *\r\n  */\r\n  function withdraw() public onlyAdmin {\r\n        owner.transfer(address(this).balance);\r\n  }\r\n  /**\r\n  * @dev Sets user qualification.\r\n  *\r\n  * Access modified with OnlyAdmin\r\n  * This is public function.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_level` cannot be the zero.\r\n  * - `_wallet` cannot be the zero.\r\n  */\r\n  function setQualification(address _wallet,uint _level) public onlyAdmin{\r\n    require(users[_wallet].status == true, 'User is not active or not registered');\r\n    if(qualifications[_wallet].status <= 0 && _level == 1){\r\n        qualifications[_wallet] = Qualification(1,1,0,0,0,0,0,0,0,0,0);\r\n    }else{\r\n      if(_level == 1){\r\n        qualifications[_wallet].level_1 = 1;\r\n      }\r\n      if(_level == 2){\r\n        qualifications[_wallet].level_2 = 1;\r\n      }\r\n      if(_level == 3){\r\n        qualifications[_wallet].level_3 = 1;\r\n      }\r\n      if(_level == 4){\r\n        qualifications[_wallet].level_4 = 1;\r\n      }\r\n      if(_level == 5){\r\n        qualifications[_wallet].level_5 = 1;\r\n      }\r\n      if(_level == 6){\r\n        qualifications[_wallet].level_6 = 1;\r\n      }\r\n      if(_level == 7){\r\n        qualifications[_wallet].level_7 = 1;\r\n      }\r\n      if(_level == 8){\r\n        qualifications[_wallet].level_8 = 1;\r\n      }\r\n      if(_level == 9){\r\n        qualifications[_wallet].level_9 = 1;\r\n      }\r\n      if(_level == 10){\r\n        qualifications[_wallet].level_10 = 1;\r\n      }\r\n    }\r\n    emit EmQualification(_wallet, _level);\r\n  }\r\n/**\r\n  * @dev gets user qualification.\r\n  *\r\n  * Access modified with OnlyAdmin\r\n  * This is public function.\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_level` cannot be the zero.\r\n  * - `_wallet` cannot be the zero.\r\n  */\r\n  function getQualification(address _wallet, uint _level) public view returns(uint) {\r\n      uint qualified;\r\n      if(_level == 1){\r\n        qualified = qualifications[_wallet].level_1;\r\n      }\r\n      if(_level == 2){\r\n        qualified = qualifications[_wallet].level_2;\r\n      }\r\n      if(_level == 3){\r\n        qualified = qualifications[_wallet].level_3;\r\n      }\r\n      if(_level == 4){\r\n        qualified = qualifications[_wallet].level_4;\r\n      }\r\n      if(_level == 5){\r\n        qualified = qualifications[_wallet].level_5;\r\n      }\r\n      if(_level == 6){\r\n        qualified = qualifications[_wallet].level_6;\r\n      }\r\n      if(_level == 7){\r\n        qualified = qualifications[_wallet].level_7;\r\n      }\r\n      if(_level == 8){\r\n        qualified = qualifications[_wallet].level_8;\r\n      }\r\n      if(_level == 9){\r\n        qualified = qualifications[_wallet].level_9;\r\n      }\r\n      if(_level == 10){\r\n        qualified = qualifications[_wallet].level_10;\r\n      }\r\n      return qualified;\r\n  }\r\n  /**\r\n  * @dev calculates commission for uplines.\r\n  *\r\n  * Access modified with OnlyAdmin\r\n  *\r\n  *\r\n  * Requirements:\r\n  *\r\n  * - `_wallet` cannot be the zero.\r\n  */\r\n  function calculateLevelCommission(address payable _wallet) public onlyAdmin {\r\n    address payable parentWallet = users[_wallet].refferer;\r\n    uint256 etherValue = users[_wallet].etherValue;\r\n    uint256 expValue = (etherValue * 30)/100;\r\n    require(address(this).balance > expValue,\"Unable to execute please contact admin\");\r\n    uint level = 1;\r\n    while(level <= 10)\r\n    {\r\n        uint256 amount = 0;\r\n        User memory parent = users[parentWallet];\r\n        if(parentWallet == parent.refferer){\r\n          break;\r\n        }\r\n        //checks user have package\r\n        if(parent.package <= 0){\r\n          break;\r\n        }\r\n        Plan memory levelCommission = plans[level];\r\n        uint qualified = this.getQualification(parentWallet, level);\r\n        if(parent.package >= levelCommission.package && parent.status && qualified > 0){\r\n          amount = etherValue * levelCommission.percentage / 100;\r\n          uint256 maxCommission = (parent.etherValue * 2) - parent.commissions;\r\n          if(maxCommission <= amount )\r\n          {\r\n            amount = maxCommission;\r\n          }\r\n          amount = amount;\r\n          parent.wallet.transfer(amount);\r\n          users[parent.wallet].commissions += amount;\r\n          emit DistributeCommission(parent.wallet, _wallet, amount);\r\n        }\r\n        if(parent.status){\r\n          level++;\r\n        }\r\n         parentWallet = parent.refferer;\r\n    }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"EmQualification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refferer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissions\",\"type\":\"uint256\"}],\"name\":\"UserRegistration\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"activateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"calculateLevelCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"deactivateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getQualification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"qualifications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_9\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_10\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_etherValue\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refferer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setQualification\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"}],\"name\":\"upgradePackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherValue\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"refferer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"commissions\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Besunray","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a600c351be243681531c9439b4c8a73d80541a7196c0903e79e0f951a9d9c1d5"}]}