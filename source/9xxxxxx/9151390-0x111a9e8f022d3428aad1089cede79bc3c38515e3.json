{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-09-10\r\n*/\r\n\r\npragma solidity ^0.4.0;\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: http://multisender.phizhub.com\r\n*/\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: http://multisender.phizhub.com\r\n*/\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: http://multisender.phizhub.com\r\n*/\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  function transfer(address _to, uint _value) public{\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) public constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: http://multisender.phizhub.com\r\n*/\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public {\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public{\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: http://multisender.phizhub.com\r\n*/\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    function Ownable() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n * @dev To Use this Dapp: http://multisender.phizhub.com\r\n*/\r\n\r\ncontract DavisSender is Ownable{\r\n\r\n    using SafeMath for uint;\r\n\r\n\r\n    event LogTokenMultiSent(address token,uint256 total);\r\n    event LogGetToken(address token, address receiver, uint256 balance);\r\n    address receiverAddress;\r\n\r\n\r\n    /*\r\n        * get receiver address\r\n    */\r\n    function getReceiverAddress() public view returns  (address){\r\n        if(receiverAddress == address(0)){\r\n            return owner;\r\n        }\r\n\r\n        return receiverAddress;\r\n    }\r\n\r\n\tfunction coinSendDifferentValue(address _tokenAddress, address[] _to, uint[] _value)  internal  {\r\n\t\tuint sendValue = msg.value;\r\n\r\n\t\trequire(_to.length == _value.length);\r\n\t\trequire(_to.length <= 255);\r\n\r\n        uint256 sendAmount = _value[0];\r\n        StandardToken token = StandardToken(_tokenAddress);\r\n        \r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\ttoken.transferFrom(msg.sender, _to[i], _value[i]);\r\n\t\t}\r\n        emit LogTokenMultiSent(_tokenAddress,sendAmount);\r\n\r\n\t}\r\n\r\n\r\n    /*\r\n        Send USDT with the different value by a explicit call method\r\n    */\r\n    function multisendUSDT(address[] _to, uint[] _value) public {\r\n\t    address _tokenAddress = 0xdac17f958d2ee523a2206206994597c13d831ec7;\r\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\r\n    }\r\n    \r\n    /*\r\n        Send TKJ with the different value by a explicit call method\r\n    */\r\n    function multisendTKJ(address[] _to, uint[] _value) public {\r\n\t    address _tokenAddress = 0x1bb7c7f703CE521fa68524286d6A6d177741Cd92;\r\n\t    coinSendDifferentValue(_tokenAddress, _to, _value);\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getReceiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisendUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisendTKJ\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenMultiSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogGetToken\",\"type\":\"event\"}]","ContractName":"DavisSender","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://9d73d38a4efe4a98391e0ff4ffdfd128fc5a484fdcb80f59733cd9fcef924625"}]}