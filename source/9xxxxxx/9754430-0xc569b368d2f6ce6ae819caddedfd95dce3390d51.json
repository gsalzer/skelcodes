{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.4;\r\n\r\n\r\n/// @dev basic erc20 transfer\r\ninterface Token {\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\n\r\n/// @dev prices in ft\r\ninterface FtInterface {\r\n    function onMint(address _minter, uint256 _price) external returns (bool);\r\n\r\n    function onBuy(\r\n        address _seller,\r\n        address _buyer,\r\n        uint256 _previousPrice,\r\n        uint256 _price\r\n    ) external returns (bool);\r\n\r\n    function onTransfer(address _from, address _to, uint256 _price) external returns (bool);\r\n}\r\n\r\n\r\n/// @dev erc1155\r\ninterface Receiver {\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns(bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external returns(bytes4);\r\n}\r\n\r\n\r\nlibrary Math {\r\n    /// @return uint256 = a + b\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /// @return uint256 = a - b\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\ncontract Nft {\r\n    using Math for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    mapping(uint256 => address) public ownerOf;\r\n    mapping(address => uint256[]) private ownerToIds;\r\n    mapping(uint256 => uint256) private idToIndex; // id = ownerToIds[owner][idToIndex[id]]\r\n    mapping(address => mapping(address => bool)) private approval; // [owner][operator]\r\n    mapping(uint256 => uint256) public priceOf; // ft, nextPrice >= prevPrice\r\n    mapping(uint256 => uint256) public sellPriceOf; // ft, zero (not on sell) or >= priceOf\r\n    mapping(uint256 => string) public nameOf;\r\n    mapping(uint256 => string) public descriptionOf;\r\n    mapping(uint256 => string) public imageOf;\r\n    address public ft = address(0);\r\n\r\n    /// @dev erc1155\r\n    event TransferSingle(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _value\r\n    );\r\n\r\n    /// @dev erc1155\r\n    event TransferBatch(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _values\r\n    );\r\n\r\n    /// @dev erc1155\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @dev erc1155\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    event Price(uint256 indexed _id, uint256 _price);\r\n\r\n    /// @notice keep clean from other tokens\r\n    function clean(address _contract, uint256 _value) external {\r\n        Token(_contract).transfer(msg.sender, _value);\r\n    }\r\n\r\n    function setFt(address _ft) external {\r\n        require(ft == address(0), \"already set\");\r\n        ft = _ft;\r\n    }\r\n\r\n    /// @notice creates nft using ft\r\n    function mint(\r\n        uint256 _price,\r\n        uint256 _sellPrice,\r\n        string calldata _name,\r\n        string calldata _description,\r\n        string calldata _image,\r\n        bytes calldata _data\r\n    ) external {\r\n        require(_price > 1000000000, \"small _price\");\r\n        require(_sellPrice == 0 || _sellPrice >= _price, \"non-zero or small _sellPrice\");\r\n        require(bytes(_image).length > 0, \"empty _image\");\r\n\r\n        require(FtInterface(ft).onMint(msg.sender, _price), \"onMint\");\r\n\r\n        ownerOf[totalSupply] = msg.sender;\r\n        idToIndex[totalSupply] = ownerToIds[msg.sender].length;\r\n        ownerToIds[msg.sender].push(totalSupply);\r\n        priceOf[totalSupply] = _price;\r\n        sellPriceOf[totalSupply] = _sellPrice;\r\n        nameOf[totalSupply] = _name;\r\n        descriptionOf[totalSupply] = _description;\r\n        imageOf[totalSupply] = _image;\r\n        emit URI(uri(totalSupply), totalSupply);\r\n        emit TransferSingle(msg.sender, address(0), msg.sender, totalSupply, 1);\r\n        if (_sellPrice != 0) {\r\n            emit Price(totalSupply, _sellPrice);\r\n        }\r\n        totalSupply = totalSupply.add(1);\r\n\r\n        if (isContract(msg.sender)) {\r\n            Receiver receiver = Receiver(msg.sender);\r\n            bytes4 result = receiver.onERC1155Received(msg.sender, address(0), totalSupply.sub(1), 1, _data);\r\n            require(result == 0xf23a6e61, \"receiver\");\r\n        }\r\n    }\r\n\r\n    /// @param _sellPrice can be zero if not on sale, or not less then price\r\n    function setPrice(uint256 _id, uint256 _sellPrice) external {\r\n        require(ownerOf[_id] == msg.sender, \"not an owner\");\r\n        require(_sellPrice == 0 || _sellPrice >= priceOf[_id], \"non-zero or small _sellPrice\");\r\n        sellPriceOf[_id] = _sellPrice;\r\n        emit Price(_id, _sellPrice);\r\n    }\r\n\r\n    function buy(uint256 _id, bytes calldata _data) external {\r\n        address seller = ownerOf[_id];\r\n        uint256 sellPrice = sellPriceOf[_id];\r\n        require(sellPrice != 0, \"not on sell\");\r\n        require(FtInterface(ft).onBuy(seller, msg.sender, priceOf[_id], sellPrice), \"onBuy\");\r\n        transfer(seller, msg.sender, _id);\r\n        priceOf[_id] = sellPrice;\r\n        delete sellPriceOf[_id];\r\n        emit TransferSingle(msg.sender, seller, msg.sender, _id, 1);\r\n        emit Price(_id, 0);\r\n\r\n        if (isContract(msg.sender)) {\r\n            Receiver receiver = Receiver(msg.sender);\r\n            bytes4 result = receiver.onERC1155Received(msg.sender, seller, _id, 1, _data);\r\n            require(result == 0xf23a6e61, \"receiver\");\r\n        }\r\n    }\r\n\r\n    /// @dev erc1155\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external {\r\n        require(_to != address(0), \"zero _to\");\r\n        require(_from == msg.sender || approval[_from][msg.sender], \"not approved\");\r\n        require(_value == 0 || _value == 1, \"big _value\");\r\n        if (_value == 1) {\r\n            require(ownerOf[_id] == _from, \"not an owner\");\r\n            transfer(_from, _to, _id);\r\n            require(FtInterface(ft).onTransfer(_from, _to, priceOf[_id]), \"onTransfer\");\r\n            if (sellPriceOf[_id] != 0) {\r\n                delete sellPriceOf[_id];\r\n                emit Price(_id, 0);\r\n            }\r\n        }\r\n        emit TransferSingle(msg.sender, _from, _to, _id, _value);\r\n\r\n        if (isContract(_to)) {\r\n            Receiver receiver = Receiver(_to);\r\n            bytes4 result = receiver.onERC1155Received(msg.sender, _from, _id, _value, _data);\r\n            require(result == 0xf23a6e61, \"receiver\");\r\n        }\r\n    }\r\n\r\n    /// @dev erc1155\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external {\r\n        require(_to != address(0), \"zero _to\");\r\n        require(_ids.length == _values.length, \"different lengths of arrays\");\r\n        require(_from == msg.sender || approval[_from][msg.sender], \"not approved\");\r\n        uint256 totalPrice = 0;\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            uint256 id = _ids[i];\r\n            uint256 value = _values[i];\r\n            require(value == 0 || value == 1, \"big value\");\r\n            if (value == 1) {\r\n                require(ownerOf[id] == _from, \"not an owner\");\r\n                transfer(_from, _to, id);\r\n                totalPrice = totalPrice.add(priceOf[id]);\r\n                if (sellPriceOf[id] != 0) {\r\n                    delete sellPriceOf[id];\r\n                    emit Price(id, 0);\r\n                }\r\n            }\r\n        }\r\n        if (totalPrice > 0) {\r\n            require(FtInterface(ft).onTransfer(_from, _to, totalPrice), \"onTransfer\");\r\n        }\r\n        emit TransferBatch(msg.sender, _from, _to, _ids, _values);\r\n\r\n        if (isContract(_to)) {\r\n            Receiver receiver = Receiver(_to);\r\n            bytes4 result = receiver.onERC1155BatchReceived(msg.sender, _from, _ids, _values, _data);\r\n            require(result == 0xbc197c81, \"receiver\");\r\n        }\r\n    }\r\n\r\n    /// @dev erc1155\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != address(0), \"zero _operator\");\r\n        approval[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /// @dev erc1155\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256) {\r\n        return ownerOf[_id] == _owner ? 1 : 0;\r\n    }\r\n\r\n    /// @dev erc1155\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {\r\n        require(_owners.length == _ids.length, \"different lengths of arrays\");\r\n        uint256[] memory result = new uint256[](_owners.length);\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            result[i] = ownerOf[_ids[i]] == _owners[i] ? 1 : 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function tokensOf(address _owner) external view returns (uint256) {\r\n        return ownerToIds[_owner].length;\r\n    }\r\n\r\n    function idOf(address _owner, uint256 _index) external view returns (uint256) {\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n    /// @dev erc1155\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return approval[_owner][_operator];\r\n    }\r\n\r\n    /// @dev erc165\r\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\r\n        return _interfaceId == 0x01ffc9a7 // erc165\r\n        || _interfaceId == 0xd9b67a26 // erc1155\r\n        || _interfaceId == 0x0e89341c; // erc1155metadata\r\n    }\r\n\r\n    /// @dev erc1155metadata\r\n    function uri(uint256 _id) public view returns (string memory) {\r\n        bytes memory out = abi.encodePacked(\r\n            \"{ \\\"name\\\": \\\"\",\r\n            nameOf[_id],\r\n            \"\\\", \\\"description\\\": \\\"\",\r\n            descriptionOf[_id],\r\n            \"\\\", \\\"image\\\": \\\"\",\r\n            imageOf[_id],\r\n            \"\\\" }\"\r\n        );\r\n        return string(out);\r\n    }\r\n\r\n    function transfer(address from, address to, uint256 id) private {\r\n        ownerOf[id] = to;\r\n\r\n        uint256 lastIndex = ownerToIds[from].length.sub(1);\r\n        uint256 deletedIndex = idToIndex[id];\r\n        if (lastIndex != deletedIndex) {\r\n            uint256 lastId = ownerToIds[from][lastIndex];\r\n            ownerToIds[from][deletedIndex] = lastId;\r\n            idToIndex[lastId] = deletedIndex;\r\n        }\r\n        ownerToIds[from].pop();\r\n        ownerToIds[to].push(id);\r\n        idToIndex[id] = ownerToIds[to].length.sub(1);\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"descriptionOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"idOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"imageOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellPriceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ft\",\"type\":\"address\"}],\"name\":\"setFt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Nft","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://b7965c14e9ddc65866c332dabaa53690b5dcdd0373812b2af82622828084f5a9"}]}