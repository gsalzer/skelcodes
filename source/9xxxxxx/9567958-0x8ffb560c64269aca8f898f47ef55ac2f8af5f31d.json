{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n// A Digital Disputable Buyer and Seller Agreement for Goods or Services. \r\n// Adapted from LEE - LexDAO Ether Escrow || author: Ro5s lexDAO ||\r\n// Modified in part by Scott H. Stevenson for the Web3-WorldLaw and Web3vm system of protocols\r\n\r\ncontract DisputableBuyerSellerAgreement {\r\n    \r\n    address payable public buyer;\r\n    address payable public seller;\r\n    address payable public arbitrator;\r\n    uint256 public priceValue;\r\n    string public agreementTerms;\r\n    string public disputeDescription;\r\n    bool public agreementIsDisputed;\r\n    bool public agreementIsCompleted;\r\n    \r\n    event ReleasedAgreement(uint256 indexed priceValue);\r\n    event DisputedAgreement(address indexed complainant);\r\n    event ResolvedAgreement(uint256 indexed resolvedBuyerPortion, uint256 indexed resolvedSellerPortion);\r\n    \r\n    constructor(\r\n        address payable _buyer,\r\n        address payable _seller,\r\n        address payable _arbitrator,\r\n        string memory _agreementTerms) payable public {\r\n        buyer = _buyer;\r\n        seller = _seller;\r\n        arbitrator = _arbitrator;\r\n        priceValue = msg.value;\r\n        agreementTerms = _agreementTerms;\r\n    }\r\n    \r\n    function releasePriceValue() public {\r\n        require(msg.sender == buyer, \"The current user must be the buyer.\");\r\n        require(agreementIsDisputed == false, \"The agreement must not be in dispute.\");\r\n        address(seller).transfer(priceValue);\r\n        agreementIsCompleted = true;\r\n        emit ReleasedAgreement(priceValue);\r\n    }\r\n    \r\n    function disputeAgreement(string memory _disputeDescription) public {\r\n        require(msg.sender == buyer || msg.sender == seller, \"The current user must be the buyer or seller.\" );\r\n        require(agreementIsCompleted == false, \"The agreement must not be completed.\");\r\n        agreementIsDisputed = true;\r\n        disputeDescription = _disputeDescription;\r\n        emit DisputedAgreement(msg.sender);\r\n    }\r\n    \r\n    function resolveAgreement(uint256 resolvedBuyerPortion, uint256 resolvedSellerPortion) public {\r\n        require(msg.sender == arbitrator, \"The current user must be the arbitrator.\" );\r\n        require(agreementIsDisputed == true, \"The agreement must be in dispute.\" );\r\n        uint256 arbitrationFee = priceValue / 20;\r\n        require(resolvedBuyerPortion + resolvedSellerPortion + arbitrationFee == priceValue);\r\n        address(buyer).transfer(resolvedBuyerPortion);\r\n        address(seller).transfer(resolvedSellerPortion);\r\n        address(arbitrator).transfer(arbitrationFee);\r\n        agreementIsCompleted = true;\r\n        emit ResolvedAgreement(resolvedBuyerPortion, resolvedSellerPortion);\r\n    }\r\n    \r\n    function getAgreementBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\ncontract DisputableBuyerSellerAgreementGenerator {\r\n    \r\n    uint8 public DisputableBuyerSellerAgreementVersion = 1;\r\n    \r\n    address payable public arbitrator = 0x130093A5aEbc07e78e16f0EcEF09d1c45AfD8178; // Default Arbitrator\r\n    \r\n    DisputableBuyerSellerAgreement private DBSA;\r\n    \r\n    address[] public agreements;\r\n    \r\n    event AgreementDeployed(\r\n        address indexed DisputableBuyerSellerAgreement, \r\n        address indexed _buyer, \r\n        address indexed _seller);\r\n        \r\n    event ArbitratorUpdated(address indexed newArbitrator);\r\n    \r\n    function newDBSA(\r\n        address payable _seller, \r\n        string memory _agreementTerms) payable public {\r\n        require(arbitrator != address(0), \"The arbitrator cannot be the original agreement generator\");\r\n           \r\n        DBSA = (new DisputableBuyerSellerAgreement).value(msg.value)(\r\n            msg.sender,\r\n            _seller,\r\n            arbitrator,\r\n            _agreementTerms);\r\n        \r\n        agreements.push(address(DBSA));\r\n        \r\n        emit AgreementDeployed(address(DBSA), msg.sender, _seller);\r\n\r\n    }\r\n    \r\n    function getAgreementCount() public view returns (uint256 agreementCount) {\r\n        return agreements.length;\r\n    }\r\n    \r\n    function updateArbitrator(address payable newArbitrator) public {\r\n        require(msg.sender == arbitrator, \"The current user must be the current arbitrator.\");\r\n        arbitrator = newArbitrator;\r\n        \r\n        emit ArbitratorUpdated(newArbitrator);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"DisputableBuyerSellerAgreement\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"AgreementDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newArbitrator\",\"type\":\"address\"}],\"name\":\"ArbitratorUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DisputableBuyerSellerAgreementVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAgreementCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"agreementCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_agreementTerms\",\"type\":\"string\"}],\"name\":\"newDBSA\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newArbitrator\",\"type\":\"address\"}],\"name\":\"updateArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DisputableBuyerSellerAgreementGenerator","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b5e644966c6021b267821c174cb5ffb54aa749623e92bcf04eca4bd4327b5068"}]}