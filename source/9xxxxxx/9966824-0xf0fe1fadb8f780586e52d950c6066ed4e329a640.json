{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/Escrow.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Escrow contract for ETH based escrows\r\n */\r\ncontract Escrow {\r\n\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n\r\n    event FundsDeposited(address indexed buyer, uint256 amount);\r\n    event FundsRefunded();\r\n    event FundsReleased(address indexed seller, uint256 amount);\r\n    event DisputeResolved();\r\n    event OwnershipTransferred(address indexed oldOwner, address newOwner);\r\n    event MediatorChanged(address indexed oldMediator, address newMediator);\r\n\r\n    enum Status { AWAITING_PAYMENT, PAID, REFUNDED, MEDIATED, COMPLETE }\r\n\r\n    Status public status;\r\n    bytes32 escrowID;\r\n    uint256 amount;\r\n    uint256 fee;\r\n    address payable public owner;\r\n    address payable public mediator;\r\n    address payable public buyer;\r\n    address payable public seller;\r\n    bool public initialized = false;\r\n    bool public funded = false;\r\n    bool public completed = false;\r\n    bytes32 public releaseMsgHash;\r\n    bytes32 public resolveMsgHash;\r\n\r\n    modifier onlyExactAmount(uint256 _amount) {\r\n        require(_amount == depositAmount(), \"Amount needs to be exact.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBuyer() {\r\n        require(msg.sender == buyer, \"Only the buyer can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithBuyerSignature(bytes32 hash, bytes memory signature) {\r\n        require(\r\n            hash.toEthSignedMessageHash()\r\n                .recover(signature) == buyer,\r\n            \"Must be signed by buyer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithParticipantSignature(bytes32 hash, bytes memory signature) {\r\n        address signer = hash.toEthSignedMessageHash()\r\n            .recover(signature);\r\n        require(\r\n            signer == buyer || signer == seller,\r\n            \"Must be signed by either buyer or seller.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlySeller() {\r\n        require(msg.sender == seller, \"Only the seller can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMediator() {\r\n        require(msg.sender == mediator, \"Only the mediator can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUninitialized() {\r\n        require(initialized == false, \"Escrow already initialized.\");\r\n        initialized = true;\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnfunded() {\r\n        require(funded == false, \"Escrow already funded.\");\r\n        funded = true;\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunded() {\r\n        require(funded == true, \"Escrow not funded.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyIncompleted() {\r\n        require(completed == false, \"Escrow already completed.\");\r\n        completed = true;\r\n        _;\r\n    }\r\n\r\n    function init(\r\n        bytes32 _escrowID,\r\n        address payable _owner,\r\n        address payable _buyer,\r\n        address payable  _seller,\r\n        address payable _mediator,\r\n        uint256 _amount,\r\n        uint256 _fee\r\n    )\r\n        external\r\n        onlyUninitialized\r\n    {\r\n        status = Status.AWAITING_PAYMENT;\r\n        escrowID = _escrowID;\r\n        owner = _owner;\r\n        buyer = _buyer;\r\n        seller = _seller;\r\n        mediator = _mediator;\r\n        amount = _amount;\r\n        fee = _fee;\r\n        releaseMsgHash = keccak256(\r\n            abi.encodePacked(\"releaseFunds()\", escrowID, address(this))\r\n        );\r\n        resolveMsgHash = keccak256(\r\n            abi.encodePacked(\"resolveDispute()\", escrowID, address(this))\r\n        );\r\n        emit OwnershipTransferred(address(0), _owner);\r\n        emit MediatorChanged(address(0), _owner);\r\n    }\r\n\r\n    fallback() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function depositAmount() public view returns (uint256) {\r\n        return amount.add(fee);\r\n    }\r\n\r\n    function deposit()\r\n        public\r\n        payable\r\n        onlyUnfunded\r\n        onlyExactAmount(msg.value)\r\n    {\r\n        status = Status.PAID;\r\n        emit FundsDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    function refund()\r\n        public\r\n        onlySeller\r\n        onlyFunded\r\n        onlyIncompleted\r\n    {\r\n        buyer.transfer(depositAmount());\r\n        status = Status.REFUNDED;\r\n        emit FundsRefunded();\r\n    }\r\n\r\n    function _releaseFees() private {\r\n        mediator.transfer(fee.mul(2));\r\n    }\r\n\r\n    function releaseFunds(\r\n        bytes calldata _signature\r\n    )\r\n        external\r\n        onlyFunded\r\n        onlyIncompleted\r\n        onlyWithBuyerSignature(releaseMsgHash, _signature)\r\n    {\r\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\r\n        status = Status.COMPLETE;\r\n        emit FundsReleased(seller, releaseAmount);\r\n        seller.transfer(releaseAmount);\r\n        _releaseFees();\r\n    }\r\n\r\n    function resolveDispute(\r\n        bytes calldata _signature,\r\n        uint8 _buyerPercent\r\n    )\r\n        external\r\n        onlyFunded\r\n        onlyMediator\r\n        onlyIncompleted\r\n        onlyWithParticipantSignature(resolveMsgHash, _signature)\r\n    {\r\n        require(_buyerPercent <= 100, \"_buyerPercent must be 100 or lower\");\r\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\r\n\r\n        status = Status.MEDIATED;\r\n        emit DisputeResolved();\r\n\r\n        if (_buyerPercent > 0)\r\n          buyer.transfer(releaseAmount.mul(uint256(_buyerPercent)).div(100));\r\n        if (_buyerPercent < 100)\r\n          seller.transfer(releaseAmount.mul(uint256(100).sub(_buyerPercent)).div(100));\r\n\r\n        _releaseFees();\r\n    }\r\n\r\n    function setOwner(address payable _newOwner) external onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setMediator(address payable _newMediator) external onlyOwner {\r\n        emit MediatorChanged(mediator, _newMediator);\r\n        mediator = _newMediator;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Escrow.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Escrow contract for ERC20 token based escrows\r\n */\r\ncontract ERC20Escrow {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using ECDSA for bytes32;\r\n\r\n    event FundsDeposited(address indexed buyer, uint256 amount);\r\n    event FundsRefunded();\r\n    event FundsReleased(address indexed seller, uint256 amount);\r\n    event DisputeResolved();\r\n    event OwnershipTransferred(address indexed oldOwner, address newOwner);\r\n    event MediatorChanged(address indexed oldMediator, address newMediator);\r\n\r\n    enum Status { AWAITING_PAYMENT, PAID, REFUNDED, MEDIATED, COMPLETE }\r\n\r\n    Status public status;\r\n    bytes32 escrowID;\r\n    uint256 amount;\r\n    uint256 fee;\r\n    address public owner;\r\n    address public mediator;\r\n    address public buyer;\r\n    address public seller;\r\n    IERC20 public token;\r\n    bool public initialized = false;\r\n    bool public funded = false;\r\n    bool public completed = false;\r\n    bytes32 public releaseMsgHash;\r\n    bytes32 public resolveMsgHash;\r\n\r\n    modifier onlyBuyer() {\r\n        require(msg.sender == buyer, \"Only the buyer can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithBuyerSignature(bytes32 hash, bytes memory signature) {\r\n        require(\r\n            hash.toEthSignedMessageHash()\r\n                .recover(signature) == buyer,\r\n            \"Must be signed by buyer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithParticipantSignature(bytes32 hash, bytes memory signature) {\r\n        address signer = hash.toEthSignedMessageHash()\r\n            .recover(signature);\r\n        require(\r\n            signer == buyer || signer == seller,\r\n            \"Must be signed by either buyer or seller.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlySeller() {\r\n        require(msg.sender == seller, \"Only the seller can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMediator() {\r\n        require(msg.sender == mediator, \"Only the mediator can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUninitialized() {\r\n        require(initialized == false, \"Escrow already initialized.\");\r\n        initialized = true;\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnfunded() {\r\n        require(funded == false, \"Escrow already funded.\");\r\n        funded = true;\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunded() {\r\n        require(funded == true, \"Escrow not funded.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyIncompleted() {\r\n        require(completed == false, \"Escrow already completed.\");\r\n        completed = true;\r\n        _;\r\n    }\r\n\r\n    function init(\r\n        bytes32 _escrowID,\r\n        IERC20 _token,\r\n        address _owner,\r\n        address _buyer,\r\n        address _seller,\r\n        address _mediator,\r\n        uint256 _amount,\r\n        uint256 _fee\r\n    )\r\n        external\r\n        onlyUninitialized\r\n    {\r\n        status = Status.AWAITING_PAYMENT;\r\n        escrowID = _escrowID;\r\n        token = _token;\r\n        owner = _owner;\r\n        buyer = _buyer;\r\n        mediator = _mediator;\r\n        seller = _seller;\r\n        amount = _amount;\r\n        fee = _fee;\r\n        releaseMsgHash = keccak256(\r\n            abi.encodePacked(\"releaseFunds()\", escrowID, address(this))\r\n        );\r\n        resolveMsgHash = keccak256(\r\n            abi.encodePacked(\"resolveDispute()\", escrowID, address(this))\r\n        );\r\n        emit OwnershipTransferred(address(0), _owner);\r\n        emit MediatorChanged(address(0), _owner);\r\n    }\r\n\r\n    function depositAmount() public view returns (uint256) {\r\n        return amount.add(fee);\r\n    }\r\n\r\n    function deposit()\r\n        public\r\n        onlyUnfunded\r\n    {\r\n        token.safeTransferFrom(msg.sender, address(this), depositAmount());\r\n        status = Status.PAID;\r\n        emit FundsDeposited(msg.sender, depositAmount());\r\n    }\r\n\r\n    function _releaseFees() private {\r\n            token.safeTransfer(mediator, fee.mul(2));\r\n    }\r\n\r\n    function refund()\r\n        public\r\n        onlySeller\r\n        onlyFunded\r\n        onlyIncompleted\r\n    {\r\n        token.safeTransfer(buyer, depositAmount());\r\n        status = Status.REFUNDED;\r\n        emit FundsRefunded();\r\n    }\r\n\r\n    function releaseFunds(\r\n        bytes calldata signature\r\n    )\r\n        external\r\n        onlyFunded\r\n        onlyIncompleted\r\n        onlyWithBuyerSignature(releaseMsgHash, signature)\r\n    {\r\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\r\n        token.safeTransfer(seller, releaseAmount);\r\n\r\n        _releaseFees();\r\n\r\n        status = Status.COMPLETE;\r\n        emit FundsReleased(seller, releaseAmount);\r\n    }\r\n\r\n    function resolveDispute(\r\n        bytes calldata _signature,\r\n        uint8 _buyerPercent\r\n    )\r\n        external\r\n        onlyFunded\r\n        onlyMediator\r\n        onlyIncompleted\r\n        onlyWithParticipantSignature(resolveMsgHash, _signature)\r\n    {\r\n        require(_buyerPercent <= 100, \"_buyerPercent must be 100 or lower\");\r\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\r\n\r\n        status = Status.MEDIATED;\r\n        emit DisputeResolved();\r\n\r\n        if (_buyerPercent > 0)\r\n          token.safeTransfer(buyer, releaseAmount.mul(uint256(_buyerPercent)).div(100));\r\n        if (_buyerPercent < 100)\r\n          token.safeTransfer(seller, releaseAmount.mul(uint256(100).sub(_buyerPercent)).div(100));\r\n\r\n        _releaseFees();\r\n    }\r\n\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setMediator(address _newMediator) external onlyOwner {\r\n        emit MediatorChanged(mediator, _newMediator);\r\n        mediator = _newMediator;\r\n    }\r\n}\r\n\r\n// File: contracts/CloneFactory.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract CloneFactory {\r\n\r\n  function createClone(address target) internal returns (address result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    /* solium-disable-next-line */\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n      mstore(add(clone, 0x14), targetBytes)\r\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n      result := create(0, clone, 0x37)\r\n    }\r\n  }\r\n\r\n  function isClone(address target, address query) internal view returns (bool result) {\r\n    bytes20 targetBytes = bytes20(target);\r\n    /* solium-disable-next-line */\r\n    assembly {\r\n      let clone := mload(0x40)\r\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\r\n      mstore(add(clone, 0xa), targetBytes)\r\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\r\n      let other := add(clone, 0x40)\r\n      extcodecopy(query, other, 0, 0x2d)\r\n      result := and(\r\n        eq(mload(clone), mload(other)),\r\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/EscrowFactory.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Factory contract for deploying and recording escrow contract instances.\r\n * All deployments require a signature from the contract owner. Contracts are\r\n * deployed as minimal proxies (EIP 1167). There are two main contracts, one\r\n * for ETH payments and another for ERC20 token payments.\r\n */\r\ncontract EscrowFactory is Ownable, CloneFactory {\r\n    using ECDSA for bytes32;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    address payable escrowAddress;\r\n    address erc20EscrowAddress;\r\n    mapping (bytes32 => address) escrows;\r\n\r\n    struct EscrowConfig {\r\n        bytes id;\r\n        address payable mediator;\r\n        address payable buyer;\r\n        address payable seller;\r\n        uint256 amount;\r\n        uint256 fee;\r\n    }\r\n\r\n    struct ERC20EscrowConfig {\r\n        bytes id;\r\n        IERC20 tokenAddr;\r\n        address payable mediator;\r\n        address payable buyer;\r\n        address payable seller;\r\n        uint256 amount;\r\n        uint256 fee;\r\n    }\r\n\r\n    modifier onlyWithValidEscrowSig(\r\n        EscrowConfig memory _cfg,\r\n        uint32 _expiry,\r\n        bytes memory _signature\r\n    ) {\r\n        bytes32 deployHash = getEscrowDeployHash(_cfg, _expiry);\r\n        require(deployHash.toEthSignedMessageHash().recover(_signature) == owner(), \"Invalid deployment signature.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithValidERC20EscrowSig(\r\n        ERC20EscrowConfig memory _cfg,\r\n        uint32 _expiry,\r\n        bytes memory _signature\r\n    ) {\r\n        bytes32 deployHash = getERC20EscrowDeployHash(_cfg, _expiry);\r\n        require(deployHash.toEthSignedMessageHash().recover(_signature) == owner(), \"Invalid deployment signature.\");\r\n        _;\r\n    }\r\n\r\n    event EscrowDeployed(bytes indexed id, address escrowAddr);\r\n\r\n    constructor (address payable _escrowAddress, address _erc20EscrowAddress) public {\r\n        escrowAddress = _escrowAddress;\r\n        erc20EscrowAddress = _erc20EscrowAddress;\r\n    }\r\n\r\n    function getEscrow(\r\n        bytes memory _id,\r\n        address payable _buyer,\r\n        address payable _seller,\r\n        uint256 _amount,\r\n        uint256 _fee\r\n    )\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 escrowID = keccak256(abi.encodePacked(_id,_buyer,_seller,_amount,_fee));\r\n        return escrows[escrowID];\r\n    }\r\n\r\n    function getEscrowDeployHash(\r\n        EscrowConfig memory _cfg,\r\n        uint32 _expiry\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                _cfg.id,\r\n                _cfg.mediator,\r\n                _cfg.buyer,\r\n                _cfg.seller,\r\n                _cfg.amount,\r\n                _cfg.fee,\r\n                _expiry\r\n            )\r\n        );\r\n    }\r\n\r\n    function getERC20EscrowDeployHash(\r\n        ERC20EscrowConfig memory _cfg,\r\n        uint32 _expiry\r\n    )\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                _cfg.id,\r\n                _cfg.tokenAddr,\r\n                _cfg.buyer,\r\n                _cfg.seller,\r\n                _cfg.amount,\r\n                _cfg.fee,\r\n                _expiry\r\n            )\r\n        );\r\n    }\r\n\r\n    function cloneAndInitEscrow(\r\n        EscrowConfig memory _cfg\r\n    )\r\n        internal\r\n        returns (Escrow)\r\n    {\r\n        address clone = createClone(escrowAddress);\r\n        bytes32 escrowID = keccak256(abi.encodePacked(_cfg.id, _cfg.buyer, _cfg.seller, _cfg.amount, _cfg.fee));\r\n        require(escrows[escrowID] == address(0), \"Escrow already exists!\");\r\n        escrows[escrowID] = clone;\r\n        Escrow(uint160(clone)).init(escrowID, address(uint160(owner())), _cfg.buyer, _cfg.seller, _cfg.mediator, _cfg.amount, _cfg.fee);\r\n        emit EscrowDeployed(_cfg.id, clone);\r\n        return Escrow(uint160(clone));\r\n    }\r\n\r\n    function deployEscrow(\r\n        EscrowConfig memory _cfg,\r\n        uint32 _expiry,\r\n        bytes memory _signature\r\n    )\r\n        public\r\n        onlyWithValidEscrowSig(_cfg, _expiry, _signature)\r\n        returns (Escrow)\r\n    {\r\n        Escrow escrow = cloneAndInitEscrow(_cfg);\r\n        return escrow;\r\n    }\r\n\r\n    function deployAndFundEscrow(\r\n        EscrowConfig memory _cfg,\r\n        uint32 _expiry,\r\n        bytes memory _signature\r\n    )\r\n        public\r\n        payable\r\n        onlyWithValidEscrowSig(_cfg, _expiry, _signature)\r\n        returns (Escrow)\r\n    {\r\n        /* solium-disable-next-line */\r\n        require(block.timestamp < _expiry, \"Deployment signature expired.\");\r\n        Escrow escrow = cloneAndInitEscrow(_cfg);\r\n        escrow.deposit.value(msg.value)();\r\n        return escrow;\r\n    }\r\n\r\n    function cloneAndInitERC20Escrow(\r\n        ERC20EscrowConfig memory _cfg\r\n    )\r\n        internal\r\n        returns (ERC20Escrow)\r\n    {\r\n        address clone = createClone(erc20EscrowAddress);\r\n        bytes32 escrowID = keccak256(abi.encodePacked(_cfg.id, _cfg.buyer, _cfg.seller, _cfg.amount, _cfg.fee));\r\n        require(escrows[escrowID] == address(0), \"Escrow already exists!\");\r\n        escrows[escrowID] = clone;\r\n        ERC20Escrow(clone).init(\r\n            escrowID,\r\n            _cfg.tokenAddr,\r\n            address(uint160(owner())),\r\n            _cfg.buyer,\r\n            _cfg.seller,\r\n            _cfg.mediator,\r\n            _cfg.amount,\r\n            _cfg.fee\r\n        );\r\n        emit EscrowDeployed(_cfg.id, clone);\r\n        return ERC20Escrow(clone);\r\n    }\r\n\r\n    function deployERC20Escrow(\r\n        ERC20EscrowConfig memory _cfg,\r\n        uint32 _expiry,\r\n        bytes memory _signature\r\n    )\r\n        public\r\n        onlyWithValidERC20EscrowSig(_cfg, _expiry, _signature)\r\n        returns (ERC20Escrow)\r\n    {\r\n        ERC20Escrow escrow = cloneAndInitERC20Escrow(_cfg);\r\n        return escrow;\r\n    }\r\n\r\n    function deployAndFundERC20Escrow(\r\n        ERC20EscrowConfig memory _cfg,\r\n        uint32 _expiry,\r\n        bytes memory _signature\r\n    )\r\n        public\r\n        onlyWithValidERC20EscrowSig(_cfg, _expiry, _signature)\r\n        returns (ERC20Escrow)\r\n    {\r\n        /* solium-disable-next-line */\r\n        require(block.timestamp < _expiry, \"Deployment signature expired.\");\r\n        ERC20Escrow escrow = cloneAndInitERC20Escrow(_cfg);\r\n        IERC20(_cfg.tokenAddr).safeTransferFrom(msg.sender, address(this), _cfg.amount.add(_cfg.fee));\r\n        IERC20(_cfg.tokenAddr).safeApprove(address(escrow), _cfg.amount.add(_cfg.fee));\r\n        escrow.deposit();\r\n        return escrow;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_escrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20EscrowAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrowAddr\",\"type\":\"address\"}],\"name\":\"EscrowDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowFactory.ERC20EscrowConfig\",\"name\":\"_cfg\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"deployAndFundERC20Escrow\",\"outputs\":[{\"internalType\":\"contract ERC20Escrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowFactory.EscrowConfig\",\"name\":\"_cfg\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"deployAndFundEscrow\",\"outputs\":[{\"internalType\":\"contract Escrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowFactory.ERC20EscrowConfig\",\"name\":\"_cfg\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"deployERC20Escrow\",\"outputs\":[{\"internalType\":\"contract ERC20Escrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowFactory.EscrowConfig\",\"name\":\"_cfg\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"deployEscrow\",\"outputs\":[{\"internalType\":\"contract Escrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowFactory.ERC20EscrowConfig\",\"name\":\"_cfg\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"}],\"name\":\"getERC20EscrowDeployHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_id\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"getEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"id\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowFactory.EscrowConfig\",\"name\":\"_cfg\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_expiry\",\"type\":\"uint32\"}],\"name\":\"getEscrowDeployHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EscrowFactory","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000059f2b254d440e366a694ceaa307e651df79be3d700000000000000000000000041d9a0a9706d7c1df5df43ddd1dae6edbde73fc1","Library":"","LicenseType":"None","SwarmSource":"ipfs://dd17a03a1b04fd4f05788720a5d0a254c9a68a658953e0900913c1afb609640c"}]}