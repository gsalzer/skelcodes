{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title IRegistry\r\n * @dev This contract represents the interface of a registry contract\r\n */\r\ninterface ITwoKeySingletonesRegistry {\r\n\r\n    /**\r\n    * @dev This event will be emitted every time a new proxy is created\r\n    * @param proxy representing the address of the proxy created\r\n    */\r\n    event ProxyCreated(address proxy);\r\n\r\n\r\n    /**\r\n    * @dev This event will be emitted every time a new implementation is registered\r\n    * @param version representing the version name of the registered implementation\r\n    * @param implementation representing the address of the registered implementation\r\n    * @param contractName is the name of the contract we added new version\r\n    */\r\n    event VersionAdded(string version, address implementation, string contractName);\r\n\r\n    /**\r\n    * @dev Registers a new version with its implementation address\r\n    * @param version representing the version name of the new implementation to be registered\r\n    * @param implementation representing the address of the new implementation to be registered\r\n    */\r\n    function addVersion(string _contractName, string version, address implementation) public;\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation for a given version\r\n    * @param _contractName is the name of the contract we're querying\r\n    * @param version to query the implementation of\r\n    * @return address of the implementation registered for the given version\r\n    */\r\n    function getVersion(string _contractName, string version) public view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title Proxy\r\n */\r\ncontract Proxy {\r\n\r\n\r\n    // Gives the possibility to delegate any call to a foreign implementation.\r\n\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function implementation() public view returns (address);\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    function () payable public {\r\n        address _impl = implementation();\r\n        require(_impl != address(0));\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize)\r\n            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\n            let size := returndatasize\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @author Nikola Madjarevic\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\ncontract UpgradeabilityStorage {\r\n    // Versions registry\r\n    ITwoKeySingletonesRegistry internal registry;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is Proxy, UpgradeabilityStorage {\r\n\r\n    //TODO: Add event through event source whenever someone calls upgradeTo\r\n    /**\r\n    * @dev Constructor function\r\n    */\r\n    constructor (string _contractName, string _version) public {\r\n        registry = ITwoKeySingletonesRegistry(msg.sender);\r\n        _implementation = registry.getVersion(_contractName, _version);\r\n    }\r\n\r\n    /**\r\n    * @dev Upgrades the implementation to the requested version\r\n    * @param _version representing the version name of the new implementation to be set\r\n    */\r\n    function upgradeTo(string _contractName, string _version, address _impl) public {\r\n        require(msg.sender == address(registry));\r\n        require(_impl != address(0));\r\n        _implementation = _impl;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractName\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UpgradeabilityProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001854776f4b657955706772616461626c6545786368616e676500000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://266e2105873a82d4af9bbdbebef4389e828d87a65cfb900790bcdc8c8c6bf18c"}]}