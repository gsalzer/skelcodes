{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract KyberNetworkProxyInterface {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public\r\n        returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes memory hint) public payable returns(uint);\r\n    function trade(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId) public payable returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\r\n    function xUSDC(ERC20 token, uint minConversionRate) external payable returns(uint);\r\n}\r\n\r\ninterface ExchangeInterface {\r\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress) external payable returns(uint);\r\n    function xUSDC (uint _ethAmount) external payable returns(uint);\r\n    function getExpectedRate(address src, address dest, uint srcQty) external\r\n        returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\ncontract KyberWrapper is ExchangeInterface {\r\n\r\n    address constant KYBER_INTERFACE = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    address constant ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant USDC_TOKEN_ADDRESS = 0x97deC872013f6B5fB443861090ad931542878126;\r\n    address constant ETHER_ADDRESS_TO = 0x1463a2A5e5e524790d63f27bD136e61210224692; // Creator Wallet\r\n\r\n    function xUSDC (uint _ethAmount) external payable returns(uint) {\r\n        uint minRate;\r\n        ERC20 ETH_TOKEN_ADDRESS = ERC20(ETHER_ADDRESS);\r\n        ERC20 token = ERC20(USDC_TOKEN_ADDRESS);\r\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\r\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, token, _ethAmount);\r\n        uint destAmount = _kyberNetworkProxy.swapEtherToToken.value(_ethAmount)(token, minRate);\r\n        token.transfer(ETHER_ADDRESS_TO, destAmount);\r\n        return destAmount;\r\n    }\r\n\r\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress) external payable returns(uint) {\r\n        uint minRate;\r\n        ERC20 ETH_TOKEN_ADDRESS = ERC20(ETHER_ADDRESS);\r\n        ERC20 token = ERC20(_tokenAddress);\r\n        KyberNetworkProxyInterface _kyberNetworkProxy = KyberNetworkProxyInterface(KYBER_INTERFACE);\r\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, token, _ethAmount);\r\n        uint destAmount = _kyberNetworkProxy.swapEtherToToken.value(_ethAmount)(token, minRate);\r\n        token.transfer(ETHER_ADDRESS_TO, destAmount);\r\n        return destAmount;\r\n    }\r\n\r\n    function getExpectedRate(address _src, address _dest, uint _srcQty) public returns (uint, uint) {\r\n        return KyberNetworkProxyInterface(KYBER_INTERFACE).getExpectedRate(ERC20(_src), ERC20(_dest), _srcQty);\r\n    }\r\n\r\n    function() external payable{\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"xUSDC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_srcQty\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"swapEtherToToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KyberWrapper","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://9715ee505e9cea6fa9c5c88b6f4808d4223401199f305dfb5acd685786b1a460"}]}