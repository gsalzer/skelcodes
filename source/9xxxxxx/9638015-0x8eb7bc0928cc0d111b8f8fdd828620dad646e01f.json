{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/wallet_trading_limiter/interfaces/ITradingClasses.sol\n\n/**\n * @title Trading Classes Interface.\n */\ninterface ITradingClasses {\n    /**\n     * @dev Get the complete info of a class.\n     * @param _id The id of the class.\n     * @return complete info of a class.\n     */\n    function getInfo(uint256 _id) external view returns (uint256, uint256, uint256);\n\n    /**\n     * @dev Get the action-role of a class.\n     * @param _id The id of the class.\n     * @return The action-role of the class.\n     */\n    function getActionRole(uint256 _id) external view returns (uint256);\n\n    /**\n     * @dev Get the sell limit of a class.\n     * @param _id The id of the class.\n     * @return The sell limit of the class.\n     */\n    function getSellLimit(uint256 _id) external view returns (uint256);\n\n    /**\n     * @dev Get the buy limit of a class.\n     * @param _id The id of the class.\n     * @return The buy limit of the class.\n     */\n    function getBuyLimit(uint256 _id) external view returns (uint256);\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/wallet_trading_limiter/TradingClasses.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title Trading Classes.\n */\ncontract TradingClasses is ITradingClasses, Claimable {\n    string public constant VERSION = \"2.0.0\";\n\n    uint256[] public array;\n\n    struct Info {\n        uint256 actionRole;\n        uint256 buyLimit;\n        uint256 sellLimit;\n        uint256 index;\n    }\n\n    mapping(uint256 => Info) public table;\n\n    enum Action {None, Insert, Update, Remove}\n\n    event ActionCompleted(uint256 _id, uint256 _actionRole, uint256 _buyLimit, uint256 _sellLimit, Action _action);\n\n    /**\n     * @dev Get the complete info of a class.\n     * @param _id The id of the class.\n     * @return complete info of a class.\n     */\n    function getInfo(uint256 _id) external view returns (uint256, uint256, uint256) {\n        Info memory info = table[_id];\n        return (info.buyLimit, info.sellLimit, info.actionRole);\n    }\n\n\n    /**\n     * @dev Get the action-role of a class.\n     * @param _id The id of the class.\n     * @return The action-role of the class.\n     */\n    function getActionRole(uint256 _id) external view returns (uint256) {\n        return table[_id].actionRole;\n    }\n\n    /**\n     * @dev Get the sell limit of a class.\n     * @param _id The id of the class.\n     * @return The sell limit of the class.\n     */\n    function getSellLimit(uint256 _id) external view returns (uint256) {\n        return table[_id].sellLimit;\n    }\n\n    /**\n     * @dev Get the buy limit of a class.\n     * @param _id The id of the class.\n     * @return The buy limit of the class.\n     */\n    function getBuyLimit(uint256 _id) external view returns (uint256) {\n        return table[_id].buyLimit;\n    }\n\n    /**\n     * @dev Set the limit of a class.\n     * @param _id The id of the class.\n     * @param _actionRole The action-role of the class.\n     * @param _buyLimit The buy limit of the class.\n     * @param _sellLimit The sell limit of the class.\n     */\n    function set(uint256 _id, uint256 _actionRole, uint256 _buyLimit, uint256 _sellLimit) external onlyOwner {\n        Info storage info = table[_id];\n        Action action = getAction(info, _actionRole, _buyLimit, _sellLimit);\n        if (action == Action.Insert) {\n            info.index = array.length;\n            info.actionRole = _actionRole;\n            info.buyLimit = _buyLimit;\n            info.sellLimit = _sellLimit;\n            array.push(_id);\n        }\n        else if (action == Action.Update) {\n            info.actionRole = _actionRole;\n            info.buyLimit = _buyLimit;\n            info.sellLimit = _sellLimit;\n        }\n        else if (action == Action.Remove) {\n            // at this point we know that array.length > info.index >= 0\n            uint256 last = array[array.length - 1];\n            // will never underflow\n            table[last].index = info.index;\n            array[info.index] = last;\n            array.length -= 1;\n            // will never underflow\n            delete table[_id];\n        }\n        emit ActionCompleted(_id, _actionRole, _buyLimit, _sellLimit, action);\n    }\n\n\n\n    /**\n     * @dev Get an array of all the classes.\n     * @return An array of all the classes.\n     */\n    function getArray() external view returns (uint256[] memory) {\n        return array;\n    }\n\n    /**\n     * @dev Get the total number of classes.\n     * @return The total number of classes.\n     */\n    function getCount() external view returns (uint256) {\n        return array.length;\n    }\n\n    /**\n     * @dev Get the required action.\n     * @param _currentInfo The old limit.\n     * @param _newActionRole The new action-role.\n     * @param _newBuyLimit The new buy limit.\n     * @param _newSellLimit The new sell limit.\n     * @return The required action.\n     */\n    function getAction(Info _currentInfo, uint256 _newActionRole, uint256 _newBuyLimit, uint256 _newSellLimit) private pure returns (Action) {\n        bool currentExists = _currentInfo.buyLimit != 0 || _currentInfo.sellLimit != 0 || _currentInfo.actionRole != 0;\n        bool isRemoveRequired = _newActionRole == 0 && _newBuyLimit == 0 && _newSellLimit == 0;\n        bool isUpdateRequired = _currentInfo.actionRole != _newActionRole || _currentInfo.buyLimit != _newBuyLimit || _currentInfo.sellLimit != _newSellLimit;\n        if (!currentExists && !isRemoveRequired)\n            return Action.Insert;\n        if (currentExists && isRemoveRequired)\n            return Action.Remove;\n        if (isUpdateRequired)\n            return Action.Update;\n        return Action.None;\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBuyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getSellLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"array\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_actionRole\",\"type\":\"uint256\"},{\"name\":\"_buyLimit\",\"type\":\"uint256\"},{\"name\":\"_sellLimit\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getActionRole\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"table\",\"outputs\":[{\"name\":\"actionRole\",\"type\":\"uint256\"},{\"name\":\"buyLimit\",\"type\":\"uint256\"},{\"name\":\"sellLimit\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_actionRole\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buyLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sellLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_action\",\"type\":\"uint8\"}],\"name\":\"ActionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TradingClasses","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":""}]}