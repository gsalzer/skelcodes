{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.4;\r\n\r\ncontract Wallet{\r\n    \r\n    address private owner;\r\n    mapping(string => uint256) balances;\r\n    mapping(string=>string) check;\r\n    mapping(string=>string) collect;\r\n\r\n    constructor()public{\r\n        owner=msg.sender;\r\n    }\r\n    \r\n    modifier min{\r\n        require(msg.value>=10000000000000000);_;\r\n    }\r\n    \r\n    function perc(uint256 _val,uint256 _perc)private pure returns(uint256){\r\n        return (_val/100)*_perc;\r\n    }\r\n    \r\n    function createNewAccount(string memory _username,string memory _password)public{\r\n        if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) ){\r\n            revert();\r\n        }\r\n        collect[_username]=_password;\r\n        check[_username]=_username;\r\n        balances[_username]=0;\r\n    }\r\n    \r\n    function deposit(string memory _username)public payable min{\r\n       if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) ){\r\n            balances[_username]+=msg.value;\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n   function withdraw(string memory _username,string memory _password,address _to)public{\r\n         if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) && keccak256(abi.encodePacked((collect[_username]))) == keccak256(abi.encodePacked((_password))) ){\r\n            uint256 fee= perc(balances[_username],10);\r\n            address(uint160(_to)).transfer(balances[_username]-fee);\r\n            address(uint160(owner)).transfer(fee);\r\n            balances[_username]=0;\r\n        }else{\r\n            revert();\r\n        }\r\n   } \r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"createNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_password\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Wallet","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://d4badce918e100496f5dddac75a72adf524d97d9122501311ca21b1787f96002"}]}