{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n\r\n// Defined Owned Contract\r\ncontract Owned {\r\n    \r\n    //Setting Contract Creator As Owner via Constructor\r\n    constructor() public { owner = msg.sender; }\r\n    address owner;\r\n\r\n    //Changing Owner\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\n// Defined SafeMath to Prevent from Arithmetic Exceptions\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// Defined Generic ERC-20 Contract Functions\r\n\r\ninterface ERC20Interface {\r\n    function totalSupply() external constant returns (uint);\r\n    function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// Defined JOBTokenSelfDrop Contract\r\n\r\ncontract JOBTokenSelfDrop is Owned, SafeMath{\r\n\r\n    address tokenContractAddress;\r\n    address ethContributionAddress;\r\n    uint iPricePerToken;\r\n    \r\n    // Set Token Contract Address\r\n    function setContractAddress(address tokenAddress) public onlyOwner\r\n    {\r\n        tokenContractAddress = tokenAddress;\r\n    }\r\n    \r\n    // Get Token Contract Address\r\n    function getContractAddress() public view returns (address tokenAddress)\r\n    {\r\n        return tokenContractAddress;\r\n    }\r\n    \r\n    // Set Ethereum Address To Receive SelfDrop Fund\r\n    function setethContributionAddress(address accountAddress) public onlyOwner\r\n    {\r\n        ethContributionAddress = accountAddress;\r\n    }\r\n    \r\n    // Get Ethereum Address Used To Receive SelfDrop Fund\r\n    function getethContributionAddress() public view returns (address accountAddress)\r\n    {\r\n        return ethContributionAddress;\r\n    }\r\n    \r\n    // Set Token Price in Wei(ETH Unit)\r\n    function setPricePerToken(uint Price) public onlyOwner\r\n    {\r\n        iPricePerToken = Price;\r\n    }\r\n    \r\n    // Get Token Price in Wei(ETH Unit)\r\n    function getPricePerToken() public view returns (uint Price)\r\n    {\r\n        return iPricePerToken;\r\n    }\r\n    \r\n    // Withdraw Tokens from SelfDrop Contract\r\n    function withdrawTokens(uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenContractAddress).transfer(msg.sender, tokens);\r\n    }\r\n    \r\n    // CallBack/Fallback Function To Receive Ethereum And Send Tokens\r\n    function () public payable\r\n    {\r\n        if (msg.value > 0) \r\n        {\r\n            uint tokenCount;\r\n            \r\n            tokenCount = safeDiv(msg.value,iPricePerToken);\r\n            \r\n            if (msg.value <= 1 ether)\r\n            {\r\n                tokenCount = tokenCount + 0;\r\n            }\r\n            else if(msg.value <= 2 ether)\r\n            {\r\n                tokenCount = tokenCount + safeDiv(tokenCount,10);\r\n            }\r\n            else if(msg.value <= 5 ether)\r\n            {\r\n                tokenCount = tokenCount + safeDiv(tokenCount,20);\r\n            }\r\n            else if(msg.value <= 10 ether)\r\n            {\r\n                tokenCount = tokenCount + safeDiv(tokenCount,30);\r\n            }\r\n            else if(msg.value <= 50 ether)\r\n            {\r\n                tokenCount = tokenCount + safeDiv(tokenCount,40);\r\n            }\r\n            else\r\n            {\r\n                tokenCount = tokenCount + safeDiv(tokenCount,50);\r\n            }\r\n            \r\n            // Transfer Tokens To Sender Address\r\n            ERC20Interface(tokenContractAddress).transfer(msg.sender, tokenCount);\r\n            \r\n            // Transfer ETH To Contribution Address\r\n            ethContributionAddress.transfer(msg.value);\r\n        }\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getethContributionAddress\",\"outputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"setPricePerToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"setethContributionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPricePerToken\",\"outputs\":[{\"name\":\"Price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"JOBTokenSelfDrop","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c80e1f1c0c5c39bf76a3308cab2b2e6eb639153ff3eb93f6775a2486f2f2aa56"}]}