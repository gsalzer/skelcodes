{"status":"1","message":"OK","result":[{"SourceCode":"/**\nAuthor: BlockRocket.tech.\n\n*/\n\npragma solidity ^0.5.12;\n\n\nlibrary SafeMath {\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        \n        \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        \n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        \n\n        return c;\n    }\n\n    \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Context {\n    \n    \n    constructor () internal { }\n    \n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    \n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    \n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    \n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\ncontract WhitelistAdminRole is Context {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(_msgSender());\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(_msgSender()), \"WhitelistAdminRole: caller does not have the WhitelistAdmin role\");\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(_msgSender());\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\ncontract WhitelistedRole is Context, WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(_msgSender()), \"WhitelistedRole: caller does not have the Whitelisted role\");\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(_msgSender());\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\ncontract AccessWhitelist is WhitelistedRole {\n    constructor() public {\n        super.addWhitelisted(msg.sender);\n    }\n}\n\ncontract AccessControls {\n    AccessWhitelist public accessWhitelist;\n\n    constructor(AccessWhitelist _accessWhitelist) internal {\n        accessWhitelist = _accessWhitelist;\n    }\n\n    modifier onlyWhitelisted() {\n        require(accessWhitelist.isWhitelisted(msg.sender), \"Caller not whitelisted\");\n        _;\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(accessWhitelist.isWhitelistAdmin(msg.sender), \"Caller not whitelist admin\");\n        _;\n    }\n\n    function updateAccessWhitelist(AccessWhitelist _accessWhitelist) external onlyWhitelistAdmin {\n        accessWhitelist = _accessWhitelist;\n    }\n}\n\ncontract CommissionSplitter is AccessControls {\n    using SafeMath for uint256;\n\n    address public platform;\n    uint256 public platformSplit;\n\n    address public partner;\n    uint256 public partnerSplit;\n\n    constructor(AccessWhitelist _accessWhitelist, address _platform, uint256 _platformSplit, address _partner, uint256 _partnerSplit)\n        AccessControls(_accessWhitelist) public {\n        require(_platformSplit.add(_partnerSplit) == 100, \"Split percentages are not setup correctly\");\n        platform = _platform;\n        platformSplit = _platformSplit;\n        partner = _partner;\n        partnerSplit = _partnerSplit;\n    }\n\n    function () external payable {\n        uint256 singleUnitOfValue = msg.value.div(100);\n\n        uint256 amountToSendPlatform = singleUnitOfValue.mul(platformSplit);\n        (bool platformSuccess,) = platform.call.value(amountToSendPlatform)(\"\");\n        require(platformSuccess, \"Failed to send split to platform\");\n\n        uint256 amountToSendPartner = singleUnitOfValue.mul(partnerSplit);\n        (bool partnerSuccess,) = partner.call.value(amountToSendPartner)(\"\");\n        require(partnerSuccess, \"Failed to send split to partner\");\n    }\n\n    function updatePlatform(address _platform) external onlyWhitelisted {\n        platform = _platform;\n    }\n\n    function updatePartner(address _partner) external onlyWhitelisted {\n        partner = _partner;\n    }\n\n    function updateSplit(uint256 _platformSplit, uint256 _partnerSplit) external onlyWhitelisted {\n        require(_platformSplit.add(_partnerSplit) == 100, \"Split percentages are not setup correctly\");\n        platformSplit = _platformSplit;\n        partnerSplit = _partnerSplit;\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"_accessWhitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformSplit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_partnerSplit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessWhitelist\",\"outputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract AccessWhitelist\",\"name\":\"_accessWhitelist\",\"type\":\"address\"}],\"name\":\"updateAccessWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"updatePartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partnerSplit\",\"type\":\"uint256\"}],\"name\":\"updateSplit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CommissionSplitter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006f0f2f8ca9a0b69fd6a5beb6922f3b9c22c815d60000000000000000000000008845e1532db5f6702aa0a8c737a5dc61abbd78e7000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000818ff73a5d881c27a945be944973156c01141232000000000000000000000000000000000000000000000000000000000000000a","Library":"","LicenseType":"","SwarmSource":"bzzr://dc8fdc0f41d4ebb952746a224d6a320e9fff89ccb680e8d6aadad7d29e77e46c"}]}