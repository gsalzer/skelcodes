{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/interfaces/IERC721Converter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC721Converter /* is IERC721TokenReceiver */{\r\n    function draftAliceToken(uint256 _aliceTokenId, uint256 _bobTokenId) external;\r\n    function draftBobToken(uint256 _BobTokenId, uint256 _aliceTokenId) external;\r\n    function getAliceTokenID(uint256 _bobTokenId) external view returns(uint256);\r\n    function getBobTokenID(uint256 _aliceTokenId) external view returns(uint256);\r\n    function convertFromAliceToBob(uint256 _tokenId) external;\r\n    function convertFromBobToAlice(uint256 _tokenId) external;\r\n}\r\n\r\n// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/interfaces/IERC721TokenReceiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\ninterface IERC721TokenReceiver {\r\n    /// @notice Handle the receipt of an NFT\r\n    /// @dev The ERC721 smart contract calls this function on the recipient\r\n    ///  after a `transfer`. This function MAY throw to revert and reject the\r\n    ///  transfer. Return of other than the magic value MUST result in the\r\n    ///  transaction being reverted.\r\n    ///  Note: the contract address is always the message sender.\r\n    /// @param _operator The address which called `safeTransferFrom` function\r\n    /// @param _from The address which previously owned the token\r\n    /// @param _tokenId The NFT identifier which is being transferred\r\n    /// @param _data Additional data with no specified format\r\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    ///  unless throwing\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/erc/ERC721Holder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract ERC721Holder is IERC721TokenReceiver {\r\n    function onERC721Received(address, address, uint256, bytes memory) public returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/erc/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-165\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/erc/ERC173.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\ninterface IERC173 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\ncontract ERC173 is IERC173, ERC165  {\r\n    address private _owner;\r\n\r\n    constructor() public {\r\n        _registerInterface(0x7f5828d0);\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner(), \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner() {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        address previousOwner = owner();\r\n\t_owner = _newOwner;\r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/roles/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"role already has the account\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"role dosen't have the account\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/lib/github.com/doublejumptokyo/mchplus-contracts-0.0.1/contracts/roles/Operatable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract Operatable is ERC173 {\r\n    using Roles for Roles.Role;\r\n\r\n    event OperatorAdded(address indexed account);\r\n    event OperatorRemoved(address indexed account);\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n    Roles.Role private operators;\r\n\r\n    constructor() public {\r\n        operators.add(msg.sender);\r\n        _paused = false;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Must be operator\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOperator() {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function isOperator(address account) public view returns (bool) {\r\n        return operators.has(account);\r\n    }\r\n\r\n    function addOperator(address account) public onlyOperator() {\r\n        operators.add(account);\r\n        emit OperatorAdded(account);\r\n    }\r\n\r\n    function removeOperator(address account) public onlyOperator() {\r\n        operators.remove(account);\r\n        emit OperatorRemoved(account);\r\n    }\r\n\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function pause() public onlyOperator() whenNotPaused() {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOperator() whenPaused() {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function withdrawEther() public onlyOperator() {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n// File: localhost/contracts/ERC721ConverterWithMCHExtension.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ninterface IMCHExtension {\r\n    function isAlreadyMinted(uint256 _tokenId) external view returns (bool);\r\n    function mintExtensionAsset(address _owner, uint256 _tokenId) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n}\r\n\r\ninterface IERC721Mintable {\r\n    function exist(uint256 _tokenId) external view returns (bool);\r\n    function mint(address _owner, uint256 _tokenId) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n}\r\n\r\ncontract ERC721ConverterWithMCHExtension is IERC721Converter, ERC721Holder, Operatable {\r\n    IMCHExtension public Alice;\r\n    IERC721Mintable public Bob;\r\n\r\n    mapping (uint256 => uint256) private _idMapAliceToBob;\r\n    mapping (uint256 => uint256) private _idMapBobToAlice;\r\n\r\n    constructor() public {}\r\n\r\n    function updateAlice(address _newAlice) external onlyOperator() {\r\n        Alice = IMCHExtension(_newAlice);\r\n    }\r\n\r\n    function updateBob(address _newBob) external onlyOperator() {\r\n        Bob = IERC721Mintable(_newBob);\r\n    }\r\n\r\n    function draftAliceTokens(uint256[] memory _aliceTokenIds, uint256[] memory _bobTokenIds) public onlyOperator() {\r\n        require(_aliceTokenIds.length == _bobTokenIds.length);\r\n        for (uint256 i = 0; i < _aliceTokenIds.length; i++) {\r\n            draftAliceToken(_aliceTokenIds[i], _bobTokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function draftBobTokens(uint256[] memory _bobTokenIds, uint256[] memory _aliceTokenIds) public onlyOperator() {\r\n        require(_aliceTokenIds.length == _bobTokenIds.length);\r\n        for (uint256 i = 0; i < _aliceTokenIds.length; i++) {\r\n            draftBobToken(_bobTokenIds[i], _aliceTokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function draftAliceToken(uint256 _aliceTokenId, uint256 _bobTokenId) public onlyOperator() {\r\n        require(_idMapAliceToBob[_aliceTokenId] == 0, \"_aliceTokenId is already assignd\");\r\n        require(_idMapBobToAlice[_bobTokenId] == 0, \"_bobTokenId is already assignd\");\r\n\r\n        _idMapAliceToBob[_aliceTokenId] = _bobTokenId;\r\n        _idMapBobToAlice[_bobTokenId] = _aliceTokenId;\r\n    }\r\n\r\n    function draftBobToken(uint256 _bobTokenId, uint256 _aliceTokenId) public onlyOperator() {\r\n        require(_idMapBobToAlice[_bobTokenId] == 0, \"_bobTokenId is already assignd\");\r\n        require(_idMapAliceToBob[_aliceTokenId] == 0, \"_aliceTokenId is already assignd\");\r\n\r\n        _idMapBobToAlice[_bobTokenId] = _aliceTokenId;\r\n        _idMapAliceToBob[_aliceTokenId] = _bobTokenId;\r\n    }\r\n\r\n    function getBobTokenID(uint256 _aliceTokenId) public view returns(uint256) {\r\n        return _idMapAliceToBob[_aliceTokenId];\r\n    }\r\n\r\n    function getAliceTokenID(uint256 _bobTokenId) public view returns(uint256) {\r\n        return _idMapBobToAlice[_bobTokenId];\r\n    }\r\n\r\n    function convertFromAliceToBob(uint256 _tokenId) public whenNotPaused() {\r\n        Alice.safeTransferFrom(msg.sender, address(this), _tokenId);\r\n\r\n        uint256 convertTo = getBobTokenID(_tokenId);\r\n        if (Bob.exist(convertTo)) {\r\n            Bob.safeTransferFrom(address(this), msg.sender, convertTo);\r\n        } else {\r\n            Bob.mint(msg.sender, convertTo);\r\n        }\r\n    }\r\n\r\n    function convertFromBobToAlice(uint256 _tokenId) public whenNotPaused() {\r\n        Bob.safeTransferFrom(msg.sender, address(this), _tokenId);\r\n\r\n        uint256 convertTo = getAliceTokenID(_tokenId);\r\n        if (Alice.isAlreadyMinted(convertTo)) {\r\n            Alice.safeTransferFrom(address(this), msg.sender, convertTo);\r\n        } else {\r\n            Alice.mintExtensionAsset(msg.sender, convertTo);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"Alice\",\"outputs\":[{\"internalType\":\"contract IMCHExtension\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Bob\",\"outputs\":[{\"internalType\":\"contract IERC721Mintable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"convertFromAliceToBob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"convertFromBobToAlice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aliceTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bobTokenId\",\"type\":\"uint256\"}],\"name\":\"draftAliceToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_aliceTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bobTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"draftAliceTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bobTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aliceTokenId\",\"type\":\"uint256\"}],\"name\":\"draftBobToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_bobTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_aliceTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"draftBobTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bobTokenId\",\"type\":\"uint256\"}],\"name\":\"getAliceTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aliceTokenId\",\"type\":\"uint256\"}],\"name\":\"getBobTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAlice\",\"type\":\"address\"}],\"name\":\"updateAlice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBob\",\"type\":\"address\"}],\"name\":\"updateBob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC721ConverterWithMCHExtension","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://926bccbe332c07417064aa5f59875af8d4cf1a589500f169577a89e811d8125a"}]}