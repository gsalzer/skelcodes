{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface KyberInterface {\r\n    function getExpectedRate(\r\n        address src,\r\n        address dest,\r\n        uint srcQty\r\n    ) external view returns (uint, uint);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get Ethereum address\r\n     */\r\n    function getAddressETH() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n\r\ncontract KyberHelpers is Helpers {\r\n    /**\r\n     * @dev Kyber Proxy Address\r\n     */\r\n    function getAddressKyber() public pure returns (address) {\r\n        return 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n    }\r\n\r\n    function getTokenDecimals(address buy, address sell) internal view returns(uint _buyDec, uint _sellDec){\r\n        _buyDec = buy == getAddressETH() ? 18 : TokenInterface(buy).decimals();\r\n        _sellDec = sell == getAddressETH() ? 18 : TokenInterface(sell).decimals();\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getBuyUnitAmt(\r\n        address buyAddr,\r\n        address sellAddr,\r\n        uint sellAmt,\r\n        uint expectedRate,\r\n        uint slippage\r\n    ) internal view returns (uint unitAmt, uint _buyAmt) {\r\n        (uint _buyDec, uint _sellDec) = getTokenDecimals(buyAddr, sellAddr);\r\n        unitAmt = wmul(expectedRate, sub(WAD, slippage));\r\n        uint _sellAmt = convertTo18(_sellDec, sellAmt);\r\n        _buyAmt = wmul(_sellAmt, expectedRate);\r\n        _buyAmt = convert18ToDec(_buyDec, _buyAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Resolver is KyberHelpers {\r\n\r\n    function getBuyAmount(address buyAddr, address sellAddr, uint sellAmt, uint slippage) public view returns (uint buyAmt, uint unitAmt) {\r\n        (uint expectedRate, ) = KyberInterface(getAddressKyber()).getExpectedRate(sellAddr, buyAddr, sellAmt);\r\n        (unitAmt, buyAmt) = getBuyUnitAmt(buyAddr, sellAddr, sellAmt, expectedRate, slippage);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaKyberResolver is Resolver {\r\n    string public constant name = \"Kyber-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressKyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"getBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaKyberResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://2855845daae5b2560cfdf195643a627b262a8ead8109a7cdf7db7979d08e3caf"}]}