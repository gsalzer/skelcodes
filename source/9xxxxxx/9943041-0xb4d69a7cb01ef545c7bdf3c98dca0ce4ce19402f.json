{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*   \r\nDeveloper Telegram    : @MyEtherStoreTeam\r\n\r\n\r\nMyEtherStore......MyEtherStore.......MyEtherStore........MyEtherStore........MyEtherStore\r\n\r\n                                        \r\n                                        Profit Table\r\n\r\n               *Entry With*              *Doubles*                *Retuns Out*\r\n                 0.05 ETH                   2X                      0.10 ETH  \r\n                 0.10 ETH                   2X                      0.20 ETH \r\n                 0.25 ETH                   2X                      0.50 ETH\r\n                 0.50 ETH                   2X                      1.00 ETH \r\n                 1.00 ETH                   2X                      2.00 ETH \r\n                 1.50 ETH                   2X                      3.00 ETH \r\n                 2.00 ETH                   2X                      4.00 ETH \r\n                 2.50 ETH                   2X                      5.00 ETH \r\n                 3.00 ETH                   2X                      6.00 ETH \r\n                 3.50 ETH                   2X                      7.00 ETH \r\n                 4.00 ETH                   2X                      8.00 ETH\r\n                 4.50 ETH                   2X                      9.00 ETH\r\n                 5.00 ETH                   2X                      10.0 ETH\r\n                 \r\n                   \r\nMyEtherStore......MyEtherStore.......MyEtherStore........MyEtherStore........MyEtherStore\r\n*/\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n  \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n//owner change function\r\ncontract Owned {\r\n    address payable public owner;\r\n    address payable public newOwner;\r\n\r\n    event OwnershipTransferred(address payable indexed _from, address payable indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract MyEtherStore is Owned{\r\n\r\n\tusing SafeMath for uint;\r\n\r\n\t//address payable public owner;\r\n\r\n\tstruct User {\r\n\t\taddress payable addr;\r\n\t\tuint amount;\r\n\t}\r\n\r\n\tUser[] public users;\r\n\tuint public currentlyPaying = 0;\r\n\tuint public totalUsers = 0;\r\n\tuint public totalWei = 0;\r\n\tuint public totalPayout = 0;\r\n\tbool public active;\r\n\tuint256 public minAmount=0.05 ether;\r\n\tuint256 public maxAmount=5.00 ether;\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t\tactive = true;\r\n\t}\r\n\t\r\n\tfunction contractActivate() public{\r\n\t    require(msg.sender==owner);\r\n\t    require(active == false, \"Contract is already active\");\r\n\t    active=true;\r\n\t}\r\n\tfunction contractDeactivate() public{\r\n\t    require(msg.sender==owner);\r\n\t    require(active == true, \"Contract must be active\");\r\n\t    active=false;\r\n\t}\r\n\t\r\n\tfunction limitAmount(uint256 min , uint256 max) public{\r\n\t    require(msg.sender==owner, \"Cannot call function unless owner\");\r\n\t    minAmount=min;\r\n\t    maxAmount=max;\r\n\t}\r\n\r\n\tfunction close() public{\r\n\t\trequire(msg.sender == owner, \"Cannot call function unless owner\");\r\n\t\trequire(active == true, \"Contract must be active\");\r\n\t\trequire(address(this).balance > 0, \"This contract must have a balane above zero\");\r\n\t\towner.transfer(address(this).balance);\r\n\t\tactive = false;\r\n\t}\r\n\r\n\t\r\n\tfunction() external payable{\r\n\t    require(active==true ,\"Contract must be active\");\r\n\t    require(msg.value>=minAmount,\"Amount is less than minimum amount\");\r\n\t    require(msg.value<=maxAmount,\"Amount Exceeds the Maximum amount\");\r\n\t\tusers.push(User(msg.sender, msg.value));\r\n\t\ttotalUsers += 1;\r\n\t\ttotalWei += msg.value;\r\n\r\n\t\towner.transfer(msg.value.div(10));\r\n\t\twhile (address(this).balance > users[currentlyPaying].amount.mul(2)) {\r\n\t\t\tuint sendAmount = users[currentlyPaying].amount.mul(2);\r\n\t\t\tusers[currentlyPaying].addr.transfer(sendAmount);\r\n\t\t\ttotalPayout += sendAmount;\r\n\t\t\tcurrentlyPaying += 1;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction join() external payable{\r\n\t    require(active==true ,\"Contract must be active\");\r\n\t    require(msg.value>=minAmount,\"Amount is less than minimum amount\");\r\n\t    require(msg.value<=maxAmount,\"Amount Exceeds the Maximum amount\");\r\n\t\tusers.push(User(msg.sender, msg.value));\r\n\t\ttotalUsers += 1;\r\n\t\ttotalWei += msg.value;\r\n\r\n\t\towner.transfer(msg.value.div(10));\r\n\t\twhile (address(this).balance > users[currentlyPaying].amount.mul(2)) {\r\n\t\t\tuint sendAmount = users[currentlyPaying].amount.mul(2);\r\n\t\t\tusers[currentlyPaying].addr.transfer(sendAmount);\r\n\t\t\ttotalPayout += sendAmount;\r\n\t\t\tcurrentlyPaying += 1;\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contractActivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contractDeactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentlyPaying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"limitAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyEtherStore","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5d8a859bc3e0932a3da84135bb9f925ce63f9a236522a4369045e10940fa999e"}]}