{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Owned {\r\n    constructor() public { owner = msg.sender; }\r\n    address payable owner;\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only owner can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Distributor is Owned{\r\n\tusing SafeMath for uint256;\t\r\n    IERC20 public handledToken;    \r\n    struct Account {\r\n        address addy;\r\n        uint256 share;\r\n    }\r\n\tAccount[] accounts;\r\n    uint256 totalShares = 0;\r\n\tuint256 totalAccounts = 0;\r\n\tuint256 fullViewPercentage = 10000;\r\n\tconstructor(IERC20 _token) public {\r\n        handledToken = _token;\r\n    }\r\n\tfunction getGlobals() public view returns(\r\n\t\tuint256 _tokenBalance, \r\n\t\tuint256 _totalAccounts, \r\n\t\tuint256 _totalShares, \r\n\t\tuint256 _fullViewPercentage){\r\n\t\treturn (\r\n\t\t\thandledToken.balanceOf(address(this)), \r\n\t\t\ttotalAccounts, \r\n\t\t\ttotalShares, \r\n\t\t\tfullViewPercentage\r\n\t\t);\r\n\t}\r\n\tfunction getAccountInfo(uint256 index) public view returns(\r\n\t\tuint256 _tokenBalance,\r\n\t\tuint256 _tokenEntitled,\r\n\t\tuint256 _shares, \r\n\t\tuint256 _percentage,\r\n\t\taddress _address){\r\n\t\treturn (\r\n\t\t\thandledToken.balanceOf(accounts[index].addy),\r\n\t\t\t(accounts[index].share.mul(handledToken.balanceOf(address(this)))).div(totalShares),\r\n\t\t\taccounts[index].share, \r\n\t\t\t(accounts[index].share.mul(fullViewPercentage)).div(totalShares), \r\n\t\t\taccounts[index].addy\r\n\t\t);\r\n\t}\r\n    function writeAccount(address _address, uint256 _share) public onlyOwner {\r\n        require(_address != address(0), \"address can't be 0 address\");\r\n        require(_address != address(this), \"address can't be this contract address\");\r\n        require(_share > 0, \"share must be more than 0\");\r\n\t\tdeleteAccount(_address);\r\n        Account memory acc = Account(_address, _share);\r\n        accounts.push(acc);\r\n        totalShares += _share;\r\n\t\ttotalAccounts++;\r\n    }\r\n    function deleteAccount(address _address) public onlyOwner{\r\n        for(uint i = 0; i < accounts.length; i++)\r\n        {\r\n\t\t\tif(accounts[i].addy == _address){\r\n\t\t\t\ttotalShares -= accounts[i].share;\r\n\t\t\t\tif(i < accounts.length - 1){\r\n\t\t\t\t\taccounts[i] = accounts[accounts.length - 1];\r\n\t\t\t\t}\r\n\t\t\t\tdelete accounts[accounts.length - 1];\r\n\t\t\t\taccounts.length--;\r\n\t\t\t\ttotalAccounts--;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n    function distributeTokens() public payable { \r\n\t\tuint256 sharesProcessed = 0;\r\n\t\tuint256 currentAmount = handledToken.balanceOf(address(this));\r\n\t\t\r\n        for(uint i = 0; i < accounts.length; i++)\r\n        {\r\n\t\t\tif(accounts[i].share > 0 && accounts[i].addy != address(0)){\r\n\t\t\t\tuint256 amount = (currentAmount.mul(accounts[i].share)).div(totalShares.sub(sharesProcessed));\r\n\t\t\t\tcurrentAmount -= amount;\r\n\t\t\t\tsharesProcessed += accounts[i].share;\r\n\t\t\t\thandledToken.transfer(accounts[i].addy, amount);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\tfunction withdrawERC20(IERC20 _token) public payable onlyOwner{\r\n\t\trequire(_token.balanceOf(address(this)) > 0);\r\n\t\t_token.transfer(owner, _token.balanceOf(address(this)));\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"deleteAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenEntitled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGlobals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAccounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fullViewPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"handledToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"writeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20Distributor","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002b591e99afe9f32eaa6214f7b7629768c40eeb39","Library":"","LicenseType":"GNU GPLv2","SwarmSource":"bzzr://1858ae183ba6b3d4d912a975193198484fc372a497f9e98f678daab45d950bd5"}]}