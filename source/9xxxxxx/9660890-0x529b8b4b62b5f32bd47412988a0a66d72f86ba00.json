{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ncontract PotAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip() external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ncontract JugAbstract {\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ncontract CatAbstract {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vow.sol\r\ncontract VowAbstract {\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ncontract FlipAbstract {\r\n    function file(bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flop.sol\r\ncontract FlopAbstract {\r\n    function file(bytes32, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/mom.sol\r\ncontract SaiMomAbstract {\r\n    function setCap(uint256) public;\r\n    function setFee(uint256) public;\r\n}\r\n\r\ncontract SpellAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    string  constant public description = \"03/12/2020 MakerDAO Executive Spell\";\r\n\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.0.3/contracts.json\r\n    //\r\n    // Contract addresses pertaining to the SCD ecosystem can be found at:\r\n    //     https://github.com/makerdao/sai#dai-v1-current-deployments\r\n    address constant public MCD_PAUSE = 0xbE286431454714F511008713973d3B053A2d38f3;\r\n    address constant public MCD_JUG = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    address constant public MCD_POT = 0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7;\r\n    address constant public MCD_VOW = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\r\n    address constant public MCD_VAT = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant public MCD_CAT = 0x78F2c2AF65126834c51822F56Be0d7469D7A523E;\r\n    address constant public MCD_FLIP_ETH_A = 0xd8a04F5412223F513DC55F839574430f5EC15531;\r\n    address constant public MCD_FLIP_BAT_A = 0xaA745404d55f88C108A28c86abE7b5A1E7817c07;\r\n    address constant public MCD_FLOP = 0x4D95A049d5B0b7d32058cd3F2163015747522e99;\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    uint256 constant public FOUR_PCT_RATE = 1000000001243680656318820312;\r\n\r\n    uint256 constant public WAD = 10**18;\r\n    uint256 constant public RAD = 10**45;\r\n    uint256 constant public MILLION = 10**6;\r\n    uint256 constant public HOUR = 3600; // in seconds\r\n\r\n    function execute() external {\r\n\r\n        // Drip Pot and Jugs prior to all modifications.\r\n        PotAbstract(MCD_POT).drip();\r\n        JugAbstract(MCD_JUG).drip(\"ETH-A\");\r\n        JugAbstract(MCD_JUG).drip(\"BAT-A\");\r\n\r\n\r\n        // MCD Modifications\r\n\r\n\r\n        // Set the Dai Savings Rate\r\n        // DSR_RATE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        // Existing Rate: 8%\r\n        // New Rate: 4%\r\n        uint256 DSR_RATE = FOUR_PCT_RATE;\r\n        PotAbstract(MCD_POT).file(\"dsr\", DSR_RATE);\r\n\r\n\r\n        // Set the ETH-A debt ceiling\r\n        // ETH_LINE is the number of Dai that can be created with WETH token collateral\r\n        //  ex. a 100 million Dai ETH ceiling will be ETH_LINE = 100000000\r\n        //\r\n        // Existing Line: 150m\r\n        // New Line: 100m\r\n        uint256 ETH_LINE = 100 * MILLION;\r\n        VatAbstract(MCD_VAT).file(\"ETH-A\", \"line\", ETH_LINE * RAD);\r\n\r\n\r\n        // Set the ETH-A stability fee\r\n        // ETH_FEE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        // Existing Rate: 8%\r\n        // New Rate: 4%\r\n        uint256 ETH_FEE = FOUR_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"ETH-A\", \"duty\", ETH_FEE);\r\n\r\n\r\n        // Set the BAT-A stability fee\r\n        // BAT_FEE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 8% annual rate will be 1000000002440418608258400030\r\n        //\r\n        // Existing Rate: 8%\r\n        // New Rate: 4%\r\n        uint256 BAT_FEE = FOUR_PCT_RATE;\r\n        JugAbstract(MCD_JUG).file(\"BAT-A\", \"duty\", BAT_FEE);\r\n\r\n\r\n        // Set the Sai debt ceiling for the migration contract\r\n        // SAI_LINE is the number of Dai that can be created with Sai token collateral\r\n        //  ex. a 10 million Dai ETH ceiling will be SAI_LINE = 10000000\r\n        //\r\n        // Existing Line: 30m\r\n        // New Line: 10m\r\n        uint256 SAI_LINE = 10 * MILLION;\r\n        VatAbstract(MCD_VAT).file(\"SAI\", \"line\", SAI_LINE * RAD);\r\n\r\n        // Set the global debt ceiling\r\n        //\r\n        // GLOBAL_AMOUNT is the total number of Dai that can be created by all collateral types\r\n        //  as a whole number\r\n        //  ex. a 100 million Dai global ceiling will be GLOBAL_AMOUNT = 100000000\r\n        //\r\n        // Existing Ceiling: 183m\r\n        // New Ceiling: 100m\r\n        uint256 GLOBAL_AMOUNT = 113 * MILLION;\r\n        VatAbstract(MCD_VAT).file(\"Line\", GLOBAL_AMOUNT * RAD);\r\n\r\n\r\n        // Set the ETH-A Flip ttl\r\n        //\r\n        // ETH_FLIP_TTL is the bid lifetime\r\n        //\r\n        // Existing ttl: 10 minutes\r\n        // New ttl: 6 hours\r\n        uint256 ETH_FLIP_TTL = 6 hours;\r\n        FlipAbstract(MCD_FLIP_ETH_A).file(bytes32(\"ttl\"), ETH_FLIP_TTL);\r\n\r\n\r\n        // Set the BAT-A Flip ttl\r\n        //\r\n        // BAT_FLIP_TTL is the bid lifetime\r\n        //\r\n        // Existing ttl: 10 minutes\r\n        // New ttl: 6 hours\r\n        uint256 BAT_FLIP_TTL = 6 hours;\r\n        FlipAbstract(MCD_FLIP_BAT_A).file(bytes32(\"ttl\"), BAT_FLIP_TTL);\r\n\r\n\r\n        // Set the ETH-A Flip tau\r\n        //\r\n        // ETH_FLIP_TAU is the bid lifetime\r\n        //\r\n        // Existing tau: 3 days\r\n        // New tau: 6 hours\r\n        uint256 ETH_FLIP_TAU = 6 hours;\r\n        FlipAbstract(MCD_FLIP_ETH_A).file(bytes32(\"tau\"), ETH_FLIP_TAU);\r\n\r\n\r\n        // Set the BAT-A Flip tau\r\n        //\r\n        // BAT_FLIP_TAU is the bid lifetime\r\n        //\r\n        // Existing tau: 3 days\r\n        // New tau: 6 hours\r\n        uint256 BAT_FLIP_TAU = 6 hours;\r\n        FlipAbstract(MCD_FLIP_BAT_A).file(bytes32(\"tau\"), BAT_FLIP_TAU);\r\n\r\n\r\n        // Set the Flop ttl\r\n        //\r\n        // FLOP_TTL is the bid lifetime\r\n        //\r\n        // Existing ttl: 10 minutes\r\n        // New ttl: 6 hours\r\n        uint256 FLOP_TTL = 6 hours;\r\n        FlopAbstract(MCD_FLOP).file(bytes32(\"ttl\"), FLOP_TTL);\r\n\r\n\r\n        // Set the Lot size to 500 ETH\r\n        //\r\n        // Existing lump: 50 ETH\r\n        // New lump: 500 ETH\r\n        uint256 LUMP = 500 * WAD;\r\n        CatAbstract(MCD_CAT).file(\"ETH-A\", \"lump\", LUMP);\r\n\r\n\r\n        // Increase the wait delay for flop auctions\r\n        //\r\n        // WAIT_DELAY is the number of seconds that pass before debt is auctioned for MKR tokens\r\n        //\r\n        // Existing wait: 2 days\r\n        // New wait: 6.5 days\r\n        uint256 WAIT_DELAY = 156 * HOUR;\r\n        VowAbstract(MCD_VOW).file(\"wait\", WAIT_DELAY);\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n\r\n    DSPauseAbstract  public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address constant public SAI_MOM = 0xF2C5369cFFb8Ea6284452b0326e326DbFdCb867C;\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n\r\n    uint256 constant internal MILLION = 10**6;\r\n    uint256 constant internal WAD = 10**18;\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    function description() public view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // NOTE: 'eta' check should mimic the old behavior of 'done', thus\r\n        // preventing these SCD changes from being executed again.\r\n\r\n\r\n        // Set the Sai stability fee\r\n        // SAI_FEE is a value determined by the rate accumulator calculation (see above)\r\n        //  ex. an 10% annual rate will be 1000000003022265980097387650\r\n        //\r\n        // Existing Rate: 9.5%\r\n        // New Rate: 7.5%\r\n        uint256 SAI_FEE = 1000000002293273137447730714;\r\n        SaiMomAbstract(SAI_MOM).setFee(SAI_FEE);\r\n\r\n\r\n        // Set the Sai debt ceiling\r\n        //\r\n        // SAI_AMOUNT is the total number of Sai that can be created in SCD\r\n        //  as a whole number\r\n        //  ex. a 15 million Sai global ceiling will be GLOBAL_AMOUNT = 15000000\r\n        //\r\n        // <Add link to weekly poll authorizing change>\r\n        //\r\n        // Existing ceiling: 30m\r\n        // New ceiling: 25m\r\n        uint256 SAI_AMOUNT = 25 * MILLION;\r\n        SaiMomAbstract(SAI_MOM).setCap(SAI_AMOUNT * WAD);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI_MOM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://40c6f25bc23456aa90f33a07a71976d3cb856c31016e90daec2b10af05e5af8d"}]}