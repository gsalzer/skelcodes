{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract usingLZDConsts {\r\n    uint constant TOKEN_DECIMALS = 18;\r\n    uint8 constant TOKEN_DECIMALS_UINT8 = 18;\r\n    uint constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\r\n\r\n    uint constant TEAM_TOKENS =   3000000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant BOUNTY_TOKENS = 4000000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant PREICO_TOKENS = 1500000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant MINIMAL_PURCHASE = 1 ether;\r\n\r\n    address constant TEAM_ADDRESS = 0xB166fBA5968373f7aeB8EF5C0b6F9E6cfD4f3524;\r\n    address constant BOUNTY_ADDRESS = 0xa1598AA2F58964F5091b331824ACc6C383Ce004A;\r\n    address constant PREICO_ADDRESS = 0x86F64069e497982A50E672e73DDf63d410748Eb4;\r\n    address constant COLD_WALLET = 0xc91c74966CA09B689ebB51Fe39553B16De03B911;\r\n\r\n    string constant TOKEN_NAME = \"LZD Blockchain\";\r\n    bytes32 constant TOKEN_SYMBOL = \"LZD\";\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    \r\n    uint256 c = a / b;\r\n    \r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n   \r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        \r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n        \r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    \r\n    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0x0, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    \r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract LZDToken is usingLZDConsts, MintableToken, BurnableToken {\r\n   \r\n    bool public paused = true;\r\n    \r\n    mapping(address => bool) excluded;\r\n\r\n    function name() constant public returns (string _name) {\r\n        return TOKEN_NAME;\r\n    }\r\n\r\n    function symbol() constant public returns (bytes32 _symbol) {\r\n        return TOKEN_SYMBOL;\r\n    }\r\n\r\n    function decimals() constant public returns (uint8 _decimals) {\r\n        return TOKEN_DECIMALS_UINT8;\r\n    }\r\n\r\n    function crowdsaleFinished() onlyOwner {\r\n        paused = false;\r\n        finishMinting();\r\n    }\r\n\r\n    function addExcluded(address _toExclude) onlyOwner {\r\n        excluded[_toExclude] = true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n        require(!paused || excluded[_from]);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool) {\r\n        require(!paused || excluded[msg.sender]);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    \r\n    function burnFrom(address _from, uint256 _value) returns (bool) {\r\n        require(_value > 0);\r\n        var allowance = allowed[_from][msg.sender];\r\n        balances[_from] = balances[_from].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        allowed[_from][msg.sender] = allowance.sub(_value);\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\ncontract LZDRateProviderI {\r\n    \r\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint);\r\n\r\n    \r\n    function getRateScale() public constant returns (uint);\r\n\r\n    \r\n    function getBaseRate() public constant returns (uint);\r\n}\r\n\r\ncontract LZDRateProvider is usingLZDConsts, LZDRateProviderI, Ownable {\r\n    \r\n    uint constant RATE_SCALE = 10000;\r\n    uint constant STEP_30 = 500000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant STEP_20 = 1000000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant STEP_10 = 1200000000 * TOKEN_DECIMAL_MULTIPLIER;\r\n    uint constant RATE_30 = 20000 * RATE_SCALE;\r\n    uint constant RATE_20 = 18000 * RATE_SCALE;\r\n    uint constant RATE_10 = 16000 * RATE_SCALE;\r\n    uint constant BASE_RATE = 15000 * RATE_SCALE;\r\n\r\n    struct ExclusiveRate {\r\n       \r\n        uint32 workUntil;\r\n        \r\n        uint rate;\r\n        \r\n        uint16 bonusPercent1000;\r\n       \r\n        bool exists;\r\n    }\r\n\r\n    mapping(address => ExclusiveRate) exclusiveRate;\r\n\r\n    function getRateScale() public constant returns (uint) {\r\n        return RATE_SCALE;\r\n    }\r\n\r\n    function getBaseRate() public constant returns (uint) {\r\n        return BASE_RATE;\r\n    }\r\n\r\n    function getRate(address buyer, uint totalSold, uint amountWei) public constant returns (uint) {\r\n        uint rate;\r\n        \r\n        if (totalSold < STEP_30) {\r\n            rate = RATE_30;\r\n        }\r\n        else if (totalSold < STEP_20) {\r\n            rate = RATE_20;\r\n        }\r\n        else if (totalSold < STEP_10) {\r\n            rate = RATE_10;\r\n        }\r\n        else {\r\n            rate = BASE_RATE;\r\n        }\r\n\r\n        \r\n        if (amountWei >= 1000 ether) {\r\n            rate += rate * 13 / 100;\r\n        }\r\n        else if (amountWei >= 500 ether) {\r\n            rate += rate * 10 / 100;\r\n        }\r\n        else if (amountWei >= 100 ether) {\r\n            rate += rate * 7 / 100;\r\n        }\r\n        else if (amountWei >= 50 ether) {\r\n            rate += rate * 5 / 100;\r\n        }\r\n        else if (amountWei >= 30 ether) {\r\n            rate += rate * 4 / 100;\r\n        }\r\n        else if (amountWei >= 10 ether) {\r\n            rate += rate * 25 / 1000;\r\n        }\r\n\r\n        ExclusiveRate memory eRate = exclusiveRate[buyer];\r\n        if (eRate.exists && eRate.workUntil >= now) {\r\n            if (eRate.rate != 0) {\r\n                rate = eRate.rate;\r\n            }\r\n            rate += rate * eRate.bonusPercent1000 / 1000;\r\n        }\r\n        return rate;\r\n    }\r\n\r\n    function setExclusiveRate(address _investor, uint _rate, uint16 _bonusPercent1000, uint32 _workUntil) onlyOwner {\r\n        exclusiveRate[_investor] = ExclusiveRate(_workUntil, _rate, _bonusPercent1000, true);\r\n    }\r\n\r\n    function removeExclusiveRate(address _investor) onlyOwner {\r\n        delete exclusiveRate[_investor];\r\n    }\r\n}\r\n\r\ncontract Crowdsale {\r\n    using SafeMath for uint;\r\n\r\n   \r\n    MintableToken public token;\r\n\r\n    \r\n    uint32 internal startTime;\r\n    uint32 internal endTime;\r\n\r\n    \r\n    address public wallet;\r\n\r\n    \r\n    uint public weiRaised;\r\n\r\n    \r\n    uint public soldTokens;\r\n\r\n    \r\n    uint internal hardCap;\r\n\r\n   \r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\r\n\r\n    function Crowdsale(uint _startTime, uint _endTime, uint _hardCap, address _wallet) {\r\n        require(_endTime >= _startTime);\r\n        require(_wallet != 0x0);\r\n        require(_hardCap > 0);\r\n\r\n        token = createTokenContract();\r\n        startTime = uint32(_startTime);\r\n        endTime = uint32(_endTime);\r\n        hardCap = _hardCap;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    \r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MintableToken();\r\n    }\r\n\r\n    \r\n    function getRate(uint amount) internal constant returns (uint);\r\n\r\n    function getBaseRate() internal constant returns (uint);\r\n\r\n    \r\n    function getRateScale() internal constant returns (uint) {\r\n        return 1;\r\n    }\r\n\r\n    \r\n    function() payable {\r\n        buyTokens(msg.sender, msg.value);\r\n    }\r\n\r\n    \r\n    function buyTokens(address beneficiary, uint amountWei) internal {\r\n        require(beneficiary != 0x0);\r\n\r\n       \r\n        uint totalSupply = token.totalSupply();\r\n\r\n       \r\n        uint actualRate = getRate(amountWei);\r\n        uint rateScale = getRateScale();\r\n\r\n        require(validPurchase(amountWei, actualRate, totalSupply));\r\n\r\n       \r\n        uint tokens = amountWei.mul(actualRate).div(rateScale);\r\n\r\n       \r\n        weiRaised = weiRaised.add(amountWei);\r\n        soldTokens = soldTokens.add(tokens);\r\n\r\n        token.mint(beneficiary, tokens);\r\n        TokenPurchase(msg.sender, beneficiary, amountWei, tokens);\r\n\r\n        forwardFunds(amountWei);\r\n    }\r\n\r\n    \r\n    function forwardFunds(uint amountWei) internal {\r\n        wallet.transfer(amountWei);\r\n    }\r\n\r\n    \r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool nonZeroPurchase = _amountWei != 0;\r\n        bool hardCapNotReached = _totalSupply <= hardCap;\r\n\r\n        return withinPeriod && nonZeroPurchase && hardCapNotReached;\r\n    }\r\n\r\n   \r\n    function hasEnded() public constant returns (bool) {\r\n        return now > endTime || token.totalSupply() > hardCap;\r\n    }\r\n\r\n    \r\n    function hasStarted() public constant returns (bool) {\r\n        return now >= startTime;\r\n    }\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    function FinalizableCrowdsale(uint _startTime, uint _endTime, uint _hardCap, address _wallet)\r\n            Crowdsale(_startTime, _endTime, _hardCap, _wallet) {\r\n    }\r\n\r\n   \r\n    function finalize() onlyOwner notFinalized {\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n   \r\n    function finalization() internal {\r\n    }\r\n\r\n    modifier notFinalized() {\r\n        require(!isFinalized);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract LZDCrowdsale is usingLZDConsts, FinalizableCrowdsale {\r\n    LZDRateProviderI public rateProvider;\r\n\r\n    function LZDCrowdsale(\r\n            uint _startTime,\r\n            uint _endTime,\r\n            uint _hardCapTokens\r\n    )\r\n            FinalizableCrowdsale(_startTime, _endTime, _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER, COLD_WALLET) {\r\n\r\n        token.mint(TEAM_ADDRESS, TEAM_TOKENS);\r\n        token.mint(BOUNTY_ADDRESS, BOUNTY_TOKENS);\r\n        token.mint(PREICO_ADDRESS, PREICO_TOKENS);\r\n\r\n        LZDToken(token).addExcluded(TEAM_ADDRESS);\r\n        LZDToken(token).addExcluded(BOUNTY_ADDRESS);\r\n        LZDToken(token).addExcluded(PREICO_ADDRESS);\r\n\r\n        LZDRateProvider provider = new LZDRateProvider();\r\n        provider.transferOwnership(owner);\r\n        rateProvider = provider;\r\n    }\r\n\r\n    \r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new LZDToken();\r\n    }\r\n\r\n    \r\n    function getRate(uint _value) internal constant returns (uint) {\r\n        return rateProvider.getRate(msg.sender, soldTokens, _value);\r\n    }\r\n\r\n    function getBaseRate() internal constant returns (uint) {\r\n        return rateProvider.getRate(msg.sender, soldTokens, MINIMAL_PURCHASE);\r\n    }\r\n\r\n    \r\n    function getRateScale() internal constant returns (uint) {\r\n        return rateProvider.getRateScale();\r\n    }\r\n\r\n    \r\n    function setRateProvider(address _rateProviderAddress) onlyOwner {\r\n        require(_rateProviderAddress != 0);\r\n        rateProvider = LZDRateProviderI(_rateProviderAddress);\r\n    }\r\n\r\n    \r\n    function setEndTime(uint _endTime) onlyOwner notFinalized {\r\n        require(_endTime > startTime);\r\n        endTime = uint32(_endTime);\r\n    }\r\n\r\n    function setHardCap(uint _hardCapTokens) onlyOwner notFinalized {\r\n        require(_hardCapTokens * TOKEN_DECIMAL_MULTIPLIER > hardCap);\r\n        hardCap = _hardCapTokens * TOKEN_DECIMAL_MULTIPLIER;\r\n    }\r\n\r\n    function setStartTime(uint _startTime) onlyOwner notFinalized {\r\n        require(_startTime < endTime);\r\n        startTime = uint32(_startTime);\r\n    }\r\n\r\n    function addExcluded(address _address) onlyOwner notFinalized {\r\n        LZDToken(token).addExcluded(_address);\r\n    }\r\n\r\n    function validPurchase(uint _amountWei, uint _actualRate, uint _totalSupply) internal constant returns (bool) {\r\n        if (_amountWei < MINIMAL_PURCHASE) {\r\n            return false;\r\n        }\r\n        return super.validPurchase(_amountWei, _actualRate, _totalSupply);\r\n    }\r\n\r\n    function finalization() internal {\r\n        super.finalization();\r\n        token.finishMinting();\r\n        LZDToken(token).crowdsaleFinished();\r\n        token.transferOwnership(owner);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addExcluded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateProviderAddress\",\"type\":\"address\"}],\"name\":\"setRateProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardCapTokens\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_hardCapTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"LZDCrowdsale","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005e361100000000000000000000000000000000000000000000000000000000005f80f980000000000000000000000000000000000000000004d8c55aefb8c05b5c000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://55190a80561db4bc77b13da5382a47d2dd4a5ae27f27d1f520e116087d279e0f"}]}