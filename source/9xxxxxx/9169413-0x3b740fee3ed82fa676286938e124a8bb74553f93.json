{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/iface/ITokenPriceProvider.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n/// @title ITokenPriceProvider\r\n/// @author Brecht Devos  - <brcht@loopring.org>\r\ncontract ITokenPriceProvider\r\n{\r\n    /// @dev Converts USD to LRC\r\n    /// @param usd The amount of USD (10**18 == 1 USD)\r\n    /// @return The amount of LRC\r\n    function usd2lrc(uint usd)\r\n        external\r\n        view\r\n        returns (uint);\r\n}\r\n\r\n// File: contracts/thirdparty/chainlink/AggregatorInterfaceV1.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface AggregatorInterfaceV1 {\r\n  function currentAnswer() external view returns (int256);\r\n  function updatedTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 id) external view returns (int256);\r\n  function getUpdatedTimestamp(uint256 id) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed answerId, uint256 timestamp);\r\n  event NewRound(uint256 indexed number, address indexed startedBy);\r\n}\r\n\r\n// File: contracts/thirdparty/chainlink/AggregatorInterfaceV2.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\ninterface AggregatorInterfaceV2 {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function decodeFloat(\r\n        uint f\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint value)\r\n    {\r\n        uint numBitsMantissa = 23;\r\n        uint exponent = f >> numBitsMantissa;\r\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\r\n        value = mantissa * (10 ** exponent);\r\n    }\r\n}\r\n\r\n// File: contracts/impl/price-providers/ChainlinkTokenPriceProvider.sol\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract ChainlinkTokenPriceProvider is ITokenPriceProvider\r\n{\r\n    using MathUint    for uint;\r\n\r\n    AggregatorInterfaceV1 public Eth2Usd;\r\n    AggregatorInterfaceV2 public Lrc2Eth;\r\n\r\n    constructor(\r\n        AggregatorInterfaceV1 _Eth2Usd,\r\n        AggregatorInterfaceV2 _Lrc2Eth\r\n        )\r\n        public\r\n    {\r\n        Eth2Usd = _Eth2Usd;\r\n        Lrc2Eth = _Lrc2Eth;\r\n    }\r\n\r\n    function usd2lrc(uint usd)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint EthUsd = uint(Eth2Usd.currentAnswer());\r\n        uint LrcEth = uint(Lrc2Eth.latestAnswer());\r\n        // https://docs.chain.link/docs/using-chainlink-reference-contracts#section-live-reference-data-contracts-ethereum-mainnet\r\n        // EthUsd is scaled by 100000000\r\n        // LrcEth is scaled by 10**18\r\n        return usd.mul(100000000 * 1 ether) / LrcEth.mul(EthUsd);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AggregatorInterfaceV1\",\"name\":\"_Eth2Usd\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorInterfaceV2\",\"name\":\"_Lrc2Eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"Eth2Usd\",\"outputs\":[{\"internalType\":\"contract AggregatorInterfaceV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Lrc2Eth\",\"outputs\":[{\"internalType\":\"contract AggregatorInterfaceV2\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"usd2lrc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkTokenPriceProvider","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000079febf6b9f76853edbcbc913e6aae8232cfb9de90000000000000000000000008770afe90c52fd117f29192866de705f63e59407","Library":"","LicenseType":"None","SwarmSource":"bzzr://da874f35dacaf607309ea4f8423627b98d4b173490330f340c2ab1e990148ba5"}]}