{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.26;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IKyberNetworkProxy {\r\n    function maxGasPrice() external view returns(uint);\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n    function enabled() external view returns(bool);\r\n    function info(bytes32 id) external view returns(uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes  hint) external payable returns(uint);\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns (uint);\r\n}\r\n\r\ncontract IUniswapExchange {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n  function totalSupply() external view returns (uint);\r\n  function approve(address guy, uint wad) external returns (bool);\r\n  function transfer(address dst, uint wad) external returns (bool);\r\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\r\n  function () external payable;\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function createExchange(address token) external returns (address exchange);\r\n    function getExchange(address token) external view returns (address exchange);\r\n    function getToken(address exchange) external view returns (address token);\r\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\r\n    function initializeFactory(address template) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract IERC20Token {\r\n    function name() public view returns (string memory) {this;}\r\n    function symbol() public view returns (string memory) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string  venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string  symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string  symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string  symbol ) external view returns ( address );\r\n}\r\n\r\n\r\ninterface IContractRegistry {\r\n    function addressOf(bytes32 _contractName) external view returns (address);\r\n}\r\n\r\ninterface IBancorNetwork {\r\n    function getReturnByPath(address[]  _path, uint256 _amount) external view returns (uint256, uint256);\r\n    function convert2(address[] _path, uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    ) public payable returns (uint256);\r\n\r\n    function claimAndConvert2(\r\n        address[] _path,\r\n        uint256 _amount,\r\n        uint256 _minReturn,\r\n        address _affiliateAccount,\r\n        uint256 _affiliateFee\r\n    ) public returns (uint256);\r\n}\r\ninterface IBancorNetworkPathFinder {\r\n    function generatePath(address _sourceToken, address _targetToken) external view returns (address[]);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal view returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal view returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal view returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal view returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BancorPrices{\r\nOrFeedInterface orfeed = OrFeedInterface(0x8316b082621cfedab95bf4a44a1d4b64a6ffc336);\r\n   address owner;\r\n   bytes  PERM_HINT = \"PERM\";\r\n   mapping (uint256=>uint256) results;\r\n    mapping(uint256=>uint8[3]) public orders;\r\n    \r\n    \r\n    \r\n    address uniswapFactoryAddress = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\r\n    IUniswapFactory uniswapFactory = IUniswapFactory(uniswapFactoryAddress);\r\n    \r\n      modifier onlyOwner() {\r\n            if (msg.sender != owner) {\r\n                throw;\r\n            }\r\n             _;\r\n        }\r\n         address kyberProxyAddress = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\r\n     IKyberNetworkProxy kyberProxy = IKyberNetworkProxy(kyberProxyAddress);\r\n      constructor() public payable {\r\n            owner = msg.sender; \r\n            orders[0] = [3,3,3];\r\n        orders[1] = [1,1,1];\r\n        orders[2] = [2,2,2];\r\n        orders[3] = [1,2,1];\r\n        orders[4] = [1,3,1];\r\n        orders[5] = [2,1,2];\r\n        orders[6] = [1,2,3];\r\n        orders[7] = [1,2,2];\r\n        orders[8] = [1,3,2];\r\n        orders[9] = [2,2,1];\r\n        orders[10] = [1,1,2];\r\n        orders[11] = [1,3,3];\r\n        orders[12] = [2,1,1];\r\n        orders[13] = [2,1,3];\r\n        orders[14] = [3,2,1];\r\n        \r\n        \r\n        \r\n            \r\n          \r\n        }\r\n        \r\n   function kill() onlyOwner{\r\n       selfdestruct(owner);\r\n   }\r\n    \r\n    function() payable{\r\n        \r\n    }\r\n    \r\n    function getTokensBack(address tokenAddress){\r\n        ERC20 token = ERC20(tokenAddress);\r\n        token.transfer(owner, token.balanceOf(this));\r\n    }\r\n    \r\n    \r\n    function getBestExchangeOrder(string[] stringSymbs, uint256 amount) constant returns (uint256){\r\n        uint256[][15] orders;\r\n        orders[0] = [1,1,1];\r\n        orders[1] = [1,1,2];\r\n        orders[2] = [1,1,3];\r\n        orders[3] = [1,2,2];\r\n        orders[4] = [2,2,2];\r\n        orders[5] = [3,3,3];\r\n        orders[6] = [1,3,2];\r\n        orders[7] = [1,3,1];\r\n        orders[8] = [2,3,1];\r\n        orders[9] = [2,2,1];\r\n        orders[10] = [2,2,3];\r\n        orders[11] = [1,2,3];\r\n        orders[12] = [2,1,2];\r\n        orders[13] = [1,2,1];\r\n        orders[14] = [3,2,1];\r\n        /*\r\n        uint256 bestRate =0;\r\n        uint256 whichOrder = 100;\r\n        \r\n       // uint[] memory greatestOrder = new uint[](3);\r\n       // uint256[3] memory greatestOrder;\r\n        uint256[3] memory greatestOrder= [uint(1), uint(1), uint(1)];\r\n       // greatestOrder = [1,1,1];\r\n       // greatestOrder =[1,1,1];\r\n        for(uint i=0; i<15;i++){\r\n           \r\n            uint256 result = arbCalc(orders[i], stringSymbs, amount);\r\n            if(result >= bestRate){ \r\n                bestRate = result;\r\n                whichOrder = i;\r\n            }\r\n        }\r\n        \r\n        return whichOrder;\r\n        */\r\n    }\r\n    \r\n    \r\n    \r\n    function getBestExchangeOrder2(string[] stringSymbs, uint256 amount) constant returns (uint256){\r\n        uint256[][15] orders;\r\n        orders[0] = [1,1,1];\r\n        orders[1] = [1,1,2];\r\n        orders[2] = [1,1,3];\r\n        orders[3] = [1,2,2];\r\n        orders[4] = [2,2,2];\r\n        orders[5] = [3,3,3];\r\n        orders[6] = [1,3,2];\r\n        orders[7] = [1,3,1];\r\n        orders[8] = [2,3,1];\r\n        orders[9] = [2,2,1];\r\n        orders[10] = [2,2,3];\r\n        orders[11] = [1,2,3];\r\n        orders[12] = [2,1,2];\r\n        orders[13] = [1,2,1];\r\n        orders[14] = [3,2,1];\r\n        \r\n        uint256 bestRate =0;\r\n        uint256 whichOrder = 100;\r\n        \r\n       // uint[] memory greatestOrder = new uint[](3);\r\n       // uint256[3] memory greatestOrder;\r\n        uint256[3] memory greatestOrder= [uint(1), uint(1), uint(1)];\r\n       // greatestOrder = [1,1,1];\r\n       // greatestOrder =[1,1,1];\r\n       /*\r\n        for(uint i=0; i<15;i++){\r\n           \r\n            uint256 result = arbCalc(orders[i], stringSymbs, amount);\r\n            if(result >= bestRate){ \r\n                bestRate = result;\r\n                whichOrder = i;\r\n            }\r\n        }\r\n        \r\n        return whichOrder;\r\n        */\r\n    }\r\n    \r\n    \r\n    \r\n    /*\r\n    function getBestExchangeOrderProxy1(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\r\n        // order= [uint(1),uint(1),uint(1)];\r\n         uint whichOne =100;\r\n       \r\n       uint highestOne = 0;\r\n        \r\n        \r\n               results[0] = arbCalc([3,3,3], stringSymbs, amount);\r\n       results[1] = arbCalc([3,2,2], stringSymbs, amount);\r\n        results[2] = arbCalc([2,2,2], stringSymbs, amount);\r\n        \r\n     \r\n        \r\n      \r\n        for(uint i = 0; i<3;i++){\r\n            if(i==0){\r\n                whichOne = 0; // change to zero later\r\n                highestOne = results[i];\r\n            }\r\n           \r\n            \r\n            if(results[i] >= highestOne){\r\n                whichOne = i;\r\n                highestOne = results[i];\r\n            }\r\n            \r\n        }\r\n        return (whichOne, highestOne);\r\n    }\r\n\r\n\r\n    function getBestExchangeOrderProxy2(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\r\n        // order= [uint(1),uint(1),uint(1)];\r\n         uint whichOne =100;\r\n       \r\n       uint highestOne = 0;\r\n        \r\n        \r\n               results[0] = arbCalc([1,2,1], stringSymbs, amount);\r\n       results[1] =  arbCalc([1,3,1], stringSymbs, amount);\r\n        results[2] = arbCalc([2,1,2], stringSymbs, amount);\r\n        \r\n     \r\n      \r\n        for(uint i = 0; i<3;i++){\r\n            if(i==0){\r\n                whichOne = 0; // change to zero later\r\n                highestOne = results[i];\r\n            }\r\n           \r\n            \r\n            if(results[i] >= highestOne){\r\n                whichOne = i;\r\n                highestOne = results[i];\r\n            }\r\n            \r\n        }\r\n        return (whichOne, highestOne);\r\n    }\r\n\r\n\r\n    function getBestExchangeOrderProxy3(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\r\n        // order= [uint(1),uint(1),uint(1)];\r\n         uint whichOne =100;\r\n       \r\n       uint highestOne = 0;\r\n        \r\n        \r\n               results[0] = arbCalc([1,2,3], stringSymbs, amount);\r\n       results[1] =  arbCalc([1,2,2], stringSymbs, amount);\r\n        results[2] = arbCalc([1,3,2], stringSymbs, amount);\r\n        \r\n      // results[3] = \r\n        \r\n        \r\n        \r\n       \r\n       // results[4] =\r\n       // results[5] = \r\n        \r\n    \r\n        \r\n      \r\n        for(uint i = 0; i<3;i++){\r\n            if(i==0){\r\n                whichOne = 0; // change to zero later\r\n                highestOne = results[i];\r\n            }\r\n           \r\n            \r\n            if(results[i] >= highestOne){\r\n                whichOne = i;\r\n                highestOne = results[i];\r\n            }\r\n            \r\n        }\r\n       return (whichOne, highestOne);\r\n    }\r\n\r\n\r\n      function getBestExchangeOrderProxy4(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\r\n        // order= [uint(1),uint(1),uint(1)];\r\n         uint whichOne =100;\r\n       \r\n       uint highestOne = 0;\r\n        \r\n        \r\n               results[0] = arbCalc([2,2,1], stringSymbs, amount);\r\n       results[1] =  arbCalc([1,1,2], stringSymbs, amount);\r\n        results[2] = arbCalc([1,3,3], stringSymbs, amount);\r\n        \r\n    \r\n        \r\n      \r\n        for(uint i = 0; i<3;i++){\r\n            if(i==0){\r\n                whichOne = 0; // change to zero later\r\n                highestOne = results[i];\r\n            }\r\n           \r\n            \r\n            if(results[i] >= highestOne){\r\n                whichOne = i;\r\n                highestOne = results[i];\r\n            }\r\n            \r\n        }\r\n       return (whichOne, highestOne);\r\n    }\r\n\r\n     function getBestExchangeOrderProxy5(string[] stringSymbs, uint256 amount) constant returns (uint, uint){\r\n        // order= [uint(1),uint(1),uint(1)];\r\n         uint whichOne =100;\r\n       \r\n       uint highestOne = 0;\r\n        \r\n        \r\n               results[0] =arbCalc([2,1,1], stringSymbs, amount);\r\n       results[1] =  arbCalc([2,1,3], stringSymbs, amount);\r\n        results[2] = arbCalc([3,2,1], stringSymbs, amount);\r\n        \r\n     \r\n      \r\n        for(uint i = 0; i<3;i++){\r\n            if(i==0){\r\n                whichOne = 0; // change to zero later\r\n                highestOne = results[i];\r\n            }\r\n           \r\n            \r\n            if(results[i] >= highestOne){\r\n                whichOne = i;\r\n                highestOne = results[i];\r\n            }\r\n            \r\n        }\r\n        return (whichOne, highestOne);\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n     function getBestExchangeOrderProxyAS(string[] stringSymbs, uint256 amount) returns (uint){\r\n        //uint256[3] memory order;\r\n      \r\n       // order= [uint(1),uint(1),uint(1)];\r\n         uint whichOne =100;\r\n       \r\n       uint highestOne = 0;\r\n        \r\n        \r\n               results[0] = arbCalc([3,3,3], stringSymbs, amount);\r\n       results[1] = arbCalc([3,2,2], stringSymbs, amount);\r\n        results[2] = arbCalc([2,2,2], stringSymbs, amount);\r\n        \r\n       results[3] = arbCalc([1,2,1], stringSymbs, amount);\r\n        \r\n        \r\n        \r\n       \r\n        results[4] = arbCalc([1,3,1], stringSymbs, amount);\r\n        results[5] = arbCalc([2,1,2], stringSymbs, amount);\r\n        \r\n        \r\n        results[6] = arbCalc([1,2,3], stringSymbs, amount);\r\n        results[7] = arbCalc([1,2,2], stringSymbs, amount);\r\n        results[8] = arbCalc([1,3,2], stringSymbs, amount);\r\n        \r\n        results[9] = arbCalc([2,2,1], stringSymbs, amount);\r\n        results[10] = arbCalc([1,1,2], stringSymbs, amount);\r\n        results[11] = arbCalc([1,3,3], stringSymbs, amount);\r\n        \r\n        \r\n        \r\n        results[12] = arbCalc([2,1,1], stringSymbs, amount);\r\n        results[13] = arbCalc([2,1,3], stringSymbs, amount);\r\n        results[14] = arbCalc([3,2,1], stringSymbs, amount);\r\n        \r\n        \r\n      \r\n        for(uint i = 0; i<14;i++){\r\n            if(i==0){\r\n                whichOne = 0; // change to zero later\r\n                highestOne = results[i];\r\n            }\r\n           \r\n            \r\n            if(results[i] >= highestOne){\r\n                whichOne = i;\r\n                highestOne = results[i];\r\n            }\r\n            \r\n        }\r\n        return whichOne;\r\n      \r\n    }\r\n    \r\n    \r\n    \r\n    */\r\n    \r\n    function getPriceFromOracle(string fromParam, string toParam, string venue, uint256 amount) public constant returns (uint256){\r\n\r\n        address tokenFirst = orfeed.getTokenAddress(fromParam);\r\n        address tokenSecond = orfeed.getTokenAddress(toParam);\r\n        \r\n        uint256 answer = bancorPrice(tokenSecond, tokenFirst, amount);\r\n        return answer;\r\n      \r\n    }\r\n    function bancorPrice(address token1, address token2, uint256 amount) constant returns (uint256){\r\n        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\r\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n        \r\n        //\r\n  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\r\n    IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\r\n   //\r\n       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\r\n         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n       // address token1ToBancor = token1;\r\n        //address token2ToBancor = token2;\r\n        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\r\n        \r\n        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            // the EtherToken addresss for BancorNetwork\r\n            token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n        }\r\n        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n        }\r\n        \r\n        address[] memory addressPath;\r\n      \r\n        \r\n            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\r\n/*\r\n        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\r\n        \r\n        for(uint256 i = 0; i < addressPath.length; i++) {\r\n            tokenPath[i] = IERC20Token(addressPath[i]);\r\n        }\r\n       */\r\n       (uint256 price, ) = bancorNetwork.getReturnByPath(addressPath, amount);\r\n       return price;\r\n    }\r\n   \r\n      function bancorConvert(address token1, address token2, uint256 amount)  returns (uint256){\r\n        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\r\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n        \r\n        //\r\n  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\r\n    IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\r\n   //\r\n       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\r\n         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n       // address token1ToBancor = token1;\r\n        //address token2ToBancor = token2;\r\n        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\r\n        \r\n        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            // the EtherToken addresss for BancorNetwork\r\n            token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n        }\r\n        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n        }\r\n        \r\n        address[] memory addressPath;\r\n      \r\n        \r\n            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\r\n/*\r\n        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\r\n        \r\n        for(uint256 i = 0; i < addressPath.length; i++) {\r\n            tokenPath[i] = IERC20Token(addressPath[i]);\r\n        }\r\n       */\r\n       \r\n       uint256 price = bancorNetwork.convert2.value(amount)(addressPath, amount,1 ,0x0,0);\r\n       return price;\r\n    }\r\n    \r\n    \r\n    function arbIt(uint[] eOrder, address[] tOrder, uint256 amount ) onlyOwner{\r\n        uint256 final1 = eOrder.length -1;\r\n        uint lastSell = amount;\r\n        for(uint i =0; i<eOrder.length; i++){\r\n            uint256 next = i+1;\r\n            if(i < final1){\r\n               if(eOrder[i] ==1){\r\n                   //kyber buy\r\n                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[next]);\r\n               }\r\n               else if(eOrder[i] ==2){\r\n                   lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[next]);\r\n               }\r\n               else{\r\n                 lastSell = bancorConvert2(tOrder[next], tOrder[i], lastSell);\r\n               }\r\n            }\r\n            else{\r\n                 //sell\r\n               if(eOrder[i] ==1){\r\n                   //kyber buy\r\n                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[0]);\r\n               }\r\n               else if(eOrder[i] ==2){\r\n                  lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[0]);\r\n               }\r\n               else{\r\n                 lastSell = bancorConvert2(tOrder[0], tOrder[i], lastSell);\r\n               }\r\n               \r\n            }\r\n        }\r\n    }\r\n    function arbIt2(uint[] eOrder, string[] memory tOrder1, uint256 amount, bool back) onlyOwner{\r\n        uint256 final1 = eOrder.length -1;\r\n        uint lastSell = amount;\r\n        address [] tOrder;\r\n       \r\n        \r\n        for(uint j=0; j<tOrder1.length; j++){\r\n            tOrder[j] =orfeed.getTokenAddress(tOrder1[j]);\r\n        }\r\n        for(uint i =0; i<eOrder.length; i++){\r\n            uint256 next = i+1;\r\n            if(i < final1){\r\n               if(eOrder[i] ==1){\r\n                   //kyber buy\r\n                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[next]);\r\n               }\r\n               else if(eOrder[i] ==2){\r\n                   lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[next]);\r\n               }\r\n               else{\r\n                 lastSell = bancorConvert2(tOrder[next], tOrder[i], lastSell);\r\n               }\r\n            }\r\n            else{\r\n                 //sell\r\n                 \r\n                 if(back == true){\r\n               if(eOrder[i] ==1){\r\n                   //kyber buy\r\n                   lastSell = swapTokenOnKyber(tOrder[i], lastSell, tOrder[0]);\r\n               }\r\n               else if(eOrder[i] ==2){\r\n                  lastSell = swapTokenOnUniswap(tOrder[i], lastSell, tOrder[0]);\r\n               }\r\n               else{\r\n                 lastSell = bancorConvert2(tOrder[0], tOrder[i], lastSell);\r\n               }\r\n            }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function arbCalc(uint8[3] eOrder, string[] tOrder, uint256 amount, bool back ) constant returns (uint256){\r\n        uint256 final1 = eOrder.length -1;\r\n        uint lastSell = amount;\r\n        for(uint i =0; i<eOrder.length; i++){\r\n            uint256 next = i+1;\r\n            if(i < final1){\r\n               if(eOrder[i] ==1){\r\n                   //kyber buy\r\n                   lastSell = getKyberCalc(tOrder[i], tOrder[next], lastSell);\r\n               }\r\n               else if(eOrder[i] ==2){\r\n                   \r\n                   \r\n                    lastSell = getUniswapCalc(tOrder[i], tOrder[next], lastSell);\r\n                    //lastSell = orfeed.getExchangeRate(tOrder[i], tOrder[next], \"BUY-UNISWAP-EXCHANGE\", lastSell);\r\n               }\r\n               else{\r\n                    lastSell = orfeed.getExchangeRate(tOrder[i], tOrder[next], \"BANCOR\", lastSell);\r\n               }\r\n            }\r\n            else{\r\n                 //sell\r\n                if(back ==true){\r\n               if(eOrder[i] ==1){\r\n                   //kyber buy\r\n                    lastSell = getKyberCalc(tOrder[i], tOrder[0], lastSell);\r\n                   //lastSell = swapTokenOnKyberCalc(tOrder[i], lastSell, tOrder[0]);\r\n               }\r\n               else if(eOrder[i] ==2){\r\n                       lastSell = getUniswapCalc(tOrder[i], tOrder[0], lastSell);\r\n                 // lastSell = swapTokenOnUniswapCalc(tOrder[i], lastSell, tOrder[0]);\r\n               }\r\n               else{\r\n                   lastSell = orfeed.getExchangeRate(tOrder[i], tOrder[0], \"BANCOR\", lastSell);\r\n                 //lastSell = bancorConvert2Calc(tOrder[0], tOrder[i], lastSell);\r\n               }\r\n            }\r\n            }\r\n        }\r\n        \r\n        return lastSell;\r\n    }\r\n    \r\n    \r\n     function getKyberCalc(string string1, string string2, uint256 amount) constant returns (uint256){\r\n        \r\n        address sellToken = orfeed.getTokenAddress(string1);\r\n        address buyToken = orfeed.getTokenAddress(string2);\r\n        \r\n        ERC20 sellToken1 = ERC20(sellToken);\r\n        ERC20 buyToken1 = ERC20(buyToken);\r\n        \r\n        uint sellDecim = sellToken1.decimals();\r\n         uint buyDecim = buyToken1.decimals();\r\n        \r\n       // uint base = 1^sellDecim;\r\n       // uint adding;\r\n         (uint256 price, ) = kyberProxy.getExpectedRate(sellToken1, buyToken1, amount);\r\n          \r\n           \r\n            uint initResp = (((price*1000000) / (10**18))*(amount))/1000000;\r\n      uint256 diff;\r\n      if(sellDecim>buyDecim){\r\n         diff = sellDecim - buyDecim;\r\n          initResp = initResp / (10**diff);\r\n          return initResp;\r\n      }\r\n      \r\n      else if(sellDecim <buyDecim){\r\n           diff = buyDecim - sellDecim;\r\n          initResp = initResp * (10**diff);\r\n          return initResp;\r\n      }\r\n      else{\r\n          return initResp;\r\n      }\r\n        \r\n        \r\n     }\r\n    \r\n    function getUniswapCalc(string string1, string string2, uint256 amount) constant returns (uint256){\r\n        \r\n        address sellToken = orfeed.getTokenAddress(string1);\r\n        address buyToken = orfeed.getTokenAddress(string2);\r\n        \r\n        address exchangeAddressSell = uniswapFactory.getExchange(address(sellToken));\r\n        address exchangeAddressBuy = uniswapFactory.getExchange(address(buyToken));\r\n        \r\n        IUniswapExchange usi1 = IUniswapExchange(exchangeAddressSell);\r\n        IUniswapExchange usi2 = IUniswapExchange(exchangeAddressBuy);\r\n        \r\n        uint256 ethBack = usi1.getTokenToEthInputPrice(amount);\r\n        uint256 resultingTokens = usi2.getEthToTokenInputPrice(ethBack);\r\n        \r\n        return resultingTokens;\r\n    }\r\n   \r\n         function bancorConvert2(address token1, address token2, uint256 amount)  returns (uint256){\r\n        // updated with the newest address of the BancorNetwork contract deployed under the circumstances of old versions of `getReturnByPath`\r\n        IContractRegistry contractRegistry = IContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n        \r\n        //\r\n  // IBancorNetwork bancorNetwork = IBancorNetwork(contractRegistry.addressOf(0x42616e636f724e6574776f726b));\r\n    IBancorNetwork bancorNetwork = IBancorNetwork(0x3Ab6564d5c214bc416EE8421E05219960504eeAD);\r\n   //\r\n       // IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(contractRegistry.addressOf(0x42616e636f724e6574776f726b5061746846696e646572));\r\n         IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n       // address token1ToBancor = token1;\r\n        //address token2ToBancor = token2;\r\n        // in case of Ether (or Weth), we need to provide the address of the EtherToken to the BancorNetwork\r\n        \r\n        if (token1 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token1 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            // the EtherToken addresss for BancorNetwork\r\n            token1 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n        }\r\n        if (token2 == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || token2 == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2){\r\n            token2 = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n        }\r\n        \r\n        address[] memory addressPath;\r\n      \r\n        \r\n            addressPath = bancorNetworkPathFinder.generatePath(token2, token1);\r\n/*\r\n        IERC20Token[] memory tokenPath = new IERC20Token[](addressPath.length);\r\n        \r\n        for(uint256 i = 0; i < addressPath.length; i++) {\r\n            tokenPath[i] = IERC20Token(addressPath[i]);\r\n        }\r\n       */\r\n       ERC20 token = ERC20(token1);\r\n       ERC20 tokenT = ERC20(token2);\r\n       \r\n       uint startAmount =token.balanceOf(this);\r\n       token.approve(0x3Ab6564d5c214bc416EE8421E05219960504eeAD, 8000000000000000000000000000000);\r\n       tokenT.approve(0x3Ab6564d5c214bc416EE8421E05219960504eeAD, 8000000000000000000000000000000);\r\n       //\"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\", \"0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359\",  10000000000\r\n       uint256 price = bancorNetwork.claimAndConvert2(addressPath, amount,1 ,0x0,0);\r\n        return token.balanceOf(this) - startAmount;\r\n    }\r\n    \r\n     function swapTokenOnKyber(address sellToken1, uint sellTokenAmount, address  buyToken1)  returns (uint) {\r\n    // Approve tokens so network can take them during the swap\r\n    \r\n     ERC20 sellToken = ERC20(sellToken1);\r\n    ERC20 buyToken = ERC20(buyToken1);\r\n    uint startAmount =buyToken.balanceOf(this);\r\n      //uint256 minRate = 0;\r\n      //(, minRate) = kyberProxy.getExpectedRate(buyToken, sellToken, sellTokenAmount);\r\n      sellToken.approve(address(kyberProxy), sellTokenAmount);\r\n\r\n      uint buyTokenAmount = kyberProxy.tradeWithHint(sellToken, sellTokenAmount, buyToken, address(this), 8000000000000000000000000000000000000000000000000000000000000000, 0, 0x0000000000000000000000000000000000000004, PERM_HINT);\r\n      return buyToken.balanceOf(this) - startAmount;\r\n  }\r\n  \r\n   \r\n   function swapTokenOnUniswap(address sellToken1, uint sellTokenAmount, address buyToken1)  returns (uint) {\r\n    ERC20 sellToken = ERC20(sellToken1);\r\n    ERC20 buyToken = ERC20(buyToken1);\r\n   uint startAmount =buyToken.balanceOf(this);\r\n    uint256 minTokensBought = 1;\r\n    uint256 minEtherBought = 1;\r\n    address exchangeAddress = uniswapFactory.getExchange(address(sellToken));\r\n    IUniswapExchange exchange = IUniswapExchange(exchangeAddress);\r\n    sellToken.approve(address(exchange), sellTokenAmount);\r\n    uint256 buyTokenAmount = exchange.tokenToTokenSwapInput(sellTokenAmount, minTokensBought, minEtherBought, block.timestamp, address(buyToken));\r\n    return buyToken.balanceOf(this) - startAmount;\r\n  }\r\n    \r\n \r\n    \r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"string1\",\"type\":\"string\"},{\"name\":\"string2\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getUniswapCalc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stringSymbs\",\"type\":\"string[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBestExchangeOrder2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"string1\",\"type\":\"string\"},{\"name\":\"string2\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getKyberCalc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bancorConvert2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bancorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eOrder\",\"type\":\"uint256[]\"},{\"name\":\"tOrder1\",\"type\":\"string[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"back\",\"type\":\"bool\"}],\"name\":\"arbIt2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken1\",\"type\":\"address\"},{\"name\":\"sellTokenAmount\",\"type\":\"uint256\"},{\"name\":\"buyToken1\",\"type\":\"address\"}],\"name\":\"swapTokenOnKyber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eOrder\",\"type\":\"uint256[]\"},{\"name\":\"tOrder\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"arbIt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fromParam\",\"type\":\"string\"},{\"name\":\"toParam\",\"type\":\"string\"},{\"name\":\"venue\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellToken1\",\"type\":\"address\"},{\"name\":\"sellTokenAmount\",\"type\":\"uint256\"},{\"name\":\"buyToken1\",\"type\":\"address\"}],\"name\":\"swapTokenOnUniswap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eOrder\",\"type\":\"uint8[3]\"},{\"name\":\"tOrder\",\"type\":\"string[]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"back\",\"type\":\"bool\"}],\"name\":\"arbCalc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stringSymbs\",\"type\":\"string[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBestExchangeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token1\",\"type\":\"address\"},{\"name\":\"token2\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bancorConvert\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BancorPrices","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e823571187606afe7264a3e5218b38b4a226f5996ac3520c973b2c189a2a56e9"}]}