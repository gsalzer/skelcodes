{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ERC721/el/IBurnableEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IBurnableEtherLegendsToken {        \r\n    function burn(uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/ERC721/el/IMintableEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IMintableEtherLegendsToken {        \r\n    function mintTokenOfType(address to, uint256 idOfTokenType) external;\r\n}\r\n\r\n// File: contracts/ERC721/el/ITokenDefinitionManager.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface ITokenDefinitionManager {        \r\n    function getNumberOfTokenDefinitions() external view returns (uint256);\r\n    function hasTokenDefinition(uint256 tokenTypeId) external view returns (bool);\r\n    function getTokenTypeNameAtIndex(uint256 index) external view returns (string memory);\r\n    function getTokenTypeName(uint256 tokenTypeId) external view returns (string memory);\r\n    function getTokenTypeId(string calldata name) external view returns (uint256);\r\n    function getCap(uint256 tokenTypeId) external view returns (uint256);\r\n    function getAbbreviation(uint256 tokenTypeId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * \r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either `approve` or `setApproveForAll`.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either `approve` or `setApproveForAll`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: contracts/ERC721/el/IEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract IEtherLegendsToken is IERC721Full, IMintableEtherLegendsToken, IBurnableEtherLegendsToken, ITokenDefinitionManager {\r\n    function totalSupplyOfType(uint256 tokenTypeId) external view returns (uint256);\r\n    function getTypeIdOfToken(uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721/el/IBoosterPack.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IBoosterPack {        \r\n    function getNumberOfCards() external view returns (uint256);\r\n    function getCardTypeIdAtIndex(uint256 index) external view returns (uint256);\r\n    function getPricePerCard() external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721/el/BoosterPack.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BoosterPack is IBoosterPack, Ownable, ReentrancyGuard {\r\n\r\n  // Address where funds are collected\r\n  address public payee;\r\n\r\n  // Address where elementeum funds are payed to users from\r\n  address public funder;\r\n\r\n  // Address that is permitted to call destroyContract\r\n  address public permittedDestroyer;\r\n\r\n  // ETH price per card\r\n  uint256 public pricePerCard = 50 finney;\r\n\r\n  uint256[] public cardTypeIds;\r\n  uint16 private totalWeight;\r\n  mapping (uint16 => uint256) private rollToCard;\r\n  mapping (uint256 => uint256) private cardToElementeumReturned;\r\n  bytes32 private lastHash;\r\n\r\n  IEtherLegendsToken public etherLegendsToken;\r\n  IERC20 public elementeumToken;\r\n\r\n  constructor(address payeeWallet, address funderWallet) public \r\n    Ownable() \r\n    ReentrancyGuard() {\r\n    payee = payeeWallet;\r\n    funder = funderWallet;\r\n    lastHash = keccak256(abi.encodePacked(block.number));\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    purchaseCards(msg.sender);\r\n  }\r\n\r\n  function destroyContract() external {\r\n    require(msg.sender == permittedDestroyer, \"caller is not the permitted destroyer - should be address of BoosterPackFactory\");\r\n    address payable payableOwner = address(uint160(owner()));\r\n    selfdestruct(payableOwner);\r\n  }\r\n\r\n  function setEtherLegendsToken(address addr) external {\r\n    _requireOnlyOwner();\r\n    etherLegendsToken = IEtherLegendsToken(addr);\r\n  }  \r\n\r\n  function setElementeumERC20ContractAddress(address addr) external {\r\n    _requireOnlyOwner();\r\n    elementeumToken = IERC20(addr);\r\n  }    \r\n\r\n  function setPricePerCard(uint256 price) public {\r\n    _requireOnlyOwner();\r\n    pricePerCard = price;\r\n  }\r\n\r\n  function permitDestruction(address addr) external {\r\n    _requireOnlyOwner();\r\n    require(addr != address(0));\r\n    permittedDestroyer = addr;\r\n  }\r\n\r\n  function setDropWeights(uint256[] calldata tokenTypeIds, uint8[] calldata weights, uint256[] calldata elementeumsReturned) external {\r\n    _requireOnlyOwner();\r\n    require(\r\n      tokenTypeIds.length > 0 && \r\n      tokenTypeIds.length == weights.length && \r\n      tokenTypeIds.length == elementeumsReturned.length, \r\n      \"array lengths are not the same\");\r\n\r\n    for(uint256 i = 0; i < tokenTypeIds.length; i++) {\r\n      setDropWeight(tokenTypeIds[i], weights[i], elementeumsReturned[i]);\r\n    }    \r\n  }\r\n\r\n  function setDropWeight(uint256 tokenTypeId, uint8 weight, uint256 elementeumReturned) public {\r\n    _requireOnlyOwner();    \r\n    require(etherLegendsToken.hasTokenDefinition(tokenTypeId), \"card is not defined\");\r\n    totalWeight += weight;\r\n    for(uint16 i = totalWeight - weight; i < totalWeight; i++) {\r\n      rollToCard[i] = tokenTypeId;\r\n    }\r\n    cardToElementeumReturned[tokenTypeId] = elementeumReturned;\r\n    cardTypeIds.push(tokenTypeId);\r\n  }\r\n\r\n  function getNumberOfCards() external view returns (uint256) {\r\n    return cardTypeIds.length;\r\n  }\r\n\r\n  function getCardTypeIdAtIndex(uint256 index) external view returns (uint256) {\r\n    require(index < cardTypeIds.length, \"Index Out Of Range\");\r\n    return cardTypeIds[index];\r\n  }\r\n\r\n  function getPricePerCard() external view returns (uint256) {\r\n    return pricePerCard;\r\n  }\r\n\r\n  function getCardTypeIds() external view returns (uint256[] memory) {\r\n    return cardTypeIds;\r\n  }  \r\n\r\n  function purchaseCards(address beneficiary) public payable nonReentrant {\r\n    require(msg.sender == tx.origin, \"caller must be transaction origin (only human)\");    \r\n    require(msg.value >= pricePerCard, \"purchase price not met\");\r\n    require(pricePerCard > 0, \"price per card must be greater than 0\");\r\n    require(totalWeight > 0, \"total weight must be greater than 0\");\r\n\r\n    uint256 numberOfCards = _min(msg.value / pricePerCard, (gasleft() - 100000) / 200000);\r\n    uint256 totalElementeumToReturn = 0;\r\n    bytes32 tempLastHash =  lastHash;    \r\n    for(uint256 i = 0; i < numberOfCards; i++) {\r\n        tempLastHash = keccak256(abi.encodePacked(block.number, tempLastHash, msg.sender, gasleft()));\r\n        uint16 randNumber = uint16(uint256(tempLastHash) % (totalWeight));        \r\n        uint256 cardType = rollToCard[randNumber];\r\n\r\n        etherLegendsToken.mintTokenOfType(beneficiary, cardType);        \r\n        totalElementeumToReturn += cardToElementeumReturned[cardType];                \r\n    }\r\n\r\n    lastHash = tempLastHash; // Save in the blockchain for next tx\r\n    \r\n    if(totalElementeumToReturn > 0) {\r\n      uint256 elementeumThatCanBeReturned = _min(totalElementeumToReturn, _min(elementeumToken.allowance(funder, address(this)), elementeumToken.balanceOf(funder)));\r\n      if(elementeumThatCanBeReturned > 0) {\r\n        elementeumToken.transferFrom(funder, beneficiary, elementeumThatCanBeReturned);      \r\n      }            \r\n    }\r\n\r\n    uint256 change = msg.value - (pricePerCard * numberOfCards); //This amount to be refunded as it was unused\r\n    address payable payableWallet = address(uint160(payee));\r\n    payableWallet.transfer(pricePerCard  * numberOfCards);\r\n    if(change > 0) {\r\n      msg.sender.transfer(change);\r\n    }\r\n  }\r\n\r\n  function _min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }  \r\n\r\n  function _requireOnlyOwner() internal view {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"funder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherLegendsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTypeIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPricePerCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePerCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCardTypeIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"permitDestruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCardTypeIdAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenTypeId\",\"type\":\"uint256\"},{\"name\":\"weight\",\"type\":\"uint8\"},{\"name\":\"elementeumReturned\",\"type\":\"uint256\"}],\"name\":\"setDropWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payee\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"elementeumToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"purchaseCards\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"permittedDestroyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenTypeIds\",\"type\":\"uint256[]\"},{\"name\":\"weights\",\"type\":\"uint8[]\"},{\"name\":\"elementeumsReturned\",\"type\":\"uint256[]\"}],\"name\":\"setDropWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setElementeumERC20ContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPricePerCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setEtherLegendsToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"payeeWallet\",\"type\":\"address\"},{\"name\":\"funderWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BoosterPack","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002ac9696187a3a56a346c71b2cb6ff90603aa249e000000000000000000000000abd00d1159a0ced97d366c51ddff91d460c12f11","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://07690e51763a286e38c0b7fca40b78a26ab57b354c18e8be9b8c935bc8df448b"}]}