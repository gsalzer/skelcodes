{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface DTokenInterface {\r\n  // Events (replicate Compound's events)\r\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n  // external functions (trigger accrual)\r\n  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\r\n  function mintViaCToken(uint256 cTokensToSupply) external returns (uint256 dTokensMinted);\r\n  function redeem(uint256 dTokensToBurn) external returns (uint256 underlyingReceived);\r\n  function redeemToCToken(uint256 dTokensToBurn) external returns (uint256 cTokensReceived);\r\n  function redeemUnderlying(uint256 underelyingToReceive) external returns (uint256 dTokensBurned);\r\n  function redeemUnderlyingToCToken(uint256 underlyingToReceive) external returns (uint256 dTokensBurned);\r\n  function transferUnderlying(address recipient, uint256 amount) external returns (bool);\r\n  function transferUnderlyingFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function pullSurplus() external returns (uint256 cTokenSurplus);\r\n  function accrueInterest() external;\r\n\r\n  // view functions (do not trigger accrual)\r\n  function totalSupplyUnderlying() external view returns (uint256);\r\n  function balanceOfUnderlying(address account) external view returns (uint256 underlyingBalance);\r\n  function getSurplus() external view returns (uint256 cTokenSurplus);\r\n  function getSurplusUnderlying() external view returns (uint256 underlyingSurplus);\r\n  function exchangeRateCurrent() external view returns (uint256 dTokenExchangeRate);\r\n  function supplyRatePerBlock() external view returns (uint256 dTokenInterestRate);\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread);\r\n  function getVersion() external pure returns (uint256 version);\r\n}\r\n\r\n\r\ninterface CTokenInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256 err);\r\n  function redeem(uint256 redeemAmount) external returns (uint256 err);\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256 err);\r\n  function balanceOf(address account) external view returns (uint256 balance);\r\n  function balanceOfUnderlying(address account) external returns (uint256 balance);\r\n  function exchangeRateCurrent() external returns (uint256 exchangeRate);\r\n  function transfer(address recipient, uint256 value) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 value) external returns (bool);\r\n  \r\n  function supplyRatePerBlock() external view returns (uint256 rate);\r\n  function exchangeRateStored() external view returns (uint256 rate);\r\n  function accrualBlockNumber() external view returns (uint256 blockNumber);\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface SpreadRegistryInterface {\r\n  function getDaiSpreadPerBlock() external view returns (uint256 daiSpreadPerBlock);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaDaiPrototype1\r\n * @author 0age (dToken mechanics derived from Compound cTokens, ERC20 methods\r\n * derived from Open Zeppelin's ERC20 contract)\r\n * @notice Initial prototype for a cDai wrapper token. This version is not\r\n * upgradeable, and serves as an initial test of the eventual dDai mechanics.\r\n * The dDai exchange rate will grow at the rate of the cDai exchange rate less\r\n * the Dai spread set on the Dharma Spread Registry.\r\n */\r\ncontract DharmaDaiPrototype1 is ERC20Interface, DTokenInterface {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal constant _DHARMA_DAI_VERSION = 0;\r\n\r\n  string internal constant _NAME = \"Dharma Dai (Prototype 1)\";\r\n  string internal constant _SYMBOL = \"dDai-p1\";\r\n  uint8 internal constant _DECIMALS = 8; // to match cDai\r\n\r\n  uint256 internal constant _SCALING_FACTOR = 1e18;\r\n  uint256 internal constant _HALF_OF_SCALING_FACTOR = 5e17;\r\n  uint256 internal constant _COMPOUND_SUCCESS = 0;\r\n\r\n  CTokenInterface internal constant _CDAI = CTokenInterface(\r\n    0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643 // mainnet\r\n  );\r\n\r\n  ERC20Interface internal constant _DAI = ERC20Interface(\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F // mainnet\r\n  );\r\n\r\n  SpreadRegistryInterface internal constant _SPREAD = SpreadRegistryInterface(\r\n    0xA143fD004B3c26f8FAeDeb9224eC03585e63d041\r\n  );\r\n\r\n  // Note: this is just an EOA for the initial prototype.\r\n  address internal constant _VAULT = 0x7e4A8391C728fEd9069B2962699AB416628B19Fa;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  // TODO: pack these more tightly in storage\r\n  uint256 private _blockLastUpdated;\r\n  uint256 private _dDaiExchangeRate;\r\n  uint256 private _cDaiExchangeRate;\r\n\r\n  constructor() public {\r\n    // Approve cDai to transfer Dai on behalf of this contract in order to mint.\r\n    require(_DAI.approve(address(_CDAI), uint256(-1)));\r\n\r\n    _blockLastUpdated = block.number;\r\n    _dDaiExchangeRate = 1e28; // 1 Dai == 1 dDai to start\r\n    _cDaiExchangeRate = _CDAI.exchangeRateCurrent();\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` Dai from `msg.sender` to this contract, use them\r\n   * to mint cDAI, and mint dTokens with `msg.sender` as the beneficiary. Ensure\r\n   * that this contract has been approved to transfer the Dai on behalf of the\r\n   * caller.\r\n   * @param daiToSupply uint256 The amount of Dai to provide as part of minting.\r\n   * @return The amount of dDai received in return for the supplied Dai.\r\n   */\r\n  function mint(\r\n    uint256 daiToSupply\r\n  ) external accrues returns (uint256 dDaiMinted) {\r\n    // Pull in Dai - ensure that this contract has sufficient allowance.\r\n    require(\r\n      _DAI.transferFrom(msg.sender, address(this), daiToSupply),\r\n      \"Dai transfer failed.\"\r\n    );\r\n\r\n    // Use the cDai to mint Dai and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.mint.selector, daiToSupply\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.mint.selector, ok, data);\r\n\r\n    // Determine the dDai to mint using the exchange rate.\r\n    dDaiMinted = (daiToSupply.mul(_SCALING_FACTOR)).div(_dDaiExchangeRate);\r\n\r\n    // Mint dDai to the caller.\r\n    _mint(msg.sender, daiToSupply, dDaiMinted);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` cDai from `msg.sender` to this contract and mint\r\n   * dTokens with `msg.sender` as the beneficiary. Ensure that this contract has\r\n   * been approved to transfer the cDai on behalf of the caller.\r\n   * @param cDaiToSupply uint256 The amount of cDai to provide as part of\r\n   * minting.\r\n   * @return The amount of dDai received in return for the supplied cDai.\r\n   */\r\n  function mintViaCToken(\r\n    uint256 cDaiToSupply\r\n  ) external accrues returns (uint256 dDaiMinted) {\r\n    // Pull in cDai - ensure that this contract has sufficient allowance.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.transferFrom.selector, msg.sender, address(this), cDaiToSupply\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.transferFrom.selector, ok, data);\r\n\r\n    // Determine the Dai equivalent of the supplied cDai amount.\r\n    uint256 daiEquivalent = cDaiToSupply.mul(_cDaiExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Determine the dDai to mint using the exchange rate.\r\n    dDaiMinted = (daiEquivalent.mul(_SCALING_FACTOR)).div(_dDaiExchangeRate);\r\n\r\n    // Mint dDai to the caller.\r\n    _mint(msg.sender, daiEquivalent, dDaiMinted);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem `dDaiToBurn` dDai from `msg.sender`, use the corresponding\r\n   * cDai to redeem Dai, and transfer the Dai to `msg.sender`.\r\n   * @param dDaiToBurn uint256 The amount of dDai to provide for Dai.\r\n   * @return The amount of Dai received in return for the provided cDai.\r\n   */\r\n  function redeem(\r\n    uint256 dDaiToBurn\r\n  ) external accrues returns (uint256 daiReceived) {\r\n    // Determine the underlying Dai value of the dDai to be burned.\r\n    daiReceived = dDaiToBurn.mul(_dDaiExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Burn the dDai.\r\n    _burn(msg.sender, daiReceived, dDaiToBurn);\r\n\r\n    // Use the cDai to redeem Dai and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.redeemUnderlying.selector, daiReceived\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.redeemUnderlying.selector, ok, data);\r\n\r\n    // Send the Dai to the redeemer.\r\n    require(_DAI.transfer(msg.sender, daiReceived), \"Dai transfer failed.\");\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem `dDaiToBurn` dDai from `msg.sender` and transfer the\r\n   * corresponding amount of cDai to `msg.sender`.\r\n   * @param dDaiToBurn uint256 The amount of dDai to provide for Dai.\r\n   * @return The amount of cDai received in return for the provided dDai.\r\n   */\r\n  function redeemToCToken(\r\n    uint256 dDaiToBurn\r\n  ) external accrues returns (uint256 cDaiReceived) {\r\n    // Determine the underlying Dai value of the dDai to be burned.\r\n    uint256 daiEquivalent = dDaiToBurn.mul(_dDaiExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Determine the amount of cDai corresponding to the redeemed Dai value.\r\n    cDaiReceived = (daiEquivalent.mul(_SCALING_FACTOR)).div(_cDaiExchangeRate);\r\n\r\n    // Burn the dDai.\r\n    _burn(msg.sender, daiEquivalent, dDaiToBurn);\r\n\r\n    // Transfer the cDai to the caller and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.transfer.selector, msg.sender, cDaiReceived\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.transfer.selector, ok, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem the dDai equivalent value of Dai amount `daiToReceive` from\r\n   * `msg.sender`, use the corresponding cDai to redeem Dai, and transfer the\r\n   * Dai to `msg.sender`.\r\n   * @param daiToReceive uint256 The amount, denominated in Dai, of the cDai to\r\n   * provide for Dai.\r\n   * @return The amount of dDai burned in exchange for the returned Dai.\r\n   */\r\n  function redeemUnderlying(\r\n    uint256 daiToReceive\r\n  ) external accrues returns (uint256 dDaiBurned) {\r\n    // Determine the dDai to redeem using the exchange rate.\r\n    dDaiBurned = (daiToReceive.mul(_SCALING_FACTOR)).div(_dDaiExchangeRate);\r\n\r\n    // Burn the dDai.\r\n    _burn(msg.sender, daiToReceive, dDaiBurned);\r\n\r\n    // Use the cDai to redeem Dai and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.redeemUnderlying.selector, daiToReceive\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.redeemUnderlying.selector, ok, data);\r\n\r\n    // Send the Dai to the redeemer.\r\n    require(_DAI.transfer(msg.sender, daiToReceive), \"Dai transfer failed.\");\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem the dDai equivalent value of Dai amount `daiToReceive` from\r\n   * `msg.sender` and transfer the corresponding amount of cDai to `msg.sender`.\r\n   * @param daiToReceive uint256 The amount, denominated in Dai, of the cDai to\r\n   * provide for Dai.\r\n   * @return The amount of dDai burned in exchange for the returned cDai.\r\n   */\r\n  function redeemUnderlyingToCToken(\r\n    uint256 daiToReceive\r\n  ) external accrues returns (uint256 dDaiBurned) {\r\n    // Determine the dDai to redeem using the exchange rate.\r\n    dDaiBurned = (daiToReceive.mul(_SCALING_FACTOR)).div(_dDaiExchangeRate);\r\n\r\n    // Burn the dDai.\r\n    _burn(msg.sender, daiToReceive, dDaiBurned);\r\n\r\n    // Determine the amount of cDai corresponding to the redeemed Dai value.\r\n    uint256 cDaiToReceive = daiToReceive.mul(_SCALING_FACTOR).div(_cDaiExchangeRate);\r\n\r\n    // Transfer the cDai to the caller and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.transfer.selector, msg.sender, cDaiToReceive\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.transfer.selector, ok, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer cDai in excess of the total dDai balance to a dedicated\r\n   * \"vault\" account.\r\n   * @return The amount of cDai transferred to the vault account.\r\n   */\r\n  function pullSurplus() external accrues returns (uint256 cDaiSurplus) {\r\n    // Determine the cDai surplus (difference between total dDai and total cDai)\r\n    (, cDaiSurplus) = _getSurplus();\r\n\r\n    // Transfer the cDai to the vault and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CDAI).call(abi.encodeWithSelector(\r\n      _CDAI.transfer.selector, _VAULT, cDaiSurplus\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CDAI.transfer.selector, ok, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Manually advance the dDai exchange rate and update the cDai\r\n   * exchange rate to that of the current block.\r\n   */\r\n  function accrueInterest() external accrues {\r\n    // The `accrues()` modifier contains all function logic.\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `recipient`.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer dDai equal to `amount` Dai from `msg.sender` to =\r\n   * `recipient`.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferUnderlying(\r\n    address recipient, uint256 amount\r\n  ) external accrues returns (bool) {\r\n    // Determine the dDai to transfer using the exchange rate\r\n    uint256 dDaiAmount = (amount.mul(_SCALING_FACTOR)).div(_dDaiExchangeRate);\r\n\r\n    _transfer(msg.sender, recipient, dDaiAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `value` tokens on behalf of\r\n   * `msg.sender`.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   * @return A boolean indicating whether the approval was successful.\r\n   */\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `sender` to `recipient` as long as\r\n   * `msg.sender` has sufficient allowance.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferFrom(\r\n    address sender, address recipient, uint256 amount\r\n  ) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    uint256 allowance = _allowances[sender][msg.sender];\r\n    if (allowance != uint256(-1)) {\r\n      _approve(sender, msg.sender, allowance.sub(amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer dDai equal to `amount` Dai from `sender` to `recipient` as\r\n   * long as `msg.sender` has sufficient allowance.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferUnderlyingFrom(\r\n    address sender, address recipient, uint256 amount\r\n  ) external accrues returns (bool) {\r\n    // Determine the dDai to transfer using the exchange rate\r\n    uint256 dDaiAmount = (amount.mul(_SCALING_FACTOR)).div(_dDaiExchangeRate);\r\n\r\n    _transfer(sender, recipient, dDaiAmount);\r\n    uint256 allowance = _allowances[sender][msg.sender];\r\n    if (allowance != uint256(-1)) {\r\n      _approve(sender, msg.sender, allowance.sub(dDaiAmount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Increase the current allowance of `spender` by `value` tokens.\r\n   * @param spender address The account to grant the additional allowance.\r\n   * @param addedValue uint256 The amount to increase the allowance by.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function increaseAllowance(\r\n    address spender, uint256 addedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Decrease the current allowance of `spender` by `value` tokens.\r\n   * @param spender address The account to decrease the allowance for.\r\n   * @param subtractedValue uint256 The amount to subtract from the allowance.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender, uint256 subtractedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total surplus, or cDai balance that\r\n   * exceeds the total dDai balance.\r\n   * @return The total surplus in cDai.\r\n   */\r\n  function getSurplus() external view returns (uint256 cDaiSurplus) {\r\n    // Determine the Dai surplus (difference between total dDai and total Dai)\r\n    (, cDaiSurplus) = _getSurplus();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total surplus, or Dai equivalent of the\r\n   * cDai balance that exceeds the total dDai balance.\r\n   * @return The total surplus in Dai.\r\n   */\r\n  function getSurplusUnderlying() external view returns (uint256 daiSurplus) {\r\n    // Determine the Dai surplus (difference between total dDai and total Dai)\r\n    (daiSurplus, ) = _getSurplus();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the block number where interest was last\r\n   * accrued.\r\n   * @return The block number where interest was last accrued.\r\n   */\r\n  function accrualBlockNumber() external view returns (uint256 blockNumber) {\r\n    blockNumber = _blockLastUpdated;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dDai exchange rate (multiplied by\r\n   * 10^18).\r\n   * @return The current exchange rate.\r\n   */\r\n  function exchangeRateCurrent() external view returns (uint256 dDaiExchangeRate) {\r\n    // Get most recent dDai exchange rate by determining accrued interest\r\n    (dDaiExchangeRate,,) = _getAccruedInterest();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dDai interest earned per block\r\n   * (multiplied by 10^18).\r\n   * @return The current interest rate.\r\n   */\r\n  function supplyRatePerBlock() external view returns (uint256 dDaiInterestRate) {\r\n    (dDaiInterestRate,) = _getRatePerBlock();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current cDai interest spread over dDai per\r\n   * block (multiplied by 10^18).\r\n   * @return The current interest rate spread.\r\n   */\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread) {\r\n    (uint256 dDaiInterestRate, uint256 cDaiInterestRate) = _getRatePerBlock();\r\n    rateSpread = cDaiInterestRate - dDaiInterestRate;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dDai supply.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dDai supply, denominated in Dai.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupplyUnderlying() external view returns (uint256) {\r\n    (uint256 dDaiExchangeRate,,) = _getAccruedInterest();\r\n\r\n    // Determine the total value of all issued dDai in Dai\r\n    return _totalSupply.mul(dDaiExchangeRate) / _SCALING_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dDai balance of an account.\r\n   * @param account address The account to check the dDai balance for.\r\n   * @return The balance of the given account.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256 dDai) {\r\n    dDai = _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the dDai balance of an account, denominated in\r\n   * its Dai equivalent value.\r\n   * @param account address The account to check the balance for.\r\n   * @return The total Dai-equivalent cDai balance.\r\n   */\r\n  function balanceOfUnderlying(\r\n    address account\r\n  ) external view returns (uint256 daiBalance) {\r\n    // Get most recent dDai exchange rate by determining accrued interest\r\n    (uint256 dDaiExchangeRate,,) = _getAccruedInterest();\r\n\r\n    // Convert account balance to Dai equivalent using the exchange rate\r\n    daiBalance = _balances[account].mul(dDaiExchangeRate) / _SCALING_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total allowance that `spender` has to\r\n   * transfer funds from the `owner` account using `transferFrom`.\r\n   * @param owner address The account that is granting the allowance.\r\n   * @param spender address The account that has been granted the allowance.\r\n   * @return The allowance of the given spender for the given owner.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the name of the token.\r\n   * @return The name of the token.\r\n   */\r\n  function name() external pure returns (string memory) {\r\n    return _NAME;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the symbol of the token.\r\n   * @return The symbol of the token.\r\n   */\r\n  function symbol() external pure returns (string memory) {\r\n    return _SYMBOL;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the number of decimals of the token.\r\n   * @return The number of decimals of the token.\r\n   */\r\n  function decimals() external pure returns (uint8) {\r\n    return _DECIMALS;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function for getting the current Dharma Dai version.\r\n   * @return The current Dharma Dai version.\r\n   */\r\n  function getVersion() external pure returns (uint256 version) {\r\n    version = _DHARMA_DAI_VERSION;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to mint `amount` tokens by exchanging `exchanged`\r\n   * tokens to `account` and emit corresponding `Mint` & `Transfer` events.\r\n   * @param account address The account to mint tokens to.\r\n   * @param exchanged uint256 The amount of underlying tokens used to mint.\r\n   * @param amount uint256 The amount of tokens to mint.\r\n   */\r\n  function _mint(address account, uint256 exchanged, uint256 amount) internal {\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n\r\n    emit Mint(account, exchanged, amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to burn `amount` tokens by exchanging `exchanged`\r\n   * tokens from `account` and emit corresponding `Redeeem` & `Transfer` events.\r\n   * @param account address The account to burn tokens from.\r\n   * @param exchanged uint256 The amount of underlying tokens given for burning.\r\n   * @param amount uint256 The amount of tokens to burn.\r\n   */\r\n  function _burn(address account, uint256 exchanged, uint256 amount) internal {\r\n    uint256 balancePriorToBurn = _balances[account];\r\n    require(\r\n      balancePriorToBurn >= amount, \"Supplied amount exceeds account balance.\"\r\n    );\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = balancePriorToBurn - amount; // overflow checked above\r\n\r\n    emit Transfer(account, address(0), amount);\r\n    emit Redeem(account, exchanged, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to move `amount` tokens from `sender` to\r\n   * `recipient` and emit a corresponding `Transfer` event.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set the allowance for `spender` to transfer up\r\n   * to `value` tokens on behalf of `owner`.\r\n   * @param owner address The account that has granted the allowance.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the latest dDai and cDai exchange\r\n   * rates for Dai and provide the value for each.\r\n   * @return The dDai and cDai exchange rate, as well as a boolean indicating if\r\n   * interest accrual has been processed already or needs to be calculated and\r\n   * placed in storage.\r\n   */\r\n  function _getAccruedInterest() internal view returns (\r\n    uint256 dDaiExchangeRate, uint256 cDaiExchangeRate, bool fullyAccrued\r\n  ) {\r\n    // Get the number of blocks since the last time interest was accrued.\r\n    uint256 blockDelta = block.number - _blockLastUpdated;\r\n    fullyAccrued = (blockDelta == 0);\r\n\r\n    // Skip calculation and read from storage if interest was already accrued.\r\n    if (fullyAccrued) {\r\n      dDaiExchangeRate = _dDaiExchangeRate;\r\n      cDaiExchangeRate = _cDaiExchangeRate;\r\n    } else {\r\n      // Use cDai exchange rate to calculate the interest rate over the period.\r\n      cDaiExchangeRate = _getCurrentExchangeRate();\r\n      uint256 cDaiInterestRate = (\r\n        (cDaiExchangeRate.mul(_SCALING_FACTOR)).div(_cDaiExchangeRate)\r\n      );\r\n\r\n      // Get the current spread and calculate interest rate over the period.\r\n      uint256 spreadInterestRate = _pow(\r\n        _SPREAD.getDaiSpreadPerBlock().add(_SCALING_FACTOR), blockDelta\r\n      );\r\n\r\n      // Use total cDai interest, less the spread, to set dDai exchange rate.\r\n      dDaiExchangeRate = spreadInterestRate >= cDaiInterestRate\r\n        ? _dDaiExchangeRate\r\n        : _dDaiExchangeRate.mul(\r\n          _SCALING_FACTOR.add(cDaiInterestRate - spreadInterestRate)\r\n        ) / _SCALING_FACTOR;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the current cDai exchange rate.\r\n   * @return The current cDai exchange rate, or amount of Dai that is redeemable\r\n   * for each cDai (with 18 decimal places added to the returned exchange rate).\r\n   */\r\n  function _getCurrentExchangeRate() internal view returns (uint256 exchangeRate) {\r\n    uint256 storedExchangeRate = _CDAI.exchangeRateStored();\r\n    uint256 blockDelta = block.number.sub(_CDAI.accrualBlockNumber());\r\n\r\n    if (blockDelta == 0) return storedExchangeRate;\r\n\r\n    exchangeRate = blockDelta == 0 ? storedExchangeRate : storedExchangeRate.add(\r\n      storedExchangeRate.mul(\r\n        _CDAI.supplyRatePerBlock().mul(blockDelta)\r\n      ) / _SCALING_FACTOR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the total surplus, or cDai\r\n   * balance that exceeds the total dDai balance.\r\n   * @return The total surplus, denominated in both Dai and in cDai.\r\n   */\r\n  function _getSurplus() internal view returns (\r\n    uint256 daiSurplus, uint256 cDaiSurplus\r\n  ) {\r\n    (uint256 dDaiExchangeRate, uint256 cDaiExchangeRate,) = _getAccruedInterest();\r\n\r\n    // Determine the total value of all issued dDai in Dai, rounded up\r\n    uint256 dDaiUnderlying = (\r\n      _totalSupply.mul(dDaiExchangeRate) / _SCALING_FACTOR\r\n    ).add(1);\r\n\r\n    // Compare to total underlying Dai value of all cDai held by this contract\r\n    daiSurplus = (\r\n      _CDAI.balanceOf(address(this)).mul(cDaiExchangeRate) / _SCALING_FACTOR\r\n    ).sub(dDaiUnderlying);\r\n\r\n    // Determine the cDai equivalent of this surplus amount\r\n    cDaiSurplus = (daiSurplus.mul(_SCALING_FACTOR)).div(cDaiExchangeRate);\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dDai and cDai interest supply rate\r\n   * per block (multiplied by 10^18).\r\n   * @return The current dDai and cDai interest rates.\r\n   */\r\n  function _getRatePerBlock() internal view returns (\r\n    uint256 dDaiSupplyRate, uint256 cDaiSupplyRate\r\n  ) {\r\n    uint256 spread = _SPREAD.getDaiSpreadPerBlock();\r\n    cDaiSupplyRate = _CDAI.supplyRatePerBlock();\r\n    dDaiSupplyRate = (spread < cDaiSupplyRate ? cDaiSupplyRate - spread : 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to take `floatIn` (i.e. the value * 10^18) and\r\n   * raise it to the power of `power` using \"exponentiation by squaring\" (see\r\n   * Maker's DSMath implementation).\r\n   * @param floatIn uint256 The value.\r\n   * @param power address The power to raise the value by.\r\n   * @return The specified value raised to the specified power.\r\n   */\r\n  function _pow(uint256 floatIn, uint256 power) internal pure returns (uint256 floatOut) {\r\n    floatOut = power % 2 != 0 ? floatIn : _SCALING_FACTOR;\r\n\r\n    for (power /= 2; power != 0; power /= 2) {\r\n      floatIn = (floatIn.mul(floatIn)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n\r\n      if (power % 2 != 0) {\r\n        floatOut = (floatIn.mul(floatOut)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to determine if a call to cDai succeeded and\r\n   * to revert, supplying the reason, if it failed. Failure can be caused by a\r\n   * call that reverts, or by a call that does not revert but returns a non-zero\r\n   * error code.\r\n   * @param functionSelector bytes4 The function selector that was called.\r\n   * @param ok bool A boolean representing whether the call returned or\r\n   * reverted.\r\n   * @param data bytes The data provided by the returned or reverted call.\r\n   */\r\n  function _checkCompoundInteraction(\r\n    bytes4 functionSelector, bool ok, bytes memory data\r\n  ) internal pure {\r\n    // Determine if something went wrong with the attempt.\r\n    if (ok) {\r\n      uint256 compoundError = abi.decode(data, (uint256)); // throws on no data\r\n      if (compoundError != _COMPOUND_SUCCESS) {\r\n        revert(\r\n          string(\r\n            abi.encodePacked(\r\n              \"Compound cDai contract returned error code \",\r\n              uint8((compoundError / 10) + 48),\r\n              uint8((compoundError % 10) + 48),\r\n              \" while attempting to call \",\r\n              _getFunctionName(functionSelector),\r\n              \".\"\r\n            )\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      revert(\r\n        string(\r\n          abi.encodePacked(\r\n            \"Compound cDai contract reverted while attempting to call \",\r\n            _getFunctionName(functionSelector),\r\n            \": \",\r\n            _decodeRevertReason(data)\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to get a Compound function name based on the\r\n   * selector.\r\n   * @param functionSelector bytes4 The function selector.\r\n   * @return The name of the function as a string.\r\n   */\r\n  function _getFunctionName(\r\n    bytes4 functionSelector\r\n  ) internal pure returns (string memory functionName) {\r\n    if (functionSelector == _CDAI.mint.selector) {\r\n      functionName = 'mint';\r\n    } else if (functionSelector == _CDAI.redeemUnderlying.selector) {\r\n      functionName = 'redeemUnderlying';\r\n    } else if (functionSelector == _CDAI.transferFrom.selector) {\r\n      functionName = 'transferFrom';\r\n    } else if (functionSelector == _CDAI.transfer.selector) {\r\n      functionName = 'transfer';\r\n    } else {\r\n      functionName = 'an unknown function';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to decode revert reasons. The revert reason\r\n   * prefix is removed and the remaining string argument is decoded.\r\n   * @param revertData bytes The raw data supplied alongside the revert.\r\n   * @return The decoded revert reason string.\r\n   */\r\n  function _decodeRevertReason(\r\n    bytes memory revertData\r\n  ) internal pure returns (string memory revertReason) {\r\n    // Solidity prefixes revert reason with 0x08c379a0 -> Error(string) selector\r\n    if (\r\n      revertData.length > 68 && // prefix (4) + position (32) + length (32)\r\n      revertData[0] == byte(0x08) &&\r\n      revertData[1] == byte(0xc3) &&\r\n      revertData[2] == byte(0x79) &&\r\n      revertData[3] == byte(0xa0)\r\n    ) {\r\n      // Get the revert reason without the prefix from the revert data.\r\n      bytes memory revertReasonBytes = new bytes(revertData.length - 4);\r\n      for (uint256 i = 4; i < revertData.length; i++) {\r\n        revertReasonBytes[i - 4] = revertData[i];\r\n      }\r\n\r\n      // Decode the resultant revert reason as a string.\r\n      revertReason = abi.decode(revertReasonBytes, (string));\r\n    } else {\r\n      // Simply return the default, with no revert reason.\r\n      revertReason = \"(no revert reason)\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to determine the latest dDai and cDai exchange rates, and\r\n   * to update the respective storage values if they have not already been\r\n   * updated at some point in the current block, before proceeding to execution\r\n   * of the rest of the decorated function.\r\n   */\r\n  modifier accrues() {\r\n    (\r\n      uint256 dDaiExchangeRate, uint256 cDaiExchangeRate, bool fullyAccrued\r\n    ) = _getAccruedInterest();\r\n\r\n    if (!fullyAccrued) {\r\n      // Update storage with dDai + cDai exchange rates as of the current block\r\n      _blockLastUpdated = block.number;\r\n      _dDaiExchangeRate = dDaiExchangeRate;\r\n      _cDaiExchangeRate = cDaiExchangeRate;\r\n    }\r\n\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiToReceive\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlyingToCToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiBurned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cDaiSurplus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cDaiSurplus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiToBurn\",\"type\":\"uint256\"}],\"name\":\"redeemToCToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cDaiReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlying\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpreadPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateSpread\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSurplusUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiSurplus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDai\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiToReceive\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiBurned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiToSupply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiInterestRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiExchangeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cDaiToSupply\",\"type\":\"uint256\"}],\"name\":\"mintViaCToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dDaiToBurn\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DharmaDaiPrototype1","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a58886c449a1ad0f666e674b8045c3a90bfb277e0ee4ba4eb9a4bfabdfe8c855"}]}