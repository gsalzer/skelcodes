{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/AverageBlockTime.sol\": {\r\n      \"content\": \"pragma solidity 0.5.9;\\n\\ncontract AverageBlockTime {\\n    struct Snapshot {\\n        uint128 timestamp;\\n        uint128 blockNumber;\\n    }\\n    Snapshot snapshot0;\\n    Snapshot snapshot1;\\n    uint256 minUpdateDelay;\\n\\n    constructor(uint256 _minUpdateDelay, uint128 _snapshotTimestamp, uint128 _snapshotBlockNumber) public {\\n        require(block.timestamp - _snapshotTimestamp >= _minUpdateDelay, \\\"require an older snapshot\\\");\\n        require(_snapshotBlockNumber < block.number, \\\"can't use a future snapshot\\\");\\n        minUpdateDelay = _minUpdateDelay;\\n        snapshot0.timestamp = _snapshotTimestamp;\\n        snapshot0.blockNumber = _snapshotBlockNumber;\\n    }\\n\\n    function update() external {\\n        Snapshot memory _snapshot0 = snapshot0;\\n        Snapshot memory _snapshot1 = snapshot1;\\n        if(_snapshot0.timestamp > _snapshot1.timestamp) {\\n            if(block.timestamp - _snapshot1.timestamp >= minUpdateDelay) {\\n                snapshot1.timestamp = uint128(block.timestamp);\\n                snapshot1.blockNumber = uint128(block.number);\\n            }\\n        } else {\\n            if(block.timestamp - _snapshot0.timestamp >= minUpdateDelay) {\\n                snapshot0.timestamp = uint128(block.timestamp);\\n                snapshot0.blockNumber = uint128(block.number);\\n            }\\n        }\\n    }\\n\\n    function getAverageBlockTimeInMicroSeconds() external view returns (uint256) {\\n        Snapshot storage snapshot = snapshot0;\\n        if(snapshot.timestamp > snapshot1.timestamp) {\\n            if(block.timestamp - snapshot.timestamp < minUpdateDelay) {\\n                snapshot = snapshot1;\\n            }\\n        } else {\\n            if(block.timestamp - snapshot1.timestamp >= minUpdateDelay) {\\n                snapshot = snapshot1;\\n            }\\n        }\\n        return ((block.timestamp - snapshot.timestamp) * 1000) / (block.number - snapshot.blockNumber);\\n    }\\n}\",\r\n      \"keccak256\": \"0xc4125a97f1c27cfd931a1d72d641115a540a22454ea9bb363ce803f7011c9adc\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAverageBlockTimeInMicroSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minUpdateDelay\",\"type\":\"uint256\"},{\"name\":\"_snapshotTimestamp\",\"type\":\"uint128\"},{\"name\":\"_snapshotBlockNumber\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AverageBlockTime","CompilerVersion":"v0.5.9+commit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000000000000000000000000000000000005d67ecd3000000000000000000000000000000000000000000000000000000000080df9e","Library":"","LicenseType":"None","SwarmSource":"bzzr://60534f12078b8c82dd6010ed9d2d8259be0488ee0ea1e0d1f5d7e70c09ab4c5c"}]}