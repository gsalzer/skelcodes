{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: zos-lib\\contracts\\Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: openzeppelin-eth\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\governance\\IDelegate.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n* @title Delegate reference to be used in other contracts\r\n*/\r\ninterface IDelegate {\r\n    /**\r\n    * @notice Init delegate when created. May be called only once.\r\n    */\r\n    function init(address _owner, ERC20 _token, address _governance, bytes32 _name, address _signer) external;\r\n\r\n    /**\r\n    * @notice Stake specified amount of tokens\r\n    * @param _amount Amount to stake\r\n    */\r\n    function stake(uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Stake specified amount of tokens for other staker\r\n    * @param _staker Address of a staker\r\n    * @param _amount Amount to stake\r\n    */\r\n    function delegateStake(address _staker, uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Unstake specified amount of tokens\r\n    * @param _amount Amount to unstake\r\n    */\r\n    function unstake(uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Unstake specified amount of tokens for other user\r\n    * @param _staker Address of a staker\r\n    * @param _amount Amount to unstake\r\n    */\r\n    function delegateUnstake(address _staker, uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Return number of tokens staked by the specified staker\r\n    * @param _staker Staker address\r\n    */\r\n    function stakeOfStaker(address _staker) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Stake at the given timestamp\r\n    * @param _timestamp Time for which we would like to check stake\r\n    */\r\n    function stakeOfDelegate(uint256 _timestamp) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Delegated stake for some staker and msg.sender as a caller\r\n    * @param _staker Staker of tokens\r\n    * @param _caller Caller who delegated stake\r\n    */\r\n    function delegatedStakeOfStaker(address _staker, address _caller) external view returns (uint256);\r\n\r\n    /**\r\n    * @notice Whether this delegate is activated now\r\n    */\r\n    function isActiveNow() external view returns (bool);\r\n\r\n    /**\r\n    * @notice Whether this delegate was activated at the given timestamp\r\n    * @param _timestamp Time for which we would like to check activation status\r\n    */\r\n    function isActive(uint256 _timestamp) external view returns (bool);\r\n\r\n    /**\r\n    * @notice Activate delegate.\r\n    */\r\n    function activate() external;\r\n\r\n    /**\r\n    * @notice Deactivate delegate\r\n    */\r\n    function deactivate() external;\r\n\r\n    /**\r\n    * @notice Delegate owner\r\n    */\r\n    function owner() external view returns(address);\r\n\r\n    /**\r\n    * @notice Returns delegate's signer address\r\n    */\r\n    function getSignerAddress() external view returns (address);\r\n\r\n    /**\r\n    * @notice Returns delegate's name as bytes32\r\n    */\r\n    function getNameAsBytes() external view returns (bytes32);\r\n\r\n    /**\r\n    * @notice Submits delegate attestation data and depending on result approves attestation\r\n    * @param _hash Signed hashed data\r\n    * @param _v V part of signing\r\n    * @param _r R part of signing\r\n    * @param _s S part of signing\r\n    */\r\n    function submitAttestation(bytes32[] calldata _hash, uint8[] calldata _v, bytes32[] calldata _r, bytes32[] calldata _s) external;\r\n\r\n    /**\r\n    * @notice Whether this delegate is suspended now\r\n    */\r\n    function isSuspendedNow() external view returns (bool);\r\n\r\n    /**\r\n    * @notice Whether this delegate was suspended at the given timestamp\r\n    * @param _timestamp Time for which we would like to check slash\r\n    */\r\n    function isSuspended(uint256 _timestamp) external view returns (bool);\r\n\r\n    /**\r\n    * @notice Suspend delegate\r\n    */\r\n    function suspend() external;\r\n\r\n    /**\r\n    * @notice Unsuspend delegate\r\n    */\r\n    function unsuspend() external;\r\n\r\n    /**\r\n    * @notice Unlocks stakes\r\n    * @param _timeout Timeout at which stake will become available\r\n    */\r\n    function unlockStakes(uint256 _timeout) external;\r\n}\r\n\r\n// File: contracts\\library\\Enums.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\nlibrary Enums {\r\n    enum VotingCategory { APPROVE_ATTESTER, SUSPEND_ATTESTER, SUSPEND_DELEGATE, UNSUSPEND_DELEGATE, ARBITRARY }\r\n    enum DelegateRole { NONE, MASTERNODE, VALIDATOR }\r\n}\r\n\r\n// File: contracts\\governance\\IGovernance.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n* @title Governance reference to be used in other contracts\r\n*/\r\ninterface IGovernance {\r\n    /**\r\n    * @notice Make generic proposal\r\n    * @param _id Voting id\r\n    * @param _category Voting category\r\n    * @param _address Delegate / Attester affected by voting\r\n    * @param _data Extra data or data for arbitrary voting\r\n    * @param _votingPeriod Period when delegates can vote from proposal submission\r\n    */\r\n    function submitProposal(bytes32 _id, Enums.VotingCategory _category, address _address, bytes32 _data, uint256 _votingPeriod) external;\r\n\r\n   /**\r\n   * @notice Vote in favor or against proposal with the specified identifier\r\n   * @param _id Voting id\r\n   * @param _inFavor Support proposal or not\r\n   */\r\n    function vote(bytes32 _id, bool _inFavor) external;\r\n\r\n    /**\r\n    * @notice Finalize voting and apply proposed changes if success.\r\n    * This method will fail if voting period is not over.\r\n    * @param _id Voting id\r\n    */\r\n    function finalizeVoting(bytes32 _id) external;\r\n\r\n    /**\r\n     * @notice Whether specified delegate is known by governance, created by governance\r\n     * @param _delegate Delegate address to check\r\n     */\r\n    function isDelegateKnown(address _delegate) external view returns (bool);\r\n\r\n    /**\r\n    * @notice Create new delegate contract, get bond and transfer ownership to a caller\r\n    * @param _name Delegate name\r\n    * @param _signer Delegate Signer address\r\n    * @param _bond Delegate bond amount\r\n    */\r\n    function createDelegate(bytes32 _name, address _signer, uint256 _bond) external returns (address);\r\n\r\n    /**\r\n    * @notice Launches delegate, activates and sets a proper role\r\n    * @param _isAttested Delegate is attested or not\r\n    */\r\n    function launchDelegate(bool _isAttested) external;\r\n\r\n    /**\r\n    * @notice Unregister specified delegate. Can only be called by delegate itself\r\n    */\r\n    function unregisterDelegate() external;\r\n\r\n    /**\r\n    * @notice Slashes suspended delegate bond to governing council\r\n    * @param _delegate Delegate address\r\n    * @param _amount Tokens amount\r\n    */\r\n    function slashBond(address _delegate, uint256 _amount) external;\r\n\r\n    /**\r\n    * @notice Approves specified attester. Can only be called by owner.\r\n    * @param _attester Attester address\r\n    */\r\n    function approveAttester(address _attester) external;\r\n\r\n    /**\r\n    * @notice Suspends specified attester. Can only be called by owner.\r\n    * @param _attester Attester address\r\n    */\r\n    function suspendAttester(address _attester) external;\r\n\r\n    /**\r\n    * @notice Whether specified attester is valid.\r\n    * @param _attester Attesters address to check\r\n    */\r\n    function isAttesterValid(address _attester) external view returns (bool);\r\n\r\n    /**\r\n    * @notice Get governing council address\r\n    */\r\n    function getGoverningCouncil() external view returns(address);\r\n\r\n    /**\r\n    * @notice Checks if delegate is validator\r\n    * @param _delegate Delegate to be checked\r\n    */\r\n    function isValidator(address _delegate) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\library\\OperationStore.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\nlibrary OperationStore {\r\n\r\n    /**\r\n     * @notice Stores historical integer data\r\n     * @param _history History of stored int data in format time1, value1, time2, value2, time3...\r\n     * @param _value Value to be stored\r\n     */\r\n    function storeInt(uint256[] storage _history, uint256 _value) internal {\r\n        _history.push(now);\r\n        _history.push(_value);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns integer value for specified time\r\n     * @param _history History of stored int data in format time1, value1, time2, value2, time3...\r\n     * @param _timestamp Time for which we get value\r\n     */\r\n    function getInt(uint256[] memory _history, uint256 _timestamp) internal pure returns (uint256) {\r\n        uint256 index = findIndex(_history, _timestamp, 2);\r\n        if (index > 0) {\r\n            return _history[index - 1];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Stores historical boolean data\r\n     * @param _history History of stored boolean data in format: new record each times value changed (time1, time2...)\r\n     * @param _value Value to be stored\r\n     */\r\n    function storeBool(uint256[] storage _history, bool _value) internal {\r\n        bool current = (_history.length % 2 == 1);\r\n        if (current != _value) {\r\n            _history.push(now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns boolean value for specified time\r\n     * @param _history History of stored boolean data in format: new record each times value changed (time1, time2...)\r\n     * @param _timestamp Time for which we get value\r\n     */\r\n    function getBool(uint256[] memory _history, uint256 _timestamp) internal pure returns (bool) {\r\n        return findIndex(_history, _timestamp, 1) % 2 == 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Stores historical timestamp data\r\n     * @param _history History of stored timestamp data in format: time1, time2, time3...\r\n     * @param _value Value to be stored\r\n     */\r\n    function storeTimestamp(uint256[] storage _history, uint256 _value) internal {\r\n        _history.push(_value);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns last timestamp value for specified time\r\n     * @param _history History of stored timestamp data in format: time1, time2, time3...\r\n     * @param _timestamp Time for which we get value\r\n     */\r\n    function getTimestamp(uint256[] memory _history, uint256 _timestamp) internal pure returns (uint256) {\r\n        uint256 index = findIndex(_history, _timestamp, 1);\r\n        if (index > 0) {\r\n            return _history[index - 1];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Searches for index of timestamp with specified step\r\n     * @dev History elements is sorted so binary search is used.\r\n     * @param _history History of stored timestamp data in format: time1, time2, time3...\r\n     * @param _timestamp Time for which we get value\r\n     * @param _step Step used for binary search. For bool & timestamp steps is 1, for uint step is 2\r\n     */\r\n    function findIndex(uint256[] memory _history, uint256 _timestamp, uint256 _step) internal pure returns (uint256) {\r\n        if (_history.length == 0) {\r\n            return 0;\r\n        }\r\n        uint256 low = 0;\r\n        uint256 high = _history.length - _step;\r\n\r\n        while (low <= high) {\r\n            uint256 mid = ((low + high) >> _step) << (_step - 1);\r\n            uint256 midVal = _history[mid];\r\n            if (midVal < _timestamp) {\r\n                low = mid + _step;\r\n            } else if (midVal > _timestamp) {\r\n                if (mid == 0) {\r\n                    return 0;\r\n                    // min key\r\n                }\r\n                high = mid - _step;\r\n            } else {\r\n                // take the last one if there are many same items\r\n                uint256 result = mid + _step;\r\n                while (result < _history.length && _history[result] == _timestamp) {\r\n                    result = result + _step;\r\n                }\r\n                // key found\r\n                return result;\r\n            }\r\n        }\r\n        // key not found\r\n        return low;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\library\\AddressSet.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/// @title An implementation of the set data structure for addresses.\r\n/// @author Noah Zinsmeister\r\n/// @dev O(1) insertion, removal, contains, and length functions.\r\nlibrary AddressSet {\r\n    struct Set {\r\n        address[] members;\r\n        mapping(address => uint) memberIndices;\r\n    }\r\n\r\n    /// @dev Inserts an element into a set. If the element already exists in the set, the function is a no-op.\r\n    /// @param self The set to insert into.\r\n    /// @param other The element to insert.\r\n    function insert(Set storage self, address other) public {\r\n        if (!contains(self, other)) {\r\n            self.memberIndices[other] = self.members.push(other);\r\n        }\r\n    }\r\n\r\n    /// @dev Removes an element from a set. If the element does not exist in the set, the function is a no-op.\r\n    /// @param self The set to remove from.\r\n    /// @param other The element to remove.\r\n    function remove(Set storage self, address other) public {\r\n        if (contains(self, other)) {\r\n            // replace other with the last element\r\n            self.members[self.memberIndices[other] - 1] = self.members[length(self) - 1];\r\n            // reflect this change in the indices\r\n            self.memberIndices[self.members[self.memberIndices[other] - 1]] = self.memberIndices[other];\r\n            delete self.memberIndices[other];\r\n            // remove the last element\r\n            self.members.pop();\r\n        }\r\n    }\r\n\r\n    /// @dev Checks set membership.\r\n    /// @param self The set to check membership in.\r\n    /// @param other The element to check membership of.\r\n    /// @return true if the element is in the set, false otherwise.\r\n    function contains(Set storage self, address other) public view returns (bool) {\r\n        return ( // solium-disable-line operator-whitespace\r\n        self.memberIndices[other] > 0 &&\r\n        self.members.length >= self.memberIndices[other] &&\r\n        self.members[self.memberIndices[other] - 1] == other\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the number of elements in a set.\r\n    /// @param self The set to check the length of.\r\n    /// @return The number of elements in the set.\r\n    function length(Set storage self) public view returns (uint) {\r\n        return self.members.length;\r\n    }\r\n}\r\n\r\n// File: node_modules\\zos-lib\\contracts\\upgradeability\\Proxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\ncontract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  function () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize)\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize)\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize) }\r\n      default { return(0, returndatasize) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() internal {\r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n// File: node_modules\\zos-lib\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary ZOSLibAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: node_modules\\zos-lib\\contracts\\upgradeability\\BaseUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.implementation\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(ZOSLibAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n// File: node_modules\\zos-lib\\contracts\\upgradeability\\UpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\ncontract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n// File: node_modules\\zos-lib\\contracts\\upgradeability\\BaseAdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"org.zeppelinos.proxy.admin\", and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n// File: zos-lib\\contracts\\upgradeability\\AdminUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\r\n    _setAdmin(_admin);\r\n  }\r\n}\r\n\r\n// File: contracts\\upgradeability\\OwnedUpgradeabilityProxy.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @notice This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract OwnedUpgradeabilityProxy is AdminUpgradeabilityProxy {\r\n\r\n    /**\r\n     * Contract constructor.\r\n     * It sets the `msg.sender` as the proxy administrator.\r\n     * @param _implementation address of the initial implementation.\r\n     * @param _admin upgradeability admin.\r\n     */\r\n    constructor(address _implementation, address _admin) AdminUpgradeabilityProxy(_implementation, _admin, \"\") public {\r\n    }\r\n\r\n    /**\r\n     * @notice Only fall back when the sender is not the admin.\r\n     */\r\n    function _willFallback() internal {\r\n    }\r\n}\r\n\r\n// File: contracts\\upgradeability\\ParameterizedInitializable.sol\r\n\r\npragma solidity >=0.4.24 <0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract ParameterizedInitializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    mapping(string => bool) private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    mapping(string => bool) private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initiator(string memory _label) {\r\n        require(initializing[_label] || isConstructor() || !initialized[_label], \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing[_label];\r\n        if (isTopLevelCall) {\r\n            initializing[_label] = true;\r\n            initialized[_label] = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing[_label] = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        assembly {cs := extcodesize\r\n        (address) }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\governance\\Governance.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ethereum-based governance contract\r\n */\r\ncontract Governance is IGovernance, ParameterizedInitializable, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n    using OperationStore for uint256[];\r\n    using AddressSet for AddressSet.Set;\r\n\r\n    /** XRM token */\r\n    ERC20 public token;\r\n\r\n    /** Bond required for delegate to be registered with validator role. Should be more than 100M */\r\n    uint256 public validatorBond;\r\n\r\n    /** Bond required for delegate to be registered with masternode role. Should be more than 10M */\r\n    uint256 public masternodeBond;\r\n\r\n    /** User used to upgrade governance or delegate contracts. Owner by default */\r\n    address public upgradeAdmin;\r\n\r\n    /** User used to penalty delegate. Owner by default */\r\n    address public governingCouncil;\r\n\r\n    /** Delegate template */\r\n    address public delegateTemplate;\r\n\r\n    /** List of all attester */\r\n    AddressSet.Set internal attesters;\r\n\r\n    /** List of all delegates */\r\n    AddressSet.Set internal delegates;\r\n\r\n    /** List of delegates bond history */\r\n    mapping(address => uint256[]) public bondHistory;\r\n\r\n    /** Delegate role mapping  */\r\n    mapping(address => Enums.DelegateRole) public delegateRoles;\r\n\r\n    struct Voting {\r\n        bytes32 id;\r\n        Enums.VotingCategory category;\r\n        address account;\r\n        bytes32 data;\r\n        uint256 votingPeriod;\r\n        uint256 timestamp;\r\n        bool supported;\r\n        mapping(address => bool) votes;\r\n        AddressSet.Set voters;\r\n    }\r\n\r\n    /** List of active votings */\r\n    mapping(bytes32 => Voting) private votings;\r\n\r\n    event UpgradeAdminUpdated(address admin);\r\n    event GoverningCouncilUpdated(address admin);\r\n    event UpdateDelegateTemplate(address template);\r\n\r\n    event DelegateCreated(address indexed delegate, address indexed owner);\r\n    event DelegateUnregistered(address indexed delegate);\r\n    event DelegateBondIncreased(address indexed delegate, uint256 amount);\r\n    event DelegateBondSlashed(address indexed delegate, uint256 amount);\r\n    event DelegateRoleUpdated(address indexed delegate, Enums.DelegateRole indexed role);\r\n\r\n    event ProposalSubmitted(bytes32 indexed id, address indexed author, address indexed delegate, bytes32 data, Enums.VotingCategory category);\r\n    event Vote(bytes32 indexed id, address indexed voter, bool inFavor);\r\n    event VotingFinalized(bytes32 indexed id, bool voted, bool supported, uint256 proponentsWeight, uint256 opponentsWeight);\r\n    event AttesterApproved(address indexed attester);\r\n    event AttesterSuspended(address indexed attester);\r\n\r\n    /** Check if delegate is known **/\r\n    modifier onlyKnownDelegate(address delegate) {\r\n        require(delegates.contains(delegate), 'Delegate is unknown');\r\n        _;\r\n    }\r\n\r\n    /** Check if sender governing council **/\r\n    modifier onlyGoverningCouncil() {\r\n        require(msg.sender == governingCouncil, 'msg.sender should be governance council');\r\n        _;\r\n    }\r\n\r\n    /** Check if the sender is a upgrade admin **/\r\n    modifier onlyUpgradeAdmin {\r\n        require(msg.sender == upgradeAdmin, 'msg.sender should be upgrade admin');\r\n        _;\r\n    }\r\n\r\n    /** Check if the sender is a valid delegate **/\r\n    modifier onlyValidDelegate {\r\n        require(isDelegateValid(msg.sender, now), 'Delegate is not valid');\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Governance initializer\r\n    * @param _owner Governance owner address\r\n    * @param _token XRM token address\r\n    * @param _validatorBond Validator delegate bond to be sent to create new delegate\r\n    * @param _masternodeBond Masternode delegate bond to be sent to create new delegate\r\n    */\r\n    function init(\r\n        address _owner, address _token, address _delegateTemplate, uint256 _validatorBond, uint256 _masternodeBond\r\n    ) initiator(\"v1\") public {\r\n        require(_owner != address(0), 'Owner is empty');\r\n        require(_token != address(0), 'Token address is empty');\r\n        require(_delegateTemplate != address(0), 'Delegate template is empty');\r\n        require(_validatorBond >= _masternodeBond, 'Validator bond should not be less than masternode one');\r\n\r\n        Ownable.initialize(_owner);\r\n        token = ERC20(_token);\r\n        delegateTemplate = _delegateTemplate;\r\n\r\n        validatorBond = _validatorBond;\r\n        masternodeBond = _masternodeBond;\r\n        upgradeAdmin = _owner;\r\n        governingCouncil = _owner;\r\n    }\r\n\r\n    /**\r\n    * @notice Set admin who can upgrade delegate contracts\r\n    * @param _admin New upgradeability admin\r\n    */\r\n    function setUpgradeAdmin(address _admin) external onlyOwner {\r\n        upgradeAdmin = _admin;\r\n        emit UpgradeAdminUpdated(_admin);\r\n    }\r\n\r\n    /**\r\n    * @notice Set governing council\r\n    * @param _address New governing council address\r\n    */\r\n    function setGoverningCouncil(address _address) external onlyOwner {\r\n        governingCouncil = _address;\r\n        emit GoverningCouncilUpdated(_address);\r\n    }\r\n\r\n    /**\r\n    * @notice Set delegate template\r\n    * @param _template New delegate template\r\n    */\r\n    function setDelegateTemplate(address _template) external onlyUpgradeAdmin {\r\n        delegateTemplate = _template;\r\n        emit UpdateDelegateTemplate(_template);\r\n    }\r\n\r\n    /**\r\n    * @notice Set new validator bond\r\n    * @param _bond New bond amount\r\n    */\r\n    function setValidatorBond(uint256 _bond) external onlyOwner {\r\n        require(_bond > 0, 'Provided bond is 0');\r\n        require(_bond >= masternodeBond, 'Validator bond should not be less than masternode one');\r\n\r\n        validatorBond = _bond;\r\n    }\r\n\r\n    /**\r\n    * @notice Set new masternode bond\r\n    * @param _bond New bond amount\r\n    */\r\n    function setMasternodeBond(uint256 _bond) external onlyOwner {\r\n        require(_bond > 0, 'Provided bond is 0');\r\n        require(validatorBond >= _bond, 'Validator bond should not be less than masternode one');\r\n\r\n        masternodeBond = _bond;\r\n    }\r\n\r\n    /**\r\n    * @notice Get governing council address\r\n    */\r\n    function getGoverningCouncil() external view returns (address) {\r\n        return governingCouncil;\r\n    }\r\n\r\n    /**\r\n    * @notice Get delegate template\r\n    */\r\n    function getDelegateTemplate() external view returns (address) {\r\n        return delegateTemplate;\r\n    }\r\n\r\n    /**\r\n    * @notice Whether specified delegate is known by governance, created by governance\r\n    * @param _delegate Delegate address to check\r\n    */\r\n    function isDelegateKnown(address _delegate) public view returns (bool) {\r\n        return delegates.contains(_delegate);\r\n    }\r\n\r\n    /**\r\n    * @notice Create new delegate contract, get bond and transfer ownership to a caller\r\n    * @param _name Delegate name\r\n    * @param _signer Delegate Signer address\r\n    * @param _bond Delegate bond amount\r\n    */\r\n    function createDelegate(bytes32 _name, address _signer, uint256 _bond) external returns (address) {\r\n        require(_bond >= masternodeBond, 'Bond should be more than masternode bond');\r\n        address delegateOwner = msg.sender;\r\n\r\n        token.safeTransferFrom(delegateOwner, address(this), _bond);\r\n\r\n        // Setup delegate proxy\r\n        OwnedUpgradeabilityProxy proxy = new OwnedUpgradeabilityProxy(address(delegateTemplate), upgradeAdmin);\r\n        address delegateAddress = address(proxy);\r\n\r\n        // Init delegate via proxy\r\n        IDelegate(delegateAddress).init(delegateOwner, token, address(this), _name, _signer);\r\n\r\n        delegates.insert(delegateAddress);\r\n        bondHistory[delegateAddress].storeInt(_bond);\r\n\r\n        emit DelegateCreated(delegateAddress, delegateOwner);\r\n\r\n        return delegateAddress;\r\n    }\r\n\r\n    /**\r\n    * @notice Launches delegate, activates and sets a proper role\r\n    * @param _isAttested Delegate is attested or not\r\n    */\r\n    function launchDelegate(bool _isAttested) external onlyKnownDelegate(msg.sender) {\r\n        if(bondOfDelegateNow(msg.sender) >= validatorBond && _isAttested) {\r\n            IDelegate(msg.sender).activate();\r\n            delegateRoles[msg.sender] = Enums.DelegateRole.VALIDATOR;\r\n            emit DelegateRoleUpdated(msg.sender, Enums.DelegateRole.VALIDATOR);\r\n        } else if(bondOfDelegateNow(msg.sender) >= masternodeBond) {\r\n            IDelegate(msg.sender).activate();\r\n            delegateRoles[msg.sender] = Enums.DelegateRole.MASTERNODE;\r\n            emit DelegateRoleUpdated(msg.sender, Enums.DelegateRole.MASTERNODE);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Unregister specified delegate. Can only be called by delegate itself. It's not possible to register back. Only new delegate.\r\n    */\r\n    function unregisterDelegate() external onlyKnownDelegate(msg.sender) {\r\n        address delegateAddress = msg.sender;\r\n        IDelegate delegate = IDelegate(delegateAddress);\r\n\r\n        // Make sure delegate not suspended\r\n        require(!delegate.isSuspendedNow(), 'Delegate is suspended');\r\n\r\n        // Return all bond back\r\n        uint256 bond = bondOfDelegateNow(delegateAddress);\r\n        bondHistory[delegateAddress].storeInt(0);\r\n        token.safeTransfer(delegate.owner(), bond);\r\n\r\n        // Set role to NONE\r\n        delegateRoles[delegateAddress] = Enums.DelegateRole.NONE;\r\n\r\n        // Deactivate delegate\r\n        delegate.deactivate();\r\n\r\n        emit DelegateUnregistered(delegateAddress);\r\n    }\r\n\r\n    /**\r\n    * @notice Slash suspended delegate bond to governing council\r\n    * @param _delegate Delegate address\r\n    * @param _amount Tokens amount\r\n    */\r\n    function slashBond(address _delegate, uint256 _amount) external onlyGoverningCouncil {\r\n        require(isDelegateKnown(_delegate), 'Delegate is unknown');\r\n\r\n        IDelegate delegate = IDelegate(_delegate);\r\n        require(delegate.isSuspended(now), 'Delegate is not suspended');\r\n\r\n        uint256 bond = bondOfDelegateNow(_delegate);\r\n        require(bond >= _amount, 'Bond should be larger than slashing amount');\r\n\r\n        bondHistory[_delegate].storeInt(bond.sub(_amount));\r\n        token.safeTransfer(governingCouncil, _amount);\r\n\r\n        emit DelegateBondSlashed(_delegate, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Increase bond for specified delegate, should be used when unregistered delegate wants to be registered again\r\n    * @param _delegate Delegate which will receive bond\r\n    * @param _amount Bond amount\r\n    */\r\n    function increaseBond(address _delegate, uint256 _amount) external onlyKnownDelegate(_delegate) {\r\n        token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        bondHistory[_delegate].storeInt(bondOfDelegateNow(_delegate).add(_amount));\r\n\r\n        emit DelegateBondIncreased(_delegate, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Approves specified attester. Can only be called by owner.\r\n    * @param _attester Attester address\r\n    */\r\n    function approveAttester(address _attester) external onlyGoverningCouncil {\r\n        require(_attester != address(0), 'Attester address is empty');\r\n\r\n        attesters.insert(_attester);\r\n        emit AttesterApproved(_attester);\r\n    }\r\n\r\n    /**\r\n    * @notice Suspends specified attester. Can only be called by owner.\r\n    * @param _attester Attester address\r\n    */\r\n    function suspendAttester(address _attester) external onlyGoverningCouncil {\r\n        require(_attester != address(0), 'Attester address is empty');\r\n\r\n        attesters.remove(_attester);\r\n        emit AttesterSuspended(_attester);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns list of attesters\r\n    */\r\n    function getAttesters() external view returns (address[] memory) {\r\n        return attesters.members;\r\n    }\r\n\r\n    /**\r\n    * @notice Whether specified attester is valid.\r\n    * @param _attester Attesters address to check\r\n    */\r\n    function isAttesterValid(address _attester) external view returns (bool) {\r\n        return attesters.contains(_attester);\r\n    }\r\n\r\n    /**\r\n    * @notice List of composers and their ballot power for the specified block number and timestamp. This method is used by Clients\r\n    ** @param _blockNum Network block number. Used for delegates list shifting\r\n    * @param _timestamp Time at which composers list is requested\r\n    */\r\n    function getComposers(uint256 /* _blockNum */, uint256 _timestamp) external view returns (address[] memory, uint256[] memory) {\r\n        address[] memory validDelegates = getValidDelegatesAddresses(_timestamp);\r\n        (address[] memory signerAddresses,) = _getDelegatesNameAndSignerAddresses(validDelegates);\r\n        uint256[] memory powers = _getDelegatesBallotPower(validDelegates, _timestamp);\r\n        return (signerAddresses, powers);\r\n    }\r\n\r\n    /**\r\n    * @notice List of all delegates addresses\r\n    */\r\n    function getAllDelegatesAddresses() public view returns (address[] memory) {\r\n        return delegates.members;\r\n    }\r\n\r\n    /**\r\n    * @notice Returns all delegates details\r\n    */\r\n    function getAllDelegatesDetails() external view returns (address[] memory, address[] memory, bytes32[] memory) {\r\n        address[] memory allDelegates = getAllDelegatesAddresses();\r\n        (address[] memory signerAddresses, bytes32[] memory names) = _getDelegatesNameAndSignerAddresses(allDelegates);\r\n        return (allDelegates, signerAddresses, names);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns number of all delegates\r\n    */\r\n    function getAllDelegatesCount() external view returns (uint256) {\r\n        return delegates.length();\r\n    }\r\n\r\n    /**\r\n    * @notice Returns details for given list of addresses\r\n    * @param _delegates List of delegates\r\n    * @param _timestamp Time at which delegates list is requested\r\n    */\r\n    function _getDelegatesDetails(address[] memory _delegates, uint256 _timestamp) internal view returns (address[] memory, address[] memory, bytes32[] memory, uint256[] memory) {\r\n        (address[] memory signerAddresses, bytes32[] memory names) = _getDelegatesNameAndSignerAddresses(_delegates);\r\n        uint256[] memory powers = _getDelegatesBallotPower(_delegates, _timestamp);\r\n        return (_delegates, signerAddresses, names, powers);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns names and signer addresses for given list of addresses\r\n    * @param _delegates List of delegates\r\n    */\r\n    function _getDelegatesNameAndSignerAddresses(address[] memory _delegates) internal view returns (address[] memory, bytes32[] memory) {\r\n        address[] memory signerAddresses = new address[](_delegates.length);\r\n        bytes32[] memory names = new bytes32[](_delegates.length);\r\n\r\n        for (uint256 index = 0; index < _delegates.length; index++) {\r\n            IDelegate delegate = IDelegate(_delegates[index]);\r\n            signerAddresses[index] = delegate.getSignerAddress();\r\n            names[index] = delegate.getNameAsBytes();\r\n        }\r\n\r\n        return (signerAddresses, names);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns delegates ballot power for given list of addresses\r\n    * @param _delegates List of delegates\r\n    * @param _timestamp Time to check at\r\n    */\r\n    function _getDelegatesBallotPower(address[] memory _delegates, uint256 _timestamp) internal view returns (uint256[] memory) {\r\n        uint256[] memory powers = new uint256[](_delegates.length);\r\n\r\n        (uint256 totalBonds, uint256 totalStakes) = _totalBondsAndStakes(_delegates, _timestamp);\r\n        for (uint256 index = 0; index < _delegates.length; index++) {\r\n            powers[index] = _ballotPower(_delegates[index], _timestamp, totalBonds, totalStakes);\r\n        }\r\n\r\n        return powers;\r\n    }\r\n\r\n    /**\r\n    * @notice Returns total bonds and stakes for all valid delegates\r\n    * @param _delegate Delegate address\r\n    */\r\n    function getDelegateBallotPowerAsOfNow(address _delegate) external view returns (uint256) {\r\n        return getDelegateBallotPower(_delegate, now);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns total bonds and stakes for all valid delegates at some time\r\n    * @param _delegate Delegate address\r\n    * @param _timestamp Time at to check\r\n    */\r\n    function getDelegateBallotPower(address _delegate, uint256 _timestamp) public view returns (uint256) {\r\n        address[] memory validDelegates = getValidDelegatesAddresses(_timestamp);\r\n        (uint256 bondTotal, uint256 stakeTotal) = _totalBondsAndStakes(validDelegates, _timestamp);\r\n        return _ballotPower(_delegate, _timestamp, bondTotal, stakeTotal);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns total bonds and stakes as of now\r\n    */\r\n    function totalBondsAndStakesAsOfNow() external view returns (uint256, uint256) {\r\n        return totalBondsAndStakes(now);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns total bonds and stakes\r\n    * @param _timestamp Time at which delegates calculation to be done\r\n    */\r\n    function totalBondsAndStakes(uint256 _timestamp) public view returns (uint256, uint256) {\r\n        address[] memory validDelegates = getValidDelegatesAddresses(_timestamp);\r\n        return _totalBondsAndStakes(validDelegates, _timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns valid delegates count\r\n    */\r\n    function getValidDelegatesCount() public view returns (uint256) {\r\n        address[] memory validDelegates = getValidDelegatesAddresses(now);\r\n        return validDelegates.length;\r\n    }\r\n\r\n    /**\r\n    * @notice Returns valid delegates\r\n    * @param _timestamp Time at which delegates list is requested\r\n    */\r\n    function getValidDelegatesDetails(uint256 _timestamp) external view returns (address[] memory, address[] memory, bytes32[] memory, uint256[] memory) {\r\n        address[] memory validDelegates = getValidDelegatesAddresses(_timestamp);\r\n        return _getDelegatesDetails(validDelegates, _timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns single valid delegate details as array\r\n    * @param _index Delegate index\r\n    * @param _timestamp Time at which delegate is requested\r\n    */\r\n    function getValidDelegateDetailsAsArray(uint256 _index, uint256 _timestamp) external view returns (address[] memory, address[] memory, bytes32[] memory, uint256[] memory) {\r\n        address[] memory validDelegates = getValidDelegatesAddresses(_timestamp);\r\n        require(_index < validDelegates.length, \"Delegate index is out of range\");\r\n\r\n        address[] memory singleDelegate = new address[](1);\r\n        singleDelegate[1] = validDelegates[_index];\r\n        return _getDelegatesDetails(singleDelegate, _timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice List of valid delegates for as of now\r\n    */\r\n    function getValidDelegatesAddressesAsOfNow() external view returns (address[] memory) {\r\n        return getValidDelegatesAddresses(now);\r\n    }\r\n\r\n    /**\r\n    * @notice List of valid delegates for given timestamp\r\n    * @param _timestamp Time at which delegates list is requested\r\n    */\r\n    function getValidDelegatesAddresses(uint256 _timestamp) public view returns (address[] memory) {\r\n        uint256 count = 0;\r\n        address[] memory validDelegates = new address[](delegates.length());\r\n        for (uint256 index = 0; index < delegates.length(); index++) {\r\n            if (isDelegateValid(delegates.members[index], _timestamp)) {\r\n                validDelegates[count] = delegates.members[index];\r\n                count++;\r\n            }\r\n        }\r\n\r\n        address[] memory result = new address[](count);\r\n        for (uint256 index = 0; index < count; index++) {\r\n            result[index] = validDelegates[index];\r\n        }\r\n\r\n        return (result);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns total bonds and stakes of delegates list at given timestamp\r\n    * @param _delegates Delegate to calculate bonds at stakes\r\n    * @param _timestamp Time to check on\r\n    */\r\n    function _totalBondsAndStakes(address[] memory _delegates, uint256 _timestamp) internal view returns (uint256, uint256) {\r\n        uint256 bondTotal = 0;\r\n        uint256 stakeTotal = 0;\r\n        for (uint256 index = 0; index < _delegates.length; index++) {\r\n            address delegate = _delegates[index];\r\n            bondTotal = bondTotal.add(bondOfDelegate(delegate, _timestamp));\r\n            stakeTotal = stakeTotal.add(IDelegate(delegate).stakeOfDelegate(_timestamp));\r\n        }\r\n        return (bondTotal, stakeTotal);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns ballot power based on delegate total bond and stakes\r\n    * @param _delegate Delegate address to calculate bond for\r\n    * @param _timestamp Time to check at\r\n    * @param _totalBond Total delegates bond\r\n    * @param _totalStake Total delegates stake\r\n    */\r\n    function _ballotPower(address _delegate, uint256 _timestamp, uint256 _totalBond, uint256 _totalStake) internal view returns (uint256) {\r\n        uint256 bond = bondOfDelegate(_delegate, _timestamp);\r\n        uint256 delegateStake = IDelegate(_delegate).stakeOfDelegate(_timestamp);\r\n        if (_totalStake == 0) {\r\n            return bond;\r\n        }\r\n        // BP = DelegateBondedTokensNumber + BondedTokensTotal * DelegateTokensStaked / TotalTokensStaked\r\n        return bond.add(_totalBond.mul(delegateStake).div(_totalStake));\r\n    }\r\n\r\n    /**\r\n    * @notice Whether specified delegate can be a composer\r\n    * @param _delegate Delegate address to validate\r\n    * @param _timestamp Time at which check is requested\r\n    */\r\n    function isDelegateValid(address _delegate, uint256 _timestamp) public view returns (bool) {\r\n        if (!delegates.contains(_delegate)) {\r\n            // Delegate not owned by this contract\r\n            return false;\r\n        }\r\n        IDelegate proxy = IDelegate(_delegate);\r\n        // Delegate has not been activated\r\n        if (!proxy.isActive(_timestamp)) {\r\n            return false;\r\n        }\r\n        // Delegate has not been suspended\r\n        if (proxy.isSuspended(_timestamp)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Checks if delegate is validator\r\n    * @param _delegate Delegate to be checked\r\n    */\r\n    function isValidator(address _delegate) external view returns (bool) {\r\n        return delegateRoles[_delegate] == Enums.DelegateRole.VALIDATOR;\r\n    }\r\n\r\n    /**\r\n    * @notice Returns role of delegate\r\n    * @param _delegate Delegate\r\n    */\r\n    function roleOfDelegate(address _delegate) external view returns (Enums.DelegateRole) {\r\n        return delegateRoles[_delegate];\r\n    }\r\n\r\n    /**\r\n    * @notice Returns delegate bond at specific point in time\r\n    * @param _delegate Delegate\r\n    * @param _timestamp Time to be checked\r\n    */\r\n    function bondOfDelegate(address _delegate, uint256 _timestamp) public view returns (uint256) {\r\n        return bondHistory[_delegate].getInt(_timestamp);\r\n    }\r\n\r\n    /**\r\n    * @notice Returns delegate bond\r\n    * @param _delegate Delegate\r\n    */\r\n    function bondOfDelegateNow(address _delegate) public view returns (uint256) {\r\n        return bondHistory[_delegate].getInt(now);\r\n    }\r\n\r\n    /**\r\n    * @notice Make generic proposal\r\n    * @param _id Voting id\r\n    * @param _category Voting category\r\n    * @param _address Delegate / Attester affected by voting\r\n    * @param _data Extra data or data for arbitrary voting\r\n    * @param _votingPeriod Period when delegates can vote from proposal submission\r\n    */\r\n    function submitProposal(bytes32 _id, Enums.VotingCategory _category, address _address, bytes32 _data, uint256 _votingPeriod) public onlyValidDelegate {\r\n        // make sure voting is unique\r\n        require(votings[_id].id != _id, 'Voting with this id already exists');\r\n\r\n        AddressSet.Set memory voters;\r\n        Voting memory voting = Voting({\r\n            id : _id,\r\n            category : _category,\r\n            account : _address,\r\n            data: _data,\r\n            votingPeriod : _votingPeriod,\r\n            timestamp : now,\r\n            supported : false,\r\n            voters : voters\r\n        });\r\n\r\n        votings[_id] = voting;\r\n\r\n        emit ProposalSubmitted(_id, msg.sender, _address, _data, _category);\r\n    }\r\n\r\n    /**\r\n    * @notice Vote in favor or against proposal with the specified identifier\r\n    * @param _id Voting id\r\n    * @param _inFavor Support proposal or not\r\n    */\r\n    function vote(bytes32 _id, bool _inFavor) external onlyValidDelegate {\r\n        Voting storage voting = votings[_id];\r\n        // have specified blacklist voting\r\n        require(voting.id == _id, 'Voting is not valid');\r\n        // voting is still active\r\n        require(voting.timestamp.add(voting.votingPeriod) > now, 'Voting has already ended');\r\n\r\n        address voter = msg.sender;\r\n        voting.voters.insert(voter);\r\n        voting.votes[voter] = _inFavor;\r\n\r\n        emit Vote(_id, voter, _inFavor);\r\n    }\r\n\r\n    /**\r\n    * @notice Finalize voting and apply proposed changes if success.\r\n    * This method will fail if voting period is not over.\r\n    * @param _id Voting id\r\n    */\r\n    function finalizeVoting(bytes32 _id) external {\r\n        bool voted;\r\n        bool supported;\r\n        uint256 proponentsWeight;\r\n        uint256 opponentsWeight;\r\n        Voting storage voting = votings[_id];\r\n\r\n        // Check if we have specified blacklist voting\r\n        require(voting.id == _id, 'Voting is not valid');\r\n        // Check if voting period if finished\r\n        require(voting.timestamp.add(voting.votingPeriod) <= now, 'Voting has not ended yet');\r\n\r\n        // Only valid delegates will be counted during the voting\r\n        address[] memory validVoters = _filterOutInvalidDelegates(voting.voters.members);\r\n\r\n        // Votings to accepted requires at least 30% of delegates voted\r\n        uint256 requiredVotesNumber = getValidDelegatesCount().mul(3).div(10);\r\n        if (validVoters.length >= requiredVotesNumber) {\r\n            voted = true;\r\n\r\n            (supported, proponentsWeight, opponentsWeight) = _isVotingSupported(validVoters, voting.votes);\r\n            if (supported) {\r\n                _handleVotingConfirmation(voting.category, voting.account);\r\n            }\r\n        }\r\n\r\n        voting.supported = supported;\r\n\r\n        emit VotingFinalized(_id, voted, supported, proponentsWeight, opponentsWeight);\r\n    }\r\n\r\n    /**\r\n    * @notice Checks if voting supported and calculate votes total\r\n    * @param _voters List of voters\r\n    * @param _votes  List of votes\r\n    */\r\n    function _isVotingSupported(address[] memory _voters, mapping (address => bool) storage _votes) internal view returns (bool, uint256, uint256) {\r\n        uint256 proponentsWeight;\r\n        uint256 opponentsWeight;\r\n\r\n        // We get total stakes and bonds for ballot power calculation optimization\r\n        (uint256 bondTotal, uint256 stakeTotal) = _totalBondsAndStakes(_voters, now);\r\n\r\n        for (uint256 index = 0; index < _voters.length; index++) {\r\n            address delegate = _voters[index];\r\n            // Calculate ballot power and add to total\r\n            uint256 power = _ballotPower(delegate, now, bondTotal, stakeTotal);\r\n            if (_votes[delegate]) {\r\n                proponentsWeight = proponentsWeight.add(power);\r\n            } else {\r\n                opponentsWeight = opponentsWeight.add(power);\r\n            }\r\n        }\r\n\r\n        return (proponentsWeight > opponentsWeight, proponentsWeight, opponentsWeight);\r\n    }\r\n\r\n    /**\r\n    * @notice Handle voting success\r\n    * @param _category Voting category\r\n    * @param _account Account being voted\r\n    */\r\n    function _handleVotingConfirmation(Enums.VotingCategory _category, address _account) internal {\r\n        // Handle voting results\r\n        if (_category == Enums.VotingCategory.APPROVE_ATTESTER) {\r\n            attesters.insert(_account);\r\n            emit AttesterApproved(_account);\r\n        }\r\n        if (_category == Enums.VotingCategory.SUSPEND_ATTESTER) {\r\n            attesters.remove(_account);\r\n            emit AttesterSuspended(_account);\r\n        }\r\n        if (_category == Enums.VotingCategory.SUSPEND_DELEGATE) {\r\n            IDelegate(_account).suspend();\r\n        }\r\n        if (_category == Enums.VotingCategory.UNSUSPEND_DELEGATE) {\r\n            IDelegate(_account).unsuspend();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Filters out valid delegates from the list\r\n    * @param _delegates Delegates addresses\r\n    */\r\n    function _filterOutInvalidDelegates(address[] memory _delegates) internal view returns (address[] memory) {\r\n        uint256 count = 0;\r\n        address[] memory voters = new address[](_delegates.length);\r\n        for (uint256 index = 0; index < _delegates.length; index++) {\r\n            if (isDelegateValid(_delegates[index], now)) {\r\n                voters[index] = _delegates[index];\r\n                count++;\r\n            }\r\n        }\r\n\r\n        address[] memory result = new address[](count);\r\n        uint256 innerIndex = 0;\r\n        for (uint256 index = 0; index < voters.length; index++) {\r\n            if (voters[index] != address(0)) {\r\n                result[innerIndex] = voters[index];\r\n                innerIndex++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @notice Returns voting details by id\r\n    * @param _id Voting id\r\n    */\r\n    function getVotingDetails(bytes32 _id) external view returns (bytes32, Enums.VotingCategory, address, bytes32, uint256, address[] memory, bool[] memory, bool) {\r\n        Voting storage voting = votings[_id];\r\n        address[] storage voters = voting.voters.members;\r\n\r\n        bool[] memory votes = new bool[](voters.length);\r\n        for (uint256 index = 0; index < voters.length; index++) {\r\n            votes[index] = voting.votes[voters[index]];\r\n        }\r\n\r\n        return (voting.id, voting.category, voting.account, voting.data, voting.timestamp, voters, votes, voting.supported);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"AttesterApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"AttesterSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegateBondIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegateBondSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DelegateCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum Enums.DelegateRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"DelegateRoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DelegateUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"GoverningCouncilUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum Enums.VotingCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"UpdateDelegateTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"UpgradeAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"inFavor\",\"type\":\"bool\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proponentsWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opponentsWeight\",\"type\":\"uint256\"}],\"name\":\"VotingFinalized\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attester\",\"type\":\"address\"}],\"name\":\"approveAttester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"bondOfDelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"bondOfDelegateNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"createDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateRoles\",\"outputs\":[{\"internalType\":\"enum Enums.DelegateRole\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegateTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"finalizeVoting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDelegatesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDelegatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDelegatesDetails\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAttesters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getComposers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDelegateBallotPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"getDelegateBallotPowerAsOfNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDelegateTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGoverningCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getValidDelegateDetailsAsArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getValidDelegatesAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidDelegatesAddressesAsOfNow\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidDelegatesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getValidDelegatesDetails\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getVotingDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enum Enums.VotingCategory\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governingCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseBond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegateTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_masternodeBond\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attester\",\"type\":\"address\"}],\"name\":\"isAttesterValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"isDelegateKnown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isDelegateValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAttested\",\"type\":\"bool\"}],\"name\":\"launchDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masternodeBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"roleOfDelegate\",\"outputs\":[{\"internalType\":\"enum Enums.DelegateRole\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"setDelegateTemplate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGoverningCouncil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setMasternodeBond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setUpgradeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setValidatorBond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slashBond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"enum Enums.VotingCategory\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"}],\"name\":\"submitProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attester\",\"type\":\"address\"}],\"name\":\"suspendAttester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"totalBondsAndStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBondsAndStakesAsOfNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unregisterDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_inFavor\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"AddressSet:52bf4380ae9190c331f5ac6358bcc15d8edbf22c","LicenseType":"MIT","SwarmSource":"bzzr://8c967bba8af29e7aba6c72bd3e8d8ba87c3fac68d33e0bb05aec08bd34fa821f"}]}