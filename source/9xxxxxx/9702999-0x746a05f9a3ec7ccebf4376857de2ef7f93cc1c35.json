{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n// version 1.14\r\n\r\ncontract ArtoryRecordStamper {\r\n    event Stamped(bytes32 dataHash);\r\n    event StampedRecord(bytes32 dataHash, string recordID);\r\n\r\n    // Indexed strings are hashed to keep data of consistent length for searching, so partner is given twice,\r\n    // once as a plain parameter and once as an indexed parameter\r\n    event StampedPartnerRecord(bytes32 dataHash, string recordID, string partner, string indexed indexedPartner);\r\n\r\n    event Message(string message);\r\n\r\n    address private _owner;\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Sender not authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function stamp(bytes32 dataHash)\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit Stamped(dataHash);\r\n    }\r\n\r\n    function stamp_array(bytes32[] memory dataHashes)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(dataHashes.length <= 255, \"Stamps per transaction limited to 255\");\r\n\r\n        for (uint i = 0; i < dataHashes.length; i++) {\r\n            emit Stamped(dataHashes[i]);\r\n        }\r\n    }\r\n\r\n    function stamp_record(bytes32 dataHash, string memory recordID)\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit StampedRecord(dataHash, recordID);\r\n    }\r\n\r\n    function stamp_record_array(bytes32[] memory dataHashes, string[] memory recordIDs)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            dataHashes.length <= 255,\r\n            \"Stamps per transaction limited to 255\"\r\n        );\r\n\r\n        require(\r\n            dataHashes.length == recordIDs.length,\r\n            \"Number of recordsIDs must match number of dataHashes\"\r\n        );\r\n\r\n        for (uint i = 0; i < dataHashes.length; i++) {\r\n            emit StampedRecord(dataHashes[i], recordIDs[i]);\r\n        }\r\n    }\r\n\r\n    function stamp_partner_record(bytes32 dataHash, string memory recordID, string memory partner)\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit StampedPartnerRecord(dataHash, recordID, partner, partner);\r\n    }\r\n\r\n    function stamp_partner_record_array(bytes32[] memory dataHashes, string[] memory recordIDs, string[] memory partners)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            dataHashes.length <= 255,\r\n            \"Stamps per transaction limited to 255\"\r\n        );\r\n\r\n        require(\r\n            dataHashes.length == recordIDs.length,\r\n            \"Number of recordsIDs must match number of dataHashes\"\r\n        );\r\n\r\n        require(\r\n            dataHashes.length == partners.length,\r\n            \"Number of partners must match number of dataHashes\"\r\n        );\r\n\r\n        for (uint i = 0; i < dataHashes.length; i++) {\r\n            emit StampedPartnerRecord(dataHashes[i], recordIDs[i], partners[i], partners[i]);\r\n        }\r\n    }\r\n\r\n    function broadcast_message(string memory str)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            bytes(str).length <= 128,\r\n            \"Message must be shorter than 128 characters\"\r\n        );\r\n        emit Message(str);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"Stamped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recordID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"partner\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedPartner\",\"type\":\"string\"}],\"name\":\"StampedPartnerRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recordID\",\"type\":\"string\"}],\"name\":\"StampedRecord\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"broadcast_message\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"stamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataHashes\",\"type\":\"bytes32[]\"}],\"name\":\"stamp_array\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"recordID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"partner\",\"type\":\"string\"}],\"name\":\"stamp_partner_record\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"recordIDs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"partners\",\"type\":\"string[]\"}],\"name\":\"stamp_partner_record_array\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"recordID\",\"type\":\"string\"}],\"name\":\"stamp_record\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"recordIDs\",\"type\":\"string[]\"}],\"name\":\"stamp_record_array\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ArtoryRecordStamper","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://df20c34cbc6f954f12f6b67a01cea40c3f2bc370ebe519a3977b05562ab9a62d"}]}