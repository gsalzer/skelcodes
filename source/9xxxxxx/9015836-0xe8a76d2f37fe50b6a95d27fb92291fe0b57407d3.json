{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ncontract KyberNetwork {\r\n\r\n    function getExpectedRate(\r\n        ERC20 src,\r\n        ERC20 dest,\r\n        uint srcQty\r\n    )\r\n        public\r\n        view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function trade(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address payable destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId\r\n    )\r\n        public\r\n        payable\r\n        returns(uint);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns ceil(a / b).\r\n    */\r\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        if(a % b == 0) {\r\n            return c;\r\n        }\r\n        else {\r\n            return c + 1;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract to define an owner.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\r\n     * @param _newOwner The new owner.\r\n     */\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Address must not be null\");\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Managed\r\n * @dev Basic contract that defines a set of managers. Only the owner can add/remove managers.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract Managed is Owned {\r\n\r\n    // The managers\r\n    mapping (address => bool) public managers;\r\n\r\n    /**\r\n     * @dev Throws if the sender is not a manager.\r\n     */\r\n    modifier onlyManager {\r\n        require(managers[msg.sender] == true, \"M: Must be manager\");\r\n        _;\r\n    }\r\n\r\n    event ManagerAdded(address indexed _manager);\r\n    event ManagerRevoked(address indexed _manager);\r\n\r\n    /**\r\n    * @dev Adds a manager. \r\n    * @param _manager The address of the manager.\r\n    */\r\n    function addManager(address _manager) external onlyOwner {\r\n        require(_manager != address(0), \"M: Address must not be null\");\r\n        if(managers[_manager] == false) {\r\n            managers[_manager] = true;\r\n            emit ManagerAdded(_manager);\r\n        }        \r\n    }\r\n\r\n    /**\r\n    * @dev Revokes a manager.\r\n    * @param _manager The address of the manager.\r\n    */\r\n    function revokeManager(address _manager) external onlyOwner {\r\n        require(managers[_manager] == true, \"M: Target must be an existing manager\");\r\n        delete managers[_manager];\r\n        emit ManagerRevoked(_manager);\r\n    }\r\n}\r\n\r\ncontract TokenPriceProvider is Managed {\r\n\r\n    // Mock token address for ETH\r\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public cachedPrices;\r\n\r\n    // Address of the KyberNetwork contract\r\n    KyberNetwork public kyberNetwork;\r\n\r\n    constructor(KyberNetwork _kyberNetwork) public {\r\n        kyberNetwork = _kyberNetwork;\r\n    }\r\n\r\n    function setPrice(ERC20 _token, uint256 _price) public onlyManager {\r\n        cachedPrices[address(_token)] = _price;\r\n    }\r\n\r\n    function setPriceForTokenList(ERC20[] calldata _tokens, uint256[] calldata _prices) external onlyManager {\r\n        for(uint16 i = 0; i < _tokens.length; i++) {\r\n            setPrice(_tokens[i], _prices[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts the value of _amount tokens in ether.\r\n     * @param _amount the amount of tokens to convert (in 'token wei' twei)\r\n     * @param _token the ERC20 token contract\r\n     * @return the ether value (in wei) of _amount tokens with contract _token\r\n     */\r\n    function getEtherValue(uint256 _amount, address _token) external view returns (uint256) {\r\n        uint256 decimals = ERC20(_token).decimals();\r\n        uint256 price = cachedPrices[_token];\r\n        return price.mul(_amount).div(10**decimals);\r\n    }\r\n\r\n    //\r\n    // The following is added to be backward-compatible with Argent's old backend\r\n    //\r\n\r\n    function setKyberNetwork(KyberNetwork _kyberNetwork) external onlyManager {\r\n        kyberNetwork = _kyberNetwork;\r\n    }\r\n\r\n    function syncPrice(ERC20 _token) external {\r\n        require(address(kyberNetwork) != address(0), \"Kyber sync is disabled\");\r\n        (uint256 expectedRate,) = kyberNetwork.getExpectedRate(_token, ERC20(ETH_TOKEN_ADDRESS), 10000);\r\n        cachedPrices[address(_token)] = expectedRate;\r\n    }\r\n\r\n    function syncPriceForTokenList(ERC20[] calldata _tokens) external {\r\n        require(address(kyberNetwork) != address(0), \"Kyber sync is disabled\");\r\n        for(uint16 i = 0; i < _tokens.length; i++) {\r\n            (uint256 expectedRate,) = kyberNetwork.getExpectedRate(_tokens[i], ERC20(ETH_TOKEN_ADDRESS), 10000);\r\n            cachedPrices[address(_tokens[i])] = expectedRate;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"revokeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberNetwork\",\"type\":\"address\"}],\"name\":\"setKyberNetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPriceForTokenList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cachedPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetwork\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEtherValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"syncPriceForTokenList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"syncPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyberNetwork\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"TokenPriceProvider","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://27a5df10e1821c22d4b6ac94b0317bbe962fd0a8d3c1e87ed3ab0458b21996c1"}]}