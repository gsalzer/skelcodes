{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n/** @title  A contract for generating unique identifiers\r\n  *\r\n  * @notice  A contract that provides an identifier generation scheme,\r\n  * guaranteeing uniqueness across all contracts that inherit from it,\r\n  * as well as the unpredictability of future identifiers.\r\n  *\r\n  * @dev  This contract is intended to be inherited by any contract that\r\n  * implements the callback software pattern for cooperative custodianship.\r\n  *\r\n*/\r\ncontract LockRequestable {\r\n\r\n    // MEMBERS\r\n    /// @notice  the count of all invocations of `generateLockId`.\r\n    uint256 public lockRequestCount;\r\n\r\n    // CONSTRUCTOR\r\n    constructor() public {\r\n        lockRequestCount = 0;\r\n    }\r\n\r\n    // FUNCTIONS\r\n    /** @notice  Returns a fresh unique identifier.\r\n      *\r\n      * @dev the generation scheme uses three components.\r\n      * First, the blockhash of the previous block.\r\n      * Second, the deployed address.\r\n      * Third, the next value of the counter.\r\n      * This ensures that identifiers are unique across all contracts\r\n      * following this scheme, and that future identifiers are\r\n      * unpredictable.\r\n      *\r\n      * @return a 32-byte unique identifier.\r\n    */\r\n    function generateLockId() internal returns (bytes32 lockId) {\r\n        return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n\r\n    // METHODS\r\n\r\n    // NOTE:\r\n    //   public getter functions are not currently recognised as an\r\n    //   implementation of the matching abstract function by the compiler.\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#name\r\n    // function name() public view returns (string);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol\r\n    // function symbol() public view returns (string);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n    // function decimals() public view returns (uint8);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#balanceof\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transferfrom\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#allowance\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // EVENTS\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approval\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/** @title  A dual control contract.\r\n  *\r\n  * @notice  A general-purpose contract that implements dual control over\r\n  * co-operating contracts through a callback mechanism.\r\n  *\r\n  * @dev  This contract implements dual control through a 2-of-N\r\n  * threshold multi-signature scheme. The contract recognizes a set of N signers,\r\n  * and will unlock requests with signatures from any distinct pair of them.\r\n  * This contract signals the unlocking through a co-operative callback\r\n  * scheme.\r\n  * This contract also provides time lock and revocation features.\r\n  * Requests made by a 'primary' account have a default time lock applied.\r\n  * All other requests must pay a 1 ETH stake and have an extended time lock\r\n  * applied.\r\n  * A request that is completed will prevent all previous pending requests\r\n  * that share the same callback from being completed: this is the\r\n  * revocation feature.\r\n  *\r\n  */\r\ncontract Custodian {\r\n\r\n    // TYPES\r\n    /** @dev  The `Request` struct stores a pending unlocking.\r\n      * `callbackAddress` and `callbackSelector` are the data required to\r\n      * make a callback. The custodian completes the process by\r\n      * calling `callbackAddress.call(callbackSelector, lockId)`, which\r\n      * signals to the contract co-operating with the Custodian that\r\n      * the 2-of-N signatures have been provided and verified.\r\n      */\r\n    struct Request {\r\n        bytes32 lockId;\r\n        bytes4 callbackSelector;  // bytes4 and address can be packed into 1 word\r\n        address callbackAddress;\r\n        uint256 idx;\r\n        uint256 timestamp;\r\n        bool extended;\r\n    }\r\n\r\n    // EVENTS\r\n    /// @dev  Emitted by successful `requestUnlock` calls.\r\n    event Requested(\r\n        bytes32 _lockId,\r\n        address _callbackAddress,\r\n        bytes4 _callbackSelector,\r\n        uint256 _nonce,\r\n        address _whitelistedAddress,\r\n        bytes32 _requestMsgHash,\r\n        uint256 _timeLockExpiry\r\n    );\r\n\r\n    /// @dev  Emitted by `completeUnlock` calls on requests in the time-locked state.\r\n    event TimeLocked(\r\n        uint256 _timeLockExpiry,\r\n        bytes32 _requestMsgHash\r\n    );\r\n\r\n    /// @dev  Emitted by successful `completeUnlock` calls.\r\n    event Completed(\r\n        bytes32 _lockId,\r\n        bytes32 _requestMsgHash,\r\n        address _signer1,\r\n        address _signer2\r\n    );\r\n\r\n    /// @dev  Emitted by `completeUnlock` calls where the callback failed.\r\n    event Failed(\r\n        bytes32 _lockId,\r\n        bytes32 _requestMsgHash,\r\n        address _signer1,\r\n        address _signer2\r\n    );\r\n\r\n    /// @dev  Emitted by successful `extendRequestTimeLock` calls.\r\n    event TimeLockExtended(\r\n        uint256 _timeLockExpiry,\r\n        bytes32 _requestMsgHash\r\n    );\r\n\r\n     // MEMBERS\r\n    /** @dev  The count of all requests.\r\n      * This value is used as a nonce, incorporated into the request hash.\r\n      */\r\n    uint256 public requestCount;\r\n\r\n    /// @dev  The set of signers: signatures from two signers unlock a pending request.\r\n    mapping (address => bool) public signerSet;\r\n\r\n    /// @dev  The map of request hashes to pending requests.\r\n    mapping (bytes32 => Request) public requestMap;\r\n\r\n    /// @dev  The map of callback addresses to callback selectors to request indexes.\r\n    mapping (address => mapping (bytes4 => uint256)) public lastCompletedIdxs;\r\n\r\n    /** @dev  The default period (in seconds) to time-lock requests.\r\n      * All requests will be subject to this default time lock, and the duration\r\n      * is fixed at contract creation.\r\n      */\r\n    uint256 public defaultTimeLock;\r\n\r\n    /** @dev  The extended period (in seconds) to time-lock requests.\r\n      * Requests not from the primary account are subject to this time lock.\r\n      * The primary account may also elect to extend the time lock on requests\r\n      * that originally received the default.\r\n      */\r\n    uint256 public extendedTimeLock;\r\n\r\n    /// @dev  The primary account is the privileged account for making requests.\r\n    address public primary;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(\r\n        address[] memory _signers,\r\n        uint256 _defaultTimeLock,\r\n        uint256 _extendedTimeLock,\r\n        address _primary\r\n    )\r\n        public\r\n    {\r\n        // check for at least two `_signers`\r\n        require(_signers.length >= 2, \"at least two `_signers`\");\r\n\r\n         // validate time lock params\r\n        require(_defaultTimeLock <= _extendedTimeLock, \"valid timelock params\");\r\n        defaultTimeLock = _defaultTimeLock;\r\n        extendedTimeLock = _extendedTimeLock;\r\n\r\n        primary = _primary;\r\n\r\n        // explicitly initialize `requestCount` to zero\r\n        requestCount = 0;\r\n        // turn the array into a set\r\n        for (uint i = 0; i < _signers.length; i++) {\r\n            // no zero addresses or duplicates\r\n            require(_signers[i] != address(0) && !signerSet[_signers[i]], \"no zero addresses or duplicates\");\r\n            signerSet[_signers[i]] = true;\r\n        }\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyPrimary {\r\n        require(msg.sender == primary, \"only primary\");\r\n        _;\r\n    }\r\n\r\n     modifier onlySigner {\r\n        require(signerSet[msg.sender], \"only signer\");\r\n        _;\r\n    }\r\n\r\n    // METHODS\r\n    /** @notice  Requests an unlocking with a lock identifier and a callback.\r\n      *\r\n      * @dev  If called by an account other than the primary a 1 ETH stake\r\n      * must be paid. When the request is unlocked stake will be transferred to the message sender.\r\n      * This is an anti-spam measure. As well as the callback\r\n      * and the lock identifier parameters a 'whitelisted address' is required\r\n      * for compatibility with existing signature schemes.\r\n      *\r\n      * @param  _lockId  The identifier of a pending request in a co-operating contract.\r\n      * @param  _callbackAddress  The address of a co-operating contract.\r\n      * @param  _callbackSelector  The function selector of a function within\r\n      * the co-operating contract at address `_callbackAddress`.\r\n      * @param  _whitelistedAddress  An address whitelisted in existing\r\n      * offline control protocols.\r\n      *\r\n      * @return  requestMsgHash  The hash of a request message to be signed.\r\n    */\r\n    function requestUnlock(\r\n        bytes32 _lockId,\r\n        address _callbackAddress,\r\n        bytes4 _callbackSelector,\r\n        address _whitelistedAddress\r\n    )\r\n        public\r\n        payable\r\n        returns (bytes32 requestMsgHash)\r\n    {\r\n        require(msg.sender == primary || msg.value >= 1 ether, \"sender is primary or stake is paid\");\r\n\r\n        // disallow using a zero value for the callback address\r\n        require(_callbackAddress != address(0), \"no zero value for callback address\");\r\n\r\n        uint256 requestIdx = ++requestCount;\r\n        // compute a nonce value\r\n        // - the blockhash prevents prediction of future nonces\r\n        // - the address of this contract prevents conflicts with co-operating contracts using this scheme\r\n        // - the counter prevents conflicts arising from multiple txs within the same block\r\n        uint256 nonce = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), requestIdx)));\r\n\r\n        requestMsgHash = keccak256(\r\n            abi.encodePacked(\r\n                nonce,\r\n                _whitelistedAddress,\r\n                uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n            )\r\n        );\r\n        requestMap[requestMsgHash] = Request({\r\n            lockId: _lockId,\r\n            callbackSelector: _callbackSelector,\r\n            callbackAddress: _callbackAddress,\r\n            idx: requestIdx,\r\n            timestamp: block.timestamp,\r\n            extended: false\r\n        });\r\n\r\n        // compute the expiry time\r\n        uint256 timeLockExpiry = block.timestamp;\r\n        if (msg.sender == primary) {\r\n            timeLockExpiry += defaultTimeLock;\r\n        } else {\r\n            timeLockExpiry += extendedTimeLock;\r\n\r\n            // any sender that is not the creator will get the extended time lock\r\n            requestMap[requestMsgHash].extended = true;\r\n        }\r\n\r\n        emit Requested(_lockId, _callbackAddress, _callbackSelector, nonce, _whitelistedAddress, requestMsgHash, timeLockExpiry);\r\n    }\r\n\r\n    /** @notice  Completes a pending unlocking with two signatures.\r\n      *\r\n      * @dev  Given a request message hash as two signatures of it from\r\n      * two distinct signers in the signer set, this function completes the\r\n      * unlocking of the pending request by executing the callback.\r\n      *\r\n      * @param  _requestMsgHash  The request message hash of a pending request.\r\n      * @param  _recoveryByte1  The public key recovery byte (27 or 28)\r\n      * @param  _ecdsaR1  The R component of an ECDSA signature (R, S) pair\r\n      * @param  _ecdsaS1  The S component of an ECDSA signature (R, S) pair\r\n      * @param  _recoveryByte2  The public key recovery byte (27 or 28)\r\n      * @param  _ecdsaR2  The R component of an ECDSA signature (R, S) pair\r\n      * @param  _ecdsaS2  The S component of an ECDSA signature (R, S) pair\r\n      *\r\n      * @return  success  True if the callback successfully executed.\r\n    */\r\n    function completeUnlock(\r\n        bytes32 _requestMsgHash,\r\n        uint8 _recoveryByte1, bytes32 _ecdsaR1, bytes32 _ecdsaS1,\r\n        uint8 _recoveryByte2, bytes32 _ecdsaR2, bytes32 _ecdsaS2\r\n    )\r\n        public\r\n        onlySigner\r\n        returns (bool success)\r\n    {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n\r\n        // copy storage to locals before `delete`\r\n        bytes32 lockId = request.lockId;\r\n        address callbackAddress = request.callbackAddress;\r\n        bytes4 callbackSelector = request.callbackSelector;\r\n\r\n        // failing case of the lookup if the callback address is zero\r\n        require(callbackAddress != address(0), \"no zero value for callback address\");\r\n\r\n        // reject confirms of earlier withdrawals buried under later confirmed withdrawals\r\n        require(request.idx > lastCompletedIdxs[callbackAddress][callbackSelector],\r\n        \"reject confirms of earlier withdrawals buried under later confirmed withdrawals\");\r\n\r\n        address signer1 = ecrecover(\r\n            keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _requestMsgHash)),\r\n            _recoveryByte1,\r\n            _ecdsaR1,\r\n            _ecdsaS1\r\n        );\r\n        require(signerSet[signer1], \"signer is set\");\r\n\r\n        address signer2 = ecrecover(\r\n            keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _requestMsgHash)),\r\n            _recoveryByte2,\r\n            _ecdsaR2,\r\n            _ecdsaS2\r\n        );\r\n        require(signerSet[signer2], \"signer is set\");\r\n        require(signer1 != signer2, \"signers are different\");\r\n\r\n        if (request.extended && ((block.timestamp - request.timestamp) < extendedTimeLock)) {\r\n            emit TimeLocked(request.timestamp + extendedTimeLock, _requestMsgHash);\r\n            return false;\r\n        } else if ((block.timestamp - request.timestamp) < defaultTimeLock) {\r\n            emit TimeLocked(request.timestamp + defaultTimeLock, _requestMsgHash);\r\n            return false;\r\n        } else {\r\n            if (address(this).balance > 0) {\r\n                // reward sender with anti-spam payments\r\n                msg.sender.transfer(address(this).balance);\r\n            }\r\n\r\n            // raise the waterline for the last completed unlocking\r\n            lastCompletedIdxs[callbackAddress][callbackSelector] = request.idx;\r\n            // and delete the request\r\n            delete requestMap[_requestMsgHash];\r\n\r\n            // invoke callback\r\n            (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));\r\n\r\n            if (success) {\r\n                emit Completed(lockId, _requestMsgHash, signer1, signer2);\r\n            } else {\r\n                emit Failed(lockId, _requestMsgHash, signer1, signer2);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @notice  Reclaim the storage of a pending request that is uncompletable.\r\n      *\r\n      * @dev  If a pending request shares the callback (address and selector) of\r\n      * a later request has been completed, then the request can no longer\r\n      * be completed. This function will reclaim the contract storage of the\r\n      * pending request.\r\n      *\r\n      * @param  _requestMsgHash  The request message hash of a pending request.\r\n    */\r\n    function deleteUncompletableRequest(bytes32 _requestMsgHash) public {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n\r\n        uint256 idx = request.idx;\r\n\r\n        require(0 < idx && idx < lastCompletedIdxs[request.callbackAddress][request.callbackSelector],\r\n        \"there must be a completed latter request with same callback\");\r\n\r\n        delete requestMap[_requestMsgHash];\r\n    }\r\n\r\n    /** @notice  Extend the time lock of a pending request.\r\n      *\r\n      * @dev  Requests made by the primary account receive the default time lock.\r\n      * This function allows the primary account to apply the extended time lock\r\n      * to one its own requests.\r\n      *\r\n      * @param  _requestMsgHash  The request message hash of a pending request.\r\n    */\r\n    function extendRequestTimeLock(bytes32 _requestMsgHash) public onlyPrimary {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_requestMsgHash` is received\r\n        require(request.callbackAddress != address(0), \"reject ‘null’ results from the map lookup\");\r\n\r\n        // `extendRequestTimeLock` must be idempotent\r\n        require(request.extended != true, \"`extendRequestTimeLock` must be idempotent\");\r\n\r\n        // set the `extended` flag; note that this is never unset\r\n        request.extended = true;\r\n\r\n        emit TimeLockExtended(request.timestamp + extendedTimeLock, _requestMsgHash);\r\n    }\r\n}\r\n\r\n/** @title  A contract to inherit upgradeable custodianship.\r\n  *\r\n  * @notice  A contract that provides re-usable code for upgradeable\r\n  * custodianship. That custodian may be an account or another contract.\r\n  *\r\n  * @dev  This contract is intended to be inherited by any contract\r\n  * requiring a custodian to control some aspect of its functionality.\r\n  * This contract provides the mechanism for that custodianship to be\r\n  * passed from one custodian to the next.\r\n  *\r\n*/\r\ncontract CustodianUpgradeable is LockRequestable {\r\n\r\n    // TYPES\r\n    /// @dev  The struct type for pending custodian changes.\r\n    struct CustodianChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    // MEMBERS\r\n    /// @dev  The address of the account or contract that acts as the custodian.\r\n    address public custodian;\r\n\r\n    /// @dev  The map of lock ids to pending custodian changes.\r\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(\r\n        address _custodian\r\n    )\r\n      LockRequestable()\r\n      public\r\n    {\r\n        custodian = _custodian;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        require(msg.sender == custodian, \"only custodian\");\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n\r\n    /** @notice  Requests a change of the custodian associated with this contract.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      *\r\n      * @param  _proposedCustodian  The address of the new custodian.\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\r\n        require(_proposedCustodian != address(0), \"no null value for `_proposedCustodian`\");\r\n\r\n        lockId = generateLockId();\r\n\r\n        custodianChangeReqs[lockId] = CustodianChangeRequest({\r\n            proposedNew: _proposedCustodian\r\n        });\r\n\r\n        emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\r\n    }\r\n\r\n    /** @notice  Confirms a pending change of the custodian associated with this contract.\r\n      *\r\n      * @dev  When called by the current custodian with a lock id associated with a\r\n      * pending custodian change, the `address custodian` member will be updated with the\r\n      * requested address.\r\n      *\r\n      * @param  _lockId  The identifier of a pending change request.\r\n      */\r\n    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\r\n        custodian = getCustodianChangeReq(_lockId);\r\n\r\n        delete custodianChangeReqs[_lockId];\r\n\r\n        emit CustodianChangeConfirmed(_lockId, custodian);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\r\n        CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_lockId` is received\r\n        require(changeRequest.proposedNew != address(0), \"reject ‘null’ results from the map lookup\");\r\n\r\n        return changeRequest.proposedNew;\r\n    }\r\n\r\n    //EVENTS\r\n    /// @dev  Emitted by successful `requestCustodianChange` calls.\r\n    event CustodianChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedCustodian\r\n    );\r\n\r\n    /// @dev Emitted by successful `confirmCustodianChange` calls.\r\n    event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\r\n}\r\n\r\n/** @title  A contract to inherit upgradeable token implementations.\r\n  *\r\n  * @notice  A contract that provides re-usable code for upgradeable\r\n  * token implementations. It itself inherits from `CustodianUpgradable`\r\n  * as the upgrade process is controlled by the custodian.\r\n  *\r\n  * @dev  This contract is intended to be inherited by any contract\r\n  * requiring a reference to the active token implementation, either\r\n  * to delegate calls to it, or authorize calls from it. This contract\r\n  * provides the mechanism for that implementation to be replaced,\r\n  * which constitutes an implementation upgrade.\r\n  *\r\n  */\r\ncontract ERC20ImplUpgradeable is CustodianUpgradeable  {\r\n\r\n    // TYPES\r\n    /// @dev  The struct type for pending implementation changes.\r\n    struct ImplChangeRequest {\r\n        address proposedNew;\r\n    }\r\n\r\n    // MEMBERS\r\n    // @dev  The reference to the active token implementation.\r\n    ERC20Impl public erc20Impl;\r\n\r\n    /// @dev  The map of lock ids to pending implementation changes.\r\n    mapping (bytes32 => ImplChangeRequest) public implChangeReqs;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(address _custodian) CustodianUpgradeable(_custodian) public {\r\n        erc20Impl = ERC20Impl(0x0);\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyImpl {\r\n        require(msg.sender == address(erc20Impl), \"only ERC20Impl\");\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (UPGRADE)\r\n    /** @notice  Requests a change of the active implementation associated\r\n      * with this contract.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      *\r\n      * @param  _proposedImpl  The address of the new active implementation.\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {\r\n        require(_proposedImpl != address(0), \"no null value for `_proposedImpl`\");\r\n\r\n        lockId = generateLockId();\r\n\r\n        implChangeReqs[lockId] = ImplChangeRequest({\r\n            proposedNew: _proposedImpl\r\n        });\r\n\r\n        emit ImplChangeRequested(lockId, msg.sender, _proposedImpl);\r\n    }\r\n\r\n    /** @notice  Confirms a pending change of the active implementation\r\n      * associated with this contract.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending change, the `ERC20Impl erc20Impl` member will be updated\r\n      * with the requested address.\r\n      *\r\n      * @param  _lockId  The identifier of a pending change request.\r\n      */\r\n    function confirmImplChange(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl = getImplChangeReq(_lockId);\r\n\r\n        delete implChangeReqs[_lockId];\r\n\r\n        emit ImplChangeConfirmed(_lockId, address(erc20Impl));\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n    function getImplChangeReq(bytes32 _lockId) private view returns (ERC20Impl _proposedNew) {\r\n        ImplChangeRequest storage changeRequest = implChangeReqs[_lockId];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_lockId` is received\r\n        require(changeRequest.proposedNew != address(0), \"reject ‘null’ results from the map lookup\");\r\n\r\n        return ERC20Impl(changeRequest.proposedNew);\r\n    }\r\n\r\n    //EVENTS\r\n    /// @dev  Emitted by successful `requestImplChange` calls.\r\n    event ImplChangeRequested(\r\n        bytes32 _lockId,\r\n        address _msgSender,\r\n        address _proposedImpl\r\n    );\r\n\r\n    /// @dev Emitted by successful `confirmImplChange` calls.\r\n    event ImplChangeConfirmed(bytes32 _lockId, address _newImpl);\r\n}\r\n\r\n/** @title  Public interface to ERC20 compliant token.\r\n  *\r\n  * @notice  This contract is a permanent entry point to an ERC20 compliant\r\n  * system of contracts.\r\n  *\r\n  * @dev  This contract contains no business logic and instead\r\n  * delegates to an instance of ERC20Impl. This contract also has no storage\r\n  * that constitutes the operational state of the token. This contract is\r\n  * upgradeable in the sense that the `custodian` can update the\r\n  * `erc20Impl` address, thus redirecting the delegation of business logic.\r\n  * The `custodian` is also authorized to pass custodianship.\r\n  *\r\n*/\r\ncontract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable {\r\n\r\n    // MEMBERS\r\n    /// @notice  Returns the name of the token.\r\n    string public name;\r\n\r\n    /// @notice  Returns the symbol of the token.\r\n    string public symbol;\r\n\r\n    /// @notice  Returns the number of decimals the token uses.\r\n    uint8 public decimals;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        address _custodian\r\n    )\r\n        ERC20ImplUpgradeable(_custodian)\r\n        public\r\n    {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (ERC20Interface)\r\n    /** @notice  Returns the total token supply.\r\n      *\r\n      * @return  the total token supply.\r\n      */\r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Impl.totalSupply();\r\n    }\r\n\r\n    /** @notice  Returns the account balance of another account with an address\r\n      * `_owner`.\r\n      *\r\n      * @return  balance  the balance of account with address `_owner`.\r\n      */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Impl.balanceOf(_owner);\r\n    }\r\n\r\n    /** @dev Internal use only.\r\n      */\r\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /** @notice  Transfers `_value` amount of tokens to address `_to`.\r\n      *\r\n      * @dev Will fire the `Transfer` event. Will revert if the `_from`\r\n      * account balance does not have enough tokens to spend.\r\n      *\r\n      * @return  success  true if transfer completes.\r\n      */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferWithSender(msg.sender, _to, _value);\r\n    }\r\n\r\n    /** @notice  Transfers `_value` amount of tokens from address `_from`\r\n      * to address `_to`.\r\n      *\r\n      * @dev  Will fire the `Transfer` event. Will revert unless the `_from`\r\n      * account has deliberately authorized the sender of the message\r\n      * via some mechanism.\r\n      *\r\n      * @return  success  true if transfer completes.\r\n      */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    /** @dev Internal use only.\r\n      */\r\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n\r\n    /** @notice  Allows `_spender` to withdraw from your account multiple times,\r\n      * up to the `_value` amount. If this function is called again it\r\n      * overwrites the current allowance with _value.\r\n      *\r\n      * @dev  Will fire the `Approval` event.\r\n      *\r\n      * @return  success  true if approval completes.\r\n      */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        return erc20Impl.approveWithSender(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /** @notice Increases the amount `_spender` is allowed to withdraw from\r\n      * your account.\r\n      * This function is implemented to avoid the race condition in standard\r\n      * ERC20 contracts surrounding the `approve` method.\r\n      *\r\n      * @dev  Will fire the `Approval` event. This function should be used instead of\r\n      * `approve`.\r\n      *\r\n      * @return  success  true if approval completes.\r\n      */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\r\n    }\r\n\r\n    /** @notice  Decreases the amount `_spender` is allowed to withdraw from\r\n      * your account. This function is implemented to avoid the race\r\n      * condition in standard ERC20 contracts surrounding the `approve` method.\r\n      *\r\n      * @dev  Will fire the `Approval` event. This function should be used\r\n      * instead of `approve`.\r\n      *\r\n      * @return  success  true if approval completes.\r\n      */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\r\n    }\r\n\r\n    /** @notice  Returns how much `_spender` is currently allowed to spend from\r\n      * `_owner`'s balance.\r\n      *\r\n      * @return  remaining  the remaining allowance.\r\n      */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Impl.allowance(_owner, _spender);\r\n    }\r\n}\r\n\r\n/** @title  ERC20 compliant token balance store.\r\n  *\r\n  * @notice  This contract serves as the store of balances, allowances, and\r\n  * supply for the ERC20 compliant token. No business logic exists here.\r\n  *\r\n  * @dev  This contract contains no business logic and instead\r\n  * is the final destination for any change in balances, allowances, or token\r\n  * supply. This contract is upgradeable in the sense that its custodian can\r\n  * update the `erc20Impl` address, thus redirecting the source of logic that\r\n  * determines how the balances will be updated.\r\n  *\r\n  */\r\ncontract ERC20Store is ERC20ImplUpgradeable {\r\n\r\n    // MEMBERS\r\n    /// @dev  The total token supply.\r\n    uint256 public totalSupply;\r\n\r\n    /// @dev  The mapping of balances.\r\n    mapping (address => uint256) public balances;\r\n\r\n    /// @dev  The mapping of allowances.\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(address _custodian) ERC20ImplUpgradeable(_custodian) public {\r\n        totalSupply = 0;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    // (ERC20 Ledger)\r\n\r\n    /** @notice  The function to set the total supply of tokens.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update the total supply. The only authorized caller\r\n      * is the active implementation.\r\n      *\r\n      * @param _newTotalSupply the value to set as the new total supply\r\n      */\r\n    function setTotalSupply(\r\n        uint256 _newTotalSupply\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        totalSupply = _newTotalSupply;\r\n    }\r\n\r\n    /** @notice  Sets how much `_owner` allows `_spender` to transfer on behalf\r\n      * of `_owner`.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update spending allowances. The only authorized caller\r\n      * is the active implementation.\r\n      *\r\n      * @param  _owner  The account that will allow an on-behalf-of spend.\r\n      * @param  _spender  The account that will spend on behalf of the owner.\r\n      * @param  _value  The limit of what can be spent.\r\n      */\r\n    function setAllowance(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        allowed[_owner][_spender] = _value;\r\n    }\r\n\r\n    /** @notice  Sets the balance of `_owner` to `_newBalance`.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update balances. The only authorized caller\r\n      * is the active implementation.\r\n      *\r\n      * @param  _owner  The account that will hold a new balance.\r\n      * @param  _newBalance  The balance to set.\r\n      */\r\n    function setBalance(\r\n        address _owner,\r\n        uint256 _newBalance\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        balances[_owner] = _newBalance;\r\n    }\r\n\r\n    /** @notice Adds `_balanceIncrease` to `_owner`'s balance.\r\n      *\r\n      * @dev  Intended for use by token implementation functions\r\n      * that update balances. The only authorized caller\r\n      * is the active implementation.\r\n      * WARNING: the caller is responsible for preventing overflow.\r\n      *\r\n      * @param  _owner  The account that will hold a new balance.\r\n      * @param  _balanceIncrease  The balance to add.\r\n      */\r\n    function addBalance(\r\n        address _owner,\r\n        uint256 _balanceIncrease\r\n    )\r\n        public\r\n        onlyImpl\r\n    {\r\n        balances[_owner] = balances[_owner] + _balanceIncrease;\r\n    }\r\n}\r\n\r\n/** @title  ERC20 compliant token intermediary contract holding core logic.\r\n  *\r\n  * @notice  This contract serves as an intermediary between the exposed ERC20\r\n  * interface in ERC20Proxy and the store of balances in ERC20Store. This\r\n  * contract contains core logic that the proxy can delegate to\r\n  * and that the store is called by.\r\n  *\r\n  * @dev  This contract contains the core logic to implement the\r\n  * ERC20 specification as well as several extensions.\r\n  * 1. Changes to the token supply.\r\n  * 2. Batched transfers.\r\n  * 3. Relative changes to spending approvals.\r\n  * 4. Delegated transfer control ('sweeping').\r\n  *\r\n  */\r\ncontract ERC20Impl is CustodianUpgradeable {\r\n\r\n    // TYPES\r\n    /// @dev  The struct type for pending increases to the token supply (print).\r\n    struct PendingPrint {\r\n        address receiver;\r\n        uint256 value;\r\n    }\r\n\r\n    // MEMBERS\r\n    /// @dev  The reference to the proxy.\r\n    ERC20Proxy public erc20Proxy;\r\n\r\n    /// @dev  The reference to the store.\r\n    ERC20Store public erc20Store;\r\n\r\n    /// @dev  The sole authorized caller of delegated transfer control ('sweeping').\r\n    address public sweeper;\r\n\r\n    /** @dev  The static message to be signed by an external account that\r\n      * signifies their permission to forward their balance to any arbitrary\r\n      * address. This is used to consolidate the control of all accounts\r\n      * backed by a shared keychain into the control of a single key.\r\n      * Initialized as the concatenation of the address of this contract\r\n      * and the word \"sweep\". This concatenation is done to prevent a replay\r\n      * attack in a subsequent contract, where the sweeping message could\r\n      * potentially be replayed to re-enable sweeping ability.\r\n      */\r\n    bytes32 public sweepMsg;\r\n\r\n    /** @dev  The mapping that stores whether the address in question has\r\n      * enabled sweeping its contents to another account or not.\r\n      * If an address maps to \"true\", it has already enabled sweeping,\r\n      * and thus does not need to re-sign the `sweepMsg` to enact the sweep.\r\n      */\r\n    mapping (address => bool) public sweptSet;\r\n\r\n    /// @dev  The map of lock ids to pending token increases.\r\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\r\n\r\n    /// @dev The map of blocked addresses.\r\n    mapping (address => bool) public blocked;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(\r\n          address _erc20Proxy,\r\n          address _erc20Store,\r\n          address _custodian,\r\n          address _sweeper\r\n    )\r\n        CustodianUpgradeable(_custodian)\r\n        public\r\n    {\r\n        require(_sweeper != address(0), \"no null value for `_sweeper`\");\r\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\r\n        erc20Store = ERC20Store(_erc20Store);\r\n\r\n        sweeper = _sweeper;\r\n        sweepMsg = keccak256(abi.encodePacked(address(this), \"sweep\"));\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyProxy {\r\n        require(msg.sender == address(erc20Proxy), \"only ERC20Proxy\");\r\n        _;\r\n    }\r\n    modifier onlySweeper {\r\n        require(msg.sender == sweeper, \"only sweeper\");\r\n        _;\r\n    }\r\n\r\n\r\n    /** @notice  Core logic of the ERC20 `approve` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has an `approve` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the approval in a proxy.\r\n      */\r\n    function approveWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0), \"no null value for `_spender`\");\r\n        require(blocked[_sender] != true, \"_sender must not be blocked\");\r\n        require(blocked[_spender] != true, \"_spender must not be blocked\");\r\n        erc20Store.setAllowance(_sender, _spender, _value);\r\n        erc20Proxy.emitApproval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Core logic of the `increaseApproval` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has an `increaseApproval` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the approval.\r\n      */\r\n    function increaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0),\"no null value for_spender\");\r\n        require(blocked[_sender] != true, \"_sender must not be blocked\");\r\n        require(blocked[_spender] != true, \"_spender must not be blocked\");\r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance + _addedValue;\r\n\r\n        require(newAllowance >= currentAllowance, \"new allowance must not be smaller than previous\");\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Core logic of the `decreaseApproval` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has a `decreaseApproval` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the approval.\r\n      */\r\n    function decreaseApprovalWithSender(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_spender != address(0), \"no unspendable approvals\"); // disallow unspendable approvals\r\n        require(blocked[_sender] != true, \"_sender must not be blocked\");\r\n        require(blocked[_spender] != true, \"_spender must not be blocked\");\r\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\r\n        uint256 newAllowance = currentAllowance - _subtractedValue;\r\n\r\n        require(newAllowance <= currentAllowance, \"new allowance must not be smaller than previous\");\r\n\r\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\r\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Requests an increase in the token supply, with the newly created\r\n      * tokens to be added to the balance of the specified account.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      * NOTE: printing to the zero address is disallowed.\r\n      *\r\n      * @param  _receiver  The receiving address of the print, if confirmed.\r\n      * @param  _value  The number of tokens to add to the total supply and the\r\n      * balance of the receiving address, if confirmed.\r\n      *\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {\r\n        require(_receiver != address(0), \"no null value for `_receiver`\");\r\n        require(blocked[msg.sender] != true, \"account blocked\");\r\n        require(blocked[_receiver] != true, \"_receiver must not be blocked\");\r\n        lockId = generateLockId();\r\n\r\n        pendingPrintMap[lockId] = PendingPrint({\r\n            receiver: _receiver,\r\n            value: _value\r\n        });\r\n\r\n        emit PrintingLocked(lockId, _receiver, _value);\r\n    }\r\n\r\n    /** @notice  Confirms a pending increase in the token supply.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending increase, the amount requested to be printed in the print request\r\n      * is printed to the receiving address specified in that same request.\r\n      * NOTE: this function will not execute any print that would overflow the\r\n      * total supply, but it will not revert either.\r\n      *\r\n      * @param  _lockId  The identifier of a pending print request.\r\n      */\r\n    function confirmPrint(bytes32 _lockId) public onlyCustodian {\r\n        PendingPrint storage print = pendingPrintMap[_lockId];\r\n\r\n        // reject ‘null’ results from the map lookup\r\n        // this can only be the case if an unknown `_lockId` is received\r\n        address receiver = print.receiver;\r\n        require (receiver != address(0), \"unknown `_lockId`\");\r\n        uint256 value = print.value;\r\n\r\n        delete pendingPrintMap[_lockId];\r\n\r\n        uint256 supply = erc20Store.totalSupply();\r\n        uint256 newSupply = supply + value;\r\n        if (newSupply >= supply) {\r\n          erc20Store.setTotalSupply(newSupply);\r\n          erc20Store.addBalance(receiver, value);\r\n\r\n          emit PrintingConfirmed(_lockId, receiver, value);\r\n          erc20Proxy.emitTransfer(address(0), receiver, value);\r\n        }\r\n    }\r\n\r\n    /** @notice  Burns the specified value from the sender's balance.\r\n      *\r\n      * @dev  Sender's balanced is subtracted by the amount they wish to burn.\r\n      *\r\n      * @param  _value  The amount to burn.\r\n      *\r\n      * @return success true if the burn succeeded.\r\n      */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(blocked[msg.sender] != true, \"account blocked\");\r\n        uint256 balanceOfSender = erc20Store.balances(msg.sender);\r\n        require(_value <= balanceOfSender, \"disallow burning more, than amount of the balance\");\r\n\r\n        erc20Store.setBalance(msg.sender, balanceOfSender - _value);\r\n        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\r\n\r\n        erc20Proxy.emitTransfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n     /** @notice  Burns the specified value from the balance in question.\r\n      *\r\n      * @dev  Suspected balance is subtracted by the amount which will be burnt.\r\n      *\r\n      * @dev If the suspected balance has less than the amount requested, it will be set to 0.\r\n      *\r\n      * @param  _from  The address of suspected balance.\r\n      *\r\n      * @param  _value  The amount to burn.\r\n      *\r\n      * @return success true if the burn succeeded.\r\n      */\r\n    function burn(address _from, uint256 _value) public onlyCustodian returns (bool success) {\r\n        uint256 balance = erc20Store.balances(_from);\r\n        if(_value <= balance){\r\n            erc20Store.setBalance(_from, balance - _value);\r\n            erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\r\n            erc20Proxy.emitTransfer(_from, address(0), _value);\r\n            emit Wiped(_from, _value, _value, balance - _value);\r\n        }\r\n        else {\r\n            erc20Store.setBalance(_from,0);\r\n            erc20Store.setTotalSupply(erc20Store.totalSupply() - balance);\r\n            erc20Proxy.emitTransfer(_from, address(0), balance);\r\n            emit Wiped(_from, _value, balance, 0);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** @notice  A function for a sender to issue multiple transfers to multiple\r\n      * different addresses at once. This function is implemented for gas\r\n      * considerations when someone wishes to transfer, as one transaction is\r\n      * cheaper than issuing several distinct individual `transfer` transactions.\r\n      *\r\n      * @dev  By specifying a set of destination addresses and values, the\r\n      * sender can issue one transaction to transfer multiple amounts to\r\n      * distinct addresses, rather than issuing each as a separate\r\n      * transaction. The `_tos` and `_values` arrays must be equal length, and\r\n      * an index in one array corresponds to the same index in the other array\r\n      * (e.g. `_tos[0]` will receive `_values[0]`, `_tos[1]` will receive\r\n      * `_values[1]`, and so on.)\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _tos  The destination addresses to receive the transfers.\r\n      * @param  _values  The values for each destination address.\r\n      * @return  success  If transfers succeeded.\r\n      */\r\n    function batchTransfer(address[] memory _tos, uint256[] memory _values) public returns (bool success) {\r\n        require(_tos.length == _values.length, \"_tos and _values must be the same length\");\r\n        require(blocked[msg.sender] != true, \"account blocked\");\r\n        uint256 numTransfers = _tos.length;\r\n        uint256 senderBalance = erc20Store.balances(msg.sender);\r\n\r\n        for (uint256 i = 0; i < numTransfers; i++) {\r\n          address to = _tos[i];\r\n          require(to != address(0), \"no null values for _tos\");\r\n          require(blocked[to] != true, \"_tos must not be blocked\");\r\n          uint256 v = _values[i];\r\n          require(senderBalance >= v, \"insufficient funds\");\r\n\r\n          if (msg.sender != to) {\r\n            senderBalance -= v;\r\n            erc20Store.addBalance(to, v);\r\n          }\r\n          erc20Proxy.emitTransfer(msg.sender, to, v);\r\n        }\r\n\r\n        erc20Store.setBalance(msg.sender, senderBalance);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Enables the delegation of transfer control for many\r\n      * accounts to the sweeper account, transferring any balances\r\n      * as well to the given destination.\r\n      *\r\n      * @dev  An account delegates transfer control by signing the\r\n      * value of `sweepMsg`. The sweeper account is the only authorized\r\n      * caller of this function, so it must relay signatures on behalf\r\n      * of accounts that delegate transfer control to it. Enabling\r\n      * delegation is idempotent and permanent. If the account has a\r\n      * balance at the time of enabling delegation, its balance is\r\n      * also transferred to the given destination account `_to`.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _vs  The array of recovery byte components of the ECDSA signatures.\r\n      * @param  _rs  The array of 'R' components of the ECDSA signatures.\r\n      * @param  _ss  The array of 'S' components of the ECDSA signatures.\r\n      * @param  _to  The destination for swept balances.\r\n      */\r\n    function enableSweep(uint8[] memory _vs, bytes32[] memory _rs, bytes32[] memory _ss, address _to) public onlySweeper {\r\n        require(_to != address(0), \"no null value for `_to`\");\r\n        require(blocked[_to] != true, \"_to must not be blocked\");\r\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length), \"_vs[], _rs[], _ss lengths are different\");\r\n\r\n        uint256 numSignatures = _vs.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i = 0; i < numSignatures; ++i) {\r\n            address from = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",sweepMsg)), _vs[i], _rs[i], _ss[i]);\r\n            require(blocked[from] != true, \"_froms must not be blocked\");\r\n            // ecrecover returns 0 on malformed input\r\n            if (from != address(0)) {\r\n                sweptSet[from] = true;\r\n\r\n                uint256 fromBalance = erc20Store.balances(from);\r\n\r\n                if (fromBalance > 0) {\r\n                    sweptBalance += fromBalance;\r\n\r\n                    erc20Store.setBalance(from, 0);\r\n\r\n                    erc20Proxy.emitTransfer(from, _to, fromBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n          erc20Store.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    /** @notice  For accounts that have delegated, transfer control\r\n      * to the sweeper, this function transfers their balances to the given\r\n      * destination.\r\n      *\r\n      * @dev The sweeper account is the only authorized caller of\r\n      * this function. This function accepts an array of addresses to have their\r\n      * balances transferred for gas efficiency purposes.\r\n      * NOTE: any address for an account that has not been previously enabled\r\n      * will be ignored.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _froms  The addresses to have their balances swept.\r\n      * @param  _to  The destination address of all these transfers.\r\n      */\r\n    function replaySweep(address[] memory _froms, address _to) public onlySweeper {\r\n        require(_to != address(0), \"no null value for `_to`\");\r\n        require(blocked[_to] != true, \"_to must not be blocked\");\r\n        uint256 lenFroms = _froms.length;\r\n        uint256 sweptBalance = 0;\r\n\r\n        for (uint256 i = 0; i < lenFroms; ++i) {\r\n            address from = _froms[i];\r\n            require(blocked[from] != true, \"_froms must not be blocked\");\r\n            if (sweptSet[from]) {\r\n                uint256 fromBalance = erc20Store.balances(from);\r\n\r\n                if (fromBalance > 0) {\r\n                    sweptBalance += fromBalance;\r\n\r\n                    erc20Store.setBalance(from, 0);\r\n\r\n                    erc20Proxy.emitTransfer(from, _to, fromBalance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sweptBalance > 0) {\r\n            erc20Store.addBalance(_to, sweptBalance);\r\n        }\r\n    }\r\n\r\n    /** @notice  Core logic of the ERC20 `transferFrom` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has a `transferFrom` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the transfer in a proxy.\r\n      */\r\n    function transferFromWithSender(\r\n        address _sender,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0), \"no null values for `_to`\");\r\n        require(blocked[_sender] != true, \"_sender must not be blocked\");\r\n        require(blocked[_from] != true, \"_from must not be blocked\");\r\n        require(blocked[_to] != true, \"_to must not be blocked\");\r\n\r\n        uint256 balanceOfFrom = erc20Store.balances(_from);\r\n        require(_value <= balanceOfFrom, \"insufficient funds on `_from` balance\");\r\n\r\n        uint256 senderAllowance = erc20Store.allowed(_from, _sender);\r\n        require(_value <= senderAllowance, \"insufficient allowance amount\");\r\n\r\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Store.setAllowance(_from, _sender, senderAllowance - _value);\r\n\r\n        erc20Proxy.emitTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Core logic of the ERC20 `transfer` function.\r\n      *\r\n      * @dev  This function can only be called by the referenced proxy,\r\n      * which has a `transfer` function.\r\n      * Every argument passed to that function as well as the original\r\n      * `msg.sender` gets passed to this function.\r\n      * NOTE: transfers to the zero address are disallowed.\r\n      *\r\n      * @param  _sender  The address initiating the transfer in a proxy.\r\n      */\r\n    function transferWithSender(\r\n        address _sender,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyProxy\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0), \"no null value for `_to`\");\r\n        require(blocked[_sender] != true, \"_sender must not be blocked\");\r\n        require(blocked[_to] != true, \"_to must not be blocked\");\r\n\r\n        uint256 balanceOfSender = erc20Store.balances(_sender);\r\n        require(_value <= balanceOfSender, \"insufficient funds\");\r\n\r\n        erc20Store.setBalance(_sender, balanceOfSender - _value);\r\n        erc20Store.addBalance(_to, _value);\r\n\r\n        erc20Proxy.emitTransfer(_sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @notice  Transfers the specified value from the balance in question.\r\n      *\r\n      * @dev  Suspected balance is subtracted by the amount which will be transferred.\r\n      *\r\n      * @dev If the suspected balance has less than the amount requested, it will be set to 0.\r\n      *\r\n      * @param  _from  The address of suspected balance.\r\n      *\r\n      * @param  _value  The amount to transfer.\r\n      *\r\n      * @return success true if the transfer succeeded.\r\n      */\r\n    function forceTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        public\r\n        onlyCustodian\r\n        returns (bool success)\r\n    {\r\n        require(_to != address(0), \"no null value for `_to`\");\r\n        uint256 balanceOfSender = erc20Store.balances(_from);\r\n        if(_value <= balanceOfSender) {\r\n            erc20Store.setBalance(_from, balanceOfSender - _value);\r\n            erc20Store.addBalance(_to, _value);\r\n\r\n            erc20Proxy.emitTransfer(_from, _to, _value);\r\n        } else {\r\n            erc20Store.setBalance(_from, 0);\r\n            erc20Store.addBalance(_to, balanceOfSender);\r\n\r\n            erc20Proxy.emitTransfer(_from, _to, balanceOfSender);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // METHODS (ERC20 sub interface impl.)\r\n    /// @notice  Core logic of the ERC20 `totalSupply` function.\r\n    function totalSupply() public view returns (uint256) {\r\n        return erc20Store.totalSupply();\r\n    }\r\n\r\n    /// @notice  Core logic of the ERC20 `balanceOf` function.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return erc20Store.balances(_owner);\r\n    }\r\n\r\n    /// @notice  Core logic of the ERC20 `allowance` function.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return erc20Store.allowed(_owner, _spender);\r\n    }\r\n\r\n    /// @dev internal use only.\r\n    function blockWallet(address wallet) public onlyCustodian returns (bool success) {\r\n        blocked[wallet] = true;\r\n        return true;\r\n    }\r\n\r\n    /// @dev internal use only.\r\n    function unblockWallet(address wallet) public onlyCustodian returns (bool success) {\r\n        blocked[wallet] = false;\r\n        return true;\r\n    }\r\n\r\n    // EVENTS\r\n    /// @dev  Emitted by successful `requestPrint` calls.\r\n    event PrintingLocked(bytes32 _lockId, address _receiver, uint256 _value);\r\n\r\n    /// @dev Emitted by successful `confirmPrint` calls.\r\n    event PrintingConfirmed(bytes32 _lockId, address _receiver, uint256 _value);\r\n\r\n    /** @dev Emitted by successful `confirmWipe` calls.\r\n      *\r\n      * @param _value Amount requested to be burned.\r\n      *\r\n      * @param _burned Amount which was burned.\r\n      *\r\n      * @param _balance Amount left on account after burn.\r\n      *\r\n      * @param _from Account which balance was burned.\r\n      */\r\n     event Wiped(address _from, uint256 _value, uint256 _burned, uint _balance);\r\n}\r\n\r\n/** @title  A contact to govern hybrid control over increases to the token supply and managing accounts.\r\n  *\r\n  * @notice  A contract that acts as a custodian of the active token\r\n  * implementation, and an intermediary between it and the ‘true’ custodian.\r\n  * It preserves the functionality of direct custodianship as well as granting\r\n  * limited control of token supply increases to an additional key.\r\n  *\r\n  * @dev  This contract is a layer of indirection between an instance of\r\n  * ERC20Impl and a custodian. The functionality of the custodianship over\r\n  * the token implementation is preserved (printing and custodian changes),\r\n  * but this contract adds the ability for an additional key\r\n  * (the 'controller') to increase the token supply up to a ceiling,\r\n  * and this supply ceiling can only be raised by the custodian.\r\n  *\r\n  */\r\ncontract Controller is LockRequestable {\r\n\r\n    // TYPES\r\n    /// @dev The struct type for pending ceiling raises.\r\n    struct PendingCeilingRaise {\r\n        uint256 raiseBy;\r\n    }\r\n\r\n    /// @dev The struct type for pending wipes.\r\n    struct wipeAddress {\r\n        uint256 value;\r\n        address from;\r\n    }\r\n\r\n    /// @dev The struct type for pending force transfer requests.\r\n    struct forceTransferRequest {\r\n        uint256 value;\r\n        address from;\r\n        address to;\r\n    }\r\n\r\n    // MEMBERS\r\n    /// @dev  The reference to the active token implementation.\r\n    ERC20Impl public erc20Impl;\r\n\r\n    /// @dev  The address of the account or contract that acts as the custodian.\r\n    Custodian public custodian;\r\n\r\n    /** @dev  The sole authorized caller of limited printing.\r\n      * This account is also authorized to lower the supply ceiling and\r\n      * wiping suspected accounts or force transferring funds from them.\r\n      */\r\n    address public controller;\r\n\r\n    /** @dev  The maximum that the token supply can be increased to\r\n      * through the use of the limited printing feature.\r\n      * The difference between the current total supply and the supply\r\n      * ceiling is what is available to the 'controller' account.\r\n      * The value of the ceiling can only be increased by the custodian.\r\n      */\r\n    uint256 public totalSupplyCeiling;\r\n\r\n    /// @dev  The map of lock ids to pending ceiling raises.\r\n    mapping (bytes32 => PendingCeilingRaise) public pendingRaiseMap;\r\n\r\n    /// @dev  The map of lock ids to pending wipes.\r\n    mapping (bytes32 => wipeAddress[]) public pendingWipeMap;\r\n\r\n    /// @dev  The map of lock ids to pending force transfer requests.\r\n    mapping (bytes32 => forceTransferRequest) public pendingForceTransferRequestMap;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(\r\n        address _erc20Impl,\r\n        address _custodian,\r\n        address _controller,\r\n        uint256 _initialCeiling\r\n    )\r\n        public\r\n    {\r\n        erc20Impl = ERC20Impl(_erc20Impl);\r\n        custodian = Custodian(_custodian);\r\n        controller = _controller;\r\n        totalSupplyCeiling = _initialCeiling;\r\n    }\r\n\r\n    // MODIFIERS\r\n    modifier onlyCustodian {\r\n        require(msg.sender == address(custodian), \"only custodian\");\r\n        _;\r\n    }\r\n    modifier onlyController {\r\n        require(msg.sender == controller, \"only controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySigner {\r\n        require(custodian.signerSet(msg.sender) == true, \"only signer\");\r\n        _;\r\n    }\r\n\r\n    /** @notice  Increases the token supply, with the newly created tokens\r\n      * being added to the balance of the specified account.\r\n      *\r\n      * @dev  The function checks that the value to print does not\r\n      * exceed the supply ceiling when added to the current total supply.\r\n      * NOTE: printing to the zero address is disallowed.\r\n      *\r\n      * @param  _receiver  The receiving address of the print.\r\n      * @param  _value  The number of tokens to add to the total supply and the\r\n      * balance of the receiving address.\r\n      */\r\n    function limitedPrint(address _receiver, uint256 _value) public onlyController {\r\n        uint256 totalSupply = erc20Impl.totalSupply();\r\n        uint256 newTotalSupply = totalSupply + _value;\r\n\r\n        require(newTotalSupply >= totalSupply, \"new total supply overflow\");\r\n        require(newTotalSupply <= totalSupplyCeiling, \"total supply ceiling overflow\");\r\n        erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));\r\n    }\r\n\r\n    /** @notice  Requests wipe of suspected accounts.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Only controller can call this function, and only the custodian\r\n      * can confirm the request.\r\n      *\r\n      * @param  _froms  The array of suspected accounts.\r\n      *\r\n      * @param  _values  array of amounts by which suspected accounts will be wiped.\r\n      *\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestWipe(address[] memory _froms, uint256[] memory _values) public onlyController returns (bytes32 lockId) {\r\n        require(_froms.length == _values.length, \"_froms[] and _values[] must be same length\");\r\n        lockId = generateLockId();\r\n        uint256 amount = _froms.length;\r\n\r\n        for(uint256 i = 0; i < amount; i++) {\r\n            address from = _froms[i];\r\n            uint256 value = _values[i];\r\n            pendingWipeMap[lockId].push(wipeAddress(value, from));\r\n        }\r\n\r\n        emit WipeRequested(lockId);\r\n\r\n        return lockId;\r\n    }\r\n\r\n    /** @notice  Confirms a pending wipe of suspected accounts.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending wipe, the amount requested is burned from the suspected accounts.\r\n      *\r\n      * @param  _lockId  The identifier of a pending wipe request.\r\n      */\r\n    function confirmWipe(bytes32 _lockId) public onlyCustodian {\r\n        uint256 amount = pendingWipeMap[_lockId].length;\r\n        for(uint256 i = 0; i < amount; i++) {\r\n            wipeAddress memory addr = pendingWipeMap[_lockId][i];\r\n            address from = addr.from;\r\n            uint256 value = addr.value;\r\n            erc20Impl.burn(from, value);\r\n        }\r\n\r\n        delete pendingWipeMap[_lockId];\r\n\r\n        emit WipeCompleted(_lockId);\r\n    }\r\n\r\n    /** @notice  Requests force transfer from the suspected account.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Only controller can call this function, and only the custodian\r\n      * can confirm the request.\r\n      *\r\n      * @param  _from  address of suspected account.\r\n      *\r\n      * @param  _to  address of reciever.\r\n      *\r\n      * @param  _value  amount which will be transferred.\r\n      *\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestForceTransfer(address _from, address _to, uint256 _value) public onlyController returns (bytes32 lockId) {\r\n        lockId = generateLockId();\r\n        require (_value != 0, \"no zero value transfers\");\r\n        pendingForceTransferRequestMap[lockId] = forceTransferRequest(_value, _from, _to);\r\n\r\n        emit ForceTransferRequested(lockId, _from, _to, _value);\r\n\r\n        return lockId;\r\n    }\r\n\r\n    /** @notice  Confirms a pending force transfer request.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending transfer request, the amount requested is transferred from the suspected account.\r\n      *\r\n      * @param  _lockId  The identifier of a pending transfer request.\r\n      */\r\n    function confirmForceTransfer(bytes32 _lockId) public onlyCustodian {\r\n        address from = pendingForceTransferRequestMap[_lockId].from;\r\n        address to = pendingForceTransferRequestMap[_lockId].to;\r\n        uint256 value = pendingForceTransferRequestMap[_lockId].value;\r\n\r\n        delete pendingForceTransferRequestMap[_lockId];\r\n\r\n        erc20Impl.forceTransfer(from, to, value);\r\n\r\n        emit ForceTransferCompleted(_lockId, from, to, value);\r\n    }\r\n\r\n    /** @notice  Requests an increase to the supply ceiling.\r\n      *\r\n      * @dev  Returns a unique lock id associated with the request.\r\n      * Anyone can call this function, but confirming the request is authorized\r\n      * by the custodian.\r\n      *\r\n      * @param  _raiseBy  The amount by which to raise the ceiling.\r\n      *\r\n      * @return  lockId  A unique identifier for this request.\r\n      */\r\n    function requestCeilingRaise(uint256 _raiseBy) public returns (bytes32 lockId) {\r\n        require(_raiseBy != 0, \"no zero ceiling raise\");\r\n\r\n        lockId = generateLockId();\r\n\r\n        pendingRaiseMap[lockId] = PendingCeilingRaise({\r\n            raiseBy: _raiseBy\r\n        });\r\n\r\n        emit CeilingRaiseLocked(lockId, _raiseBy);\r\n    }\r\n\r\n    /** @notice  Confirms a pending increase in the token supply.\r\n      *\r\n      * @dev  When called by the custodian with a lock id associated with a\r\n      * pending ceiling increase, the amount requested is added to the\r\n      * current supply ceiling.\r\n      * NOTE: this function will not execute any raise that would overflow the\r\n      * supply ceiling, but it will not revert either.\r\n      *\r\n      * @param  _lockId  The identifier of a pending ceiling raise request.\r\n      */\r\n    function confirmCeilingRaise(bytes32 _lockId) public onlyCustodian {\r\n        PendingCeilingRaise storage pendingRaise = pendingRaiseMap[_lockId];\r\n\r\n        // copy locals of references to struct members\r\n        uint256 raiseBy = pendingRaise.raiseBy;\r\n        // accounts for a gibberish _lockId\r\n        require(raiseBy != 0, \"no gibberish _lockId\");\r\n\r\n        delete pendingRaiseMap[_lockId];\r\n\r\n        uint256 newCeiling = totalSupplyCeiling + raiseBy;\r\n        // overflow check\r\n        if (newCeiling >= totalSupplyCeiling) {\r\n            totalSupplyCeiling = newCeiling;\r\n\r\n            emit CeilingRaiseConfirmed(_lockId, raiseBy, newCeiling);\r\n        }\r\n    }\r\n\r\n    /** @notice  Lowers the supply ceiling, further constraining the bound of\r\n      * what can be printed by the controller.\r\n      *\r\n      * @dev  The controller is the sole authorized caller of this function,\r\n      * so it is the only account that can elect to lower its limit to increase\r\n      * the token supply.\r\n      *\r\n      * @param  _lowerBy  The amount by which to lower the supply ceiling.\r\n      */\r\n    function lowerCeiling(uint256 _lowerBy) public onlyController {\r\n        uint256 newCeiling = totalSupplyCeiling - _lowerBy;\r\n        // overflow check\r\n        require(newCeiling <= totalSupplyCeiling, \"totalSupplyCeiling overflow\");\r\n        totalSupplyCeiling = newCeiling;\r\n\r\n        emit CeilingLowered(_lowerBy, newCeiling);\r\n    }\r\n\r\n    /** @notice  Pass-through control of print confirmation, allowing this\r\n      * contract's custodian to act as the custodian of the associated\r\n      * active token implementation.\r\n      *\r\n      * @dev  This contract is the direct custodian of the active token\r\n      * implementation, but this function allows this contract's custodian\r\n      * to act as though it were the direct custodian of the active\r\n      * token implementation. Therefore the custodian retains control of\r\n      * unlimited printing.\r\n      *\r\n      * @param  _lockId  The identifier of a pending print request in\r\n      * the associated active token implementation.\r\n      */\r\n    function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl.confirmPrint(_lockId);\r\n    }\r\n\r\n    /** @notice  Pass-through control of custodian change confirmation,\r\n      * allowing this contract's custodian to act as the custodian of\r\n      * the associated active token implementation.\r\n      *\r\n      * @dev  This contract is the direct custodian of the active token\r\n      * implementation, but this function allows this contract's custodian\r\n      * to act as though it were the direct custodian of the active\r\n      * token implementation. Therefore the custodian retains control of\r\n      * custodian changes.\r\n      *\r\n      * @param  _lockId  The identifier of a pending custodian change request\r\n      * in the associated active token implementation.\r\n      */\r\n    function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {\r\n        erc20Impl.confirmCustodianChange(_lockId);\r\n    }\r\n\r\n    /** @notice  Blocks all transactions with a wallet.\r\n      *\r\n      * @dev Only signers from custodian are authorized to call this function\r\n      *\r\n      * @param  wallet account which will be blocked.\r\n      */\r\n    function blockWallet(address wallet) public onlySigner {\r\n        erc20Impl.blockWallet(wallet);\r\n        emit Blocked(wallet);\r\n    }\r\n\r\n    /** @notice Unblocks all transactions with a wallet.\r\n      *\r\n      * @dev Only signers from custodian are authorized to call this function\r\n      *\r\n      * @param  wallet account which will be unblocked.\r\n      */\r\n    function unblockWallet(address wallet) public onlySigner {\r\n        erc20Impl.unblockWallet(wallet);\r\n        emit Unblocked(wallet);\r\n    }\r\n\r\n    // EVENTS\r\n    /// @dev  Emitted by successful `requestCeilingRaise` calls.\r\n    event CeilingRaiseLocked(bytes32 _lockId, uint256 _raiseBy);\r\n\r\n    /// @dev  Emitted by successful `confirmCeilingRaise` calls.\r\n    event CeilingRaiseConfirmed(bytes32 _lockId, uint256 _raiseBy, uint256 _newCeiling);\r\n\r\n    /// @dev  Emitted by successful `lowerCeiling` calls.\r\n    event CeilingLowered(uint256 _lowerBy, uint256 _newCeiling);\r\n\r\n    /// @dev  Emitted by successful `blockWallet` calls.\r\n    event Blocked(address _wallet);\r\n\r\n    /// @dev  Emitted by successful `unblockWallet` calls.\r\n    event Unblocked(address _wallet);\r\n\r\n     /// @dev  Emitted by successful `requestForceTransfer` calls.\r\n    event ForceTransferRequested(bytes32 _lockId, address _from, address _to, uint256 _value);\r\n\r\n    /// @dev  Emitted by successful `confirmForceTransfer` calls.\r\n    event ForceTransferCompleted(bytes32 _lockId, address _from, address _to, uint256 _value);\r\n\r\n    /// @dev  Emitted by successful `requestWipe` calls.\r\n    event WipeRequested(bytes32 _lockId);\r\n\r\n    /// @dev  Emitted by successful `confirmWipe` calls.\r\n    event WipeCompleted(bytes32 _lockId);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingPrintMap\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"blockWallet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"unblockWallet\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmPrint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sweeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vs\",\"type\":\"uint8[]\"},{\"name\":\"_rs\",\"type\":\"bytes32[]\"},{\"name\":\"_ss\",\"type\":\"bytes32[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"enableSweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestPrint\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sweepMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sweptSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_froms\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"replaySweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Store\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc20Proxy\",\"type\":\"address\"},{\"name\":\"_erc20Store\",\"type\":\"address\"},{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_sweeper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PrintingLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PrintingConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_burned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Wiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]","ContractName":"ERC20Impl","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000621befef35d39313202128aa72ccb5e0ffdf3af10000000000000000000000009142cb9442b0fa21b9810f1ae94360160378fda1000000000000000000000000284d41bde42a1da48147123ae52559e054eebc3f0000000000000000000000004a1192f0a89d00a3e11778ca94aaf649e2b53fb2","Library":"","LicenseType":"None","SwarmSource":"bzzr://0cb00a48fc732a064b1790adc62fc5f089c0165359c962b6c4a453d61e14a680"}]}