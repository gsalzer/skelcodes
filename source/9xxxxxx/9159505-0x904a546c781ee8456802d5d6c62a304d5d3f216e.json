{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.15;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\ncontract IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function transfer(address to, uint256 tokenId) public;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ereum/EIPs/issues/179\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    uint8 public decimals;\r\n}\r\n\r\ncontract DepositBlockchainCard is Ownable {\r\n    using SafeMath for uint256;\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    address payable public SYS_ADDRESS = address(0xbE064F371A0e1e0EF7f4DA08578210002219722B);\r\n    address payable public PARTNER_ADDRESS = address(0x1e56CAB5Dc4503caf9CcB469Ae7b0b22354C678c);\r\n    uint public sysfee = 100000000000000;// 1 finney;\r\n    uint public partnerfee = 70000000000000; // 1 finney;\r\n\r\n    struct item {\r\n        address iOwner;\r\n        string key;\r\n        uint item;\r\n        address game;\r\n        bool available;\r\n        ERC20 bonusToken;\r\n        uint bonusTokenAmount;\r\n        address payable creator;\r\n        address buyer;\r\n        bytes32 pass;\r\n        uint sysfee;\r\n        uint partnerfee;\r\n    }\r\n    struct itemsByCreator {\r\n        uint[] code;\r\n        uint[] iId;\r\n    }\r\n    struct game2code {\r\n        mapping(uint => uint[]) codes;\r\n    }\r\n    mapping(uint => item) public items;\r\n    mapping(address => game2code) private codes;\r\n    mapping(address => itemsByCreator) private itemsByCreators;\r\n    event _deposit(address creator, uint _code);\r\n    event _withdraw(uint _code);\r\n    constructor() public {}\r\n\r\n    function setParners(address payable _partner, uint _fee) public onlyOwner (){\r\n        PARTNER_ADDRESS = _partner;\r\n        partnerfee = _fee;\r\n    }\r\n    function setSys(address payable _sys, uint _fee) public onlyOwner (){\r\n        SYS_ADDRESS = _sys;\r\n        sysfee = _fee;\r\n    }\r\n    function getItem(uint _code) public view returns (address iOwner, string memory _key,\r\n        uint _item,\r\n        address game,\r\n        bool available) {\r\n        return (items[_code].iOwner, items[_code].key, items[_code].item, items[_code].game, items[_code].available);\r\n    }\r\n    function getItemByOwner(uint _code) public returns (address iOwner, string memory _key,\r\n        uint _item,\r\n        address game,\r\n        bool available,\r\n        bytes32 pass,\r\n        address _creator,\r\n        address _buyer) {\r\n        require(msg.sender == items[_code].buyer || msg.sender == items[_code].creator);\r\n        uint code = _code;\r\n        return (items[code].iOwner, items[_code].key, items[_code].item, items[_code].game, items[_code].available,\r\n        items[code].pass, items[code].creator, items[code].buyer);\r\n    }\r\n    function getItemsByCreator() public returns (uint[] memory _code, uint[] memory _iId) {\r\n        return (itemsByCreators[msg.sender].code, itemsByCreators[msg.sender].iId);\r\n    }\r\n    function getItemsByTokenOwner(address _game, uint _iId) public returns (uint[] memory _codes) {\r\n        IERC721 erc721 = IERC721(_game);\r\n        require(erc721.ownerOf(_iId) == msg.sender);\r\n        return codes[_game].codes[_iId];\r\n    }\r\n    function changePass(uint _code, bytes32 _pass) public {\r\n        require(msg.sender == items[_code].creator);\r\n        items[_code].pass = _pass;\r\n    }\r\n    function checkPass(uint _code, bytes32 _pass) public view returns(bool){\r\n        return items[_code].pass == _pass;\r\n    }\r\n    function deposit(uint256 _code, address payable _iOwner, string memory _key, uint256 _feeAmount,\r\n        address _game, uint256 _iId, ERC20 _bonusToken, uint256 _bonusTokenAmount, bytes32 _pass, address _buyer) public payable{\r\n        require(items[_code].available == false);\r\n        if(_bonusToken != ETH_TOKEN_ADDRESS) {\r\n            require(msg.value == _feeAmount.add(sysfee).add(partnerfee));\r\n            if(_bonusToken != ERC20(address(0)) && _bonusTokenAmount > 0) {\r\n\r\n                ERC20 erc20 = ERC20(_bonusToken);\r\n                erc20.transferFrom(msg.sender, address(this), _bonusTokenAmount);\r\n            }\r\n        } else {\r\n            require(msg.value == _bonusTokenAmount.add(_feeAmount).add(sysfee).add(partnerfee));\r\n        }\r\n        _iOwner.transfer(_feeAmount);\r\n        IERC721 erc721 = IERC721(_game);\r\n        erc721.transferFrom(msg.sender, address(this), _iId);\r\n        items[_code] = item(_iOwner, _key, _iId, _game, true, _bonusToken, _bonusTokenAmount, msg.sender, _buyer, _pass, sysfee, partnerfee);\r\n        items[_code].available = true;\r\n        addCode(_game, _iId, _code);\r\n        itemsByCreators[msg.sender].code.push(_code);\r\n        itemsByCreators[msg.sender].iId.push(_iId);\r\n        emit _deposit(msg.sender, _code);\r\n    }\r\n    function addCode(address _game, uint256 _iId, uint256 _code) internal {\r\n        bool existed;\r\n        for(uint8 i=0; i < codes[_game].codes[_iId].length; i++) {\r\n            if(codes[_game].codes[_iId][i] == _code) existed = true;\r\n        }\r\n        if(!existed) codes[_game].codes[_iId].push(_code);\r\n    }\r\n    function cancel(uint256 _code, bytes32 _pass) public {\r\n        require(items[_code].available == true && msg.sender == address(items[_code].creator) && _pass == items[_code].pass);\r\n        if(items[_code].bonusToken != ETH_TOKEN_ADDRESS) {\r\n            if(items[_code].bonusToken != ERC20(address(0)) && items[_code].bonusTokenAmount > 0) {\r\n\r\n                ERC20 erc20 = ERC20(items[_code].bonusToken);\r\n                erc20.transfer(items[_code].creator, items[_code].bonusTokenAmount);\r\n            }\r\n        } else {\r\n            items[_code].creator.transfer(items[_code].bonusTokenAmount);\r\n        }\r\n        IERC721 erc721 = IERC721(items[_code].game);\r\n        erc721.transferFrom(address(this), items[_code].creator, items[_code].item);\r\n        items[_code].available = false;\r\n        items[_code].creator.transfer(items[_code].sysfee.add(items[_code].partnerfee));\r\n        emit _withdraw(_code);\r\n    }\r\n    function withdraw(uint256 _code, address payable _to, bytes32 _pass) public {\r\n        require(items[_code].available == true && msg.sender == address(items[_code].iOwner) && _pass == items[_code].pass);\r\n        if(items[_code].bonusToken != ETH_TOKEN_ADDRESS) {\r\n            if(items[_code].bonusToken != ERC20(address(0)) && items[_code].bonusTokenAmount > 0) {\r\n\r\n                ERC20 erc20 = ERC20(items[_code].bonusToken);\r\n                erc20.transfer(_to, items[_code].bonusTokenAmount);\r\n            }\r\n        } else {\r\n            _to.transfer(items[_code].bonusTokenAmount);\r\n        }\r\n        IERC721 erc721 = IERC721(items[_code].game);\r\n        erc721.transferFrom(address(this), _to, items[_code].item);\r\n        items[_code].available = false;\r\n        SYS_ADDRESS.transfer(items[_code].sysfee);\r\n        PARTNER_ADDRESS.transfer(items[_code].partnerfee);\r\n        emit _withdraw(_code);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"_deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNER_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYS_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_pass\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_pass\",\"type\":\"bytes32\"}],\"name\":\"changePass\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_pass\",\"type\":\"bytes32\"}],\"name\":\"checkPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_iOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_iId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_bonusToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_pass\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"iOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"getItemByOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"iOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"pass\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getItemsByCreator\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_code\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_iId\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_iId\",\"type\":\"uint256\"}],\"name\":\"getItemsByTokenOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_codes\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"iOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"item\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"},{\"internalType\":\"contract ERC20\",\"name\":\"bonusToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pass\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sysfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerfee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setParners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sys\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pass\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DepositBlockchainCard","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f8cc237c7fb40ad10f19e8a0c3e7ddf82bbb022c4dd3616064f8850017d5faba"}]}