{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\n\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract UniswapExchangeInterface {\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    // Provide Liquidity\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n    // Trade ERC20 to Custom Pool\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\n    // ERC20 comaptibility for liquidity tokens\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public decimals;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\n    function approve(address _spender, uint256 _value) external returns (bool);\n    function allowance(address _owner, address _spender) external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256);\n    function totalSupply() external view returns (uint256);\n    // Never use\n    function setup(address token_addr) external;\n}\n\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n}\n\ncontract BloctoPointExchange is Ownable {\n    event Buy(address buyer, address receiver, uint256 ethAmount, uint256 daiAmount, uint256 point);\n\n    uint256 deadline = 2**256 - 1;\n    uint256 daiPerPoint;\n    uint256 minPoint;\n    address payable bloctoReceiver;\n    address uniswapExContract;\n    address daiERC20Contract;\n\n    constructor(address owner, address _uniswapExContract, address _daiERC20Contract, address payable _bloctoReceiver, uint256 _daiPerPoint, uint256 _minPoint) public {\n        transferOwnership(owner);\n        uniswapExContract = _uniswapExContract;\n        daiERC20Contract = _daiERC20Contract;\n        bloctoReceiver = _bloctoReceiver;\n        daiPerPoint = _daiPerPoint;\n        minPoint = _minPoint;\n    }\n\n    function() external payable {\n        if (msg.value > 0) {\n          bloctoReceiver.transfer(msg.value);\n        }\n    }\n\n    function getExDetail() external view returns(address _owner, address _uniswapExContract, address _daiERC20Contract, address _bloctoReceiver, uint256 _daiPerPoint, uint256 _minPoint) {\n        return (owner(), uniswapExContract, daiERC20Contract, bloctoReceiver, daiPerPoint, minPoint);\n    }\n\n    function setBloctoReceiver(address payable _bloctoReceiver) external onlyOwner {\n        bloctoReceiver = _bloctoReceiver;\n    }\n\n    function setDaiPerPoint(uint256 _daiPerPoint) external onlyOwner {\n        daiPerPoint = _daiPerPoint;\n    }\n\n    function setMinPoint(uint256 _minPoint) external onlyOwner {\n            minPoint = _minPoint;\n    }\n\n    function buyBP() external payable {\n        UniswapExchangeInterface _uniswapExContract = UniswapExchangeInterface(uniswapExContract);\n        ERC20Interface _daiERC20Contract = ERC20Interface(daiERC20Contract);\n\n        uint256 daiAmount = _uniswapExContract.ethToTokenSwapInput.value(msg.value)(daiPerPoint, deadline);\n        uint256 point = daiAmount / daiPerPoint;\n        require(point >= minPoint, \"point < minPoint\");\n\n        bool success = _daiERC20Contract.transfer(bloctoReceiver, daiAmount);\n        require(success, \"transfer dai fail\");\n\n        emit Buy(msg.sender, msg.sender, msg.value, daiAmount, point);\n    }\n\n    // make sure `toAddr` is blocto wallet address\n    function buyBPTo(address toAddr) external payable {\n        UniswapExchangeInterface _uniswapExContract = UniswapExchangeInterface(uniswapExContract);\n        ERC20Interface _daiERC20Contract = ERC20Interface(daiERC20Contract);\n\n        uint256 daiAmount = _uniswapExContract.ethToTokenSwapInput.value(msg.value)(daiPerPoint, deadline);\n        uint256 point = daiAmount / daiPerPoint;\n        require(point >= minPoint, \"point < minPoint\");\n\n        bool success = _daiERC20Contract.transfer(bloctoReceiver, daiAmount);\n        require(success, \"transfer dai fail\");\n\n        emit Buy(msg.sender, toAddr, msg.value, daiAmount, point);\n    }\n\n    function estimateBP(uint256 ethAmount) external view returns(uint256) {\n        UniswapExchangeInterface _uniswapExContract = UniswapExchangeInterface(uniswapExContract);\n        uint256 daiAmount = _uniswapExContract.getEthToTokenInputPrice(ethAmount);\n        uint256 point = daiAmount / daiPerPoint;\n        return point;\n    }\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buyBP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"buyBPTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExDetail\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_uniswapExContract\",\"type\":\"address\"},{\"name\":\"_daiERC20Contract\",\"type\":\"address\"},{\"name\":\"_bloctoReceiver\",\"type\":\"address\"},{\"name\":\"_daiPerPoint\",\"type\":\"uint256\"},{\"name\":\"_minPoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"estimateBP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bloctoReceiver\",\"type\":\"address\"}],\"name\":\"setBloctoReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daiPerPoint\",\"type\":\"uint256\"}],\"name\":\"setDaiPerPoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPoint\",\"type\":\"uint256\"}],\"name\":\"setMinPoint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"_uniswapExContract\",\"type\":\"address\"},{\"name\":\"_daiERC20Contract\",\"type\":\"address\"},{\"name\":\"_bloctoReceiver\",\"type\":\"address\"},{\"name\":\"_daiPerPoint\",\"type\":\"uint256\"},{\"name\":\"_minPoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BloctoPointExchange","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000015dfa162ad3f954398738796ac91c83ea0f4ef900000000000000000000000077db9c915809e7be439d2ab21032b1b8b58f68910000000000000000000000002448ee2641d78cc42d7ad76498917359d961a783000000000000000000000000015dfa162ad3f954398738796ac91c83ea0f4ef900000000000000000000000000000000000000000000000000027ca57357c00000000000000000000000000000000000000000000000000000000000000003e8","Library":"","LicenseType":"","SwarmSource":""}]}