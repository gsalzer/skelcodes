{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **/\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     **/\r\n   constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     **/\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     **/\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic interface\r\n * @dev Basic ERC20 interface\r\n **/\r\ncontract ERC20Basic {\r\n    //\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) view public returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    //\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n **/\r\ncontract ERC20 is ERC20Basic {\r\n    //\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    //\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n **/\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n    \r\n    uint256 _totalSupply=0;\r\n    \r\n    /**\r\n     * @dev total number of tokens in existence\r\n     **/\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     **/\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        //\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        //\r\n        emit Transfer(msg.sender, _to, _value);\r\n        //\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     **/\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n    \r\n    enum StackingStatus{\r\n        locked,\r\n        unlocked\r\n    }\r\n    \r\n    StackingStatus public stackingStatus=StackingStatus.unlocked;\r\n    \r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(stackingStatus==StackingStatus.unlocked);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        //\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        //\r\n        emit Transfer(_from, _to, _value);\r\n        //\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     **/\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     **/\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     **/\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     **/\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Configurable\r\n * @dev Configurable varriables of the contract\r\n **/\r\ncontract Configurable {\r\n    uint256 constant percentDivider = 100000;\r\n    uint256 constant cap = 2000000000*10**18; //2 billion\r\n    \r\n    uint256 internal tokensSold = 0;\r\n    uint256 internal remainingTokens = 0;\r\n}\r\n\r\n/**\r\n * @title CrowdsaleToken \r\n * @dev Contract to preform crowd sale with token\r\n **/\r\ncontract CrowdsaleToken is StandardToken, Configurable, Ownable {\r\n    \r\n    enum DepositStatus{\r\n        locked,\r\n        unlocked\r\n    }\r\n    \r\n    /**\r\n     * @dev Variables\r\n     **/\r\n     \r\n    DepositStatus public depositStatus=DepositStatus.locked;\r\n    \r\n    /**\r\n     * @dev Events\r\n     **/\r\n    event Logger(string _label, uint256 _note1, uint256 _note2, uint256 _note3, uint256 _note4);\r\n    \r\n    /**\r\n     * @dev Mapping\r\n     **/\r\n    \r\n    /**\r\n     * @dev constructor of CrowdsaleToken\r\n     **/\r\n    constructor() public {\r\n        //\r\n        depositStatus = DepositStatus.locked;\r\n        //\r\n        remainingTokens = cap;\r\n    }\r\n    \r\n\r\n/* payments */\r\n    \r\n    /**\r\n     * @dev fallback function to send ether to for Crowd sale\r\n     **/\r\n    function () external payable {\r\n        require(depositStatus == DepositStatus.unlocked);\r\n        require(msg.value > 0);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev process buy tokens\r\n     **/\r\n    function BuyToken(uint256 _amount) public onlyOwner {\r\n        require(_amount>0 && _amount<=remainingTokens);\r\n        \r\n        tokensSold = tokensSold.add(_amount); // Increment raised amount\r\n        remainingTokens = remainingTokens.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        //emit Transfer(address(this), msg.sender, _amount);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n    }\r\n    \r\n  function SellToken(uint256 _amount) public onlyOwner {\r\n        require(_amount>0 &&  _amount<=_totalSupply );\r\n        \r\n        tokensSold = tokensSold.sub(_amount); //decrement raised amount\r\n        remainingTokens = remainingTokens.add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        //emit Transfer(address(this), msg.sender, _amount);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n    }\r\n\r\n/* administrative functions */\r\n    /**\r\n     lock/unlock deposit ETH\r\n    **/\r\n    function lockDeposit() public onlyOwner{\r\n        require(depositStatus==DepositStatus.unlocked);\r\n        depositStatus=DepositStatus.locked;\r\n    }\r\n    \r\n    function unlockDeposit() public onlyOwner{\r\n        require(depositStatus==DepositStatus.locked);\r\n        depositStatus=DepositStatus.unlocked;\r\n    }\r\n    \r\n    /**\r\n        lock/unlock stacking\r\n    **/\r\n    function lockStacking() public onlyOwner{\r\n        require(stackingStatus==StackingStatus.unlocked);\r\n        stackingStatus=StackingStatus.locked;\r\n    }\r\n    \r\n    function unlockStacking() public onlyOwner{\r\n        require(stackingStatus==StackingStatus.locked);\r\n        stackingStatus=StackingStatus.unlocked;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev finalizeIco closes down the ICO and sets needed varriables\r\n     **/\r\n    function finalizeIco() public onlyOwner {\r\n         // Transfer any remaining tokens\r\n        if(remainingTokens > 0)\r\n            balances[owner] = balances[owner].add(remainingTokens);\r\n        // transfer any remaining ETH balance in the contract to the owner\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev withdraw \r\n     **/\r\n    function withdraw(address _address, uint256 _value) public onlyOwner {\r\n        require(_address != address(0));\r\n        require(_value < address(this).balance);\r\n        //\r\n        _address.transfer(_value);\r\n    }\r\n    \r\n    /**\r\n     * @dev issues \r\n     **/\r\n    function issues(address _address, uint256 _tokens) public onlyOwner {\r\n        require(_tokens <= remainingTokens);\r\n        //\r\n        remainingTokens = remainingTokens.sub(_tokens);\r\n        balances[_address] = balances[_address].add(_tokens);\r\n        emit Transfer(address(this), _address, _tokens);\r\n        _totalSupply = _totalSupply.add(_tokens);\r\n    }\r\n\r\n \r\n    function reduceTotalSupply(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0 && _amount < _totalSupply);\r\n        \r\n        _totalSupply -=_amount;\r\n    }\r\n    \r\n    function plusTotalSupply(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0 && (_amount + _totalSupply)<= cap );\r\n        \r\n        _totalSupply +=_amount;\r\n    }\r\n\r\n/* public functions */\r\n    /**\r\n     * @dev get max total supply\r\n     **/\r\n    function getMaxTotalSupply() public pure returns(uint256) {\r\n        return cap;\r\n    }\r\n    \r\n    /**\r\n     * @dev get total tokens sold\r\n     **/\r\n    function getTotalSold() public view returns(uint256) {\r\n        return tokensSold;\r\n    }\r\n    \r\n    /**\r\n     * @dev get total tokens sold\r\n     **/\r\n    function getTotalRemaining() public view returns(uint256) {\r\n        return remainingTokens;\r\n    }\r\n\r\n    \r\n    function BurnToken(uint256 _amount) public onlyOwner{\r\n        require(_amount>0);\r\n        require(_amount<= balances[msg.sender]);\r\n        _totalSupply=_totalSupply.sub(_amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        emit Burn(msg.sender, _amount);\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ALS \r\n * @dev Contract to create the ALS Token\r\n **/\r\ncontract ALS is CrowdsaleToken {\r\n    string public constant name = \"ALS Token\";\r\n    string public constant symbol = \"ALS\";\r\n    uint32 public constant decimals = 18;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"issues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reduceTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stackingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockStacking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeIco\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"plusTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockStacking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_note1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_note2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_note3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_note4\",\"type\":\"uint256\"}],\"name\":\"Logger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ALS","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://596a453eaa938f11a2ed863d73ccbc26dd38be46c0829ae22cad8e67de32333d"}]}