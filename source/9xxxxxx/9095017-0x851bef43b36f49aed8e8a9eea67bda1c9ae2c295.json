{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n\r\ninterface NativeTokenMigrationInterface {\r\n    // ***\r\n    // Public functions\r\n    // ***\r\n    function transferToNativeTargetAddress(uint256 amount, string calldata FETAddress) external;\r\n    function transferToNativeFromKey(uint256 amount) external;\r\n    function refund(uint256 id) external;\r\n    function requestRefund(uint256 id) external;\r\n\r\n    // ***\r\n    // Restricted functions: Owner only\r\n    // ***\r\n    // Add or remove a delegate address that is allowed to confirm and reject transactions\r\n    function setDelegate(address _address, bool isDelegate) external;\r\n    // Change the _upperTransferLimit which is the maximum threshold any single swap can be\r\n    function setUpperTransferLimit(uint256 newLimit) external;\r\n    // Change the _lowerTransferLimit which is the minimum threshold any single swap can be\r\n    function setLowerTransferLimit(uint256 newLimit) external;\r\n    // Withdraw the tokens the confirmed swaps to the owner\r\n    function withdrawToFoundation(uint256 _amount) external;\r\n    // Delete the contract after _earliestDelete timestamp is reached, transfers the remaining\r\n    function deleteContract(address payable payoutAddress) external;\r\n\r\n    // ***\r\n    // Restricted functions: Owner or delegate only\r\n    // ***\r\n    // Reject a swap with reason. Allows the initialiser to immediately withdraw the funds again\r\n    function reject(address sender, uint256 id, uint256 expirationBlock, string calldata reason) external;\r\n    // Reject multiple swaps with the same reason\r\n    function batchReject(\r\n        address[] calldata senders,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata expirationBlocks,\r\n        string calldata reason) external;\r\n    // Pause or unpause the transferToNativeTargetAddress() method\r\n    function pauseTransferToNativeTargetAddress(bool isPaused) external;\r\n    // Pause or unpause the transferToNativeFromKey() method\r\n    function pauseTransferToNativeFromKey(bool isPaused) external;\r\n}\r\n\r\n\r\ncontract NativeTokenMigration is Ownable, NativeTokenMigrationInterface {\r\n    using SafeMath for uint256;\r\n\r\n    // minimum time the owner has to wait after the last initialised transfer before allowed to\r\n    // delete the contract, in seconds\r\n    uint256 constant DELETE_PERIOD = 10 days;\r\n    uint256 constant FET_TOTAL_SUPPLY = 1152997575 * 10**18;\r\n    uint256 constant DECIMAL_DIFFERENTIATOR = 10**8;\r\n\r\n    enum Status {Empty, Initialised, Rejected}\r\n\r\n    struct Swap {\r\n        address sender;\r\n        uint256 amount;\r\n        Status status;\r\n        uint256 fee;\r\n    }\r\n\r\n    uint256 public globalSwapID;\r\n    // globalSwapID => swap\r\n    // usage of a global id instead of address, id pair to simplify processing during the transfer\r\n    // over to mainnet\r\n    mapping(uint256 => Swap) public swaps;\r\n    // global counter increased by every new swap\r\n\r\n    ERC20 public token;\r\n\r\n    mapping(address => bool) public delegates;\r\n    uint256 public _transferFee;\r\n    uint256 public _upperTransferLimit;\r\n    uint256 public _lowerTransferLimit;\r\n    uint256 public _completedAmount;\r\n    bool public _pausedTransferToNativeTargetAddress;\r\n    bool public _pausedTransferToNativeFromKey;\r\n    uint256 public _earliestDelete;\r\n\r\n    modifier belowEqualValue(uint256 amount, uint256 threshold) {\r\n        require(amount <= threshold, \"Value too high\");\r\n        _;\r\n    }\r\n\r\n    modifier aboveEqualValue(uint256 amount, uint256 threshold) {\r\n        require(amount >= threshold, \"Value too low\");\r\n        _;\r\n    }\r\n\r\n    /* Simple length check. Length of FET addresses seem to be either 49 or\r\n        50 bytes. Adding a slight margin to this. A proper checksum validation would require a base58\r\n        decoder.*/\r\n    modifier isFetchAddress(string memory _address) {\r\n        require(bytes(_address).length > 47, \"Address too short\");\r\n        require(bytes(_address).length < 52, \"Address too long\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySender(uint256 id) {\r\n        require(swaps[id].sender == msg.sender, \"Not the sender\");\r\n        _;\r\n    }\r\n\r\n    /* Only callable by owner or delegate */\r\n    modifier onlyDelegate() {\r\n        require(isOwner() || delegates[msg.sender], \"Caller is neither owner nor delegate\");\r\n        _;\r\n    }\r\n\r\n    modifier isEqual(uint256 a, uint256 b) {\r\n        require(a == b, \"Different values\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused(bool pauseIndicator) {\r\n        require(!pauseIndicator, \"Transfers are paused\");\r\n        _;\r\n    }\r\n\r\n    modifier isRejected(uint256 id) {\r\n        require(swaps[id].status == Status.Rejected, \"The swap has not been rejected\");\r\n        _;\r\n    }\r\n\r\n    modifier isInitialised(uint256 id){\r\n        require(swaps[id].status == Status.Initialised, \"The swap has not been initialised\");\r\n        _;\r\n    }\r\n\r\n    event SwapInitialised(address indexed sender, uint256 indexed id, string FETAddress, uint256 amount, uint256 fee);\r\n    event Rejected(address indexed sender, uint256 indexed id, string reason);\r\n    event Refund(address indexed sender, uint256 indexed id);\r\n    event RefundRequested(address indexed sender, uint256 indexed id, uint256 amount);\r\n    event PauseTransferToNativeTargetAddress(bool isPaused);\r\n    event PauseTransferToNativeFromKey(bool isPaused);\r\n    event ChangeDelegate(address delegate, bool isDelegate);\r\n    event ChangeUpperTransferLimit(uint256 newLimit);\r\n    event ChangeLowerTransferLimit(uint256 newLimit);\r\n    event ChangeTransferFee(uint256 newFee);\r\n    event DeleteContract();\r\n    event WithdrawalToFoundation(uint256 amount);\r\n\r\n    /*******************\r\n    Contract start\r\n    *******************/\r\n    /**\r\n     * @param ERC20Address address of the ERC20 contract\r\n     */\r\n    constructor(address ERC20Address) public {\r\n        token = ERC20(ERC20Address);\r\n        _upperTransferLimit = FET_TOTAL_SUPPLY;\r\n        _lowerTransferLimit = 0;\r\n        _transferFee = 0;\r\n        _pausedTransferToNativeTargetAddress = false;\r\n        _pausedTransferToNativeFromKey = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Return a unit that is divisible by the Fetch mainnet precision\r\n     */\r\n    function _toNativeFET(uint256 amount)\r\n    internal\r\n    pure\r\n    returns (uint256 amountInt)\r\n    {\r\n        return amount.sub(amount.mod(DECIMAL_DIFFERENTIATOR));\r\n    }\r\n\r\n    /**\r\n     * @notice Initialise a swap. Internal only.\r\n     */\r\n    function _initSwap(uint256 amount, string memory FETAddress)\r\n    internal\r\n    belowEqualValue(amount, _upperTransferLimit)\r\n    aboveEqualValue(amount, _lowerTransferLimit)\r\n    aboveEqualValue(amount, _transferFee)\r\n    {\r\n        uint256 id = globalSwapID;\r\n        globalSwapID = globalSwapID.add(1);\r\n\r\n        uint256 amountInt = _toNativeFET(amount.sub(_transferFee));\r\n\r\n        swaps[id].sender = msg.sender;\r\n        swaps[id].amount = amountInt;\r\n        swaps[id].status = Status.Initialised;\r\n        swaps[id].fee = _transferFee;\r\n\r\n        _completedAmount = _completedAmount.add(amountInt).add(_transferFee);\r\n        _earliestDelete = block.timestamp.add(DELETE_PERIOD);\r\n\r\n        require(token.transferFrom(msg.sender, address(this), amountInt.add(_transferFee)));\r\n\r\n        emit SwapInitialised(msg.sender, id, FETAddress, amountInt, _transferFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Initialise a swap to an address on the Fetch mainnet\r\n     * @param amount amount to transfer. Must be below _upperTransferLimit\r\n     * @param FETAddress public target address on the Fetch mainnet to transfer the tokens to\r\n     * @dev Disregards fractions of FET due to precision differences\r\n     * @dev The transfer of ERC20 tokens requires to first approve this transfer with the ERC20\r\n        contract by calling ERC20.approve(contractAddress, amount)\r\n     */\r\n    function transferToNativeTargetAddress(uint256 amount, string calldata FETAddress)\r\n    external\r\n    isFetchAddress(FETAddress)\r\n    whenNotPaused(_pausedTransferToNativeTargetAddress)\r\n    {\r\n        _initSwap(amount, FETAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Initialise a swap to an address on the Fetch mainnet that corresponds to the same\r\n        private key as used to control the address invoking this address\r\n     * @param amount amount to transfer. Must be below _upperTransferLimit\r\n     * @dev Disregards fractions of FET due to precision differences\r\n     * @dev The transfer of ERC20 tokens requires to first approve this transfer with the ERC20\r\n        contract by calling ERC20.approve(contractAddress, amount)\r\n     */\r\n    function transferToNativeFromKey(uint256 amount)\r\n    external\r\n    whenNotPaused(_pausedTransferToNativeFromKey)\r\n    {\r\n        _initSwap(amount, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Reclaim tokens of a swap that has been rejected\r\n     * @param id id of the swap to refund\r\n     */\r\n    function refund(uint256 id)\r\n    external\r\n    isRejected(id)\r\n    onlySender(id)\r\n    {\r\n        uint256 amount = swaps[id].amount.add(swaps[id].fee);\r\n        emit Refund(msg.sender, id);\r\n        delete swaps[id];\r\n        require(token.transfer(msg.sender, amount));\r\n    }\r\n\r\n    /**\r\n     * @notice Request that a refund be issued. Allows users to \"complain\" and remind the automated\r\n     * server that it might have missed an event somewhere and should try reprocessing it\r\n     * @param id id of the swap to refund\r\n     */\r\n    function requestRefund(uint256 id)\r\n    external\r\n    isInitialised(id)\r\n    onlySender(id)\r\n    {\r\n        emit RefundRequested(msg.sender, id, swaps[id].amount);\r\n    }\r\n\r\n    /*******************\r\n    Restricted functions\r\n    *******************/\r\n    /**\r\n     * @notice Pause or unpause the transferToNativeTargetAddress() method\r\n     * @param isPaused whether to pause or unpause the method\r\n     * @dev Delegate only\r\n     */\r\n    function pauseTransferToNativeTargetAddress(bool isPaused)\r\n    external\r\n    onlyDelegate()\r\n    {\r\n        _pausedTransferToNativeTargetAddress = isPaused;\r\n        emit PauseTransferToNativeTargetAddress(isPaused);\r\n    }\r\n\r\n    /**\r\n     * @notice Pause or unpause the transferToNativeFromKey() method\r\n     * @param isPaused whether to pause or unpause the method\r\n     * @dev Delegate only\r\n     */\r\n    function pauseTransferToNativeFromKey(bool isPaused)\r\n    external\r\n    onlyDelegate()\r\n    {\r\n        _pausedTransferToNativeFromKey = isPaused;\r\n        emit PauseTransferToNativeFromKey(isPaused);\r\n    }\r\n\r\n    /**\r\n     * @notice Add or remove a delegate address that is allowed to confirm and reject transactions\r\n     * @param _address address of the delegate\r\n     * @param isDelegate whether to add or remove the address from the delegates set\r\n     * @dev Owner only\r\n     */\r\n    function setDelegate(address _address, bool isDelegate)\r\n    external\r\n    onlyOwner()\r\n    {\r\n        delegates[_address] = isDelegate;\r\n        emit ChangeDelegate(_address, isDelegate);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the _upperTransferLimit which is the maximum threshold any single swap can be\r\n     * @param newLimit new limit in FET * 10**18\r\n     * @dev Owner only\r\n     */\r\n    function setUpperTransferLimit(uint256 newLimit)\r\n    external\r\n    onlyOwner()\r\n    belowEqualValue(newLimit, FET_TOTAL_SUPPLY)\r\n    aboveEqualValue(newLimit, _lowerTransferLimit)\r\n    {\r\n        _upperTransferLimit = newLimit;\r\n        emit ChangeUpperTransferLimit(newLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the _lowerTransferLimit which is the minimum threshold any single swap can be\r\n     * @param newLimit new limit in FET * 10**18\r\n     * @dev Owner only\r\n     */\r\n    function setLowerTransferLimit(uint256 newLimit)\r\n    external\r\n    onlyOwner()\r\n    belowEqualValue(newLimit, _upperTransferLimit)\r\n    {\r\n        _lowerTransferLimit = newLimit;\r\n        emit ChangeLowerTransferLimit(newLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the _transferFee which is the fee applied to every initialised swap\r\n     * @param newFee in FET * 10**18\r\n     * @dev This fee will be refunded if the swap is rejected\r\n     * @dev Owner only\r\n     */\r\n    function setTransferFee(uint256 newFee)\r\n    external\r\n    onlyOwner()\r\n    {\r\n        _transferFee = newFee;\r\n        emit ChangeTransferFee(newFee);\r\n    }\r\n\r\n    function _reject(address sender, uint256 id, uint256 expirationBlock, string memory reason)\r\n    internal\r\n    isInitialised(id)\r\n    belowEqualValue(block.number, expirationBlock)\r\n    {\r\n        emit Rejected(sender, id, reason);\r\n        swaps[id].status = Status.Rejected;\r\n        _completedAmount = _completedAmount.sub(swaps[id].amount).sub(swaps[id].fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Reject a swap with reason. Allows the initialiser to immediately withdraw the funds again\r\n     * @param sender initialiser of the swap\r\n     * @param id id of the swap\r\n     * @param reason reason for rejection\r\n     * @dev delegate only\r\n     */\r\n    function reject(address sender, uint256 id, uint256 expirationBlock, string calldata reason)\r\n    external\r\n    onlyDelegate()\r\n    {\r\n        _reject(sender, id, expirationBlock, reason);\r\n    }\r\n\r\n    /**\r\n     * @notice Reject multiple swaps with the same reason\r\n     * @param senders array of sender addresses\r\n     * @param _ids array of swap id's\r\n     * @param reason Reason for the rejection. Will be identical across all swaps due to string[]\r\n        being only an experimental feature\r\n     * @dev delegate only\r\n     */\r\n    function batchReject(address[] calldata senders,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata expirationBlocks,\r\n        string calldata reason)\r\n    external\r\n    onlyDelegate()\r\n    isEqual(senders.length, _ids.length)\r\n    isEqual(senders.length, expirationBlocks.length)\r\n    {\r\n        for (uint256 i = 0; i < senders.length; i++) {\r\n            _reject(senders[i], _ids[i], expirationBlocks[i], reason);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the tokens the confirmed swaps to the owner\r\n     * @param _amount amount to withdraw. Set to zero to withdraw all.\r\n     * @dev owner only\r\n     */\r\n    function withdrawToFoundation(uint256 _amount)\r\n    external\r\n    onlyOwner()\r\n    belowEqualValue(_amount, _completedAmount)\r\n    {\r\n        uint256 amount;\r\n        if (_amount == 0) {\r\n            amount = _completedAmount;\r\n        } else {\r\n            amount = _amount;\r\n        }\r\n        _completedAmount = _completedAmount.sub(amount);\r\n        require(token.transfer(owner(), amount));\r\n        emit WithdrawalToFoundation(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Fallback function that allows to increase _completedAmount if the foundation should\r\n     *  ever withdraw more than required to refund rejected swaps\r\n     * @param amount amount to increase _completedAmount by\r\n     */\r\n    function topupCompletedAmount(uint256 amount)\r\n    external\r\n    {\r\n        _completedAmount = _completedAmount.add(amount);\r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n    }\r\n\r\n    /**\r\n     * @notice Delete the contract after _earliestDelete timestamp is reached, transfers the remaining\r\n        token and ether balance to the specified payoutAddress\r\n     * @param payoutAddress address to transfer the balances to. Ensure that this is able to handle ERC20 tokens\r\n     * @dev owner only\r\n     */\r\n    function deleteContract(address payable payoutAddress)\r\n    external\r\n    onlyOwner()\r\n    {\r\n        require(block.timestamp >= _earliestDelete, \"earliestDelete not reached\");\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(token.transfer(payoutAddress, contractBalance));\r\n        emit DeleteContract();\r\n        selfdestruct(payoutAddress);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"senders\",\"type\":\"address[]\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"expirationBlocks\",\"type\":\"uint256[]\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"batchReject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToFoundation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"deleteContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"FETAddress\",\"type\":\"string\"}],\"name\":\"transferToNativeTargetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_earliestDelete\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_pausedTransferToNativeFromKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setUpperTransferLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"isDelegate\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_upperTransferLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_completedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lowerTransferLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_pausedTransferToNativeTargetAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"requestRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"pauseTransferToNativeTargetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setLowerTransferLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToNativeFromKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topupCompletedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"pauseTransferToNativeFromKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalSwapID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ERC20Address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"FETAddress\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SwapInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseTransferToNativeTargetAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseTransferToNativeFromKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isDelegate\",\"type\":\"bool\"}],\"name\":\"ChangeDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ChangeUpperTransferLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"ChangeLowerTransferLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeTransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DeleteContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalToFoundation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NativeTokenMigration","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001d287cc25dad7ccaf76a26bc660c5f7c8e2a05bd","Library":"","LicenseType":"None","SwarmSource":"bzzr://42d15735c5370d297359bae062f9dd96710f3af8d964971e822f17bc496c6d87"}]}