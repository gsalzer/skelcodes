{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] storage self, address addr) public view returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] storage self, address addr) public view returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n  }\r\n\r\n  function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){\r\n    uint index = index_of(self, old_addr);\r\n    self[index] = new_addr;\r\n  }\r\n}\r\n\r\ncontract LiquidDemocracyInterface{\r\n  function setNoMajority(bool t) public ;\r\n  function getVoterCount() public view returns(uint);\r\n  function getWeight(address addr) public view returns(uint) ;\r\n  function getDelegatee(address addr) public view returns (address [] memory);\r\n  function getDelegator(address addr) public view returns(address);\r\n  function delegate(address _to) public returns(bool);\r\n  function undelegate() public returns(bool);\r\n  function setWeight(address addr, uint weight) public returns(bool);\r\n  function removeVoter(address addr) public returns(bool);\r\n  function lastUpdateHeight() public view returns(uint);\r\n}\r\n\r\n\r\n\r\ncontract LiquidDemocracyTools {\r\n  LiquidDemocracyInterface public liquid_democracy_contract;\r\n  constructor(address _addr) public{\r\n    require(_addr != address(0x0), \"invalid address\");\r\n    liquid_democracy_contract = LiquidDemocracyInterface(_addr);\r\n  }\r\n  function getVoterCount() public view returns(uint){\r\n    return liquid_democracy_contract.getVoterCount();\r\n  }\r\n  function getWeight(address addr) public view returns(uint) {\r\n    return liquid_democracy_contract.getWeight(addr);\r\n  }\r\n  function getDelegatee(address addr) public view returns (address [] memory){\r\n    return liquid_democracy_contract.getDelegatee(addr);\r\n  }\r\n  function getDelegator(address addr) public view returns(address){\r\n    return liquid_democracy_contract.getDelegator(addr);\r\n  }\r\n  function delegate(address _to) public returns(bool){\r\n    return liquid_democracy_contract.delegate(_to);\r\n  }\r\n  function undelegate() public returns(bool){\r\n    return liquid_democracy_contract.undelegate();\r\n  }\r\n  function setWeight(address addr, uint weight) public returns(bool){\r\n    return liquid_democracy_contract.setWeight(addr, weight);\r\n  }\r\n  function removeVoter(address addr) public returns(bool){\r\n    return liquid_democracy_contract.removeVoter(addr);\r\n  }\r\n  function lastUpdateHeight() public view returns(uint){\r\n    return liquid_democracy_contract.lastUpdateHeight();\r\n  }\r\n}\r\n\r\n\r\ncontract LiquidVoteBase is LiquidDemocracyTools{\r\n  address owner;\r\n\r\n  struct vote_result_t{\r\n    uint total;\r\n    bool exist;\r\n  }\r\n\r\n  mapping (bytes32 => vote_result_t) public voteResults;\r\n  bytes32[] public allChoice;\r\n\r\n  constructor(address _addr) LiquidDemocracyTools(_addr) public{\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier isOwner{\r\n    require(msg.sender == owner, \"only owner can call this\");\r\n    _;\r\n  }\r\n\r\n  function transferOwner(address new_owner) public isOwner{\r\n    require(new_owner != address(0x0), \"transferOwner: invalid address\");\r\n    owner = new_owner;\r\n  }\r\n\r\n  function addChoice(bytes32 hash) public isOwner{\r\n    voteResults[hash].total = 0;\r\n    voteResults[hash].exist = true;\r\n    allChoice.push(hash);\r\n  }\r\n\r\n  function getChoiceNumber() public view returns(uint){\r\n    return allChoice.length;\r\n  }\r\n\r\n  function getChoiceVoteNumber(bytes32 hash) public returns(uint);\r\n\r\n  function isChoiceExist(bytes32 hash) public view returns(bool){\r\n    return voteResults[hash].exist;\r\n  }\r\n\r\n  function addVoteNumberForChoice(bytes32 hash, uint n) internal{\r\n    require(voteResults[hash].exist, \"addVoteNumberForChoice, choice not exist\");\r\n    voteResults[hash].total += n;\r\n  }\r\n\r\n  function reduceVoteNumberForChoice(bytes32 hash, uint n) internal{\r\n    require(voteResults[hash].exist, \"reduceVoteNumberForChoice, choice not exist\");\r\n    voteResults[hash].total -= n;\r\n  }\r\n}\r\n\r\ncontract SimpleLiquidVote is LiquidVoteBase{\r\n\r\n  using AddressArray for address[];\r\n\r\n  mapping(address => bytes32) voted_options;\r\n  address[] public voted_voters;\r\n\r\n  uint public last_cal_height;\r\n\r\n  constructor(address _delegation) LiquidVoteBase(_delegation) public {\r\n    last_cal_height = block.number;\r\n  }\r\n\r\n  function _refreshAllVotes() internal{\r\n    for(uint i = 0; i < allChoice.length; i++){\r\n      voteResults[allChoice[i]].total = 0;\r\n    }\r\n\r\n    for(uint i = 0; i < voted_voters.length; i++){\r\n      uint power = get_total_power(voted_voters[i]);\r\n      voteResults[voted_options[voted_voters[i]]].total += power;\r\n    }\r\n    last_cal_height = block.number;\r\n  }\r\n\r\n  function _voteChoice(bytes32 option, address voter) internal{\r\n    if(!voted_voters.exists(voter)){\r\n      voted_voters.push(voter);\r\n    }\r\n    require(voteResults[option].exist, \"no such choice\");\r\n    if(lastUpdateHeight() >= last_cal_height){\r\n      _refreshAllVotes();\r\n    }\r\n\r\n    uint power = get_total_power(voter);\r\n    bool voted_before = false;\r\n    if(voted_options[voter] != bytes32(0x0)){\r\n      voted_before = true;\r\n      bytes32 old = voted_options[voter];\r\n      if(old == option){\r\n        return ;\r\n      }else{\r\n        reduceVoteNumberForChoice(old, power);\r\n      }\r\n    }\r\n\r\n    addVoteNumberForChoice(option, power);\r\n    voted_options[voter] = option;\r\n\r\n    address parent = get_voted_parent(voter);\r\n    if(!voted_before && parent != address(0x0)){\r\n      bytes32 old = voted_options[parent];\r\n      reduceVoteNumberForChoice(old, power);\r\n    }\r\n    last_cal_height = block.number;\r\n  }\r\n\r\n  function recordVoteChoice(bytes32 option, address voter) public isOwner{\r\n    _voteChoice(option, voter);\r\n  }\r\n\r\n  function voteChoice(bytes32 option) public{\r\n    _voteChoice(option, msg.sender);\r\n  }\r\n\r\n  event ChoiceVoteNumber(uint number);\r\n  function getChoiceVoteNumber(bytes32 hash) public returns(uint){\r\n    if(lastUpdateHeight() >= last_cal_height){\r\n      _refreshAllVotes();\r\n    }\r\n    emit ChoiceVoteNumber(voteResults[hash].total);\r\n    return voteResults[hash].total;\r\n  }\r\n\r\n  function get_total_power(address _addr) internal view returns(uint){\r\n    address[] memory to_visit = new address[](getVoterCount());\r\n    uint power = 0;\r\n    uint index = 0;\r\n    to_visit[index] = _addr;\r\n    index ++;\r\n    while(index != 0){\r\n      index --;\r\n      address last = to_visit[index];\r\n      power += getWeight(last);\r\n      address[] memory children = getDelegatee(last);\r\n      for(uint i = 0; i < children.length; i++){\r\n        if(voted_options[children[i]] == bytes32(0x0)){\r\n          to_visit[index] = children[i];\r\n          index ++;\r\n        }\r\n      }\r\n    }\r\n    return power;\r\n  }\r\n\r\n  function get_voted_parent(address _addr) internal view returns(address){\r\n    require(_addr != address(0x0), \"get_voted_parent: invalid address\");\r\n    address next = getDelegator(_addr);\r\n    while(next != address(0x0)){\r\n      if(voted_options[next] != bytes32(0x0)){\r\n        return next;\r\n      }\r\n      next = getDelegator(next);\r\n    }\r\n    return address(0x0);\r\n  }\r\n  function getVoted(address from) public view returns(bytes32){\r\n    return voted_options[from];\r\n  }\r\n}\r\n\r\ncontract SimpleLiquidVoteFactory{\r\n  event NewLiquidVote(address addr);\r\n  function createLiquidVote(address delegation)  public returns(address){\r\n      SimpleLiquidVote sv = new SimpleLiquidVote(delegation);\r\n      sv.transferOwner(msg.sender);\r\n      emit NewLiquidVote(address(sv));\r\n      return address (sv);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"delegation\",\"type\":\"address\"}],\"name\":\"createLiquidVote\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewLiquidVote\",\"type\":\"event\"}]","ContractName":"SimpleLiquidVoteFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"AddressArray:0493163ff05664a1add5f87374ef78940ae33bc4","LicenseType":"MIT","SwarmSource":"bzzr://ad915a3d95250b562be0ac1ad53de091cd1146fa26d62f43e1283ceff267ae1e"}]}