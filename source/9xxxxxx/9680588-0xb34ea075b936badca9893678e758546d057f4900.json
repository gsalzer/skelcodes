{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-01-31\r\n*/\r\n\r\npragma solidity >0.4.99 <0.6.0;\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    \r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n        ERC20Basic _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal\r\n    {\r\n        require(_token.transfer(_to, _value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        ERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal\r\n    {\r\n        require(_token.transferFrom(_from, _to, _value));\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 _token,\r\n        address _spender,\r\n        uint256 _value\r\n    ) internal\r\n    {\r\n        require(_token.approve(_spender, _value));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\t/**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if(a == 0) {\r\n            return 0;\r\n\t\t}\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n\t/**\r\n\t* @dev Integer division of two numbers, truncating the quotient.\r\n\t*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n\t/**\r\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\t*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\t/**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping(address => uint256) balances;\r\n    \r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n\t/**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom (\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance (\r\n        address _owner,\r\n        address _spender\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\t/**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n\t)\r\n\t\tpublic\r\n\t\treturns (bool)\r\n\t{\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n\r\n\t/**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n\t) public returns (bool)\r\n\t{\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n        \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        \r\n        return true;\r\n    }\r\n}\r\n/**\r\n * @title MultiOwnable\r\n *\r\n * @dev HADS의 MultiOwnable은 히든오너, 수퍼오너, 버너, 오너, 리클레이머를 설정한다. 권한을 여러명에게 부여할 수 있는 경우\r\n * 리스트에 그 값을 넣어 불특정 다수가 확인 할 수 있게 한다.\r\n *\r\n * HADS的MultiOwnable可设置HIDDENOWNER，SUPEROWNER，BURNER，OWNER及RECLAIMER。\r\n * 其权限可同时赋予多人的情况，在列表中放入该值后可确认其非特定的多人名单。\r\n *\r\n * MulitOwnable of HADS sets HIDDENOWNER, SUPEROWNER, BURNER, OWNER, and RECLAIMER. \r\n * If many can be authorized, the value is entered to the list so that it is accessible to unspecified many.\r\n *\r\n */\r\ncontract MultiOwnable {\r\n    uint8 constant MAX_BURN = 3;\r\n    uint8 constant MAX_OWNER = 15;\r\n    address payable public hiddenOwner;\r\n    address payable public superOwner;\r\n    address payable public reclaimer;\r\n\r\n    address[MAX_BURN] public chkBurnerList;\r\n    address[MAX_OWNER] public chkOwnerList;\r\n    \r\n    mapping(address => bool) public burners;\r\n    mapping (address => bool) public owners;\r\n    \r\n    event AddedBurner(address indexed newBurner);\r\n    event AddedOwner(address indexed newOwner);\r\n    event DeletedOwner(address indexed toDeleteOwner);\r\n    event DeletedBurner(address indexed toDeleteBurner);\r\n    event ChangedReclaimer(address indexed newReclaimer);\r\n    event ChangedSuperOwner(address indexed newSuperOwner);\r\n    event ChangedHiddenOwner(address indexed newHiddenOwner);\r\n\r\n    constructor() public {\r\n        hiddenOwner = msg.sender;\r\n        superOwner = msg.sender;\r\n        reclaimer = msg.sender;\r\n        owners[msg.sender] = true;\r\n        chkOwnerList[0] = msg.sender;\r\n    }\r\n\r\n    modifier onlySuperOwner() {\r\n        require(superOwner == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyReclaimer() {\r\n        require(reclaimer == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyHiddenOwner() {\r\n        require(hiddenOwner == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n    modifier onlyBurner(){\r\n        require(burners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function changeSuperOwnership(address payable newSuperOwner) public onlyHiddenOwner returns(bool) {\r\n        require(newSuperOwner != address(0));\r\n        superOwner = newSuperOwner;\r\n        \r\n        emit ChangedSuperOwner(superOwner);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function changeHiddenOwnership(address payable newHiddenOwner) public onlyHiddenOwner returns(bool) {\r\n        require(newHiddenOwner != address(0));\r\n        hiddenOwner = newHiddenOwner;\r\n        \r\n        emit ChangedHiddenOwner(hiddenOwner);\r\n        \r\n        return true;\r\n    }\r\n    function changeReclaimer(address payable newReclaimer) public onlySuperOwner returns(bool) {\r\n        require(newReclaimer != address(0));\r\n        reclaimer = newReclaimer;\r\n        \r\n        emit ChangedReclaimer(reclaimer);\r\n        \r\n        return true;\r\n    }\r\n    function addBurner(address burner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_BURN);\r\n        require(burner != address(0));\r\n        require(chkBurnerList[num] == address(0));\r\n        require(burners[burner] == false);\r\n\r\n        burners[burner] = true;\r\n        chkBurnerList[num] = burner;\r\n        \r\n        emit AddedBurner(burner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function deleteBurner(address burner, uint8 num) public onlySuperOwner returns (bool){\r\n        require(num < MAX_BURN);\r\n        require(burner != address(0));\r\n        require(chkBurnerList[num] == burner);\r\n        \r\n        burners[burner] = false;\r\n\r\n        chkBurnerList[num] = address(0);\r\n        \r\n        emit DeletedBurner(burner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {        \r\n        require(num < MAX_OWNER);\r\n        require(owner != address(0));\r\n        require(chkOwnerList[num] == address(0));\r\n        require(owners[owner] == false);\r\n        \r\n        owners[owner] = true;\r\n        chkOwnerList[num] = owner;\r\n        \r\n        emit AddedOwner(owner);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_OWNER);\r\n        require(owner != address(0));\r\n        require(chkOwnerList[num] == owner);\r\n        owners[owner] = false;\r\n        chkOwnerList[num] = address(0);\r\n        \r\n        emit DeletedOwner(owner);\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title HasNoEther\r\n */\r\ncontract HasNoEther is MultiOwnable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    event ReclaimToken(address _token);\r\n    \r\n    /**\r\n    * @dev Constructor that rejects incoming Ether\r\n    * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n    * we could use assembly to access msg.value.\r\n    */\r\n    constructor() public payable {\r\n        require(msg.value == 0);\r\n    }\r\n    /**\r\n    * @dev Disallows direct send by settings a default function without the `payable` flag.\r\n    */\r\n    function() external {\r\n    }\r\n    \r\n\r\n    function reclaimToken(ERC20Basic _token) external onlyReclaimer returns(bool){\r\n        \r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        _token.safeTransfer(superOwner, balance);\r\n        \r\n        emit ReclaimToken(address(_token));\r\n    \r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract Blacklist is MultiOwnable {\r\n\r\n    mapping(address => bool) blacklisted;\r\n\r\n    event Blacklisted(address indexed blacklist);\r\n    event Whitelisted(address indexed whitelist);\r\n    \r\n    modifier whenPermitted(address node) {\r\n        require(!blacklisted[node]);\r\n        _;\r\n    }\r\n    \r\n    function isPermitted(address node) public view returns (bool) {\r\n        return !blacklisted[node];\r\n    }\r\n\r\n    function blacklist(address node) public onlyOwner returns (bool) {\r\n        require(!blacklisted[node]);\r\n        blacklisted[node] = true;\r\n        emit Blacklisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n   \r\n    function unblacklist(address node) public onlySuperOwner returns (bool) {\r\n        require(blacklisted[node]);\r\n        blacklisted[node] = false;\r\n        emit Whitelisted(node);\r\n\r\n        return blacklisted[node];\r\n    }\r\n}\r\n\r\ncontract Burnlist is Blacklist {\r\n    mapping(address => bool) public isburnlist;\r\n\r\n    event Burnlisted(address indexed burnlist, bool signal);\r\n\r\n    modifier isBurnlisted(address who) {\r\n        require(isburnlist[who]);\r\n        _;\r\n    }\r\n\r\n    function addBurnlist(address node) public onlyOwner returns (bool) {\r\n        require(!isburnlist[node]);\r\n        \r\n        isburnlist[node] = true;\r\n        \r\n        emit Burnlisted(node, true);\r\n        \r\n        return isburnlist[node];\r\n    }\r\n\r\n    function delBurnlist(address node) public onlyOwner returns (bool) {\r\n        require(isburnlist[node]);\r\n        \r\n        isburnlist[node] = false;\r\n        \r\n        emit Burnlisted(node, false);\r\n        \r\n        return isburnlist[node];\r\n    }\r\n}\r\n\r\n\r\ncontract PausableToken is StandardToken, HasNoEther, Burnlist {\r\n    \r\n    uint8 constant MAX_BLACKTRANSFER = 10;\r\n    bool public paused = false;\r\n    address[MAX_BLACKTRANSFER] public chkBlackTransfer;\r\n    mapping(address => bool) public blackTransferAddrs;\r\n\r\n    event Paused(address addr);\r\n    event Unpaused(address addr);\r\n    event AddBlackTransfer(address addr);\r\n    event DelBlackTransfer(address addr);\r\n\r\n    constructor() public {\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!paused || owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function addBlackTransfer (address blackTransfer, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_BLACKTRANSFER);\r\n        require(blackTransfer != address(0));\r\n        require(!blackTransferAddrs[blackTransfer]);\r\n        require(chkBlackTransfer[num] == address(0));\r\n\r\n        chkBlackTransfer[num] = blackTransfer;\r\n        blackTransferAddrs[blackTransfer] = true;\r\n        \r\n        emit AddBlackTransfer(blackTransfer);\r\n\r\n        return blackTransferAddrs[blackTransfer];\r\n    }\r\n\r\n    function delBlackTransfer (address blackTransfer, uint8 num) public onlySuperOwner returns (bool) {\r\n        require(num < MAX_BLACKTRANSFER);\r\n        require(blackTransfer != address(0));\r\n        require(blackTransferAddrs[blackTransfer]);\r\n        require(chkBlackTransfer[num] == blackTransfer);\r\n\r\n        chkBlackTransfer[num] = address(0);\r\n        blackTransferAddrs[blackTransfer] = false;\r\n\r\n        emit DelBlackTransfer(blackTransfer);\r\n\r\n        return blackTransferAddrs[blackTransfer];\r\n    }\r\n   \r\n    function pause() public onlySuperOwner returns (bool) {\r\n        require(!paused);\r\n\r\n        paused = true;\r\n        \r\n        emit Paused(msg.sender);\r\n\r\n        return paused;\r\n    }\r\n\r\n    function unpause() public onlySuperOwner returns (bool) {\r\n        require(paused);\r\n\r\n        paused = false;\r\n        \r\n        emit Unpaused(msg.sender);\r\n\r\n        return paused;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused whenPermitted(msg.sender) returns (bool) {\r\n        if (blackTransferAddrs[msg.sender]) {\r\n            if (blacklisted[to] == false) {\r\n                blacklisted[to] = true;\r\n                emit Blacklisted(to);\r\n            }\r\n        }\r\n        \r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public \r\n    whenNotPaused whenPermitted(from) whenPermitted(msg.sender) returns (bool) {\r\n        require(!blackTransferAddrs[from]);\r\n\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n}\r\n/**\r\n * @title HADS\r\n *\r\n */\r\ncontract HADS is PausableToken {\r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    event Mint(address indexed minter, uint256 value);\r\n\r\n    string public constant name = \"HadesCoin\";\r\n    uint8 public constant decimals = 18;\r\n    string public constant symbol = \"HADS\";\r\n    uint256 public constant INITIAL_SUPPLY = 3e9 * (10 ** uint256(decimals));  // 30억개\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        \r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function destory() public onlyHiddenOwner returns (bool) {\r\n        \r\n        selfdestruct(superOwner);\r\n\r\n        return true;\r\n    }\r\n    /**\r\n\t* @dev HADS의 민트는 오직 히든오너만 실행 가능하며, 수퍼오너에게 귀속된다. \r\n    * 추가로 발행하려는 토큰과 기존 totalSupply_의 합이 최초 발행된 토큰의 양(INITIAL_SUPPLY)보다 클 수 없다.\r\n\t*\r\n    * HADS的MINT只能由HIDDENOWNER进行执行，其所有权归SUPEROWNER所有。\r\n    * 追加进行发行的数字货币与totalSupply_的和不可大于最初发行的数字货币(INITIAL_SUPPLY)数量。\r\n    *\r\n    * Only the Hiddenowner can mint HADS, and the minted is reverted to SUPEROWNER.\r\n    * The sum of additional tokens to be issued and \r\n    * the existing totalSupply_ cannot be greater than the initially issued token supply(INITIAL_SUPPLY).\r\n    */\r\n    function mint(uint256 _amount) public onlyHiddenOwner returns (bool) {\r\n        \r\n        require(INITIAL_SUPPLY >= totalSupply_.add(_amount));\r\n        \r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        \r\n        balances[superOwner] = balances[superOwner].add(_amount);\r\n\r\n        emit Mint(superOwner, _amount);\r\n        \r\n        emit Transfer(address(0), superOwner, _amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n\t* @dev HADS의 번은 오직 버너만 실행 가능하며, Owner가 등록할 수 있는 Burnlist에 등록된 계정만 토큰 번 할 수 있다.\r\n    * \r\n    * HADS的BURN只能由BURNER进行执行，OWNER只有登记在Burnlist的账户才能对数字货币执行BURN。\r\n    *\r\n    * Only the BURNER can burn HADS, \r\n    * and only the tokens that can be burned are those on Burnlist account that Owner can register.\r\n    */\r\n    function burn(address _to,uint256 _value) public onlyBurner isBurnlisted(_to) returns(bool) {\r\n        \r\n        _burn(_to, _value);\r\n\t\t\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal returns(bool){     \r\n        require(_value <= balances[_who]);\r\n        \r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n    \r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n\t\t\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddBlackTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"AddedBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnlist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"signal\",\"type\":\"bool\"}],\"name\":\"Burnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"ChangedHiddenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReclaimer\",\"type\":\"address\"}],\"name\":\"ChangedReclaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"ChangedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DelBlackTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDeleteBurner\",\"type\":\"address\"}],\"name\":\"DeletedBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDeleteOwner\",\"type\":\"address\"}],\"name\":\"DeletedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ReclaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"blackTransfer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addBlackTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"addBurnlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackTransferAddrs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newReclaimer\",\"type\":\"address\"}],\"name\":\"changeReclaimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkBlackTransfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkBurnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkOwnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"blackTransfer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"delBlackTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"delBurnlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isburnlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ERC20Basic\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HADS","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://273fdde5c983cba1c4c5a882ae0f1502c2a00c96041ddfb3c698435357df2e59"}]}