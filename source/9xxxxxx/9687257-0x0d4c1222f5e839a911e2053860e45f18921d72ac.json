{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/PlasmaFramework.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BlockController.sol\\\";\\nimport \\\"./ExitGameController.sol\\\";\\nimport \\\"./registries/VaultRegistry.sol\\\";\\nimport \\\"./registries/ExitGameRegistry.sol\\\";\\n\\ncontract PlasmaFramework is VaultRegistry, ExitGameRegistry, ExitGameController, BlockController {\\n    uint256 public constant CHILD_BLOCK_INTERVAL = 1000;\\n\\n    /**\\n     * The minimum finalization period is the Plasma guarantee that all exits are safe provided the user takes action within the specified time period\\n     * When the child chain is rogue, user should start their exit and challenge any invalid exit within this period\\n     * An exit can be processed/finalized after minimum two finalization periods from its inclusion position, unless it is an exit for a deposit,\\n     * which would use one finalization period, instead of two\\n     *\\n     * For the Abstract Layer Design, OmiseGO also uses some multitude of this period to update its framework\\n     * See also ExitGameRegistry.sol, VaultRegistry.sol, and Vault.sol for more information on the update waiting time (the quarantined period)\\n     *\\n     * MVP: https://ethresear.ch/t/minimal-viable-plasma/426\\n     * MoreVP: https://github.com/omisego/elixir-omg/blob/master/docs/morevp.md#timeline\\n     * Special period for deposit: https://git.io/JecCV\\n     */\\n    uint256 public minExitPeriod;\\n    address private maintainer;\\n    string public version;\\n\\n    constructor(\\n        uint256 _minExitPeriod,\\n        uint256 _initialImmuneVaults,\\n        uint256 _initialImmuneExitGames,\\n        address _authority,\\n        address _maintainer\\n    )\\n        public\\n        BlockController(CHILD_BLOCK_INTERVAL, _minExitPeriod, _initialImmuneVaults, _authority)\\n        ExitGameController(_minExitPeriod, _initialImmuneExitGames)\\n    {\\n        minExitPeriod = _minExitPeriod;\\n        maintainer = _maintainer;\\n    }\\n\\n    function getMaintainer() public view returns (address) {\\n        return maintainer;\\n    }\\n\\n    /**\\n     * @notice Gets the semantic version of the current deployed contracts\\n    */\\n    function getVersion() external view returns (string memory) {\\n        return version;\\n    }\\n    \\n    /**\\n     * @notice Sets the semantic version of the current deployed contracts\\n     * @param _version is semver string\\n     */\\n    function setVersion(string memory _version) public onlyFrom(getMaintainer()) {\\n        version = _version;\\n    }\\n}\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/BlockController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nimport \\\"./models/BlockModel.sol\\\";\\nimport \\\"./registries/VaultRegistry.sol\\\";\\nimport \\\"../utils/OnlyFromAddress.sol\\\";\\n\\n/**\\n* @notice Controls the logic and functions for block submissions in PlasmaFramework\\n* @dev There are two types of blocks: child block and deposit block\\n*      Each child block has an interval of 'childBlockInterval'\\n*      The interval is preserved for deposits. Each deposit results in one deposit block.\\n*      For instance, a child block would be in block 1000 and the next deposit would result in block 1001.\\n*\\n*      Only the authority address can perform a block submission.\\n*      Details on limitations for the authority address can be found here: https://github.com/omisego/elixir-omg#managing-the-operator-address\\n*/\\ncontract BlockController is OnlyFromAddress, VaultRegistry {\\n    address public authority;\\n    uint256 public childBlockInterval;\\n    uint256 public nextChildBlock;\\n    uint256 public nextDeposit;\\n    bool public isChildChainActivated;\\n\\n    mapping (uint256 => BlockModel.Block) public blocks; // block number => Block data\\n\\n    event BlockSubmitted(\\n        uint256 blknum\\n    );\\n\\n    event ChildChainActivated(\\n        address authority\\n    );\\n\\n    constructor(\\n        uint256 _interval,\\n        uint256 _minExitPeriod,\\n        uint256 _initialImmuneVaults,\\n        address _authority\\n    )\\n        public\\n        VaultRegistry(_minExitPeriod, _initialImmuneVaults)\\n    {\\n        authority = _authority;\\n        childBlockInterval = _interval;\\n        nextChildBlock = childBlockInterval;\\n        nextDeposit = 1;\\n        isChildChainActivated = false;\\n    }\\n\\n    /**\\n     * @notice Activates the child chain so that child chain can start to submit child blocks to root chain\\n     * @notice Can only be called once by the authority.\\n     * @notice Sets isChildChainActivated to true and emits the ChildChainActivated event.\\n     * @dev This is a preserved action for authority account to start its nonce with 1.\\n     *      Child chain rely ethereum nonce to protect re-org: https://git.io/JecDG\\n     *      see discussion: https://git.io/JenaT, https://git.io/JecDO\\n     */\\n    function activateChildChain() external onlyFrom(authority) {\\n        require(isChildChainActivated == false, \\\"Child chain already activated\\\");\\n        isChildChainActivated = true;\\n        emit ChildChainActivated(authority);\\n    }\\n\\n    /**\\n     * @notice Allows the authority to submit the Merkle root of a Plasma block\\n     * @dev emit BlockSubmitted event\\n     * @dev Block number jumps 'childBlockInterval' per submission\\n     * @dev See discussion in https://github.com/omisego/plasma-contracts/issues/233\\n     * @param _blockRoot Merkle root of the Plasma block\\n     */\\n    function submitBlock(bytes32 _blockRoot) external onlyFrom(authority) {\\n        require(isChildChainActivated == true, \\\"Child chain has not been activated by authority address yet\\\");\\n        uint256 submittedBlockNumber = nextChildBlock;\\n\\n        blocks[submittedBlockNumber] = BlockModel.Block({\\n            root: _blockRoot,\\n            timestamp: block.timestamp\\n        });\\n\\n        nextChildBlock += childBlockInterval;\\n        nextDeposit = 1;\\n\\n        emit BlockSubmitted(submittedBlockNumber);\\n    }\\n\\n    /**\\n     * @notice Submits a block for deposit\\n     * @dev Block number adds 1 per submission; it's possible to have at most 'childBlockInterval' deposit blocks between two child chain blocks\\n     * @param _blockRoot Merkle root of the Plasma block\\n     * @return The deposit block number\\n     */\\n    function submitDepositBlock(bytes32 _blockRoot) public onlyFromNonQuarantinedVault returns (uint256) {\\n        require(isChildChainActivated == true, \\\"Child chain has not been activated by authority address yet\\\");\\n        require(nextDeposit < childBlockInterval, \\\"Exceeded limit of deposits per child block interval\\\");\\n\\n        uint256 blknum = nextDepositBlock();\\n        blocks[blknum] = BlockModel.Block({\\n            root : _blockRoot,\\n            timestamp : block.timestamp\\n        });\\n\\n        nextDeposit++;\\n        return blknum;\\n    }\\n\\n    function nextDepositBlock() public view returns (uint256) {\\n        return nextChildBlock - childBlockInterval + nextDeposit;\\n    }\\n\\n    function isDeposit(uint256 blockNum) public view returns (bool) {\\n        require(blocks[blockNum].timestamp != 0, \\\"Block does not exist\\\");\\n        return blockNum % childBlockInterval != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/ExitGameController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IExitProcessor.sol\\\";\\nimport \\\"./registries/ExitGameRegistry.sol\\\";\\nimport \\\"./utils/PriorityQueue.sol\\\";\\nimport \\\"./utils/ExitPriority.sol\\\";\\nimport \\\"../utils/PosLib.sol\\\";\\n\\n/**\\n * @notice Controls the logic and functions for ExitGame to interact with the PlasmaFramework\\n *         Plasma M(ore)VP relies on exit priority to secure the user from invalid transactions\\n *         The priority queue ensures the exit is processed with the exit priority\\n *         For details, see the Plasma MVP spec: https://ethresear.ch/t/minimal-viable-plasma/426\\n */\\ncontract ExitGameController is ExitGameRegistry {\\n    // exit hashed (priority, vault id, token) => IExitProcessor\\n    mapping (bytes32 => IExitProcessor) public delegations;\\n    // hashed (vault id, token) => PriorityQueue\\n    mapping (bytes32 => PriorityQueue) public exitsQueues;\\n    // outputId => exitId\\n    mapping (bytes32 => uint160) public outputsFinalizations;\\n    bool private mutex = false;\\n\\n    event ExitQueueAdded(\\n        uint256 vaultId,\\n        address token\\n    );\\n\\n    event ProcessedExitsNum(\\n        uint256 processedNum,\\n        uint256 vaultId,\\n        address token\\n    );\\n\\n    event ExitQueued(\\n        uint160 indexed exitId,\\n        uint256 priority\\n    );\\n\\n    constructor(uint256 _minExitPeriod, uint256 _initialImmuneExitGames)\\n        public\\n        ExitGameRegistry(_minExitPeriod, _initialImmuneExitGames)\\n    {\\n    }\\n\\n    /**\\n     * @dev Prevents reentrant calls by using a mutex.\\n     */\\n    modifier nonReentrant() {\\n        require(!mutex, \\\"Reentrant call\\\");\\n        mutex = true;\\n        _;\\n        assert(mutex);\\n        mutex = false;\\n    }\\n\\n    /**\\n     * @notice Activates non reentrancy mode\\n     *         Guards against reentering into publicly accessible code that modifies state related to exits\\n     * @dev Accessible only from non quarantined exit games, uses a mutex\\n     */\\n    function activateNonReentrant() external onlyFromNonQuarantinedExitGame() {\\n        require(!mutex, \\\"Reentrant call\\\");\\n        mutex = true;\\n    }\\n\\n    /**\\n     * @notice Deactivates non reentrancy mode\\n     * @dev Accessible only from non quarantined exit games, uses a mutex\\n     */\\n    function deactivateNonReentrant() external onlyFromNonQuarantinedExitGame() {\\n        assert(mutex);\\n        mutex = false;\\n    }\\n\\n    /**\\n     * @notice Checks if the queue for a specified token was created\\n     * @param vaultId ID of the vault that handles the token\\n     * @param token Address of the token\\n     * @return bool Defines whether the queue for a token was created\\n     */\\n    function hasExitQueue(uint256 vaultId, address token) public view returns (bool) {\\n        bytes32 key = exitQueueKey(vaultId, token);\\n        return hasExitQueue(key);\\n    }\\n\\n    /**\\n     * @notice Adds queue to the Plasma framework\\n     * @dev The queue is created as a new contract instance\\n     * @param vaultId ID of the vault\\n     * @param token Address of the token\\n     */\\n    function addExitQueue(uint256 vaultId, address token) external {\\n        require(vaultId != 0, \\\"Vault ID must not be 0\\\");\\n        bytes32 key = exitQueueKey(vaultId, token);\\n        require(!hasExitQueue(key), \\\"Exit queue exists\\\");\\n        exitsQueues[key] = new PriorityQueue();\\n        emit ExitQueueAdded(vaultId, token);\\n    }\\n\\n    /**\\n     * @notice Enqueue exits from exit game contracts is a function that places the exit into the\\n     *         priority queue to enforce the priority of exit during 'processExits'\\n     * @dev emits ExitQueued event, which can be used to back trace the priority inside the queue\\n     * @dev Caller of this function should add \\\"pragma experimental ABIEncoderV2;\\\" on top of file\\n     * @dev Priority (exitableAt, txPos, exitId) must be unique per queue. Do not enqueue when the same priority is already in the queue.\\n     * @param vaultId Vault ID of the vault that stores exiting funds\\n     * @param token Token for the exit\\n     * @param exitableAt The earliest time a specified exit can be processed\\n     * @param txPos Transaction position for the exit priority. For SE it should be the exit tx, for IFE it should be the youngest input tx position.\\n     * @param exitId ID used by the exit processor contract to determine how to process the exit\\n     * @param exitProcessor The exit processor contract, called during \\\"processExits\\\"\\n     * @return A unique priority number computed for the exit\\n     */\\n    function enqueue(\\n        uint256 vaultId,\\n        address token,\\n        uint64 exitableAt,\\n        PosLib.Position calldata txPos,\\n        uint160 exitId,\\n        IExitProcessor exitProcessor\\n    )\\n        external\\n        onlyFromNonQuarantinedExitGame\\n        returns (uint256)\\n    {\\n        bytes32 key = exitQueueKey(vaultId, token);\\n        require(hasExitQueue(key), \\\"The queue for the (vaultId, token) pair is not yet added to the Plasma framework\\\");\\n        PriorityQueue queue = exitsQueues[key];\\n\\n        uint256 priority = ExitPriority.computePriority(exitableAt, txPos, exitId);\\n\\n        queue.insert(priority);\\n\\n        bytes32 delegationKey = getDelegationKey(priority, vaultId, token);\\n        require(address(delegations[delegationKey]) == address(0), \\\"The same priority is already enqueued\\\");\\n        delegations[delegationKey] = exitProcessor;\\n\\n        emit ExitQueued(exitId, priority);\\n        return priority;\\n    }\\n\\n    /**\\n     * @notice Processes any exits that have completed the challenge period. Exits are processed according to the exit priority.\\n     * @dev Emits ProcessedExitsNum event\\n     * @param vaultId Vault ID of the vault that stores exiting funds\\n     * @param token The token type to process\\n     * @param topExitId Unique identifier for prioritizing the first exit to process. Set to zero to skip this check.\\n     * @param maxExitsToProcess Maximum number of exits to process\\n     * @return Total number of processed exits\\n     */\\n    function processExits(uint256 vaultId, address token, uint160 topExitId, uint256 maxExitsToProcess) external nonReentrant {\\n        bytes32 key = exitQueueKey(vaultId, token);\\n        require(hasExitQueue(key), \\\"The token is not yet added to the Plasma framework\\\");\\n        PriorityQueue queue = exitsQueues[key];\\n        require(queue.currentSize() > 0, \\\"Exit queue is empty\\\");\\n\\n        uint256 uniquePriority = queue.getMin();\\n        uint160 exitId = ExitPriority.parseExitId(uniquePriority);\\n        require(topExitId == 0 || exitId == topExitId,\\n            \\\"Top exit ID of the queue is different to the one specified\\\");\\n\\n        bytes32 delegationKey = getDelegationKey(uniquePriority, vaultId, token);\\n        IExitProcessor processor = delegations[delegationKey];\\n        uint256 processedNum = 0;\\n\\n        while (processedNum < maxExitsToProcess && ExitPriority.parseExitableAt(uniquePriority) < block.timestamp) {\\n            delete delegations[delegationKey];\\n            queue.delMin();\\n            processedNum++;\\n\\n            processor.processExit(exitId, vaultId, token);\\n\\n            if (queue.currentSize() == 0) {\\n                break;\\n            }\\n\\n            uniquePriority = queue.getMin();\\n            delegationKey = getDelegationKey(uniquePriority, vaultId, token);\\n            exitId = ExitPriority.parseExitId(uniquePriority);\\n            processor = delegations[delegationKey];\\n        }\\n\\n        emit ProcessedExitsNum(processedNum, vaultId, token);\\n    }\\n\\n    /**\\n     * @notice Checks whether any of the output with the given outputIds is already spent\\n     * @param _outputIds Output IDs to check\\n     */\\n    function isAnyInputFinalizedByOtherExit(bytes32[] calldata _outputIds, uint160 exitId) external view returns (bool) {\\n        for (uint i = 0; i < _outputIds.length; i++) {\\n            uint160 finalizedExitId = outputsFinalizations[_outputIds[i]];\\n            if (finalizedExitId != 0 && finalizedExitId != exitId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Batch flags already spent outputs (only not already spent)\\n     * @param outputIds Output IDs to flag\\n     */\\n    function batchFlagOutputsFinalized(bytes32[] calldata outputIds, uint160 exitId) external onlyFromNonQuarantinedExitGame {\\n        for (uint i = 0; i < outputIds.length; i++) {\\n            require(outputIds[i] != bytes32(\\\"\\\"), \\\"Should not flag with empty outputId\\\");\\n            if (outputsFinalizations[outputIds[i]] == 0) {\\n                outputsFinalizations[outputIds[i]] = exitId;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Flags a single output as spent if it is not flagged already\\n     * @param outputId The output ID to flag as spent\\n     */\\n    function flagOutputFinalized(bytes32 outputId, uint160 exitId) external onlyFromNonQuarantinedExitGame {\\n        require(outputId != bytes32(\\\"\\\"), \\\"Should not flag with empty outputId\\\");\\n        if (outputsFinalizations[outputId] == 0) {\\n            outputsFinalizations[outputId] = exitId;\\n        }\\n    }\\n\\n     /**\\n     * @notice Checks whether output with a given outputId is finalized\\n     * @param outputId Output ID to check\\n     */\\n    function isOutputFinalized(bytes32 outputId) external view returns (bool) {\\n        return outputsFinalizations[outputId] != 0;\\n    }\\n\\n    function getNextExit(uint256 vaultId, address token) external view returns (uint256) {\\n        bytes32 key = exitQueueKey(vaultId, token);\\n        return exitsQueues[key].getMin();\\n    }\\n\\n    function exitQueueKey(uint256 vaultId, address token) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(vaultId, token));\\n    }\\n\\n    function hasExitQueue(bytes32 queueKey) private view returns (bool) {\\n        return address(exitsQueues[queueKey]) != address(0);\\n    }\\n\\n    function getDelegationKey(uint256 priority, uint256 vaultId, address token) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(priority, vaultId, token));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/Protocol.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\n/**\\n * @notice Protocols for the PlasmaFramework\\n */\\nlibrary Protocol {\\n    uint8 constant internal MVP_VALUE = 1;\\n    uint8 constant internal MORE_VP_VALUE = 2;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MVP() internal pure returns (uint8) {\\n        return MVP_VALUE;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MORE_VP() internal pure returns (uint8) {\\n        return MORE_VP_VALUE;\\n    }\\n\\n    function isValidProtocol(uint8 protocol) internal pure returns (bool) {\\n        return protocol == MVP_VALUE || protocol == MORE_VP_VALUE;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/interfaces/IExitProcessor.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\n/**\\n * @dev An interface that allows custom logic to process exits for different requirements.\\n *      This interface is used to dispatch to each custom processor when 'processExits' is called on PlasmaFramework.\\n */\\ninterface IExitProcessor {\\n    /**\\n     * @dev Function interface for processing exits.\\n     * @param exitId Unique ID for exit per tx type\\n     * @param vaultId ID of the vault that funds the exit\\n     * @param token Address of the token contract\\n     */\\n    function processExit(uint160 exitId, uint256 vaultId, address token) external;\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/models/BlockModel.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nlibrary BlockModel {\\n    /**\\n     * @notice Block data structure that is stored in the contract\\n     * @param root The Merkle root block hash of the Plasma blocks\\n     * @param timestamp The timestamp, in seconds, when the block is saved\\n     */\\n    struct Block {\\n        bytes32 root;\\n        uint256 timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/registries/ExitGameRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../Protocol.sol\\\";\\nimport \\\"../utils/Quarantine.sol\\\";\\nimport \\\"../../utils/OnlyFromAddress.sol\\\";\\n\\ncontract ExitGameRegistry is OnlyFromAddress {\\n    using Quarantine for Quarantine.Data;\\n\\n    mapping(uint256 => address) private _exitGames; // txType => exit game contract address\\n    mapping(address => uint256) private _exitGameToTxType; // exit game contract address => tx type\\n    mapping(uint256 => uint8) private _protocols; // tx type => protocol (MVP/MORE_VP)\\n    Quarantine.Data private _exitGameQuarantine;\\n\\n    event ExitGameRegistered(\\n        uint256 txType,\\n        address exitGameAddress,\\n        uint8 protocol\\n    );\\n\\n    /**\\n     * @dev It takes at least 3 * minExitPeriod before each new exit game contract is able to start protecting existing transactions\\n     *      see: https://github.com/omisego/plasma-contracts/issues/172\\n     *           https://github.com/omisego/plasma-contracts/issues/197\\n     */\\n    constructor (uint256 _minExitPeriod, uint256 _initialImmuneExitGames)\\n        public\\n    {\\n        _exitGameQuarantine.quarantinePeriod = 4 * _minExitPeriod;\\n        _exitGameQuarantine.immunitiesRemaining = _initialImmuneExitGames;\\n    }\\n\\n    /**\\n     * @notice A modifier to verify that the call is from a non-quarantined exit game\\n     */\\n    modifier onlyFromNonQuarantinedExitGame() {\\n        require(_exitGameToTxType[msg.sender] != 0, \\\"The call is not from a registered exit game contract\\\");\\n        require(!_exitGameQuarantine.isQuarantined(msg.sender), \\\"ExitGame is quarantined\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice interface to get the 'maintainer' address.\\n     * @dev see discussion here: https://git.io/Je8is\\n     */\\n    function getMaintainer() public view returns (address);\\n\\n    /**\\n     * @notice Checks whether the contract is safe to use and is not under quarantine\\n     * @dev Exposes information about exit games quarantine\\n     * @param _contract Address of the exit game contract\\n     * @return boolean Whether the contract is safe to use and is not under quarantine\\n     */\\n    function isExitGameSafeToUse(address _contract) public view returns (bool) {\\n        return _exitGameToTxType[_contract] != 0 && !_exitGameQuarantine.isQuarantined(_contract);\\n    }\\n\\n    /**\\n     * @notice Registers an exit game within the PlasmaFramework. Only the maintainer can call the function.\\n     * @dev Emits ExitGameRegistered event to notify clients\\n     * @param _txType The tx type where the exit game wants to register\\n     * @param _contract Address of the exit game contract\\n     * @param _protocol The transaction protocol, either 1 for MVP or 2 for MoreVP\\n     */\\n    function registerExitGame(uint256 _txType, address _contract, uint8 _protocol) public onlyFrom(getMaintainer()) {\\n        require(_txType != 0, \\\"Should not register with tx type 0\\\");\\n        require(Address.isContract(_contract), \\\"Should not register with a non-contract address\\\");\\n        require(_exitGames[_txType] == address(0), \\\"The tx type is already registered\\\");\\n        require(_exitGameToTxType[_contract] == 0, \\\"The exit game contract is already registered\\\");\\n        require(Protocol.isValidProtocol(_protocol), \\\"Invalid protocol value\\\");\\n\\n        _exitGames[_txType] = _contract;\\n        _exitGameToTxType[_contract] = _txType;\\n        _protocols[_txType] = _protocol;\\n        _exitGameQuarantine.quarantine(_contract);\\n\\n        emit ExitGameRegistered(_txType, _contract, _protocol);\\n    }\\n\\n    /**\\n     * @notice Public getter for retrieving protocol with tx type\\n     */\\n    function protocols(uint256 _txType) public view returns (uint8) {\\n        return _protocols[_txType];\\n    }\\n\\n    /**\\n     * @notice Public getter for retrieving exit game address with tx type\\n     */\\n    function exitGames(uint256 _txType) public view returns (address) {\\n        return _exitGames[_txType];\\n    }\\n\\n    /**\\n     * @notice Public getter for retrieving tx type with exit game address\\n     */\\n    function exitGameToTxType(address _exitGame) public view returns (uint256) {\\n        return _exitGameToTxType[_exitGame];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/registries/VaultRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nimport \\\"openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../utils/Quarantine.sol\\\";\\nimport \\\"../../utils/OnlyFromAddress.sol\\\";\\n\\ncontract VaultRegistry is OnlyFromAddress {\\n    using Quarantine for Quarantine.Data;\\n\\n    mapping(uint256 => address) private _vaults; // vault id => vault address\\n    mapping(address => uint256) private _vaultToId; // vault address => vault id\\n    Quarantine.Data private _vaultQuarantine;\\n\\n    event VaultRegistered(\\n        uint256 vaultId,\\n        address vaultAddress\\n    );\\n\\n    /**\\n     * @dev It takes at least 2 minExitPeriod for each new vault contract to start.\\n     *      This is to protect deposit transactions already in mempool,\\n     *      and also make sure user only needs to SE within first week when invalid vault is registered.\\n     *      see: https://github.com/omisego/plasma-contracts/issues/412\\n     *           https://github.com/omisego/plasma-contracts/issues/173\\n     */\\n    constructor(uint256 _minExitPeriod, uint256 _initialImmuneVaults)\\n        public\\n    {\\n        _vaultQuarantine.quarantinePeriod = 2 * _minExitPeriod;\\n        _vaultQuarantine.immunitiesRemaining = _initialImmuneVaults;\\n    }\\n\\n    /**\\n     * @notice interface to get the 'maintainer' address.\\n     * @dev see discussion here: https://git.io/Je8is\\n     */\\n    function getMaintainer() public view returns (address);\\n\\n    /**\\n     * @notice A modifier to check that the call is from a non-quarantined vault\\n     */\\n    modifier onlyFromNonQuarantinedVault() {\\n        require(_vaultToId[msg.sender] > 0, \\\"The call is not from a registered vault\\\");\\n        require(!_vaultQuarantine.isQuarantined(msg.sender), \\\"Vault is quarantined\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Register a vault within the PlasmaFramework. Only a maintainer can make the call.\\n     * @dev emits VaultRegistered event to notify clients\\n     * @param _vaultId The ID for the vault contract to register\\n     * @param _vaultAddress Address of the vault contract\\n     */\\n    function registerVault(uint256 _vaultId, address _vaultAddress) public onlyFrom(getMaintainer()) {\\n        require(_vaultId != 0, \\\"Should not register with vault ID 0\\\");\\n        require(Address.isContract(_vaultAddress), \\\"Should not register with a non-contract address\\\");\\n        require(_vaults[_vaultId] == address(0), \\\"The vault ID is already registered\\\");\\n        require(_vaultToId[_vaultAddress] == 0, \\\"The vault contract is already registered\\\");\\n\\n        _vaults[_vaultId] = _vaultAddress;\\n        _vaultToId[_vaultAddress] = _vaultId;\\n        _vaultQuarantine.quarantine(_vaultAddress);\\n\\n        emit VaultRegistered(_vaultId, _vaultAddress);\\n    }\\n\\n    /**\\n     * @notice Public getter for retrieving vault address with vault ID\\n     */\\n    function vaults(uint256 _vaultId) public view returns (address) {\\n        return _vaults[_vaultId];\\n    }\\n\\n    /**\\n     * @notice Public getter for retrieving vault ID with vault address\\n     */\\n    function vaultToId(address _vaultAddress) public view returns (uint256) {\\n        return _vaultToId[_vaultAddress];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/utils/ExitPriority.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nimport \\\"../../utils/PosLib.sol\\\";\\n\\nlibrary ExitPriority {\\n\\n    using PosLib for PosLib.Position;\\n\\n    /**\\n     * @dev Returns an exit priority for a given UTXO position and a unique ID.\\n     * The priority for Plasma M(ore)VP protocol is a combination of 'exitableAt' and 'txPos'.\\n     * Since 'exitableAt' only provides granularity of block, add 'txPos' to provide priority for a transaction.\\n     * @notice Detailed explanation on field lengths can be found at https://github.com/omisego/plasma-contracts/pull/303#discussion_r328850572\\n     * @param exitId Unique exit identifier\\n     * @return An exit priority\\n     *   Anatomy of returned value, most significant bits first\\n     *   42 bits  - timestamp in seconds (exitable_at); we can represent dates until year 141431\\n     *   54 bits  - blocknum * 10^5 + txindex; 54 bits represent all transactions for 85 years. Be aware that child chain block number jumps with the interval of CHILD_BLOCK_INTERVAL, which would be 1000 in production.\\n     *   160 bits - exit id\\n     */\\n    function computePriority(uint64 exitableAt, PosLib.Position memory txPos, uint160 exitId)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (uint256(exitableAt) << 214) | (txPos.getTxPositionForExitPriority() << 160) | uint256(exitId);\\n    }\\n\\n    function parseExitableAt(uint256 priority) internal pure returns (uint64) {\\n        return uint64(priority >> 214);\\n    }\\n\\n    function parseExitId(uint256 priority) internal pure returns (uint160) {\\n        // Exit ID uses only 160 least significant bits\\n        return uint160(priority);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/utils/PriorityQueue.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nimport \\\"../../utils/OnlyFromAddress.sol\\\";\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title PriorityQueue\\n * @dev Min-heap priority queue implementation\\n */\\ncontract PriorityQueue is OnlyFromAddress {\\n    using SafeMath for uint256;\\n\\n    struct Queue {\\n        uint256[] heapList;\\n        uint256 currentSize;\\n    }\\n\\n    Queue public queue;\\n    address public framework;\\n\\n    constructor() public {\\n        queue.heapList = [0];\\n        queue.currentSize = 0;\\n\\n        // it is expected that this should be called by PlasmaFramework\\n        // and only PlasmaFramework contract can add things to the queue\\n        framework = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Gets num of elements in the queue\\n     */\\n    function currentSize() external view returns (uint256) {\\n        return queue.currentSize;\\n    }\\n\\n    /**\\n     * @notice Gets all elements in the queue\\n     */\\n    function heapList() external view returns (uint256[] memory) {\\n        return queue.heapList;\\n    }\\n\\n    /**\\n     * @notice Inserts an element into the queue by the framework\\n     * @dev Does not perform deduplication\\n     */\\n    function insert(uint256 _element) external onlyFrom(framework) {\\n        queue.heapList.push(_element);\\n        queue.currentSize = queue.currentSize.add(1);\\n        percUp(queue, queue.currentSize);\\n    }\\n\\n    /**\\n     * @notice Deletes the smallest element from the queue by the framework\\n     * @dev Fails when queue is empty\\n     * @return The smallest element in the priority queue\\n     */\\n    function delMin() external onlyFrom(framework) returns (uint256) {\\n        require(queue.currentSize > 0, \\\"Queue is empty\\\");\\n        uint256 retVal = queue.heapList[1];\\n        queue.heapList[1] = queue.heapList[queue.currentSize];\\n        delete queue.heapList[queue.currentSize];\\n        queue.currentSize = queue.currentSize.sub(1);\\n        percDown(queue, 1);\\n        queue.heapList.length = queue.heapList.length.sub(1);\\n        return retVal;\\n    }\\n\\n    /**\\n     * @notice Returns the smallest element from the queue\\n     * @dev Fails when queue is empty\\n     * @return The smallest element in the priority queue\\n     */\\n    function getMin() external view returns (uint256) {\\n        require(queue.currentSize > 0, \\\"Queue is empty\\\");\\n        return queue.heapList[1];\\n    }\\n\\n    function percUp(Queue storage self, uint256 pointer) private {\\n        uint256 i = pointer;\\n        uint256 j = i;\\n        uint256 newVal = self.heapList[i];\\n        while (newVal < self.heapList[i.div(2)]) {\\n            self.heapList[i] = self.heapList[i.div(2)];\\n            i = i.div(2);\\n        }\\n        if (i != j) {\\n            self.heapList[i] = newVal;\\n        }\\n    }\\n\\n    function percDown(Queue storage self, uint256 pointer) private {\\n        uint256 i = pointer;\\n        uint256 j = i;\\n        uint256 newVal = self.heapList[i];\\n        uint256 mc = minChild(self, i);\\n        while (mc <= self.currentSize && newVal > self.heapList[mc]) {\\n            self.heapList[i] = self.heapList[mc];\\n            i = mc;\\n            mc = minChild(self, i);\\n        }\\n        if (i != j) {\\n            self.heapList[i] = newVal;\\n        }\\n    }\\n\\n    function minChild(Queue storage self, uint256 i) private view returns (uint256) {\\n        if (i.mul(2).add(1) > self.currentSize) {\\n            return i.mul(2);\\n        } else {\\n            if (self.heapList[i.mul(2)] < self.heapList[i.mul(2).add(1)]) {\\n                return i.mul(2);\\n            } else {\\n                return i.mul(2).add(1);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/framework/utils/Quarantine.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\n/**\\n * @notice Provides a way to quarantine (disable) contracts for a specified period of time\\n * @dev The immunitiesRemaining member allows deployment to the platform with some\\n * pre-verified contracts that don't get quarantined\\n */\\nlibrary Quarantine {\\n    struct Data {\\n        mapping(address => uint256) store;\\n        uint256 quarantinePeriod;\\n        uint256 immunitiesRemaining;\\n    }\\n\\n    /**\\n     * @notice Checks whether a contract is quarantined\\n     */\\n    function isQuarantined(Data storage _self, address _contractAddress) internal view returns (bool) {\\n        return block.timestamp < _self.store[_contractAddress];\\n    }\\n\\n    /**\\n     * @notice Places a contract into quarantine\\n     * @param _contractAddress The address of the contract\\n     */\\n    function quarantine(Data storage _self, address _contractAddress) internal {\\n        require(_contractAddress != address(0), \\\"An empty address cannot be quarantined\\\");\\n        require(_self.store[_contractAddress] == 0, \\\"The contract is already quarantined\\\");\\n\\n        if (_self.immunitiesRemaining == 0) {\\n            _self.store[_contractAddress] = block.timestamp + _self.quarantinePeriod;\\n        } else {\\n            _self.immunitiesRemaining--;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/utils/OnlyFromAddress.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\ncontract OnlyFromAddress {\\n\\n    modifier onlyFrom(address caller) {\\n        require(msg.sender == caller, \\\"Caller address is unauthorized\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jake/plasma-contracts/plasma_framework/contracts/src/utils/PosLib.sol\": {\r\n      \"content\": \"pragma solidity 0.5.11;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev UTXO position = (blknum * BLOCK_OFFSET + txIndex * TX_OFFSET + outputIndex).\\n * TX position = (blknum * BLOCK_OFFSET + txIndex * TX_OFFSET)\\n */\\nlibrary PosLib {\\n    struct Position {\\n        uint64 blockNum;\\n        uint16 txIndex;\\n        uint16 outputIndex;\\n    }\\n\\n    uint256 constant internal BLOCK_OFFSET = 1000000000;\\n    uint256 constant internal TX_OFFSET = 10000;\\n    \\n    uint256 constant internal MAX_OUTPUT_INDEX = TX_OFFSET - 1;\\n    // since we are using merkle tree of depth 16, max tx index size is 2^16 - 1\\n    uint256 constant internal MAX_TX_INDEX = 2 ** 16 - 1;\\n    // in ExitPriority, only 54 bits are reserved for both blockNum and txIndex\\n    uint256 constant internal MAX_BLOCK_NUM = ((2 ** 54 - 1) - MAX_TX_INDEX) / (BLOCK_OFFSET / TX_OFFSET);\\n\\n    /**\\n     * @notice Returns transaction position which is an utxo position of zero index output\\n     * @param pos UTXO position of the output\\n     * @return Position of a transaction\\n     */\\n    function toStrictTxPos(Position memory pos)\\n        internal\\n        pure\\n        returns (Position memory)\\n    {\\n        return Position(pos.blockNum, pos.txIndex, 0);\\n    }\\n\\n    /**\\n     * @notice Used for calculating exit priority\\n     * @param pos UTXO position for the output\\n     * @return Identifier of the transaction\\n     */\\n    function getTxPositionForExitPriority(Position memory pos)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return encode(pos) / TX_OFFSET;\\n    }\\n\\n    /**\\n     * @notice Encodes a position\\n     * @param pos Position\\n     * @return Position encoded as an integer\\n     */\\n    function encode(Position memory pos) internal pure returns (uint256) {\\n        require(pos.outputIndex <= MAX_OUTPUT_INDEX, \\\"Invalid output index\\\");\\n        require(pos.blockNum <= MAX_BLOCK_NUM, \\\"Invalid block number\\\");\\n\\n        return pos.blockNum * BLOCK_OFFSET + pos.txIndex * TX_OFFSET + pos.outputIndex;\\n    }\\n\\n    /**\\n     * @notice Decodes a position from an integer value\\n     * @param pos Encoded position\\n     * @return Position\\n     */\\n    function decode(uint256 pos) internal pure returns (Position memory) {\\n        uint256 blockNum = pos / BLOCK_OFFSET;\\n        uint256 txIndex = (pos % BLOCK_OFFSET) / TX_OFFSET;\\n        uint16 outputIndex = uint16(pos % TX_OFFSET);\\n\\n        require(blockNum <= MAX_BLOCK_NUM, \\\"blockNum exceeds max size allowed in PlasmaFramework\\\");\\n        require(txIndex <= MAX_TX_INDEX, \\\"txIndex exceeds the size of uint16\\\");\\n        return Position(uint64(blockNum), uint16(txIndex), outputIndex);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isChildChainActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getNextExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"exitsQueues\",\"outputs\":[{\"internalType\":\"contract PriorityQueue\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"childBlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addExitQueue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextChildBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deactivateNonReentrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isExitGameSafeToUse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"registerVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"outputId\",\"type\":\"bytes32\"},{\"internalType\":\"uint160\",\"name\":\"exitId\",\"type\":\"uint160\"}],\"name\":\"flagOutputFinalized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"outputsFinalizations\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"setVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"exitableAt\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"txIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"outputIndex\",\"type\":\"uint16\"}],\"internalType\":\"struct PosLib.Position\",\"name\":\"txPos\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"exitId\",\"type\":\"uint160\"},{\"internalType\":\"contract IExitProcessor\",\"name\":\"exitProcessor\",\"type\":\"address\"}],\"name\":\"enqueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txType\",\"type\":\"uint256\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"outputId\",\"type\":\"bytes32\"}],\"name\":\"isOutputFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"outputIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint160\",\"name\":\"exitId\",\"type\":\"uint160\"}],\"name\":\"batchFlagOutputsFinalized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateChildChain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exitGame\",\"type\":\"address\"}],\"name\":\"exitGameToTxType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHILD_BLOCK_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txType\",\"type\":\"uint256\"}],\"name\":\"exitGames\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blockRoot\",\"type\":\"bytes32\"}],\"name\":\"submitBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_blockRoot\",\"type\":\"bytes32\"}],\"name\":\"submitDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_outputIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint160\",\"name\":\"exitId\",\"type\":\"uint160\"}],\"name\":\"isAnyInputFinalizedByOtherExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasExitQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"contract IExitProcessor\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minExitPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"topExitId\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"maxExitsToProcess\",\"type\":\"uint256\"}],\"name\":\"processExits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"vaultToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"isDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_protocol\",\"type\":\"uint8\"}],\"name\":\"registerExitGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateNonReentrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExitPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialImmuneVaults\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialImmuneExitGames\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blknum\",\"type\":\"uint256\"}],\"name\":\"BlockSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"ChildChainActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ExitQueueAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"processedNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProcessedExitsNum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"exitId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priority\",\"type\":\"uint256\"}],\"name\":\"ExitQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exitGameAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"protocol\",\"type\":\"uint8\"}],\"name\":\"ExitGameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultRegistered\",\"type\":\"event\"}]","ContractName":"PlasmaFramework","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000022405c1782913fb676bc74ef54a60727b0e1026f00000000000000000000000027b4c9e627f66eb3c7bf0e98751bd721615d3b21","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8fde3daf3f276ed6de6d1adee5dc86299efda13d25208e7ad91c46ed35d351c5"}]}