{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\n\ninterface IACL {\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\n}\n\ninterface IPPGlobalRegistry {\n  function setContract(bytes32 _key, address _value) external;\n\n  // GETTERS\n  function getContract(bytes32 _key) external view returns (address);\n  function getACL() external view returns (IACL);\n  function getGaltTokenAddress() external view returns (address);\n  function getPPTokenRegistryAddress() external view returns (address);\n  function getPPLockerRegistryAddress() external view returns (address);\n  function getPPMarketAddress() external view returns (address);\n}\n\ninterface IPPToken {\n  event SetMinter(address indexed minter);\n  event SetBaseURI(string baseURI);\n  event SetDataLink(string indexed dataLink);\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\n  event SetController(address indexed controller);\n  event SetDetails(\n    address indexed geoDataManager,\n    uint256 indexed privatePropertyId\n  );\n  event SetContour(\n    address indexed geoDataManager,\n    uint256 indexed privatePropertyId\n  );\n  event SetExtraData(bytes32 indexed key, bytes32 value);\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\n\n  enum PropertyInitialSetupStage {\n    PENDING,\n    DETAILS,\n    DONE\n  }\n\n  enum AreaSource {\n    USER_INPUT,\n    CONTRACT\n  }\n\n  enum TokenType {\n    NULL,\n    LAND_PLOT,\n    BUILDING,\n    ROOM,\n    PACKAGE\n  }\n\n  // ERC20 METHOD\n  function transferFrom(address from, address to, uint256 tokenId) external;\n  function approve(address to, uint256 tokenId) external;\n\n  // PERMISSIONED METHODS\n\n  function setMinter(address _minter) external;\n  function setDataLink(string calldata _dataLink) external;\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\n  function setController(address payable _controller) external;\n  function setDetails(\n    uint256 _privatePropertyId,\n    TokenType _tokenType,\n    AreaSource _areaSource,\n    uint256 _area,\n    bytes32 _ledgerIdentifier,\n    string calldata _humanAddress,\n    string calldata _dataLink\n  )\n    external;\n\n  function setContour(\n    uint256 _privatePropertyId,\n    uint256[] calldata _contour,\n    int256 _highestPoint\n  )\n    external;\n\n  function mint(address _to) external;\n  function burn(uint256 _tokenId) external;\n\n  // GETTERS\n  function controller() external view returns (address payable);\n  function minter() external view returns (address);\n\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\n  function ownerOf(uint256 _tokenId) external view returns (address);\n  function exists(uint256 _tokenId) external view returns (bool);\n  function getType(uint256 _tokenId) external view returns (TokenType);\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\n  function getArea(uint256 _tokenId) external view returns (uint256);\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\n  function getDetails(uint256 _privatePropertyId)\n    external\n    view\n    returns (\n      TokenType tokenType,\n      uint256[] memory contour,\n      int256 highestPoint,\n      AreaSource areaSource,\n      uint256 area,\n      bytes32 ledgerIdentifier,\n      string memory humanAddress,\n      string memory dataLink,\n      PropertyInitialSetupStage setupStage\n    );\n}\n\ninterface IRA {\n  // ERC20 compatible\n  function balanceOf(address owner) external view returns (uint256);\n\n  // ERC20 compatible\n  function totalSupply() external view returns (uint256);\n\n  // Ping-Pong Handshake\n  function ping() external pure returns (bytes32);\n}\n\ninterface IPPLocker {\n  function deposit(IPPToken _tokenContract, uint256 _tokenId) external payable;\n  function withdraw() external;\n  function approveMint(IRA _tra) external;\n  function burn(IRA _tra) external;\n  function isMinted(address _tra) external view returns (bool);\n  function getTras() external view returns (address[] memory);\n  function getTrasCount() external view returns (uint256);\n  function isOwner() external view returns (bool);\n  function owner() external view returns(address);\n  function tokenId() external view returns(uint256);\n  function reputation() external view returns(uint256);\n  function tokenContract() external view returns(IPPToken);\n}\n\ninterface IPPLockerRegistry {\n  event AddLocker(address indexed locker, address indexed owner, address indexed factory);\n  event SetFactory(address factory);\n\n  function addLocker(address _locker) external;\n  function requireValidLocker(address _locker) external view;\n  function isValid(address _locker) external view returns (bool);\n}\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates if the contract has been initialized.\n   */\n  bool public initialized;\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n  }\n}\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract OwnableAndInitializable is Ownable, Initializable {\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(tx.origin);\n  }\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract. Allow a custom owner setup;\n   */\n  modifier initializeWithOwner(address _owner) {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(_owner);\n  }\n}\n\nlibrary ArraySet {\n  struct AddressSet {\n    address[] array;\n    mapping(address => uint256) map;\n    mapping(address => bool) exists;\n  }\n\n  struct Bytes32Set {\n    bytes32[] array;\n    mapping(bytes32 => uint256) map;\n    mapping(bytes32 => bool) exists;\n  }\n\n  // AddressSet\n  function add(AddressSet storage _set, address _v) internal {\n    require(_set.exists[_v] == false, \"Element already exists\");\n\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n  }\n\n  function addSilent(AddressSet storage _set, address _v) internal returns (bool) {\n    if (_set.exists[_v] == true) {\n      return false;\n    }\n\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n\n    return true;\n  }\n\n  function remove(AddressSet storage _set, address _v) internal {\n    require(_set.array.length > 0, \"Array is empty\");\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\n\n    _remove(_set, _v);\n  }\n\n  function removeSilent(AddressSet storage _set, address _v) internal returns (bool) {\n    if (_set.exists[_v] == false) {\n      return false;\n    }\n\n    _remove(_set, _v);\n    return true;\n  }\n\n  function _remove(AddressSet storage _set, address _v) internal {\n    uint256 lastElementIndex = _set.array.length - 1;\n    uint256 currentElementIndex = _set.map[_v];\n    address lastElement = _set.array[lastElementIndex];\n\n    _set.array[currentElementIndex] = lastElement;\n    delete _set.array[lastElementIndex];\n\n    _set.array.length = _set.array.length - 1;\n    delete _set.map[_v];\n    delete _set.exists[_v];\n    _set.map[lastElement] = currentElementIndex;\n  }\n\n  function clear(AddressSet storage _set) internal {\n    for (uint256 i = 0; i < _set.array.length; i++) {\n      address v = _set.array[i];\n      delete _set.map[v];\n      _set.exists[v] = false;\n    }\n\n    delete _set.array;\n  }\n\n  function has(AddressSet storage _set, address _v) internal view returns (bool) {\n    return _set.exists[_v];\n  }\n\n  function elements(AddressSet storage _set) internal view returns (address[] storage) {\n    return _set.array;\n  }\n\n  function size(AddressSet storage _set) internal view returns (uint256) {\n    return _set.array.length;\n  }\n\n  function isEmpty(AddressSet storage _set) internal view returns (bool) {\n    return _set.array.length == 0;\n  }\n\n  // Bytes32Set\n  function add(Bytes32Set storage _set, bytes32 _v) internal {\n    require(_set.exists[_v] == false, \"Element already exists\");\n\n    _add(_set, _v);\n  }\n\n  function addSilent(Bytes32Set storage _set, bytes32 _v) internal returns (bool) {\n    if (_set.exists[_v] == true) {\n      return false;\n    }\n\n    _add(_set, _v);\n\n    return true;\n  }\n\n  function _add(Bytes32Set storage _set, bytes32 _v) internal {\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n  }\n\n  function remove(Bytes32Set storage _set, bytes32 _v) internal {\n    require(_set.array.length > 0, \"Array is empty\");\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\n\n    _remove(_set, _v);\n  }\n\n  function removeSilent(Bytes32Set storage _set, bytes32 _v) internal returns (bool) {\n    if (_set.exists[_v] == false) {\n      return false;\n    }\n\n    _remove(_set, _v);\n    return true;\n  }\n\n  function _remove(Bytes32Set storage _set, bytes32 _v) internal {\n    uint256 lastElementIndex = _set.array.length - 1;\n    uint256 currentElementIndex = _set.map[_v];\n    bytes32 lastElement = _set.array[lastElementIndex];\n\n    _set.array[currentElementIndex] = lastElement;\n    delete _set.array[lastElementIndex];\n\n    _set.array.length = _set.array.length - 1;\n    delete _set.map[_v];\n    delete _set.exists[_v];\n    _set.map[lastElement] = currentElementIndex;\n  }\n\n  function clear(Bytes32Set storage _set) internal {\n    for (uint256 i = 0; i < _set.array.length; i++) {\n      _set.exists[_set.array[i]] = false;\n    }\n\n    delete _set.array;\n  }\n\n  function has(Bytes32Set storage _set, bytes32 _v) internal view returns (bool) {\n    return _set.exists[_v];\n  }\n\n  function elements(Bytes32Set storage _set) internal view returns (bytes32[] storage) {\n    return _set.array;\n  }\n\n  function size(Bytes32Set storage _set) internal view returns (uint256) {\n    return _set.array.length;\n  }\n\n  function isEmpty(Bytes32Set storage _set) internal view returns (bool) {\n    return _set.array.length == 0;\n  }\n\n  ///////////////////////////// Uint256Set /////////////////////////////////////////\n  struct Uint256Set {\n    uint256[] array;\n    mapping(uint256 => uint256) map;\n    mapping(uint256 => bool) exists;\n  }\n\n  function add(Uint256Set storage _set, uint256 _v) internal {\n    require(_set.exists[_v] == false, \"Element already exists\");\n\n    _add(_set, _v);\n  }\n\n  function addSilent(Uint256Set storage _set, uint256 _v) internal returns (bool) {\n    if (_set.exists[_v] == true) {\n      return false;\n    }\n\n    _add(_set, _v);\n\n    return true;\n  }\n\n  function _add(Uint256Set storage _set, uint256 _v) internal {\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n  }\n\n  function remove(Uint256Set storage _set, uint256 _v) internal {\n    require(_set.array.length > 0, \"Array is empty\");\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\n\n    _remove(_set, _v);\n  }\n\n  function removeSilent(Uint256Set storage _set, uint256 _v) internal returns (bool) {\n    if (_set.exists[_v] == false) {\n      return false;\n    }\n\n    _remove(_set, _v);\n    return true;\n  }\n\n  function _remove(Uint256Set storage _set, uint256 _v) internal {\n    uint256 lastElementIndex = _set.array.length - 1;\n    uint256 currentElementIndex = _set.map[_v];\n    uint256 lastElement = _set.array[lastElementIndex];\n\n    _set.array[currentElementIndex] = lastElement;\n    delete _set.array[lastElementIndex];\n\n    _set.array.length = _set.array.length - 1;\n    delete _set.map[_v];\n    delete _set.exists[_v];\n    _set.map[lastElement] = currentElementIndex;\n  }\n\n  function clear(Uint256Set storage _set) internal {\n    for (uint256 i = 0; i < _set.array.length; i++) {\n      _set.exists[_set.array[i]] = false;\n    }\n\n    delete _set.array;\n  }\n\n  function has(Uint256Set storage _set, uint256 _v) internal view returns (bool) {\n    return _set.exists[_v];\n  }\n\n  function elements(Uint256Set storage _set) internal view returns (uint256[] storage) {\n    return _set.array;\n  }\n\n  function size(Uint256Set storage _set) internal view returns (uint256) {\n    return _set.array.length;\n  }\n\n  function isEmpty(Uint256Set storage _set) internal view returns (bool) {\n    return _set.array.length == 0;\n  }\n}\n\ncontract PPLockerRegistry is IPPLockerRegistry, OwnableAndInitializable {\n  using ArraySet for ArraySet.AddressSet;\n\n  bytes32 public constant ROLE_LOCKER_REGISTRAR = bytes32(\"LOCKER_REGISTRAR\");\n\n  struct Details {\n    bool active;\n    address factory;\n  }\n\n  IPPGlobalRegistry public globalRegistry;\n\n  // Locker address => Details\n  mapping(address => Details) public lockers;\n\n  // Locker address => Details\n  mapping(address => ArraySet.AddressSet) internal lockersByOwner;\n\n  modifier onlyFactory() {\n    require(\n      globalRegistry.getACL().hasRole(msg.sender, ROLE_LOCKER_REGISTRAR),\n      \"Invalid registrar\"\n    );\n\n    _;\n  }\n\n  function initialize(IPPGlobalRegistry _ppGlobalRegistry) external isInitializer {\n    globalRegistry = _ppGlobalRegistry;\n  }\n\n  // FACTORY INTERFACE\n\n  function addLocker(address _locker) external onlyFactory {\n    Details storage locker = lockers[_locker];\n\n    locker.active = true;\n    locker.factory = msg.sender;\n\n    lockersByOwner[IPPLocker(_locker).owner()].add(_locker);\n\n    emit AddLocker(_locker, IPPLocker(_locker).owner(), locker.factory);\n  }\n\n  // REQUIRES\n\n  function requireValidLocker(address _locker) external view {\n    require(lockers[_locker].active == true, \"Locker address is invalid\");\n  }\n\n  // GETTERS\n\n  function isValid(address _locker) external view returns (bool) {\n    return lockers[_locker].active;\n  }\n\n  function getLockerListByOwner(address _owner) external view returns (address[] memory) {\n    return lockersByOwner[_owner].elements();\n  }\n\n  function getLockerCountByOwner(address _owner) external view returns (uint256) {\n    return lockersByOwner[_owner].size();\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"AddLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_LOCKER_REGISTRAR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"addLocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockerCountByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockerListByOwner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalRegistry\",\"outputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"_ppGlobalRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"requireValidLocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPLockerRegistry","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://a99bdd64a006252e78ad2ff7917dd4e775ceeb467a6d6a0c01e2f0d142601917"}]}