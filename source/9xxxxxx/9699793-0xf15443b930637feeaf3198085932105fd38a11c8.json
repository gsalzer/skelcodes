{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract Auth {\r\n\r\n  address internal mainAdmin;\r\n  address internal contractAdmin;\r\n  address internal profitAdmin;\r\n  address internal ethAdmin;\r\n  address internal LAdmin;\r\n  address internal maxSAdmin;\r\n  address internal backupAdmin;\r\n  address internal commissionAdmin;\r\n\r\n  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n  constructor(\r\n    address _mainAdmin,\r\n    address _contractAdmin,\r\n    address _profitAdmin,\r\n    address _ethAdmin,\r\n    address _LAdmin,\r\n    address _maxSAdmin,\r\n    address _backupAdmin,\r\n    address _commissionAdmin\r\n  )\r\n  internal\r\n  {\r\n    mainAdmin = _mainAdmin;\r\n    contractAdmin = _contractAdmin;\r\n    profitAdmin = _profitAdmin;\r\n    ethAdmin = _ethAdmin;\r\n    LAdmin = _LAdmin;\r\n    maxSAdmin = _maxSAdmin;\r\n    backupAdmin = _backupAdmin;\r\n    commissionAdmin = _commissionAdmin;\r\n  }\r\n\r\n  modifier onlyMainAdmin() {\r\n    require(isMainAdmin(), \"onlyMainAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyContractAdmin() {\r\n    require(isContractAdmin() || isMainAdmin(), \"onlyContractAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyProfitAdmin() {\r\n    require(isProfitAdmin() || isMainAdmin(), \"onlyProfitAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyEthAdmin() {\r\n    require(isEthAdmin() || isMainAdmin(), \"onlyEthAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyLAdmin() {\r\n    require(isLAdmin() || isMainAdmin(), \"onlyLAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyMaxSAdmin() {\r\n    require(isMaxSAdmin() || isMainAdmin(), \"onlyMaxSAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyBackupAdmin() {\r\n    require(isBackupAdmin() || isMainAdmin(), \"onlyBackupAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyBackupAdmin2() {\r\n    require(isBackupAdmin(), \"onlyBackupAdmin\");\r\n    _;\r\n  }\r\n\r\n  function isMainAdmin() public view returns (bool) {\r\n    return msg.sender == mainAdmin;\r\n  }\r\n\r\n  function isContractAdmin() public view returns (bool) {\r\n    return msg.sender == contractAdmin;\r\n  }\r\n\r\n  function isProfitAdmin() public view returns (bool) {\r\n    return msg.sender == profitAdmin;\r\n  }\r\n\r\n  function isEthAdmin() public view returns (bool) {\r\n    return msg.sender == ethAdmin;\r\n  }\r\n\r\n  function isLAdmin() public view returns (bool) {\r\n    return msg.sender == LAdmin;\r\n  }\r\n\r\n  function isMaxSAdmin() public view returns (bool) {\r\n    return msg.sender == maxSAdmin;\r\n  }\r\n\r\n  function isBackupAdmin() public view returns (bool) {\r\n    return msg.sender == backupAdmin;\r\n  }\r\n}\r\n\r\nlibrary Math {\r\n  function abs(int number) internal pure returns (uint) {\r\n    if (number < 0) {\r\n      return uint(number * -1);\r\n    }\r\n    return uint(number);\r\n  }\r\n}\r\n\r\nlibrary StringUtil {\r\n  struct slice {\r\n    uint _length;\r\n    uint _pointer;\r\n  }\r\n\r\n  function validateUserName(string memory _username)\r\n  internal\r\n  pure\r\n  returns (bool)\r\n  {\r\n    uint8 len = uint8(bytes(_username).length);\r\n    if ((len < 4) || (len > 18)) return false;\r\n\r\n    // only contain A-Z 0-9\r\n    for (uint8 i = 0; i < len; i++) {\r\n      if (\r\n        (uint8(bytes(_username)[i]) < 48) ||\r\n        (uint8(bytes(_username)[i]) > 57 && uint8(bytes(_username)[i]) < 65) ||\r\n        (uint8(bytes(_username)[i]) > 90)\r\n      ) return false;\r\n    }\r\n    // First char != '0'\r\n    return uint8(bytes(_username)[0]) != 48;\r\n  }\r\n}\r\n\r\ninterface IWallet {\r\n\r\n  function bonusForAdminWhenUserJoinPackageViaDollar(uint _amount, address _admin) external;\r\n\r\n  function bonusNewRank(address _investorAddress, uint _currentRank, uint _newRank) external;\r\n\r\n  function mineToken(address _from, uint _amount) external;\r\n\r\n  function deposit(address _to, uint _deposited, uint8 _source, uint _sourceAmount) external;\r\n\r\n  function getInvestorLastDeposited(address _investor) external view returns (uint);\r\n\r\n  function getUserWallet(address _investor) external view returns (uint, uint[], uint, uint, uint, uint, uint);\r\n\r\n  function getProfitBalance(address _investor) external view returns (uint);\r\n\r\n  function increaseETHWithdrew(uint _amount) external;\r\n\r\n  function validateCanMineToken(uint _tokenAmount, address _from) external view;\r\n\r\n  function ethWithdrew() external view returns (uint);\r\n}\r\n\r\ninterface ICitizen {\r\n\r\n  function addF1DepositedToInviter(address _invitee, uint _amount) external;\r\n\r\n  function addNetworkDepositedToInviter(address _inviter, uint _amount, uint _source, uint _sourceAmount) external;\r\n\r\n  function checkInvestorsInTheSameReferralTree(address _inviter, address _invitee) external view returns (bool);\r\n\r\n  function getF1Deposited(address _investor) external view returns (uint);\r\n\r\n  function getId(address _investor) external view returns (uint);\r\n\r\n  function getInvestorCount() external view returns (uint);\r\n\r\n  function getInviter(address _investor) external view returns (address);\r\n\r\n  function getDirectlyInvitee(address _investor) external view returns (address[]);\r\n\r\n  function getDirectlyInviteeHaveJoinedPackage(address _investor) external view returns (address[]);\r\n\r\n  function getNetworkDeposited(address _investor) external view returns (uint);\r\n\r\n  function getRank(address _investor) external view returns (uint);\r\n\r\n  function getUserAddress(uint _index) external view returns (address);\r\n\r\n  function getSubscribers(address _investor) external view returns (uint);\r\n\r\n  function increaseInviterF1HaveJoinedPackage(address _invitee) external;\r\n\r\n  function isCitizen(address _user) view external returns (bool);\r\n\r\n  function register(address _user, string _userName, address _inviter) external returns (uint);\r\n\r\n  function showInvestorInfo(address _investorAddress) external view returns (uint, string memory, address, address[], uint, uint, uint, uint);\r\n\r\n  function getDepositInfo(address _investor) external view returns (uint, uint, uint, uint, uint);\r\n\r\n  function rankBonuses(uint _index) external view returns (uint);\r\n}\r\n\r\n\r\ncontract IERC20 {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath mul error\");\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath div error\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath sub error\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath add error\");\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath mod error\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IReserveFund {\r\n\r\n  function getLS(address _investor) view external returns (uint8);\r\n\r\n  function getTransferDiff() view external returns (uint);\r\n\r\n  function register(string _userName, address _inviter) external;\r\n\r\n  function miningToken(uint _tokenAmount) external;\r\n\r\n  function swapToken(uint _amount) external;\r\n\r\n}\r\n\r\ncontract ReserveFund is Auth {\r\n  using StringUtil for *;\r\n  using Math for int;\r\n  using SafeMath for uint;\r\n\r\n  enum LT {\r\n    NONE,\r\n    PRO,\r\n    MINE,\r\n    BOTH\r\n  }\r\n\r\n  struct MTracker {\r\n    uint time;\r\n    uint amount;\r\n  }\r\n\r\n  struct STracker {\r\n    uint time;\r\n    uint amount;\r\n  }\r\n\r\n  mapping(address => LT) public lAS;\r\n  mapping(address => MTracker[]) private mTracker;\r\n  STracker[] private sTracker;\r\n  uint private miningDiff = 50;\r\n  uint private transferDiff = 1000;\r\n  uint public minJP = 5000;\r\n  uint public maxJP = 10000000;\r\n  uint public ethPrice;\r\n  bool public enableJP = true;\r\n  bool public isLEthAdmin = false;\r\n  uint public scM;\r\n  uint public scS;\r\n  uint public maxM = 5000000;\r\n  uint public maxS = 100 * (10 ** 18);\r\n\r\n  ICitizen public citizen;\r\n  IWallet public wallet;\r\n  IERC20 public GLToken = IERC20(0xA5B399a76bbAbEf93D70255525C1d2BCC3701d0b);\r\n  IReserveFund rf = IReserveFund(0x0);\r\n\r\n  event AL(address[] addresses, uint8 lockingType);\r\n  event enableJPSwitched(bool enabled);\r\n  event minJPSet(uint minJP);\r\n  event maxJPSet(uint maxJP);\r\n  event miningDiffSet(uint rate);\r\n  event transferDiffSet(uint value);\r\n  event PackageJoinedViaEther(address buyer, address receiver, uint amount);\r\n  event PackageJoinedViaToken(address buyer, address receiver, uint amount);\r\n  event PackageJoinedViaDollar(address buyer, address receiver, uint amount);\r\n  event Registered(uint id, string userName, address userAddress, address inviter);\r\n  event TokenMined(address buyer, uint amount, uint walletAmount);\r\n  event TokenSwapped(address seller, uint amount, uint ethAmount);\r\n\r\n  constructor (\r\n    address _mainAdmin,\r\n    address _ethAdmin,\r\n    address _LAdmin,\r\n    address _maxSAdmin,\r\n    address _backupAdmin,\r\n    address _commissionAdmin,\r\n    uint _ethPrice\r\n  )\r\n  Auth(\r\n    _mainAdmin,\r\n    msg.sender,\r\n    0x0,\r\n    _ethAdmin,\r\n    _LAdmin,\r\n    _maxSAdmin,\r\n    _backupAdmin,\r\n    _commissionAdmin\r\n  )\r\n  public\r\n  {\r\n    ethPrice = _ethPrice;\r\n  }\r\n\r\n  // ADMINS FUNCTIONS\r\n\r\n  function setW(address _walletContract) onlyContractAdmin public {\r\n    wallet = IWallet(_walletContract);\r\n  }\r\n\r\n  function setC(address _citizenContract) onlyContractAdmin public {\r\n    citizen = ICitizen(_citizenContract);\r\n  }\r\n\r\n  function UETH(uint _ethPrice) onlyEthAdmin public {\r\n    if (isEthAdmin()) {\r\n      require(!isLEthAdmin, \"unAuthorized\");\r\n    }\r\n    require(_ethPrice > 0, \"Must be > 0\");\r\n    require(_ethPrice != ethPrice, \"Must be new value\");\r\n    ethPrice = _ethPrice;\r\n  }\r\n\r\n  function updateMainAdmin(address _newMainAdmin) onlyBackupAdmin public {\r\n    require(_newMainAdmin != address(0x0), \"Invalid address\");\r\n    mainAdmin = _newMainAdmin;\r\n  }\r\n\r\n  function updateContractAdmin(address _newContractAdmin) onlyMainAdmin public {\r\n    require(_newContractAdmin != address(0x0), \"Invalid address\");\r\n    contractAdmin = _newContractAdmin;\r\n  }\r\n\r\n  function updateEthAdmin(address _newEthAdmin) onlyMainAdmin public {\r\n    require(_newEthAdmin != address(0x0), \"Invalid address\");\r\n    ethAdmin = _newEthAdmin;\r\n  }\r\n\r\n  function updateLockerAdmin(address _newLockerAdmin) onlyMainAdmin public {\r\n    require(_newLockerAdmin != address(0x0), \"Invalid address\");\r\n    LAdmin = _newLockerAdmin;\r\n  }\r\n\r\n  function updateBackupAdmin(address _newBackupAdmin) onlyBackupAdmin2 public {\r\n    require(_newBackupAdmin != address(0x0), \"Invalid address\");\r\n    backupAdmin = _newBackupAdmin;\r\n  }\r\n\r\n  function updateMaxSAdmin(address _newMaxSAdmin) onlyMainAdmin public {\r\n    require(_newMaxSAdmin != address(0x0), \"Invalid address\");\r\n    maxSAdmin = _newMaxSAdmin;\r\n  }\r\n\r\n  function updateCommissionAdmin(address _newCommissionAdmin) onlyMainAdmin public {\r\n    require(_newCommissionAdmin != address(0x0), \"Invalid address\");\r\n    commissionAdmin = _newCommissionAdmin;\r\n  }\r\n\r\n  function lockTheEthAdmin() onlyLAdmin public {\r\n    isLEthAdmin = true;\r\n  }\r\n\r\n  function unlockTheEthAdmin() onlyMainAdmin public {\r\n    isLEthAdmin = false;\r\n  }\r\n\r\n  function setMaxM(uint _maxM) onlyMainAdmin public {\r\n    require(_maxM > 0, \"Must be > 0\");\r\n    maxM = _maxM;\r\n  }\r\n\r\n  function setMaxS(uint _maxS) onlyMaxSAdmin public {\r\n    require(_maxS > 0, \"Must be > 0\");\r\n    maxS = _maxS;\r\n  }\r\n\r\n  function setMinJP(uint _minJP) onlyMainAdmin public {\r\n    require(_minJP > 0, \"Must be > 0\");\r\n    require(_minJP < maxJP, \"Must be < maxJP\");\r\n    require(_minJP != minJP, \"Must be new value\");\r\n    minJP = _minJP;\r\n    emit minJPSet(minJP);\r\n  }\r\n\r\n  function setMaxJP(uint _maxJP) onlyMainAdmin public {\r\n    require(_maxJP > minJP, \"Must be > minJP\");\r\n    require(_maxJP != maxJP, \"Must be new value\");\r\n    maxJP = _maxJP;\r\n    emit maxJPSet(maxJP);\r\n  }\r\n\r\n  function setEnableJP(bool _enableJP) onlyMainAdmin public {\r\n    require(_enableJP != enableJP, \"Must be new value\");\r\n    enableJP = _enableJP;\r\n    emit enableJPSwitched(enableJP);\r\n  }\r\n\r\n  function sscM(uint _scM) onlyMainAdmin public {\r\n    require(_scM > 0, \"must be > 0\");\r\n    require(_scM != scM, \"must be new value\");\r\n    scM = _scM;\r\n  }\r\n\r\n  function sscS(uint _scS) onlyMainAdmin public {\r\n    require(_scS > 0, \"must be > 0\");\r\n    require(_scS != scS, \"must be new value\");\r\n    scS = _scS;\r\n  }\r\n\r\n  function setMiningDiff(uint _miningDiff) onlyMainAdmin public {\r\n    require(_miningDiff > 0, \"miningDiff must be > 0\");\r\n    require(_miningDiff != miningDiff, \"miningDiff must be new value\");\r\n    miningDiff = _miningDiff;\r\n    emit miningDiffSet(miningDiff);\r\n  }\r\n\r\n  function setTransferDiff(uint _transferDiff) onlyMainAdmin public {\r\n    require(_transferDiff > 0, \"MinimumBuy must be > 0\");\r\n    require(_transferDiff != transferDiff, \"transferDiff must be new value\");\r\n    transferDiff = _transferDiff;\r\n    emit transferDiffSet(transferDiff);\r\n  }\r\n\r\n  function LA(address[] _values, uint8 _type) onlyLAdmin public {\r\n    require(_values.length > 0, \"Values cannot be empty\");\r\n    require(_values.length <= 256, \"Maximum is 256\");\r\n    require(_type >= 0 && _type <= 3, \"Type is invalid\");\r\n    for (uint8 i = 0; i < _values.length; i++) {\r\n      require(_values[i] != msg.sender, \"Yourself!!!\");\r\n      lAS[_values[i]] = LT(_type);\r\n    }\r\n    emit AL(_values, _type);\r\n  }\r\n\r\n  function sr(string memory _n, address _i) onlyMainAdmin public {\r\n    rf.register(_n, _i);\r\n  }\r\n\r\n  function sm(uint _a) onlyMainAdmin public {\r\n    rf.miningToken(_a);\r\n  }\r\n\r\n  function ss(uint _a) onlyMainAdmin public {\r\n    rf.swapToken(_a);\r\n  }\r\n\r\n  function ap(address _hf, uint _a) onlyMainAdmin public {\r\n    IERC20 hf = IERC20(_hf);\r\n    hf.approve(rf, _a);\r\n  }\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  function () public payable {}\r\n\r\n  function getMiningDiff() view public returns (uint) {\r\n    return miningDiff;\r\n  }\r\n\r\n  function getTransferDiff() view public returns (uint) {\r\n    return transferDiff;\r\n  }\r\n\r\n  function getLS(address _investor) view public returns (uint8) {\r\n    return uint8(lAS[_investor]);\r\n  }\r\n\r\n  function register(string memory _userName, address _inviter) public {\r\n    require(citizen.isCitizen(_inviter), \"Inviter did not registered.\");\r\n    require(_inviter != msg.sender, \"Cannot referral yourself\");\r\n    uint id = citizen.register(msg.sender, _userName, _inviter);\r\n    emit Registered(id, _userName, msg.sender, _inviter);\r\n  }\r\n\r\n  function showMe() public view returns (uint, string memory, address, address[], uint, uint, uint, uint) {\r\n    return citizen.showInvestorInfo(msg.sender);\r\n  }\r\n\r\n  function joinPackageViaEther(uint _rate, address _to) payable public {\r\n    require(enableJP || msg.sender == 0x3967E22B0f808b7bd51E5ff2eCbEb165cBDf66f8, \"Can not buy via Ether now\");\r\n    validateJoinPackage(msg.sender, _to);\r\n    require(_rate > 0, \"Rate must be > 0\");\r\n    validateAmount(_to, (msg.value * _rate) / (10 ** 18));\r\n    bool rateHigherUnder3Percents = (int(ethPrice - _rate).abs() * 100 / _rate) <= uint(3);\r\n    bool rateLowerUnder5Percents = (int(_rate - ethPrice).abs() * 100 / ethPrice) <= uint(5);\r\n    bool validRate = rateHigherUnder3Percents && rateLowerUnder5Percents;\r\n    require(validRate, \"Invalid rate, please check again!\");\r\n    doJoinViaEther(msg.sender, _to, msg.value, _rate);\r\n  }\r\n\r\n  function joinPackageViaDollar(uint _amount, address _to) public {\r\n    validateJoinPackage(msg.sender, _to);\r\n    validateAmount(_to, _amount);\r\n    validateProfitBalance(msg.sender, _amount);\r\n    wallet.deposit(_to, _amount, 2, _amount);\r\n    wallet.bonusForAdminWhenUserJoinPackageViaDollar(_amount / 10, commissionAdmin);\r\n    emit PackageJoinedViaDollar(msg.sender, _to, _amount);\r\n  }\r\n\r\n  function joinPackageViaToken(uint _amount, address _to) public {\r\n    validateJoinPackage(msg.sender, _to);\r\n    validateAmount(_to, _amount);\r\n    uint tokenAmount = (_amount / scM) * (10 ** 18);\r\n    require(GLToken.allowance(msg.sender, address(this)) >= tokenAmount, \"You must call approve() first\");\r\n    uint userOldBalance = GLToken.balanceOf(msg.sender);\r\n    require(userOldBalance >= tokenAmount, \"You have not enough tokens\");\r\n    require(GLToken.transferFrom(msg.sender, address(this), tokenAmount), \"Transfer token failed\");\r\n    require(GLToken.transfer(commissionAdmin, tokenAmount / 10), \"Transfer token to admin failed\");\r\n    wallet.deposit(_to, _amount, 1, tokenAmount);\r\n    emit PackageJoinedViaToken(msg.sender, _to, _amount);\r\n  }\r\n\r\n  function miningToken(uint _tokenAmount) public {\r\n    require(scM > 0, \"Invalid data, please contact admin\");\r\n    require(citizen.isCitizen(msg.sender), \"Please register first\");\r\n    checkLMine();\r\n    uint fiatAmount = (_tokenAmount * scM) / (10 ** 18);\r\n    validateMAmount(fiatAmount);\r\n    require(fiatAmount >= miningDiff, \"Amount must be > miningDiff\");\r\n    validateProfitBalance(msg.sender, fiatAmount);\r\n    wallet.validateCanMineToken(fiatAmount, msg.sender);\r\n\r\n    wallet.mineToken(msg.sender, fiatAmount);\r\n    uint userOldBalance = GLToken.balanceOf(msg.sender);\r\n    require(GLToken.transfer(msg.sender, _tokenAmount), \"Transfer token to user failed\");\r\n    require(GLToken.balanceOf(msg.sender) == userOldBalance.add(_tokenAmount), \"User token changed invalid\");\r\n    emit TokenMined(msg.sender, _tokenAmount, fiatAmount);\r\n  }\r\n\r\n  function swapToken(uint _amount) public {\r\n    require(_amount > 0, \"Invalid amount to swap\");\r\n    require(GLToken.balanceOf(msg.sender) >= _amount, \"You have not enough balance\");\r\n    uint etherAmount = getEtherAmountFromToken(_amount);\r\n    require(address(this).balance >= etherAmount, \"The contract have not enough balance\");\r\n    validateSAmount(etherAmount);\r\n    require(GLToken.allowance(msg.sender, address(this)) >= _amount, \"You must call approve() first\");\r\n    require(GLToken.transferFrom(msg.sender, address(this), _amount), \"Transfer token failed\");\r\n    msg.sender.transfer(etherAmount);\r\n    wallet.increaseETHWithdrew(etherAmount);\r\n    emit TokenSwapped(msg.sender, _amount, etherAmount);\r\n  }\r\n  \r\n  function TransferToken (address _to, uint amountToken) onlyMainAdmin public {\r\n     GLToken.transfer(_to, amountToken);\r\n  }\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n  function getEtherAmountFromToken(uint _amount) private view returns (uint) {\r\n    require(scS > 0, \"Invalid data, please contact admin\");\r\n    return _amount / scS;\r\n  }\r\n\r\n  function doJoinViaEther(address _from, address _to, uint _etherAmountInWei, uint _rate) private {\r\n    uint etherForAdmin = _etherAmountInWei / 10;\r\n    uint packageValue = (_etherAmountInWei * _rate) / (10 ** 18);\r\n    wallet.deposit(_to, packageValue, 0, _etherAmountInWei);\r\n    commissionAdmin.transfer(etherForAdmin);\r\n    emit PackageJoinedViaEther(_from, _to, packageValue);\r\n  }\r\n\r\n  function validateAmount(address _user, uint _packageValue) private view {\r\n    require(_packageValue > 0, \"Amount must be > 0\");\r\n    require(_packageValue <= maxJP, \"Can not join with amount that greater max join package\");\r\n    uint lastBuy = wallet.getInvestorLastDeposited(_user);\r\n    if (lastBuy == 0) {\r\n      require(_packageValue >= minJP, \"Minimum for first join is MinJP\");\r\n    } else {\r\n      require(_packageValue >= lastBuy, \"Can not join with amount that lower than your last join\");\r\n    }\r\n  }\r\n\r\n  function validateJoinPackage(address _from, address _to) private view {\r\n    require(citizen.isCitizen(_from), \"Please register first\");\r\n    require(citizen.isCitizen(_to), \"You can only active an exists member\");\r\n    if (_from != _to) {\r\n      require(citizen.checkInvestorsInTheSameReferralTree(_from, _to), \"This user isn't in your referral tree\");\r\n    }\r\n    require(ethPrice > 0, \"Invalid ethPrice, please contact admin!\");\r\n  }\r\n\r\n  function checkLMine() private view {\r\n    bool canMine = lAS[msg.sender] != LT.MINE && lAS[msg.sender] != LT.BOTH;\r\n    require(canMine, \"Your account get locked from mining token\");\r\n  }\r\n\r\n  function validateMAmount(uint _fiatAmount) private {\r\n    MTracker[] storage mHistory = mTracker[msg.sender];\r\n    if (mHistory.length == 0) {\r\n      require(_fiatAmount <= maxM, \"Amount is invalid\");\r\n    } else {\r\n      uint totalMInLast24Hour = 0;\r\n      uint countTrackerNotInLast24Hour = 0;\r\n      uint length = mHistory.length;\r\n      for (uint i = 0; i < length; i++) {\r\n        MTracker storage tracker = mHistory[i];\r\n        bool mInLast24Hour = now - 1 days < tracker.time;\r\n        if(mInLast24Hour) {\r\n          totalMInLast24Hour = totalMInLast24Hour.add(tracker.amount);\r\n        } else {\r\n          countTrackerNotInLast24Hour++;\r\n        }\r\n      }\r\n      if (countTrackerNotInLast24Hour > 0) {\r\n        for (uint j = 0; j < mHistory.length - countTrackerNotInLast24Hour; j++){\r\n          mHistory[j] = mHistory[j + countTrackerNotInLast24Hour];\r\n        }\r\n        mHistory.length -= countTrackerNotInLast24Hour;\r\n      }\r\n      require(totalMInLast24Hour.add(_fiatAmount) <= maxM, \"Too much for today\");\r\n    }\r\n    mHistory.push(MTracker(now, _fiatAmount));\r\n  }\r\n\r\n  function validateSAmount(uint _amount) private {\r\n    if (sTracker.length == 0) {\r\n      require(_amount <= maxS, \"Amount is invalid\");\r\n    } else {\r\n      uint totalSInLast24Hour = 0;\r\n      uint countTrackerNotInLast24Hour = 0;\r\n      uint length = sTracker.length;\r\n      for (uint i = 0; i < length; i++) {\r\n        STracker storage tracker = sTracker[i];\r\n        bool sInLast24Hour = now - 1 days < tracker.time;\r\n        if(sInLast24Hour) {\r\n          totalSInLast24Hour = totalSInLast24Hour.add(tracker.amount);\r\n        } else {\r\n          countTrackerNotInLast24Hour++;\r\n        }\r\n      }\r\n      if (countTrackerNotInLast24Hour > 0) {\r\n        for (uint j = 0; j < sTracker.length - countTrackerNotInLast24Hour; j++){\r\n          sTracker[j] = sTracker[j + countTrackerNotInLast24Hour];\r\n        }\r\n        sTracker.length -= countTrackerNotInLast24Hour;\r\n      }\r\n      require(totalSInLast24Hour.add(_amount) <= maxS, \"Too much for today\");\r\n    }\r\n    sTracker.push(STracker(now, _amount));\r\n  }\r\n\r\n  function validateProfitBalance(address _user, uint _amount) private view {\r\n    uint profitBalance = wallet.getProfitBalance(_user);\r\n    require(profitBalance >= _amount, \"You have not enough balance\");\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newContractAdmin\",\"type\":\"address\"}],\"name\":\"updateContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transferDiff\",\"type\":\"uint256\"}],\"name\":\"setTransferDiff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaxSAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEthAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLEthAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citizen\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enableJP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_citizenContract\",\"type\":\"address\"}],\"name\":\"setC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBackupAdmin\",\"type\":\"address\"}],\"name\":\"updateBackupAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"joinPackageViaToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEthAdmin\",\"type\":\"address\"}],\"name\":\"updateEthAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTheEthAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GLToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getLS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lAS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"miningToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommissionAdmin\",\"type\":\"address\"}],\"name\":\"updateCommissionAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"joinPackageViaEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minJP\",\"type\":\"uint256\"}],\"name\":\"setMinJP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"joinPackageViaDollar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxJP\",\"type\":\"uint256\"}],\"name\":\"setMaxJP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLockerAdmin\",\"type\":\"address\"}],\"name\":\"updateLockerAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"UETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletContract\",\"type\":\"address\"}],\"name\":\"setW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxSAdmin\",\"type\":\"address\"}],\"name\":\"updateMaxSAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransferDiff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"}],\"name\":\"ss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"TransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBackupAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_values\",\"type\":\"address[]\"},{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"LA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"uint256\"}],\"name\":\"sm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDiff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hf\",\"type\":\"address\"},{\"name\":\"_a\",\"type\":\"uint256\"}],\"name\":\"ap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxM\",\"type\":\"uint256\"}],\"name\":\"setMaxM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_n\",\"type\":\"string\"},{\"name\":\"_i\",\"type\":\"address\"}],\"name\":\"sr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProfitAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxS\",\"type\":\"uint256\"}],\"name\":\"setMaxS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enableJP\",\"type\":\"bool\"}],\"name\":\"setEnableJP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMainAdmin\",\"type\":\"address\"}],\"name\":\"updateMainAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scM\",\"type\":\"uint256\"}],\"name\":\"sscM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxJP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_scS\",\"type\":\"uint256\"}],\"name\":\"sscS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_miningDiff\",\"type\":\"uint256\"}],\"name\":\"setMiningDiff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minJP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockTheEthAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mainAdmin\",\"type\":\"address\"},{\"name\":\"_ethAdmin\",\"type\":\"address\"},{\"name\":\"_LAdmin\",\"type\":\"address\"},{\"name\":\"_maxSAdmin\",\"type\":\"address\"},{\"name\":\"_backupAdmin\",\"type\":\"address\"},{\"name\":\"_commissionAdmin\",\"type\":\"address\"},{\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"lockingType\",\"type\":\"uint8\"}],\"name\":\"AL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableJPSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minJP\",\"type\":\"uint256\"}],\"name\":\"minJPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxJP\",\"type\":\"uint256\"}],\"name\":\"maxJPSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"miningDiffSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferDiffSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PackageJoinedViaEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PackageJoinedViaToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PackageJoinedViaDollar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"walletAmount\",\"type\":\"uint256\"}],\"name\":\"TokenMined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ReserveFund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003967e22b0f808b7bd51e5ff2ecbeb165cbdf66f80000000000000000000000003967e22b0f808b7bd51e5ff2ecbeb165cbdf66f80000000000000000000000003967e22b0f808b7bd51e5ff2ecbeb165cbdf66f80000000000000000000000003967e22b0f808b7bd51e5ff2ecbeb165cbdf66f80000000000000000000000003967e22b0f808b7bd51e5ff2ecbeb165cbdf66f80000000000000000000000003967e22b0f808b7bd51e5ff2ecbeb165cbdf66f8000000000000000000000000000000000000000000000000000000000001c520","Library":"","LicenseType":"None","SwarmSource":"bzzr://bbe2fec674a56b5483b132c05b20aebbf3964aff8fbdf9936a8069e1e1adba82"}]}