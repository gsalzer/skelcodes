{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract Auth {\r\n\r\n    address internal mainAdmin;\r\n    address internal contractAdmin;\r\n\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    constructor(\r\n        address _mainAdmin,\r\n        address _contractAdmin\r\n    )\r\n    internal\r\n    {\r\n        mainAdmin = _mainAdmin;\r\n        contractAdmin = _contractAdmin;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isMainAdmin() || isContractAdmin(), \"onlyAdmin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMainAdmin() {\r\n        require(isMainAdmin(), \"onlyMainAdmin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractAdmin() {\r\n        require(isContractAdmin(), \"onlyContractAdmin\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyContractAdmin internal {\r\n        require(_newOwner != address(0x0));\r\n        contractAdmin = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n\r\n    function isMainAdmin() public view returns (bool) {\r\n        return msg.sender == mainAdmin;\r\n    }\r\n\r\n    function isContractAdmin() public view returns (bool) {\r\n        return msg.sender == contractAdmin;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IWallet {\r\n\r\n    function getInvestorLastDeposited(address _investor) external view returns (uint);\r\n\r\n    function getUserWallet(address _investor) external view returns (uint, uint[], uint, uint, uint, uint, uint);\r\n\r\n    function getProfitBalance(address _investor) external view returns (uint);\r\n\r\n    function ethWithdrew() external view returns (uint);\r\n}\r\n\r\ncontract WalletStore is Auth {\r\n    using SafeMath for uint;\r\n\r\n    struct Balance {\r\n        // NOTE: balance is counted in mili-dollar (1/1000 dollar)\r\n        uint totalDeposited; // Treasury package\r\n        uint[] deposited;\r\n        uint profitableBalance; // Regular wallet\r\n        uint profitSourceBalance; // Prime wallet\r\n        uint profitBalance; // Mining wallet\r\n        uint totalProfited;\r\n        uint amountToMineToken;\r\n        uint ethWithdrew;\r\n    }\r\n\r\n    uint public ethWithdrew;\r\n    uint private profitPaid;\r\n    uint private f11RewardCondition = 200000000; // 200k\r\n    IWallet private oldWallet;\r\n    address private reserveFund;\r\n    address private walletContract;\r\n\r\n    mapping(address => Balance) private userWallets;\r\n\r\n    modifier onlyReserveFundContract() {\r\n        require(msg.sender == reserveFund, \"onlyReserveFundContract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWalletContract() {\r\n        require(msg.sender == walletContract, \"onlyWalletContract\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _oldWallet, address _mainAdmin)\r\n    Auth(_mainAdmin, msg.sender)\r\n    public {\r\n        oldWallet = IWallet(_oldWallet);\r\n    }\r\n\r\n    // ONLY-ADMIN-FUNCTIONS\r\n\r\n    function updateContractAdmin(address _newAddress)\r\n    onlyContractAdmin\r\n    public {\r\n        transferOwnership(_newAddress);\r\n    }\r\n\r\n    function setReserveFundContract(address _reserveFund)\r\n    onlyContractAdmin\r\n    public {\r\n        reserveFund = _reserveFund;\r\n    }\r\n\r\n    function setW(address _walletContract)\r\n    onlyContractAdmin\r\n    public {\r\n        walletContract = _walletContract;\r\n    }\r\n\r\n    function syncContractLevelData(uint _profitPaid)\r\n    onlyContractAdmin\r\n    public {\r\n        ethWithdrew = oldWallet.ethWithdrew();\r\n        profitPaid = _profitPaid;\r\n    }\r\n\r\n    function syncData(address[] _investors, uint[] _amountToMineToken)\r\n    onlyContractAdmin\r\n    public {\r\n        require(_investors.length == _amountToMineToken.length, \"Array length invalid\");\r\n        for (uint i = 0; i < _investors.length; i++) {\r\n            uint totalDeposited;\r\n            uint[] memory deposited;\r\n            uint profitableBalance;\r\n            uint profitSourceBalance;\r\n            uint profitBalance;\r\n            uint totalProfited;\r\n            uint oldEthWithdrew;\r\n            (\r\n            totalDeposited,\r\n            deposited,\r\n            profitableBalance,\r\n            profitSourceBalance,\r\n            profitBalance,\r\n            totalProfited,\r\n            oldEthWithdrew\r\n            ) = oldWallet.getUserWallet(_investors[i]);\r\n            Balance storage balance = userWallets[_investors[i]];\r\n            balance.totalDeposited = totalDeposited;\r\n            balance.deposited = deposited;\r\n            balance.profitableBalance = profitableBalance;\r\n            balance.profitSourceBalance = profitSourceBalance;\r\n            balance.profitBalance = profitBalance;\r\n            balance.totalProfited = totalProfited;\r\n            balance.amountToMineToken = _amountToMineToken[i];\r\n            balance.ethWithdrew = oldEthWithdrew;\r\n        }\r\n    }\r\n\r\n    // ONLY-WALLET-CONTRACT\r\n\r\n    function makeDailyProfit(address _user, uint dailyProfit)\r\n    onlyWalletContract\r\n    public {\r\n        Balance storage balance = userWallets[_user];\r\n        balance.profitableBalance = balance.profitableBalance.sub(dailyProfit);\r\n        balance.profitBalance = balance.profitBalance.add(dailyProfit);\r\n        balance.totalProfited = balance.totalProfited.add(dailyProfit);\r\n        profitPaid = profitPaid.add(dailyProfit);\r\n    }\r\n\r\n    // ONLY-RESERVE FUND-CONTRACT\r\n\r\n    function bonusForAdminWhenUserBuyPackageViaDollar(uint _amount, address _admin)\r\n    onlyReserveFundContract\r\n    public\r\n    {\r\n        Balance storage adminBalance = userWallets[_admin];\r\n        userWallets[_admin].profitBalance = adminBalance.profitBalance.add(_amount);\r\n    }\r\n\r\n    function increaseETHWithdrew(uint _amount)\r\n    onlyReserveFundContract\r\n    public {\r\n        ethWithdrew = ethWithdrew.add(_amount);\r\n    }\r\n\r\n    function increaseETHWithdrewOfInvestor(address _investor, uint _ethWithdrew)\r\n    onlyReserveFundContract\r\n    public {\r\n        Balance storage balance = userWallets[_investor];\r\n        balance.ethWithdrew = balance.ethWithdrew.add(_ethWithdrew);\r\n    }\r\n\r\n    function mineToken(address _from, uint _amount)\r\n    onlyReserveFundContract\r\n    public {\r\n        Balance storage userBalance = userWallets[_from];\r\n        userBalance.profitBalance = userBalance.profitBalance.sub(_amount);\r\n        userBalance.amountToMineToken = userBalance.amountToMineToken.add(_amount);\r\n    }\r\n\r\n    function getTD(address _investor)\r\n    onlyReserveFundContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].totalDeposited;\r\n    }\r\n\r\n    /**** Set Methods: ONLY-WALLET-CONTRACT ***********/\r\n\r\n    function setTotalDeposited(address _investor, uint _totalDeposited)\r\n    onlyWalletContract\r\n    public {\r\n        userWallets[_investor].totalDeposited = _totalDeposited;\r\n    }\r\n\r\n    function pushDeposited(address _investor, uint256 _deposited)\r\n    onlyWalletContract\r\n    public {\r\n        Balance storage balance = userWallets[_investor];\r\n        balance.deposited.push(_deposited);\r\n    }\r\n\r\n    function setProfitableBalance(address _investor, uint _profitableBalance)\r\n    onlyWalletContract\r\n    public {\r\n        userWallets[_investor].profitableBalance = _profitableBalance;\r\n    }\r\n\r\n    function setProfitSourceBalance(address _investor, uint _profitSourceBalance)\r\n    onlyWalletContract\r\n    public {\r\n        userWallets[_investor].profitSourceBalance = _profitSourceBalance;\r\n    }\r\n\r\n    function setProfitBalance(address _investor, uint _profitBalance)\r\n    onlyWalletContract\r\n    public {\r\n        userWallets[_investor].profitBalance = _profitBalance;\r\n    }\r\n\r\n    function setTotalProfited(address _investor, uint _totalProfited)\r\n    onlyWalletContract\r\n    public {\r\n        userWallets[_investor].totalProfited = _totalProfited;\r\n    }\r\n\r\n    function setAmountToMineToken(address _investor, uint _amountToMineToken)\r\n    onlyWalletContract\r\n    public {\r\n        userWallets[_investor].amountToMineToken = _amountToMineToken;\r\n    }\r\n\r\n\r\n    /**** Get Methods: ONLY-WALLET-CONTRACT ***********/\r\n\r\n    function getProfitPaid()\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint) {\r\n        return profitPaid;\r\n    }\r\n\r\n    function getUserWallet(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint, uint[], uint, uint, uint, uint, uint, uint)\r\n    {\r\n        Balance storage balance = userWallets[_investor];\r\n        return (\r\n        balance.totalDeposited,\r\n        balance.deposited,\r\n        balance.profitableBalance,\r\n        balance.profitSourceBalance,\r\n        balance.profitBalance,\r\n        balance.totalProfited,\r\n        balance.amountToMineToken,\r\n        balance.ethWithdrew\r\n        );\r\n    }\r\n\r\n    function getTotalDeposited(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].totalDeposited;\r\n    }\r\n\r\n    function getDeposited(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint[])\r\n    {\r\n        return userWallets[_investor].deposited;\r\n    }\r\n\r\n    function getProfitableBalance(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].profitableBalance;\r\n    }\r\n\r\n    function getProfitSourceBalance(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].profitSourceBalance;\r\n    }\r\n\r\n    function getTotalProfited(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].totalProfited;\r\n    }\r\n\r\n    function getAmountToMineToken(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].amountToMineToken;\r\n    }\r\n\r\n    function getEthWithdrewOfInvestor(address _investor)\r\n    onlyWalletContract\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return userWallets[_investor].ethWithdrew;\r\n    }\r\n\r\n\r\n\r\n    /**** Get Methods: PUBLIC FUNCTIONS ***********/\r\n\r\n    function getInvestorLastDeposited(address _investor)\r\n    public\r\n    view\r\n    returns (uint) {\r\n        return userWallets[_investor].deposited.length == 0 ? 0 : userWallets[_investor].deposited[userWallets[_investor].deposited.length - 1];\r\n    }\r\n\r\n    function getProfitBalance(address _investor)\r\n    public\r\n    view\r\n    returns (uint) {\r\n        return userWallets[_investor].profitBalance;\r\n    }\r\n\r\n    function getEthWithdrew()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return ethWithdrew;\r\n    }\r\n\r\n    function getF11RewardCondition()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return f11RewardCondition;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitPaid\",\"type\":\"uint256\"}],\"name\":\"syncContractLevelData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getTotalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getEthWithdrewOfInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mineToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveFund\",\"type\":\"address\"}],\"name\":\"setReserveFundContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_totalDeposited\",\"type\":\"uint256\"}],\"name\":\"setTotalDeposited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getAmountToMineToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getProfitSourceBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethWithdrew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"bonusForAdminWhenUserBuyPackageViaDollar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getF11RewardCondition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_deposited\",\"type\":\"uint256\"}],\"name\":\"pushDeposited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getProfitableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getTotalProfited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_walletContract\",\"type\":\"address\"}],\"name\":\"setW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getInvestorLastDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_ethWithdrew\",\"type\":\"uint256\"}],\"name\":\"increaseETHWithdrewOfInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_profitBalance\",\"type\":\"uint256\"}],\"name\":\"setProfitBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthWithdrew\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"dailyProfit\",\"type\":\"uint256\"}],\"name\":\"makeDailyProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getProfitBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_profitableBalance\",\"type\":\"uint256\"}],\"name\":\"setProfitableBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseETHWithdrew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProfitPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_totalProfited\",\"type\":\"uint256\"}],\"name\":\"setTotalProfited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_profitSourceBalance\",\"type\":\"uint256\"}],\"name\":\"setProfitSourceBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getTD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_amountToMineToken\",\"type\":\"uint256\"}],\"name\":\"setAmountToMineToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investors\",\"type\":\"address[]\"},{\"name\":\"_amountToMineToken\",\"type\":\"uint256[]\"}],\"name\":\"syncData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_oldWallet\",\"type\":\"address\"},{\"name\":\"_mainAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WalletStore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006adf75f1a6627addc158808476f6d9de06a96eef0000000000000000000000007f464a81db1c5eb975227b6953daf6b216fbc561","Library":"","LicenseType":"None","SwarmSource":"bzzr://6471ab37a9bb892cf8c26c9a348176c9b7bf7af25f914a7504f96b6e3610ac59"}]}