{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/iERC20Fulcrum.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface iERC20Fulcrum {\r\n  function mint(\r\n    address receiver,\r\n    uint256 depositAmount)\r\n    external\r\n    returns (uint256 mintAmount);\r\n\r\n  function burn(\r\n    address receiver,\r\n    uint256 burnAmount)\r\n    external\r\n    returns (uint256 loanAmountPaid);\r\n\r\n  function tokenPrice()\r\n    external\r\n    view\r\n    returns (uint256 price);\r\n\r\n  function supplyInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function rateMultiplier()\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function baseRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function borrowInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function avgBorrowInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function protocolInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function spreadMultiplier()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalAssetBorrow()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalAssetSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function nextSupplyInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function nextBorrowInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function nextLoanInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function claimLoanToken()\r\n    external\r\n    returns (uint256 claimedAmount);\r\n\r\n  function dsr()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function chaiPrice()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ILendingProtocol.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface ILendingProtocol {\r\n  function mint() external returns (uint256);\r\n  function redeem(address account) external returns (uint256);\r\n  function nextSupplyRate(uint256 amount) external view returns (uint256);\r\n  function nextSupplyRateWithParams(uint256[] calldata params) external view returns (uint256);\r\n  function getAPR() external view returns (uint256);\r\n  function getPriceInToken() external view returns (uint256);\r\n  function token() external view returns (address);\r\n  function underlying() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IIdleToken.sol\r\n\r\n/**\r\n * @title: Idle Token interface\r\n * @author: William Bergamo, idle.finance\r\n */\r\npragma solidity 0.5.11;\r\n\r\ninterface IIdleToken {\r\n  // view\r\n  /**\r\n   * IdleToken price calculation, in underlying\r\n   *\r\n   * @return : price in underlying token\r\n   */\r\n  function tokenPrice() external view returns (uint256 price);\r\n\r\n  /**\r\n   * underlying token decimals\r\n   *\r\n   * @return : decimals of underlying token\r\n   */\r\n  function tokenDecimals() external view returns (uint256 decimals);\r\n\r\n  /**\r\n   * Get APR of every ILendingProtocol\r\n   *\r\n   * @return addresses: array of token addresses\r\n   * @return aprs: array of aprs (ordered in respect to the `addresses` array)\r\n   */\r\n  function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\r\n\r\n  // external\r\n  // We should save the amount one has deposited to calc interests\r\n\r\n  /**\r\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\r\n   * This method triggers a rebalance of the pools if needed\r\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\r\n   * NOTE 2: this method can be paused\r\n   *\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return mintedTokens : amount of IdleTokens minted\r\n   */\r\n  function mintIdleToken(uint256 _amount, uint256[] calldata _clientProtocolAmounts) external returns (uint256 mintedTokens);\r\n\r\n  /**\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @return : address[] array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return : uint256[] array with all amounts for each protocol in order,\r\n   *                   eg [amountCompound, amountFulcrum]\r\n   */\r\n  function getParamsForMintIdleToken(uint256 _amount) external returns (address[] memory, uint256[] memory);\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * This method triggers a rebalance of the pools if needed\r\n   * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\r\n   * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\r\n   *         Ideally one should wait until the black swan event is terminated\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function redeemIdleToken(uint256 _amount, bool _skipRebalance, uint256[] calldata _clientProtocolAmounts)\r\n    external returns (uint256 redeemedTokens);\r\n\r\n  /**\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @param _skipRebalance : whether to skip the rebalance process or not\r\n   * @return : address[] array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return : uint256[] array with all amounts for each protocol in order,\r\n   *                   eg [amountCompound, amountFulcrum]\r\n   */\r\n  function getParamsForRedeemIdleToken(uint256 _amount, bool _skipRebalance)\r\n    external returns (address[] memory, uint256[] memory);\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\r\n   * Underlying (eg. DAI) is not redeemed here.\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   */\r\n  function redeemInterestBearingTokens(uint256 _amount) external;\r\n\r\n  /**\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return claimedTokens : amount of underlying tokens claimed\r\n   */\r\n  function claimITokens(uint256[] calldata _clientProtocolAmounts) external returns (uint256 claimedTokens);\r\n\r\n  /**\r\n   * @param _newAmount : amount of underlying tokens that needs to be minted with this rebalance\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function rebalance(uint256 _newAmount, uint256[] calldata _clientProtocolAmounts) external returns (bool);\r\n\r\n  /**\r\n   * @param _newAmount : amount of underlying tokens that needs to be minted with this rebalance\r\n   * @return : address[] array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return : uint256[] array with all amounts for each protocol in order,\r\n   *                   eg [amountCompound, amountFulcrum]\r\n   */\r\n  function getParamsForRebalance(uint256 _newAmount) external returns (address[] memory, uint256[] memory);\r\n}\r\n\r\n// File: contracts/interfaces/CERC20.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface CERC20 {\r\n  function mint(uint256 mintAmount) external returns (uint256);\r\n  function redeem(uint256 redeemTokens) external returns (uint256);\r\n  function exchangeRateStored() external view returns (uint256);\r\n  function supplyRatePerBlock() external view returns (uint256);\r\n\r\n  function borrowRatePerBlock() external view returns (uint256);\r\n  function totalReserves() external view returns (uint256);\r\n  function getCash() external view returns (uint256);\r\n  function totalBorrows() external view returns (uint256);\r\n  function reserveFactorMantissa() external view returns (uint256);\r\n  function interestRateModel() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/WhitePaperInterestRateModel.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface WhitePaperInterestRateModel {\r\n  function getBorrowRate(uint256 cash, uint256 borrows, uint256 _reserves) external view returns (uint256, uint256);\r\n  function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa) external view returns (uint256);\r\n  function multiplier() external view returns (uint256);\r\n  function baseRate() external view returns (uint256);\r\n  function blocksPerYear() external view returns (uint256);\r\n  function dsrPerBlock() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/IdleRebalancer.sol\r\n\r\n/**\r\n * @title: Idle Rebalancer contract\r\n * @summary: Used for calculating amounts to lend on each implemented protocol.\r\n *           This implementation works with Compound and Fulcrum only,\r\n *           when a new protocol will be added this should be replaced\r\n * @author: William Bergamo, idle.finance\r\n */\r\npragma solidity 0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IdleRebalancer is Ownable {\r\n  using SafeMath for uint256;\r\n  // IdleToken address\r\n  address public idleToken;\r\n  // protocol token (cToken) address\r\n  address public cToken;\r\n  // protocol token (iToken) address\r\n  address public iToken;\r\n  // cToken protocol wrapper IdleCompound\r\n  address public cWrapper;\r\n  // iToken protocol wrapper IdleFulcrum\r\n  address public iWrapper;\r\n  // max % difference between next supply rate of Fulcrum and Compound\r\n  uint256 public maxRateDifference; // 10**17 -> 0.1 %\r\n  // max % difference between off-chain user supplied params for rebalance and actual amount to be rebalanced\r\n  uint256 public maxSupplyedParamsDifference; // 100000 -> 0.001%\r\n  // max number of recursive calls for bisection algorithm\r\n  uint256 public maxIterations;\r\n\r\n  /**\r\n   * @param _cToken : cToken address\r\n   * @param _iToken : iToken address\r\n   * @param _cWrapper : cWrapper address\r\n   * @param _iWrapper : iWrapper address\r\n   */\r\n  constructor(address _cToken, address _iToken, address _cWrapper, address _iWrapper) public {\r\n    require(_cToken != address(0) && _iToken != address(0) && _cWrapper != address(0) && _iWrapper != address(0), 'some addr is 0');\r\n\r\n    cToken = _cToken;\r\n    iToken = _iToken;\r\n    cWrapper = _cWrapper;\r\n    iWrapper = _iWrapper;\r\n    maxRateDifference = 10**17; // 0.1%\r\n    maxSupplyedParamsDifference = 100000; // 0.001%\r\n    maxIterations = 30;\r\n  }\r\n\r\n  /**\r\n   * Throws if called by any account other than IdleToken contract.\r\n   */\r\n  modifier onlyIdle() {\r\n    require(msg.sender == idleToken, \"Ownable: caller is not IdleToken contract\");\r\n    _;\r\n  }\r\n\r\n  // onlyOwner\r\n  /**\r\n   * sets idleToken address\r\n   * NOTE: can be called only once. It's not on the constructor because we are deploying this contract\r\n   *       after the IdleToken contract\r\n   * @param _idleToken : idleToken address\r\n   */\r\n  function setIdleToken(address _idleToken)\r\n    external onlyOwner {\r\n      require(idleToken == address(0), \"idleToken addr already set\");\r\n      require(_idleToken != address(0), \"_idleToken addr is 0\");\r\n      idleToken = _idleToken;\r\n  }\r\n\r\n  /**\r\n   * sets maxIterations for bisection recursive calls\r\n   * @param _maxIterations : max number of iterations for the bisection algorithm\r\n   */\r\n  function setMaxIterations(uint256 _maxIterations)\r\n    external onlyOwner {\r\n      maxIterations = _maxIterations;\r\n  }\r\n\r\n  /**\r\n   * sets maxRateDifference\r\n   * @param _maxDifference : max rate difference in percentage scaled by 10**18\r\n   */\r\n  function setMaxRateDifference(uint256 _maxDifference)\r\n    external onlyOwner {\r\n      maxRateDifference = _maxDifference;\r\n  }\r\n\r\n  /**\r\n   * sets maxSupplyedParamsDifference\r\n   * @param _maxSupplyedParamsDifference : max slippage between the rebalance params given from the client\r\n   *                                       and actual amount to be rebalanced\r\n   */\r\n  function setMaxSupplyedParamsDifference(uint256 _maxSupplyedParamsDifference)\r\n    external onlyOwner {\r\n      maxSupplyedParamsDifference = _maxSupplyedParamsDifference;\r\n  }\r\n  // end onlyOwner\r\n\r\n  /**\r\n   * Used by IdleToken contract to calculate the amount to be lended\r\n   * on each protocol in order to get the best available rate for all funds.\r\n   *\r\n   * @param _rebalanceParams : first param is the total amount to be rebalanced,\r\n   *                           all other elements are client side calculated amounts to put on each lending protocol\r\n   * @return tokenAddresses : array with all token addresses used,\r\n   *                          currently [cTokenAddress, iTokenAddress]\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   currently [amountCompound, amountFulcrum]\r\n   */\r\n  function calcRebalanceAmounts(uint256[] calldata _rebalanceParams)\r\n    external view onlyIdle\r\n    returns (address[] memory tokenAddresses, uint256[] memory amounts)\r\n  {\r\n    // Get all params for calculating Compound nextSupplyRateWithParams\r\n    CERC20 _cToken = CERC20(cToken);\r\n    WhitePaperInterestRateModel white = WhitePaperInterestRateModel(_cToken.interestRateModel());\r\n    uint256[] memory paramsCompound = new uint256[](10);\r\n    paramsCompound[0] = 10**18; // j\r\n    paramsCompound[1] = white.baseRate(); // a\r\n    paramsCompound[2] = _cToken.totalBorrows(); // b\r\n    paramsCompound[3] = white.multiplier(); // c\r\n    paramsCompound[4] = _cToken.totalReserves(); // d\r\n    paramsCompound[5] = paramsCompound[0].sub(_cToken.reserveFactorMantissa()); // e\r\n    paramsCompound[6] = _cToken.getCash(); // s\r\n    paramsCompound[7] = white.blocksPerYear(); // k\r\n    paramsCompound[8] = 100; // f\r\n\r\n    // Get all params for calculating Fulcrum nextSupplyRateWithParams\r\n    iERC20Fulcrum _iToken = iERC20Fulcrum(iToken);\r\n    uint256[] memory paramsFulcrum = new uint256[](4);\r\n    paramsFulcrum[0] = _iToken.protocolInterestRate(); // a1\r\n    paramsFulcrum[1] = _iToken.totalAssetBorrow(); // b1\r\n    paramsFulcrum[2] = _iToken.totalAssetSupply(); // s1\r\n\r\n    tokenAddresses = new address[](2);\r\n    tokenAddresses[0] = cToken;\r\n    tokenAddresses[1] = iToken;\r\n\r\n    // _rebalanceParams should be [totAmountToRebalance, amountCompound, amountFulcrum];\r\n    if (_rebalanceParams.length == 3) {\r\n      (bool amountsAreCorrect, uint256[] memory checkedAmounts) = checkRebalanceAmounts(_rebalanceParams, paramsCompound, paramsFulcrum);\r\n      if (amountsAreCorrect) {\r\n        return (tokenAddresses, checkedAmounts);\r\n      }\r\n    }\r\n\r\n    // Initial guess for shrinking initial bisection interval\r\n    /*\r\n      Compound: (getCash returns the available supply only, not the borrowed one)\r\n      getCash + totalBorrows = totalSuppliedCompound\r\n\r\n      Fulcrum:\r\n      totalSupply = totalSuppliedFulcrum\r\n\r\n      we try to correlate borrow and supply on both markets\r\n      totC = totalSuppliedCompound + totalBorrowsCompound\r\n      totF = totalSuppliedFulcrum + totalBorrowsFulcrum\r\n\r\n      n : (totC + totF) = x : totF\r\n      x = n * totF / (totC + totF)\r\n    */\r\n\r\n    uint256 amountFulcrum = _rebalanceParams[0].mul(paramsFulcrum[2].add(paramsFulcrum[1])).div(\r\n      paramsFulcrum[2].add(paramsFulcrum[1]).add(paramsCompound[6].add(paramsCompound[2]).add(paramsCompound[2]))\r\n    );\r\n\r\n    // Recursive bisection algorithm\r\n    amounts = bisectionRec(\r\n      _rebalanceParams[0].sub(amountFulcrum), // amountCompound\r\n      amountFulcrum,\r\n      maxRateDifference, // 0.1% of rate difference,\r\n      0, // currIter\r\n      maxIterations, // maxIter\r\n      _rebalanceParams[0],\r\n      paramsCompound,\r\n      paramsFulcrum\r\n    ); // returns [amountCompound, amountFulcrum]\r\n\r\n    return (tokenAddresses, amounts);\r\n  }\r\n  /**\r\n   * Used by IdleToken contract to check if provided amounts\r\n   * causes the rates of Fulcrum and Compound to be balanced\r\n   * (counting a tolerance)\r\n   *\r\n   * @param rebalanceParams : first element is the total amount to be rebalanced,\r\n   *                   the rest is an array with all amounts for each protocol in order,\r\n   *                   currently [amountCompound, amountFulcrum]\r\n   * @param paramsCompound : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Compound\r\n   * @param paramsFulcrum : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Fulcrum\r\n   * @return bool : if provided amount correctly rebalances the pool\r\n   */\r\n  function checkRebalanceAmounts(\r\n    uint256[] memory rebalanceParams,\r\n    uint256[] memory paramsCompound,\r\n    uint256[] memory paramsFulcrum\r\n  )\r\n    internal view\r\n    returns (bool, uint256[] memory checkedAmounts)\r\n  {\r\n    // This is the amount that should be rebalanced no more no less\r\n    uint256 actualAmountToBeRebalanced = rebalanceParams[0]; // n\r\n    // interest is earned between when tx was submitted and when it is mined so params sent by users\r\n    // should always be slightly less than what should be rebalanced\r\n    uint256 totAmountSentByUser;\r\n    for (uint8 i = 1; i < rebalanceParams.length; i++) {\r\n      totAmountSentByUser = totAmountSentByUser.add(rebalanceParams[i]);\r\n    }\r\n\r\n    // check if amounts sent from user are less than actualAmountToBeRebalanced and\r\n    // at most `actualAmountToBeRebalanced - 0.001% of (actualAmountToBeRebalanced)`\r\n    if (totAmountSentByUser > actualAmountToBeRebalanced ||\r\n        totAmountSentByUser.add(totAmountSentByUser.div(maxSupplyedParamsDifference)) < actualAmountToBeRebalanced) {\r\n      return (false, new uint256[](2));\r\n    }\r\n\r\n    uint256 interestToBeSplitted = actualAmountToBeRebalanced.sub(totAmountSentByUser);\r\n\r\n    // sets newDAIAmount for each protocol\r\n    paramsCompound[9] = rebalanceParams[1].add(interestToBeSplitted.div(2));\r\n    paramsFulcrum[3] = rebalanceParams[2].add(interestToBeSplitted.sub(interestToBeSplitted.div(2)));\r\n\r\n    // calculate next rates with amountCompound and amountFulcrum\r\n\r\n    // For Fulcrum see https://github.com/bZxNetwork/bZx-monorepo/blob/development/packages/contracts/extensions/loanTokenization/contracts/LoanToken/LoanTokenLogicV3.sol#L1418\r\n    // fulcrumUtilRate = fulcrumBorrow.mul(10**20).div(assetSupply);\r\n    uint256 currFulcRate = (paramsFulcrum[1].mul(10**20).div(paramsFulcrum[2])) > 90 ether ?\r\n      ILendingProtocol(iWrapper).nextSupplyRate(paramsFulcrum[3]) :\r\n      ILendingProtocol(iWrapper).nextSupplyRateWithParams(paramsFulcrum);\r\n    uint256 currCompRate = ILendingProtocol(cWrapper).nextSupplyRateWithParams(paramsCompound);\r\n    bool isCompoundBest = currCompRate > currFulcRate;\r\n    // |fulcrumRate - compoundRate| <= tolerance\r\n    bool areParamsOk = (currFulcRate.add(maxRateDifference) >= currCompRate && isCompoundBest) ||\r\n      (currCompRate.add(maxRateDifference) >= currFulcRate && !isCompoundBest);\r\n\r\n    uint256[] memory actualParams = new uint256[](2);\r\n    actualParams[0] = paramsCompound[9];\r\n    actualParams[1] = paramsFulcrum[3];\r\n\r\n    return (areParamsOk, actualParams);\r\n  }\r\n\r\n  /**\r\n   * Internal implementation of our bisection algorithm\r\n   *\r\n   * @param amountCompound : amount to be lended in compound in current iteration\r\n   * @param amountFulcrum : amount to be lended in Fulcrum in current iteration\r\n   * @param tolerance : max % difference between next supply rate of Fulcrum and Compound\r\n   * @param currIter : current iteration\r\n   * @param maxIter : max number of iterations\r\n   * @param n : amount of underlying tokens (eg. DAI) to rebalance\r\n   * @param paramsCompound : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Compound\r\n   * @param paramsFulcrum : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Fulcrum\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   currently [amountCompound, amountFulcrum]\r\n   */\r\n  function bisectionRec(\r\n    uint256 amountCompound, uint256 amountFulcrum,\r\n    uint256 tolerance, uint256 currIter, uint256 maxIter, uint256 n,\r\n    uint256[] memory paramsCompound,\r\n    uint256[] memory paramsFulcrum\r\n  )\r\n    internal view\r\n    returns (uint256[] memory amounts) {\r\n\r\n    // sets newDAIAmount for each protocol\r\n    paramsCompound[9] = amountCompound;\r\n    paramsFulcrum[3] = amountFulcrum;\r\n\r\n    // calculate next rates with amountCompound and amountFulcrum\r\n\r\n    // For Fulcrum see https://github.com/bZxNetwork/bZx-monorepo/blob/development/packages/contracts/extensions/loanTokenization/contracts/LoanToken/LoanTokenLogicV3.sol#L1418\r\n    // fulcrumUtilRate = fulcrumBorrow.mul(10**20).div(assetSupply);\r\n    uint256 currFulcRate = (paramsFulcrum[1].mul(10**20).div(paramsFulcrum[2])) > 90 ether ?\r\n      ILendingProtocol(iWrapper).nextSupplyRate(amountFulcrum) :\r\n      ILendingProtocol(iWrapper).nextSupplyRateWithParams(paramsFulcrum);\r\n\r\n    uint256 currCompRate = ILendingProtocol(cWrapper).nextSupplyRateWithParams(paramsCompound);\r\n    bool isCompoundBest = currCompRate > currFulcRate;\r\n\r\n    // bisection interval update, we choose to halve the smaller amount\r\n    uint256 step = amountCompound < amountFulcrum ? amountCompound.div(2) : amountFulcrum.div(2);\r\n\r\n    // base case\r\n    // |fulcrumRate - compoundRate| <= tolerance\r\n    if (\r\n      ((currFulcRate.add(tolerance) >= currCompRate && isCompoundBest) ||\r\n      (currCompRate.add(tolerance) >= currFulcRate && !isCompoundBest)) ||\r\n      currIter >= maxIter\r\n    ) {\r\n      amounts = new uint256[](2);\r\n      amounts[0] = amountCompound;\r\n      amounts[1] = amountFulcrum;\r\n      return amounts;\r\n    }\r\n\r\n    return bisectionRec(\r\n      isCompoundBest ? amountCompound.add(step) : amountCompound.sub(step),\r\n      isCompoundBest ? amountFulcrum.sub(step) : amountFulcrum.add(step),\r\n      tolerance, currIter + 1, maxIter, n,\r\n      paramsCompound, // paramsCompound[9] would be overwritten on next iteration\r\n      paramsFulcrum // paramsFulcrum[3] would be overwritten on next iteration\r\n    );\r\n  }\r\n}\r\n\r\n// File: contracts/IdlePriceCalculator.sol\r\n\r\n/**\r\n * @title: Idle Price Calculator contract\r\n * @summary: Used for calculating the current IdleToken price in underlying (eg. DAI)\r\n *          price is: Net Asset Value / totalSupply\r\n * @author: William Bergamo, idle.finance\r\n */\r\npragma solidity 0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IdlePriceCalculator {\r\n  using SafeMath for uint256;\r\n  /**\r\n   * IdleToken price calculation, in underlying (eg. DAI)\r\n   *\r\n   * @return : price in underlying token\r\n   */\r\n  function tokenPrice(\r\n    uint256 totalSupply,\r\n    address idleToken,\r\n    address[] calldata currentTokensUsed,\r\n    address[] calldata protocolWrappersAddresses\r\n  )\r\n    external view\r\n    returns (uint256 price) {\r\n      require(currentTokensUsed.length == protocolWrappersAddresses.length, \"Different Length\");\r\n\r\n      if (totalSupply == 0) {\r\n        return 10**(IIdleToken(idleToken).tokenDecimals());\r\n      }\r\n\r\n      uint256 currPrice;\r\n      uint256 currNav;\r\n      uint256 totNav;\r\n\r\n      for (uint8 i = 0; i < currentTokensUsed.length; i++) {\r\n        currPrice = ILendingProtocol(protocolWrappersAddresses[i]).getPriceInToken();\r\n        // NAV = price * poolSupply\r\n        currNav = currPrice.mul(IERC20(currentTokensUsed[i]).balanceOf(idleToken));\r\n        totNav = totNav.add(currNav);\r\n      }\r\n\r\n      price = totNav.div(totalSupply); // idleToken price in token wei\r\n  }\r\n}\r\n\r\n// File: contracts/IdleToken.sol\r\n\r\n/**\r\n * @title: Idle Token main contract\r\n * @summary: ERC20 that holds pooled user funds together\r\n *           Each token rapresent a share of the underlying pools\r\n *           and with each token user have the right to redeem a portion of these pools\r\n * @author: William Bergamo, idle.finance\r\n */\r\npragma solidity 0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IdleToken is ERC20, ERC20Detailed, ReentrancyGuard, Ownable, Pausable, IIdleToken {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  // protocolWrappers may be changed/updated/removed do not rely on their\r\n  // addresses to determine where funds are allocated\r\n\r\n  // eg. cTokenAddress => IdleCompoundAddress\r\n  mapping(address => address) public protocolWrappers;\r\n  // eg. DAI address\r\n  address public token;\r\n  // eg. 18 for DAI\r\n  uint256 public tokenDecimals;\r\n  // eg. iDAI address\r\n  address public iToken; // used for claimITokens and userClaimITokens\r\n  // Min thresold of APR difference between protocols to trigger a rebalance\r\n  uint256 public minRateDifference;\r\n  // Idle rebalancer current implementation address\r\n  address public rebalancer;\r\n  // Idle rebalancer current implementation address\r\n  address public priceCalculator;\r\n  // Last iToken price, used to pause contract in case of a black swan event\r\n  uint256 public lastITokenPrice;\r\n  // Manual trigger for unpausing contract in case of a black swan event that caused the iToken price to not\r\n  // return to the normal level\r\n  bool public manualPlay = false;\r\n  bool private _notLocalEntered;\r\n\r\n  // no one can directly change this\r\n  // Idle pool current investments eg. [cTokenAddress, iTokenAddress]\r\n  address[] public currentTokensUsed;\r\n  // eg. [cTokenAddress, iTokenAddress, ...]\r\n  address[] public allAvailableTokens;\r\n\r\n  struct TokenProtocol {\r\n    address tokenAddr;\r\n    address protocolAddr;\r\n  }\r\n\r\n  event Rebalance(uint256 amount);\r\n\r\n  /**\r\n   * @dev constructor, initialize some variables, mainly addresses of other contracts\r\n   *\r\n   * @param _name : IdleToken name\r\n   * @param _symbol : IdleToken symbol\r\n   * @param _decimals : IdleToken decimals\r\n   * @param _token : underlying token address\r\n   * @param _cToken : cToken address\r\n   * @param _iToken : iToken address\r\n   * @param _rebalancer : Idle Rebalancer address\r\n   * @param _idleCompound : Idle Compound address\r\n   * @param _idleFulcrum : Idle Fulcrum address\r\n   */\r\n  constructor(\r\n    string memory _name, // eg. IdleDAI\r\n    string memory _symbol, // eg. IDLEDAI\r\n    uint8 _decimals, // eg. 18\r\n    address _token,\r\n    address _cToken,\r\n    address _iToken,\r\n    address _rebalancer,\r\n    address _priceCalculator,\r\n    address _idleCompound,\r\n    address _idleFulcrum)\r\n    public\r\n    ERC20Detailed(_name, _symbol, _decimals) {\r\n      token = _token;\r\n      tokenDecimals = ERC20Detailed(_token).decimals();\r\n      iToken = _iToken; // used for claimITokens and userClaimITokens methods\r\n      rebalancer = _rebalancer;\r\n      priceCalculator = _priceCalculator;\r\n      protocolWrappers[_cToken] = _idleCompound;\r\n      protocolWrappers[_iToken] = _idleFulcrum;\r\n      allAvailableTokens = [_cToken, _iToken];\r\n      minRateDifference = 100000000000000000; // 0.1% min\r\n      _notLocalEntered = true;\r\n  }\r\n\r\n  modifier whenITokenPriceHasNotDecreased() {\r\n    uint256 iTokenPrice = iERC20Fulcrum(iToken).tokenPrice();\r\n    require(\r\n      iTokenPrice >= lastITokenPrice || manualPlay,\r\n      \"Paused: iToken price decreased\"\r\n    );\r\n\r\n    _;\r\n\r\n    if (iTokenPrice > lastITokenPrice) {\r\n      lastITokenPrice = iTokenPrice;\r\n    }\r\n  }\r\n\r\n  modifier nonLocallyReentrant() {\r\n    // On the first call to nonReentrant, _notEntered will be true\r\n    require(_notLocalEntered, \"LocalReentrancyGuard: reentrant call\");\r\n\r\n    // Any calls to nonReentrant after this point will fail\r\n    _notLocalEntered = false;\r\n\r\n    _;\r\n\r\n    // By storing the original value once again, a refund is triggered (see\r\n    // https://eips.ethereum.org/EIPS/eip-2200)\r\n    _notLocalEntered = true;\r\n  }\r\n\r\n  // onlyOwner\r\n  /**\r\n   * It allows owner to set the iToken (Fulcrum) address\r\n   *\r\n   * @param _iToken : iToken address\r\n   */\r\n  function setIToken(address _iToken)\r\n    external onlyOwner {\r\n      iToken = _iToken;\r\n  }\r\n  /**\r\n   * It allows owner to set the IdleRebalancer address\r\n   *\r\n   * @param _rebalancer : new IdleRebalancer address\r\n   */\r\n  function setRebalancer(address _rebalancer)\r\n    external onlyOwner {\r\n      rebalancer = _rebalancer;\r\n  }\r\n  /**\r\n   * It allows owner to set the IdlePriceCalculator address\r\n   *\r\n   * @param _priceCalculator : new IdlePriceCalculator address\r\n   */\r\n  function setPriceCalculator(address _priceCalculator)\r\n    external onlyOwner {\r\n      priceCalculator = _priceCalculator;\r\n  }\r\n  /**\r\n   * It allows owner to set a protocol wrapper address\r\n   *\r\n   * @param _token : underlying token address (eg. DAI)\r\n   * @param _wrapper : Idle protocol wrapper address\r\n   */\r\n  function setProtocolWrapper(address _token, address _wrapper)\r\n    external onlyOwner {\r\n      require(_token != address(0) && _wrapper != address(0), 'some addr is 0');\r\n      // update allAvailableTokens if needed\r\n      if (protocolWrappers[_token] == address(0)) {\r\n        allAvailableTokens.push(_token);\r\n      }\r\n      protocolWrappers[_token] = _wrapper;\r\n  }\r\n\r\n  function setMinRateDifference(uint256 _rate)\r\n    external onlyOwner {\r\n      minRateDifference = _rate;\r\n  }\r\n  /**\r\n   * It allows owner to unpause the contract when iToken price decreased and didn't return to the expected level\r\n   *\r\n   * @param _manualPlay : new IdleRebalancer address\r\n   */\r\n  function setManualPlay(bool _manualPlay)\r\n    external onlyOwner {\r\n      manualPlay = _manualPlay;\r\n  }\r\n\r\n  // view\r\n  /**\r\n   * IdleToken price calculation, in underlying\r\n   *\r\n   * @return : price in underlying token\r\n   */\r\n  function tokenPrice()\r\n    public view\r\n    returns (uint256 price) {\r\n      address[] memory protocolWrappersAddresses = new address[](currentTokensUsed.length);\r\n      for (uint8 i = 0; i < currentTokensUsed.length; i++) {\r\n        protocolWrappersAddresses[i] = protocolWrappers[currentTokensUsed[i]];\r\n      }\r\n      price = IdlePriceCalculator(priceCalculator).tokenPrice(\r\n        this.totalSupply(), address(this), currentTokensUsed, protocolWrappersAddresses\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Get APR of every ILendingProtocol\r\n   *\r\n   * @return addresses: array of token addresses\r\n   * @return aprs: array of aprs (ordered in respect to the `addresses` array)\r\n   */\r\n  function getAPRs()\r\n    public view\r\n    returns (address[] memory addresses, uint256[] memory aprs) {\r\n      address currToken;\r\n      addresses = new address[](allAvailableTokens.length);\r\n      aprs = new uint256[](allAvailableTokens.length);\r\n      for (uint8 i = 0; i < allAvailableTokens.length; i++) {\r\n        currToken = allAvailableTokens[i];\r\n        addresses[i] = currToken;\r\n        aprs[i] = ILendingProtocol(protocolWrappers[currToken]).getAPR();\r\n      }\r\n  }\r\n\r\n  // external\r\n  /**\r\n   * Used to mint IdleTokens, given an underlying amount (eg. DAI).\r\n   * This method triggers a rebalance of the pools if needed\r\n   * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\r\n   * NOTE 2: this method can be paused\r\n   *\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return mintedTokens : amount of IdleTokens minted\r\n   */\r\n  function mintIdleToken(uint256 _amount, uint256[] memory _clientProtocolAmounts)\r\n    public nonReentrant whenNotPaused whenITokenPriceHasNotDecreased\r\n    returns (uint256 mintedTokens) {\r\n      // Get current IdleToken price\r\n      uint256 idlePrice = tokenPrice();\r\n      // transfer tokens to this contract\r\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n      // Rebalance the current pool if needed and mint new supplyied amount\r\n      rebalance(_amount, _clientProtocolAmounts);\r\n\r\n      mintedTokens = _amount.mul(10**18).div(idlePrice);\r\n      _mint(msg.sender, mintedTokens);\r\n  }\r\n\r\n  /**\r\n   * Used to get `_clientProtocolAmounts` for `mintIdleToken` method, given an underlying amount (eg. DAI).\r\n   * This should be used only for a call not an actual tx\r\n   * NOTE: User should 'approve' _amount of tokens before calling this method\r\n   * NOTE 2: this method can be paused\r\n   *\r\n   * @param _amount : amount of underlying token to be lended\r\n   * @return : address[] array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return : uint256[] array with all amounts for each protocol in order,\r\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\r\n   */\r\n  function getParamsForMintIdleToken(uint256 _amount)\r\n    external nonLocallyReentrant whenNotPaused whenITokenPriceHasNotDecreased\r\n    returns (address[] memory, uint256[] memory) {\r\n      mintIdleToken(_amount, new uint256[](0));\r\n      return _getCurrentAllocations();\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * This method triggers a rebalance of the pools if needed\r\n   * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\r\n   * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\r\n   *         Ideally one should wait until the black swan event is terminated\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @param _skipRebalance : whether to skip the rebalance process or not\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return redeemedTokens : amount of underlying tokens redeemed\r\n   */\r\n  function redeemIdleToken(uint256 _amount, bool _skipRebalance, uint256[] memory _clientProtocolAmounts)\r\n    public nonReentrant\r\n    returns (uint256 redeemedTokens) {\r\n      address currentToken;\r\n\r\n      for (uint8 i = 0; i < currentTokensUsed.length; i++) {\r\n        currentToken = currentTokensUsed[i];\r\n        redeemedTokens = redeemedTokens.add(\r\n          _redeemProtocolTokens(\r\n            protocolWrappers[currentToken],\r\n            currentToken,\r\n            // _amount * protocolPoolBalance / idleSupply\r\n            _amount.mul(IERC20(currentToken).balanceOf(address(this))).div(this.totalSupply()), // amount to redeem\r\n            msg.sender\r\n          )\r\n        );\r\n      }\r\n\r\n      _burn(msg.sender, _amount);\r\n\r\n      // Do not rebalance if contract is paused or iToken price has decreased\r\n      if (this.paused() || iERC20Fulcrum(iToken).tokenPrice() < lastITokenPrice || _skipRebalance) {\r\n        return redeemedTokens;\r\n      }\r\n\r\n      rebalance(0, _clientProtocolAmounts);\r\n  }\r\n\r\n  /**\r\n   * Used to get `_clientProtocolAmounts` for `redeemIdleToken` method\r\n   * This should be used only for a call not an actual tx\r\n   * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\r\n   * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\r\n   *         Ideally one should wait until the black swan event is terminated\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   * @param _skipRebalance : whether to skip the rebalance process or not\r\n   * @return : address[] array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return : uint256[] array with all amounts for each protocol in order,\r\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\r\n   */\r\n   function getParamsForRedeemIdleToken(uint256 _amount, bool _skipRebalance)\r\n    external nonLocallyReentrant\r\n    returns (address[] memory, uint256[] memory) {\r\n      redeemIdleToken(_amount, _skipRebalance, new uint256[](0));\r\n      return _getCurrentAllocations();\r\n  }\r\n\r\n  /**\r\n   * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\r\n   * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\r\n   * Underlying (eg. DAI) is not redeemed here.\r\n   *\r\n   * @param _amount : amount of IdleTokens to be burned\r\n   */\r\n  function redeemInterestBearingTokens(uint256 _amount)\r\n    external nonReentrant {\r\n      uint256 idleSupply = this.totalSupply();\r\n      address currentToken;\r\n\r\n      for (uint8 i = 0; i < currentTokensUsed.length; i++) {\r\n        currentToken = currentTokensUsed[i];\r\n        IERC20(currentToken).safeTransfer(\r\n          msg.sender,\r\n          _amount.mul(IERC20(currentToken).balanceOf(address(this))).div(idleSupply) // amount to redeem\r\n        );\r\n      }\r\n\r\n      _burn(msg.sender, _amount);\r\n  }\r\n\r\n  /**\r\n   * Here we are redeeming unclaimed token from iToken contract to this contracts\r\n   * then allocating claimedTokens with rebalancing\r\n   * Everyone should be incentivized in calling this method\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return claimedTokens : amount of underlying tokens claimed\r\n   */\r\n  function claimITokens(uint256[] calldata _clientProtocolAmounts)\r\n    external whenNotPaused whenITokenPriceHasNotDecreased\r\n    returns (uint256 claimedTokens) {\r\n      claimedTokens = iERC20Fulcrum(iToken).claimLoanToken();\r\n      rebalance(claimedTokens, _clientProtocolAmounts);\r\n  }\r\n\r\n  /**\r\n   * Dynamic allocate all the pool across different lending protocols if needed\r\n   * Everyone should be incentivized in calling this method\r\n   *\r\n   * If _newAmount == 0 then simple rebalance\r\n   * else rebalance (if needed) and mint (always)\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @param _newAmount : amount of underlying tokens that needs to be minted with this rebalance\r\n   * @param _clientProtocolAmounts : client side calculated amounts to put on each lending protocol\r\n   * @return : whether has rebalanced or not\r\n   */\r\n  function rebalance(uint256 _newAmount, uint256[] memory _clientProtocolAmounts)\r\n    public whenNotPaused whenITokenPriceHasNotDecreased\r\n    returns (bool) {\r\n      // If we are using only one protocol we check if that protocol has still the best apr\r\n      // if yes we check if it can support all `_newAmount` provided and still has the best apr\r\n\r\n      bool shouldRebalance;\r\n      address bestToken;\r\n\r\n      if (currentTokensUsed.length == 1 && _newAmount > 0) {\r\n        (shouldRebalance, bestToken) = _rebalanceCheck(_newAmount, currentTokensUsed[0]);\r\n\r\n        if (!shouldRebalance) {\r\n          // only one protocol is currently used and can support all the new liquidity\r\n          _mintProtocolTokens(protocolWrappers[currentTokensUsed[0]], _newAmount);\r\n          return false; // hasNotRebalanced\r\n        }\r\n      }\r\n\r\n      // otherwise we redeem everything from every protocol and check if the protocol with the\r\n      // best apr can support all the liquidity that we redeemed\r\n\r\n      // - get current protocol used\r\n      TokenProtocol[] memory tokenProtocols = _getCurrentProtocols();\r\n      // - redeem everything from each protocol\r\n      for (uint8 i = 0; i < tokenProtocols.length; i++) {\r\n        _redeemProtocolTokens(\r\n          tokenProtocols[i].protocolAddr,\r\n          tokenProtocols[i].tokenAddr,\r\n          IERC20(tokenProtocols[i].tokenAddr).balanceOf(address(this)),\r\n          address(this) // tokens are now in this contract\r\n        );\r\n      }\r\n      // remove all elements from `currentTokensUsed`\r\n      delete currentTokensUsed;\r\n\r\n      // tokenBalance here has already _newAmount counted\r\n      uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n      if (tokenBalance == 0) {\r\n        return false;\r\n      }\r\n      // (we are re-fetching aprs because after redeeming they changed)\r\n      (shouldRebalance, bestToken) = _rebalanceCheck(tokenBalance, address(0));\r\n\r\n      if (!shouldRebalance) {\r\n        // only one protocol is currently used and can support all the new liquidity\r\n        _mintProtocolTokens(protocolWrappers[bestToken], tokenBalance);\r\n        // update current tokens used in IdleToken storage\r\n        currentTokensUsed.push(bestToken);\r\n        return false; // hasNotRebalanced\r\n      }\r\n\r\n      // if it's not the case we calculate the dynamic allocation for every protocol\r\n      (address[] memory tokenAddresses, uint256[] memory protocolAmounts) = _calcAmounts(tokenBalance, _clientProtocolAmounts);\r\n\r\n      // mint for each protocol and update currentTokensUsed\r\n      uint256 currAmount;\r\n      address currAddr;\r\n      for (uint8 i = 0; i < protocolAmounts.length; i++) {\r\n        currAmount = protocolAmounts[i];\r\n        if (currAmount == 0) {\r\n          continue;\r\n        }\r\n        currAddr = tokenAddresses[i];\r\n        _mintProtocolTokens(protocolWrappers[currAddr], currAmount);\r\n        // update current tokens used in IdleToken storage\r\n        currentTokensUsed.push(currAddr);\r\n      }\r\n\r\n      emit Rebalance(tokenBalance);\r\n\r\n      return true; // hasRebalanced\r\n  }\r\n\r\n  /**\r\n   * Used to get `_clientProtocolAmounts` for `rebalance` method\r\n   * This should be used only for a call not an actual tx\r\n   * NOTE: this method can be paused\r\n   *\r\n   * @param _newAmount : amount of underlying tokens that needs to be minted with this rebalance\r\n   * @return : address[] array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return : uint256[] array with all amounts for each protocol in order,\r\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\r\n   */\r\n  function getParamsForRebalance(uint256 _newAmount)\r\n    external whenNotPaused whenITokenPriceHasNotDecreased\r\n    returns (address[] memory, uint256[] memory) {\r\n      rebalance(_newAmount, new uint256[](0));\r\n      return _getCurrentAllocations();\r\n  }\r\n\r\n  // internal\r\n  /**\r\n   * Check if a rebalance is needed\r\n   * if there is only one protocol and has the best rate then check the nextRateWithAmount()\r\n   * if rate is still the highest then put everything there\r\n   * otherwise rebalance with all amount\r\n   *\r\n   * @param _amount : amount of underlying tokens that needs to be added to the current pools NAV\r\n   * @return : whether should rebalanced or not\r\n   */\r\n\r\n  function _rebalanceCheck(uint256 _amount, address currentToken)\r\n    internal view\r\n    returns (bool, address) {\r\n      (address[] memory addresses, uint256[] memory aprs) = getAPRs();\r\n      if (aprs.length == 0) {\r\n        return (false, address(0));\r\n      }\r\n\r\n      // we are trying to find if the protocol with the highest APR can support all the liquidity\r\n      // we intend to provide\r\n      uint256 maxRate;\r\n      address maxAddress;\r\n      uint256 secondBestRate;\r\n      uint256 currApr;\r\n      address currAddr;\r\n\r\n      // find best rate and secondBestRate\r\n      for (uint8 i = 0; i < aprs.length; i++) {\r\n        currApr = aprs[i];\r\n        currAddr = addresses[i];\r\n        if (currApr > maxRate) {\r\n          secondBestRate = maxRate;\r\n          maxRate = currApr;\r\n          maxAddress = currAddr;\r\n        } else if (currApr <= maxRate && currApr >= secondBestRate) {\r\n          secondBestRate = currApr;\r\n        }\r\n      }\r\n\r\n      if (currentToken != address(0) && currentToken != maxAddress) {\r\n        return (true, maxAddress);\r\n      } else {\r\n        uint256 nextRate = _getProtocolNextRate(protocolWrappers[maxAddress], _amount);\r\n        if (nextRate.add(minRateDifference) < secondBestRate) {\r\n          return (true, maxAddress);\r\n        }\r\n      }\r\n\r\n      return (false, maxAddress);\r\n  }\r\n\r\n  /**\r\n   * Calls IdleRebalancer `calcRebalanceAmounts` method\r\n   *\r\n   * @param _amount : amount of underlying tokens that needs to be allocated on lending protocols\r\n   * @return tokenAddresses : array with all token addresses used,\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   */\r\n  function _calcAmounts(uint256 _amount, uint256[] memory _clientProtocolAmounts)\r\n    internal view\r\n    returns (address[] memory, uint256[] memory) {\r\n      uint256[] memory paramsRebalance = new uint256[](_clientProtocolAmounts.length + 1);\r\n      paramsRebalance[0] = _amount;\r\n\r\n      for (uint8 i = 1; i <= _clientProtocolAmounts.length; i++) {\r\n        paramsRebalance[i] = _clientProtocolAmounts[i-1];\r\n      }\r\n\r\n      return IdleRebalancer(rebalancer).calcRebalanceAmounts(paramsRebalance);\r\n  }\r\n\r\n  /**\r\n   * Get addresses of current tokens and protocol wrappers used\r\n   *\r\n   * @return currentProtocolsUsed : array of `TokenProtocol` (currentToken address, protocolWrapper address)\r\n   */\r\n  function _getCurrentProtocols()\r\n    internal view\r\n    returns (TokenProtocol[] memory currentProtocolsUsed) {\r\n      currentProtocolsUsed = new TokenProtocol[](currentTokensUsed.length);\r\n      for (uint8 i = 0; i < currentTokensUsed.length; i++) {\r\n        currentProtocolsUsed[i] = TokenProtocol(\r\n          currentTokensUsed[i],\r\n          protocolWrappers[currentTokensUsed[i]]\r\n        );\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Get the contract balance of every protocol currently used\r\n   *\r\n   * @return tokenAddresses : array with all token addresses used,\r\n   *                          eg [cTokenAddress, iTokenAddress]\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   eg [amountCompoundInUnderlying, amountFulcrumInUnderlying]\r\n   */\r\n  function _getCurrentAllocations() internal view\r\n    returns (address[] memory tokenAddresses, uint256[] memory amounts) {\r\n      // Get balance of every protocol implemented\r\n      tokenAddresses = new address[](allAvailableTokens.length);\r\n      amounts = new uint256[](allAvailableTokens.length);\r\n\r\n      address currentToken;\r\n      uint256 currTokenPrice;\r\n\r\n      for (uint8 i = 0; i < allAvailableTokens.length; i++) {\r\n        currentToken = allAvailableTokens[i];\r\n        tokenAddresses[i] = currentToken;\r\n        currTokenPrice = ILendingProtocol(protocolWrappers[currentToken]).getPriceInToken();\r\n        amounts[i] = currTokenPrice.mul(\r\n          IERC20(currentToken).balanceOf(address(this))\r\n        ).div(10**18);\r\n      }\r\n\r\n      // return addresses and respective amounts in underlying\r\n      return (tokenAddresses, amounts);\r\n  }\r\n\r\n  // ILendingProtocols calls\r\n  /**\r\n   * Get next rate of a lending protocol given an amount to be lended\r\n   *\r\n   * @param _wrapperAddr : address of protocol wrapper\r\n   * @param _amount : amount of underlying to be lended\r\n   * @return apr : new apr one will get after lending `_amount`\r\n   */\r\n  function _getProtocolNextRate(address _wrapperAddr, uint256 _amount)\r\n    internal view\r\n    returns (uint256 apr) {\r\n      ILendingProtocol _wrapper = ILendingProtocol(_wrapperAddr);\r\n      apr = _wrapper.nextSupplyRate(_amount);\r\n  }\r\n\r\n  /**\r\n   * Mint protocol tokens through protocol wrapper\r\n   *\r\n   * @param _wrapperAddr : address of protocol wrapper\r\n   * @param _amount : amount of underlying to be lended\r\n   * @return tokens : new tokens minted\r\n   */\r\n  function _mintProtocolTokens(address _wrapperAddr, uint256 _amount)\r\n    internal\r\n    returns (uint256 tokens) {\r\n      if (_amount == 0) {\r\n        return tokens;\r\n      }\r\n      ILendingProtocol _wrapper = ILendingProtocol(_wrapperAddr);\r\n      // Transfer _amount underlying token (eg. DAI) to _wrapperAddr\r\n      IERC20(token).safeTransfer(_wrapperAddr, _amount);\r\n      tokens = _wrapper.mint();\r\n  }\r\n\r\n  /**\r\n   * Redeem underlying tokens through protocol wrapper\r\n   *\r\n   * @param _wrapperAddr : address of protocol wrapper\r\n   * @param _amount : amount of `_token` to redeem\r\n   * @param _token : protocol token address\r\n   * @param _account : should be msg.sender when rebalancing and final user when redeeming\r\n   * @return tokens : new tokens minted\r\n   */\r\n  function _redeemProtocolTokens(address _wrapperAddr, address _token, uint256 _amount, address _account)\r\n    internal\r\n    returns (uint256 tokens) {\r\n      if (_amount == 0) {\r\n        return tokens;\r\n      }\r\n      ILendingProtocol _wrapper = ILendingProtocol(_wrapperAddr);\r\n      // Transfer _amount of _protocolToken (eg. cDAI) to _wrapperAddr\r\n      IERC20(_token).safeTransfer(_wrapperAddr, _amount);\r\n      tokens = _wrapper.redeem(_account);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemInterestBearingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_skipRebalance\",\"type\":\"bool\"}],\"name\":\"getParamsForRedeemIdleToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setMinRateDifference\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRateDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAvailableTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_clientProtocolAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mintIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolWrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getParamsForMintIdleToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_clientProtocolAmounts\",\"type\":\"uint256[]\"}],\"name\":\"claimITokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceCalculator\",\"type\":\"address\"}],\"name\":\"setPriceCalculator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_clientProtocolAmounts\",\"type\":\"uint256[]\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"}],\"name\":\"setRebalancer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"}],\"name\":\"setIToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_manualPlay\",\"type\":\"bool\"}],\"name\":\"setManualPlay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manualPlay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAPRs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"aprs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTokensUsed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"getParamsForRebalance\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_skipRebalance\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_clientProtocolAmounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemIdleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemedTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"setProtocolWrapper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastITokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rebalancer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceCalculator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idleCompound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idleFulcrum\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"IdleToken","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000001200000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000f5dce57282a584d2746faf1593d3121fcac444dc00000000000000000000000014094949152eddbfcd073717200da82fed8dc960000000000000000000000000781616fb046a4e39c239e39bfeff1a07d4b753f4000000000000000000000000b988641e8d493b5bff65e63819975b6b33477057000000000000000000000000be3e788bd11ab3070b5264aeed25c1976ab6ac000000000000000000000000009ff8b75575a244c05697ff74818d202265088bd4000000000000000000000000000000000000000000000000000000000000000749646c6553414900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000749444c4553414900000000000000000000000000000000000000000000000000","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://b842b2769e7f263e2ddb268beb394cf55bb8326b40231aeb467de1b45c262317"}]}