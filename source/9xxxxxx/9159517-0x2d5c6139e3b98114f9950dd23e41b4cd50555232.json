{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/bancorx/interfaces/IBancorXUpgrader.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Bancor X Upgrader interface\r\n*/\r\ncontract IBancorXUpgrader {\r\n    function upgrade(uint16 _version, address[] _reporters) public;\r\n}\r\n\r\n// File: contracts/bancorx/interfaces/IBancorX.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\ncontract IBancorX {\r\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount, uint256 _id) public;\r\n    function getXTransferAmount(uint256 _xTransferId, address _for) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/ContractIds.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Id definitions for bancor contracts\r\n  * \r\n  * Can be used in conjunction with the contract registry to get contract addresses\r\n*/\r\ncontract ContractIds {\r\n    // generic\r\n    bytes32 public constant CONTRACT_FEATURES = \"ContractFeatures\";\r\n    bytes32 public constant CONTRACT_REGISTRY = \"ContractRegistry\";\r\n    bytes32 public constant NON_STANDARD_TOKEN_REGISTRY = \"NonStandardTokenRegistry\";\r\n\r\n    // bancor logic\r\n    bytes32 public constant BANCOR_NETWORK = \"BancorNetwork\";\r\n    bytes32 public constant BANCOR_FORMULA = \"BancorFormula\";\r\n    bytes32 public constant BANCOR_GAS_PRICE_LIMIT = \"BancorGasPriceLimit\";\r\n    bytes32 public constant BANCOR_CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\r\n    bytes32 public constant BANCOR_CONVERTER_FACTORY = \"BancorConverterFactory\";\r\n\r\n    // BNT core\r\n    bytes32 public constant BNT_TOKEN = \"BNTToken\";\r\n    bytes32 public constant BNT_CONVERTER = \"BNTConverter\";\r\n\r\n    // BancorX\r\n    bytes32 public constant BANCOR_X = \"BancorX\";\r\n    bytes32 public constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\r\n}\r\n\r\n// File: contracts/token/interfaces/IERC20Token.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {this;}\r\n    function symbol() public view returns (string) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// File: contracts/utility/interfaces/IOwned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n// File: contracts/token/interfaces/ISmartToken.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken is IOwned, IERC20Token {\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/token/interfaces/ISmartTokenController.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/*\r\n    Smart Token Controller interface\r\n*/\r\ncontract ISmartTokenController {\r\n    function claimTokens(address _from, uint256 _amount) public;\r\n    function token() public view returns (ISmartToken) {this;}\r\n}\r\n\r\n// File: contracts/utility/interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    Contract Registry interface\r\n*/\r\ncontract IContractRegistry {\r\n    function addressOf(bytes32 _contractName) public view returns (address);\r\n\r\n    // deprecated, backward compatibility\r\n    function getAddress(bytes32 _contractName) public view returns (address);\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      * \r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      * \r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function setOwner(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner && _newOwner != address(0));\r\n        emit OwnerUpdate(owner, _newOwner);\r\n        owner = _newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/utility/SafeMath.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Library for basic math operations with overflow/underflow protection\r\n*/\r\nlibrary SafeMath {\r\n    /**\r\n      * @dev returns the sum of _x and _y, reverts if the calculation overflows\r\n      * \r\n      * @param _x   value 1\r\n      * @param _y   value 2\r\n      * \r\n      * @return sum\r\n    */\r\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        require(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the difference of _x minus _y, reverts if the calculation underflows\r\n      * \r\n      * @param _x   minuend\r\n      * @param _y   subtrahend\r\n      * \r\n      * @return difference\r\n    */\r\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n      * @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\r\n      * \r\n      * @param _x   factor 1\r\n      * @param _y   factor 2\r\n      * \r\n      * @return product\r\n    */\r\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        // gas optimization\r\n        if (_x == 0)\r\n            return 0;\r\n\r\n        uint256 z = _x * _y;\r\n        require(z / _x == _y);\r\n        return z;\r\n    }\r\n\r\n      /**\r\n        * ev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n        * \r\n        * aram _x   dividend\r\n        * aram _y   divisor\r\n        * \r\n        * eturn quotient\r\n    */\r\n    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_y > 0);\r\n        uint256 c = _x / _y;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/utility/Utils.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    /**\r\n      * constructor\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    // verifies that an amount is greater than zero\r\n    modifier greaterThanZero(uint256 _amount) {\r\n        require(_amount > 0);\r\n        _;\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        require(_address != address(this));\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/utility/interfaces/ITokenHolder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n/*\r\n    Token Holder interface\r\n*/\r\ncontract ITokenHolder is IOwned {\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\r\n}\r\n\r\n// File: contracts/token/interfaces/INonStandardERC20.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n/*\r\n    ERC20 Standard Token interface which doesn't return true/false for transfer, transferFrom and approve\r\n*/\r\ncontract INonStandardERC20 {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns (string) {this;}\r\n    function symbol() public view returns (string) {this;}\r\n    function decimals() public view returns (uint8) {this;}\r\n    function totalSupply() public view returns (uint256) {this;}\r\n    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\r\n\r\n    function transfer(address _to, uint256 _value) public;\r\n    function transferFrom(address _from, address _to, uint256 _value) public;\r\n    function approve(address _spender, uint256 _value) public;\r\n}\r\n\r\n// File: contracts/utility/TokenHolder.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev We consider every contract to be a 'token holder' since it's currently not possible\r\n  * for a contract to deny receiving tokens.\r\n  * \r\n  * The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\r\n  * the owner to send tokens that were sent to the contract by mistake back to their sender.\r\n  * \r\n  * Note that we use the non standard ERC-20 interface which has no return value for transfer\r\n  * in order to support both non standard as well as standard token contracts.\r\n  * see https://github.com/ethereum/solidity/issues/4116\r\n*/\r\ncontract TokenHolder is ITokenHolder, Owned, Utils {\r\n    /**\r\n      * @dev initializes a new TokenHolder instance\r\n    */\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n      * @dev withdraws tokens held by the contract and sends them to an account\r\n      * can only be called by the owner\r\n      * \r\n      * @param _token   ERC20 token contract address\r\n      * @param _to      account to receive the new amount\r\n      * @param _amount  amount to withdraw\r\n    */\r\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\r\n        public\r\n        ownerOnly\r\n        validAddress(_token)\r\n        validAddress(_to)\r\n        notThis(_to)\r\n    {\r\n        INonStandardERC20(_token).transfer(_to, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts/bancorx/BancorX.sol\r\n\r\npragma solidity 0.4.26;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev The BancorX contract allows cross chain token transfers.\r\n  * \r\n  * There are two processes that take place in the contract -\r\n  * - Initiate a cross chain transfer to a target blockchain (locks tokens from the caller account on Ethereum)\r\n  * - Report a cross chain transfer initiated on a source blockchain (releases tokens to an account on Ethereum)\r\n  * \r\n  * Reporting cross chain transfers works similar to standard multisig contracts, meaning that multiple\r\n  * callers are required to report a transfer before tokens are released to the target account.\r\n*/\r\ncontract BancorX is IBancorX, Owned, TokenHolder, ContractIds {\r\n    using SafeMath for uint256;\r\n\r\n    // represents a transaction on another blockchain where tokens were destroyed/locked\r\n    struct Transaction {\r\n        uint256 amount;\r\n        bytes32 fromBlockchain;\r\n        address to;\r\n        uint8 numOfReports;\r\n        bool completed;\r\n    }\r\n\r\n    uint16 public version = 3;\r\n\r\n    uint256 public maxLockLimit;            // the maximum amount of tokens that can be locked in one transaction\r\n    uint256 public maxReleaseLimit;         // the maximum amount of tokens that can be released in one transaction\r\n    uint256 public minLimit;                // the minimum amount of tokens that can be transferred in one transaction\r\n    uint256 public prevLockLimit;           // the lock limit *after* the last transaction\r\n    uint256 public prevReleaseLimit;        // the release limit *after* the last transaction\r\n    uint256 public limitIncPerBlock;        // how much the limit increases per block\r\n    uint256 public prevLockBlockNumber;     // the block number of the last lock transaction\r\n    uint256 public prevReleaseBlockNumber;  // the block number of the last release transaction\r\n    uint256 public minRequiredReports;      // minimum number of required reports to release tokens\r\n    \r\n    IContractRegistry public registry;      // contract registry\r\n    IContractRegistry public prevRegistry;  // address of previous registry as security mechanism\r\n\r\n    IERC20Token public token;               // erc20 token or smart token\r\n    bool public isSmartToken;               // false - erc20 token; true - smart token\r\n\r\n    bool public xTransfersEnabled = true;   // true if x transfers are enabled, false if not\r\n    bool public reportingEnabled = true;    // true if reporting is enabled, false if not\r\n    bool public allowRegistryUpdate = true; // allows the owner to prevent/allow the registry to be updated\r\n\r\n    // txId -> Transaction\r\n    mapping (uint256 => Transaction) public transactions;\r\n\r\n    // xTransferId -> txId\r\n    mapping (uint256 => uint256) public transactionIds;\r\n\r\n    // txId -> reporter -> true if reporter already reported txId\r\n    mapping (uint256 => mapping (address => bool)) public reportedTxs;\r\n\r\n    // address -> true if address is reporter\r\n    mapping (address => bool) public reporters;\r\n\r\n    /**\r\n      * @dev triggered when tokens are locked in smart contract\r\n      * \r\n      * @param _from    wallet address that the tokens are locked from\r\n      * @param _amount  amount locked\r\n    */\r\n    event TokensLock(\r\n        address indexed _from,\r\n        uint256 _amount\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when tokens are released by the smart contract\r\n      * \r\n      * @param _to      wallet address that the tokens are released to\r\n      * @param _amount  amount released\r\n    */\r\n    event TokensRelease(\r\n        address indexed _to,\r\n        uint256 _amount\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when xTransfer is successfully called\r\n      * \r\n      * @param _from            wallet address that initiated the xtransfer\r\n      * @param _toBlockchain    target blockchain\r\n      * @param _to              target wallet\r\n      * @param _amount          transfer amount\r\n      * @param _id              xtransfer id\r\n    */\r\n    event XTransfer(\r\n        address indexed _from,\r\n        bytes32 _toBlockchain,\r\n        bytes32 indexed _to,\r\n        uint256 _amount,\r\n        uint256 _id\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when report is successfully submitted\r\n      * \r\n      * @param _reporter        reporter wallet\r\n      * @param _fromBlockchain  source blockchain\r\n      * @param _txId            tx id on the source blockchain\r\n      * @param _to              target wallet\r\n      * @param _amount          transfer amount\r\n      * @param _xTransferId     xtransfer id\r\n    */\r\n    event TxReport(\r\n        address indexed _reporter,\r\n        bytes32 _fromBlockchain,\r\n        uint256 _txId,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _xTransferId\r\n    );\r\n\r\n    /**\r\n      * @dev triggered when final report is successfully submitted\r\n      * \r\n      * @param _to  target wallet\r\n      * @param _id  xtransfer id\r\n    */\r\n    event XTransferComplete(\r\n        address _to,\r\n        uint256 _id\r\n    );\r\n\r\n    /**\r\n      * @dev initializes a new BancorX instance\r\n      * \r\n      * @param _maxLockLimit          maximum amount of tokens that can be locked in one transaction\r\n      * @param _maxReleaseLimit       maximum amount of tokens that can be released in one transaction\r\n      * @param _minLimit              minimum amount of tokens that can be transferred in one transaction\r\n      * @param _limitIncPerBlock      how much the limit increases per block\r\n      * @param _minRequiredReports    minimum number of reporters to report transaction before tokens can be released\r\n      * @param _registry              address of contract registry\r\n      * @param _token                 erc20 token or smart token\r\n      * @param _isSmartToken          false - erc20 token; true - smart token\r\n     */\r\n    constructor(\r\n        uint256 _maxLockLimit,\r\n        uint256 _maxReleaseLimit,\r\n        uint256 _minLimit,\r\n        uint256 _limitIncPerBlock,\r\n        uint256 _minRequiredReports,\r\n        address _registry,\r\n        IERC20Token _token,\r\n        bool _isSmartToken\r\n    )\r\n        public\r\n    {\r\n        // the maximum limits, minimum limit, and limit increase per block\r\n        maxLockLimit = _maxLockLimit;\r\n        maxReleaseLimit = _maxReleaseLimit;\r\n        minLimit = _minLimit;\r\n        limitIncPerBlock = _limitIncPerBlock;\r\n        minRequiredReports = _minRequiredReports;\r\n\r\n        // previous limit is _maxLimit, and previous block number is current block number\r\n        prevLockLimit = _maxLockLimit;\r\n        prevReleaseLimit = _maxReleaseLimit;\r\n        prevLockBlockNumber = block.number;\r\n        prevReleaseBlockNumber = block.number;\r\n\r\n        registry = IContractRegistry(_registry);\r\n        prevRegistry = IContractRegistry(_registry);\r\n\r\n        token = _token;\r\n        isSmartToken = _isSmartToken;\r\n    }\r\n\r\n    // validates that the caller is a reporter\r\n    modifier isReporter {\r\n        require(reporters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    // allows execution only when x transfers are enabled\r\n    modifier whenXTransfersEnabled {\r\n        require(xTransfersEnabled);\r\n        _;\r\n    }\r\n\r\n    // allows execution only when reporting is enabled\r\n    modifier whenReportingEnabled {\r\n        require(reportingEnabled);\r\n        _;\r\n    }\r\n\r\n    /**\r\n      * @dev setter\r\n      * \r\n      * @param _maxLockLimit    new maxLockLimit\r\n     */\r\n    function setMaxLockLimit(uint256 _maxLockLimit) public ownerOnly {\r\n        maxLockLimit = _maxLockLimit;\r\n    }\r\n    \r\n    /**\r\n      * @dev setter\r\n      * \r\n      * @param _maxReleaseLimit    new maxReleaseLimit\r\n     */\r\n    function setMaxReleaseLimit(uint256 _maxReleaseLimit) public ownerOnly {\r\n        maxReleaseLimit = _maxReleaseLimit;\r\n    }\r\n    \r\n    /**\r\n      * @dev setter\r\n      * \r\n      * @param _minLimit    new minLimit\r\n     */\r\n    function setMinLimit(uint256 _minLimit) public ownerOnly {\r\n        minLimit = _minLimit;\r\n    }\r\n\r\n    /**\r\n      * @dev setter\r\n      * \r\n      * @param _limitIncPerBlock    new limitIncPerBlock\r\n     */\r\n    function setLimitIncPerBlock(uint256 _limitIncPerBlock) public ownerOnly {\r\n        limitIncPerBlock = _limitIncPerBlock;\r\n    }\r\n\r\n    /**\r\n      * @dev setter\r\n      * \r\n      * @param _minRequiredReports    new minRequiredReports\r\n     */\r\n    function setMinRequiredReports(uint256 _minRequiredReports) public ownerOnly {\r\n        minRequiredReports = _minRequiredReports;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner to set/remove reporters\r\n      * \r\n      * @param _reporter    reporter whos status is to be set\r\n      * @param _active      true if the reporter is approved, false otherwise\r\n     */\r\n    function setReporter(address _reporter, bool _active) public ownerOnly {\r\n        reporters[_reporter] = _active;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner enable/disable the xTransfer method\r\n      * \r\n      * @param _enable     true to enable, false to disable\r\n     */\r\n    function enableXTransfers(bool _enable) public ownerOnly {\r\n        xTransfersEnabled = _enable;\r\n    }\r\n\r\n    /**\r\n      * @dev allows the owner enable/disable the reportTransaction method\r\n      * \r\n      * @param _enable     true to enable, false to disable\r\n     */\r\n    function enableReporting(bool _enable) public ownerOnly {\r\n        reportingEnabled = _enable;\r\n    }\r\n\r\n    /**\r\n      * @dev disables the registry update functionality\r\n      * this is a safety mechanism in case of a emergency\r\n      * can only be called by the manager or owner\r\n      * \r\n      * @param _disable    true to disable registry updates, false to re-enable them\r\n    */\r\n    function disableRegistryUpdate(bool _disable) public ownerOnly {\r\n        allowRegistryUpdate = !_disable;\r\n    }\r\n\r\n    /**\r\n      * @dev sets the contract registry to whichever address the current registry is pointing to\r\n     */\r\n    function updateRegistry() public {\r\n        // require that upgrading is allowed or that the caller is the owner\r\n        require(allowRegistryUpdate || msg.sender == owner);\r\n\r\n        // get the address of whichever registry the current registry is pointing to\r\n        address newRegistry = registry.addressOf(ContractIds.CONTRACT_REGISTRY);\r\n\r\n        // if the new registry hasn't changed or is the zero address, revert\r\n        require(newRegistry != address(registry) && newRegistry != address(0));\r\n\r\n        // set the previous registry as current registry and current registry as newRegistry\r\n        prevRegistry = registry;\r\n        registry = IContractRegistry(newRegistry);\r\n    }\r\n\r\n    /**\r\n      * @dev security mechanism allowing the converter owner to revert to the previous registry,\r\n      * to be used in emergency scenario\r\n    */\r\n    function restoreRegistry() public ownerOnly {\r\n        // set the registry as previous registry\r\n        registry = prevRegistry;\r\n\r\n        // after a previous registry is restored, only the owner can allow future updates\r\n        allowRegistryUpdate = false;\r\n    }\r\n\r\n    /**\r\n      * @dev upgrades the contract to the latest version\r\n      * can only be called by the owner\r\n      * note that the owner needs to call acceptOwnership on the new contract after the upgrade\r\n      * \r\n      * @param _reporters    new list of reporters\r\n    */\r\n    function upgrade(address[] _reporters) public ownerOnly {\r\n        IBancorXUpgrader bancorXUpgrader = IBancorXUpgrader(registry.addressOf(ContractIds.BANCOR_X_UPGRADER));\r\n\r\n        transferOwnership(bancorXUpgrader);\r\n        bancorXUpgrader.upgrade(version, _reporters);\r\n        acceptOwnership();\r\n    }\r\n\r\n    /**\r\n      * @dev claims tokens from msg.sender to be converted to tokens on another blockchain\r\n      * \r\n      * @param _toBlockchain    blockchain on which tokens will be issued\r\n      * @param _to              address to send the tokens to\r\n      * @param _amount          the amount of tokens to transfer\r\n     */\r\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount) public whenXTransfersEnabled {\r\n        // get the current lock limit\r\n        uint256 currentLockLimit = getCurrentLockLimit();\r\n\r\n        // require that; minLimit <= _amount <= currentLockLimit\r\n        require(_amount >= minLimit && _amount <= currentLockLimit);\r\n        \r\n        lockTokens(_amount);\r\n\r\n        // set the previous lock limit and block number\r\n        prevLockLimit = currentLockLimit.sub(_amount);\r\n        prevLockBlockNumber = block.number;\r\n\r\n        // emit XTransfer event with id of 0\r\n        emit XTransfer(msg.sender, _toBlockchain, _to, _amount, 0);\r\n    }\r\n\r\n    /**\r\n      * @dev claims tokens from msg.sender to be converted to tokens on another blockchain\r\n      * \r\n      * @param _toBlockchain    blockchain on which tokens will be issued\r\n      * @param _to              address to send the tokens to\r\n      * @param _amount          the amount of tokens to transfer\r\n      * @param _id              pre-determined unique (if non zero) id which refers to this transaction \r\n     */\r\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount, uint256 _id) public whenXTransfersEnabled {\r\n        // get the current lock limit\r\n        uint256 currentLockLimit = getCurrentLockLimit();\r\n\r\n        // require that; minLimit <= _amount <= currentLockLimit\r\n        require(_amount >= minLimit && _amount <= currentLockLimit);\r\n        \r\n        lockTokens(_amount);\r\n\r\n        // set the previous lock limit and block number\r\n        prevLockLimit = currentLockLimit.sub(_amount);\r\n        prevLockBlockNumber = block.number;\r\n\r\n        // emit XTransfer event\r\n        emit XTransfer(msg.sender, _toBlockchain, _to, _amount, _id);\r\n    }\r\n\r\n    /**\r\n      * @dev allows reporter to report transaction which occured on another blockchain\r\n      * \r\n      * @param _fromBlockchain  blockchain in which tokens were destroyed\r\n      * @param _txId            transactionId of transaction thats being reported\r\n      * @param _to              address to receive tokens\r\n      * @param _amount          amount of tokens destroyed on another blockchain\r\n      * @param _xTransferId     unique (if non zero) pre-determined id (unlike _txId which is determined after the transactions been mined)\r\n     */\r\n    function reportTx(\r\n        bytes32 _fromBlockchain,\r\n        uint256 _txId,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _xTransferId \r\n    )\r\n        public\r\n        isReporter\r\n        whenReportingEnabled\r\n    {\r\n        // require that the transaction has not been reported yet by the reporter\r\n        require(!reportedTxs[_txId][msg.sender]);\r\n\r\n        // set reported as true\r\n        reportedTxs[_txId][msg.sender] = true;\r\n\r\n        Transaction storage txn = transactions[_txId];\r\n\r\n        // If the caller is the first reporter, set the transaction details\r\n        if (txn.numOfReports == 0) {\r\n            txn.to = _to;\r\n            txn.amount = _amount;\r\n            txn.fromBlockchain = _fromBlockchain;\r\n\r\n            if (_xTransferId != 0) {\r\n                // verify uniqueness of xTransfer id to prevent overwriting\r\n                require(transactionIds[_xTransferId] == 0);\r\n                transactionIds[_xTransferId] = _txId;\r\n            }\r\n        } else {\r\n            // otherwise, verify transaction details\r\n            require(txn.to == _to && txn.amount == _amount && txn.fromBlockchain == _fromBlockchain);\r\n            \r\n            if (_xTransferId != 0) {\r\n                require(transactionIds[_xTransferId] == _txId);\r\n            }\r\n        }\r\n        \r\n        // increment the number of reports\r\n        txn.numOfReports++;\r\n\r\n        emit TxReport(msg.sender, _fromBlockchain, _txId, _to, _amount, _xTransferId);\r\n\r\n        // if theres enough reports, try to release tokens\r\n        if (txn.numOfReports >= minRequiredReports) {\r\n            require(!transactions[_txId].completed);\r\n\r\n            // set the transaction as completed\r\n            transactions[_txId].completed = true;\r\n\r\n            emit XTransferComplete(_to, _xTransferId);\r\n\r\n            releaseTokens(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev gets x transfer amount by xTransferId (not txId)\r\n      * \r\n      * @param _xTransferId    unique (if non zero) pre-determined id (unlike _txId which is determined after the transactions been broadcasted)\r\n      * @param _for            address corresponding to xTransferId\r\n      * \r\n      * @return amount that was sent in xTransfer corresponding to _xTransferId\r\n    */\r\n    function getXTransferAmount(uint256 _xTransferId, address _for) public view returns (uint256) {\r\n        // xTransferId -> txId -> Transaction\r\n        Transaction storage transaction = transactions[transactionIds[_xTransferId]];\r\n\r\n        // verify that the xTransferId is for _for\r\n        require(transaction.to == _for);\r\n\r\n        return transaction.amount;\r\n    }\r\n\r\n    /**\r\n      * @dev method for calculating current lock limit\r\n      * \r\n      * @return the current maximum limit of tokens that can be locked\r\n     */\r\n    function getCurrentLockLimit() public view returns (uint256) {\r\n        // prevLockLimit + ((currBlockNumber - prevLockBlockNumber) * limitIncPerBlock)\r\n        uint256 currentLockLimit = prevLockLimit.add(((block.number).sub(prevLockBlockNumber)).mul(limitIncPerBlock));\r\n        if (currentLockLimit > maxLockLimit)\r\n            return maxLockLimit;\r\n        return currentLockLimit;\r\n    }\r\n \r\n    /**\r\n      * @dev method for calculating current release limit\r\n      * \r\n      * @return the current maximum limit of tokens that can be released\r\n     */\r\n    function getCurrentReleaseLimit() public view returns (uint256) {\r\n        // prevReleaseLimit + ((currBlockNumber - prevReleaseBlockNumber) * limitIncPerBlock)\r\n        uint256 currentReleaseLimit = prevReleaseLimit.add(((block.number).sub(prevReleaseBlockNumber)).mul(limitIncPerBlock));\r\n        if (currentReleaseLimit > maxReleaseLimit)\r\n            return maxReleaseLimit;\r\n        return currentReleaseLimit;\r\n    }\r\n\r\n    /**\r\n      * @dev claims and locks tokens from msg.sender to be converted to tokens on another blockchain\r\n      * \r\n      * @param _amount  the amount of tokens to lock\r\n     */\r\n    function lockTokens(uint256 _amount) private {\r\n        if (isSmartToken)\r\n            ISmartTokenController(ISmartToken(token).owner()).claimTokens(msg.sender, _amount);\r\n        else\r\n            token.transferFrom(msg.sender, address(this), _amount);\r\n        emit TokensLock(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n      * @dev private method to release tokens held by the contract\r\n      * \r\n      * @param _to      the address to release tokens to\r\n      * @param _amount  the amount of tokens to release\r\n     */\r\n    function releaseTokens(address _to, uint256 _amount) private {\r\n        // get the current release limit\r\n        uint256 currentReleaseLimit = getCurrentReleaseLimit();\r\n\r\n        require(_amount >= minLimit && _amount <= currentReleaseLimit);\r\n        \r\n        // update the previous release limit and block number\r\n        prevReleaseLimit = currentReleaseLimit.sub(_amount);\r\n        prevReleaseBlockNumber = block.number;\r\n\r\n        // no need to require, reverts on failure\r\n        token.transfer(_to, _amount);\r\n\r\n        emit TokensRelease(_to, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_reporters\",\"type\":\"address[]\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevLockLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentLockLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevLockBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRegistryUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reporters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSmartToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"xTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"xTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevReleaseBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_CONVERTER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_FORMULA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_txId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_xTransferId\",\"type\":\"uint256\"}],\"name\":\"reportTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minLimit\",\"type\":\"uint256\"}],\"name\":\"setMinLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitIncPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FEATURES\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reportedTxs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_NETWORK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_GAS_PRICE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reportingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromBlockchain\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"numOfReports\",\"type\":\"uint8\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limitIncPerBlock\",\"type\":\"uint256\"}],\"name\":\"setLimitIncPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableXTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLockLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_xTransferId\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"getXTransferAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxLockLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxLockLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxReleaseLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxReleaseLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRequiredReports\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minRequiredReports\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reporter\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setReporter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableReporting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NON_STANDARD_TOKEN_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xTransfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxLockLimit\",\"type\":\"uint256\"},{\"name\":\"_maxReleaseLimit\",\"type\":\"uint256\"},{\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"name\":\"_limitIncPerBlock\",\"type\":\"uint256\"},{\"name\":\"_minRequiredReports\",\"type\":\"uint256\"},{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_isSmartToken\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"XTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reporter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fromBlockchain\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_txId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_xTransferId\",\"type\":\"uint256\"}],\"name\":\"TxReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"XTransferComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"BancorX","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000878678326eac90000000000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000001a055690d9db80000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4000000000000000000000000309627af60f0926daa6041b8279484312f2bf0600000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"None","SwarmSource":"bzzr://41d5b00e3d849ad18102cbe7db1834c616cc2eb20498d9838a4906fe984de108"}]}