{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IUniswapExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapExchange {\r\n\r\n    function getEthToTokenInputPrice(uint256 ethSold)\r\n        external view returns(uint256 tokensBought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokensSold)\r\n        external view returns (uint256 ethBought);\r\n\r\n    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline)\r\n        external payable returns (uint256 tokensBought);\r\n\r\n    function tokenToEthSwapInput(uint256 tokensSold, uint256 minEth, uint256 deadline)\r\n        external returns (uint256 ethBought);\r\n\r\n    function tokenToTokenSwapInput(uint256 tokensSold, uint256 minTokensBought, uint256 minEthBought, uint256 deadline, address tokenAddr)\r\n        external returns (uint256 tokensBought);\r\n\r\n}\r\n\r\n// File: contracts/interface/IUniswapFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapFactory {\r\n\r\n    function getExchange(IERC20 token)\r\n        external view returns(IUniswapExchange exchange);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkContract.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkContract {\r\n\r\n    function searchBestRate(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcAmount,\r\n        bool usePermissionless\r\n    ) external view returns(address reserve, uint256 rate);\r\n}\r\n\r\n// File: contracts/interface/IKyberNetworkProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IKyberNetworkProxy {\r\n\r\n    function getExpectedRate(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcQty\r\n    ) external view returns(uint256 expectedRate, uint256 slippageRate);\r\n\r\n    function tradeWithHint(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        address destAddress,\r\n        uint256 maxDestAmount,\r\n        uint256 minConversionRate,\r\n        address walletId,\r\n        bytes calldata hint\r\n    ) external payable returns(uint256);\r\n\r\n    function kyberNetworkContract() external view returns (IKyberNetworkContract);\r\n\r\n    // TODO: Limit usage by tx.gasPrice\r\n    // function maxGasPrice() external view returns (uint256);\r\n\r\n    // TODO: Limit usage by user cap\r\n    // function getUserCapInWei(address user) external view returns (uint256);\r\n    // function getUserCapInTokenWei(address user, IERC20 token) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/IKyberUniswapReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IKyberUniswapReserve {\r\n    function uniswapFactory() external view returns(address);\r\n}\r\n\r\n// File: contracts/interface/IKyberOasisReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IKyberOasisReserve {\r\n    function otc() external view returns(address);\r\n}\r\n\r\n// File: contracts/interface/IKyberBancorReserve.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IKyberBancorReserve {\r\n    function bancorEth() public view returns(address);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetwork.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBancorNetwork {\r\n\r\n    function getReturnByPath(\r\n        address[] calldata path,\r\n        uint256 amount\r\n    ) external view returns(\r\n        uint256 returnAmount,\r\n        uint256 conversionFee\r\n    );\r\n\r\n    function claimAndConvert(\r\n        address[] calldata path,\r\n        uint256 amount,\r\n        uint256 minReturn\r\n    ) external returns(uint256);\r\n\r\n    function convert(\r\n        address[] calldata path,\r\n        uint256 amount,\r\n        uint256 minReturn\r\n    ) external payable returns(uint256);\r\n}\r\n\r\n// File: contracts/interface/IBancorContractRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IBancorContractRegistry {\r\n\r\n    function addressOf(bytes32 contractName)\r\n        external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IBancorNetworkPathFinder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IBancorNetworkPathFinder {\r\n\r\n    function generatePath(IERC20 sourceToken, IERC20 targetToken)\r\n        external view returns(address[] memory);\r\n}\r\n\r\n// File: contracts/interface/IBancorEtherToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IBancorEtherToken is IERC20 {\r\n\r\n    function deposit()\r\n        external payable;\r\n\r\n    function withdraw(uint256 amount)\r\n        external;\r\n}\r\n\r\n// File: contracts/interface/IOasisExchange.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IOasisExchange {\r\n\r\n    function getBuyAmount(IERC20 buyGem, IERC20 payGem, uint256 payAmt)\r\n        external view returns(uint256 fillAmt);\r\n\r\n    function sellAllAmount(IERC20 payGem, uint payAmt, IERC20 buyGem, uint256 minFillAmount)\r\n        external returns(uint256 fillAmt);\r\n}\r\n\r\n// File: contracts/interface/ICompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ICompound {\r\n    function markets(address cToken)\r\n        external\r\n        view\r\n        returns(bool isListed, uint256 collateralFactorMantissa);\r\n}\r\n\r\n\r\ncontract ICompoundToken is IERC20 {\r\n    function underlying() external view returns(address);\r\n    function exchangeRateStored() external view returns(uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns(uint256);\r\n    function redeem(uint256 redeemTokens) external returns(uint256);\r\n}\r\n\r\n\r\ncontract ICompoundEther is IERC20 {\r\n    function mint() external payable;\r\n    function redeem(uint256 redeemTokens) external returns(uint256);\r\n}\r\n\r\n// File: contracts/interface/IFulcrum.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IFulcrumToken is IERC20 {\r\n\r\n    function tokenPrice() external view returns(uint256);\r\n    function loanTokenAddress() external view returns(address);\r\n\r\n    function mintWithEther(address receiver)\r\n        external payable returns (uint256 mintAmount);\r\n\r\n    function mint(address receiver, uint256 depositAmount)\r\n        external returns (uint256 mintAmount);\r\n\r\n    function burnToEther(address receiver, uint256 burnAmount)\r\n        external returns (uint256 loanAmountPaid);\r\n\r\n    function burn(address receiver, uint256 burnAmount)\r\n        external returns (uint256 loanAmountPaid);\r\n}\r\n\r\n// File: contracts/interface/IWETH.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IWETH is IERC20 {\r\n\r\n    function deposit()\r\n        external payable;\r\n\r\n    function withdraw(uint256 amount)\r\n        external;\r\n}\r\n\r\n// File: contracts/interface/IChai.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IPot {\r\n    function dsr() external view returns (uint256);\r\n    function chi() external view returns (uint256);\r\n    function rho() external view returns (uint256);\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n\r\ncontract IChai is IERC20 {\r\n\r\n    function POT() public view returns(IPot);\r\n\r\n    function join(address dst, uint wad) external;\r\n\r\n    function exit(address src, uint wad) external;\r\n}\r\n\r\n\r\nlibrary ChaiHelper {\r\n\r\n    IPot private constant POT = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\r\n    uint256 private constant RAY = 10 ** 27;\r\n\r\n    function _mul(uint x, uint y) private pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function _rmul(uint x, uint y) private pure returns (uint z) {\r\n        // always rounds down\r\n        z = _mul(x, y) / RAY;\r\n    }\r\n\r\n    function _rdiv(uint x, uint y) private pure returns (uint z) {\r\n        // always rounds down\r\n        z = _mul(x, RAY) / y;\r\n    }\r\n\r\n    function rpow(uint x, uint n, uint base) private pure returns (uint z) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function potDrip() private view returns(uint256) {\r\n        return _rmul(rpow(POT.dsr(), now - POT.rho(), RAY), POT.chi());\r\n    }\r\n\r\n    function daiToChai(IChai /*chai*/, uint256 amount) internal view returns(uint256) {\r\n        uint chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rdiv(amount, chi);\r\n    }\r\n\r\n    function chaiToDai(IChai /*chai*/, uint256 amount) internal view returns(uint256) {\r\n        uint chi = (now > POT.rho()) ? potDrip() : POT.chi();\r\n        return _rmul(chi, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IAaveToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface IAaveToken {\r\n\r\n    function underlyingAssetAddress() external view returns(IERC20);\r\n\r\n    function redeem(uint256 amount) external;\r\n}\r\n\r\ninterface IAaveLendingPool {\r\n\r\n    function underlyingAssetAddress() external view returns(IERC20);\r\n\r\n    function deposit(IERC20 token, uint256 amount, uint16 refCode) external payable;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall.gas(5000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return success ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n}\r\n\r\n// File: contracts/OneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary DisableFlags {\r\n    function enabled(uint256 disableFlags, uint256 flag) internal pure returns(bool) {\r\n        return (disableFlags & flag) == 0;\r\n    }\r\n\r\n    function disabled(uint256 disableFlags, uint256 flag) internal pure returns(bool) {\r\n        return (disableFlags & flag) != 0;\r\n    }\r\n}\r\n\r\n\r\ncontract OneSplit {\r\n\r\n    using SafeMath for uint256;\r\n    using DisableFlags for uint256;\r\n    using ChaiHelper for IChai;\r\n    using UniversalERC20 for IERC20;\r\n    using UniversalERC20 for IWETH;\r\n    using UniversalERC20 for IBancorEtherToken;\r\n\r\n    //\r\n    // disableFlags = FLAG_UNISWAP + FLAG_KYBER + ...\r\n    //\r\n    uint256 constant public FLAG_UNISWAP = 0x01;\r\n    uint256 constant public FLAG_KYBER = 0x02;\r\n    uint256 constant public FLAG_BANCOR = 0x04;\r\n    uint256 constant public FLAG_OASIS = 0x08;\r\n    uint256 constant public FLAG_COMPOUND = 0x10;\r\n    uint256 constant public FLAG_FULCRUM = 0x20;\r\n    uint256 constant public FLAG_CHAI = 0x40;\r\n    uint256 constant public FLAG_AAVE = 0x80;\r\n\r\n    IERC20 constant public ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    IWETH wethToken = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IBancorEtherToken bancorEtherToken = IBancorEtherToken(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\r\n\r\n    ICompound public compound = ICompound(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n    ICompoundEther public cETH = ICompoundEther(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n\r\n    IERC20 public dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    IChai public chai = IChai(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n    IAaveLendingPool public aave = IAaveLendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n\r\n    IKyberNetworkProxy public kyberNetworkProxy = IKyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    IUniswapFactory public uniswapFactory = IUniswapFactory(0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95);\r\n    IBancorContractRegistry public bancorContractRegistry = IBancorContractRegistry(0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4);\r\n    IBancorNetworkPathFinder bancorNetworkPathFinder = IBancorNetworkPathFinder(0x6F0cD8C4f6F06eAB664C7E3031909452b4B72861);\r\n    IOasisExchange public oasisExchange = IOasisExchange(0x39755357759cE0d7f32dC8dC45414CCa409AE24e);\r\n\r\n    function() external payable {\r\n        // solium-disable-next-line security/no-tx-origin\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function log(uint256) external view {\r\n    }\r\n\r\n    function getAllRatesForDEX(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    ) public view returns(uint256[] memory results) {\r\n        results = new uint256[](parts);\r\n        for (uint i = 0; i < parts; i++) {\r\n            (results[i],) = getExpectedReturn(\r\n                fromToken,\r\n                toToken,\r\n                amount.mul(i + 1).div(parts),\r\n                1,\r\n                disableFlags\r\n            );\r\n        }\r\n    }\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\r\n        )\r\n    {\r\n        distribution = new uint256[](4);\r\n\r\n        if (fromToken == toToken) {\r\n            returnAmount = amount;\r\n            return (returnAmount, distribution);\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_COMPOUND)) {\r\n            if (_isCompoundToken(fromToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(fromToken);\r\n                if (underlying != IERC20(-1)) {\r\n                    uint256 compoundRate = ICompoundToken(address(fromToken)).exchangeRateStored();\r\n\r\n                    return getExpectedReturn(\r\n                        underlying,\r\n                        toToken,\r\n                        amount.mul(compoundRate).div(1e18),\r\n                        parts,\r\n                        disableFlags\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (_isCompoundToken(toToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(toToken);\r\n                if (underlying != IERC20(-1)) {\r\n                    uint256 compoundRate = ICompoundToken(address(toToken)).exchangeRateStored();\r\n\r\n                    (returnAmount, distribution) = getExpectedReturn(\r\n                        fromToken,\r\n                        underlying,\r\n                        amount,\r\n                        parts,\r\n                        disableFlags\r\n                    );\r\n\r\n                    returnAmount = returnAmount.mul(1e18).div(compoundRate);\r\n                    return (returnAmount, distribution);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 fulcrumRate = IFulcrumToken(address(fromToken)).tokenPrice();\r\n\r\n                return getExpectedReturn(\r\n                    underlying,\r\n                    toToken,\r\n                    amount.mul(fulcrumRate).div(1e18),\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isFulcrumToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                uint256 fulcrumRate = IFulcrumToken(address(toToken)).tokenPrice();\r\n\r\n                (returnAmount, distribution) = getExpectedReturn(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n\r\n                returnAmount = returnAmount.mul(1e18).div(fulcrumRate);\r\n                return (returnAmount, distribution);\r\n            }\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                return getExpectedReturn(\r\n                    dai,\r\n                    toToken,\r\n                    chai.chaiToDai(amount),\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (toToken == IERC20(chai)) {\r\n                (returnAmount, distribution) = getExpectedReturn(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n                return (chai.daiToChai(returnAmount), distribution);\r\n            }\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_AAVE)) {\r\n            IERC20 underlying = _isAaveToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                return getExpectedReturn(\r\n                    underlying,\r\n                    toToken,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isAaveToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                return getExpectedReturn(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    parts,\r\n                    disableFlags\r\n                );\r\n            }\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256) view returns(uint256)[4] memory reserves = [\r\n            disableFlags.disabled(FLAG_UNISWAP) ? _calculateNoReturn : calculateUniswapReturn,\r\n            disableFlags.disabled(FLAG_KYBER)   ? _calculateNoReturn : calculateKyberReturn,\r\n            disableFlags.disabled(FLAG_BANCOR)  ? _calculateNoReturn : calculateBancorReturn,\r\n            disableFlags.disabled(FLAG_OASIS)   ? _calculateNoReturn : calculateOasisReturn\r\n        ];\r\n\r\n        uint256[4] memory rates;\r\n        uint256[4] memory fullRates;\r\n        for (uint i = 0; i < rates.length; i++) {\r\n            rates[i] = reserves[i](fromToken, toToken, amount.div(parts));\r\n            this.log(rates[i]);\r\n            fullRates[i] = rates[i];\r\n        }\r\n\r\n        for (uint j = 0; j < parts; j++) {\r\n            // Find best part\r\n            uint256 bestIndex = 0;\r\n            for (uint i = 1; i < rates.length; i++) {\r\n                if (rates[i] > rates[bestIndex]) {\r\n                    bestIndex = i;\r\n                }\r\n            }\r\n\r\n            // Add best part\r\n            returnAmount = returnAmount.add(rates[bestIndex]);\r\n            distribution[bestIndex]++;\r\n\r\n            // Avoid CompilerError: Stack too deep\r\n            uint256 srcAmount = amount;\r\n\r\n            // Recalc part if needed\r\n            if (j + 1 < parts) {\r\n                uint256 newRate = reserves[bestIndex](\r\n                    fromToken,\r\n                    toToken,\r\n                    srcAmount.mul(distribution[bestIndex] + 1).div(parts)\r\n                );\r\n                rates[bestIndex] = newRate.sub(fullRates[bestIndex]);\r\n                this.log(rates[bestIndex]);\r\n                fullRates[bestIndex] = newRate;\r\n            }\r\n        }\r\n    }\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum\r\n    ) public payable {\r\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _swap(fromToken, toToken, amount, distribution, disableFlags);\r\n\r\n        uint256 returnAmount = toToken.universalBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"OneSplit: actual return amount is less than minReturn\");\r\n        toToken.universalTransfer(msg.sender, returnAmount);\r\n        fromToken.universalTransfer(msg.sender, fromToken.universalBalanceOf(address(this)));\r\n    }\r\n\r\n    function _swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound\r\n    ) internal {\r\n        if (fromToken == toToken) {\r\n            return;\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_COMPOUND)) {\r\n            if (_isCompoundToken(fromToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(fromToken);\r\n\r\n                ICompoundToken(address(fromToken)).redeem(amount);\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return _swap(\r\n                    underlying,\r\n                    toToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (_isCompoundToken(toToken)) {\r\n                IERC20 underlying = _compoundUnderlyingAsset(toToken);\r\n\r\n                _swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    cETH.mint.value(underlyingAmount)();\r\n                } else {\r\n                    _infiniteApproveIfNeeded(underlying, address(toToken));\r\n                    ICompoundToken(address(toToken)).mint(underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_FULCRUM)) {\r\n            IERC20 underlying = _isFulcrumToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(fromToken)).burnToEther(address(this), amount);\r\n                } else {\r\n                    IFulcrumToken(address(fromToken)).burn(address(this), amount);\r\n                }\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                return _swap(\r\n                    underlying,\r\n                    toToken,\r\n                    underlyingAmount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isFulcrumToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                _swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                if (underlying.isETH()) {\r\n                    IFulcrumToken(address(toToken)).mintWithEther.value(underlyingAmount)(address(this));\r\n                } else {\r\n                    _infiniteApproveIfNeeded(underlying, address(toToken));\r\n                    IFulcrumToken(address(toToken)).mint(address(this), underlyingAmount);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_CHAI)) {\r\n            if (fromToken == IERC20(chai)) {\r\n                chai.exit(address(this), amount);\r\n\r\n                return _swap(\r\n                    dai,\r\n                    toToken,\r\n                    dai.balanceOf(address(this)),\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            if (toToken == IERC20(chai)) {\r\n                _swap(\r\n                    fromToken,\r\n                    dai,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                _infiniteApproveIfNeeded(dai, address(chai));\r\n                chai.join(address(this), dai.balanceOf(address(this)));\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (disableFlags.enabled(FLAG_AAVE)) {\r\n            IERC20 underlying = _isAaveToken(fromToken);\r\n            if (underlying != IERC20(-1)) {\r\n                IAaveToken(address(fromToken)).redeem(amount);\r\n\r\n                return _swap(\r\n                    underlying,\r\n                    toToken,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n            }\r\n\r\n            underlying = _isAaveToken(toToken);\r\n            if (underlying != IERC20(-1)) {\r\n                _swap(\r\n                    fromToken,\r\n                    underlying,\r\n                    amount,\r\n                    distribution,\r\n                    disableFlags\r\n                );\r\n\r\n                uint256 underlyingAmount = underlying.universalBalanceOf(address(this));\r\n\r\n                _infiniteApproveIfNeeded(underlying, address(aave));\r\n                aave.deposit.value(underlying.isETH() ? underlyingAmount : 0)(\r\n                    underlying.isETH() ? ETH_ADDRESS : underlying,\r\n                    underlyingAmount,\r\n                    1101\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        function(IERC20,IERC20,uint256) returns(uint256)[4] memory reserves = [\r\n            _swapOnUniswap,\r\n            _swapOnKyber,\r\n            _swapOnBancor,\r\n            _swapOnOasis\r\n        ];\r\n\r\n        uint256 parts = 0;\r\n        uint256 lastNonZeroIndex = 0;\r\n        for (uint i = 0; i < reserves.length; i++) {\r\n            if (distribution[i] > 0) {\r\n                parts = parts.add(distribution[i]);\r\n                lastNonZeroIndex = i;\r\n            }\r\n        }\r\n\r\n        require(parts > 0, \"OneSplit: distribution should contain non-zeros\");\r\n\r\n        uint256 remainingAmount = amount;\r\n        for (uint i = 0; i < reserves.length; i++) {\r\n            if (distribution[i] == 0) {\r\n                continue;\r\n            }\r\n\r\n            uint256 swapAmount = amount.mul(distribution[i]).div(parts);\r\n            if (i == lastNonZeroIndex) {\r\n                swapAmount = remainingAmount;\r\n            }\r\n            remainingAmount -= swapAmount;\r\n            reserves[i](fromToken, toToken, swapAmount);\r\n        }\r\n    }\r\n\r\n    function goodSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum\r\n    ) public payable {\r\n        (, uint256[] memory distribution) = getExpectedReturn(fromToken, toToken, amount, parts, disableFlags);\r\n        swap(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            minReturn,\r\n            distribution,\r\n            disableFlags\r\n        );\r\n    }\r\n\r\n    // View Helpers\r\n\r\n    function calculateUniswapReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) public view returns(uint256) {\r\n        uint256 returnAmount = amount;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange != IUniswapExchange(0)) {\r\n                (bool success, bytes memory data) = address(fromExchange).staticcall.gas(200000)(\r\n                    abi.encodeWithSelector(\r\n                        fromExchange.getTokenToEthInputPrice.selector,\r\n                        returnAmount\r\n                    )\r\n                );\r\n                if (success) {\r\n                    returnAmount = abi.decode(data, (uint256));\r\n                } else {\r\n                    returnAmount = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!toToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(toToken);\r\n            if (toExchange != IUniswapExchange(0)) {\r\n                (bool success, bytes memory data) = address(toExchange).staticcall.gas(200000)(\r\n                    abi.encodeWithSelector(\r\n                        toExchange.getEthToTokenInputPrice.selector,\r\n                        returnAmount\r\n                    )\r\n                );\r\n                if (success) {\r\n                    returnAmount = abi.decode(data, (uint256));\r\n                } else {\r\n                    returnAmount = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function calculateKyberReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) public view returns(uint256) {\r\n        (bool success, bytes memory data) = address(kyberNetworkProxy).staticcall.gas(2300)(abi.encodeWithSelector(\r\n            kyberNetworkProxy.kyberNetworkContract.selector\r\n        ));\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        IKyberNetworkContract kyberNetworkContract = IKyberNetworkContract(abi.decode(data, (address)));\r\n\r\n        if (fromToken.isETH() || toToken.isETH()) {\r\n            return _calculateKyberReturnWithEth(kyberNetworkContract, fromToken, toToken, amount);\r\n        }\r\n\r\n        uint256 value = _calculateKyberReturnWithEth(kyberNetworkContract, fromToken, ETH_ADDRESS, amount);\r\n        if (value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _calculateKyberReturnWithEth(kyberNetworkContract, ETH_ADDRESS, toToken, value);\r\n    }\r\n\r\n    function _calculateKyberReturnWithEth(\r\n        IKyberNetworkContract kyberNetworkContract,\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) public view returns(uint256) {\r\n        (bool success, bytes memory data) = address(kyberNetworkContract).staticcall.gas(200000)(abi.encodeWithSelector(\r\n            kyberNetworkContract.searchBestRate.selector,\r\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n            toToken.isETH() ? ETH_ADDRESS : toToken,\r\n            amount,\r\n            true\r\n        ));\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        (address reserve, uint256 rate) = abi.decode(data, (address,uint256));\r\n\r\n        if (reserve == 0x54A4a1167B004b004520c605E3f01906f683413d || // Uniswap\r\n            reserve == 0xCf1394C5e2e879969fdB1f464cE1487147863dCb || // Oasis\r\n            reserve == 0x053AA84FCC676113a57e0EbB0bD1913839874bE4)   // Bancor\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        // Check for Uniswap reserve\r\n        (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n            IKyberUniswapReserve(reserve).uniswapFactory.selector\r\n        ));\r\n        if (success) {\r\n            return 0;\r\n        }\r\n\r\n        // Check for Oasis reserve\r\n        (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n            IKyberOasisReserve(reserve).otc.selector\r\n        ));\r\n        if (success) {\r\n            return 0;\r\n        }\r\n\r\n        // Check for Bancor reserve\r\n        (success,) = reserve.staticcall.gas(2300)(abi.encodeWithSelector(\r\n            IKyberBancorReserve(reserve).bancorEth.selector\r\n        ));\r\n        if (success) {\r\n            return 0;\r\n        }\r\n\r\n        return rate.mul(amount)\r\n            .mul(10 ** IERC20(toToken).universalDecimals())\r\n            .div(10 ** IERC20(fromToken).universalDecimals())\r\n            .div(1e18);\r\n    }\r\n\r\n    function calculateBancorReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) public view returns(uint256) {\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = bancorNetworkPathFinder.generatePath(\r\n            fromToken.isETH() ? bancorEtherToken : fromToken,\r\n            toToken.isETH() ? bancorEtherToken : toToken\r\n        );\r\n\r\n        (bool success, bytes memory data) = address(bancorNetwork).staticcall.gas(200000)(\r\n            abi.encodeWithSelector(\r\n                bancorNetwork.getReturnByPath.selector,\r\n                path,\r\n                amount\r\n            )\r\n        );\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        (uint256 returnAmount,) = abi.decode(data, (uint256,uint256));\r\n        return returnAmount;\r\n    }\r\n\r\n    function calculateOasisReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) public view returns(uint256) {\r\n        (bool success, bytes memory data) = address(oasisExchange).staticcall.gas(500000)(\r\n            abi.encodeWithSelector(\r\n                oasisExchange.getBuyAmount.selector,\r\n                toToken.isETH() ? wethToken : toToken,\r\n                fromToken.isETH() ? wethToken : fromToken,\r\n                amount\r\n            )\r\n        );\r\n        if (!success) {\r\n            return 0;\r\n        }\r\n\r\n        return abi.decode(data, (uint256));\r\n    }\r\n\r\n    function _calculateNoReturn(\r\n        IERC20 /*fromToken*/,\r\n        IERC20 /*toToken*/,\r\n        uint256 /*amount*/\r\n    ) internal view returns(uint256) {\r\n        this;\r\n    }\r\n\r\n    // Swap Helpers\r\n\r\n    function _swapOnUniswap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n\r\n        uint256 returnAmount = amount;\r\n\r\n        if (!fromToken.isETH()) {\r\n            IUniswapExchange fromExchange = uniswapFactory.getExchange(fromToken);\r\n            if (fromExchange != IUniswapExchange(0)) {\r\n                _infiniteApproveIfNeeded(fromToken, address(fromExchange));\r\n                returnAmount = fromExchange.tokenToEthSwapInput(returnAmount, 1, now);\r\n            }\r\n        }\r\n\r\n        if (!toToken.isETH()) {\r\n            IUniswapExchange toExchange = uniswapFactory.getExchange(toToken);\r\n            if (toExchange != IUniswapExchange(0)) {\r\n                returnAmount = toExchange.ethToTokenSwapInput.value(returnAmount)(1, now);\r\n            }\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function _swapOnKyber(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        _infiniteApproveIfNeeded(fromToken, address(kyberNetworkProxy));\r\n        return kyberNetworkProxy.tradeWithHint.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken.isETH() ? ETH_ADDRESS : fromToken,\r\n            amount,\r\n            toToken.isETH() ? ETH_ADDRESS : toToken,\r\n            address(this),\r\n            1 << 255,\r\n            0,\r\n            0x4D37f28D2db99e8d35A6C725a5f1749A085850a3,\r\n            \"\"\r\n        );\r\n    }\r\n\r\n    function _swapOnBancor(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken.isETH()) {\r\n            bancorEtherToken.deposit.value(amount)();\r\n        }\r\n\r\n        IBancorNetwork bancorNetwork = IBancorNetwork(bancorContractRegistry.addressOf(\"BancorNetwork\"));\r\n        address[] memory path = bancorNetworkPathFinder.generatePath(\r\n            fromToken.isETH() ? bancorEtherToken : fromToken,\r\n            toToken.isETH() ? bancorEtherToken : toToken\r\n        );\r\n\r\n        _infiniteApproveIfNeeded(fromToken.isETH() ? bancorEtherToken : fromToken, address(bancorNetwork));\r\n        uint256 returnAmount = bancorNetwork.claimAndConvert(path, amount, 1);\r\n\r\n        if (toToken.isETH()) {\r\n            bancorEtherToken.withdraw(bancorEtherToken.balanceOf(address(this)));\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    function _swapOnOasis(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount\r\n    ) internal returns(uint256) {\r\n        if (fromToken.isETH()) {\r\n            wethToken.deposit.value(amount)();\r\n        }\r\n\r\n        _infiniteApproveIfNeeded(fromToken.isETH() ? wethToken : fromToken, address(oasisExchange));\r\n        uint256 returnAmount = oasisExchange.sellAllAmount(\r\n            fromToken.isETH() ? wethToken : fromToken,\r\n            amount,\r\n            toToken.isETH() ? wethToken : toToken,\r\n            1\r\n        );\r\n\r\n        if (toToken.isETH()) {\r\n            wethToken.withdraw(wethToken.balanceOf(address(this)));\r\n        }\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    // Helpers\r\n\r\n    function _infiniteApproveIfNeeded(IERC20 token, address to) internal {\r\n        if (!token.isETH()) {\r\n            if ((token.allowance(address(this), to) >> 255) == 0) {\r\n                token.universalApprove(to, uint256(- 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isCompoundToken(IERC20 token) internal view returns(bool) {\r\n        if (token == cETH) {\r\n            return true;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(compound).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            compound.markets.selector,\r\n            token\r\n        ));\r\n        if (!success) {\r\n            return false;\r\n        }\r\n\r\n        (bool isListed,) = abi.decode(data, (bool,uint256));\r\n        return isListed;\r\n    }\r\n\r\n    function _compoundUnderlyingAsset(IERC20 asset) internal view returns(IERC20) {\r\n        if (asset == cETH) {\r\n            return IERC20(address(0));\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(asset).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            ICompoundToken(address(asset)).underlying.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n\r\n    function _isFulcrumToken(IERC20 token) public view returns(IERC20) {\r\n        if (token.isETH()) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            ERC20Detailed(address(token)).name.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        bool foundBZX = false;\r\n        for (uint i = 0; i < data.length - 7; i++) {\r\n            if (data[i + 0] == \"F\" &&\r\n                data[i + 1] == \"u\" &&\r\n                data[i + 2] == \"l\" &&\r\n                data[i + 3] == \"c\" &&\r\n                data[i + 4] == \"r\" &&\r\n                data[i + 5] == \"u\" &&\r\n                data[i + 6] == \"m\")\r\n            {\r\n                foundBZX = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundBZX) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            IFulcrumToken(address(token)).loanTokenAddress.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n\r\n    function _isAaveToken(IERC20 token) public view returns(IERC20) {\r\n        if (token.isETH()) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            ERC20Detailed(address(token)).name.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        bool foundAave = false;\r\n        for (uint i = 0; i < data.length - 4; i++) {\r\n            if (data[i + 0] == \"A\" &&\r\n                data[i + 1] == \"a\" &&\r\n                data[i + 2] == \"v\" &&\r\n                data[i + 3] == \"e\")\r\n            {\r\n                foundAave = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundAave) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        (success, data) = address(token).staticcall.gas(5000)(abi.encodeWithSelector(\r\n            IAaveToken(address(token)).underlyingAssetAddress.selector\r\n        ));\r\n        if (!success) {\r\n            return IERC20(-1);\r\n        }\r\n\r\n        return abi.decode(data, (IERC20));\r\n    }\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_AAVE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_BANCOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_CHAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_FULCRUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_KYBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_OASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FLAG_UNISWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IKyberNetworkContract\",\"name\":\"kyberNetworkContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_calculateKyberReturnWithEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_isAaveToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_isFulcrumToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aave\",\"outputs\":[{\"internalType\":\"contract IAaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorContractRegistry\",\"outputs\":[{\"internalType\":\"contract IBancorContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cETH\",\"outputs\":[{\"internalType\":\"contract ICompoundEther\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateBancorReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateKyberReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateOasisReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateUniswapReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chai\",\"outputs\":[{\"internalType\":\"contract IChai\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"contract ICompound\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"getAllRatesForDEX\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"results\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"goodSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxy\",\"outputs\":[{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oasisExchange\",\"outputs\":[{\"internalType\":\"contract IOasisExchange\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableFlags\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OneSplit","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://14963a139889871cc6595a913217f0c92949011a394507b6ebd6b9cbb1bc998d"}]}