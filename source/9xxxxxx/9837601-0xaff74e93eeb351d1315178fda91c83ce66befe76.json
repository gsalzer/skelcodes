{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDAIProxy.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IDAIProxy {\r\n    function fund(address loanAddress, uint256 fundingAmount) external;\r\n    function repay(address loanAddress, uint256 repaymentAmount) external;\r\n}\r\n\r\n// File: contracts/interfaces/ILoanContract.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface ILoanContract {\r\n    function onFundingReceived(address lender, uint256 amount) external returns (bool);\r\n    function withdrawRepayment() external;\r\n    function withdrawRepaymentAndDeposit() external;\r\n    function withdrawLoan() external;\r\n    function onRepaymentReceived(address from, uint256 amount) external returns (bool);\r\n    function getInterestRate() external view returns (uint256);\r\n    function calculateValueWithInterest(uint256 value) external view returns (uint256);\r\n    function getMaxAmount() external view returns (uint256);\r\n    function getAuctionBalance() external view returns (uint256);\r\n    function getTokenAddress() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/ISwapAndDeposit.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ninterface ISwapAndDeposit {\r\n    event SwapDeposit(address loan, address guy);\r\n\r\n    function init(address _depositAddress, address _factoryAddress) external returns (bool);\r\n\r\n    function isDestroyed() external view returns (bool);\r\n\r\n    function swapAndDeposit(\r\n        address payable depositor,\r\n        address inputTokenAddress,\r\n        uint256 inputTokenAmount\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/ISwapAndDepositFactory.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface ISwapAndDepositFactory {\r\n    event SwapContract(address newSwap);\r\n\r\n    function setAuthAddress(address _authAddress) external;\r\n\r\n    function setUniswapAddress(address _uniswapAddress) external;\r\n\r\n    function setLibraryAddress(address _libraryAddress) external;\r\n\r\n    function deploy() external returns (address proxyAddress);\r\n}\r\n\r\n// File: contracts/libs/ERC20Wrapper.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IERC20Wrapper {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _quantity) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _quantity) external returns (bool);\r\n    function approve(address _spender, uint256 _quantity) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\nlibrary ERC20Wrapper {\r\n    function balanceOf(address _token, address _owner) external view returns (uint256) {\r\n        return IERC20Wrapper(_token).balanceOf(_owner);\r\n    }\r\n\r\n    function allowance(address _token, address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20Wrapper(_token).allowance(owner, spender);\r\n    }\r\n\r\n    function transfer(address _token, address _to, uint256 _quantity) external returns (bool) {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).transfer(_to, _quantity);\r\n\r\n            require(checkSuccess(), \"ERC20Wrapper.transfer: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).transfer(_to, _quantity);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _token, address _from, address _to, uint256 _quantity)\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).transferFrom(_from, _to, _quantity);\r\n            // Check that transferFrom returns true or null\r\n            require(checkSuccess(), \"ERC20Wrapper.transferFrom: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).transferFrom(_from, _to, _quantity);\r\n        }\r\n    }\r\n\r\n    function approve(address _token, address _spender, uint256 _quantity) external returns (bool) {\r\n        if (isIssuedToken(_token)) {\r\n            IERC20Wrapper(_token).approve(_spender, _quantity);\r\n            // Check that approve returns true or null\r\n            require(checkSuccess(), \"ERC20Wrapper.approve: Bad return value\");\r\n            return true;\r\n        } else {\r\n            return IERC20Wrapper(_token).approve(_spender, _quantity);\r\n        }\r\n    }\r\n\r\n    function isIssuedToken(address _token) private view returns (bool) {\r\n        return (keccak256(abi.encodePacked((IERC20Wrapper(_token).symbol()))) ==\r\n            keccak256(abi.encodePacked((\"USDT\"))));\r\n    }\r\n\r\n    // ============ Private Functions ============\r\n\r\n    /**\r\n     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\r\n     * function returned 0 bytes or 1.\r\n     */\r\n    function checkSuccess() private pure returns (bool) {\r\n        // default to failure\r\n        uint256 returnValue = 0;\r\n\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n                // no bytes returned: assume success\r\n                case 0x0 {\r\n                    returnValue := 1\r\n                }\r\n                // 32 bytes returned\r\n                case 0x20 {\r\n                    // copy 32 bytes into scratch space\r\n                    returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                    // load those bytes into returnValue\r\n                    returnValue := mload(0x0)\r\n                }\r\n                // not sure what was returned: dont mark as success\r\n                default {\r\n\r\n                }\r\n        }\r\n\r\n        // check if returned value is one or nothing\r\n        return returnValue == 1;\r\n    }\r\n}\r\n\r\n// File: contracts/LoanContract.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LoanContract is ILoanContract {\r\n    using SafeMath for uint256;\r\n    address public swapFactory;\r\n    address public proxyAddress;\r\n    address public tokenAddress;\r\n    address public originator;\r\n    address public administrator;\r\n\r\n    uint256 public minAmount;\r\n    uint256 public maxAmount;\r\n    uint256 public auctionEndTimestamp;\r\n    uint256 public auctionStartTimestamp;\r\n    uint256 public auctionLength;\r\n    uint256 public lastFundedTimestamp;\r\n    uint256 public termEndTimestamp;\r\n    uint256 public termLength;\r\n    uint256 public auctionBalance;\r\n    uint256 public loanWithdrawnAmount;\r\n    uint256 public borrowerDebt;\r\n    uint256 public minInterestRate;\r\n    uint256 public maxInterestRate;\r\n    uint256 public operatorFee;\r\n    uint256 public operatorBalance;\r\n    uint256 constant MONTH_SECONDS = 2592000;\r\n    uint256 constant ONE_HUNDRED = 100000000000000000000;\r\n\r\n    struct Position {\r\n        uint256 bidAmount;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping(address => Position) public lenderPosition;\r\n\r\n    enum LoanState {\r\n        CREATED, // accepts bids until timelimit initial state\r\n        FAILED_TO_FUND, // not fully funded in timelimit\r\n        ACTIVE, // fully funded, inside timelimit\r\n        DEFAULTED, // not repaid in time loanRepaymentLength\r\n        REPAID, // the borrower repaid in full, lenders have yet to reclaim funds\r\n        CLOSED, // from failed_to_fund => last lender to withdraw triggers change / from repaid => fully witdrawn by lenders\r\n        FROZEN // when admin unlocks withdrawals\r\n    }\r\n\r\n    LoanState public currentState;\r\n\r\n    bool public loanWithdrawn;\r\n    bool public minimumReached;\r\n\r\n    event LoanCreated(\r\n        address indexed contractAddr,\r\n        address indexed originator,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 minInterestRate,\r\n        uint256 maxInterestRate,\r\n        uint256 auctionStartTimestamp,\r\n        uint256 auctionEndTimestamp,\r\n        address indexed administrator,\r\n        uint256 operatorFee,\r\n        address tokenAddress\r\n    );\r\n\r\n    event MinimumFundingReached(address loanAddress, uint256 currentBalance, uint256 interest);\r\n    event FullyFunded(\r\n        address loanAddress,\r\n        uint256 balanceToRepay,\r\n        uint256 auctionBalance,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event Funded(\r\n        address loanAddress,\r\n        address indexed lender,\r\n        uint256 amount,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event LoanRepaid(address loanAddress, uint256 indexed timestampRepaid);\r\n    event RepaymentWithdrawn(address loanAddress, address indexed to, uint256 amount);\r\n    event RefundWithdrawn(address loanAddress, address indexed lender, uint256 amount);\r\n    event FullyRefunded(address loanAddress);\r\n    event FailedToFund(address loanAddress, address indexed lender, uint256 amount);\r\n    event LoanFundsWithdrawn(address loanAddress, address indexed borrower, uint256 amount);\r\n    event LoanDefaulted(address loanAddress);\r\n    event AuctionSuccessful(\r\n        address loanAddress,\r\n        uint256 balanceToRepay,\r\n        uint256 auctionBalance,\r\n        uint256 operatorBalance,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event FundsUnlockedWithdrawn(address loanAddress, address indexed lender, uint256 amount);\r\n    event FullyFundsUnlockedWithdrawn(address loanAddress);\r\n    event LoanFundsUnlocked(uint256 auctionBalance);\r\n    event OperatorWithdrawn(uint256 amount, address administrator);\r\n    event DaiProxyAddressUpdated(\r\n        address newDaiProxyAddress,\r\n        address administrator,\r\n        address loanDispatcher\r\n    );\r\n\r\n    modifier onlyFrozen() {\r\n        require(currentState == LoanState.FROZEN, \"Loan status is not FROZEN\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == administrator, \"Caller is not an administrator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreated() {\r\n        require(currentState == LoanState.CREATED, \"Loan status is not CREATED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.ACTIVE, \"Loan status is not ACTIVE\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRepaid() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.REPAID, \"Loan status is not REPAID\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFailedToFund() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.FAILED_TO_FUND, \"Loan status is not FAILED_TO_FUND\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(msg.sender == address(proxyAddress), \"Caller is not the proxy\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOriginator() {\r\n        require(msg.sender == originator, \"Caller is not the originator\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _termLength,\r\n        uint256 _minAmount,\r\n        uint256 _maxAmount,\r\n        uint256 _minInterestRate,\r\n        uint256 _maxInterestRate,\r\n        address _originator,\r\n        address _tokenAddress,\r\n        address _proxyAddress,\r\n        address _administrator,\r\n        uint256 _operatorFee,\r\n        uint256 _auctionLength,\r\n        address _swapFactory\r\n    ) public {\r\n        tokenAddress = _tokenAddress;\r\n        proxyAddress = _proxyAddress;\r\n        originator = _originator;\r\n        administrator = _administrator;\r\n        swapFactory = _swapFactory;\r\n\r\n        minInterestRate = _minInterestRate;\r\n        maxInterestRate = _maxInterestRate;\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n\r\n        auctionLength = _auctionLength;\r\n        auctionStartTimestamp = block.timestamp;\r\n        auctionEndTimestamp = auctionStartTimestamp + auctionLength;\r\n\r\n        termLength = _termLength;\r\n\r\n        loanWithdrawnAmount = 0;\r\n\r\n        operatorFee = _operatorFee;\r\n\r\n        setState(LoanState.CREATED);\r\n        emit LoanCreated(\r\n            address(this),\r\n            originator,\r\n            minAmount,\r\n            maxAmount,\r\n            minInterestRate,\r\n            maxInterestRate,\r\n            auctionStartTimestamp,\r\n            auctionEndTimestamp,\r\n            administrator,\r\n            operatorFee,\r\n            tokenAddress\r\n        );\r\n    }\r\n\r\n    function getMaxAmount() external view returns (uint256) {\r\n        return maxAmount;\r\n    }\r\n\r\n    function getAuctionBalance() external view returns (uint256) {\r\n        return auctionBalance;\r\n    }\r\n\r\n    function getLenderBidAmount(address lender) external view returns (uint256) {\r\n        return lenderPosition[lender].bidAmount;\r\n    }\r\n\r\n    function getLenderWithdrawn(address lender) external view returns (bool) {\r\n        return lenderPosition[lender].withdrawn;\r\n    }\r\n\r\n    function getTokenAddress() external view returns (address) {\r\n        return tokenAddress;\r\n    }\r\n\r\n    // Notes:\r\n    // - This function does not track if real IERC20 balance has changed. Needs to blindly \"trust\" DaiProxy.\r\n    function onFundingReceived(address lender, uint256 amount)\r\n        external\r\n        onlyCreated\r\n        onlyProxy\r\n        returns (bool)\r\n    {\r\n        if (isAuctionExpired()) {\r\n            if (auctionBalance < minAmount) {\r\n                setState(LoanState.FAILED_TO_FUND);\r\n                emit FailedToFund(address(this), lender, amount);\r\n                return false;\r\n            } else {\r\n                require(setSuccessfulAuction(), \"error while transitioning to successful auction\");\r\n                emit FailedToFund(address(this), lender, amount);\r\n                return false;\r\n            }\r\n        }\r\n        uint256 interest = getInterestRate();\r\n        lenderPosition[lender].bidAmount = lenderPosition[lender].bidAmount.add(amount);\r\n        auctionBalance = auctionBalance.add(amount);\r\n\r\n        lastFundedTimestamp = block.timestamp;\r\n\r\n        if (auctionBalance >= minAmount && !minimumReached) {\r\n            minimumReached = true;\r\n            emit Funded(address(this), lender, amount, interest, lastFundedTimestamp);\r\n            emit MinimumFundingReached(address(this), auctionBalance, interest);\r\n        } else {\r\n            emit Funded(address(this), lender, amount, interest, lastFundedTimestamp);\r\n        }\r\n\r\n        if (auctionBalance == maxAmount) {\r\n            require(setSuccessfulAuction(), \"error while transitioning to successful auction\");\r\n            emit FullyFunded(\r\n                address(this),\r\n                borrowerDebt,\r\n                auctionBalance,\r\n                interest,\r\n                lastFundedTimestamp\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function unlockFundsWithdrawal() external onlyAdmin {\r\n        setState(LoanState.FROZEN);\r\n        emit LoanFundsUnlocked(auctionBalance);\r\n    }\r\n\r\n    function withdrawFees() external onlyAdmin returns (bool) {\r\n        require(loanWithdrawn == true, \"borrower didnt withdraw\");\r\n        require(operatorBalance > 0, \"no funds to withdraw\");\r\n        uint256 allFees = operatorBalance;\r\n        operatorBalance = 0;\r\n        require(ERC20Wrapper.transfer(tokenAddress, msg.sender, allFees), \"transfer failed\");\r\n        emit OperatorWithdrawn(allFees, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function withdrawFundsUnlocked() external onlyFrozen {\r\n        require(!loanWithdrawn, \"Loan already withdrawn\");\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount > 0, \"Account did not deposit\");\r\n\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(lenderPosition[msg.sender].bidAmount);\r\n\r\n        require(\r\n            ERC20Wrapper.transfer(tokenAddress, msg.sender, lenderPosition[msg.sender].bidAmount),\r\n            \"error while transfer\"\r\n        );\r\n\r\n        emit FundsUnlockedWithdrawn(\r\n            address(this),\r\n            msg.sender,\r\n            lenderPosition[msg.sender].bidAmount\r\n        );\r\n\r\n        if (loanWithdrawnAmount == auctionBalance.add(operatorBalance)) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyFundsUnlockedWithdrawn(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRefund() external onlyFailedToFund {\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount > 0, \"Account did not deposited.\");\r\n\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(lenderPosition[msg.sender].bidAmount);\r\n\r\n        emit RefundWithdrawn(address(this), msg.sender, lenderPosition[msg.sender].bidAmount);\r\n\r\n        require(\r\n            ERC20Wrapper.transfer(tokenAddress, msg.sender, lenderPosition[msg.sender].bidAmount),\r\n            \"error while transfer\"\r\n        );\r\n\r\n        if (loanWithdrawnAmount == auctionBalance) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRepayment() external onlyRepaid {\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount != 0, \"Account did not deposited\");\r\n        uint256 amount = calculateValueWithInterest(lenderPosition[msg.sender].bidAmount);\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(amount);\r\n        require(ERC20Wrapper.transfer(tokenAddress, msg.sender, amount), \"error while transfer\");\r\n\r\n        emit RepaymentWithdrawn(address(this), msg.sender, amount);\r\n        if (loanWithdrawnAmount == borrowerDebt) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRepaymentAndDeposit() external onlyRepaid {\r\n        require(swapFactory != address(0), \"swap factory is 0\");\r\n        require(!lenderPosition[msg.sender].withdrawn, \"Lender already withdrawn\");\r\n        require(lenderPosition[msg.sender].bidAmount != 0, \"Account did not deposited\");\r\n        uint256 amount = calculateValueWithInterest(lenderPosition[msg.sender].bidAmount);\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(amount);\r\n        address swapAddress = ISwapAndDepositFactory(swapFactory).deploy();\r\n        require(swapAddress != address(0), \"error swap deploy\");\r\n        ERC20Wrapper.approve(tokenAddress, swapAddress, amount);\r\n        ISwapAndDeposit(swapAddress).swapAndDeposit(msg.sender, tokenAddress, amount);\r\n        require(\r\n            ISwapAndDeposit(swapAddress).isDestroyed(),\r\n            \"Swap contract error, should self-destruct\"\r\n        );\r\n        emit RepaymentWithdrawn(address(this), msg.sender, amount);\r\n        if (loanWithdrawnAmount == borrowerDebt) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawLoan() external onlyActive onlyOriginator {\r\n        require(!loanWithdrawn, \"Already withdrawn\");\r\n        loanWithdrawn = true;\r\n        emit LoanFundsWithdrawn(address(this), msg.sender, auctionBalance);\r\n        require(\r\n            ERC20Wrapper.transfer(tokenAddress, msg.sender, auctionBalance),\r\n            \"error while transfer\"\r\n        );\r\n    }\r\n\r\n    function onRepaymentReceived(address from, uint256 amount)\r\n        external\r\n        onlyActive\r\n        onlyProxy\r\n        returns (bool)\r\n    {\r\n        require(from == originator, \"from address is not the originator\");\r\n        require(borrowerDebt == amount, \"Repayment amount is not the same\");\r\n\r\n        setState(LoanState.REPAID);\r\n        emit LoanRepaid(address(this), block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function isAuctionExpired() public view returns (bool) {\r\n        return block.timestamp > auctionEndTimestamp;\r\n    }\r\n\r\n    function isDefaulted() public view returns (bool) {\r\n        if (block.timestamp <= auctionEndTimestamp || block.timestamp <= termEndTimestamp) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateStateMachine() public returns (LoanState) {\r\n        if (isAuctionExpired() && currentState == LoanState.CREATED) {\r\n            if (!minimumReached) {\r\n                setState(LoanState.FAILED_TO_FUND);\r\n            } else {\r\n                require(setSuccessfulAuction(), \"error while transitioning to successful auction\");\r\n            }\r\n        }\r\n        if (isDefaulted() && currentState == LoanState.ACTIVE) {\r\n            setState(LoanState.DEFAULTED);\r\n            emit LoanDefaulted(address(this));\r\n        }\r\n\r\n        return currentState;\r\n    }\r\n\r\n    function calculateValueWithInterest(uint256 value) public view returns (uint256) {\r\n        return\r\n            value.add(\r\n                value.mul(getInterestRate().mul(termLength).div(MONTH_SECONDS)).div(ONE_HUNDRED)\r\n            );\r\n    }\r\n\r\n    function getInterestRate() public view returns (uint256) {\r\n        if (currentState == LoanState.CREATED) {\r\n            return\r\n                (maxInterestRate.sub(minInterestRate))\r\n                    .mul(block.timestamp.sub(auctionStartTimestamp))\r\n                    .div(auctionEndTimestamp.sub(auctionStartTimestamp))\r\n                    .add(minInterestRate);\r\n        } else if (currentState == LoanState.ACTIVE || currentState == LoanState.REPAID) {\r\n            return\r\n                (maxInterestRate.sub(minInterestRate))\r\n                    .mul(lastFundedTimestamp.sub(auctionStartTimestamp))\r\n                    .div(auctionEndTimestamp.sub(auctionStartTimestamp))\r\n                    .add(minInterestRate);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setState(LoanState state) internal {\r\n        currentState = state;\r\n    }\r\n\r\n    function setSuccessfulAuction() internal onlyCreated returns (bool) {\r\n        setState(LoanState.ACTIVE);\r\n        borrowerDebt = calculateValueWithInterest(auctionBalance);\r\n        operatorBalance = auctionBalance.mul(operatorFee).div(ONE_HUNDRED);\r\n        auctionBalance = auctionBalance - operatorBalance;\r\n\r\n        if (block.timestamp < auctionEndTimestamp) {\r\n            termEndTimestamp = block.timestamp.add(termLength);\r\n        } else {\r\n            termEndTimestamp = auctionEndTimestamp.add(termLength);\r\n        }\r\n\r\n        emit AuctionSuccessful(\r\n            address(this),\r\n            borrowerDebt,\r\n            auctionBalance,\r\n            operatorBalance,\r\n            getInterestRate(),\r\n            lastFundedTimestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setProxyAddress(address _proxyAddress) external onlyAdmin {\r\n        proxyAddress = _proxyAddress;\r\n        emit DaiProxyAddressUpdated(_proxyAddress, administrator, address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_termLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_administrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_operatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedTimestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDaiProxyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanDispatcher\",\"type\":\"address\"}],\"name\":\"DaiProxyAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceToRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedTimestamp\",\"type\":\"uint256\"}],\"name\":\"FullyFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"}],\"name\":\"FullyFundsUnlockedWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"}],\"name\":\"FullyRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundedTimestamp\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsUnlockedWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"}],\"name\":\"LoanDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionBalance\",\"type\":\"uint256\"}],\"name\":\"LoanFundsUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoanFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestampRepaid\",\"type\":\"uint256\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"name\":\"MinimumFundingReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"administrator\",\"type\":\"address\"}],\"name\":\"OperatorWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RepaymentWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowerDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateValueWithInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"internalType\":\"enum LoanContract.LoanState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getLenderBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getLenderWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAuctionExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDefaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFundedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lenderPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onFundingReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onRepaymentReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"originator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"name\":\"setProxyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"termEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"termLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockFundsWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateStateMachine\",\"outputs\":[{\"internalType\":\"enum LoanContract.LoanState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFundsUnlocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRepayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRepaymentAndDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LoanContract","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000b90984060d3559800000000000000000000000000000000000000000000000017213080c1a6aacc000000000000000000000000ed9b65514409014aa06ebf4199aaba71af8faea3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000049e78ce9d811d59560827b78910d3fa65fa52ff3000000000000000000000000ed9b65514409014aa06ebf4199aaba71af8faea30000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000a0233218eff32af8ea3427aaa994bc530b59f462","Library":"ERC20Wrapper:32d522d601aae4a3ef9ea32e9bb3beff419d01e0","LicenseType":"MIT","SwarmSource":"bzzr://71f44c1867a6956749144135f46f7456beee4fd89f18b4227ce6b28bb8942608"}]}