{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/LimitSwap.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface InteractiveTaker {\r\n    function interact(\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256 takingAmount,\r\n        uint256 expectedAmount\r\n    ) external;\r\n}\r\n\r\n\r\nlibrary LimitOrder {\r\n    struct Data {\r\n        address makerAddress;\r\n        address takerAddress;\r\n        IERC20 makerAsset;\r\n        IERC20 takerAsset;\r\n        uint256 makerAmount;\r\n        uint256 takerAmount;\r\n        uint256 expiration;\r\n    }\r\n\r\n    function hash(Data memory order) internal pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n            order.makerAddress,\r\n            order.takerAddress,\r\n            order.makerAsset,\r\n            order.takerAsset,\r\n            order.makerAmount,\r\n            order.takerAmount,\r\n            order.expiration\r\n        ));\r\n    }\r\n}\r\n\r\n\r\ncontract Depositor {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    modifier deposit(bytes4 sig) {\r\n        if (msg.value > 0 && sig == msg.sig) {\r\n            _deposit();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier depositAndWithdraw(bytes4 sig) {\r\n        uint256 prevBalance = balanceOf(msg.sender);\r\n        if (msg.value > 0 && sig == msg.sig) {\r\n            _deposit();\r\n        }\r\n        _;\r\n        if (balanceOf(msg.sender) > prevBalance) {\r\n            _withdraw(balanceOf(msg.sender).sub(prevBalance));\r\n        }\r\n    }\r\n\r\n    function balanceOf(address user) public view returns(uint256) {\r\n        return _balances[user];\r\n    }\r\n\r\n    function _deposit() internal {\r\n        _mint(msg.sender, msg.value);\r\n    }\r\n\r\n    function _withdraw(uint256 amount) internal {\r\n        _burn(msg.sender, amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function _mint(address user, uint256 amount) internal {\r\n        _balances[user] = _balances[user].add(amount);\r\n    }\r\n\r\n    function _burn(address user, uint256 amount) internal {\r\n        _balances[user] = _balances[user].sub(amount);\r\n    }\r\n}\r\n\r\n\r\ncontract LimitSwap is Depositor {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using LimitOrder for LimitOrder.Data;\r\n\r\n    mapping(bytes32 => uint256) public remainings;\r\n\r\n    event LimitOrderUpdated(\r\n        address indexed makerAddress,\r\n        address takerAddress,\r\n        IERC20 indexed makerAsset,\r\n        IERC20 indexed takerAsset,\r\n        uint256 makerAmount,\r\n        uint256 takerAmount,\r\n        uint256 expiration,\r\n        uint256 remaining\r\n    );\r\n\r\n    function available(\r\n        address[] memory makerAddresses,\r\n        address[] memory takerAddresses,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256[] memory makerAmounts,\r\n        uint256[] memory takerAmounts,\r\n        uint256[] memory expirations\r\n    )\r\n        public\r\n        view\r\n        returns(uint256 makerFilledAmount)\r\n    {\r\n        uint256[] memory userAvailable = new uint256[](makerAddresses.length);\r\n\r\n        for (uint i = 0; i < makerAddresses.length; i++) {\r\n            if (expirations[i] < now) {\r\n                continue;\r\n            }\r\n\r\n            if (makerAsset == IERC20(0)) {\r\n                makerFilledAmount = makerFilledAmount.add(makerAmounts[i]);\r\n                continue;\r\n            }\r\n\r\n            LimitOrder.Data memory order = LimitOrder.Data({\r\n                makerAddress: makerAddresses[i],\r\n                takerAddress: takerAddresses[i],\r\n                makerAsset: makerAsset,\r\n                takerAsset: takerAsset,\r\n                makerAmount: makerAmounts[i],\r\n                takerAmount: takerAmounts[i],\r\n                expiration: expirations[i]\r\n            });\r\n\r\n            bool found = false;\r\n            for (uint j = 0; j < i; j++) {\r\n                if (makerAddresses[j] == makerAddresses[i]) {\r\n                    found = true;\r\n                    if (userAvailable[j] > makerAmounts[i]) {\r\n                        userAvailable[j] = userAvailable[j].sub(makerAmounts[i]);\r\n                        makerFilledAmount = makerFilledAmount.add(makerAmounts[i]);\r\n                    } else {\r\n                        makerFilledAmount = makerFilledAmount.add(userAvailable[j]);\r\n                        userAvailable[j] = 0;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!found) {\r\n                userAvailable[i] = Math.min(\r\n                    makerAsset.balanceOf(makerAddresses[i]),\r\n                    makerAsset.allowance(makerAddresses[i], address(this))\r\n                );\r\n                uint256 maxOrderSize = Math.min(\r\n                    remainings[order.hash()],\r\n                    userAvailable[i]\r\n                );\r\n                userAvailable[i] = userAvailable[i].sub(maxOrderSize);\r\n                makerFilledAmount = makerFilledAmount.add(maxOrderSize);\r\n            }\r\n        }\r\n    }\r\n\r\n    function available(\r\n        address makerAddress,\r\n        address takerAddress,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256 makerAmount,\r\n        uint256 takerAmount,\r\n        uint256 expiration\r\n    )\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (expiration < now) {\r\n            return 0;\r\n        }\r\n\r\n        LimitOrder.Data memory order = LimitOrder.Data({\r\n            makerAddress: makerAddress,\r\n            takerAddress: takerAddress,\r\n            makerAsset: makerAsset,\r\n            takerAsset: takerAsset,\r\n            makerAmount: makerAmount,\r\n            takerAmount: takerAmount,\r\n            expiration: expiration\r\n        });\r\n\r\n        if (makerAsset == IERC20(0)) {\r\n            return remainings[order.hash()];\r\n        } else {\r\n            return Math.min(\r\n                remainings[order.hash()],\r\n                Math.min(\r\n                    makerAsset.balanceOf(makerAddress),\r\n                    makerAsset.allowance(makerAddress, address(this))\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function makeOrder(\r\n        address takerAddress,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256 makerAmount,\r\n        uint256 takerAmount,\r\n        uint256 expiration\r\n    )\r\n        public\r\n        payable\r\n        deposit(this.makeOrder.selector)\r\n    {\r\n        LimitOrder.Data memory order = LimitOrder.Data({\r\n            makerAddress: msg.sender,\r\n            takerAddress: takerAddress,\r\n            makerAsset: makerAsset,\r\n            takerAsset: takerAsset,\r\n            makerAmount: makerAmount,\r\n            takerAmount: takerAmount,\r\n            expiration: expiration\r\n        });\r\n\r\n        bytes32 orderHash = order.hash();\r\n        require(remainings[orderHash] == 0, \"LimitSwap: existing order\");\r\n\r\n        if (makerAsset == IERC20(0)) {\r\n            require(makerAmount == msg.value, \"LimitSwap: for ETH makerAmount should be equal to msg.value\");\r\n        } else {\r\n            require(msg.value == 0, \"LimitSwap: msg.value should be 0 when makerAsset in not ETH\");\r\n        }\r\n\r\n        remainings[orderHash] = makerAmount;\r\n        _updateOrder(order, orderHash);\r\n    }\r\n\r\n    function cancelOrder(\r\n        address takerAddress,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256 makerAmount,\r\n        uint256 takerAmount,\r\n        uint256 expiration\r\n    )\r\n        public\r\n    {\r\n        LimitOrder.Data memory order = LimitOrder.Data({\r\n            makerAddress: msg.sender,\r\n            takerAddress: takerAddress,\r\n            makerAsset: makerAsset,\r\n            takerAsset: takerAsset,\r\n            makerAmount: makerAmount,\r\n            takerAmount: takerAmount,\r\n            expiration: expiration\r\n        });\r\n\r\n        bytes32 orderHash = order.hash();\r\n        require(remainings[orderHash] != 0, \"LimitSwap: not existing or already filled order\");\r\n\r\n        if (makerAsset == IERC20(0)) {\r\n            _withdraw(remainings[orderHash]);\r\n        }\r\n\r\n        remainings[orderHash] = 0;\r\n        _updateOrder(order, orderHash);\r\n    }\r\n\r\n    function takeOrdersAvailable(\r\n        address payable[] memory makerAddresses,\r\n        address[] memory takerAddresses,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256[] memory makerAmounts,\r\n        uint256[] memory takerAmounts,\r\n        uint256[] memory expirations,\r\n        uint256 takingAmount\r\n    )\r\n        public\r\n        payable\r\n        depositAndWithdraw(this.takeOrdersAvailable.selector)\r\n        returns(uint256 takerVolume)\r\n    {\r\n        for (uint i = 0; takingAmount > takerVolume && i < makerAddresses.length; i++) {\r\n            takerVolume = takerVolume.sub(\r\n                takeOrderAvailable(\r\n                    makerAddresses[i],\r\n                    takerAddresses[i],\r\n                    makerAsset,\r\n                    takerAsset,\r\n                    makerAmounts[i],\r\n                    takerAmounts[i],\r\n                    expirations[i],\r\n                    takingAmount.sub(takerVolume),\r\n                    false\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function takeOrderAvailable(\r\n        address payable makerAddress,\r\n        address takerAddress,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256 makerAmount,\r\n        uint256 takerAmount,\r\n        uint256 expiration,\r\n        uint256 takingAmount,\r\n        bool interactive\r\n    )\r\n        public\r\n        payable\r\n        depositAndWithdraw(this.takeOrderAvailable.selector)\r\n        returns(uint256 takerVolume)\r\n    {\r\n        takerVolume = Math.min(\r\n            takingAmount,\r\n            available(\r\n                makerAddress,\r\n                takerAddress,\r\n                makerAsset,\r\n                takerAsset,\r\n                makerAmount,\r\n                takerAmount,\r\n                expiration\r\n            )\r\n        );\r\n        takeOrder(\r\n            makerAddress,\r\n            takerAddress,\r\n            makerAsset,\r\n            takerAsset,\r\n            makerAmount,\r\n            takerAmount,\r\n            expiration,\r\n            takerVolume,\r\n            interactive\r\n        );\r\n    }\r\n\r\n    function takeOrder(\r\n        address payable makerAddress,\r\n        address takerAddress,\r\n        IERC20 makerAsset,\r\n        IERC20 takerAsset,\r\n        uint256 makerAmount,\r\n        uint256 takerAmount,\r\n        uint256 expiration,\r\n        uint256 takingAmount,\r\n        bool interactive\r\n    )\r\n        public\r\n        payable\r\n        depositAndWithdraw(this.takeOrder.selector)\r\n    {\r\n        require(block.timestamp <= expiration, \"LimitSwap: order already expired\");\r\n        require(takerAddress == address(0) || takerAddress == msg.sender, \"LimitSwap: access denied to this order\");\r\n\r\n        LimitOrder.Data memory order = LimitOrder.Data({\r\n            makerAddress: makerAddress,\r\n            takerAddress: takerAddress,\r\n            makerAsset: makerAsset,\r\n            takerAsset: takerAsset,\r\n            makerAmount: makerAmount,\r\n            takerAmount: takerAmount,\r\n            expiration: expiration\r\n        });\r\n\r\n        bytes32 orderHash = order.hash();\r\n        remainings[orderHash] = remainings[orderHash].sub(takingAmount, \"LimitSwap: remaining amount is less than taking amount\");\r\n        _updateOrder(order, orderHash);\r\n\r\n        // Maker => Taker\r\n        if (makerAsset == IERC20(0)) {\r\n            _burn(makerAddress, takingAmount);\r\n            msg.sender.transfer(takingAmount);\r\n        } else {\r\n            makerAsset.safeTransferFrom(makerAddress, msg.sender, takingAmount);\r\n        }\r\n\r\n        // Taker can handle funds interactively\r\n        uint256 expectedAmount = takingAmount.mul(makerAmount).div(takerAmount);\r\n        if (interactive) {\r\n            InteractiveTaker(msg.sender).interact(makerAsset, takerAsset, takingAmount, expectedAmount);\r\n        }\r\n\r\n        // Taker => Maker\r\n        if (takerAsset == IERC20(0)) {\r\n            _burn(msg.sender, expectedAmount);\r\n            makerAddress.transfer(expectedAmount);\r\n        } else {\r\n            require(msg.value == 0, \"LimitSwap: msg.value should be 0 when takerAsset in not ETH\");\r\n            takerAsset.safeTransferFrom(msg.sender, makerAddress, expectedAmount);\r\n        }\r\n    }\r\n\r\n    function _updateOrder(\r\n        LimitOrder.Data memory order,\r\n        bytes32 orderHash\r\n    )\r\n        internal\r\n    {\r\n        emit LimitOrderUpdated(\r\n            order.makerAddress,\r\n            order.takerAddress,\r\n            order.makerAsset,\r\n            order.takerAsset,\r\n            order.makerAmount,\r\n            order.takerAmount,\r\n            order.expiration,\r\n            remainings[orderHash]\r\n        );\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"LimitOrderUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"makerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"takerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expirations\",\"type\":\"uint256[]\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makerFilledAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remainings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"interactive\",\"type\":\"bool\"}],\"name\":\"takeOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"interactive\",\"type\":\"bool\"}],\"name\":\"takeOrderAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takerVolume\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"makerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"takerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"makerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"takerAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expirations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"name\":\"takeOrdersAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takerVolume\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"LimitSwap","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://52691a913448d28d13bf56bfcd19938d0d60d0a468706860b3baea64b9ecf947"}]}