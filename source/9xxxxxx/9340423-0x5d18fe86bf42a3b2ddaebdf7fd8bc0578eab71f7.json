{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.13;\r\n\r\ncontract Resolver {\r\n    function setName(bytes32 node, string memory name) public;\r\n}\r\n\r\ncontract ReverseRegistrar {\r\n    function setName(string memory name) public returns (bytes32 node);\r\n    function claim(address owner) public returns (bytes32 node);\r\n    function claimWithResolver(address owner, address resolver) public returns (bytes32 node);\r\n    function node(address addr) public pure returns (bytes32);\r\n}\r\n\r\ncontract OrchidCurator {\r\n    function good(address, bytes calldata) external view returns (uint128);\r\n}\r\n\r\ncontract OrchidList is OrchidCurator {\r\n    ReverseRegistrar constant private ens_ = ReverseRegistrar(0x9062C0A6Dbd6108336BcBe4593a3D1cE05512069);\r\n\r\n    address private owner_;\r\n\r\n    constructor() public {\r\n        ens_.claim(msg.sender);\r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    function hand(address owner) external {\r\n        require(msg.sender == owner_);\r\n        owner_ = owner;\r\n    }\r\n\r\n    struct Entry {\r\n        uint128 adjust_;\r\n        bool valid_;\r\n    }\r\n\r\n    mapping (address => Entry) private entries_;\r\n\r\n    function kill(address provider) external {\r\n        require(msg.sender == owner_);\r\n        delete entries_[provider];\r\n    }\r\n\r\n    function tend(address provider, uint128 adjust) public {\r\n        require(msg.sender == owner_);\r\n        Entry storage entry = entries_[provider];\r\n        entry.adjust_ = adjust;\r\n        entry.valid_ = true;\r\n    }\r\n\r\n    function list(address provider) external {\r\n        return tend(provider, uint128(-1));\r\n    }\r\n\r\n    function good(address provider, bytes calldata) external view returns (uint128) {\r\n        Entry storage entry = entries_[provider];\r\n        require(entry.valid_);\r\n        return entry.adjust_;\r\n    }\r\n}\r\n\r\ncontract OrchidSelect is OrchidCurator {\r\n    ReverseRegistrar constant private ens_ = ReverseRegistrar(0x9062C0A6Dbd6108336BcBe4593a3D1cE05512069);\r\n\r\n    constructor() public {\r\n        ens_.claim(msg.sender);\r\n    }\r\n\r\n    function good(address provider, bytes calldata argument) external view returns (uint128) {\r\n        require(argument.length == 20);\r\n        address allowed;\r\n        bytes memory copy = argument;\r\n        assembly { allowed := mload(add(copy, 20)) }\r\n        require(provider == allowed);\r\n        return uint128(-1);\r\n    }\r\n}\r\n\r\ncontract OrchidUntrusted is OrchidCurator {\r\n    ReverseRegistrar constant private ens_ = ReverseRegistrar(0x9062C0A6Dbd6108336BcBe4593a3D1cE05512069);\r\n\r\n    constructor() public {\r\n        ens_.claim(msg.sender);\r\n    }\r\n\r\n    function good(address, bytes calldata) external view returns (uint128) {\r\n        return uint128(-1);\r\n    }\r\n}\r\n\r\n\r\n// note: this interface defines book as a view function instead of pure\r\ninterface OrchidVerifier {\r\n    function book(bytes calldata shared, address target, bytes calldata receipt) external view;\r\n}\r\n\r\n\r\ncontract OrchidListVerifier is OrchidVerifier {\r\n\r\n    OrchidList internal curator_;\r\n\r\n    constructor(OrchidList curator) public {\r\n        curator_ = curator;\r\n    }\r\n\r\n    function book(bytes calldata, address target, bytes calldata receipt) external view {\r\n        require(curator_.good(target, receipt) != uint128(0));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract OrchidList\",\"name\":\"curator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"receipt\",\"type\":\"bytes\"}],\"name\":\"book\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OrchidListVerifier","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000267bb56749249cf7c9425e9ac6bf2d31cdc2e661","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://60ad8efba483357120d43dde5355e0c5af4d8815c8bd2933bc5cbf13400489c3"}]}