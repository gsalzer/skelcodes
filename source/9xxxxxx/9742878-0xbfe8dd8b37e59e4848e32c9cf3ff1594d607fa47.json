{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title ICore\r\n * @author Set Protocol\r\n *\r\n * The ICore Contract defines all the functions exposed in the Core through its\r\n * various extensions and is a light weight way to interact with the contract.\r\n */\r\ninterface ICore {\r\n    /**\r\n     * Return transferProxy address.\r\n     *\r\n     * @return address       transferProxy address\r\n     */\r\n    function transferProxy()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * Return vault address.\r\n     *\r\n     * @return address       vault address\r\n     */\r\n    function vault()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * Return address belonging to given exchangeId.\r\n     *\r\n     * @param  _exchangeId       ExchangeId number\r\n     * @return address           Address belonging to given exchangeId\r\n     */\r\n    function exchangeIds(\r\n        uint8 _exchangeId\r\n    )\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Returns if valid set\r\n     *\r\n     * @return  bool      Returns true if Set created through Core and isn't disabled\r\n     */\r\n    function validSets(address)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /*\r\n     * Returns if valid module\r\n     *\r\n     * @return  bool      Returns true if valid module\r\n     */\r\n    function validModules(address)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * Return boolean indicating if address is a valid Rebalancing Price Library.\r\n     *\r\n     * @param  _priceLibrary    Price library address\r\n     * @return bool             Boolean indicating if valid Price Library\r\n     */\r\n    function validPriceLibraries(\r\n        address _priceLibrary\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * Exchanges components for Set Tokens\r\n     *\r\n     * @param  _set          Address of set to issue\r\n     * @param  _quantity     Quantity of set to issue\r\n     */\r\n    function issue(\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Issues a specified Set for a specified quantity to the recipient\r\n     * using the caller's components from the wallet and vault.\r\n     *\r\n     * @param  _recipient    Address to issue to\r\n     * @param  _set          Address of the Set to issue\r\n     * @param  _quantity     Number of tokens to issue\r\n     */\r\n    function issueTo(\r\n        address _recipient,\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Converts user's components into Set Tokens held directly in Vault instead of user's account\r\n     *\r\n     * @param _set          Address of the Set\r\n     * @param _quantity     Number of tokens to redeem\r\n     */\r\n    function issueInVault(\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Function to convert Set Tokens into underlying components\r\n     *\r\n     * @param _set          The address of the Set token\r\n     * @param _quantity     The number of tokens to redeem. Should be multiple of natural unit.\r\n     */\r\n    function redeem(\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Redeem Set token and return components to specified recipient. The components\r\n     * are left in the vault\r\n     *\r\n     * @param _recipient    Recipient of Set being issued\r\n     * @param _set          Address of the Set\r\n     * @param _quantity     Number of tokens to redeem\r\n     */\r\n    function redeemTo(\r\n        address _recipient,\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Function to convert Set Tokens held in vault into underlying components\r\n     *\r\n     * @param _set          The address of the Set token\r\n     * @param _quantity     The number of tokens to redeem. Should be multiple of natural unit.\r\n     */\r\n    function redeemInVault(\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Composite method to redeem and withdraw with a single transaction\r\n     *\r\n     * Normally, you should expect to be able to withdraw all of the tokens.\r\n     * However, some have central abilities to freeze transfers (e.g. EOS). _toExclude\r\n     * allows you to optionally specify which component tokens to exclude when\r\n     * redeeming. They will remain in the vault under the users' addresses.\r\n     *\r\n     * @param _set          Address of the Set\r\n     * @param _to           Address to withdraw or attribute tokens to\r\n     * @param _quantity     Number of tokens to redeem\r\n     * @param _toExclude    Mask of indexes of tokens to exclude from withdrawing\r\n     */\r\n    function redeemAndWithdrawTo(\r\n        address _set,\r\n        address _to,\r\n        uint256 _quantity,\r\n        uint256 _toExclude\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Deposit multiple tokens to the vault. Quantities should be in the\r\n     * order of the addresses of the tokens being deposited.\r\n     *\r\n     * @param  _tokens           Array of the addresses of the ERC20 tokens\r\n     * @param  _quantities       Array of the number of tokens to deposit\r\n     */\r\n    function batchDeposit(\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Withdraw multiple tokens from the vault. Quantities should be in the\r\n     * order of the addresses of the tokens being withdrawn.\r\n     *\r\n     * @param  _tokens            Array of the addresses of the ERC20 tokens\r\n     * @param  _quantities        Array of the number of tokens to withdraw\r\n     */\r\n    function batchWithdraw(\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Deposit any quantity of tokens into the vault.\r\n     *\r\n     * @param  _token           The address of the ERC20 token\r\n     * @param  _quantity        The number of tokens to deposit\r\n     */\r\n    function deposit(\r\n        address _token,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Withdraw a quantity of tokens from the vault.\r\n     *\r\n     * @param  _token           The address of the ERC20 token\r\n     * @param  _quantity        The number of tokens to withdraw\r\n     */\r\n    function withdraw(\r\n        address _token,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Transfer tokens associated with the sender's account in vault to another user's\r\n     * account in vault.\r\n     *\r\n     * @param  _token           Address of token being transferred\r\n     * @param  _to              Address of user receiving tokens\r\n     * @param  _quantity        Amount of tokens being transferred\r\n     */\r\n    function internalTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Deploys a new Set Token and adds it to the valid list of SetTokens\r\n     *\r\n     * @param  _factory              The address of the Factory to create from\r\n     * @param  _components           The address of component tokens\r\n     * @param  _units                The units of each component token\r\n     * @param  _naturalUnit          The minimum unit to be issued or redeemed\r\n     * @param  _name                 The bytes32 encoded name of the new Set\r\n     * @param  _symbol               The bytes32 encoded symbol of the new Set\r\n     * @param  _callData             Byte string containing additional call parameters\r\n     * @return setTokenAddress       The address of the new Set\r\n     */\r\n    function createSet(\r\n        address _factory,\r\n        address[] calldata _components,\r\n        uint256[] calldata _units,\r\n        uint256 _naturalUnit,\r\n        bytes32 _name,\r\n        bytes32 _symbol,\r\n        bytes calldata _callData\r\n    )\r\n        external\r\n        returns (address);\r\n\r\n    /**\r\n     * Exposes internal function that deposits a quantity of tokens to the vault and attributes\r\n     * the tokens respectively, to system modules.\r\n     *\r\n     * @param  _from            Address to transfer tokens from\r\n     * @param  _to              Address to credit for deposit\r\n     * @param  _token           Address of token being deposited\r\n     * @param  _quantity        Amount of tokens to deposit\r\n     */\r\n    function depositModule(\r\n        address _from,\r\n        address _to,\r\n        address _token,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Exposes internal function that withdraws a quantity of tokens from the vault and\r\n     * deattributes the tokens respectively, to system modules.\r\n     *\r\n     * @param  _from            Address to decredit for withdraw\r\n     * @param  _to              Address to transfer tokens to\r\n     * @param  _token           Address of token being withdrawn\r\n     * @param  _quantity        Amount of tokens to withdraw\r\n     */\r\n    function withdrawModule(\r\n        address _from,\r\n        address _to,\r\n        address _token,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Exposes internal function that deposits multiple tokens to the vault, to system\r\n     * modules. Quantities should be in the order of the addresses of the tokens being\r\n     * deposited.\r\n     *\r\n     * @param  _from              Address to transfer tokens from\r\n     * @param  _to                Address to credit for deposits\r\n     * @param  _tokens            Array of the addresses of the tokens being deposited\r\n     * @param  _quantities        Array of the amounts of tokens to deposit\r\n     */\r\n    function batchDepositModule(\r\n        address _from,\r\n        address _to,\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Exposes internal function that withdraws multiple tokens from the vault, to system\r\n     * modules. Quantities should be in the order of the addresses of the tokens being withdrawn.\r\n     *\r\n     * @param  _from              Address to decredit for withdrawals\r\n     * @param  _to                Address to transfer tokens to\r\n     * @param  _tokens            Array of the addresses of the tokens being withdrawn\r\n     * @param  _quantities        Array of the amounts of tokens to withdraw\r\n     */\r\n    function batchWithdrawModule(\r\n        address _from,\r\n        address _to,\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Expose internal function that exchanges components for Set tokens,\r\n     * accepting any owner, to system modules\r\n     *\r\n     * @param  _owner        Address to use tokens from\r\n     * @param  _recipient    Address to issue Set to\r\n     * @param  _set          Address of the Set to issue\r\n     * @param  _quantity     Number of tokens to issue\r\n     */\r\n    function issueModule(\r\n        address _owner,\r\n        address _recipient,\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Expose internal function that exchanges Set tokens for components,\r\n     * accepting any owner, to system modules\r\n     *\r\n     * @param  _burnAddress         Address to burn token from\r\n     * @param  _incrementAddress    Address to increment component tokens to\r\n     * @param  _set                 Address of the Set to redeem\r\n     * @param  _quantity            Number of tokens to redeem\r\n     */\r\n    function redeemModule(\r\n        address _burnAddress,\r\n        address _incrementAddress,\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Expose vault function that increments user's balance in the vault.\r\n     * Available to system modules\r\n     *\r\n     * @param  _tokens          The addresses of the ERC20 tokens\r\n     * @param  _owner           The address of the token owner\r\n     * @param  _quantities      The numbers of tokens to attribute to owner\r\n     */\r\n    function batchIncrementTokenOwnerModule(\r\n        address[] calldata _tokens,\r\n        address _owner,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Expose vault function that decrement user's balance in the vault\r\n     * Only available to system modules.\r\n     *\r\n     * @param  _tokens          The addresses of the ERC20 tokens\r\n     * @param  _owner           The address of the token owner\r\n     * @param  _quantities      The numbers of tokens to attribute to owner\r\n     */\r\n    function batchDecrementTokenOwnerModule(\r\n        address[] calldata _tokens,\r\n        address _owner,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Expose vault function that transfer vault balances between users\r\n     * Only available to system modules.\r\n     *\r\n     * @param  _tokens           Addresses of tokens being transferred\r\n     * @param  _from             Address tokens being transferred from\r\n     * @param  _to               Address tokens being transferred to\r\n     * @param  _quantities       Amounts of tokens being transferred\r\n     */\r\n    function batchTransferBalanceModule(\r\n        address[] calldata _tokens,\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _quantities\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Transfers token from one address to another using the transfer proxy.\r\n     * Only available to system modules.\r\n     *\r\n     * @param  _token          The address of the ERC20 token\r\n     * @param  _quantity       The number of tokens to transfer\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     */\r\n    function transferModule(\r\n        address _token,\r\n        uint256 _quantity,\r\n        address _from,\r\n        address _to\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * Expose transfer proxy function to transfer tokens from one address to another\r\n     * Only available to system modules.\r\n     *\r\n     * @param  _tokens         The addresses of the ERC20 token\r\n     * @param  _quantities     The numbers of tokens to transfer\r\n     * @param  _from           The address to transfer from\r\n     * @param  _to             The address to transfer to\r\n     */\r\n    function batchTransferModule(\r\n        address[] calldata _tokens,\r\n        uint256[] calldata _quantities,\r\n        address _from,\r\n        address _to\r\n    )\r\n        external;\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/lib/RebalancingLibrary.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title RebalancingLibrary\r\n * @author Set Protocol\r\n *\r\n * The RebalancingLibrary contains functions for facilitating the rebalancing process for\r\n * Rebalancing Set Tokens. Removes the old calculation functions\r\n *\r\n */\r\nlibrary RebalancingLibrary {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum State { Default, Proposal, Rebalance, Drawdown }\r\n\r\n    /* ============ Structs ============ */\r\n\r\n    struct AuctionPriceParameters {\r\n        uint256 auctionStartTime;\r\n        uint256 auctionTimeToPivot;\r\n        uint256 auctionStartPrice;\r\n        uint256 auctionPivotPrice;\r\n    }\r\n\r\n    struct BiddingParameters {\r\n        uint256 minimumBid;\r\n        uint256 remainingCurrentSets;\r\n        uint256[] combinedCurrentUnits;\r\n        uint256[] combinedNextSetUnits;\r\n        address[] combinedTokenArray;\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/interfaces/IFeeCalculator.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n/**\r\n * @title IFeeCalculator\r\n * @author Set Protocol\r\n *\r\n */\r\ninterface IFeeCalculator {\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    function initialize(\r\n        bytes calldata _feeCalculatorData\r\n    )\r\n        external;\r\n\r\n    function getFee()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n    function updateAndGetFee()\r\n        external\r\n        returns(uint256);\r\n\r\n    function adjustFee(\r\n        bytes calldata _newFeeData\r\n    )\r\n        external;\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/interfaces/ISetToken.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n/**\r\n * @title ISetToken\r\n * @author Set Protocol\r\n *\r\n * The ISetToken interface provides a light-weight, structured way to interact with the\r\n * SetToken contract from another contract.\r\n */\r\ninterface ISetToken {\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /*\r\n     * Get natural unit of Set\r\n     *\r\n     * @return  uint256       Natural unit of Set\r\n     */\r\n    function naturalUnit()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get addresses of all components in the Set\r\n     *\r\n     * @return  componentAddresses       Array of component tokens\r\n     */\r\n    function getComponents()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /*\r\n     * Get units of all tokens in Set\r\n     *\r\n     * @return  units       Array of component units\r\n     */\r\n    function getUnits()\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /*\r\n     * Checks to make sure token is component of Set\r\n     *\r\n     * @param  _tokenAddress     Address of token being checked\r\n     * @return  bool             True if token is component of Set\r\n     */\r\n    function tokenIsComponent(\r\n        address _tokenAddress\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /*\r\n     * Mint set token for given address.\r\n     * Can only be called by authorized contracts.\r\n     *\r\n     * @param  _issuer      The address of the issuing account\r\n     * @param  _quantity    The number of sets to attribute to issuer\r\n     */\r\n    function mint(\r\n        address _issuer,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Burn set token for given address\r\n     * Can only be called by authorized contracts\r\n     *\r\n     * @param  _from        The address of the redeeming account\r\n     * @param  _quantity    The number of sets to burn from redeemer\r\n     */\r\n    function burn(\r\n        address _from,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /**\r\n    * Transfer token for a specified address\r\n    *\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    )\r\n        external;\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/interfaces/IRebalancingSetToken.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title IRebalancingSetToken\r\n * @author Set Protocol\r\n *\r\n * The IRebalancingSetToken interface provides a light-weight, structured way to interact with the\r\n * RebalancingSetToken contract from another contract.\r\n */\r\n\r\ninterface IRebalancingSetToken {\r\n\r\n    /*\r\n     * Get the auction library contract used for the current rebalance\r\n     *\r\n     * @return address    Address of auction library used in the upcoming auction\r\n     */\r\n    function auctionLibrary()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get totalSupply of Rebalancing Set\r\n     *\r\n     * @return  totalSupply\r\n     */\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get proposalTimeStamp of Rebalancing Set\r\n     *\r\n     * @return  proposalTimeStamp\r\n     */\r\n    function proposalStartTime()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get lastRebalanceTimestamp of Rebalancing Set\r\n     *\r\n     * @return  lastRebalanceTimestamp\r\n     */\r\n    function lastRebalanceTimestamp()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceInterval of Rebalancing Set\r\n     *\r\n     * @return  rebalanceInterval\r\n     */\r\n    function rebalanceInterval()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceState of Rebalancing Set\r\n     *\r\n     * @return RebalancingLibrary.State    Current rebalance state of the RebalancingSetToken\r\n     */\r\n    function rebalanceState()\r\n        external\r\n        view\r\n        returns (RebalancingLibrary.State);\r\n\r\n    /*\r\n     * Get the starting amount of current SetToken for the current auction\r\n     *\r\n     * @return  rebalanceState\r\n     */\r\n    function startingCurrentSetAmount()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Gets the balance of the specified address.\r\n     *\r\n     * @param owner      The address to query the balance of.\r\n     * @return           A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(\r\n        address owner\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Function used to set the terms of the next rebalance and start the proposal period\r\n     *\r\n     * @param _nextSet                      The Set to rebalance into\r\n     * @param _auctionLibrary               The library used to calculate the Dutch Auction price\r\n     * @param _auctionTimeToPivot           The amount of time for the auction to go ffrom start to pivot price\r\n     * @param _auctionStartPrice            The price to start the auction at\r\n     * @param _auctionPivotPrice            The price at which the price curve switches from linear to exponential\r\n     */\r\n    function propose(\r\n        address _nextSet,\r\n        address _auctionLibrary,\r\n        uint256 _auctionTimeToPivot,\r\n        uint256 _auctionStartPrice,\r\n        uint256 _auctionPivotPrice\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Get natural unit of Set\r\n     *\r\n     * @return  uint256       Natural unit of Set\r\n     */\r\n    function naturalUnit()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Returns the address of the current base SetToken with the current allocation\r\n     *\r\n     * @return           A address representing the base SetToken\r\n     */\r\n    function currentSet()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /**\r\n     * Returns the address of the next base SetToken with the post auction allocation\r\n     *\r\n     * @return  address    Address representing the base SetToken\r\n     */\r\n    function nextSet()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get the unit shares of the rebalancing Set\r\n     *\r\n     * @return  unitShares       Unit Shares of the base Set\r\n     */\r\n    function unitShares()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Burn set token for given address.\r\n     * Can only be called by authorized contracts.\r\n     *\r\n     * @param  _from        The address of the redeeming account\r\n     * @param  _quantity    The number of sets to burn from redeemer\r\n     */\r\n    function burn(\r\n        address _from,\r\n        uint256 _quantity\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Place bid during rebalance auction. Can only be called by Core.\r\n     *\r\n     * @param _quantity                 The amount of currentSet to be rebalanced\r\n     * @return combinedTokenArray       Array of token addresses invovled in rebalancing\r\n     * @return inflowUnitArray          Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray         Array of amount of tokens taken out of system in bid\r\n     */\r\n    function placeBid(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (address[] memory, uint256[] memory, uint256[] memory);\r\n\r\n    /*\r\n     * Get combinedTokenArray of Rebalancing Set\r\n     *\r\n     * @return  combinedTokenArray\r\n     */\r\n    function getCombinedTokenArrayLength()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get combinedTokenArray of Rebalancing Set\r\n     *\r\n     * @return  combinedTokenArray\r\n     */\r\n    function getCombinedTokenArray()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /*\r\n     * Get failedAuctionWithdrawComponents of Rebalancing Set\r\n     *\r\n     * @return  failedAuctionWithdrawComponents\r\n     */\r\n    function getFailedAuctionWithdrawComponents()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /*\r\n     * Get auctionPriceParameters for current auction\r\n     *\r\n     * @return uint256[4]    AuctionPriceParameters for current rebalance auction\r\n     */\r\n    function getAuctionPriceParameters()\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get biddingParameters for current auction\r\n     *\r\n     * @return uint256[2]    BiddingParameters for current rebalance auction\r\n     */\r\n    function getBiddingParameters()\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get token inflows and outflows required for bid. Also the amount of Rebalancing\r\n     * Sets that would be generated.\r\n     *\r\n     * @param _quantity               The amount of currentSet to be rebalanced\r\n     * @return inflowUnitArray        Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray       Array of amount of tokens taken out of system in bid\r\n     */\r\n    function getBidPrice(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory, uint256[] memory);\r\n\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/lib/Rebalance.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title Rebalance\r\n * @author Set Protocol\r\n *\r\n * Types and functions for Rebalance-related data.\r\n */\r\nlibrary Rebalance {\r\n\r\n    struct TokenFlow {\r\n        address[] addresses;\r\n        uint256[] inflow;\r\n        uint256[] outflow;\r\n    }\r\n\r\n    function composeTokenFlow(\r\n        address[] memory _addresses,\r\n        uint256[] memory _inflow,\r\n        uint256[] memory _outflow\r\n    )\r\n        internal\r\n        pure\r\n        returns(TokenFlow memory)\r\n    {\r\n        return TokenFlow({addresses: _addresses, inflow: _inflow, outflow: _outflow });\r\n    }\r\n\r\n    function decomposeTokenFlow(TokenFlow memory _tokenFlow)\r\n        internal\r\n        pure\r\n        returns (address[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        return (_tokenFlow.addresses, _tokenFlow.inflow, _tokenFlow.outflow);\r\n    }\r\n\r\n    function decomposeTokenFlowToBidPrice(TokenFlow memory _tokenFlow)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        return (_tokenFlow.inflow, _tokenFlow.outflow);\r\n    }\r\n\r\n    /**\r\n     * Get token flows array of addresses, inflows and outflows\r\n     *\r\n     * @param    _rebalancingSetToken   The rebalancing Set Token instance\r\n     * @param    _quantity              The amount of currentSet to be rebalanced\r\n     * @return   combinedTokenArray     Array of token addresses\r\n     * @return   inflowArray            Array of amount of tokens inserted into system in bid\r\n     * @return   outflowArray           Array of amount of tokens returned from system in bid\r\n     */\r\n    function getTokenFlows(\r\n        IRebalancingSetToken _rebalancingSetToken,\r\n        uint256 _quantity\r\n    )\r\n        internal\r\n        view\r\n        returns (address[] memory, uint256[] memory, uint256[] memory)\r\n    {\r\n        // Get token addresses\r\n        address[] memory combinedTokenArray = _rebalancingSetToken.getCombinedTokenArray();\r\n\r\n        // Get inflow and outflow arrays for the given bid quantity\r\n        (\r\n            uint256[] memory inflowArray,\r\n            uint256[] memory outflowArray\r\n        ) = _rebalancingSetToken.getBidPrice(_quantity);\r\n\r\n        return (combinedTokenArray, inflowArray, outflowArray);\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/interfaces/ILiquidator.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ILiquidator\r\n * @author Set Protocol\r\n *\r\n */\r\ninterface ILiquidator {\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    function startRebalance(\r\n        ISetToken _currentSet,\r\n        ISetToken _nextSet,\r\n        uint256 _startingCurrentSetQuantity,\r\n        bytes calldata _liquidatorData\r\n    )\r\n        external;\r\n\r\n    function getBidPrice(\r\n        address _set,\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (Rebalance.TokenFlow memory);\r\n\r\n    function placeBid(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (Rebalance.TokenFlow memory);\r\n\r\n\r\n    function settleRebalance()\r\n        external;\r\n\r\n    function endFailedRebalance() external;\r\n\r\n    // ----------------------------------------------------------------------\r\n    // Auction Price\r\n    // ----------------------------------------------------------------------\r\n\r\n    function auctionPriceParameters(address _set)\r\n        external\r\n        view\r\n        returns (RebalancingLibrary.AuctionPriceParameters memory);\r\n\r\n    // ----------------------------------------------------------------------\r\n    // Auction\r\n    // ----------------------------------------------------------------------\r\n\r\n    function hasRebalanceFailed(address _set) external view returns (bool);\r\n    function minimumBid(address _set) external view returns (uint256);\r\n    function startingCurrentSets(address _set) external view returns (uint256);\r\n    function remainingCurrentSets(address _set) external view returns (uint256);\r\n    function getCombinedCurrentSetUnits(address _set) external view returns (uint256[] memory);\r\n    function getCombinedNextSetUnits(address _set) external view returns (uint256[] memory);\r\n    function getCombinedTokenArray(address _set) external view returns (address[] memory);\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/interfaces/IRebalancingSetTokenV2.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IRebalancingSetTokenV2\r\n * @author Set Protocol\r\n *\r\n * The IRebalancingSetTokenV2 interface provides a light-weight, structured way to interact with the\r\n * RebalancingSetTokenV2 contract from another contract.\r\n */\r\n\r\ninterface IRebalancingSetTokenV2 {\r\n\r\n    /*\r\n     * Get totalSupply of Rebalancing Set\r\n     *\r\n     * @return  totalSupply\r\n     */\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Returns liquidator instance\r\n     *\r\n     * @return  ILiquidator    Liquidator instance\r\n     */\r\n    function liquidator()\r\n        external\r\n        view\r\n        returns (ILiquidator);\r\n\r\n    /*\r\n     * Get lastRebalanceTimestamp of Rebalancing Set\r\n     *\r\n     * @return  lastRebalanceTimestamp\r\n     */\r\n    function lastRebalanceTimestamp()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceStartTime of Rebalancing Set\r\n     *\r\n     * @return  rebalanceStartTime\r\n     */\r\n    function rebalanceStartTime()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get startingCurrentSets of RebalancingSetToken\r\n     *\r\n     * @return  startingCurrentSets\r\n     */\r\n    function startingCurrentSetAmount()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceInterval of Rebalancing Set\r\n     *\r\n     * @return  rebalanceInterval\r\n     */\r\n    function rebalanceInterval()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get array returning [startTime, timeToPivot, startPrice, endPrice]\r\n     *\r\n     * @return  AuctionPriceParameters\r\n     */\r\n    function getAuctionPriceParameters() external view returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get array returning [minimumBid, remainingCurrentSets]\r\n     *\r\n     * @return  BiddingParameters\r\n     */\r\n    function getBiddingParameters() external view returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get rebalanceState of Rebalancing Set\r\n     *\r\n     * @return RebalancingLibrary.State    Current rebalance state of the RebalancingSetTokenV2\r\n     */\r\n    function rebalanceState()\r\n        external\r\n        view\r\n        returns (RebalancingLibrary.State);\r\n\r\n    /**\r\n     * Gets the balance of the specified address.\r\n     *\r\n     * @param owner      The address to query the balance of.\r\n     * @return           A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(\r\n        address owner\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get manager of Rebalancing Set\r\n     *\r\n     * @return  manager\r\n     */\r\n    function manager()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get feeRecipient of Rebalancing Set\r\n     *\r\n     * @return  feeRecipient\r\n     */\r\n    function feeRecipient()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get entryFee of Rebalancing Set\r\n     *\r\n     * @return  entryFee\r\n     */\r\n    function entryFee()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Retrieves the current expected fee from the fee calculator\r\n     * Value is returned as a scale decimal figure.\r\n     */\r\n    function rebalanceFee()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get calculator contract used to compute rebalance fees\r\n     *\r\n     * @return  rebalanceFeeCalculator\r\n     */\r\n    function rebalanceFeeCalculator()\r\n        external\r\n        view\r\n        returns (IFeeCalculator);\r\n\r\n    /*\r\n     * Initializes the RebalancingSetToken. Typically called by the Factory during creation\r\n     */\r\n    function initialize(\r\n        bytes calldata _rebalanceFeeCalldata\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Set new liquidator address. Only whitelisted addresses are valid.\r\n     */\r\n    function setLiquidator(\r\n        ILiquidator _newLiquidator\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Set new fee recipient address.\r\n     */\r\n    function setFeeRecipient(\r\n        address _newFeeRecipient\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Set new fee entry fee.\r\n     */\r\n    function setEntryFee(\r\n        uint256 _newEntryFee\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Initiates the rebalance in coordination with the Liquidator contract.\r\n     * In this step, we redeem the currentSet and pass relevant information\r\n     * to the liquidator.\r\n     *\r\n     * @param _nextSet                      The Set to rebalance into\r\n     * @param _liquidatorData               Bytecode formatted data with liquidator-specific arguments\r\n     *\r\n     * Can only be called if the rebalance interval has elapsed.\r\n     * Can only be called by manager.\r\n     */\r\n    function startRebalance(\r\n        address _nextSet,\r\n        bytes calldata _liquidatorData\r\n\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * After a successful rebalance, the new Set is issued. If there is a rebalance fee,\r\n     * the fee is paid via inflation of the Rebalancing Set to the feeRecipient.\r\n     * Full issuance functionality is now returned to set owners.\r\n     *\r\n     * Anyone can call this function.\r\n     */\r\n    function settleRebalance()\r\n        external;\r\n\r\n    /*\r\n     * Get natural unit of Set\r\n     *\r\n     * @return  uint256       Natural unit of Set\r\n     */\r\n    function naturalUnit()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Returns the address of the current base SetToken with the current allocation\r\n     *\r\n     * @return           A address representing the base SetToken\r\n     */\r\n    function currentSet()\r\n        external\r\n        view\r\n        returns (ISetToken);\r\n\r\n    /**\r\n     * Returns the address of the next base SetToken with the post auction allocation\r\n     *\r\n     * @return  address    Address representing the base SetToken\r\n     */\r\n    function nextSet()\r\n        external\r\n        view\r\n        returns (ISetToken);\r\n\r\n    /*\r\n     * Get the unit shares of the rebalancing Set\r\n     *\r\n     * @return  unitShares       Unit Shares of the base Set\r\n     */\r\n    function unitShares()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Place bid during rebalance auction. Can only be called by Core.\r\n     *\r\n     * @param _quantity                 The amount of currentSet to be rebalanced\r\n     * @return combinedTokenArray       Array of token addresses invovled in rebalancing\r\n     * @return inflowUnitArray          Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray         Array of amount of tokens taken out of system in bid\r\n     */\r\n    function placeBid(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (address[] memory, uint256[] memory, uint256[] memory);\r\n\r\n    /*\r\n     * Get token inflows and outflows required for bid. Also the amount of Rebalancing\r\n     * Sets that would be generated.\r\n     *\r\n     * @param _quantity               The amount of currentSet to be rebalanced\r\n     * @return inflowUnitArray        Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray       Array of amount of tokens taken out of system in bid\r\n     */\r\n    function getBidPrice(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory, uint256[] memory);\r\n\r\n    /*\r\n     * Get name of Rebalancing Set\r\n     *\r\n     * @return  name\r\n     */\r\n    function name()\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    /*\r\n     * Get symbol of Rebalancing Set\r\n     *\r\n     * @return  symbol\r\n     */\r\n    function symbol()\r\n        external\r\n        view\r\n        returns (string memory);\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/core/interfaces/IRebalancingSetTokenV3.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title IRebalancingSetTokenV2\r\n * @author Set Protocol\r\n *\r\n * The IRebalancingSetTokenV3 interface provides a light-weight, structured way to interact with the\r\n * RebalancingSetTokenV3 contract from another contract.\r\n */\r\n\r\ninterface IRebalancingSetTokenV3 {\r\n\r\n    /*\r\n     * Get totalSupply of Rebalancing Set\r\n     *\r\n     * @return  totalSupply\r\n     */\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Returns liquidator instance\r\n     *\r\n     * @return  ILiquidator    Liquidator instance\r\n     */\r\n    function liquidator()\r\n        external\r\n        view\r\n        returns (ILiquidator);\r\n\r\n    /*\r\n     * Get lastRebalanceTimestamp of Rebalancing Set\r\n     *\r\n     * @return  lastRebalanceTimestamp\r\n     */\r\n    function lastRebalanceTimestamp()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceStartTime of Rebalancing Set\r\n     *\r\n     * @return  rebalanceStartTime\r\n     */\r\n    function rebalanceStartTime()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get startingCurrentSets of RebalancingSetToken\r\n     *\r\n     * @return  startingCurrentSets\r\n     */\r\n    function startingCurrentSetAmount()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get rebalanceInterval of Rebalancing Set\r\n     *\r\n     * @return  rebalanceInterval\r\n     */\r\n    function rebalanceInterval()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get array returning [startTime, timeToPivot, startPrice, endPrice]\r\n     *\r\n     * @return  AuctionPriceParameters\r\n     */\r\n    function getAuctionPriceParameters() external view returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get array returning [minimumBid, remainingCurrentSets]\r\n     *\r\n     * @return  BiddingParameters\r\n     */\r\n    function getBiddingParameters() external view returns (uint256[] memory);\r\n\r\n    /*\r\n     * Get rebalanceState of Rebalancing Set\r\n     *\r\n     * @return RebalancingLibrary.State    Current rebalance state of the RebalancingSetTokenV3\r\n     */\r\n    function rebalanceState()\r\n        external\r\n        view\r\n        returns (RebalancingLibrary.State);\r\n\r\n    /**\r\n     * Gets the balance of the specified address.\r\n     *\r\n     * @param owner      The address to query the balance of.\r\n     * @return           A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(\r\n        address owner\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get manager of Rebalancing Set\r\n     *\r\n     * @return  manager\r\n     */\r\n    function manager()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get feeRecipient of Rebalancing Set\r\n     *\r\n     * @return  feeRecipient\r\n     */\r\n    function feeRecipient()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    /*\r\n     * Get entryFee of Rebalancing Set\r\n     *\r\n     * @return  entryFee\r\n     */\r\n    function entryFee()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Retrieves the current expected fee from the fee calculator\r\n     * Value is returned as a scale decimal figure.\r\n     */\r\n    function rebalanceFee()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Get calculator contract used to compute rebalance fees\r\n     *\r\n     * @return  rebalanceFeeCalculator\r\n     */\r\n    function rebalanceFeeCalculator()\r\n        external\r\n        view\r\n        returns (IFeeCalculator);\r\n\r\n    /*\r\n     * Initializes the RebalancingSetToken. Typically called by the Factory during creation\r\n     */\r\n    function initialize(\r\n        bytes calldata _rebalanceFeeCalldata\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Set new liquidator address. Only whitelisted addresses are valid.\r\n     */\r\n    function setLiquidator(\r\n        ILiquidator _newLiquidator\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Set new fee recipient address.\r\n     */\r\n    function setFeeRecipient(\r\n        address _newFeeRecipient\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Set new fee entry fee.\r\n     */\r\n    function setEntryFee(\r\n        uint256 _newEntryFee\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Initiates the rebalance in coordination with the Liquidator contract.\r\n     * In this step, we redeem the currentSet and pass relevant information\r\n     * to the liquidator.\r\n     *\r\n     * @param _nextSet                      The Set to rebalance into\r\n     * @param _liquidatorData               Bytecode formatted data with liquidator-specific arguments\r\n     *\r\n     * Can only be called if the rebalance interval has elapsed.\r\n     * Can only be called by manager.\r\n     */\r\n    function startRebalance(\r\n        address _nextSet,\r\n        bytes calldata _liquidatorData\r\n\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * After a successful rebalance, the new Set is issued. If there is a rebalance fee,\r\n     * the fee is paid via inflation of the Rebalancing Set to the feeRecipient.\r\n     * Full issuance functionality is now returned to set owners.\r\n     *\r\n     * Anyone can call this function.\r\n     */\r\n    function settleRebalance()\r\n        external;\r\n\r\n    /*\r\n     * During the Default stage, the incentive / rebalance Fee can be triggered. This will\r\n     * retrieve the current inflation fee from the fee calulator and mint the according\r\n     * inflation to the feeRecipient. The unit shares is then adjusted based on the new\r\n     * supply.\r\n     *\r\n     * Anyone can call this function.\r\n     */\r\n    function actualizeFee()\r\n        external;\r\n\r\n    /*\r\n     * Validate then set new streaming fee.\r\n     *\r\n     * @param  _newFeeData       Fee type and new streaming fee encoded in bytes\r\n     */\r\n    function adjustFee(\r\n        bytes calldata _newFeeData\r\n    )\r\n        external;\r\n\r\n    /*\r\n     * Get natural unit of Set\r\n     *\r\n     * @return  uint256       Natural unit of Set\r\n     */\r\n    function naturalUnit()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * Returns the address of the current base SetToken with the current allocation\r\n     *\r\n     * @return           A address representing the base SetToken\r\n     */\r\n    function currentSet()\r\n        external\r\n        view\r\n        returns (ISetToken);\r\n\r\n    /**\r\n     * Returns the address of the next base SetToken with the post auction allocation\r\n     *\r\n     * @return  address    Address representing the base SetToken\r\n     */\r\n    function nextSet()\r\n        external\r\n        view\r\n        returns (ISetToken);\r\n\r\n    /*\r\n     * Get the unit shares of the rebalancing Set\r\n     *\r\n     * @return  unitShares       Unit Shares of the base Set\r\n     */\r\n    function unitShares()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /*\r\n     * Place bid during rebalance auction. Can only be called by Core.\r\n     *\r\n     * @param _quantity                 The amount of currentSet to be rebalanced\r\n     * @return combinedTokenArray       Array of token addresses invovled in rebalancing\r\n     * @return inflowUnitArray          Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray         Array of amount of tokens taken out of system in bid\r\n     */\r\n    function placeBid(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        returns (address[] memory, uint256[] memory, uint256[] memory);\r\n\r\n    /*\r\n     * Get token inflows and outflows required for bid. Also the amount of Rebalancing\r\n     * Sets that would be generated.\r\n     *\r\n     * @param _quantity               The amount of currentSet to be rebalanced\r\n     * @return inflowUnitArray        Array of amount of tokens inserted into system in bid\r\n     * @return outflowUnitArray       Array of amount of tokens taken out of system in bid\r\n     */\r\n    function getBidPrice(\r\n        uint256 _quantity\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[] memory, uint256[] memory);\r\n\r\n    /*\r\n     * Get name of Rebalancing Set\r\n     *\r\n     * @return  name\r\n     */\r\n    function name()\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    /*\r\n     * Get symbol of Rebalancing Set\r\n     *\r\n     * @return  symbol\r\n     */\r\n    function symbol()\r\n        external\r\n        view\r\n        returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/lib/TimeLockUpgrade.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TimeLockUpgrade\r\n * @author Set Protocol\r\n *\r\n * The TimeLockUpgrade contract contains a modifier for handling minimum time period updates\r\n */\r\ncontract TimeLockUpgrade is\r\n    Ownable\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Timelock Upgrade Period in seconds\r\n    uint256 public timeLockPeriod;\r\n\r\n    // Mapping of upgradable units and initialized timelock\r\n    mapping(bytes32 => uint256) public timeLockedUpgrades;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event UpgradeRegistered(\r\n        bytes32 _upgradeHash,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier timeLockUpgrade() {\r\n        // If the time lock period is 0, then allow non-timebound upgrades.\r\n        // This is useful for initialization of the protocol and for testing.\r\n        if (timeLockPeriod == 0) {\r\n            _;\r\n\r\n            return;\r\n        }\r\n\r\n        // The upgrade hash is defined by the hash of the transaction call data,\r\n        // which uniquely identifies the function as well as the passed in arguments.\r\n        bytes32 upgradeHash = keccak256(\r\n            abi.encodePacked(\r\n                msg.data\r\n            )\r\n        );\r\n\r\n        uint256 registrationTime = timeLockedUpgrades[upgradeHash];\r\n\r\n        // If the upgrade hasn't been registered, register with the current time.\r\n        if (registrationTime == 0) {\r\n            timeLockedUpgrades[upgradeHash] = block.timestamp;\r\n\r\n            emit UpgradeRegistered(\r\n                upgradeHash,\r\n                block.timestamp\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        require(\r\n            block.timestamp >= registrationTime.add(timeLockPeriod),\r\n            \"TimeLockUpgrade: Time lock period must have elapsed.\"\r\n        );\r\n\r\n        // Reset the timestamp to 0\r\n        timeLockedUpgrades[upgradeHash] = 0;\r\n\r\n        // Run the rest of the upgrades\r\n        _;\r\n    }\r\n\r\n    /* ============ Function ============ */\r\n\r\n    /**\r\n     * Change timeLockPeriod period. Generally called after initially settings have been set up.\r\n     *\r\n     * @param  _timeLockPeriod   Time in seconds that upgrades need to be evaluated before execution\r\n     */\r\n    function setTimeLockPeriod(\r\n        uint256 _timeLockPeriod\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        // Only allow setting of the timeLockPeriod if the period is greater than the existing\r\n        require(\r\n            _timeLockPeriod > timeLockPeriod,\r\n            \"TimeLockUpgrade: New period must be greater than existing\"\r\n        );\r\n\r\n        timeLockPeriod = _timeLockPeriod;\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/lib/UnrestrictedTimeLockUpgrade.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title UnrestrictedTimeLockUpgrade\r\n * @author Set Protocol\r\n *\r\n * The UnrestrictedTimeLockUpgrade contract inherits a modifier for handling minimum time period updates not\r\n * limited to the owner of the contract. Also implements a removeTimeLockUpgrade internal function that can\r\n * be exposed by writing an external version into the contract it used in with the required modifiers to\r\n * restrict access.\r\n */\r\n\r\ncontract UnrestrictedTimeLockUpgrade is\r\n    TimeLockUpgrade\r\n{\r\n    /* ============ Events ============ */\r\n\r\n    event RemoveRegisteredUpgrade(\r\n        bytes32 indexed _upgradeHash\r\n    );\r\n\r\n    /* ============ Internal Function ============ */\r\n\r\n    /**\r\n     * Removes an existing upgrade.\r\n     *\r\n     * @param  _upgradeHash    Keccack256 hash that uniquely identifies function called and arguments\r\n     */\r\n    function removeRegisteredUpgradeInternal(\r\n        bytes32 _upgradeHash\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            timeLockedUpgrades[_upgradeHash] != 0,\r\n            \"TimeLockUpgradeV2.removeRegisteredUpgrade: Upgrade hash must be registered\"\r\n        );\r\n\r\n        // Reset the timestamp to 0\r\n        timeLockedUpgrades[_upgradeHash] = 0;\r\n\r\n        emit RemoveRegisteredUpgrade(\r\n            _upgradeHash\r\n        );\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/lib/LimitOneUpgrade.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title LimitOneUpgrade\r\n * @author Set Protocol\r\n *\r\n * For function that must be timelocked but could potentially have more than one upgrade at a time\r\n * this contract allows one to limit the amount of simultaneous upgrades.\r\n */\r\n\r\ncontract LimitOneUpgrade is\r\n    UnrestrictedTimeLockUpgrade\r\n{\r\n    /* ============ State Variables ============ */\r\n\r\n    mapping(address => bytes32) public upgradeIdentifier;\r\n\r\n    /* ============ Modifier ============ */\r\n\r\n    /**\r\n     * This modifier must be used in conjunction with timeLockUpgrade AND must be called before\r\n     * timeLockUpgrade is called. UpgradeAddress must also be part of the msg.data.\r\n     */\r\n    modifier limitOneUpgrade(address _upgradeAddress) {\r\n        if (timeLockPeriod > 0) {\r\n            // Get upgradeHash\r\n            bytes32 upgradeHash = keccak256(msg.data);\r\n\r\n            if (upgradeIdentifier[_upgradeAddress] != 0) {\r\n                // If upgrade hash has no record then revert since must be second upgrade\r\n                require(\r\n                    upgradeIdentifier[_upgradeAddress] == upgradeHash,\r\n                    \"Another update already in progress.\"\r\n                );\r\n\r\n                upgradeIdentifier[_upgradeAddress] = 0;\r\n\r\n            } else {\r\n                upgradeIdentifier[_upgradeAddress] = upgradeHash;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Verifies that upgrade address matches with hash of upgrade. Removes upgrade from timelockUpgrades\r\n     * and sets upgradeIdentifier to 0 for passed upgradeAddress, allowing for another upgrade.\r\n     *\r\n     * @param _upgradeAddress       The address of the trading pool being updated\r\n     * @param _upgradeHash          Keccack256 hash that uniquely identifies function called and arguments\r\n     */\r\n    function removeRegisteredUpgradeInternal(\r\n        address _upgradeAddress,\r\n        bytes32 _upgradeHash\r\n    )\r\n        internal\r\n    {\r\n        require(\r\n            upgradeIdentifier[_upgradeAddress] == _upgradeHash,\r\n            \"Passed upgrade hash does not match upgrade address.\"\r\n        );\r\n\r\n        UnrestrictedTimeLockUpgrade.removeRegisteredUpgradeInternal(_upgradeHash);\r\n\r\n        upgradeIdentifier[_upgradeAddress] = 0;\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/lib/AddressArrayUtils.sol\r\n\r\n// Pulled in from Cryptofin Solidity package in order to control Solidity compiler version\r\n// https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\nlibrary AddressArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (0, false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        bool isIn;\r\n        (, isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        address[] memory newAddresses = new address[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newAddresses[aLength + j] = B[j];\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Returns the array with a appended to A.\r\n     * @param A The first array\r\n     * @param a The value to append\r\n     * @return Returns A appended by a\r\n     */\r\n    function append(address[] memory A, address a) internal pure returns (address[] memory) {\r\n        address[] memory newAddresses = new address[](A.length + 1);\r\n        for (uint256 i = 0; i < A.length; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        newAddresses[A.length] = a;\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return The intersection of the two arrays\r\n     */\r\n    function intersect(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 length = A.length;\r\n        bool[] memory includeMap = new bool[](length);\r\n        uint256 newLength = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (contains(B, A[i])) {\r\n                includeMap[i] = true;\r\n                newLength++;\r\n            }\r\n        }\r\n        address[] memory newAddresses = new address[](newLength);\r\n        uint256 j = 0;\r\n        for (uint256 k = 0; k < length; k++) {\r\n            if (includeMap[k]) {\r\n                newAddresses[j] = A[k];\r\n                j++;\r\n            }\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Returns the union of the two arrays. Order is not guaranteed.\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return The union of the two arrays\r\n     */\r\n    function union(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        address[] memory leftDifference = difference(A, B);\r\n        address[] memory rightDifference = difference(B, A);\r\n        address[] memory intersection = intersect(A, B);\r\n        return extend(leftDifference, extend(intersection, rightDifference));\r\n    }\r\n\r\n    /**\r\n     * Computes the difference of two arrays. Assumes there are no duplicates.\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return The difference of the two arrays\r\n     */\r\n    function difference(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 length = A.length;\r\n        bool[] memory includeMap = new bool[](length);\r\n        uint256 count = 0;\r\n        // First count the new length because can't push for in-memory arrays\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address e = A[i];\r\n            if (!contains(B, e)) {\r\n                includeMap[i] = true;\r\n                count++;\r\n            }\r\n        }\r\n        address[] memory newAddresses = new address[](count);\r\n        uint256 j = 0;\r\n        for (uint256 k = 0; k < length; k++) {\r\n            if (includeMap[k]) {\r\n                newAddresses[j] = A[k];\r\n                j++;\r\n            }\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * Resulting ordering is not guaranteed\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newAddresses[j - 1] = A[j];\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n\r\n    /**\r\n     * @return Returns the new array\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert();\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not there's a duplicate. Runs in O(n^2).\r\n     * @param A Array to search\r\n     * @return Returns true if duplicate, false otherwise\r\n     */\r\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\r\n        if (A.length == 0) {\r\n            return false;\r\n        }\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (A[i] == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the two arrays are equal.\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return True is the arrays are equal, false if not.\r\n     */\r\n    function isEqual(address[] memory A, address[] memory B) internal pure returns (bool) {\r\n        if (A.length != B.length) {\r\n            return false;\r\n        }\r\n        for (uint256 i = 0; i < A.length; i++) {\r\n            if (A[i] != B[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: set-protocol-contracts/contracts/lib/WhiteList.sol\r\n\r\n/*\r\n    Copyright 2018 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @author Set Protocol\r\n *\r\n * Generic whitelist for addresses\r\n */\r\ncontract WhiteList is\r\n    Ownable,\r\n    TimeLockUpgrade\r\n{\r\n    using AddressArrayUtils for address[];\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    address[] public addresses;\r\n    mapping(address => bool) public whiteList;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event AddressAdded(\r\n        address _address\r\n    );\r\n\r\n    event AddressRemoved(\r\n        address _address\r\n    );\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Constructor function for Whitelist\r\n     *\r\n     * Allow initial addresses to be passed in so a separate transaction is not required for each\r\n     *\r\n     * @param _initialAddresses    Starting set of addresses to whitelist\r\n     */\r\n    constructor(\r\n        address[] memory _initialAddresses\r\n    )\r\n        public\r\n    {\r\n        // Add each of initial addresses to state\r\n        for (uint256 i = 0; i < _initialAddresses.length; i++) {\r\n            address addressToAdd = _initialAddresses[i];\r\n\r\n            addresses.push(addressToAdd);\r\n            whiteList[addressToAdd] = true;\r\n        }\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * Add an address to the whitelist\r\n     *\r\n     * @param _address    Address to add to the whitelist\r\n     */\r\n    function addAddress(\r\n        address _address\r\n    )\r\n        external\r\n        onlyOwner\r\n        timeLockUpgrade\r\n    {\r\n        require(\r\n            !whiteList[_address],\r\n            \"WhiteList.addAddress: Address has already been whitelisted.\"\r\n        );\r\n\r\n        addresses.push(_address);\r\n\r\n        whiteList[_address] = true;\r\n\r\n        emit AddressAdded(\r\n            _address\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Remove an address from the whitelist\r\n     *\r\n     * @param _address    Address to remove from the whitelist\r\n     */\r\n    function removeAddress(\r\n        address _address\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            whiteList[_address],\r\n            \"WhiteList.removeAddress: Address is not current whitelisted.\"\r\n        );\r\n\r\n        addresses = addresses.remove(_address);\r\n\r\n        whiteList[_address] = false;\r\n\r\n        emit AddressRemoved(\r\n            _address\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return array of all whitelisted addresses\r\n     *\r\n     * @return address[]      Array of addresses\r\n     */\r\n    function validAddresses()\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return addresses;\r\n    }\r\n\r\n    /**\r\n     * Verifies an array of addresses against the whitelist\r\n     *\r\n     * @param  _addresses    Array of addresses to verify\r\n     * @return bool          Whether all addresses in the list are whitelsited\r\n     */\r\n    function areValidAddresses(\r\n        address[] calldata _addresses\r\n    )\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            if (!whiteList[_addresses[i]]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/managers/allocators/ISocialAllocator.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title ISocialAllocator\r\n * @author Set Protocol\r\n *\r\n * Interface for interacting with SocialAllocator contracts\r\n */\r\ninterface ISocialAllocator {\r\n\r\n    /*\r\n     * Determine the next allocation to rebalance into.\r\n     *\r\n     * @param  _targetBaseAssetAllocation       Target allocation of the base asset\r\n     * @return ISetToken                        The address of the proposed nextSet\r\n     */\r\n    function determineNewAllocation(\r\n        uint256 _targetBaseAssetAllocation\r\n    )\r\n        external\r\n        returns (ISetToken);\r\n\r\n    /*\r\n     * Calculate value of passed collateral set.\r\n     *\r\n     * @param  _collateralSet        Instance of current set collateralizing RebalancingSetToken\r\n     * @return uint256               USD value of passed Set\r\n     */\r\n    function calculateCollateralSetValue(\r\n        ISetToken _collateralSet\r\n    )\r\n        external\r\n        view\r\n        returns(uint256);\r\n}\r\n\r\n// File: contracts/managers/lib/SocialTradingLibrary.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n/**\r\n * @title SocialTradingLibrary\r\n * @author Set Protocol\r\n *\r\n * Library for use in SocialTrading system.\r\n */\r\nlibrary SocialTradingLibrary {\r\n\r\n    /* ============ Structs ============ */\r\n    struct PoolInfo {\r\n        address trader;                 // Address allowed to make admin and allocation decisions\r\n        ISocialAllocator allocator;     // Allocator used to make collateral Sets, defines asset pair being used\r\n        uint256 currentAllocation;      // Current base asset allocation of tradingPool\r\n        uint256 newEntryFee;            // New fee percentage to change to after time lock passes, defaults to 0\r\n        uint256 feeUpdateTimestamp;     // Timestamp when fee update process can be finalized, defaults to maxUint256\r\n    }\r\n}\r\n\r\n// File: contracts/managers/SocialTradingManager.sol\r\n\r\n/*\r\n    Copyright 2019 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SocialTradingManager\r\n * @author Set Protocol\r\n *\r\n * Singleton manager contract through which all social trading sets are managed. Traders can choose a percentage\r\n * between 0 and 100 for each rebalance. The trading pair used for each trading pool is defined by the allocator\r\n * passed in on pool creation. Only compatible with RebalancingSetTokenV2 constracts. All permissioned functions\r\n * on the RebalancingSetTokenV2 must be called through the administrative functions exposed on this contract.\r\n *\r\n * CHANGELOG: As of version 1.1.31 the REBALANCING_SET_NATURAL_UNIT has been changed from 1e6 to 1e8.\r\n */\r\ncontract SocialTradingManager is\r\n    WhiteList\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event TradingPoolCreated(\r\n        address indexed trader,\r\n        ISocialAllocator indexed allocator,\r\n        address indexed tradingPool,\r\n        uint256 startingAllocation\r\n    );\r\n\r\n    event AllocationUpdate(\r\n        address indexed tradingPool,\r\n        uint256 oldAllocation,\r\n        uint256 newAllocation\r\n    );\r\n\r\n    event NewTrader(\r\n        address indexed tradingPool,\r\n        address indexed oldTrader,\r\n        address indexed newTrader\r\n    );\r\n\r\n    /* ============ Modifier ============ */\r\n\r\n    modifier onlyTrader(IRebalancingSetTokenV2 _tradingPool) {\r\n        require(\r\n            msg.sender == trader(_tradingPool),\r\n            \"Sender must be trader\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* ============ Constants ============ */\r\n\r\n    uint256 public constant REBALANCING_SET_NATURAL_UNIT = 1e8;\r\n    uint public constant ONE_PERCENT = 1e16;\r\n    uint256 constant public MAXIMUM_ALLOCATION = 1e18;\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    ICore public core;\r\n    address public factory;\r\n    mapping(address => SocialTradingLibrary.PoolInfo) public pools;\r\n\r\n    uint256 public maxEntryFee;\r\n    uint256 public feeUpdateTimelock;\r\n\r\n    /*\r\n     * SocialTradingManager constructor.\r\n     *\r\n     * @param  _core                            The address of the Core contract\r\n     * @param  _factory                         Factory to use for RebalancingSetToken creation\r\n     * @param  _whiteListedAllocators           List of allocator addresses to WhiteList\r\n     * @param  _maxEntryFee                     Max entry fee when updating fees in a scaled decimal value\r\n     *                                          (e.g. 1% = 1e16, 1bp = 1e14)\r\n     * @param  _feeUpdateTimelock               Amount of time trader must wait between starting fee update\r\n     *                                          and finalizing fee update\r\n     */\r\n    constructor(\r\n        ICore _core,\r\n        address _factory,\r\n        address[] memory _whiteListedAllocators,\r\n        uint256 _maxEntryFee,\r\n        uint256 _feeUpdateTimelock\r\n    )\r\n        public\r\n        WhiteList(_whiteListedAllocators)\r\n    {\r\n        core = _core;\r\n        factory = _factory;\r\n\r\n        maxEntryFee = _maxEntryFee;\r\n        feeUpdateTimelock = _feeUpdateTimelock;\r\n    }\r\n\r\n    /* ============ External ============ */\r\n\r\n    /*\r\n     * Create a trading pool. Create or select new collateral and create RebalancingSetToken contract to\r\n     * administer pool. Save relevant data to pool's entry in pools state variable under the Rebalancing\r\n     * Set Token address.\r\n     *\r\n     * @param _tradingPairAllocator             The address of the allocator the trader wishes to use\r\n     * @param _startingBaseAssetAllocation      Starting base asset allocation in a scaled decimal value\r\n     *                                          (e.g. 100% = 1e18, 1% = 1e16)\r\n     * @param _startingUSDValue                 Starting value of one share of the trading pool to 18 decimals of precision\r\n     * @param _name                             The name of the new RebalancingSetTokenV2\r\n     * @param _symbol                           The symbol of the new RebalancingSetTokenV2\r\n     * @param _rebalancingSetCallData           Byte string containing additional call parameters to pass to factory\r\n     */\r\n    function createTradingPool(\r\n        ISocialAllocator _tradingPairAllocator,\r\n        uint256 _startingBaseAssetAllocation,\r\n        uint256 _startingUSDValue,\r\n        bytes32 _name,\r\n        bytes32 _symbol,\r\n        bytes calldata _rebalancingSetCallData\r\n    )\r\n        external\r\n    {\r\n        // Validate relevant params\r\n        validateCreateTradingPool(_tradingPairAllocator, _startingBaseAssetAllocation, _rebalancingSetCallData);\r\n\r\n        // Get collateral Set\r\n        ISetToken collateralSet = _tradingPairAllocator.determineNewAllocation(\r\n            _startingBaseAssetAllocation\r\n        );\r\n\r\n        uint256[] memory unitShares = new uint256[](1);\r\n\r\n        // Value collateral\r\n        uint256 collateralValue = _tradingPairAllocator.calculateCollateralSetValue(\r\n            collateralSet\r\n        );\r\n\r\n        // unitShares is equal to _startingUSDValue divided by colalteral Value\r\n        unitShares[0] = _startingUSDValue.mul(REBALANCING_SET_NATURAL_UNIT).div(collateralValue);\r\n\r\n        address[] memory components = new address[](1);\r\n        components[0] = address(collateralSet);\r\n\r\n        // Create tradingPool\r\n        address tradingPool = core.createSet(\r\n            factory,\r\n            components,\r\n            unitShares,\r\n            REBALANCING_SET_NATURAL_UNIT,\r\n            _name,\r\n            _symbol,\r\n            _rebalancingSetCallData\r\n        );\r\n\r\n        pools[tradingPool].trader = msg.sender;\r\n        pools[tradingPool].allocator = _tradingPairAllocator;\r\n        pools[tradingPool].currentAllocation = _startingBaseAssetAllocation;\r\n        pools[tradingPool].feeUpdateTimestamp = 0;\r\n\r\n        emit TradingPoolCreated(\r\n            msg.sender,\r\n            _tradingPairAllocator,\r\n            tradingPool,\r\n            _startingBaseAssetAllocation\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Update trading pool allocation. Issue new collateral Set and initiate rebalance on RebalancingSetTokenV2.\r\n     *\r\n     * @param _tradingPool        The address of the trading pool being updated\r\n     * @param _newAllocation      New base asset allocation in a scaled decimal value\r\n     *                                          (e.g. 100% = 1e18, 1% = 1e16)\r\n     * @param _liquidatorData     Extra parameters passed to the liquidator\r\n     */\r\n    function updateAllocation(\r\n        IRebalancingSetTokenV2 _tradingPool,\r\n        uint256 _newAllocation,\r\n        bytes calldata _liquidatorData\r\n    )\r\n        external\r\n        onlyTrader(_tradingPool)\r\n    {\r\n        // Validate updateAllocation params\r\n        validateAllocationUpdate(_tradingPool, _newAllocation);\r\n\r\n        // Create nextSet collateral\r\n        ISetToken nextSet = allocator(_tradingPool).determineNewAllocation(\r\n            _newAllocation\r\n        );\r\n\r\n        // Trigger start rebalance on RebalancingSetTokenV2\r\n        _tradingPool.startRebalance(address(nextSet), _liquidatorData);\r\n\r\n        emit AllocationUpdate(\r\n            address(_tradingPool),\r\n            currentAllocation(_tradingPool),\r\n            _newAllocation\r\n        );\r\n\r\n        // Save new allocation\r\n        pools[address(_tradingPool)].currentAllocation = _newAllocation;\r\n    }\r\n\r\n    /*\r\n     * Start fee update process, set fee update timestamp and commit to new fee.\r\n     *\r\n     * @param _tradingPool        The address of the trading pool being updated\r\n     * @param _newEntryFee        New entry fee in a scaled decimal value\r\n     *                              (e.g. 100% = 1e18, 1% = 1e16)\r\n     */\r\n    function initiateEntryFeeChange(\r\n        IRebalancingSetTokenV2 _tradingPool,\r\n        uint256 _newEntryFee\r\n    )\r\n        external\r\n        onlyTrader(_tradingPool)\r\n    {\r\n        // Validate new entry fee doesn't exceed max\r\n        validateNewEntryFee(_newEntryFee);\r\n\r\n        // Log new entryFee and timestamp to start timelock from\r\n        pools[address(_tradingPool)].feeUpdateTimestamp = block.timestamp.add(feeUpdateTimelock);\r\n        pools[address(_tradingPool)].newEntryFee = _newEntryFee;\r\n    }\r\n\r\n    /*\r\n     * Finalize fee update, change fee on RebalancingSetTokenV2 if time lock period has elapsed.\r\n     *\r\n     * @param _tradingPool        The address of the trading pool being updated\r\n     */\r\n    function finalizeEntryFeeChange(\r\n        IRebalancingSetTokenV2 _tradingPool\r\n    )\r\n        external\r\n        onlyTrader(_tradingPool)\r\n    {\r\n        // If feeUpdateTimestamp is equal to 0 indicates initiate wasn't called\r\n        require(\r\n            feeUpdateTimestamp(_tradingPool) != 0,\r\n            \"SocialTradingManager.finalizeSetFeeRecipient: Must initiate fee change first.\"\r\n        );\r\n\r\n        // Current block timestamp must exceed feeUpdateTimestamp\r\n        require(\r\n            block.timestamp >= feeUpdateTimestamp(_tradingPool),\r\n            \"SocialTradingManager.finalizeSetFeeRecipient: Time lock period must elapse to update fees.\"\r\n        );\r\n\r\n        // Reset timestamp to avoid reentrancy\r\n        pools[address(_tradingPool)].feeUpdateTimestamp = 0;\r\n\r\n        // Update fee on RebalancingSetTokenV2\r\n        _tradingPool.setEntryFee(newEntryFee(_tradingPool));\r\n\r\n        // Reset newEntryFee\r\n        pools[address(_tradingPool)].newEntryFee = 0;\r\n    }\r\n\r\n    /*\r\n     * Update trader allowed to manage trading pool.\r\n     *\r\n     * @param _tradingPool        The address of the trading pool being updated\r\n     * @param _newTrader          Address of new traders\r\n     */\r\n    function setTrader(\r\n        IRebalancingSetTokenV2 _tradingPool,\r\n        address _newTrader\r\n    )\r\n        external\r\n        onlyTrader(_tradingPool)\r\n    {\r\n        emit NewTrader(\r\n            address(_tradingPool),\r\n            trader(_tradingPool),\r\n            _newTrader\r\n        );\r\n\r\n        pools[address(_tradingPool)].trader = _newTrader;\r\n    }\r\n\r\n    /*\r\n     * Update liquidator used by tradingPool.\r\n     *\r\n     * @param _tradingPool        The address of the trading pool being updated\r\n     * @param _newLiquidator      Address of new Liquidator\r\n     */\r\n    function setLiquidator(\r\n        IRebalancingSetTokenV2 _tradingPool,\r\n        ILiquidator _newLiquidator\r\n    )\r\n        external\r\n        onlyTrader(_tradingPool)\r\n    {\r\n        _tradingPool.setLiquidator(_newLiquidator);\r\n    }\r\n\r\n    /*\r\n     * Update fee recipient of tradingPool.\r\n     *\r\n     * @param _tradingPool          The address of the trading pool being updated\r\n     * @param _newFeeRecipient      Address of new fee recipient\r\n     */\r\n    function setFeeRecipient(\r\n        IRebalancingSetTokenV2 _tradingPool,\r\n        address _newFeeRecipient\r\n    )\r\n        external\r\n        onlyTrader(_tradingPool)\r\n    {\r\n        _tradingPool.setFeeRecipient(_newFeeRecipient);\r\n    }\r\n\r\n    /* ============ Internal ============ */\r\n\r\n    /*\r\n     * Validate trading pool creation. Make sure allocation is valid, allocator is white listed and\r\n     * manager passed in rebalancingSetCallData is this address.\r\n     *\r\n     * @param _tradingPairAllocator             The address of allocator being used in trading pool\r\n     * @param _startingBaseAssetAllocation      New base asset allocation in a scaled decimal value\r\n     *                                          (e.g. 100% = 1e18, 1% = 1e16)\r\n     * @param _rebalancingSetCallData           Byte string containing RebalancingSetTokenV2 call parameters\r\n     */\r\n    function validateCreateTradingPool(\r\n        ISocialAllocator _tradingPairAllocator,\r\n        uint256 _startingBaseAssetAllocation,\r\n        bytes memory _rebalancingSetCallData\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        validateAllocationAmount(_startingBaseAssetAllocation);\r\n\r\n        validateManagerAddress(_rebalancingSetCallData);\r\n\r\n        require(\r\n            whiteList[address(_tradingPairAllocator)],\r\n            \"SocialTradingManager.validateCreateTradingPool: Passed allocator is not valid.\"\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Validate trading pool allocation update. Make sure allocation is valid,\r\n     * and RebalancingSet is in valid state.\r\n     *\r\n     * @param _tradingPool        The address of the trading pool being updated\r\n     * @param _newAllocation      New base asset allocation in a scaled decimal value\r\n     *                                          (e.g. 100% = 1e18, 1% = 1e16)\r\n     */\r\n    function validateAllocationUpdate(\r\n        IRebalancingSetTokenV2 _tradingPool,\r\n        uint256 _newAllocation\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        validateAllocationAmount(_newAllocation);\r\n\r\n        // If current allocation is 0/100%, cannot be the same allocation\r\n        uint256 currentAllocationValue = currentAllocation(_tradingPool);\r\n        require(\r\n            !(currentAllocationValue == MAXIMUM_ALLOCATION && _newAllocation == MAXIMUM_ALLOCATION) &&\r\n            !(currentAllocationValue == 0 && _newAllocation == 0),\r\n            \"SocialTradingManager.validateAllocationUpdate: Invalid allocation\"\r\n        );\r\n\r\n        // Require that enough time has passed from last rebalance\r\n        uint256 lastRebalanceTimestamp = _tradingPool.lastRebalanceTimestamp();\r\n        uint256 rebalanceInterval = _tradingPool.rebalanceInterval();\r\n        require(\r\n            block.timestamp >= lastRebalanceTimestamp.add(rebalanceInterval),\r\n            \"SocialTradingManager.validateAllocationUpdate: Rebalance interval not elapsed\"\r\n        );\r\n\r\n        // Require that Rebalancing Set Token is in Default state, won't allow for re-proposals\r\n        // because malicious actor could prevent token from ever rebalancing\r\n        require(\r\n            _tradingPool.rebalanceState() == RebalancingLibrary.State.Default,\r\n            \"SocialTradingManager.validateAllocationUpdate: State must be in Default\"\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Validate passed allocation amount.\r\n     *\r\n     * @param _allocation      New base asset allocation in a scaled decimal value\r\n     *                                          (e.g. 100% = 1e18, 1% = 1e16)\r\n     */\r\n    function validateAllocationAmount(\r\n        uint256 _allocation\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(\r\n            _allocation <= MAXIMUM_ALLOCATION,\r\n            \"Passed allocation must not exceed 100%.\"\r\n        );\r\n\r\n        require(\r\n            _allocation.mod(ONE_PERCENT) == 0,\r\n            \"Passed allocation must be multiple of 1%.\"\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Validate new entry fee.\r\n     *\r\n     * @param _entryFee      New entry fee in a scaled decimal value\r\n     *                          (e.g. 100% = 1e18, 1% = 1e16)\r\n     */\r\n    function validateNewEntryFee(\r\n        uint256 _entryFee\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        require(\r\n            _entryFee <= maxEntryFee,\r\n            \"SocialTradingManager.validateNewEntryFee: Passed entry fee must not exceed maxEntryFee.\"\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Validate passed manager in RebalancingSetToken bytes arg matches this address.\r\n     *\r\n     * @param _rebalancingSetCallData       Byte string containing RebalancingSetTokenV2 call parameters\r\n     */\r\n    function validateManagerAddress(\r\n        bytes memory _rebalancingSetCallData\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        address manager;\r\n\r\n        assembly {\r\n            manager := mload(add(_rebalancingSetCallData, 32))   // manager slot\r\n        }\r\n\r\n        require(\r\n            manager == address(this),\r\n            \"SocialTradingManager.validateCallDataArgs: Passed manager address is not this address.\"\r\n        );\r\n    }\r\n\r\n    function allocator(IRebalancingSetTokenV2 _tradingPool) internal view returns (ISocialAllocator) {\r\n        return pools[address(_tradingPool)].allocator;\r\n    }\r\n\r\n    function trader(IRebalancingSetTokenV2 _tradingPool) internal view returns (address) {\r\n        return pools[address(_tradingPool)].trader;\r\n    }\r\n\r\n    function currentAllocation(IRebalancingSetTokenV2 _tradingPool) internal view returns (uint256) {\r\n        return pools[address(_tradingPool)].currentAllocation;\r\n    }\r\n\r\n    function feeUpdateTimestamp(IRebalancingSetTokenV2 _tradingPool) internal view returns (uint256) {\r\n        return pools[address(_tradingPool)].feeUpdateTimestamp;\r\n    }\r\n\r\n    function newEntryFee(IRebalancingSetTokenV2 _tradingPool) internal view returns (uint256) {\r\n        return pools[address(_tradingPool)].newEntryFee;\r\n    }\r\n}\r\n\r\n// File: contracts/managers/SocialTradingManagerV2.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.7;\r\npragma experimental \"ABIEncoderV2\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SocialTradingManagerV2\r\n * @author Set Protocol\r\n *\r\n * Singleton manager contract through which all social trading v2 sets are managed. Inherits from SocialTradingManager\r\n * and adds functionality to adjust performance based fees.\r\n */\r\ncontract SocialTradingManagerV2 is\r\n    SocialTradingManager,\r\n    LimitOneUpgrade\r\n{\r\n    /*\r\n     * SocialTradingManager constructor.\r\n     *\r\n     * @param  _core                            The address of the Core contract\r\n     * @param  _factory                         Factory to use for RebalancingSetToken creation\r\n     * @param  _whiteListedAllocators           List of allocator addresses to WhiteList\r\n     * @param  _maxEntryFee                     Max entry fee when updating fees in a scaled decimal value\r\n     *                                          (e.g. 1% = 1e16, 1bp = 1e14)\r\n     * @param  _feeUpdateTimelock               Amount of time trader must wait between starting fee update\r\n     *                                          and finalizing fee update\r\n     */\r\n    constructor(\r\n        ICore _core,\r\n        address _factory,\r\n        address[] memory _whiteListedAllocators,\r\n        uint256 _maxEntryFee,\r\n        uint256 _feeUpdateTimelock\r\n    )\r\n        public\r\n        SocialTradingManager(\r\n            _core,\r\n            _factory,\r\n            _whiteListedAllocators,\r\n            _maxEntryFee,\r\n            _feeUpdateTimelock\r\n        )\r\n    {}\r\n\r\n    /* ============ External ============ */\r\n\r\n    /**\r\n     * Allows traders to update fees on their Set. Only one fee update allowed at a time and timelocked.\r\n     *\r\n     * @param _tradingPool       The address of the trading pool being updated\r\n     * @param _newFeeCallData    Bytestring representing feeData to pass to fee calculator\r\n     */\r\n    function adjustFee(\r\n        address _tradingPool,\r\n        bytes calldata _newFeeCallData\r\n    )\r\n        external\r\n        onlyTrader(IRebalancingSetTokenV2(_tradingPool))\r\n        limitOneUpgrade(_tradingPool)\r\n        timeLockUpgrade\r\n    {\r\n        IRebalancingSetTokenV3(_tradingPool).adjustFee(_newFeeCallData);\r\n    }\r\n\r\n    /**\r\n     * External function to remove upgrade. Modifiers should be added to restrict usage.\r\n     *\r\n     * @param _tradingPool      The address of the trading pool being updated\r\n     * @param _upgradeHash      Keccack256 hash that uniquely identifies function called and arguments\r\n     */\r\n    function removeRegisteredUpgrade(\r\n        address _tradingPool,\r\n        bytes32 _upgradeHash\r\n    )\r\n        external\r\n        onlyTrader(IRebalancingSetTokenV2(_tradingPool))\r\n    {\r\n        LimitOneUpgrade.removeRegisteredUpgradeInternal(_tradingPool, _upgradeHash);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MAXIMUM_ALLOCATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_newAllocation\",\"type\":\"uint256\"},{\"name\":\"_liquidatorData\",\"type\":\"bytes\"}],\"name\":\"updateAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timeLockedUpgrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_newTrader\",\"type\":\"address\"}],\"name\":\"setTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"areValidAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_newEntryFee\",\"type\":\"uint256\"}],\"name\":\"initiateEntryFeeChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_upgradeHash\",\"type\":\"bytes32\"}],\"name\":\"removeRegisteredUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeUpdateTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPairAllocator\",\"type\":\"address\"},{\"name\":\"_startingBaseAssetAllocation\",\"type\":\"uint256\"},{\"name\":\"_startingUSDValue\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_rebalancingSetCallData\",\"type\":\"bytes\"}],\"name\":\"createTradingPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxEntryFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_newLiquidator\",\"type\":\"address\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeLockPeriod\",\"type\":\"uint256\"}],\"name\":\"setTimeLockPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"},{\"name\":\"_newFeeCallData\",\"type\":\"bytes\"}],\"name\":\"adjustFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"name\":\"trader\",\"type\":\"address\"},{\"name\":\"allocator\",\"type\":\"address\"},{\"name\":\"currentAllocation\",\"type\":\"uint256\"},{\"name\":\"newEntryFee\",\"type\":\"uint256\"},{\"name\":\"feeUpdateTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradingPool\",\"type\":\"address\"}],\"name\":\"finalizeEntryFeeChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REBALANCING_SET_NATURAL_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_core\",\"type\":\"address\"},{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_whiteListedAllocators\",\"type\":\"address[]\"},{\"name\":\"_maxEntryFee\",\"type\":\"uint256\"},{\"name\":\"_feeUpdateTimelock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradeHash\",\"type\":\"bytes32\"}],\"name\":\"RemoveRegisteredUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"allocator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tradingPool\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"startingAllocation\",\"type\":\"uint256\"}],\"name\":\"TradingPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradingPool\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newAllocation\",\"type\":\"uint256\"}],\"name\":\"AllocationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradingPool\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldTrader\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newTrader\",\"type\":\"address\"}],\"name\":\"NewTrader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_upgradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UpgradeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SocialTradingManagerV2","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000345ab8af61d107c3972f0d73640e33d8ac545a070000000000000000000000002058a1d2e94d93b3777a3b28dd746373241493cd00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000708000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000047d9cd8fa8b2be408ceb23b6c2523804d7571e910000000000000000000000002220ea3a29b40fb67c7b613b4c1554637c24fef70000000000000000000000005a5aa2482228e6e7dee2d182f3f5d3baf302ee8e000000000000000000000000b94c3bf4368a00e1447b91d12298de3fbd5029ee0000000000000000000000000a8bf720181adb510dcab12fb69c0dc5afa3e9d60000000000000000000000001fb641bd0c038c6f3be4c7f42cc343635a7dc20200000000000000000000000086ee1045031edf02d67112f4ed6f83784c240746000000000000000000000000740914a02d10a4b58ee0f14dcdb6b0d403d463230000000000000000000000003d8e48f1509fd9d430b0f822e63817b967b84c4a0000000000000000000000006b2a714073a8e0be95248ca235b7fd818bdd25bf0000000000000000000000008e496b85b47a64f948978831b66d4fa80af1a1fb000000000000000000000000f62dec54ab99d1e52bb7df49e2a799b73c9c32ae000000000000000000000000a20cfd3c2abdc32e8374049d932f6da6a05293660000000000000000000000007237b07f4828e9d2bea879baaf9f70fb8d3cba8e","Library":"","LicenseType":"Apache-2.0","SwarmSource":"bzzr://9dc195d6120b429ab518ac1d5b0a37b335f3d8e90b855aa26273452d7237fec2"}]}