{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IPriceOracleGetter.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* @title IPriceOracleGetter interface\r\n* @notice Interface for the Aave price oracle.\r\n**/\r\n\r\ninterface IPriceOracleGetter {\r\n    /**\r\n    * @dev returns the asset price in ETH\r\n    * @param _asset the address of the asset\r\n    * @return the ETH price of the asset\r\n    **/\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IChainlinkAggregator.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IChainlinkAggregator {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\r\n}\r\n\r\n// File: contracts/libraries/EthAddressLib.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary EthAddressLib {\r\n\r\n    /**\r\n    * @dev returns the address used within the protocol to identify ETH\r\n    * @return the address assigned to ETH\r\n     */\r\n    function ethAddress() internal pure returns(address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n}\r\n\r\n// File: contracts/misc/ChainlinkProxyPriceProvider.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/// @title ChainlinkProxyPriceProvider\r\n/// @author Aave\r\n/// @notice Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator\r\n///         smart contracts as primary option\r\n/// - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle\r\n/// - Owned by the Aave governance system, allowed to add sources for assets, replace them\r\n///   and change the fallbackOracle\r\ncontract ChainlinkProxyPriceProvider is IPriceOracleGetter, Ownable {\r\n\r\n    event AssetSourceUpdated(address indexed asset, address indexed source);\r\n    event FallbackOracleUpdated(address indexed fallbackOracle);\r\n\r\n    mapping(address => IChainlinkAggregator) private assetsSources;\r\n    IPriceOracleGetter private fallbackOracle;\r\n\r\n    /// @notice Constructor\r\n    /// @param _assets The addresses of the assets\r\n    /// @param _sources The address of the source of each asset\r\n    /// @param _fallbackOracle The address of the fallback oracle to use if the data of an\r\n    ///        aggregator is not consistent\r\n    constructor(address[] memory _assets, address[] memory _sources, address _fallbackOracle) public {\r\n        internalSetFallbackOracle(_fallbackOracle);\r\n        internalSetAssetsSources(_assets, _sources);\r\n    }\r\n\r\n    /// @notice External function called by the Aave governance to set or replace sources of assets\r\n    /// @param _assets The addresses of the assets\r\n    /// @param _sources The address of the source of each asset\r\n    function setAssetSources(address[] calldata _assets, address[] calldata _sources) external onlyOwner {\r\n        internalSetAssetsSources(_assets, _sources);\r\n    }\r\n\r\n    /// @notice Sets the fallbackOracle\r\n    /// - Callable only by the Aave governance\r\n    /// @param _fallbackOracle The address of the fallbackOracle\r\n    function setFallbackOracle(address _fallbackOracle) external onlyOwner {\r\n        internalSetFallbackOracle(_fallbackOracle);\r\n    }\r\n\r\n    /// @notice Internal function to set the sources for each asset\r\n    /// @param _assets The addresses of the assets\r\n    /// @param _sources The address of the source of each asset\r\n    function internalSetAssetsSources(address[] memory _assets, address[] memory _sources) internal {\r\n        require(_assets.length == _sources.length, \"INCONSISTENT_PARAMS_LENGTH\");\r\n        for (uint256 i = 0; i < _assets.length; i++) {\r\n            assetsSources[_assets[i]] = IChainlinkAggregator(_sources[i]);\r\n            emit AssetSourceUpdated(_assets[i], _sources[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Internal function to set the fallbackOracle\r\n    /// @param _fallbackOracle The address of the fallbackOracle\r\n    function internalSetFallbackOracle(address _fallbackOracle) internal {\r\n        fallbackOracle = IPriceOracleGetter(_fallbackOracle);\r\n        emit FallbackOracleUpdated(_fallbackOracle);\r\n    }\r\n\r\n    /// @notice Gets an asset price by address\r\n    /// @param _asset The asset address\r\n    function getAssetPrice(address _asset) public view returns(uint256) {\r\n        IChainlinkAggregator source = assetsSources[_asset];\r\n        if (_asset == EthAddressLib.ethAddress()) {\r\n            return 1 ether;\r\n        } else {\r\n            // If there is no registered source for the asset, call the fallbackOracle\r\n            if (address(source) == address(0)) {\r\n                return IPriceOracleGetter(fallbackOracle).getAssetPrice(_asset);\r\n            } else {\r\n                int256 _price = IChainlinkAggregator(source).latestAnswer();\r\n                if (_price > 0) {\r\n                    return uint256(_price);\r\n                } else {\r\n                    return IPriceOracleGetter(fallbackOracle).getAssetPrice(_asset);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Gets a list of prices from a list of assets addresses\r\n    /// @param _assets The list of assets addresses\r\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory) {\r\n        uint256[] memory prices = new uint256[](_assets.length);\r\n        for (uint256 i = 0; i < _assets.length; i++) {\r\n            prices[i] = getAssetPrice(_assets[i]);\r\n        }\r\n        return prices;\r\n    }\r\n\r\n    /// @notice Gets the address of the source for an asset address\r\n    /// @param _asset The address of the asset\r\n    /// @return address The address of the source\r\n    function getSourceOfAsset(address _asset) external view returns(address) {\r\n        return address(assetsSources[_asset]);\r\n    }\r\n\r\n    /// @notice Gets the address of the fallback oracle\r\n    /// @return address The addres of the fallback oracle\r\n    function getFallbackOracle() external view returns(address) {\r\n        return address(fallbackOracle);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_sources\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_fallbackOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"FallbackOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFallbackOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fallbackOracle\",\"type\":\"address\"}],\"name\":\"setFallbackOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkProxyPriceProvider","CompilerVersion":"v0.5.14+commit.1f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000260000000000000000000000000f67a8b0e3e0ee303422f78b4c5b8da60df80a59c000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000085d4780b73119b644ae5ecd22b376000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f5100000000000000000000000080fb784b7ed66730e8b1dbd9820afd29931aab030000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef0000000000000000000000001985365e9f78359a9b6ad760e32412f4a445e8620000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd2000000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f000000000000000000000000000000000000000000000000000000000000000f000000000000000000000000037e8f2125bf532f3e228991e051c8a7253b642c00000000000000000000000073ead35fd6a572ef763b13be65a9db96f7643577000000000000000000000000de54467873c3bcaa76421061036053e371721708000000000000000000000000a874fe207df445ff19e7482c746c4d3fd0cb9ace0000000000000000000000006d626ff97f0e89f6f983de425dc5b24a18de26ea0000000000000000000000001eeaf25f2ecbcaf204ecadc8db7b0db9da8453270000000000000000000000009b4e2579895efa2b4765063310dc4109a7641129000000000000000000000000b8b513d9cf440c1b6f5c7142120d611c94fc220c000000000000000000000000da3d675d50ff6c555973c4f0424964e1f6a4e7d3000000000000000000000000ecfa53a8bda4f0c4dd39c55cc8def3757acfdd07000000000000000000000000d0e785973390ff8e77a83961efdb4f271e6b81520000000000000000000000000133aa47b6197d0ba090bf2cd96626eb71ffd13c000000000000000000000000c89c4ed8f52bb17314022f6c0dcb26210c905c97000000000000000000000000a0f9d94f060836756ffc84db4c78d097ca8c23e8000000000000000000000000e23d1142de4e83c08bb048bcab54d50907390828","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://cc0c9190753cba20cea8f02e68f8af86d4cf0d4b2f79bfd550849deecdd80e9e"}]}