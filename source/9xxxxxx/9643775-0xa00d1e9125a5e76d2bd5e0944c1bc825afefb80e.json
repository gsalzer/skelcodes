{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Events {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC20 is ERC20Events {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _addr) public view returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract Ownable {\r\n  address private owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, 'authentication error');\r\n    _;\r\n  }\r\n  \r\n  function ownershipTransfer(address _addr) internal returns (bool) {\r\n        owner = _addr;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BlackList {\r\n    using SafeMath for uint256;\r\n    \r\n    event BlackListSetting(address indexed _addr, bool status);\r\n\r\n    mapping(address => bool) private blackList;\r\n    \r\n    function _blackListAdd(address _addr) internal returns (bool) {\r\n        blackList[_addr] = true; \r\n        emit BlackListSetting(_addr, true);\r\n        return true;\r\n    }\r\n\r\n    function _blackListRemove(address _addr) internal returns (bool) {\r\n        delete blackList[_addr];\r\n        emit BlackListSetting(_addr, false);\r\n        return true;\r\n    }\r\n    \r\n    function accountStatus(address _addr) public view returns (bool) {\r\n        return blackList[_addr];\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool private isPause;\r\n    \r\n    event PauseTransaction(address indexed _pauser, bool indexed status);\r\n\r\n    constructor () internal {\r\n        isPause = false;\r\n    }\r\n\r\n    modifier canTrans() {\r\n        require(!isPause, 'transaction is currently paused');\r\n        _;\r\n    }\r\n\r\n    function pauseSwitch() public onlyOwner {\r\n        isPause = !isPause;\r\n        emit PauseTransaction(msg.sender, isPause);\r\n    }\r\n}\r\n\r\ncontract FansiToken is ERC20, Ownable, BlackList, Pausable{\r\n    using SafeMath for uint256;\r\n    \r\n    event Mint(address indexed _addr, uint256 _value);\r\n    event Burn(address indexed _addr, uint256 _value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    uint256 public maxSupply;\r\n    uint256 public _totalSupply;\r\n    \r\n    constructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _maxSupply) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        maxSupply = _maxSupply;\r\n    }\r\n  \r\n    function transferOwnership(address _addr) public notNull(_addr) onlyOwner {\r\n        require(!accountStatus(_addr), 'address is on black list');\r\n        uint256 remainTokens = _balances[msg.sender];\r\n        _balances[msg.sender] = 0;\r\n        _balances[_addr] = _balances[_addr].add(remainTokens);\r\n        emit Transfer(msg.sender, _addr, remainTokens);\r\n        emit OwnershipTransferred(msg.sender, _addr);\r\n        ownershipTransfer(_addr);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(_balances[address(0x0)]);\r\n    }\r\n    \r\n    function balanceOf(address _addr) public view returns (uint256) {\r\n        return _balances[_addr];\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public canTrans returns (bool) {\r\n        require(!accountStatus(msg.sender), 'sender is on bloack list');\r\n        return transferFrom(msg.sender, _to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public notNull(_to) canTrans returns (bool)\r\n    {\r\n        require(!accountStatus(_from), 'sender is on bloack list');\r\n        require(_balances[_from] >= _value, \"insufficient balance\");\r\n        \r\n        if (_from != msg.sender) {\r\n            require(_allowances[_from][msg.sender] >= _value, \"allowance failed insufficient balance\");\r\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\r\n        }\r\n\r\n        _balances[_from] = _balances[_from].sub(_value);\r\n        _balances[_to] = _balances[_to].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public notNull(_spender) canTrans returns (bool) {\r\n        require(!accountStatus(msg.sender), 'sender is on bloack list');\r\n        require((_value == 0) || (_allowances[msg.sender][_spender] == 0), 'Please reset to zero before approval');\r\n\r\n        _allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferAnyERC20Token(address _tokenAddr, address _to, uint256 _value) public onlyOwner returns (bool success) \r\n    {\r\n        return ERC20(_tokenAddr).transfer(_to, _value);\r\n    }\r\n    \r\n    function reclaimEther(address payable _addr, uint256 _value) external onlyOwner{\r\n        require(!accountStatus(_addr), 'receiver is on bloack list');\r\n        require(address(this).balance >= _value);\r\n        _addr.transfer(_value);\r\n    }\r\n    \r\n    function mint(uint256 _value) public onlyOwner \r\n    {\r\n        require((_value > 0), 'mint amount should be greater than 0');\r\n        require(_totalSupply.add(_value) <= maxSupply, 'over maximum supply');\r\n        _balances[msg.sender] = _balances[msg.sender].add(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        \r\n        emit Transfer(address(this), msg.sender, _value);\r\n    }\r\n \r\n    function burn(uint256 _value) public onlyOwner \r\n    {\r\n        require(_balances[msg.sender] >= _value, 'insufficient balance');\r\n        _balances[msg.sender] = _balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        \r\n        emit Transfer(msg.sender, address(0x0), _value);\r\n    }\r\n    \r\n    function blackListAdd(address _addr) public onlyOwner returns (bool){\r\n        _blackListAdd(_addr);\r\n    }\r\n    \r\n    function blackListRemove(address _addr) public onlyOwner returns (bool){\r\n        _blackListRemove(_addr);\r\n    }\r\n    \r\n    function blackFundRemove(address _addr) public onlyOwner returns (bool) {\r\n        require(accountStatus(_addr), 'address not in black list');\r\n        _blackFundRemove(_addr);\r\n        return true;\r\n    }\r\n    \r\n    function _blackFundRemove(address addr) internal {\r\n        uint256 blackFunds = _balances[addr];\r\n        _balances[addr] = 0;\r\n        _totalSupply = _totalSupply.sub(blackFunds);\r\n\r\n        emit Transfer(addr, address(0x0), blackFunds);\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0x0), \"ERC20: request from the zero address\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blackListAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"accountStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blackListRemove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blackFundRemove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_pauser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlackListSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FansiToken","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000000a46616e7369546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000546414e5349000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://89108c6bb5bf623dfcff888e9ead1fed51568e0dfeb3656008a2335ad93d8a63"}]}