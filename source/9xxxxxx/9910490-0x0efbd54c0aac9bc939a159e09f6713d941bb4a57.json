{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Zerion Inc. <https://zerion.io>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.5;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\n// ERC20-style token metadata\r\n// 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE address is used for ETH\r\nstruct TokenMetadata {\r\n    address token;\r\n    string name;\r\n    string symbol;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address token;    // Address of token contract\r\n    string tokenType; // Token type (\"ERC20\" by default)\r\n    uint256 rate;     // Price per share (1e18)\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter interface.\r\n * @dev getMetadata() and getComponents() functions MUST be implemented.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ninterface TokenAdapter {\r\n\r\n    /**\r\n     * @dev MUST return TokenMetadata struct with ERC20-style token info.\r\n     * struct TokenMetadata {\r\n     *     address token;\r\n     *     string name;\r\n     *     string symbol;\r\n     *     uint8 decimals;\r\n     * }\r\n     */\r\n    function getMetadata(address token) external view returns (TokenMetadata memory);\r\n\r\n    /**\r\n    * @dev MUST return array of Component structs with underlying tokens rates for the given token.\r\n    * struct Component {\r\n    *     address token;    // Address of token contract\r\n    *     string tokenType; // Token type (\"ERC20\" by default)\r\n    *     uint256 rate;     // Price per share (1e18)\r\n    * }\r\n    */\r\n    function getComponents(address token) external view returns (Component[] memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev SmartToken contract interface.\r\n * Only the functions required for BancorTokenAdapter contract are added.\r\n * The SmartToken contract is available here\r\n * github.com/bancorprotocol/contracts/blob/master/solidity/contracts/token/SmartToken.sol.\r\n */\r\ninterface SmartToken {\r\n    function owner() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev BancorConverter contract interface.\r\n * Only the functions required for BancorTokenAdapter contract are added.\r\n * The BancorConverter contract is available here\r\n * github.com/bancorprotocol/contracts/blob/master/solidity/contracts/converter/BancorConverter.sol.\r\n */\r\ninterface BancorConverter {\r\n    function connectorTokenCount() external view returns (uint256);\r\n    function connectorTokens(uint256) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @dev ContractRegistry contract interface.\r\n * Only the functions required for BancorTokenAdapter contract are added.\r\n * The ContractRegistry contract is available here\r\n * github.com/bancorprotocol/contracts/blob/master/solidity/contracts/utility/ContractRegistry.sol.\r\n */\r\ninterface ContractRegistry {\r\n    function addressOf(bytes32) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @dev BancorFormula contract interface.\r\n * Only the functions required for BancorTokenAdapter contract are added.\r\n * The BancorFormula contract is available here\r\n * github.com/bancorprotocol/contracts/blob/master/solidity/contracts/converter/BancorFormula.sol.\r\n */\r\ninterface BancorFormula {\r\n    function calculateLiquidateReturn(\r\n        uint256,\r\n        uint256,\r\n        uint32,\r\n        uint256\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title Token adapter for SmartTokens.\r\n * @dev Implementation of TokenAdapter interface.\r\n * @author Igor Sobolev <sobolev@zerion.io>\r\n */\r\ncontract BancorTokenAdapter is TokenAdapter {\r\n\r\n    address internal constant REGISTRY = 0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4;\r\n\r\n    /**\r\n     * @return TokenMetadata struct with ERC20-style token info.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getMetadata(address token) external view override returns (TokenMetadata memory) {\r\n        return TokenMetadata({\r\n            token: token,\r\n            name: ERC20(token).name(),\r\n            symbol: ERC20(token).symbol(),\r\n            decimals: ERC20(token).decimals()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return Array of Component structs with underlying tokens rates for the given token.\r\n     * @dev Implementation of TokenAdapter interface function.\r\n     */\r\n    function getComponents(address token) external view override returns (Component[] memory) {\r\n        address formula = ContractRegistry(REGISTRY).addressOf(\"BancorFormula\");\r\n        uint256 totalSupply = SmartToken(token).totalSupply();\r\n        address converter = SmartToken(token).owner();\r\n        uint256 length = BancorConverter(converter).connectorTokenCount();\r\n\r\n        Component[] memory underlyingTokens = new Component[](length);\r\n\r\n        address underlyingToken;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            underlyingToken = BancorConverter(converter).connectorTokens(i);\r\n\r\n            underlyingTokens[i] = Component({\r\n                token: underlyingToken,\r\n                tokenType: \"ERC20\",\r\n                rate: BancorFormula(formula).calculateLiquidateReturn(\r\n                    totalSupply,\r\n                    ERC20(underlyingToken).balanceOf(converter),\r\n                    uint32(1000000),\r\n                    uint256(1e18)\r\n                )\r\n            });\r\n        }\r\n\r\n        return underlyingTokens;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getComponents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BancorTokenAdapter","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"ipfs://177b4663ecc245d0cbbafc303281e04aecaa98fcb2c080d5f7699d87a548c165"}]}