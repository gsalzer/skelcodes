{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\n    contract Attractor {\r\n        string  public name = \"Attractor\";\r\n        string  public symbol = \"ETHA1\";\r\n        string  public standard = \"ERC20 Attract Token v0.0 (1 percent)\";\r\n\r\n        uint256 public totalSupply;\r\n\r\n        mapping(uint256 => uint256) public totalSupplyDeep;\r\n        mapping(uint256 => uint256) public reserveDeep;\r\n\r\n        address owner;\r\n\r\n        event Transfer(\r\n            address indexed _from,\r\n            address indexed _to,\r\n            uint256 _value\r\n        );\r\n\r\n        event Approval(\r\n            address indexed _owner,\r\n            address indexed _spender,\r\n            uint256 _value\r\n        );\r\n\r\n        event TransferDeep(\r\n            address indexed _from,\r\n            address indexed _to,\r\n            uint256 _value,\r\n      uint256 _deep\r\n        );\r\n\r\n        event ApprovalDeep(\r\n            address indexed _owner,\r\n            address indexed _spender,\r\n            uint256 _value,\r\n            uint256 _deep\r\n        );\r\n\r\n        mapping(address => uint256) public balanceOf;\r\n        mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n        mapping(address => mapping(uint256 => uint256)) public balanceOfDeep;\r\n        mapping(address => mapping(address => mapping(uint256 => uint256))) public allowanceDeep;\r\n\r\n        mapping(address => uint256) supportOf;\r\n\r\n        constructor (uint256 _initialSupply) public {\r\n            balanceOf[msg.sender] = _initialSupply;\r\n            totalSupply = _initialSupply;\r\n\r\n            owner = msg.sender;\r\n        }\r\n\r\n        function transfer(address _to, uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n\r\n            balanceOf[msg.sender] -= _value;\r\n            balanceOf[_to] += _value;\r\n\r\n            balanceOfDeep[msg.sender][0] = balanceOf[msg.sender];\r\n            balanceOfDeep[_to][0] = balanceOf[_to];\r\n\r\n            emit Transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        function transferDeep(address _to, uint256 _value, uint256 _deep) public returns (bool success) {\r\n            require(balanceOfDeep[msg.sender][_deep] >= _value);\r\n\r\n            balanceOfDeep[msg.sender][_deep] -= _value;\r\n            balanceOfDeep[_to][_deep] += _value;\r\n\r\n            if(_deep == 0)\r\n            {\r\n                balanceOf[msg.sender] = balanceOfDeep[msg.sender][0];\r\n                balanceOf[_to] = balanceOfDeep[_to][0];\r\n\r\n                emit Transfer(msg.sender, _to, _value);\r\n            }\r\n\r\n            emit TransferDeep(msg.sender, _to, _value, _deep);\r\n\r\n            return true;\r\n        }\r\n\r\n        function approve(address _spender, uint256 _value) public returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            allowanceDeep[msg.sender][_spender][0] = _value;\r\n\r\n            emit Approval(msg.sender, _spender, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        function approveDeep(address _spender, uint256 _value, uint256 _deep) public returns (bool success) {\r\n            allowanceDeep[msg.sender][_spender][_deep] = _value;\r\n            if(_deep == 0)\r\n            {\r\n                allowance[msg.sender][_spender] = _value;\r\n                emit Approval(msg.sender, _spender, _value);\r\n            }\r\n\r\n            emit ApprovalDeep(msg.sender, _spender, _value, _deep);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(_value <= balanceOf[_from]);\r\n            require(_value <= allowance[_from][msg.sender]);\r\n\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n\r\n            allowance[_from][msg.sender] -= _value;\r\n\r\n            balanceOfDeep[_from][0] = balanceOf[_from];\r\n            balanceOfDeep[_to][0] = balanceOf[_to];\r\n\r\n            allowanceDeep[_from][msg.sender][0] = allowance[_from][msg.sender];\r\n\r\n            emit Transfer(_from, _to, _value);\r\n\r\n            return true;\r\n        }\r\n\r\n        function transferFromDeep(address _from, address _to, uint256 _value, uint256 _deep) public returns (bool success) {\r\n            require(_value <= balanceOfDeep[_from][_deep]);\r\n            require(_value <= allowanceDeep[_from][msg.sender][_deep]);\r\n\r\n            balanceOfDeep[_from][_deep] -= _value;\r\n            balanceOfDeep[_to][_deep] += _value;\r\n\r\n            allowanceDeep[_from][msg.sender][_deep] -= _value;\r\n\r\n            if(_deep == 0)\r\n            {\r\n                balanceOf[_from] = balanceOfDeep[_from][0];\r\n                balanceOf[_to] = balanceOfDeep[_to][0];\r\n\r\n                allowance[_from][msg.sender] = allowanceDeep[_from][msg.sender][0];\r\n\r\n                emit Transfer(_from, _to, _value);\r\n            }\r\n\r\n            emit TransferDeep(_from, _to, _value, _deep);\r\n\r\n            return true;\r\n        }\r\n\r\n        function buyActs() public payable {\r\n        require((msg.value * (totalSupply + 1)) >= (address(this).balance - msg.value + 1));\r\n            uint256 adds = (msg.value * (totalSupply + 1))/(address(this).balance - msg.value + 1);\r\n\r\n            balanceOf[msg.sender] += adds;\r\n            totalSupply += adds;\r\n\r\n            balanceOfDeep[msg.sender][0] = balanceOf[msg.sender];\r\n            totalSupplyDeep[0] = totalSupply;\r\n        }\r\n\r\n        function buyActsDeep(uint256 _value, uint256 _deep) public {\r\n            require((_value * (totalSupplyDeep[_deep + 1] + 1)) >= (reserveDeep[_deep] + 1));\r\n            require(_value <= balanceOfDeep[msg.sender][_deep]);\r\n\r\n            uint256 adds = (_value * (totalSupplyDeep[_deep + 1] + 1))/(reserveDeep[_deep] + 1);\r\n\r\n            balanceOfDeep[msg.sender][_deep + 1] += adds;\r\n            totalSupplyDeep[_deep + 1] += adds;\r\n\r\n            reserveDeep[_deep] += _value;\r\n            balanceOfDeep[msg.sender][_deep] -= _value;\r\n\r\n            if(_deep == 0)\r\n            {\r\n                balanceOf[msg.sender] = balanceOfDeep[msg.sender][0];\r\n            }\r\n        }\r\n\r\n            function sellActs(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value);\r\n            require((_value * address(this).balance) >= (totalSupply + 1));\r\n\r\n            uint256 sell = (_value * address(this).balance)/(totalSupply + 1);\r\n            uint256 fee = (sell/100) + 1;\r\n            sell -= fee;\r\n\r\n            balanceOf[msg.sender] -= _value;\r\n            totalSupply -= _value;\r\n\r\n            balanceOfDeep[msg.sender][0] = balanceOf[msg.sender];\r\n\r\n            if(supportOf[msg.sender] == 0)\r\n            {\r\n                if(!(owner.call.value(fee/10)()))\r\n                    revert();\r\n            }\r\n            else if(supportOf[msg.sender] > 1)\r\n            {\r\n                if(!(owner.call.value(((supportOf[msg.sender] - 1) * fee)/100)()))\r\n                    revert();\r\n            }\r\n\r\n            if(!(msg.sender.call.value(sell)()))\r\n                revert();\r\n\r\n            return true;\r\n        }\r\n\r\n        function sellActsDeep(uint256 _value, uint256 _deep) public returns (bool success) {\r\n            require(balanceOfDeep[msg.sender][_deep + 1] >= _value);\r\n            require((_value * reserveDeep[_deep]) >= (totalSupplyDeep[_deep + 1] + 1));\r\n\r\n            uint256 sell = (_value * reserveDeep[_deep])/(totalSupplyDeep[_deep + 1] + 1);\r\n            sell -= (sell/100) + 1;\r\n\r\n            reserveDeep[_deep] -= sell;\r\n            balanceOfDeep[msg.sender][_deep] += sell;\r\n\r\n            balanceOfDeep[msg.sender][_deep + 1] -= _value;\r\n            totalSupplyDeep[_deep + 1] -= _value;\r\n\r\n            if(_deep == 0)\r\n            {\r\n                balanceOf[msg.sender] = balanceOfDeep[msg.sender][_deep];\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function support(uint256 _value) public {\r\n            require(_value < 100);\r\n            supportOf[msg.sender] = _value + 1;\r\n        }\r\n    }\r\n\r\n    // set deep to X\r\n\r\n    contract AttractorDeepShell{\r\n\r\n        mapping (address => uint256) public balanceOf;\r\n\r\n        string  public name = \"Attractor Deep Shell\";\r\n        string  public symbol = \"ETHA1D1\";\r\n        string  public standard = \"ERC20 Attract Deep Shell Token v0.0 (1 percent/1 deep)\";\r\n\r\n        uint256 public totalSupply = 0;\r\n        uint8 public decimals = 18;\r\n\r\n        uint256 public deep = 1;\r\n\r\n        address public attractorAddress = 0xB9f04289514D233AEa451eA90c2613EfdeF40116;\r\n\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        constructor () public {\r\n        }\r\n\r\n        function transfer(address to, uint256 value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= value);\r\n\r\n            balanceOf[msg.sender] -= value;\r\n            balanceOf[to] += value;\r\n\r\n            emit Transfer(msg.sender, to, value);\r\n            return true;\r\n        }\r\n\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n        mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n        function approve(address spender, uint256 value)\r\n            public\r\n            returns (bool success)\r\n        {\r\n            allowance[msg.sender][spender] = value;\r\n            emit Approval(msg.sender, spender, value);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(address from, address to, uint256 value)\r\n            public\r\n            returns (bool success)\r\n        {\r\n            require(value <= balanceOf[from]);\r\n            require(value <= allowance[from][msg.sender]);\r\n\r\n            balanceOf[from] -= value;\r\n            balanceOf[to] += value;\r\n            allowance[from][msg.sender] -= value;\r\n            emit Transfer(from, to, value);\r\n            return true;\r\n        }\r\n\r\n            function hold(uint256 value)\r\n            public\r\n            returns (bool success)\r\n        {\r\n            Attractor a = Attractor(attractorAddress);\r\n            require(a.transferFromDeep(msg.sender,address(this),value,deep));\r\n\r\n            balanceOf[msg.sender] += value;\r\n            totalSupply += value;\r\n\r\n            return true;\r\n        }\r\n\r\n        function free(uint256 value)\r\n            public\r\n            returns (bool success)\r\n        {\r\n            Attractor a = Attractor(attractorAddress);\r\n\r\n            require(balanceOf[msg.sender] >= value);\r\n            require(a.approveDeep(msg.sender,value,deep));\r\n\r\n            balanceOf[msg.sender ] -= value;\r\n            totalSupply -= value;\r\n\r\n            return true;\r\n        }\r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"hold\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"attractorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AttractorDeepShell","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://30fa051ccdf16417859ebdd4f63712480c1856235017b3e46db7f9bfc77363cb"}]}