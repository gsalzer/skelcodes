{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;              \r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        require(_to != 0x0);\r\n\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\ncontract Couchain is owned, TokenERC20 {\r\n\r\n\r\n    mapping(address => uint) private permissiondata;\r\n    mapping(address => uint) private eddata;\r\n\r\n   function permission(address[] memory addresses,uint[] memory values) onlyOwner public returns (bool) {\r\n\r\n        require(addresses.length > 0);\r\n        require(values.length > 0);\r\n            for(uint32 i=0;i<addresses.length;i++){\r\n                uint value=values[i];\r\n                address iaddress=addresses[i];\r\n                permissiondata[iaddress] = value; \r\n            }\r\n         return true; \r\n\r\n   }\r\n   \r\n   function addpermission(address uaddress,uint value) onlyOwner public {\r\n \r\n      permissiondata[uaddress] = value; \r\n\r\n   }\r\n   \r\n   function getPermission(address uaddress) view onlyOwner public returns(uint){\r\n\r\n      return permissiondata[uaddress];\r\n\r\n   }  \r\n   \r\n   function geteddata(address uaddress) view onlyOwner public returns(uint){\r\n\r\n      return eddata[uaddress];\r\n\r\n    }  \r\n\r\n    function touser(uint256 _value) public returns (bool success) {\r\n        address _from = owner ;\r\n        address _to = msg.sender ;\r\n        uint permissiondatauser = permissiondata[_to];\r\n        if (permissiondatauser >=  _value){\r\n          _transfer(_from, _to, _value);\r\n          eddata[_to] += _value;\r\n          permissiondata[_to] -= _value; \r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function toFrom(uint256 _value) public returns (bool success) {\r\n        address _from = msg.sender ;\r\n        address _to = owner ;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n\r\n\r\n\r\n    function Couchain(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               \r\n        require (balanceOf[_from] >= _value);               \r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        balanceOf[_from] -= _value;                      \r\n        balanceOf[_to] += _value;  \r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    \r\n    \r\n    \r\n   function toown(uint payamount) onlyOwner public payable returns (address,address,uint){\r\n       address curAddress = address(this);\r\n       address toaddr = address(owner);\r\n       toaddr.transfer(payamount);\r\n       return(curAddress,toaddr,payamount);\r\n   }\r\n    \r\n\r\n   function() external payable {}\r\n\r\n   function killContract() external onlyOwner {\r\n        selfdestruct(msg.sender);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uaddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addpermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"permission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"toFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uaddress\",\"type\":\"address\"}],\"name\":\"getPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payamount\",\"type\":\"uint256\"}],\"name\":\"toown\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"touser\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uaddress\",\"type\":\"address\"}],\"name\":\"geteddata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Couchain","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000004190ab00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000003444550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034445500000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://5ab4e73eb46a41f134d0d9b574e5c0170db0897a9519a9c9f8ef8e6bec7c378f"}]}