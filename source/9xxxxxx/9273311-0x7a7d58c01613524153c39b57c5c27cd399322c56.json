{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract prescriptionwaste {\r\n\r\n    uint256 recordId;\r\n    address owner;\r\n\r\n    struct Record  {\r\n        uint256 id;\r\n        address ownerAddress;\r\n        uint64 ndc;\r\n        string lot;\r\n        string serial;\r\n        uint expirationDate;\r\n        uint16 quantity;\r\n        uint donationDate;\r\n        string donationPostalCode;\r\n        string terminalPostalCode;\r\n        bool individual;\r\n    }\r\n    \r\n    \r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n        recordId = 0;\r\n    }\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _; \r\n    } \r\n\r\n    mapping(uint256 => Record) public records;\r\n    \r\n    function AddRecord(uint64 ndc, string memory lot, string memory serial, uint expirationDate, uint16 quantity, uint donationDate,\r\n                            string memory donationPostalCode, string memory terminalPostalCode, bool individual) public returns (uint256) {\r\n        \r\n        require(ndc>0);\r\n        require(quantity>0);\r\n        \r\n        recordId++;\r\n        records[recordId] = Record(recordId, msg.sender, ndc, lot, serial, expirationDate, quantity, donationDate, donationPostalCode, terminalPostalCode, individual);\r\n        return recordId;\r\n    }\r\n    \r\n\r\n    function CountRecords() private view returns(uint256) {\r\n        return recordId;\r\n    }\r\n    \r\n    function DeleteRecord(uint256 id) public isOwner {\r\n        delete records[id];\r\n    }\r\n    \r\n    function GetNDCCount(uint64 ndc) private view returns(uint64) {\r\n        uint64 len = 0;\r\n        for (uint256 i = 1; i <= recordId; i++) {\r\n            if (ndc == records[i].ndc){\r\n                len++;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n    \r\n    function SeachByNDC(uint64 ndc) public view returns(Record[] memory) {\r\n        \r\n        uint64 len = GetNDCCount(ndc);\r\n\r\n        Record[] memory tmpRecords = new Record[](len);\r\n        len = 0;\r\n        for (uint256 i = 1; i <= recordId; i++) {\r\n            if (ndc == records[i].ndc){\r\n                tmpRecords[len] = records[i];\r\n                len++;\r\n            }\r\n        }\r\n        return tmpRecords;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"ndc\",\"type\":\"uint64\"},{\"name\":\"lot\",\"type\":\"string\"},{\"name\":\"serial\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"name\":\"quantity\",\"type\":\"uint16\"},{\"name\":\"donationDate\",\"type\":\"uint256\"},{\"name\":\"donationPostalCode\",\"type\":\"string\"},{\"name\":\"terminalPostalCode\",\"type\":\"string\"},{\"name\":\"individual\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ndc\",\"type\":\"uint64\"},{\"name\":\"lot\",\"type\":\"string\"},{\"name\":\"serial\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"name\":\"quantity\",\"type\":\"uint16\"},{\"name\":\"donationDate\",\"type\":\"uint256\"},{\"name\":\"donationPostalCode\",\"type\":\"string\"},{\"name\":\"terminalPostalCode\",\"type\":\"string\"},{\"name\":\"individual\",\"type\":\"bool\"}],\"name\":\"AddRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ndc\",\"type\":\"uint64\"}],\"name\":\"SeachByNDC\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"ndc\",\"type\":\"uint64\"},{\"name\":\"lot\",\"type\":\"string\"},{\"name\":\"serial\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"name\":\"quantity\",\"type\":\"uint16\"},{\"name\":\"donationDate\",\"type\":\"uint256\"},{\"name\":\"donationPostalCode\",\"type\":\"string\"},{\"name\":\"terminalPostalCode\",\"type\":\"string\"},{\"name\":\"individual\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeleteRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"prescriptionwaste","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://9973057f558822c52af4ec2557f2f25ee15d851bab098553cd6bfaa525a8b2db"}]}