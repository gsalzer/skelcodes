{"status":"1","message":"OK","result":[{"SourceCode":"{\"DateTime.sol\":{\"content\":\"pragma solidity ^0.5.13;\\r\\n\\r\\ncontract DateTime {\\r\\n    /*\\r\\n         *  Date and Time utilities for ethereum contracts\\r\\n         *\\r\\n         */\\r\\n    struct _DateTime {\\r\\n        uint16 year;\\r\\n        uint8 month;\\r\\n        uint8 day;\\r\\n        uint8 hour;\\r\\n        uint8 minute;\\r\\n        uint8 second;\\r\\n        uint8 weekday;\\r\\n    }\\r\\n\\r\\n    uint256 constant private DAY_IN_SECONDS = 86400;\\r\\n    uint256 constant private YEAR_IN_SECONDS = 31536000;\\r\\n    uint256 constant private LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n    uint256 constant private HOUR_IN_SECONDS = 3600;\\r\\n    uint256 constant private MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n    uint16 constant private ORIGIN_YEAR = 1970;\\r\\n\\r\\n    function isLeapYear(uint16 year) public pure returns (bool) {\\r\\n        if (year % 4 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        if (year % 100 != 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (year % 400 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function leapYearsBefore(uint256 year) public pure returns (uint256) {\\r\\n        year -= 1;\\r\\n        return year / 4 - year / 100 + year / 400;\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(uint8 month, uint16 year)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint8)\\r\\n    {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            return 31;\\r\\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n            return 30;\\r\\n        } else if (isLeapYear(year)) {\\r\\n            return 29;\\r\\n        } else {\\r\\n            return 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function parseTimestamp(uint256 timestamp)\\r\\n        internal\\r\\n        pure\\r\\n        returns (_DateTime memory dt)\\r\\n    {\\r\\n        uint256 secondsAccountedFor = 0;\\r\\n        uint256 buf;\\r\\n        uint8 i;\\r\\n\\r\\n        // Year\\r\\n        dt.year = getYear(timestamp);\\r\\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n        // Month\\r\\n        uint256 secondsInMonth;\\r\\n        for (i = 1; i \\u003c= 12; i++) {\\r\\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n            if (secondsInMonth + secondsAccountedFor \\u003e timestamp) {\\r\\n                dt.month = i;\\r\\n                break;\\r\\n            }\\r\\n            secondsAccountedFor += secondsInMonth;\\r\\n        }\\r\\n\\r\\n        // Day\\r\\n        for (i = 1; i \\u003c= getDaysInMonth(dt.month, dt.year); i++) {\\r\\n            if (DAY_IN_SECONDS + secondsAccountedFor \\u003e timestamp) {\\r\\n                dt.day = i;\\r\\n                break;\\r\\n            }\\r\\n            secondsAccountedFor += DAY_IN_SECONDS;\\r\\n        }\\r\\n\\r\\n        // Hour\\r\\n        dt.hour = getHour(timestamp);\\r\\n\\r\\n        // Minute\\r\\n        dt.minute = getMinute(timestamp);\\r\\n\\r\\n        // Second\\r\\n        dt.second = getSecond(timestamp);\\r\\n\\r\\n        // Day of week.\\r\\n        dt.weekday = getWeekday(timestamp);\\r\\n    }\\r\\n\\r\\n    function getYear(uint256 timestamp) public pure returns (uint16) {\\r\\n        uint256 secondsAccountedFor = 0;\\r\\n        uint16 year;\\r\\n        uint256 numLeapYears;\\r\\n\\r\\n        // Year\\r\\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n        secondsAccountedFor +=\\r\\n            YEAR_IN_SECONDS *\\r\\n            (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n        while (secondsAccountedFor \\u003e timestamp) {\\r\\n            if (isLeapYear(uint16(year - 1))) {\\r\\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n            } else {\\r\\n                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n            }\\r\\n            year -= 1;\\r\\n        }\\r\\n        return year;\\r\\n    }\\r\\n\\r\\n    function getMonth(uint256 timestamp) public pure returns (uint8) {\\r\\n        return parseTimestamp(timestamp).month;\\r\\n    }\\r\\n\\r\\n    function getDay(uint256 timestamp) public pure returns (uint8) {\\r\\n        return parseTimestamp(timestamp).day;\\r\\n    }\\r\\n\\r\\n    function getHour(uint256 timestamp) public pure returns (uint8) {\\r\\n        return uint8((timestamp / 60 / 60) % 24);\\r\\n    }\\r\\n\\r\\n    function getMinute(uint256 timestamp) public pure returns (uint8) {\\r\\n        return uint8((timestamp / 60) % 60);\\r\\n    }\\r\\n\\r\\n    function getSecond(uint256 timestamp) public pure returns (uint8) {\\r\\n        return uint8(timestamp % 60);\\r\\n    }\\r\\n\\r\\n    function getWeekday(uint256 timestamp) public pure returns (uint8) {\\r\\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(uint16 year, uint8 month, uint8 day)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256 timestamp)\\r\\n    {\\r\\n        return toTimestamp(year, month, day, 0, 0, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256 timestamp)\\r\\n    {\\r\\n        return toTimestamp(year, month, day, hour, 0, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute\\r\\n    ) public pure returns (uint256 timestamp) {\\r\\n        return toTimestamp(year, month, day, hour, minute, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute,\\r\\n        uint8 second\\r\\n    ) public pure returns (uint256 timestamp) {\\r\\n        uint16 i;\\r\\n\\r\\n        // Year\\r\\n        for (i = ORIGIN_YEAR; i \\u003c year; i++) {\\r\\n            if (isLeapYear(i)) {\\r\\n                timestamp += LEAP_YEAR_IN_SECONDS;\\r\\n            } else {\\r\\n                timestamp += YEAR_IN_SECONDS;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Month\\r\\n        uint8[12] memory monthDayCounts;\\r\\n        monthDayCounts[0] = 31;\\r\\n        if (isLeapYear(year)) {\\r\\n            monthDayCounts[1] = 29;\\r\\n        } else {\\r\\n            monthDayCounts[1] = 28;\\r\\n        }\\r\\n        monthDayCounts[2] = 31;\\r\\n        monthDayCounts[3] = 30;\\r\\n        monthDayCounts[4] = 31;\\r\\n        monthDayCounts[5] = 30;\\r\\n        monthDayCounts[6] = 31;\\r\\n        monthDayCounts[7] = 31;\\r\\n        monthDayCounts[8] = 30;\\r\\n        monthDayCounts[9] = 31;\\r\\n        monthDayCounts[10] = 30;\\r\\n        monthDayCounts[11] = 31;\\r\\n\\r\\n        for (i = 1; i \\u003c month; i++) {\\r\\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\r\\n        }\\r\\n\\r\\n        // Day\\r\\n        timestamp += DAY_IN_SECONDS * (day - 1);\\r\\n\\r\\n        // Hour\\r\\n        timestamp += HOUR_IN_SECONDS * (hour);\\r\\n\\r\\n        // Minute\\r\\n        timestamp += MINUTE_IN_SECONDS * (minute);\\r\\n\\r\\n        // Second\\r\\n        timestamp += second;\\r\\n\\r\\n        return timestamp;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.13;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Standard ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://eips.ethereum.org/EIPS/eip-20\\r\\n * Originally based on code by FirstBlood:\\r\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n *\\r\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\r\\n * all accounts just by listening to said events. Note that this isn\\u0027t required by the specification, and other\\r\\n * compliant implementations may not do it.\\r\\n */\\r\\ncontract ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint8 public decimals;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the balance of the specified address.\\r\\n     * @param owner The address to query the balance of.\\r\\n     * @return A uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param owner address The address which owns the funds.\\r\\n     * @param spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token to a specified address.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another.\\r\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\r\\n     * and other compliant implementations may not emit the event.\\r\\n     * @param from address The address which you want to send tokens from\\r\\n     * @param to address The address which you want to transfer to\\r\\n     * @param value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(from, to, value);\\r\\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param addedValue The amount of tokens to increase the allowance by.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowed[msg.sender][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     * Emits an Approval event.\\r\\n     * @param spender The address which will spend the funds.\\r\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowed[msg.sender][spender].sub(subtractedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer token for a specified addresses.\\r\\n     * @param from The address to transfer from.\\r\\n     * @param to The address to transfer to.\\r\\n     * @param value The amount to be transferred.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that mints an amount of the token and assigns it to\\r\\n     * an account. This encapsulates the modification of balances such that the\\r\\n     * proper events are emitted.\\r\\n     * @param account The account that will receive the created tokens.\\r\\n     * @param value The amount that will be created.\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(value);\\r\\n        _balances[account] = _balances[account].add(value);\\r\\n        emit Transfer(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account.\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve an address to spend another addresses\\u0027 tokens.\\r\\n     * @param owner The address that owns the tokens.\\r\\n     * @param spender The address that will spend the tokens.\\r\\n     * @param value The number of tokens that can be spent.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowed[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that burns an amount of the token of a given\\r\\n     * account, deducting from the sender\\u0027s allowance for said account. Uses the\\r\\n     * internal burn function.\\r\\n     * Emits an Approval event (reflecting the reduced allowance).\\r\\n     * @param account The account whose tokens will be burnt.\\r\\n     * @param value The amount that will be burnt.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 value) internal {\\r\\n        _burn(account, value);\\r\\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\\r\\n    }\\r\\n}\\r\\n\"},\"Migrations.sol\":{\"content\":\"pragma solidity ^0.5.13;\\r\\n\\r\\ncontract Migrations {\\r\\n    address public owner;\\r\\n    uint256 public lastCompletedMigration;\\r\\n\\r\\n    modifier restricted() {\\r\\n        if (msg.sender == owner) _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setCompleted(uint256 completed) public restricted {\\r\\n        lastCompletedMigration = completed;\\r\\n    }\\r\\n\\r\\n    function upgrade(address new_address) public restricted {\\r\\n        Migrations upgraded = Migrations(new_address);\\r\\n        upgraded.setCompleted(lastCompletedMigration);\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.13;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address of the owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if `msg.sender` is the owner of the contract.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to relinquish control of the contract.\\r\\n     * It will not be possible to call the functions with the `onlyOwner`\\r\\n     * modifier anymore.\\r\\n     * @notice Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.13;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Unsigned math operations with safety checks that revert on error.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two unsigned integers, reverts on overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n     * reverts when dividing by zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"StableCoin.sol\":{\"content\":\"pragma solidity ^0.5.13;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./DateTime.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract StableCoin is ERC20, DateTime, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public tokenIssuer;\\r\\n    uint256 public lastOxydationDate;\\r\\n\\r\\n    event Oxydated(address holder, uint256 amount);\\r\\n    event TimestampComparaison(uint256 newTimestamp, uint256 oldTimestamp);\\r\\n\\r\\n    constructor(\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol,\\r\\n        uint8 _decimals,\\r\\n        address _tokenIssuer\\r\\n    ) public ERC20(_tokenName, _tokenSymbol, _decimals) Ownable() {\\r\\n        lastOxydationDate = now;\\r\\n        tokenIssuer = _tokenIssuer;\\r\\n    }\\r\\n\\r\\n    // change address that get fees from oxydation\\r\\n    function setTokenIssuer(address _addressVeraOneFees) public onlyOwner {\\r\\n        tokenIssuer = _addressVeraOneFees;\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _tokenAmount) public onlyOwner {\\r\\n        _mint(_to, _tokenAmount);\\r\\n    }\\r\\n\\r\\n    //Mint tokens to each each beneficiary\\r\\n    function mints(address[] calldata _recipients, uint256[] calldata _values) external onlyOwner {\\r\\n        for (uint256 i = 0; i \\u003c _recipients.length; i++) {\\r\\n            mint(_recipients[i], _values[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(address _account, uint256 _value) public onlyOwner {\\r\\n        _burn(_account, _value);\\r\\n    }\\r\\n\\r\\n    //Burn tokens to each each beneficiary\\r\\n    function burns(address[] calldata _recipients, uint256[] calldata _values) external onlyOwner {\\r\\n        for (uint256 i = 0; i \\u003c _recipients.length; i++) {\\r\\n            burn(_recipients[i], _values[i]);\\r\\n        }\\r\\n    }\\r\\n    // can accept ether\\r\\n    function() external payable {}\\r\\n\\r\\n    // give number of ether owned by smart contract\\r\\n    function getBalanceEthSmartContract() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    // transfer smart contract balance to owner\\r\\n    function withdrawEther(uint256 amount) public onlyOwner {\\r\\n        address payable ownerPayable = address(uint160(Ownable.owner()));\\r\\n        ownerPayable.transfer(amount);\\r\\n    }\\r\\n\\r\\n    // monthly oxydation for all investors\\r\\n    function oxydation(address[] calldata holders) external {\\r\\n        for (uint256 i = 0; i \\u003c holders.length; i++) {\\r\\n            emit TimestampComparaison(getMonth(lastOxydationDate), getMonth(now));\\r\\n            if (getMonth(lastOxydationDate) != getMonth(now)) {\\r\\n                // once a month\\r\\n                uint256 balanceCurrent = balanceOf(holders[i]);\\r\\n                uint256 toOxyde = balanceCurrent.div(1200); // 1% annual over 12 months\\r\\n                _burn(holders[i], toOxyde);\\r\\n                _mint(tokenIssuer, toOxyde);\\r\\n                emit Oxydated(holders[i], toOxyde);\\r\\n            }\\r\\n        }\\r\\n        lastOxydationDate = now;\\r\\n    }\\r\\n\\r\\n    function Now() external view returns (uint256){\\r\\n      return (now);\\r\\n  }\\r\\n\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_tokenIssuer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Oxydated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampComparaison\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Now\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"burns\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceEthSmartContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHour\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getSecond\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getWeekday\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getYear\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOxydationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"mints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"name\":\"oxydation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressVeraOneFees\",\"type\":\"address\"}],\"name\":\"setTokenIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StableCoin","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000006f9230d343884879cfe77576a81062d651a008c00000000000000000000000000000000000000000000000000000000000000085465737456524f3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085465737456524f31000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"bzzr://499d70f9b3bb2bc29cb0772b8086c8a2dd14a492904b95fc41bb57899cd850f0"}]}