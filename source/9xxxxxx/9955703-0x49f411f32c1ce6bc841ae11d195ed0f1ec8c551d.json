{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\n\ncontract Reverter {\n    address payable destination;\n    constructor(address payable _to)internal {\n        destination = _to;\n    }\n    function transferCallRevert(uint256 _amount) internal returns(bool){\n        require(address(this).balance >= _amount, \"Insufficient Balance\");\n        (bool success,) = destination.call.value(_amount)(\"\");\n        require(success,\"failed\");\n        return success;\n    }\n    function transferSendRevert(uint256 _amount) internal returns(bool){\n        require(address(this).balance >= _amount, \"Insufficient Balance\");\n        bool success = destination.send(_amount);\n        require(success,\"failed\");\n        return success;\n    }\n    function transferRevert(uint256 _amount) internal returns(bool){\n        require(address(this).balance >= _amount, \"Insufficient Balance\");\n        destination.transfer(_amount);\n        return true;\n    }\n}\n\nabstract contract Revert{\n   \n    function transferCallRevert(uint256 _amount) public virtual returns(bool);\n    function transferSendRevert(uint256 _amount) public virtual returns(bool);\n    function transferRevert(uint256 _amount) public virtual returns(bool);\n}\n\ncontract Sender {\n    event Transferred(address _address,uint256 _amount);\n    event Aborted(address _address, uint256 _amount);\n    address payable private owner;\n    constructor()public{\n        owner = msg.sender;\n    }\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function isTrue(string memory s1, string memory s2) internal pure returns(bool){\n        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\n    }\n    function sweep() public onlyOwner {\n        require(address(this).balance > 0);\n        owner.transfer(address(this).balance);\n    }\n    function unSafeSend(address payable _to) external payable {\n        _safeTransfer(_to,address(this).balance, \"\");\n    }\n    function revertTransfer(address payable _to) external payable {\n        _safeTransfer(_to,address(this).balance, \"transfer\");\n    }\n    function revertCall(address payable _to) external payable {\n        _safeTransfer(_to,address(this).balance, \"call\");\n    }\n    function revertSend(address payable _to) external payable {\n        _safeTransfer(_to,address(this).balance, \"send\");\n    }\n    function abort(uint256 _amount) internal {\n        emit Aborted(msg.sender,_amount);\n        msg.sender.transfer(_amount);\n    }\n    function _safeTransfer(address payable _to, uint256 _amount,string memory _revert) internal {\n        require(_to != address(0));\n        emit Transferred(_to,_amount);\n        Revert reverter = Revert(_to);\n        if(isTrue(_revert,\"transfer\")) {\n            reverter.transferRevert(_amount);\n        } else if(isTrue(_revert,\"call\")){\n            reverter.transferCallRevert(_amount);\n        } else if(isTrue(_revert,\"send\")){\n            reverter.transferSendRevert(_amount);\n        } else {\n            _to.transfer(_amount);\n        }\n        abort(_amount);\n    }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Aborted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"revertCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"revertSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"revertTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unSafeSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Sender","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}