{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev A token holder contract that will allow a set of beneficiaries to\r\n * extract the tokens after a given release time.\r\n *\r\n * Useful for simple vesting schedules like \"advisors get all of their tokens\r\n * after 1 year\".\r\n */\r\ncontract TokenTimelock {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20                       private _token;\r\n    mapping (address => uint256) private _payments;\r\n    mapping (address => bool)    private _revokers;\r\n    address                      private _fallback;\r\n    address[]                    private _beneficiaries;\r\n    uint256                      private _releaseTime;\r\n\r\n    constructor (IERC20           token,\r\n                 address          fallback,\r\n                 address[] memory revokers,\r\n                 address[] memory beneficiaries,\r\n                 uint256[] memory amounts,\r\n                 uint256          releaseTime\r\n                 ) public {\r\n        require(beneficiaries.length == amounts.length,\r\n                \"TokenTimelock: different number of beneficiaries vs amounts\");\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(releaseTime > block.timestamp,\r\n                \"TokenTimelock: release time is before current time\");\r\n\r\n        _token = token;\r\n        _fallback = fallback;\r\n        _releaseTime = releaseTime;\r\n        for (uint i = 0; i < revokers.length; i++) {\r\n            _revokers[revokers[i]] = true;\r\n        }\r\n        // If the same beneficiary is mentioned twice the amounts are summed.\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            bool isDuplicate = _payments[beneficiaries[i]] > 0;\r\n            _payments[beneficiaries[i]] = _payments[beneficiaries[i]].add(amounts[i]);\r\n            if (!isDuplicate) {\r\n                _beneficiaries.push(beneficiaries[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    function amount() public view returns (uint256) {\r\n        return _payments[msg.sender];\r\n    }\r\n\r\n    function releaseTime() public view returns (uint256) {\r\n        return _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the contract has sufficient available tokens to honour\r\n     * the payments to the beneficiaries.\r\n     */\r\n    function valid() public view returns (bool) {\r\n        uint256 available = _token.balanceOf(address(this));\r\n        uint256 owing = 0;\r\n        for (uint i = 0; i < _beneficiaries.length; i++) {\r\n            owing = owing.add(_payments[_beneficiaries[i]]);\r\n        }\r\n        return owing <= available;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when the release time has passed and the tokens are\r\n     * transferred.\r\n     */\r\n    event Release(address indexed owner);\r\n\r\n    /*\r\n     * @dev Transfer the held tokens to the beneficiaries who have not had their\r\n     * payments revoked if the release time has passed.  If there are any tokens\r\n     * remaining in the contract they are transferred to the fallback account.\r\n     */\r\n    function release() public {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        require(block.timestamp >= _releaseTime,\r\n                \"TokenTimelock: current time is before release time\");\r\n        uint256 remaining = _token.balanceOf(address(this));\r\n        require(remaining > 0,\r\n                \"TokenTimelock: no tokens to release\");\r\n        for (uint i = 0; i < _beneficiaries.length; i++) {\r\n            if (_payments[_beneficiaries[i]] > 0) {\r\n                _token.transfer(_beneficiaries[i], _payments[_beneficiaries[i]]);\r\n                remaining = remaining.sub(_payments[_beneficiaries[i]]);\r\n                _payments[_beneficiaries[i]] = 0;\r\n            }\r\n        }\r\n        if (remaining > 0) {\r\n            _token.transfer(_fallback, remaining);\r\n        }\r\n        emit Release(address(this));\r\n    }\r\n\r\n    /*\r\n     * @dev Prevent a beneficiary from receiving their amount of tokens if they\r\n     * haven't already received them.  The tokens that the beneficiary would\r\n     * have received are instead immediately transferred to the fallback\r\n     * address.\r\n     */\r\n    function revoke(address beneficiary) public {\r\n        require(_revokers[msg.sender],\r\n                \"TokenTimelock: sender not allowed to revoke payment\");\r\n        if (_payments[beneficiary] > 0) {\r\n            _token.transfer(_fallback, _payments[beneficiary]);\r\n            _payments[beneficiary] = 0;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fallback\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"revokers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Release\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenTimelock","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000006f4ec024ac5ea3e935d9a5ae32bc49bd205f761a000000000000000000000000eeec4bda3932dd2c434568d1c5e89cf48313181100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000006007b6420000000000000000000000000000000000000000000000000000000000000001000000000000000000000000eeec4bda3932dd2c434568d1c5e89cf4831318110000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c3ce966864f51e46c55918aa3324a3ce4b2eaf8c000000000000000000000000d7f273f1f2b32efd745f6c7c8d74b51ec2a7205c0000000000000000000000001e58f01d1be17bc6be187431da612a8c83ec54500000000000000000000000000150dd46e8043fa065a860a4a3259ea097d1df50000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000b71b000000000000000000000000000000000000000000000000000000000001312d000000000000000000000000000000000000000000000000000000000000b71b000000000000000000000000000000000000000000000000000000000000b71b0","Library":"","LicenseType":"None","SwarmSource":"bzzr://68d6ee18d325269e026dd884bdc79b09895cf91a026b80bd036a59c5fe4382ee"}]}