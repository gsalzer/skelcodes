{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/upgradable/OwnableUpgradable.sol\n\npragma solidity ^0.5.16;\n\n// import \"../openzeppelin/upgrades/contracts/Initializable.sol\";\n\ncontract OwnableUpgradable is Initializable {\n    address payable public owner;\n    address payable internal newOwnerCandidate;\n\n    // Initializer â€“ Constructor for Upgradable contracts\n    function initialize() initializer public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address payable newOwner) public onlyOwner {\n        newOwnerCandidate = newOwner;\n    }\n\n    function acceptOwner() public {\n        require(msg.sender == newOwnerCandidate);\n        owner = newOwnerCandidate;\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/utils/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: contracts/interfaces/IToken.sol\n\npragma solidity ^0.5.16;\n\ninterface IToken {\n    function decimals() external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n    function approve(address spender, uint value) external;\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint amount) external;\n}\n\n// File: contracts/utils/SafeERC20.sol\n\npragma solidity ^0.5.16;\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\";\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IToken token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IToken token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IToken token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: contracts/utils/UniversalERC20.sol\n\npragma solidity ^0.5.16;\n\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n\n\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IToken;\n\n    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\n    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function universalTransfer(IToken token, address to, uint256 amount) internal {\n        universalTransfer(token, to, amount, false);\n    }\n\n    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n        if (amount == 0) {\n            return true;\n        }\n\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            if (mayFail) {\n                return address(uint160(to)).send(amount);\n            } else {\n                address(uint160(to)).transfer(amount);\n                return true;\n            }\n        } else {\n            token.safeTransfer(to, amount);\n            return true;\n        }\n    }\n\n    function universalApprove(IToken token, address to, uint256 amount) internal {\n        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\n        if (amount == 0) {\n            return;\n        }\n\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(uint256(msg.value).sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n\n// File: contracts/upgradable/FundsMgrUpgradable.sol\n\npragma solidity ^0.5.16;\n\n// import \"../openzeppelin/upgrades/contracts/Initializable.sol\";\n\n\n\ncontract FundsMgrUpgradable is Initializable, OwnableUpgradable {\n    using UniversalERC20 for IToken;\n\n    // Initializer â€“ Constructor for Upgradable contracts\n    function initialize() initializer public {\n        OwnableUpgradable.initialize();  // Initialize Parent Contract\n    }\n\n    function withdraw(address token, uint256 amount) onlyOwner public  {\n        require(msg.sender == owner);\n\n        if (token == address(0x0)) {\n            owner.transfer(amount);\n        } else {\n            IToken(token).universalTransfer(owner, amount);\n        }\n    }\n    function withdrawAll(address[] memory tokens) onlyOwner public  {\n        for(uint256 i = 0; i < tokens.length;i++) {\n            withdraw(tokens[i], IToken(tokens[i]).universalBalanceOf(address(this)));\n        }\n    }\n\n    uint256[50] private ______gap;\n}\n\n// File: contracts/utils/DSMath.sol\n\npragma solidity ^0.5.0;\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\n        z = add(mul(x, y), base / 2) / base;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    /*function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }*/\n}\n\n// File: contracts/compound/constants/ConstantAddressesMainnet.sol\n\npragma solidity ^0.5.16;\n\n\ncontract ConstantAddressesMainnet {\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\n    address public constant COMPOUND_ORACLE = 0x1D8aEdc9E924730DD3f9641CDb4D1B92B848b4bd;\n\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public constant CUSDC_ADDRESS = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\n\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n}\n\n// File: contracts/compound/constants/ConstantAddresses.sol\n\npragma solidity ^0.5.16;\n\n\n\n// solhint-disable-next-line no-empty-blocks\ncontract ConstantAddresses is ConstantAddressesMainnet {}\n\n// File: contracts/compound/interfaces/IDfWalletFactory.sol\n\npragma solidity ^0.5.16;\n\n\ninterface IDfWalletFactory {\n    function createDfWallet() external returns (address dfWallet);\n}\n\n// File: contracts/compound/interfaces/ICompoundOracle.sol\n\npragma solidity ^0.5.16;\n\n\ninterface ICompoundOracle {\n    function getUnderlyingPrice(address cToken) external view returns (uint);\n}\n\n// File: contracts/compound/interfaces/IComptroller.sol\n\npragma solidity ^0.5.16;\n\n\ninterface IComptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function getAssetsIn(address account) external view returns (address[] memory);\n\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n\n    function markets(address cTokenAddress) external view returns (bool, uint);\n}\n\n// File: contracts/compound/interfaces/IDfWallet.sol\n\npragma solidity ^0.5.16;\n\n\ninterface IDfWallet {\n    function deposit(address _tokenIn, address _cTokenIn, uint _amountIn, address _tokenOut, address _cTokenOut, uint _amountOut) external payable;\n\n    function withdraw(address _tokenIn, address _cTokenIn, address _tokenOut, address _cTokenOut) external payable;\n}\n\n// File: contracts/compound/interfaces/IDfProxyBetCompound.sol\n\npragma solidity ^0.5.16;\n\ninterface IDfProxyBetCompound {\n    function insure(address beneficiary, address wallet, uint256 amountUsd) external;\n}\n\n// File: contracts/compound/interfaces/ICToken.sol\n\npragma solidity ^0.5.16;\n\n\ninterface ICToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function mint() external payable;\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function repayBorrow() external payable;\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower) external payable;\n\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\n        external\n        returns (uint256);\n\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function supplyRatePerBlock() external returns (uint256);\n\n    function borrowRatePerBlock() external returns (uint256);\n\n    function totalReserves() external returns (uint256);\n\n    function reserveFactorMantissa() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function getCash() external returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function underlying() external returns (address);\n}\n\n// File: contracts/interfaces/ILoanPool.sol\n\npragma solidity ^0.5.16;\n\n\ninterface ILoanPool {\n    function loan(uint _amount) external;\n}\n\n// File: contracts/interfaces/IProxyOneInchExchange.sol\n\npragma solidity ^0.5.16;\n\n\ninterface IProxyOneInchExchange {\n    function exchange(IToken fromToken, uint256 amountFromToken, bytes calldata _data) external;\n}\n\n// File: contracts/compound/DfFinanceCompound.sol\n\npragma solidity ^0.5.16;\n\n\n\n\n\n// **INTERFACES**\n\n\n\n\n\n\n\n\n\n\ncontract DfFinanceCompound is Initializable, DSMath, ConstantAddresses, FundsMgrUpgradable {\n\n    // Fees\n    uint256 public inFee;\n    uint256 public currentFeeForBonusEther;\n\n    // Insurance\n    IDfProxyBetCompound public proxyInsuranceBet;\n    uint256 public insuranceCoef;  // in percent\n\n    ILoanPool public loanPool;\n\n    mapping(address => bool) public admins;\n\n    // mapping(address => address) public userWallets;\n\n    IDfWalletFactory public dfWalletFactory;\n\n\n    // Initializer â€“ Constructor for Upgradable contracts\n    function initialize() public initializer {\n        FundsMgrUpgradable.initialize();  // Initialize Parent Contract\n\n        inFee = 0;\n        currentFeeForBonusEther = 30;\n\n        loanPool = ILoanPool(0x9EdAe6aAb4B0f0f8146051ab353593209982d6B6);\n        proxyInsuranceBet = IDfProxyBetCompound(0);\n    }\n\n\n    // **PUBLIC VIEW functions**\n\n    /// @notice Returns the maximum amount of borrow amount available\n    /// @dev Due to rounding errors the result is - 100 wei from the exact amount\n    function getMaxBorrow(address _cBorrowToken, address _wallet) public view returns (uint) {\n        (, uint liquidityInEth, ) = IComptroller(COMPTROLLER).getAccountLiquidity(_wallet);\n\n        if (_cBorrowToken == CETH_ADDRESS) {\n            return liquidityInEth;\n        }\n\n        uint ethPrice = ICompoundOracle(COMPOUND_ORACLE).getUnderlyingPrice(_cBorrowToken);\n        uint liquidityInToken = wdiv(liquidityInEth, ethPrice);\n\n        return sub(liquidityInToken, 100); // cut off 100 wei to handle rounding issues\n    }\n\n\n    // **PUBLIC functions**\n\n    function deal(\n        address _walletOwner, uint _coef, uint _profitPercent, bytes memory _data, uint _usdcToBuyEth, uint _ethType\n    ) public payable returns(address dfWallet) {\n        dfWallet = dealInternal(_walletOwner == address(0) ? msg.sender : _walletOwner,\n                                    _profitPercent, _coef, msg.value, _data, _usdcToBuyEth, _ethType);\n    }\n\n    // before call approve USDC to this contract (TODO: warning: without owner â€“ test function)\n    function manualClose(address _dfWallet) public {\n        uint amount = ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet);\n        IToken(USDC_ADDRESS).transferFrom(msg.sender, address(this), amount);\n        IDfWallet(_dfWallet).withdraw(ETH_ADDRESS, CETH_ADDRESS, USDC_ADDRESS, CUSDC_ADDRESS);\n    }\n\n    function getBorrowUsdcBalance(address _dfWallet) public view returns(uint amount) {\n        amount = ICToken(CUSDC_ADDRESS).borrowBalanceStored(_dfWallet);\n    }\n\n\n    // **ONLY_OWNER functions**\n\n    function setAdmin(address _newAdmin, bool _active) public onlyOwner {\n        admins[_newAdmin] = _active;\n    }\n\n    function setLoanPool(address _loanAddr) public onlyOwner {\n        require(_loanAddr != address(0), \"Address must not be zero\");\n        loanPool = ILoanPool(_loanAddr);\n    }\n\n    function setDfWalletFactory(address _dfWalletFactory) public onlyOwner {\n        require(_dfWalletFactory != address(0), \"Address must not be zero\");\n        dfWalletFactory = IDfWalletFactory(_dfWalletFactory);\n    }\n\n    function setDfProxyBetAddress(IDfProxyBetCompound _proxyBet, uint256 _insuranceCoef) public onlyOwner {\n        require(address(_proxyBet) != address(0) && _insuranceCoef > 0 ||\n                address(_proxyBet) == address(0) && _insuranceCoef == 0, \"Incorrect proxy address or insurance coefficient\");\n\n        proxyInsuranceBet = _proxyBet;\n        insuranceCoef = _insuranceCoef;  // in percent (5 == 5%)\n\n        // all USDC of this contract approved to BetEthUsdcPrice Contract\n        IToken(USDC_ADDRESS).approve(address(_proxyBet), uint(-1));\n    }\n\n    function setFees(uint _inFee, uint _currentFeeForBonusEther) public onlyOwner {\n        require(_inFee <= 5 && _currentFeeForBonusEther < 100, \"Invalid fees\");\n        inFee = _inFee;\n        currentFeeForBonusEther = _currentFeeForBonusEther;\n    }\n\n\n    // **INTERNAL functions**\n\n    function dealInternal(\n        address _walletOwner, uint _profitPercent, uint _coef, uint valueEth, bytes memory _data, uint _usdcToBuyEth, uint _ethType\n    ) internal returns(address dfWallet) {\n        require(_coef >= 150 && _coef <= 300, \"Invalid _coefficient\");\n\n        uint extraEth = valueEth * (_coef - 100) / 100;\n        uint extractUsdc = _usdcToBuyEth * (100 + inFee + insuranceCoef) / 100;\n\n        // take an extra eth loan\n        loanPool.loan(extraEth);\n\n        // dfWallet = userWallets[_walletOwner];\n        // if (dfWallet == address(0)) {\n        //     userWallets[_walletOwner] = dfWallet = dfWalletFactory.createDfWallet();\n        // }\n        dfWallet = dfWalletFactory.createDfWallet();\n\n        // mint cEther and borrow cUSDC\n        IDfWallet(dfWallet).deposit(ETH_ADDRESS, CETH_ADDRESS, valueEth + extraEth, USDC_ADDRESS, CUSDC_ADDRESS, extractUsdc);\n\n        // Needs more 15 percent in collateral\n        uint maxBorrowUsdc = getMaxBorrow(CUSDC_ADDRESS, dfWallet);\n        require(maxBorrowUsdc > 0 && (maxBorrowUsdc * 100 / (maxBorrowUsdc + extractUsdc) >= 15), \"Needs more eth in collateral\");\n\n        // call DfProxyBet contract (and transferFrom USDC)\n        if (address(proxyInsuranceBet) != address(0)) {\n            proxyInsuranceBet.insure(_walletOwner, dfWallet, _usdcToBuyEth * insuranceCoef / 100);\n        }\n\n        exchangeInternal(IToken(USDC_ADDRESS), _usdcToBuyEth, _ethType == 0 ? IToken(WETH_ADDRESS) : IToken(ETH_ADDRESS), extraEth, _data);\n\n        if (_ethType == 0) {\n            IToken(WETH_ADDRESS).withdraw(IToken(WETH_ADDRESS).balanceOf(address(this)));\n        }\n\n        // return an extra eth loan â€“ all eth\n        transferEthInternal(address(loanPool), extraEth);\n    }\n\n\n    function exchangeInternal(\n        IToken _fromToken, uint _maxFromTokenAmount, IToken _toToken, uint _minToTokenAmount, bytes memory _data\n    ) internal returns(uint) {\n        // Proxy call for avoid out of gas in fallback (because of .transfer())\n        IProxyOneInchExchange proxyEx = IProxyOneInchExchange(0x3fF9Cc22ef2bF6de5Fd2E78f511EDdF0813f6B36);\n\n        if (_fromToken.allowance(address(this), address(proxyEx)) != uint256(-1)) {\n            _fromToken.approve(address(proxyEx), uint256(-1));\n        }\n\n        uint fromTokenBalance = _fromToken.universalBalanceOf(address(this));\n        uint toTokenBalance = _toToken.universalBalanceOf(address(this));\n\n        // Proxy call for avoid out of gas in fallback (because of .transfer())\n        proxyEx.exchange(_fromToken, _maxFromTokenAmount, _data);\n\n        require(_fromToken.universalBalanceOf(address(this)) + _maxFromTokenAmount >= fromTokenBalance, \"Exchange error\");\n\n        uint newBalanceToToken = _toToken.universalBalanceOf(address(this));\n        require(newBalanceToToken >= toTokenBalance + _minToTokenAmount, \"Exchange error\");\n\n        return sub(newBalanceToToken, toTokenBalance); // how many tokens received\n    }\n\n    function transferEthInternal(address _receiver, uint _amount) internal {\n        address payable receiverPayable = address(uint160(_receiver));\n        (bool result, ) = receiverPayable.call.value(_amount)(\"\");\n        require(result, \"Transfer of ETH failed\");\n    }\n\n\n    // **FALLBACK functions**\n    function() external payable {}\n\n}\n","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFeeForBonusEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coef\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_usdcToBuyEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethType\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dfWallet\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dfWalletFactory\",\"outputs\":[{\"internalType\":\"contract IDfWalletFactory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"getBorrowUsdcBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBorrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getMaxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loanPool\",\"outputs\":[{\"internalType\":\"contract ILoanPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWallet\",\"type\":\"address\"}],\"name\":\"manualClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyInsuranceBet\",\"outputs\":[{\"internalType\":\"contract IDfProxyBetCompound\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IDfProxyBetCompound\",\"name\":\"_proxyBet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceCoef\",\"type\":\"uint256\"}],\"name\":\"setDfProxyBetAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dfWalletFactory\",\"type\":\"address\"}],\"name\":\"setDfWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentFeeForBonusEther\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanAddr\",\"type\":\"address\"}],\"name\":\"setLoanPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DfFinanceCompound","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}