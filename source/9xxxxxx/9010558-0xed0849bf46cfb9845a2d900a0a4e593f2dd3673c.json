{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/saga/interfaces/IPaymentHandler.sol\n\n/**\n * @title Payment Handler Interface.\n */\ninterface IPaymentHandler {\n    /**\n     * @dev Get the amount of available ETH.\n     * @return The amount of available ETH.\n     */\n    function getEthBalance() external view returns (uint256);\n\n    /**\n     * @dev Transfer ETH to an SGA holder.\n     * @param _to The address of the SGA holder.\n     * @param _value The amount of ETH to transfer.\n     */\n    function transferEthToSgaHolder(address _to, uint256 _value) external;\n}\n\n// File: contracts/saga/interfaces/IMintListener.sol\n\n/**\n * @title Mint Listener Interface.\n */\ninterface IMintListener {\n    /**\n     * @dev Mint SGA for SGN holders.\n     * @param _value The amount of SGA to mint.\n     */\n    function mintSgaForSgnHolders(uint256 _value) external;\n}\n\n// File: contracts/saga/interfaces/ISGATokenManager.sol\n\n/**\n * @title SGA Token Manager Interface.\n */\ninterface ISGATokenManager {\n    /**\n     * @dev Exchange ETH for SGA.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @return The amount of SGA that the sender is entitled to.\n     */\n    function exchangeEthForSga(address _sender, uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Exchange SGA for ETH.\n     * @param _sender The address of the sender.\n     * @param _sgaAmount The amount of SGA received.\n     * @return The amount of ETH that the sender is entitled to.\n     */\n    function exchangeSgaForEth(address _sender, uint256 _sgaAmount) external returns (uint256);\n\n    /**\n     * @dev Handle direct SGA transfer.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     */\n    function uponTransfer(address _sender, address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle custodian SGA transfer.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     */\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle the operation of ETH deposit into the SGAToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGAToken contract.\n     * @param _amount The deposited ETH amount.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     */\n    function uponDeposit(address _sender, uint256 _balance, uint256 _amount) external returns (address, uint256);\n\n    /**\n     * @dev Handle the operation of ETH withdrawal from the SGAToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGAToken contract prior the withdrawal.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     */\n    function uponWithdraw(address _sender, uint256 _balance) external returns (address, uint256);\n\n    /** \n     * @dev Upon SGA mint for SGN holders.\n     * @param _value The amount of SGA to mint.\n     */\n    function uponMintSgaForSgnHolders(uint256 _value) external;\n\n    /**\n     * @dev Upon SGA transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGA to transfer.\n     */\n    function uponTransferSgaToSgnHolder(address _to, uint256 _value) external;\n\n    /**\n     * @dev Upon ETH transfer to an SGA holder.\n     * @param _to The address of the SGA holder.\n     * @param _value The amount of ETH to transfer.\n     * @param _status The operation's completion-status.\n     */\n    function postTransferEthToSgaHolder(address _to, uint256 _value, bool _status) external;\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     */\n    function getDepositParams() external view returns (address, uint256);\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     */\n    function getWithdrawParams() external view returns (address, uint256);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\n        _;\n    }\n\n}\n\n// File: contracts/saga-genesis/interfaces/ISagaExchanger.sol\n\n/**\n * @title Saga Exchanger Interface.\n */\ninterface ISagaExchanger {\n    /**\n     * @dev Transfer SGA to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGA to transfer.\n     */\n    function transferSgaToSgnHolder(address _to, uint256 _value) external;\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: contracts/saga/SGAToken.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title Saga Token.\n * @dev ERC20 compatible.\n * @dev Exchange ETH for SGA.\n * @dev Exchange SGA for ETH.\n */\ncontract SGAToken is ERC20, ContractAddressLocatorHolder, IMintListener, ISagaExchanger, IPaymentHandler {\n    string public constant VERSION = \"1.0.0\";\n\n    string public constant name = \"Saga\";\n    string public constant symbol = \"SGA\";\n    uint8  public constant decimals = 18;\n\n    /**\n     * @dev Public Address 0x10063FCCf5eEE46fC65D399a7F5dd88730906CF9.\n     * @notice SGA will be minted at this public address for SGN holders.\n     * @notice SGA will be transferred from this public address upon conversion by an SGN holder.\n     * @notice It is generated in a manner which ensures that the corresponding private key is unknown.\n     */\n    address public constant SGA_MINTED_FOR_SGN_HOLDERS = address(keccak256(\"SGA_MINTED_FOR_SGN_HOLDERS\"));\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the ISGATokenManager interface.\n     */\n    function getSGATokenManager() public view returns (ISGATokenManager) {\n        return ISGATokenManager(getContractAddress(_ISGATokenManager_));\n    }\n\n    /**\n     * @dev Exchange ETH for SGA.\n     * @notice Can be executed from externally-owned accounts but not from other contracts.\n     * @notice This is due to the insufficient gas-stipend provided to the fallback function.\n     */\n    function() external payable {\n        uint256 amount = getSGATokenManager().exchangeEthForSga(msg.sender, msg.value);\n        _mint(msg.sender, amount);\n    }\n\n    /**\n     * @dev Exchange ETH for SGA.\n     * @notice Can be executed from externally-owned accounts as well as from other contracts.\n     */\n    function exchange() external payable {\n        uint256 amount = getSGATokenManager().exchangeEthForSga(msg.sender, msg.value);\n        _mint(msg.sender, amount);\n    }\n\n    /**\n     * @dev Transfer SGA to another account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     * @return Status (true if completed successfully, false otherwise).\n     * @notice If the destination account is this contract, then exchange SGA for ETH.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        if (_to == address(this)) {\n            uint256 amount = getSGATokenManager().exchangeSgaForEth(msg.sender, _value);\n            _burn(msg.sender, _value);\n            msg.sender.transfer(amount);\n            return true;\n        }\n        getSGATokenManager().uponTransfer(msg.sender, _to, _value);\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Transfer SGA from one account to another.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     * @return Status (true if completed successfully, false otherwise).\n     * @notice If the destination account is this contract, then the operation is illegal.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(this), \"custodian-transfer of SGA into this contract is illegal\");\n        getSGATokenManager().uponTransferFrom(msg.sender, _from, _to, _value);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Deposit ETH into this contract.\n     */\n    function deposit() external payable {\n        getSGATokenManager().uponDeposit(msg.sender, address(this).balance, msg.value);\n    }\n\n    /**\n     * @dev Withdraw ETH from this contract.\n     */\n    function withdraw() external {\n        (address wallet, uint256 amount) = getSGATokenManager().uponWithdraw(msg.sender, address(this).balance);\n        wallet.transfer(amount);\n    }\n\n    /**\n     * @dev Mint SGA for SGN holders.\n     * @param _value The amount of SGA to mint.\n     */\n    function mintSgaForSgnHolders(uint256 _value) external only(_IMintManager_) {\n        getSGATokenManager().uponMintSgaForSgnHolders(_value);\n        _mint(SGA_MINTED_FOR_SGN_HOLDERS, _value);\n    }\n\n    /**\n     * @dev Transfer SGA to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGA to transfer.\n     */\n    function transferSgaToSgnHolder(address _to, uint256 _value) external only(_ISGNToken_) {\n        getSGATokenManager().uponTransferSgaToSgnHolder(_to, _value);\n        _transfer(SGA_MINTED_FOR_SGN_HOLDERS, _to, _value);\n    }\n\n    /**\n     * @dev Transfer ETH to an SGA holder.\n     * @param _to The address of the SGA holder.\n     * @param _value The amount of ETH to transfer.\n     */\n    function transferEthToSgaHolder(address _to, uint256 _value) external only(_IPaymentManager_) {\n        bool status = _to.send(_value);\n        getSGATokenManager().postTransferEthToSgaHolder(_to, _value, status);\n    }\n\n    /**\n     * @dev Get the amount of available ETH.\n     * @return The amount of available ETH.\n     */\n    function getEthBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in this contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in this contract.\n     */\n    function getDepositParams() external view returns (address, uint256) {\n        return getSGATokenManager().getDepositParams();\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in this contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in this contract.\n     */\n    function getWithdrawParams() external view returns (address, uint256) {\n        return getSGATokenManager().getWithdrawParams();\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSGATokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferSgaToSgnHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SGA_MINTED_FOR_SGN_HOLDERS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintSgaForSgnHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEthToSgaHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositParams\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWithdrawParams\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SGAToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://cce51a801a9711b3368f01322bda5566f7110b3a843141414dc75766f448238a"}]}