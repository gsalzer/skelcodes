{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\n\r\ncontract SoloMarginContract {\r\n\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    enum ActionType {\r\n        Deposit,   // supply tokens\r\n        Withdraw,  // supply tokens\r\n        Transfer,  // transfer balance between accounts\r\n        Buy,       // buy an amount of some token (externally)\r\n        Sell,      // sell an amount of some token (externally)\r\n        Trade,     // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize,  // use excess tokens to zero-out a completely negative account\r\n        Call       // send arbitrary data to an address\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par  // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n\r\n    function operate(Info[] memory accounts, ActionArgs[] memory actions) public;\r\n    function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);\r\n    function getNumMarkets() public view returns (uint256);\r\n    function getMarketTokenAddress(uint256 marketI) public view returns (address);\r\n}\r\n\r\ninterface PoolInterface {\r\n    function accessToken(address[] calldata ctknAddr, uint[] calldata tknAmt, bool isCompound) external;\r\n    function paybackToken(address[] calldata ctknAddr, bool isCompound) external payable;\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get ethereum address\r\n     */\r\n    function getAddressETH() public pure returns (address eth) {\r\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n        /**\r\n     * @dev get WETH address\r\n     */\r\n    function getAddressWETH() public pure returns (address weth) {\r\n        weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    }\r\n\r\n    /**\r\n     * @dev get Dydx Solo Address\r\n     */\r\n    function getSoloAddress() public pure returns (address addr) {\r\n        addr = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    }\r\n\r\n    /**\r\n     * @dev get InstaDApp Liquidity Address\r\n     */\r\n    function getPoolAddress() public pure returns (address payable liqAddr) {\r\n        liqAddr = 0x1564D040EC290C743F67F5cB11f3C1958B39872A;\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance to dydx for the \"user proxy\" if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt > tokenAllowance) {\r\n            erc20Contract.approve(to, uint(-1));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev getting actions arg\r\n    */\r\n    function getActionsArgs(\r\n        address tknAccount,\r\n        uint accountIndex,\r\n        uint256 marketId,\r\n        uint256 tokenAmt,\r\n        bool sign\r\n    ) internal pure returns (SoloMarginContract.ActionArgs[] memory)\r\n    {\r\n        SoloMarginContract.ActionArgs[] memory actions = new SoloMarginContract.ActionArgs[](1);\r\n        SoloMarginContract.AssetAmount memory amount = SoloMarginContract.AssetAmount(\r\n            sign,\r\n            SoloMarginContract.AssetDenomination.Wei,\r\n            SoloMarginContract.AssetReference.Delta,\r\n            tokenAmt\r\n        );\r\n        bytes memory empty;\r\n        // address otherAddr = (marketId == 0 && sign) ? getSoloPayableAddress() : address(this);\r\n        SoloMarginContract.ActionType action = sign ? SoloMarginContract.ActionType.Deposit : SoloMarginContract.ActionType.Withdraw;\r\n        actions[0] = SoloMarginContract.ActionArgs(\r\n            action,\r\n            accountIndex,\r\n            amount,\r\n            marketId,\r\n            0,\r\n            tknAccount,\r\n            0,\r\n            empty\r\n        );\r\n        return actions;\r\n    }\r\n\r\n    /**\r\n    * @dev getting acccount arg\r\n    */\r\n    function getAccountArgs(address owner, uint accountId) internal pure returns (SoloMarginContract.Info[] memory) {\r\n        SoloMarginContract.Info[] memory accounts = new SoloMarginContract.Info[](1);\r\n        accounts[0] = (SoloMarginContract.Info(owner, accountId));\r\n        return accounts;\r\n    }\r\n\r\n    /**\r\n     * @dev getting dydx balance\r\n     */\r\n    function getDydxBal(address owner, uint256 marketId, uint accountId) internal view returns (uint tokenBal, bool tokenSign) {\r\n        SoloMarginContract solo = SoloMarginContract(getSoloAddress());\r\n        SoloMarginContract.Wei memory tokenWeiBal = solo.getAccountWei(getAccountArgs(owner, accountId)[0], marketId);\r\n        tokenBal = tokenWeiBal.value;\r\n        tokenSign = tokenWeiBal.sign;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ImportHelper is Helpers {\r\n    mapping (address => address) public ctokenAddrs;\r\n\r\n    struct BorrowData {\r\n        uint[] borrowAmt;\r\n        address[] borrowAddr;\r\n        address[] borrowCAddr;\r\n        uint[] marketId;\r\n        uint borrowCount;\r\n    }\r\n\r\n    struct SupplyData {\r\n        uint[] supplyAmt;\r\n        address[] supplyAddr;\r\n        uint[] marketId;\r\n        uint supplyCount;\r\n    }\r\n\r\n    function getTokensData(uint accountId, uint toConvert) public returns(SupplyData memory, BorrowData memory) {\r\n        SoloMarginContract solo = SoloMarginContract(getSoloAddress());\r\n        uint markets = solo.getNumMarkets();\r\n        SupplyData memory supplyDataArr;\r\n        supplyDataArr.supplyAmt = new uint[](markets);\r\n        supplyDataArr.marketId = new uint[](markets);\r\n        supplyDataArr.supplyAddr = new address[](markets);\r\n        BorrowData memory borrowDataArr;\r\n        borrowDataArr.borrowAmt = new uint[](markets);\r\n        borrowDataArr.marketId = new uint[](markets);\r\n        borrowDataArr.borrowAddr = new address[](markets);\r\n        borrowDataArr.borrowCAddr = new address[](markets);\r\n        uint borrowCount = 0;\r\n        uint supplyCount = 0;\r\n\r\n        for (uint i = 0; i < markets; i++) {\r\n            (uint tokenbal, bool tokenSign) = getDydxBal(msg.sender, i, accountId);\r\n            if (tokenbal > 0) {\r\n                if (tokenSign) {\r\n                    supplyDataArr.supplyAmt[supplyCount] = wmul(tokenbal, toConvert);\r\n                    supplyDataArr.supplyAddr[supplyCount] = solo.getMarketTokenAddress(i);\r\n                    supplyDataArr.marketId[supplyCount] = i;\r\n                    supplyCount++;\r\n                } else {\r\n                    address erc20 = solo.getMarketTokenAddress(i);\r\n                    borrowDataArr.borrowAmt[borrowCount] = wmul(tokenbal, toConvert);\r\n                    borrowDataArr.borrowAddr[borrowCount] = erc20;\r\n                    borrowDataArr.borrowCAddr[borrowCount] = ctokenAddrs[erc20 == getAddressWETH() ? getAddressETH() : erc20];\r\n                    borrowDataArr.marketId[borrowCount] = i;\r\n                    borrowCount++;\r\n                }\r\n                setApproval(solo.getMarketTokenAddress(i), uint(-1), getSoloAddress());\r\n            }\r\n        }\r\n        borrowDataArr.borrowCount = borrowCount;\r\n        supplyDataArr.supplyCount = supplyCount;\r\n        return (supplyDataArr, borrowDataArr);\r\n    }\r\n\r\n    function getOperatorActionsArgs(SupplyData memory suppyArr, BorrowData memory borrowArr) public view\r\n    returns(SoloMarginContract.ActionArgs[] memory)\r\n    {\r\n        uint borrowCount = borrowArr.borrowCount;\r\n        uint supplyCount = suppyArr.supplyCount;\r\n        uint totalCount = borrowCount + supplyCount;\r\n        SoloMarginContract.ActionArgs[] memory actions = new SoloMarginContract.ActionArgs[](totalCount*2);\r\n\r\n        for (uint i = 0; i < borrowCount; i++) {\r\n            actions[i] = getActionsArgs(\r\n                address(this),\r\n                0,\r\n                borrowArr.marketId[i],\r\n                borrowArr.borrowAmt[i],\r\n                true\r\n            )[0];\r\n            actions[i + totalCount + supplyCount] = getActionsArgs(\r\n                getPoolAddress(), // After borrowing transfer directly to InstaDApp's Pool.\r\n                1,\r\n                borrowArr.marketId[i],\r\n                borrowArr.borrowAmt[i],\r\n                false\r\n            )[0];\r\n        }\r\n\r\n        for (uint i = 0; i < supplyCount; i++) {\r\n            uint baseIndex = borrowCount + i;\r\n            actions[baseIndex] = getActionsArgs(\r\n                address(this),\r\n                0,\r\n                suppyArr.marketId[i],\r\n                suppyArr.supplyAmt[i],\r\n                false\r\n            )[0];\r\n            actions[baseIndex + supplyCount] = getActionsArgs(\r\n                address(this),\r\n                1,\r\n                suppyArr.marketId[i],\r\n                suppyArr.supplyAmt[i],\r\n                true\r\n            )[0];\r\n        }\r\n        return (actions);\r\n    }\r\n\r\n    function getOperatorAccountArgs(uint accountId) public view returns (SoloMarginContract.Info[] memory) {\r\n        SoloMarginContract.Info[] memory accounts = new SoloMarginContract.Info[](2);\r\n        accounts[0] = getAccountArgs(msg.sender, accountId)[0];\r\n        accounts[1] = getAccountArgs(address(this), 0)[0];\r\n        return accounts;\r\n    }\r\n\r\n    function addCtknMapping(address[] memory cTkn) internal {\r\n        for (uint i = 0; i < cTkn.length; i++) {\r\n            address cErc20 = cTkn[i];\r\n            address erc20 = CTokenInterface(cErc20).underlying();\r\n            ctokenAddrs[erc20] = cErc20;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ImportResolver is  ImportHelper {\r\n    event LogDydxImport(address owner, uint accountId, uint percentage, bool isCompound, SupplyData supplyData, BorrowData borrowData);\r\n\r\n    function importAssets(\r\n        uint toConvert,\r\n        uint accountId,\r\n        bool isCompound\r\n    ) external\r\n    {\r\n        // subtracting 0.00000001 ETH from initialPoolBal to solve Compound 8 decimal CETH error.\r\n        uint initialPoolBal = sub(getPoolAddress().balance, 10000000000);\r\n        (SupplyData memory supplyArr, BorrowData memory borrowArr) = getTokensData(accountId, toConvert);\r\n\r\n        // Get liquidity assets to payback user wallet borrowed assets\r\n        if (borrowArr.borrowCount > 0) {\r\n            PoolInterface(getPoolAddress()).accessToken(borrowArr.borrowCAddr, borrowArr.borrowAmt, isCompound);\r\n        }\r\n\r\n        // Creating actions args for solo operate\r\n        SoloMarginContract.ActionArgs[] memory actions = getOperatorActionsArgs(supplyArr, borrowArr);\r\n        SoloMarginContract.Info[] memory accounts = getOperatorAccountArgs(accountId);\r\n\r\n        // Import Assests from msg.sender to address(this)\r\n        SoloMarginContract solo = SoloMarginContract(getSoloAddress());\r\n        solo.operate(accounts, actions);\r\n\r\n        //payback InstaDApp liquidity\r\n        if (borrowArr.borrowCount > 0) {\r\n            PoolInterface(getPoolAddress()).paybackToken(borrowArr.borrowCAddr, isCompound);\r\n        }\r\n\r\n        uint finalPoolBal = getPoolAddress().balance;\r\n        assert(finalPoolBal >= initialPoolBal);\r\n\r\n        emit LogDydxImport(\r\n            msg.sender,\r\n            accountId,\r\n            toConvert,\r\n            isCompound,\r\n            supplyArr,\r\n            borrowArr\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaDydxImport is ImportResolver {\r\n    constructor() public {\r\n        address ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        address cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n        address cSai = 0xF5DCe57282A584D2746FaF1593d3121Fcac444dC;\r\n        address cDai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\r\n        address cUsdc = 0x39AA39c021dfbaE8faC545936693aC917d5E7563;\r\n        address[] memory cAddresses = new address[](3);\r\n        cAddresses[0] = cSai;\r\n        cAddresses[1] = cDai;\r\n        cAddresses[2] = cUsdc;\r\n        ctokenAddrs[ethAddress] = cEth;\r\n        addCtknMapping(cAddresses);\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAddressWETH\",\"outputs\":[{\"name\":\"weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountId\",\"type\":\"uint256\"},{\"name\":\"toConvert\",\"type\":\"uint256\"}],\"name\":\"getTokensData\",\"outputs\":[{\"components\":[{\"name\":\"supplyAmt\",\"type\":\"uint256[]\"},{\"name\":\"supplyAddr\",\"type\":\"address[]\"},{\"name\":\"marketId\",\"type\":\"uint256[]\"},{\"name\":\"supplyCount\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"borrowAmt\",\"type\":\"uint256[]\"},{\"name\":\"borrowAddr\",\"type\":\"address[]\"},{\"name\":\"borrowCAddr\",\"type\":\"address[]\"},{\"name\":\"marketId\",\"type\":\"uint256[]\"},{\"name\":\"borrowCount\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"supplyAmt\",\"type\":\"uint256[]\"},{\"name\":\"supplyAddr\",\"type\":\"address[]\"},{\"name\":\"marketId\",\"type\":\"uint256[]\"},{\"name\":\"supplyCount\",\"type\":\"uint256\"}],\"name\":\"suppyArr\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"borrowAmt\",\"type\":\"uint256[]\"},{\"name\":\"borrowAddr\",\"type\":\"address[]\"},{\"name\":\"borrowCAddr\",\"type\":\"address[]\"},{\"name\":\"marketId\",\"type\":\"uint256[]\"},{\"name\":\"borrowCount\",\"type\":\"uint256\"}],\"name\":\"borrowArr\",\"type\":\"tuple\"}],\"name\":\"getOperatorActionsArgs\",\"outputs\":[{\"components\":[{\"name\":\"actionType\",\"type\":\"uint8\"},{\"name\":\"accountId\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"sign\",\"type\":\"bool\"},{\"name\":\"denomination\",\"type\":\"uint8\"},{\"name\":\"ref\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"amount\",\"type\":\"tuple\"},{\"name\":\"primaryMarketId\",\"type\":\"uint256\"},{\"name\":\"secondaryMarketId\",\"type\":\"uint256\"},{\"name\":\"otherAddress\",\"type\":\"address\"},{\"name\":\"otherAccountId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountId\",\"type\":\"uint256\"}],\"name\":\"getOperatorAccountArgs\",\"outputs\":[{\"components\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toConvert\",\"type\":\"uint256\"},{\"name\":\"accountId\",\"type\":\"uint256\"},{\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"importAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoloAddress\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressETH\",\"outputs\":[{\"name\":\"eth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ctokenAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPoolAddress\",\"outputs\":[{\"name\":\"liqAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isCompound\",\"type\":\"bool\"},{\"components\":[{\"name\":\"supplyAmt\",\"type\":\"uint256[]\"},{\"name\":\"supplyAddr\",\"type\":\"address[]\"},{\"name\":\"marketId\",\"type\":\"uint256[]\"},{\"name\":\"supplyCount\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"supplyData\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"borrowAmt\",\"type\":\"uint256[]\"},{\"name\":\"borrowAddr\",\"type\":\"address[]\"},{\"name\":\"borrowCAddr\",\"type\":\"address[]\"},{\"name\":\"marketId\",\"type\":\"uint256[]\"},{\"name\":\"borrowCount\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"borrowData\",\"type\":\"tuple\"}],\"name\":\"LogDydxImport\",\"type\":\"event\"}]","ContractName":"InstaDydxImport","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://da50d3cda7fd487ed106120803d7c988e97ab453659db4eba600b6d7732bfc7c"}]}