{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.2;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TrueCrt \r\n * @notice Contract is not payable.\r\n * Owner can add crt .\r\n */\r\ncontract TrueCrt is Ownable {\r\n    \r\n    //Crt struct\r\n    struct Cert {\r\n        uint256 certId; \r\n        bytes32  certHash;\r\n        uint64  certExpires; \r\n        uint64  issuedOn;\r\n    }\r\n    \r\n    //Array containing all crt\r\n    mapping (uint256 => Cert) certs;\r\n   \r\n    //Holds the mapping for crt ids\r\n    mapping (uint256 => bool) certIds;\r\n \r\n    //Emit Event for new certs\r\n    event NewCert(uint256 certId);\r\n    event CertExists(uint256 certId);\r\n    \r\n    //is not payable.\r\n    constructor() public {}\r\n    \r\n    /**\r\n     * @dev Add new Crt\r\n     */\r\n    function addCert(uint256 _certId, bytes32  _certHash, uint64 _certExpires, uint64 _issuedOn)  onlyOwner  public{ \r\n        if(!certIds[_certId]){\r\n            certIds[_certId] = true;\r\n            certs[_certId] = Cert(_certId,_certHash,_certExpires,_issuedOn);\r\n            emit NewCert(_certId);\r\n        }else{\r\n            emit CertExists(_certId);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Send Array of Crt\r\n     */   \r\n    function addManyCerts(uint256[] memory _certId, bytes32[] memory _certHash, uint64[] memory _certExpires, uint64[] memory _issuedOn)  onlyOwner  public{ \r\n        for (uint256 i = 0; i < _certId.length; i++) {\r\n          addCert(_certId[i],_certHash[i],_certExpires[i],_issuedOn[i]);\r\n        } \r\n    }\r\n    \r\n    function getCert(uint256 _certId) public view returns (bytes32,uint64,uint64) {\r\n        require(certIds[_certId], \"CertIds: _certId is not found\");\r\n        return (certs[_certId].certHash,certs[_certId].certExpires,certs[_certId].issuedOn);\r\n    }\r\n    \r\n    function getCertHash(uint256 _certId) public view returns (bytes32) {\r\n        require(certIds[_certId], \"CertIds: _certId is not found\");\r\n        return certs[_certId].certHash;\r\n    }\r\n    \r\n    function getCertCertExpires(uint256 _certId) public view returns (uint64) {\r\n        require(certIds[_certId], \"CertIds: _certId is not found\");\r\n        return certs[_certId].certExpires;\r\n    }\r\n    \r\n    function getCertIssuedOn(uint256 _certId) public view returns (uint64) {\r\n        require(certIds[_certId], \"CertIds: _certId is not found\");\r\n        return certs[_certId].issuedOn;\r\n    }    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certId\",\"type\":\"uint256\"}],\"name\":\"CertExists\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certId\",\"type\":\"uint256\"}],\"name\":\"NewCert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_certHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_certExpires\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_issuedOn\",\"type\":\"uint64\"}],\"name\":\"addCert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_certId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_certHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_certExpires\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_issuedOn\",\"type\":\"uint64[]\"}],\"name\":\"addManyCerts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"}],\"name\":\"getCert\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"}],\"name\":\"getCertCertExpires\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"}],\"name\":\"getCertHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certId\",\"type\":\"uint256\"}],\"name\":\"getCertIssuedOn\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrueCrt","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a27d6880990410ebebe15e465a8381200df18822cc68bfc0c118dbb8f04ccad7"}]}