{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    require(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    require(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TwoKeyCongressMembersRegistry {\r\n    /**\r\n     * This contract will serve as accountant for Members inside TwoKeyCongress\r\n     * contract. Only contract eligible to mutate state of this contract is TwoKeyCongress\r\n     * TwoKeyCongress will check for it's members from this contract.\r\n     */\r\n\r\n    using SafeMath for uint;\r\n\r\n    event MembershipChanged(address member, bool isMember);\r\n\r\n    address public TWO_KEY_CONGRESS;\r\n\r\n    // The maximum voting power containing sum of voting powers of all active members\r\n    uint256 public maxVotingPower;\r\n    //The minimum number of voting members that must be in attendance\r\n    uint256 public minimumQuorum;\r\n\r\n    // Mapping to check if the member is belonging to congress\r\n    mapping (address => bool) public isMemberInCongress;\r\n    // Mapping address to memberId\r\n    mapping(address => Member) public address2Member;\r\n    // Mapping to store all members addresses\r\n    address[] public allMembers;\r\n\r\n    struct Member {\r\n        address memberAddress;\r\n        bytes32 name;\r\n        uint votingPower;\r\n        uint memberSince;\r\n    }\r\n\r\n    modifier onlyTwoKeyCongress () {\r\n        require(msg.sender == TWO_KEY_CONGRESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @param initialCongressMembers is the array containing addresses of initial members\r\n     * @param memberVotingPowers is the array of unassigned integers containing voting powers respectively\r\n     * @dev initialMembers.length must be equal votingPowers.length\r\n     */\r\n    constructor(\r\n        address[] initialCongressMembers,\r\n        bytes32[] initialCongressMemberNames,\r\n        uint[] memberVotingPowers,\r\n        address _twoKeyCongress\r\n    )\r\n    public\r\n    {\r\n        uint length = initialCongressMembers.length;\r\n        for(uint i=0; i<length; i++) {\r\n            addMemberInternal(\r\n                initialCongressMembers[i],\r\n                initialCongressMemberNames[i],\r\n                memberVotingPowers[i]\r\n            );\r\n        }\r\n        TWO_KEY_CONGRESS = _twoKeyCongress;\r\n    }\r\n\r\n    /**\r\n     * Add member\r\n     *\r\n     * Make `targetMember` a member named `memberName`\r\n     *\r\n     * @param targetMember ethereum address to be added\r\n     * @param memberName public name for that member\r\n     */\r\n    function addMember(\r\n        address targetMember,\r\n        bytes32 memberName,\r\n        uint _votingPower\r\n    )\r\n    public\r\n    onlyTwoKeyCongress\r\n    {\r\n        addMemberInternal(targetMember, memberName, _votingPower);\r\n    }\r\n\r\n    function addMemberInternal(\r\n        address targetMember,\r\n        bytes32 memberName,\r\n        uint _votingPower\r\n    )\r\n    internal\r\n    {\r\n        //Require that this member is not already a member of congress\r\n        require(isMemberInCongress[targetMember] == false);\r\n        minimumQuorum = allMembers.length;\r\n        maxVotingPower = maxVotingPower.add(_votingPower);\r\n        address2Member[targetMember] = Member(\r\n            {\r\n            memberAddress: targetMember,\r\n            memberSince: block.timestamp,\r\n            votingPower: _votingPower,\r\n            name: memberName\r\n            }\r\n        );\r\n        allMembers.push(targetMember);\r\n        isMemberInCongress[targetMember] = true;\r\n        emit MembershipChanged(targetMember, true);\r\n    }\r\n\r\n    /**\r\n     * Remove member\r\n     *\r\n     * @notice Remove membership from `targetMember`\r\n     *\r\n     * @param targetMember ethereum address to be removed\r\n     */\r\n    function removeMember(\r\n        address targetMember\r\n    )\r\n    public\r\n    onlyTwoKeyCongress\r\n    {\r\n        require(isMemberInCongress[targetMember] == true);\r\n\r\n        //Remove member voting power from max voting power\r\n        uint votingPower = getMemberVotingPower(targetMember);\r\n        maxVotingPower-= votingPower;\r\n\r\n        uint length = allMembers.length;\r\n        uint i=0;\r\n        //Find selected member\r\n        while(allMembers[i] != targetMember) {\r\n            if(i == length) {\r\n                revert();\r\n            }\r\n            i++;\r\n        }\r\n\r\n        // Move the lest member to this place\r\n        allMembers[i] = allMembers[length-1];\r\n\r\n        //After reduce array size\r\n        delete allMembers[allMembers.length-1];\r\n\r\n        uint newLength = allMembers.length.sub(1);\r\n        allMembers.length = newLength;\r\n\r\n        //Remove him from state mapping\r\n        isMemberInCongress[targetMember] = false;\r\n\r\n        //Remove his state to empty member\r\n        address2Member[targetMember] = Member(\r\n            {\r\n                memberAddress: address(0),\r\n                memberSince: block.timestamp,\r\n                votingPower: 0,\r\n                name: \"0x0\"\r\n            }\r\n        );\r\n        //Reduce 1 member from quorum\r\n        minimumQuorum = minimumQuorum.sub(1);\r\n    }\r\n\r\n    /// @notice Function getter for voting power for specific member\r\n    /// @param _memberAddress is the address of the member\r\n    /// @return integer representing voting power\r\n    function getMemberVotingPower(\r\n        address _memberAddress\r\n    )\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        Member memory _member = address2Member[_memberAddress];\r\n        return _member.votingPower;\r\n    }\r\n\r\n    /**\r\n     * @notice Function which will be exposed and congress will use it as \"modifier\"\r\n     * @param _address is the address we're willing to check if it belongs to congress\r\n     * @return true/false depending if it is either a member or not\r\n     */\r\n    function isMember(\r\n        address _address\r\n    )\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return isMemberInCongress[_address];\r\n    }\r\n\r\n    /// @notice Getter for length for how many members are currently\r\n    /// @return length of members\r\n    function getMembersLength()\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return allMembers.length;\r\n    }\r\n\r\n    /// @notice Function to get addresses of all members in congress\r\n    /// @return array of addresses\r\n    function getAllMemberAddresses()\r\n    public\r\n    view\r\n    returns (address[])\r\n    {\r\n        return allMembers;\r\n    }\r\n\r\n    /// Basic getter function\r\n    function getMemberInfo()\r\n    public\r\n    view\r\n    returns (address, bytes32, uint, uint)\r\n    {\r\n        Member memory member = address2Member[msg.sender];\r\n        return (member.memberAddress, member.name, member.votingPower, member.memberSince);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"targetMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllMemberAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetMember\",\"type\":\"address\"},{\"name\":\"memberName\",\"type\":\"bytes32\"},{\"name\":\"_votingPower\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMemberInCongress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMemberInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumQuorum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address2Member\",\"outputs\":[{\"name\":\"memberAddress\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"votingPower\",\"type\":\"uint256\"},{\"name\":\"memberSince\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_KEY_CONGRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxVotingPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMemberVotingPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMembersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialCongressMembers\",\"type\":\"address[]\"},{\"name\":\"initialCongressMemberNames\",\"type\":\"bytes32[]\"},{\"name\":\"memberVotingPowers\",\"type\":\"uint256[]\"},{\"name\":\"_twoKeyCongress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isMember\",\"type\":\"bool\"}],\"name\":\"MembershipChanged\",\"type\":\"event\"}]","ContractName":"TwoKeyCongressMembersRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000210d093bb95d6bebad37954f76c8a57ea54b991400000000000000000000000000000000000000000000000000000000000000030000000000000000000000004216909456e770ffc737d987c273a0b8ce19c13e0000000000000000000000005e2b2b278445aaa649a6b734b0945bd9177f4f03000000000000000000000000d19b86369f0da8692774773e84d5a01394c02cf70000000000000000000000000000000000000000000000000000000000000003456974616e0000000000000000000000000000000000000000000000000000004b696b69000000000000000000000000000000000000000000000000000000005469654272616b652000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://faf28f94d82db44441bfe47d124f78515a42ec62361cce60b91f3ebc05a85e02"}]}