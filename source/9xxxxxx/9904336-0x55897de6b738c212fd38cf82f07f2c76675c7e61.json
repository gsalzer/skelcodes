{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface LiqudityInterface {\r\n    function deposit(address, uint) external payable;\r\n    function withdraw(address, uint) external;\r\n\r\n    function accessLiquidity(address[] calldata, uint[] calldata) external;\r\n    function returnLiquidity(address[] calldata) external payable;\r\n\r\n    function isTknAllowed(address) external view returns(bool);\r\n    function tknToCTkn(address) external view returns(address);\r\n    function liquidityBalance(address, address) external view returns(uint);\r\n}\r\n\r\ninterface CTokenInterface {\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\r\n}\r\n\r\ninterface CETHInterface {\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n    function repayBorrowBehalf(address borrower) external payable;\r\n}\r\n\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint _connectorType, uint _connectorID, bytes32 _eventCode, bytes calldata _eventData) external;\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev Return ethereum address\r\n     */\r\n    function getAddressETH() internal pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return Memory Variable Address\r\n     */\r\n    function getMemoryAddr() internal pure returns (address) {\r\n        return 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() internal pure returns (address) {\r\n        return 0x2af7ea6Cb911035f3eb1ED895Cb6692C39ecbA97; // InstaEvent Address\r\n    }\r\n\r\n    /**\r\n     * @dev Get Uint value from InstaMemory Contract.\r\n    */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Uint value in InstaMemory Contract.\r\n    */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n    /**\r\n     * @dev Connector Details\r\n    */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 5);\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityHelpers is Helpers {\r\n    /**\r\n     * @dev Return InstaPool address\r\n     */\r\n    function getLiquidityAddress() internal pure returns (address) {\r\n        return 0x1879BEE186BFfBA9A8b1cAD8181bBFb218A5Aa61;\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityManage is LiquidityHelpers {\r\n\r\n    event LogDepositLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogWithdrawLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Deposit Liquidity in InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function deposit(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        uint ethAmt;\r\n        if (token == getAddressETH()) {\r\n            _amt = _amt == uint(-1) ? address(this).balance : _amt;\r\n            ethAmt = _amt;\r\n        } else {\r\n            _amt = _amt == uint(-1) ? TokenInterface(token).balanceOf(address(this)) : _amt;\r\n            TokenInterface(token).approve(getLiquidityAddress(), _amt);\r\n        }\r\n\r\n        LiqudityInterface(getLiquidityAddress()).deposit.value(ethAmt)(token, _amt);\r\n        setUint(setId, _amt);\r\n\r\n        emit LogDepositLiquidity(token, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogDepositLiquidity(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Liquidity in InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function withdraw(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        LiqudityInterface(getLiquidityAddress()).withdraw(token, _amt);\r\n        setUint(setId, _amt);\r\n\r\n        emit LogWithdrawLiquidity(token, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogWithdrawLiquidity(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n}\r\n\r\n\r\ncontract LiquidityAccess is LiquidityManage {\r\n    event LogAccessLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n    event LogReturnLiquidity(address indexed token, uint256 tokenAmt, uint256 getId, uint256 setId);\r\n\r\n    /**\r\n     * @dev Access Token Liquidity from InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function accessLiquidity(address token, uint amt, uint getId, uint setId) external payable {\r\n        uint _amt = getUint(getId, amt);\r\n\r\n        address[] memory _tknAddrs = new address[](1);\r\n        _tknAddrs[0] = token;\r\n        uint[] memory _amts = new uint[](1);\r\n        _amts[0] = _amt;\r\n\r\n        LiqudityInterface(getLiquidityAddress()).accessLiquidity(_tknAddrs, _amts);\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogAccessLiquidity(token, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogAccessLiquidity(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Token Liquidity from InstaPool.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\r\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\r\n    */\r\n    function returnLiquidity(address token, uint getId, uint setId) external payable {\r\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\r\n        uint _amt;\r\n\r\n        if (token == getAddressETH()) {\r\n            CETHInterface cethContract = CETHInterface(liquidityContract.tknToCTkn(token));\r\n            _amt = cethContract.borrowBalanceCurrent(address(liquidityContract));\r\n            cethContract.repayBorrowBehalf.value(_amt)(address(liquidityContract));\r\n        } else {\r\n            CTokenInterface ctokenContract = CTokenInterface(liquidityContract.tknToCTkn(token));\r\n            _amt = ctokenContract.borrowBalanceCurrent(address(liquidityContract));\r\n            TokenInterface(token).approve(address(ctokenContract), _amt);\r\n            require(ctokenContract.repayBorrowBehalf(address(liquidityContract), _amt) == 0, \"repay-failed\");\r\n        }\r\n\r\n        setUint(setId, _amt);\r\n\r\n        emit LogReturnLiquidity(token, _amt, getId, setId);\r\n        bytes32 _eventCode = keccak256(\"LogReturnLiquidity(address,uint256,uint256,uint256)\");\r\n        bytes memory _eventParam = abi.encode(token, _amt, getId, setId);\r\n        (uint _type, uint _id) = connectorID();\r\n        EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n    }\r\n\r\n    /**\r\n     * @dev Access Multiple Token liquidity from InstaPool.\r\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amts Array of token amount.\r\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\r\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\r\n    */\r\n    function accessMultiLiquidity(\r\n        address[] calldata tokens,\r\n        uint[] calldata amts,\r\n        uint[] calldata getId,\r\n        uint[] calldata setId\r\n    ) external payable {\r\n        uint _length = tokens.length;\r\n        uint[] memory _amts = new uint[](_length);\r\n        for (uint i = 0; i < _length; i++) {\r\n            _amts[i] = getUint(getId[i], amts[i]);\r\n        }\r\n\r\n        LiqudityInterface(getLiquidityAddress()).accessLiquidity(tokens, _amts);\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n            setUint(setId[i], _amts[i]);\r\n\r\n            emit LogAccessLiquidity(tokens[i], _amts[i], getId[i], setId[i]);\r\n            bytes32 _eventCode = keccak256(\"LogAccessLiquidity(address,uint256,uint256,uint256)\");\r\n            bytes memory _eventParam = abi.encode(tokens[i], _amts[i], getId[i], setId[i]);\r\n            (uint _type, uint _id) = connectorID();\r\n            EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return Multiple token liquidity from InstaPool.\r\n     * @param tokens Array of token addresses.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param getId get token amounts at this IDs from `InstaMemory` Contract.\r\n     * @param setId set token amounts at this IDs in `InstaMemory` Contract.\r\n    */\r\n    function returnMultiLiquidity(address[] calldata tokens, uint[] calldata getId, uint[] calldata setId) external payable {\r\n        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());\r\n\r\n        uint _length = tokens.length;\r\n\r\n        for (uint i = 0; i < _length; i++) {\r\n\r\n            for (uint j = 0; j < _length; j++) {\r\n                if (tokens[i] == tokens[j] && i != j) require(false, \"tkn-repeated\");\r\n            }\r\n\r\n            uint _amt;\r\n\r\n            if (tokens[i] == getAddressETH()) {\r\n                CETHInterface cethContract = CETHInterface(liquidityContract.tknToCTkn(tokens[i]));\r\n                _amt = cethContract.borrowBalanceCurrent(address(liquidityContract));\r\n                cethContract.repayBorrowBehalf.value(_amt)(address(liquidityContract));\r\n            } else {\r\n                CTokenInterface ctokenContract = CTokenInterface(liquidityContract.tknToCTkn(tokens[i]));\r\n                _amt = ctokenContract.borrowBalanceCurrent(address(liquidityContract));\r\n                TokenInterface(tokens[i]).approve(address(ctokenContract), _amt);\r\n                require(ctokenContract.repayBorrowBehalf(address(liquidityContract), _amt) == 0, \"repay-failed\");\r\n            }\r\n\r\n            setUint(setId[i], _amt);\r\n\r\n            emit LogReturnLiquidity(tokens[i], _amt, getId[i], setId[i]);\r\n            bytes32 _eventCode = keccak256(\"LogReturnLiquidity(address,uint256,uint256,uint256)\");\r\n            bytes memory _eventParam = abi.encode(tokens[i], _amt, getId[i], setId[i]);\r\n            (uint _type, uint _id) = connectorID();\r\n            EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectPool is LiquidityAccess {\r\n    string public name = \"InstaPool-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogAccessLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogReturnLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"accessLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"getId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"accessMultiLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"returnLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"getId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"setId\",\"type\":\"uint256[]\"}],\"name\":\"returnMultiLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectPool","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://c3d972dd1975312665cc3f1e6460846456916ed9ef596e5a8d88718be8a94ad4"}]}