{"status":"1","message":"OK","result":[{"SourceCode":"// File: @aragon/os/contracts/common/UnstructuredStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary UnstructuredStorage {\r\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\r\n        assembly { data := sload(position) }\r\n    }\r\n\r\n    function setStorageBool(bytes32 position, bool data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageAddress(bytes32 position, address data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n\r\n    function setStorageUint256(bytes32 position, uint256 data) internal {\r\n        assembly { sstore(position, data) }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/IACL.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IVaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IVaultRecoverable {\r\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\r\n\r\n    function transferToVault(address token) external;\r\n\r\n    function allowRecoverability(address token) external view returns (bool);\r\n    function getRecoveryVault() external view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/IKernel.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ninterface IKernelEvents {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\r\n}\r\n\r\n\r\n// This should be an interface, but interfaces can't inherit yet :(\r\ncontract IKernel is IKernelEvents, IVaultRecoverable {\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\r\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AppStorage.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\r\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\r\n    */\r\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\r\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\r\n\r\n    function kernel() public view returns (IKernel) {\r\n        return IKernel(KERNEL_POSITION.getStorageAddress());\r\n    }\r\n\r\n    function appId() public view returns (bytes32) {\r\n        return APP_ID_POSITION.getStorageBytes32();\r\n    }\r\n\r\n    function setKernel(IKernel _kernel) internal {\r\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\r\n    }\r\n\r\n    function setAppId(bytes32 _appId) internal {\r\n        APP_ID_POSITION.setStorageBytes32(_appId);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/acl/ACLSyntaxSugar.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[]) {\r\n        return new uint256[](0);\r\n    }\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c, _d);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Uint256Helpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary Uint256Helpers {\r\n    uint256 private constant MAX_UINT64 = uint64(-1);\r\n\r\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\r\n\r\n    function toUint64(uint256 a) internal pure returns (uint64) {\r\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\r\n        return uint64(a);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/TimeHelpers.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract TimeHelpers {\r\n    using Uint256Helpers for uint256;\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number, converted to uint64.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber64() internal view returns (uint64) {\r\n        return getBlockNumber().toUint64();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp() internal view returns (uint256) {\r\n        return block.timestamp; // solium-disable-line security/no-block-members\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current timestamp, converted to uint64.\r\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\r\n    *      tests.\r\n    */\r\n    function getTimestamp64() internal view returns (uint64) {\r\n        return getTimestamp().toUint64();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Initializable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract Initializable is TimeHelpers {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\r\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\r\n\r\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\r\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\r\n\r\n    modifier onlyInit {\r\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized {\r\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\r\n    }\r\n\r\n    /**\r\n    * @return Whether the contract has been initialized by the time of the current block\r\n    */\r\n    function hasInitialized() public view returns (bool) {\r\n        uint256 initializationBlock = getInitializationBlock();\r\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization to enable the contract\r\n    *      at a future block number rather than immediately.\r\n    */\r\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\r\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Petrifiable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Petrifiable is Initializable {\r\n    // Use block UINT256_MAX (which should be never) as the initializable date\r\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\r\n\r\n    function isPetrified() public view returns (bool) {\r\n        return getInitializationBlock() == PETRIFIED_BLOCK;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract to prevent being initialized.\r\n    *      Useful for freezing base contracts when they're used behind proxies.\r\n    */\r\n    function petrify() internal onlyInit {\r\n        initializedAt(PETRIFIED_BLOCK);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/Autopetrified.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract Autopetrified is Petrifiable {\r\n    constructor() public {\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        petrify();\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ConversionHelpers.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary ConversionHelpers {\r\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\r\n\r\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\r\n        // Force cast the uint256[] into a bytes array, by overwriting its length\r\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 byteLength = _input.length * 32;\r\n        assembly {\r\n            output := _input\r\n            mstore(output, byteLength)\r\n        }\r\n    }\r\n\r\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\r\n        // Force cast the bytes array into a uint256[], by overwriting its length\r\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\r\n        // with the input and a new length. The input becomes invalid from this point forward.\r\n        uint256 intsLength = _input.length / 32;\r\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\r\n\r\n        assembly {\r\n            output := _input\r\n            mstore(output, intsLength)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/ReentrancyGuard.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ReentrancyGuard {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\r\n    */\r\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\r\n\r\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\r\n\r\n    modifier nonReentrant() {\r\n        // Ensure mutex is unlocked\r\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\r\n\r\n        // Lock mutex before function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\r\n\r\n        // Perform function call\r\n        _;\r\n\r\n        // Unlock mutex after function call\r\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/token/ERC20.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public returns (bool);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @aragon/os/contracts/common/EtherTokenConstant.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\r\n// contracts where both tokens and ETH are accepted\r\ncontract EtherTokenConstant {\r\n    address internal constant ETH = address(0);\r\n}\r\n\r\n// File: @aragon/os/contracts/common/IsContract.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract IsContract {\r\n    /*\r\n    * NOTE: this should NEVER be used for authentication\r\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\r\n    *\r\n    * This is only intended to be used as a sanity check that an address is actually a contract,\r\n    * RATHER THAN an address not being a contract.\r\n    */\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/SafeERC20.sol\r\n\r\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\r\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\r\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            let success := call(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                0,                    // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n\r\n                // Not sure what was returned: don't mark as success\r\n                default { }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function staticInvoke(address _addr, bytes memory _calldata)\r\n        private\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        bool success;\r\n        uint256 ret;\r\n        assembly {\r\n            let ptr := mload(0x40)    // free memory pointer\r\n\r\n            success := staticcall(\r\n                gas,                  // forward all gas\r\n                _addr,                // address\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata),     // calldata length\r\n                ptr,                  // write output over free memory\r\n                0x20                  // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                ret := mload(ptr)\r\n            }\r\n        }\r\n        return (success, ret);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, transferFromCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n    *      Note that this makes an external call to the token.\r\n    */\r\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(_token, approveCallData);\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.balanceOf().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\r\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\r\n            _token.balanceOf.selector,\r\n            _owner\r\n        );\r\n\r\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\r\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\r\n\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n    * @dev Static call into ERC20.allowance().\r\n    * Reverts if the call fails for some reason (should never fail).\r\n    */\r\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\r\n        bytes memory allowanceCallData = abi.encodeWithSelector(\r\n            _token.allowance.selector,\r\n            _owner,\r\n            _spender\r\n        );\r\n\r\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\r\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\r\n\r\n        return allowance;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/VaultRecoverable.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\r\n    using SafeERC20 for ERC20;\r\n\r\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\r\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\r\n\r\n    /**\r\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\r\n     *         but in case it does, this function allows one to recover them.\r\n     * @param _token Token balance to be sent to recovery vault.\r\n     */\r\n    function transferToVault(address _token) external {\r\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\r\n        address vault = getRecoveryVault();\r\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\r\n\r\n        uint256 balance;\r\n        if (_token == ETH) {\r\n            balance = address(this).balance;\r\n            vault.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.staticBalanceOf(this);\r\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\r\n        }\r\n\r\n        emit RecoverToVault(vault, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev By default deriving from AragonApp makes it recoverable\r\n    * @param token Token address that would be recovered\r\n    * @return bool whether the app allows the recovery\r\n    */\r\n    function allowRecoverability(address token) public view returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // Cast non-implemented interface to be public so we can use it internally\r\n    function getRecoveryVault() public view returns (address);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n    function executorType() external pure returns (bytes32);\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\r\n    */\r\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    // TODO: this should be external\r\n    // See https://github.com/ethereum/solidity/issues/4832\r\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\r\n}\r\n\r\n// File: @aragon/os/contracts/kernel/KernelConstants.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KernelAppIds {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\r\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\r\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\r\n}\r\n\r\n\r\ncontract KernelNamespaceConstants {\r\n    /* Hardcoded constants to save gas\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n    */\r\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\r\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\r\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\r\n}\r\n\r\n// File: @aragon/os/contracts/evmscript/EVMScriptRunner.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\r\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\r\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\r\n\r\n    /* This is manually crafted in assembly\r\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\r\n    */\r\n\r\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\r\n\r\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\r\n        internal\r\n        isInitialized\r\n        protectState\r\n        returns (bytes)\r\n    {\r\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\r\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\r\n\r\n        bytes4 sig = executor.execScript.selector;\r\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\r\n\r\n        bytes memory output;\r\n        assembly {\r\n            let success := delegatecall(\r\n                gas,                // forward all gas\r\n                executor,           // address\r\n                add(data, 0x20),    // calldata start\r\n                mload(data),        // calldata length\r\n                0,                  // don't write output (we'll handle this ourselves)\r\n                0                   // don't write output\r\n            )\r\n\r\n            output := mload(0x40) // free mem ptr get\r\n\r\n            switch success\r\n            case 0 {\r\n                // If the call errored, forward its full error data\r\n                returndatacopy(output, 0, returndatasize)\r\n                revert(output, returndatasize)\r\n            }\r\n            default {\r\n                switch gt(returndatasize, 0x3f)\r\n                case 0 {\r\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\r\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\r\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\r\n                    // this memory layout\r\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\r\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\r\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\r\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\r\n\r\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\r\n                }\r\n                default {\r\n                    // Copy result\r\n                    //\r\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\r\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\r\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\r\n                    //    [ output length (32 bytes) ]\r\n                    //    [ output content (N bytes) ]\r\n                    //\r\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\r\n                    let copysize := sub(returndatasize, 0x20)\r\n                    returndatacopy(output, 0x20, copysize)\r\n\r\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ScriptResult(address(executor), _script, _input, output);\r\n\r\n        return output;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = address(kernel());\r\n        bytes32 preAppId = appId();\r\n        _; // exec\r\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\r\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/apps/AragonApp.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer:    MIT\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\r\n// that they can never be initialized.\r\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\r\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\r\n// are included so that they are automatically usable by subclassing contracts\r\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\r\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\r\n\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] _params) {\r\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\r\n    * @param _sender Sender of the call\r\n    * @param _role Role on this app\r\n    * @param _params Permission params for the role\r\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\r\n    *         Always returns false if the app hasn't been initialized yet.\r\n    */\r\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\r\n        if (!hasInitialized()) {\r\n            return false;\r\n        }\r\n\r\n        IKernel linkedKernel = kernel();\r\n        if (address(linkedKernel) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return linkedKernel.hasPermission(\r\n            _sender,\r\n            address(this),\r\n            _role,\r\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Get the recovery vault for the app\r\n    * @return Recovery vault address for the app\r\n    */\r\n    function getRecoveryVault() public view returns (address) {\r\n        // Funds recovery via a vault is only available when used with a kernel\r\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/lib/math/SafeMath64.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\r\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath64\r\n * @dev Math operations for uint64 with safety checks that revert on error\r\n */\r\nlibrary SafeMath64 {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint256 c = uint256(_a) * uint256(_b);\r\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\r\n\r\n        return uint64(c);\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint64 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint64 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\r\n        uint64 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @aragon/os/contracts/common/DepositableStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract DepositableStorage {\r\n    using UnstructuredStorage for bytes32;\r\n\r\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\r\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\r\n\r\n    function isDepositable() public view returns (bool) {\r\n        return DEPOSITABLE_POSITION.getStorageBool();\r\n    }\r\n\r\n    function setDepositable(bool _depositable) internal {\r\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\r\n    }\r\n}\r\n\r\n// File: @aragon/apps-vault/contracts/Vault.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\r\n    using SafeERC20 for ERC20;\r\n\r\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\r\n\r\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\r\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\r\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\r\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\r\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\r\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\r\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\r\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\r\n\r\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\r\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\r\n\r\n    /**\r\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\r\n    *      intercepted by the Proxy (see aragonOS#281)\r\n    */\r\n    function () external payable isInitialized {\r\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\r\n        _deposit(ETH, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @notice Initialize Vault app\r\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\r\n    */\r\n    function initialize() external onlyInit {\r\n        initialized();\r\n        setDepositable(true);\r\n    }\r\n\r\n    /**\r\n    * @notice Deposit `_value` `_token` to the vault\r\n    * @param _token Address of the token being transferred\r\n    * @param _value Amount of tokens being transferred\r\n    */\r\n    function deposit(address _token, uint256 _value) external payable isInitialized {\r\n        _deposit(_token, _value);\r\n    }\r\n\r\n    /**\r\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\r\n    * @param _token Address of the token being transferred\r\n    * @param _to Address of the recipient of tokens\r\n    * @param _value Amount of tokens being transferred\r\n    */\r\n    /* solium-disable-next-line function-order */\r\n    function transfer(address _token, address _to, uint256 _value)\r\n        external\r\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\r\n    {\r\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\r\n\r\n        if (_token == ETH) {\r\n            require(_to.send(_value), ERROR_SEND_REVERTED);\r\n        } else {\r\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\r\n        }\r\n\r\n        emit VaultTransfer(_token, _to, _value);\r\n    }\r\n\r\n    function balance(address _token) public view returns (uint256) {\r\n        if (_token == ETH) {\r\n            return address(this).balance;\r\n        } else {\r\n            return ERC20(_token).staticBalanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Disable recovery escape hatch, as it could be used\r\n    *      maliciously to transfer funds away from the vault\r\n    */\r\n    function allowRecoverability(address) public view returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function _deposit(address _token, uint256 _value) internal {\r\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\r\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\r\n\r\n        if (_token == ETH) {\r\n            // Deposit is implicit in this case\r\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\r\n        } else {\r\n            require(\r\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\r\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\r\n            );\r\n        }\r\n\r\n        emit VaultDeposit(_token, msg.sender, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/Allocations.sol\r\n\r\n/*\r\n * SPDX-License-Identitifer: GPL-3.0-or-later\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Allocations is AragonApp {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath64 for uint64;\r\n    using SafeERC20 for ERC20;\r\n\r\n    bytes32 public constant CREATE_ACCOUNT_ROLE = 0x9b9e262b9ea0587fdc5926b22b8ed5837efef4f4cc67bc1a7ee18f68ad83062f;\r\n    bytes32 public constant CREATE_ALLOCATION_ROLE = 0x8af1e3d6225e5adff5174a4949cb3cc04f0f62937083325a9e302eaf5d07cdf1;\r\n    bytes32 public constant EXECUTE_ALLOCATION_ROLE = 0x1ced0be26d1bb2db7a1a0a01064be22894ce4ca0321b6f4b28d0b1a5ce62e7ea;\r\n    bytes32 public constant EXECUTE_PAYOUT_ROLE = 0xa5cf757319c734091fd95cf4b09938ff69ee22637eda897ea92ca59e56f00bcb;\r\n    bytes32 public constant CHANGE_PERIOD_ROLE = 0xd35e458bacdd5343c2f050f574554b2f417a8ea38d6a9a65ce2225dbe8bb9a9d;\r\n    bytes32 public constant CHANGE_BUDGETS_ROLE = 0xd79730e82bfef7d2f9639b9d10bf37ebb662b22ae2211502a00bdf7b2cc3a23a;\r\n    bytes32 public constant SET_MAX_CANDIDATES_ROLE = 0xe593f1908655effa3e2eb1eab075684bd646a51d97f20646bb9ecb2df3e4f2bb;\r\n\r\n    uint256 internal constant MAX_UINT256 = uint256(-1);\r\n    uint64 internal constant MAX_UINT64 = uint64(-1);\r\n    uint64 internal constant MINIMUM_PERIOD = uint64(1 days);\r\n    uint256 internal constant MAX_SCHEDULED_PAYOUTS_PER_TX = 20;\r\n\r\n    string private constant ERROR_NO_PERIOD = \"NO_PERIOD\";\r\n    string private constant ERROR_NO_ACCOUNT = \"NO_ACCOUNT\";\r\n    string private constant ERROR_NO_PAYOUT = \"NO_PAYOUT\";\r\n    string private constant ERROR_NO_CANDIDATE = \"NO_CANDIDATE\";\r\n    string private constant ERROR_PERIOD_SHORT = \"SET_PERIOD_TOO_SHORT\";\r\n    string private constant ERROR_COMPLETE_TRANSITION = \"COMPLETE_TRANSITION\";\r\n    string private constant ERROR_MIN_RECURRENCE = \"RECURRENCES_BELOW_ONE\";\r\n    string private constant ERROR_CANDIDATE_NOT_RECEIVER = \"CANDIDATE_NOT_RECEIVER\";\r\n    string private constant ERROR_INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\";\r\n\r\n    struct Payout {\r\n        uint64 startTime;\r\n        uint64 recurrences;\r\n        uint64 period;\r\n        address[] candidateAddresses;\r\n        uint256[] supports;\r\n        uint64[] executions;\r\n        uint256 amount;\r\n        string description;\r\n    }\r\n\r\n    struct Account {\r\n        uint64 payoutsLength;\r\n        bool hasBudget;\r\n        address token;\r\n        mapping (uint64 => Payout) payouts;\r\n        string metadata;\r\n        uint256 budget;\r\n    }\r\n\r\n    struct AccountStatement {\r\n        mapping(address => uint256) expenses;\r\n    }\r\n\r\n    struct Period {\r\n        uint64 startTime;\r\n        uint64 endTime;\r\n        mapping (uint256 => AccountStatement) accountStatement;\r\n    }\r\n\r\n    uint64 accountsLength;\r\n    uint64 periodsLength;\r\n    uint64 periodDuration;\r\n    uint256 maxCandidates;\r\n    Vault public vault;\r\n    mapping (uint64 => Account) accounts;\r\n    mapping (uint64 => Period) periods;\r\n    mapping(address => uint) accountProxies; // proxy address -> account Id\r\n\r\n    event PayoutExecuted(uint64 accountId, uint64 payoutId, uint candidateId);\r\n    event NewAccount(uint64 accountId);\r\n    event NewPeriod(uint64 indexed periodId, uint64 periodStarts, uint64 periodEnds);\r\n    event FundAccount(uint64 accountId);\r\n    event SetDistribution(uint64 accountId, uint64 payoutId);\r\n    event PaymentFailure(uint64 accountId, uint64 payoutId, uint256 candidateId);\r\n    event SetBudget(uint256 indexed accountId, uint256 amount, string name, bool hasBudget);\r\n    event ChangePeriodDuration(uint64 newDuration);\r\n\r\n    modifier periodExists(uint64 _periodId) {\r\n        require(_periodId < periodsLength, ERROR_NO_PERIOD);\r\n        _;\r\n    }\r\n\r\n    modifier accountExists(uint64 _accountId) {\r\n        require(_accountId < accountsLength, ERROR_NO_ACCOUNT);\r\n        _;\r\n    }\r\n\r\n    modifier payoutExists(uint64 _accountId, uint64 _payoutId) {\r\n        require(_payoutId < accounts[_accountId].payoutsLength, ERROR_NO_PAYOUT);\r\n        _;\r\n    }\r\n\r\n    // Modifier used by all methods that impact accounting to make sure accounting period\r\n    // is changed before the operation if needed\r\n    // NOTE: its use **MUST** be accompanied by an initialization check\r\n    modifier transitionsPeriod {\r\n        require(\r\n            _tryTransitionAccountingPeriod(getMaxPeriodTransitions()),\r\n            ERROR_COMPLETE_TRANSITION\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev On initialization the contract sets a vault, and initializes the periods\r\n    *      and accounts.\r\n    * @param _vault The Aragon vault to pull payments from.\r\n    * @param _periodDuration Base duration of a \"period\" used for value calculations.\r\n    */\r\n    function initialize(\r\n        Vault _vault,\r\n        uint64 _periodDuration\r\n    ) external onlyInit\r\n    {\r\n        vault = _vault;\r\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_PERIOD_SHORT);\r\n        periodDuration = _periodDuration;\r\n        _newPeriod(getTimestamp64());\r\n        accountsLength++;  // position 0 is reserved and unused\r\n        maxCandidates = 50;\r\n        initialized();\r\n    }\r\n\r\n///////////////////////\r\n// Getter functions\r\n///////////////////////\r\n    /** @notice Basic getter for accounts.\r\n    *   @param _accountId The budget ID you'd like to get.\r\n    */\r\n    function getAccount(uint64 _accountId) external view accountExists(_accountId) isInitialized\r\n    returns(string metadata, address token, bool hasBudget, uint256 budget)\r\n    {\r\n        Account storage account = accounts[_accountId];\r\n        metadata = account.metadata;\r\n        token = account.token;\r\n        hasBudget = account.hasBudget;\r\n        budget = account.budget;\r\n    }\r\n\r\n    /** @notice Basic getter for Allocations.\r\n    *   @param _accountId The ID of the budget.\r\n    *   @param _payoutId The ID of the allocation within the budget you'd like to retrieve.\r\n    */\r\n    function getPayout(uint64 _accountId, uint64 _payoutId) external view payoutExists(_accountId, _payoutId) isInitialized\r\n    returns(uint amount, uint64 recurrences, uint startTime, uint period)\r\n    {\r\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\r\n        amount = payout.amount;\r\n        recurrences = payout.recurrences;\r\n        startTime = payout.startTime;\r\n        period = payout.period;\r\n    }\r\n\r\n    /**\r\n    * @notice get the account's remaining budget for the current period\r\n    * @param _accountId The account ID of the budget remaining to be calculated\r\n    */\r\n    function getRemainingBudget(uint64 _accountId) external view accountExists(_accountId)\r\n    returns(uint256)\r\n    {\r\n        return _getRemainingBudget(_accountId);\r\n    }\r\n\r\n    /** @notice Basic getter for Allocation descriptions.\r\n    *   @param _accountId The Id of the budget.\r\n    *   @param _payoutId The Id of the allocation within the budget.\r\n    */\r\n    function getPayoutDescription(uint64 _accountId, uint64 _payoutId)\r\n    external\r\n    view\r\n    payoutExists(_accountId, _payoutId)\r\n    isInitialized\r\n    returns(string description)\r\n    {\r\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\r\n        description = payout.description;\r\n    }\r\n\r\n    /** @notice Basic getter for getting the number of options in an Allocation.\r\n    *   @param _accountId The Id of the budget.\r\n    *   @param _payoutId The Id of the allocation within the budget.\r\n    */\r\n    function getNumberOfCandidates(uint64 _accountId, uint64 _payoutId) external view isInitialized payoutExists(_accountId, _payoutId)\r\n    returns(uint256 numCandidates)\r\n    {\r\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\r\n        numCandidates = payout.supports.length;\r\n    }\r\n\r\n    /** @notice Basic getter for Allocation value for a specific recipient.\r\n    *   @param _accountId The Id of the budget.\r\n    *   @param _payoutId The Id of the allocation within the budget.\r\n    *   @param _idx The Id of the specific recipient you'd like to retrieve information for.\r\n    */\r\n    function getPayoutDistributionValue(uint64 _accountId, uint64 _payoutId, uint256 _idx)\r\n    external\r\n    view\r\n    isInitialized\r\n    payoutExists(_accountId, _payoutId)\r\n    returns(uint256 supports, address candidateAddress, uint64 executions)\r\n    {\r\n        Payout storage payout = accounts[_accountId].payouts[_payoutId];\r\n        require(_idx < payout.supports.length, ERROR_NO_CANDIDATE);\r\n        supports = payout.supports[_idx];\r\n        candidateAddress = payout.candidateAddresses[_idx];\r\n        executions = payout.executions[_idx];\r\n    }\r\n\r\n    /**\r\n    * @dev We have to check for initialization as periods are only valid after initializing\r\n    */\r\n    function getCurrentPeriodId() external view isInitialized returns (uint64) {\r\n        return _currentPeriodId();\r\n    }\r\n\r\n    /** @notice Basic getter for period information.\r\n    *   @param _periodId The Id of the period you'd like to receive information for.\r\n    */\r\n    function getPeriod(uint64 _periodId)\r\n    external\r\n    view\r\n    isInitialized\r\n    periodExists(_periodId)\r\n    returns (\r\n        bool isCurrent,\r\n        uint64 startTime,\r\n        uint64 endTime\r\n    )\r\n    {\r\n        Period storage period = periods[_periodId];\r\n\r\n        isCurrent = _currentPeriodId() == _periodId;\r\n\r\n        startTime = period.startTime;\r\n        endTime = period.endTime;\r\n    }\r\n\r\n///////////////////////\r\n// Allocation functions\r\n///////////////////////\r\n    /**\r\n    * @dev This is the function that sets up a budget for creating allocations.\r\n    * @notice Create \"`_metadata`\" budget of `@tokenAmount(_token, _budget)` per period.\r\n    * @param _metadata The budget description\r\n    * @param _token Token used for account payouts.\r\n    * @param _hasBudget Whether the account uses budgeting.\r\n    * @param _budget The budget amount\r\n    */\r\n    function newAccount(\r\n        string _metadata,\r\n        address _token,\r\n        bool _hasBudget,\r\n        uint256 _budget\r\n    ) external auth(CREATE_ACCOUNT_ROLE) returns(uint64 accountId)\r\n    {\r\n        accountId = accountsLength++;\r\n        Account storage account = accounts[accountId];\r\n        account.metadata = _metadata;\r\n        account.hasBudget = _hasBudget;\r\n        account.budget = _budget;\r\n        account.token = _token;\r\n        emit NewAccount(accountId);\r\n    }\r\n\r\n    /**\r\n    * @notice Change period duration to `@transformTime(_periodDuration)`, effective for next accounting period\r\n    * @param _periodDuration Duration in seconds for accounting periods\r\n    */\r\n    function setPeriodDuration(uint64 _periodDuration)\r\n        external\r\n        auth(CHANGE_PERIOD_ROLE)\r\n        transitionsPeriod\r\n    {\r\n        require(_periodDuration >= MINIMUM_PERIOD, ERROR_PERIOD_SHORT);\r\n        periodDuration = _periodDuration;\r\n        emit ChangePeriodDuration(_periodDuration);\r\n    }\r\n\r\n    /**\r\n    * @notice Set the maximum number of candidates that can be paid out in an allocation to `_maxCandidates`.\r\n    * @param _maxCandidates Maximum number of Candidates\r\n    */\r\n    function setMaxCandidates(uint256 _maxCandidates) external auth(SET_MAX_CANDIDATES_ROLE) {\r\n        maxCandidates = _maxCandidates;\r\n    }\r\n\r\n    /**\r\n    * @notice `_amount == 0 ? 'Deactivate ' + _metadata + ' budget (#' + _accountId + ')' : 'Update budget #' + _accountId + ' to ' + @tokenAmount(0x0000000000000000000000000000000000000000, _amount, false) + ', effective immediately and optionally update metadata'`\r\n    * @param _accountId Budget Identifier\r\n    * @param _amount New budget amount\r\n    * @param _metadata descriptor for the account (pass in empty string if unchanged)\r\n    */\r\n    function setBudget(\r\n        uint64 _accountId,\r\n        uint256 _amount,\r\n        string _metadata\r\n    )\r\n        external\r\n        auth(CHANGE_BUDGETS_ROLE)\r\n        transitionsPeriod\r\n        accountExists(_accountId)\r\n    {\r\n        accounts[_accountId].budget = _amount;\r\n        // only access storage if necessary\r\n        if (bytes(_metadata).length > 0) {\r\n            accounts[_accountId].metadata = _metadata;\r\n        }\r\n        if (!accounts[_accountId].hasBudget) {\r\n            accounts[_accountId].hasBudget = true;\r\n        }\r\n        emit SetBudget(_accountId, _amount, _metadata, true);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove budget #`_accountId`, effective immediately and optionally update budget name.\r\n    * @param _accountId Id for the budget.\r\n    * @param _metadata descriptor for account (pass in empty string if unchanged)\r\n    */\r\n    function removeBudget(uint64 _accountId, string _metadata)\r\n        external\r\n        auth(CHANGE_BUDGETS_ROLE)\r\n        transitionsPeriod\r\n        accountExists(_accountId)\r\n    {\r\n        accounts[_accountId].budget = 0;\r\n        accounts[_accountId].hasBudget = false;\r\n        // only access storage if necessary\r\n        if (bytes(_metadata).length > 0) {\r\n            accounts[_accountId].metadata = _metadata;\r\n        }\r\n        emit SetBudget(_accountId, 0, _metadata, false);\r\n    }\r\n\r\n    /**\r\n    * @notice This transaction will execute the allocation for the senders address for budget #`_accountId`\r\n    * @param _accountId The Id of the budget you'd like to take action against\r\n    * @param _payoutId The Id of the allocation within the budget you'd like to execute\r\n    * @param _candidateId The Candidate whose allocation you'll execute (must be sender)\r\n    */\r\n    function candidateExecutePayout(\r\n        uint64 _accountId,\r\n        uint64 _payoutId,\r\n        uint256 _candidateId\r\n    ) external transitionsPeriod isInitialized accountExists(_accountId) payoutExists(_accountId, _payoutId) // solium-disable-line error-reason\r\n    {\r\n        //Payout storage payout = accounts[_accountId].payouts[_payoutId];\r\n        require(msg.sender == accounts[_accountId].payouts[_payoutId].candidateAddresses[_candidateId], ERROR_CANDIDATE_NOT_RECEIVER);\r\n        _executePayoutAtLeastOnce(_accountId, _payoutId, _candidateId, 0);\r\n    }\r\n\r\n    /**\r\n    * @notice This transaction will execute the allocation for candidate `_candidateId` within budget #`_accountId`\r\n    * @param _accountId The Id of the budget you'd like to take action against\r\n    * @param _payoutId The Id of the allocation within the budget you'd like to execute\r\n    * @param _candidateId The Candidate whose allocation you'll execute (must be sender)\r\n    */\r\n    function executePayout(\r\n        uint64 _accountId,\r\n        uint64 _payoutId,\r\n        uint256 _candidateId\r\n    ) external transitionsPeriod auth(EXECUTE_PAYOUT_ROLE) accountExists(_accountId) payoutExists(_accountId, _payoutId)\r\n    {\r\n        _executePayoutAtLeastOnce(_accountId, _payoutId, _candidateId, 0);\r\n    }\r\n\r\n    /**\r\n    * @dev This function distributes the allocations to the candidates in accordance with the distribution values\r\n    * @notice Distribute allocation #`_payoutId` from budget #`_accountId`.\r\n    * @param _accountId The Id of the budget you'd like to take action against\r\n    * @param _payoutId The Id of the allocation within the budget you'd like to execute\r\n    */\r\n    function runPayout(uint64 _accountId, uint64 _payoutId)\r\n    external\r\n    auth(EXECUTE_ALLOCATION_ROLE)\r\n    transitionsPeriod\r\n    accountExists(_accountId)\r\n    payoutExists(_accountId, _payoutId)\r\n    returns(bool success)\r\n    {\r\n        success = _runPayout(_accountId, _payoutId);\r\n    }\r\n\r\n    /**\r\n    * @dev This function is provided to circumvent situations where the transition period\r\n    *      becomes impossible to execute\r\n    * @param _limit Maximum number of periods to advance in this execution\r\n    */\r\n    function advancePeriod(uint64 _limit) external isInitialized {\r\n        _tryTransitionAccountingPeriod(_limit);\r\n    }\r\n\r\n    /**\r\n    * @dev This is the function that the DotVote will call. It doesn’t need\r\n    *      to be called by a DotVote (options get weird if it's not)\r\n    *      but for our use case the “CREATE_ALLOCATION_ROLE” will be given to\r\n    *      the DotVote. This function is public for stack-depth reasons\r\n    * @notice Create an allocation from budget #`_accountId` for \"`_description`\" `(_recurrences > 1) ? 'that will execute ' + _recurrences + ' times': ''`.\r\n    * @param _candidateAddresses Array of potential addresses receiving a share of the allocation.\r\n    * @param _supports The Array of all support values for the various candidates. These values are set in dot voting.\r\n    * @param _description The distribution description\r\n    * @param _accountId The Id of the budget used for the allocation\r\n    * @param _recurrences Quantity used to indicate whether this is a recurring or one-time payout\r\n    * @param _period Time interval between each recurring allocation\r\n    * @param _amount The quantity of funds to be allocated\r\n    */\r\n    function setDistribution(\r\n        address[] _candidateAddresses,\r\n        uint256[] _supports,\r\n        uint256[] /*unused_infoIndices*/,\r\n        string /*unused_candidateInfo*/,\r\n        string _description,\r\n        uint256[] /*unused_level 1 ID - converted to bytes32*/,\r\n        uint256[] /*unused_level 2 ID - converted to bytes32*/,\r\n        uint64 _accountId,\r\n        uint64 _recurrences,\r\n        uint64 _startTime,\r\n        uint64 _period,\r\n        uint256 _amount\r\n    )\r\n    public\r\n    auth(CREATE_ALLOCATION_ROLE)\r\n    transitionsPeriod\r\n    returns(uint64 payoutId)\r\n    {\r\n        require(maxCandidates >= _candidateAddresses.length); // solium-disable-line error-reason\r\n        Account storage account = accounts[_accountId];\r\n        require(vault.balance(account.token) >= _amount * _recurrences); // solium-disable-line error-reason\r\n        require(_recurrences > 0, ERROR_MIN_RECURRENCE);\r\n\r\n        Payout storage payout = account.payouts[account.payoutsLength++];\r\n\r\n        payout.amount = _amount;\r\n        payout.recurrences = _recurrences;\r\n        payout.candidateAddresses = _candidateAddresses;\r\n        if (_recurrences > 1) {\r\n            payout.period = _period;\r\n            // minimum granularity is a single day\r\n            require(payout.period >= 1 days, ERROR_PERIOD_SHORT);\r\n        }\r\n        payout.startTime = _startTime; // solium-disable-line security/no-block-members\r\n        payout.supports = _supports;\r\n        payout.description = _description;\r\n        payout.executions.length = _supports.length;\r\n        payoutId = account.payoutsLength - 1;\r\n        emit SetDistribution(_accountId, payoutId);\r\n        if (_startTime <= getTimestamp64()) {\r\n            _runPayout(_accountId, payoutId);\r\n        }\r\n    }\r\n\r\n    function _executePayoutAtLeastOnce(\r\n        uint64 _accountId,\r\n        uint64 _payoutId,\r\n        uint256 _candidateId,\r\n        uint256 _paid\r\n    )\r\n        internal accountExists(_accountId) returns (uint256)\r\n    {\r\n        Account storage account = accounts[_accountId];\r\n        Payout storage payout = account.payouts[_payoutId];\r\n        require(_candidateId < payout.supports.length, ERROR_NO_CANDIDATE);\r\n\r\n        uint256 paid = _paid;\r\n        uint256 totalSupport = _getTotalSupport(payout);\r\n\r\n        uint256 individualPayout = payout.supports[_candidateId].mul(payout.amount).div(totalSupport);\r\n        if (individualPayout == 0) {\r\n            return;\r\n        }\r\n        while (_nextPaymentTime(_accountId, _payoutId, _candidateId) <= getTimestamp64() && paid < MAX_SCHEDULED_PAYOUTS_PER_TX) {\r\n            if (!_canMakePayment(_accountId, individualPayout)) {\r\n                emit PaymentFailure(_accountId, _payoutId, _candidateId);\r\n                break;\r\n            }\r\n\r\n            // The while() predicate prevents these two from ever overflowing\r\n            paid += 1;\r\n\r\n            // We've already checked the remaining budget with `_canMakePayment()`\r\n            _executeCandidatePayout(_accountId, _payoutId, _candidateId, totalSupport);\r\n        }\r\n        return paid;\r\n    }\r\n\r\n    function _newPeriod(uint64 _startTime) internal returns (Period storage) {\r\n        // There should be no way for this to overflow since each period is at least one day\r\n        uint64 newPeriodId = periodsLength++;\r\n\r\n        Period storage period = periods[newPeriodId];\r\n        period.startTime = _startTime;\r\n\r\n        // Be careful here to not overflow; if startTime + periodDuration overflows, we set endTime\r\n        // to MAX_UINT64 (let's assume that's the end of time for now).\r\n        uint64 endTime = _startTime + periodDuration - 1;\r\n        if (endTime < _startTime) { // overflowed\r\n            endTime = MAX_UINT64;\r\n        }\r\n        period.endTime = endTime;\r\n\r\n        emit NewPeriod(newPeriodId, period.startTime, period.endTime);\r\n\r\n        return period;\r\n    }\r\n\r\n    function _tryTransitionAccountingPeriod(uint64 _maxTransitions) internal returns (bool success) {\r\n        Period storage currentPeriod = periods[_currentPeriodId()];\r\n        uint64 maxTransitions = _maxTransitions;\r\n        uint64 timestamp = getTimestamp64();\r\n\r\n        // Transition periods if necessary\r\n        while (timestamp > currentPeriod.endTime) {\r\n            if (maxTransitions == 0) {\r\n                // Required number of transitions is over allowed number, return false indicating\r\n                // it didn't fully transition\r\n                return false;\r\n            }\r\n            // We're already protected from underflowing above\r\n            maxTransitions -= 1;\r\n\r\n            currentPeriod = _newPeriod(currentPeriod.endTime.add(1));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _currentPeriodId() internal view returns (uint64) {\r\n        // There is no way for this to overflow if protected by an initialization check\r\n        return periodsLength - 1;\r\n    }\r\n\r\n    function _canMakePayment(uint64 _accountId, uint256 _amount) internal view returns (bool) {\r\n        Account storage account = accounts[_accountId];\r\n        return _getRemainingBudget(_accountId) >= _amount && vault.balance(account.token) >= _amount && _amount > 0;\r\n    }\r\n\r\n    function _getRemainingBudget(uint64 _accountId) internal view returns (uint256) {\r\n        Account storage account = accounts[_accountId];\r\n        if (!account.hasBudget) {\r\n            return MAX_UINT256;\r\n        }\r\n\r\n        uint256 budget = account.budget;\r\n        uint256 spent = periods[_currentPeriodId()].accountStatement[_accountId].expenses[account.token];\r\n\r\n        // A budget decrease can cause the spent amount to be greater than period budget\r\n        // If so, return 0 to not allow more spending during period\r\n        if (spent >= budget) {\r\n            return 0;\r\n        }\r\n\r\n        // We're already protected from the overflow above\r\n        return budget - spent;\r\n    }\r\n\r\n    function _runPayout(uint64 _accountId, uint64 _payoutId) internal returns(bool success) {\r\n        Account storage account = accounts[_accountId];\r\n        uint256[] storage supports = account.payouts[_payoutId].supports;\r\n        uint64 i;\r\n        uint256 paid = 0;\r\n        uint256 length = account.payouts[_payoutId].candidateAddresses.length;\r\n        //handle vault\r\n        for (i = 0; i < length; i++) {\r\n            if (supports[i] != 0 && _nextPaymentTime(_accountId, _payoutId, i) <= getTimestamp64()) {\r\n                paid = _executePayoutAtLeastOnce(_accountId, _payoutId, i, paid);\r\n            } else {\r\n                emit PaymentFailure(_accountId, _payoutId, i);\r\n            }\r\n        }\r\n        success = true;\r\n    }\r\n\r\n    function _getTotalSupport(Payout storage payout) internal view returns (uint256 totalSupport) {\r\n        for (uint256 i = 0; i < payout.supports.length; i++) {\r\n            totalSupport += payout.supports[i];\r\n        }\r\n    }\r\n\r\n    function _nextPaymentTime(uint64 _accountId, uint64 _payoutId, uint256 _candidateIndex) internal view returns (uint64) {\r\n        Account storage account = accounts[_accountId];\r\n        Payout storage payout = account.payouts[_payoutId];\r\n\r\n        if (payout.executions[_candidateIndex] >= payout.recurrences) {\r\n            return MAX_UINT64; // re-executes in some billions of years time... should not need to worry\r\n        }\r\n\r\n        // Split in multiple lines to circumvent linter warning\r\n        uint64 increase = payout.executions[_candidateIndex].mul(payout.period);\r\n        uint64 nextPayment = payout.startTime.add(increase);\r\n        return nextPayment;\r\n    }\r\n\r\n    function _executeCandidatePayout(\r\n        uint64 _accountId,\r\n        uint64 _payoutId,\r\n        uint256 _candidateIndex,\r\n        uint256 _totalSupport\r\n    ) internal\r\n    {\r\n        Account storage account = accounts[_accountId];\r\n        Payout storage payout = account.payouts[_payoutId];\r\n        uint256 individualPayout = payout.supports[_candidateIndex].mul(payout.amount).div(_totalSupport);\r\n        require(_canMakePayment(_accountId, individualPayout), ERROR_INSUFFICIENT_FUNDS);\r\n\r\n        address token = account.token;\r\n        uint256 expenses = periods[_currentPeriodId()].accountStatement[_accountId].expenses[token];\r\n        periods[_currentPeriodId()].accountStatement[_accountId].expenses[token] = expenses.add(individualPayout);\r\n        payout.executions[_candidateIndex] = payout.executions[_candidateIndex].add(1);\r\n        vault.transfer(token, payout.candidateAddresses[_candidateIndex], individualPayout);\r\n        emit PayoutExecuted(_accountId, _payoutId, _candidateIndex);\r\n    }\r\n\r\n    // Mocked fns (overrided during testing)\r\n    // Must be view for mocking purposes\r\n\r\n    function getMaxPeriodTransitions() internal view returns (uint64) { return MAX_UINT64; }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"EXECUTE_PAYOUT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"}],\"name\":\"getPayoutDescription\",\"outputs\":[{\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"string\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_hasBudget\",\"type\":\"bool\"},{\"name\":\"_budget\",\"type\":\"uint256\"}],\"name\":\"newAccount\",\"outputs\":[{\"name\":\"accountId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"},{\"name\":\"_periodDuration\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPeriodId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"},{\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"executePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_PERIOD_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_BUDGETS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_MAX_CANDIDATES_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_periodId\",\"type\":\"uint64\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"isCurrent\",\"type\":\"bool\"},{\"name\":\"startTime\",\"type\":\"uint64\"},{\"name\":\"endTime\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_periodDuration\",\"type\":\"uint64\"}],\"name\":\"setPeriodDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_ALLOCATION_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"}],\"name\":\"getAccount\",\"outputs\":[{\"name\":\"metadata\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"hasBudget\",\"type\":\"bool\"},{\"name\":\"budget\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_ACCOUNT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"}],\"name\":\"getPayout\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recurrences\",\"type\":\"uint64\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"removeBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXECUTE_ALLOCATION_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"},{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getPayoutDistributionValue\",\"outputs\":[{\"name\":\"supports\",\"type\":\"uint256\"},{\"name\":\"candidateAddress\",\"type\":\"address\"},{\"name\":\"executions\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_candidateAddresses\",\"type\":\"address[]\"},{\"name\":\"_supports\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_recurrences\",\"type\":\"uint64\"},{\"name\":\"_startTime\",\"type\":\"uint64\"},{\"name\":\"_period\",\"type\":\"uint64\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDistribution\",\"outputs\":[{\"name\":\"payoutId\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"}],\"name\":\"getRemainingBudget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"},{\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"candidateExecutePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint64\"}],\"name\":\"advancePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"}],\"name\":\"runPayout\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxCandidates\",\"type\":\"uint256\"}],\"name\":\"setMaxCandidates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_accountId\",\"type\":\"uint64\"},{\"name\":\"_payoutId\",\"type\":\"uint64\"}],\"name\":\"getNumberOfCandidates\",\"outputs\":[{\"name\":\"numCandidates\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"payoutId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"PayoutExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint64\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"periodId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"periodStarts\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"periodEnds\",\"type\":\"uint64\"}],\"name\":\"NewPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint64\"}],\"name\":\"FundAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"payoutId\",\"type\":\"uint64\"}],\"name\":\"SetDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"payoutId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"candidateId\",\"type\":\"uint256\"}],\"name\":\"PaymentFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"accountId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"hasBudget\",\"type\":\"bool\"}],\"name\":\"SetBudget\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newDuration\",\"type\":\"uint64\"}],\"name\":\"ChangePeriodDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}]","ContractName":"Allocations","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://093cbe86deed1fbe8c4d8342d67d1e494d5d6848a65e41420873f13b6f4441b7"}]}