{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface CTokenInterface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint); // For ERC20\r\n\r\n    function borrowBalanceCurrent(address) external returns (uint);\r\n    function redeemUnderlying(uint) external returns (uint);\r\n    function borrow(uint) external returns (uint);\r\n    function underlying() external view returns (address);\r\n    function borrowBalanceStored(address) external view returns (uint);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function mint() external payable; // For ETH\r\n    function repayBorrow() external payable; // For ETH\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cTokenAddress) external returns (uint);\r\n}\r\n\r\ninterface AccountInterface {\t\r\n    function version() external view returns (uint);\t\r\n}\r\n\r\ninterface ListInterface {\r\n    function accountID(address) external view returns (uint64);\r\n}\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n    function list() external view returns (address);\r\n    function isClone(uint, address) external view returns (bool);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function decimals() external returns (uint);\r\n}\r\n\r\ncontract DSMath {\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    address constant public instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\r\n    address constant public comptrollerAddr = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n\r\n    address constant public ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant public cEth = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\r\n\r\n    mapping (address => bool) public isTknAllowed;\r\n    mapping (address => address) public tknToCTkn;\r\n\r\n    /**\r\n     * FOR SECURITY PURPOSE\r\n     * only Smart DEFI Account can access the liquidity pool contract\r\n     */\r\n    modifier isDSA {\r\n        IndexInterface indexContract = IndexInterface(instaIndex);\r\n        uint64 id = ListInterface(indexContract.list()).accountID(msg.sender);\r\n        require(id != 0, \"not-dsa-id\");\r\n        require(indexContract.isClone(AccountInterface(msg.sender).version(), msg.sender), \"not-dsa-clone\");\r\n        _;\r\n    }\r\n\r\n    function tokenBal(address token) internal view returns (uint _bal) {\r\n        _bal = token == ethAddr ? address(this).balance : TokenInterface(token).balanceOf(address(this));\r\n    }\r\n\r\n    function _transfer(address token, uint _amt) internal {\r\n         token == ethAddr ?\r\n             msg.sender.transfer(_amt) :\r\n            require(TokenInterface(token).transfer(msg.sender, _amt), \"token-transfer-failed\");\r\n    }\r\n}\r\n\r\n\r\ncontract CompoundResolver is Helpers {\r\n\r\n    function borrowAndSend(address[] memory tokens, uint[] memory tknAmt) internal {\r\n        if (tokens.length > 0) {\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                address token = tokens[i];\r\n                address cToken = tknToCTkn[token];\r\n                if (cToken != address(0) && tknAmt[i] > 0) {\r\n                    require(CTokenInterface(cToken).borrow(tknAmt[i]) == 0, \"borrow-failed\");\r\n                    _transfer(token, tknAmt[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function payback(address[] memory tokens) internal {\r\n        if (tokens.length > 0) {\r\n            for (uint i = 0; i < tokens.length; i++) {\r\n                address token = tokens[i];\r\n                address cToken = tknToCTkn[token];\r\n                if (cToken != address(0)) {\r\n                    CTokenInterface ctknContract = CTokenInterface(cToken);\r\n                    token != ethAddr ?\r\n                        require(ctknContract.repayBorrow(uint(-1)) == 0, \"payback-failed\") :\r\n                        CETHInterface(cToken).repayBorrow.value(ctknContract.borrowBalanceCurrent(address(this)))();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract AccessLiquidity is CompoundResolver {\r\n    event LogPoolBorrow(address indexed user, address[] tknAddr, uint[] amt);\r\n    event LogPoolPayback(address indexed user, address[] tknAddr);\r\n\r\n    /**\r\n     * @dev borrow tokens and use them on DSA.\r\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amounts Array of tokens amount.\r\n    */\r\n    function accessLiquidity(address[] calldata tokens, uint[] calldata amounts) external isDSA {\r\n        require(tokens.length == amounts.length, \"length-not-equal\");\r\n        borrowAndSend(tokens, amounts);\r\n        emit LogPoolBorrow(\r\n            msg.sender,\r\n            tokens,\r\n            amounts\r\n        );\r\n    }\r\n   \r\n    /**\r\n     * @dev Payback borrowed tokens.\r\n     * @param tokens Array of tokens.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n    */\r\n    function returnLiquidity(address[] calldata tokens) external payable isDSA {\r\n        payback(tokens);\r\n        emit LogPoolPayback(msg.sender, tokens);\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if no tokens are borrowed.\r\n    */\r\n    function isOk() public view returns(bool ok) {\r\n        ok = true;\r\n        address[] memory markets = ComptrollerInterface(comptrollerAddr).getAssetsIn(address(this));\r\n        for (uint i = 0; i < markets.length; i++) {\r\n            uint tknBorrowed = CTokenInterface(markets[i]).borrowBalanceStored(address(this));\r\n            if(tknBorrowed > 0){\r\n                ok = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract ProvideLiquidity is  AccessLiquidity {\r\n    event LogDeposit(address indexed user, address indexed token, uint amount, uint cAmount);\r\n    event LogWithdraw(address indexed user, address indexed token, uint amount, uint cAmount);\r\n\r\n    mapping (address => mapping (address => uint)) public liquidityBalance;\r\n\r\n    /**\r\n     * @dev Deposit Liquidity.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n    */\r\n    function deposit(address token, uint amt) external payable returns (uint _amt) {\r\n        require(isTknAllowed[token], \"token-not-listed\");\r\n        require(amt > 0 || msg.value > 0, \"amt-not-valid\");\r\n\r\n        if (msg.value > 0) require(token == ethAddr, \"not-eth-addr\");\r\n\r\n        address cErc20 = tknToCTkn[token];\r\n        uint initalBal = tokenBal(cErc20);\r\n        if (token == ethAddr) {\r\n            _amt = msg.value;\r\n            CETHInterface(cErc20).mint.value(_amt)();\r\n        } else {\r\n            _amt = amt == (uint(-1)) ? TokenInterface(token).balanceOf(msg.sender) : amt;\r\n            require(TokenInterface(token).transferFrom(msg.sender, address(this), _amt), \"allowance/balance?\");\r\n            require(CTokenInterface(cErc20).mint(_amt) == 0, \"mint-failed\");\r\n        }\r\n        uint finalBal = tokenBal(cErc20);\r\n        uint ctokenAmt = sub(finalBal, initalBal);\r\n\r\n        liquidityBalance[token][msg.sender] += ctokenAmt;\r\n\r\n        emit LogDeposit(msg.sender, token, _amt, ctokenAmt);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Withdraw Liquidity.\r\n     * @param token token address.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n     * @param amt token amount.\r\n    */\r\n    function withdraw(address token, uint amt) external returns (uint _amt) {\r\n        uint _userLiq = liquidityBalance[token][msg.sender];\r\n        require(_userLiq > 0, \"nothing-to-withdraw\");\r\n\r\n        uint _cAmt;\r\n\r\n        address ctoken = tknToCTkn[token];\r\n        if (amt == uint(-1)) {\r\n            uint initknBal = tokenBal(token);\r\n            require(CTokenInterface(ctoken).redeem(_userLiq) == 0, \"redeem-failed\");\r\n            uint finTknBal = tokenBal(token);\r\n            _cAmt = _userLiq;\r\n            delete liquidityBalance[token][msg.sender];\r\n            _amt = sub(finTknBal, initknBal);\r\n        } else {\r\n            uint iniCtknBal = tokenBal(ctoken);\r\n            require(CTokenInterface(ctoken).redeemUnderlying(amt) == 0, \"redeemUnderlying-failed\");\r\n            uint finCtknBal = tokenBal(ctoken);\r\n            _cAmt = sub(iniCtknBal, finCtknBal);\r\n            require(_cAmt <= _userLiq, \"not-enough-to-withdraw\");\r\n            liquidityBalance[token][msg.sender] -= _cAmt;\r\n            _amt = amt;\r\n        }\r\n        \r\n        _transfer(token, _amt);\r\n       \r\n        emit LogWithdraw(msg.sender, token, _amt, _cAmt);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Controllers is ProvideLiquidity {\r\n    event LogEnterMarket(address[] token, address[] ctoken);\r\n    event LogExitMarket(address indexed token, address indexed ctoken);\r\n\r\n    modifier isMaster {\r\n        require(msg.sender == IndexInterface(instaIndex).master(), \"not-master\");\r\n        _;\r\n    }\r\n\r\n    function _enterMarket(address[] memory cTknAddrs) internal {\r\n        ComptrollerInterface(comptrollerAddr).enterMarkets(cTknAddrs);\r\n        address[] memory tknAddrs = new address[](cTknAddrs.length);\r\n        for (uint i = 0; i < cTknAddrs.length; i++) {\r\n            if (cTknAddrs[i] != cEth) {\r\n                tknAddrs[i] = CTokenInterface(cTknAddrs[i]).underlying();\r\n                TokenInterface(tknAddrs[i]).approve(cTknAddrs[i], uint(-1));\r\n            } else {\r\n                tknAddrs[i] = ethAddr;\r\n            }\r\n            tknToCTkn[tknAddrs[i]] = cTknAddrs[i];\r\n            isTknAllowed[tknAddrs[i]] = true;\r\n        }\r\n        emit LogEnterMarket(tknAddrs, cTknAddrs);\r\n    }\r\n\r\n    /**\r\n     * @dev Enter compound market to enable borrowing.\r\n     * @param cTknAddrs Array Ctoken addresses.\r\n    */\r\n    function enterMarket(address[] calldata cTknAddrs) external isMaster {\r\n        _enterMarket(cTknAddrs);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit compound market to disable borrowing.\r\n     * @param cTkn Ctoken address.\r\n    */\r\n    function exitMarket(address cTkn) external isMaster {\r\n        ComptrollerInterface(comptrollerAddr).exitMarket(cTkn);\r\n        address tkn;\r\n        if (cTkn != cEth) {\r\n            tkn = CTokenInterface(cTkn).underlying();\r\n            TokenInterface(tkn).approve(cTkn, 0);\r\n        } else {\r\n            tkn = ethAddr;\r\n        }\r\n        isTknAllowed[tkn] = false;\r\n        emit LogExitMarket(tkn, cTkn);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaPool is Controllers {\r\n\r\n    constructor(address[] memory cTknAddrs) public {\r\n        _enterMarket(cTknAddrs);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTknAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cAmount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ctoken\",\"type\":\"address[]\"}],\"name\":\"LogEnterMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"LogExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tknAddr\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amt\",\"type\":\"uint256[]\"}],\"name\":\"LogPoolBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tknAddr\",\"type\":\"address[]\"}],\"name\":\"LogPoolPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cAmount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"accessLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTknAddrs\",\"type\":\"address[]\"}],\"name\":\"enterMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTkn\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTknAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"returnLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tknToCTkn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstaPool","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed50000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://f54a6a5e3014b4023fe99948a8083f73f9901a10e0530e6c21192763ac370c80"}]}