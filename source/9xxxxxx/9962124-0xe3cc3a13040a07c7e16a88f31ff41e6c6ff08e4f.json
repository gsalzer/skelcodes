{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\ncontract Lucky12{\r\n    \r\n    mapping (uint8 => address) playersByNumber ;\r\n    uint8[12] public winners;\r\n    uint8[12] public previouswinners;\r\n    bool[26] public occupied;\r\n    uint256 public price;\r\n    uint256 public prize;\r\n    uint8 public numberofplayers=0;\r\n    enum LotteryState { Accepting, Finished }\r\n    LotteryState public state; \r\n    address public owner;\r\n    \r\n    constructor(){\r\n        owner = 0xbbFBF4336d645787D7eF31b6a606aa25537F9C13;\r\n        state = LotteryState.Accepting;\r\n        price=0.01 ether;\r\n        prize=0.019 ether;\r\n    }\r\n \r\n    \r\n    function setprice(uint256 newprice,uint256 newprize) public{\r\n        require(msg.sender==owner);\r\n        require(state==LotteryState.Finished,\"Game is Running,Cannot change\");\r\n        price = newprice;\r\n        prize = newprize;\r\n    }\r\n    \r\n    function pause() public{\r\n        require(msg.sender==owner);\r\n        require(state==LotteryState.Accepting,\"Game is already Paused!\");\r\n        state=LotteryState.Finished;\r\n    }\r\n    function resume() public{\r\n        require(msg.sender==owner);\r\n        require(state==LotteryState.Finished,\"Game is already Running!\");\r\n        state=LotteryState.Accepting;\r\n    }\r\n     //withdraw balance\r\n   function withdraw() public{\r\n       require(msg.sender==owner);\r\n       require(state==LotteryState.Finished,\"Game is Running!\");\r\n       owner.transfer(this.balance);\r\n   }\r\n    \r\n    function enter(uint8 number) public payable {\r\n        require(occupied[number]==false,\"Someone Purchased this number before you!\");\r\n        require(number<=25 && number>0);\r\n        require(state == LotteryState.Accepting,\"Game is Paused!\");\r\n        require(msg.value == price);\r\n        \r\n        //register user\r\n        playersByNumber[number] = msg.sender;\r\n        \r\n        // sold number list\r\n        occupied[number]=true;\r\n        \r\n        // increment participant\r\n        numberofplayers=numberofplayers+1;\r\n        \r\n        if(numberofplayers==25){\r\n            determineWinner();//finalize round\r\n        }\r\n    }\r\n   \r\n    \r\n    function determineWinner() private {\r\n        state = LotteryState.Finished;\r\n        winnerlist(); // select random winners\r\n        rewardwinner(); // reward winners\r\n        clearDataAndStartAgain(); // restart new round\r\n        //selfdestruct(owner);// transfer remaining fees to owner\r\n    }\r\n    \r\n\r\n    function winnerlist() private{\r\n        uint8 number=random();\r\n        uint8 i=0;\r\n        uint8 prev=0;\r\n        uint8 next=1;\r\n            if(number<6)\r\n            {\r\n                number=number+6;\r\n            }\r\n            else if(number>19)\r\n            {\r\n                number=number-6;\r\n            }\r\n        \r\n        do{\r\n           if(i%2==0){\r\n               winners[i]=number+prev;\r\n               prev++;\r\n           }\r\n           else{\r\n               winners[i]=number-next;\r\n               next++;\r\n           }\r\n            i++;\r\n            \r\n        }while(i!=12);\r\n        \r\n        return;\r\n    }\r\n    \r\n    \r\n    function rewardwinner() private{\r\n        require(state==LotteryState.Finished);\r\n        uint256 balanceToDistribute = prize;\r\n        \r\n        for (uint8 i=0;i<12;i++){\r\n            playeraddress(winners[i]).transfer(balanceToDistribute);\r\n        }\r\n    }\r\n    \r\n    function clearDataAndStartAgain() private{\r\n            numberofplayers=0;\r\n        for(uint8 i=0;i<12;i++){\r\n            previouswinners[i]=winners[i];\r\n            winners[i]=0;\r\n        }\r\n        for(uint8 j=0;j<26;j++){\r\n            occupied[j]=false;\r\n        }\r\n        for(uint8 k=0;k<26;k++){\r\n            playersByNumber[k]=0x0000000000000000000000000000000000000000;\r\n        }\r\n            state = LotteryState.Accepting;\r\n    }\r\n    \r\n    function playeraddress(uint8 player) public constant returns(address){\r\n        return playersByNumber[player];\r\n    }\r\n  \r\n    \r\n    function random() public view returns (uint8) {\r\n        uint8 randomHash = uint8(keccak256(block.difficulty, now));\r\n        return randomHash % 25;\r\n    }\r\n    \r\n    function getlist() public constant returns(bool[26]){\r\n        return occupied;\r\n    }\r\n    \r\n    function previouswinner() public constant returns(uint8[12]){\r\n        return previouswinners;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"previouswinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool[26]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint8\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newprice\",\"type\":\"uint256\"},{\"name\":\"newprize\",\"type\":\"uint256\"}],\"name\":\"setprice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"occupied\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previouswinner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[12]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberofplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"uint8\"}],\"name\":\"playeraddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Lucky12","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}