{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.4;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n    event OwnerUpdate     (address indexed owner, address indexed newOwner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n    address      public  newOwner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    // Warning: you should absolutely sure you want to give up authority!!!\r\n    function disableOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnerUpdate(msg.sender, owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner_) public onlyOwner {\r\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\r\n        newOwner = newOwner_;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n\r\n    ///[snow] guard is Authority who inherit DSAuth.\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(isOwner(msg.sender), \"ds-auth-non-owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address src) internal view returns (bool) {\r\n        return bool(src == owner);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IDispatcher {\r\n\r\n\t// external function\r\n\tfunction trigger() external returns (bool);\r\n\tfunction withdrawProfit() external returns (bool);\r\n\tfunction drainFunds(uint256 _index) external returns (bool);\r\n\tfunction refundDispather(address _receiver) external returns (bool);\r\n\r\n\t// get function\r\n\tfunction getReserve() external view returns (uint256);\r\n\tfunction getReserveRatio() external view returns (uint256);\r\n\tfunction getPrinciple() external view returns (uint256);\r\n\tfunction getBalance() external view returns (uint256);\r\n\tfunction getProfit() external view returns (uint256);\r\n\tfunction getTHPrinciple(uint256 _index) external view returns (uint256);\r\n\tfunction getTHBalance(uint256 _index) external view returns (uint256);\r\n\tfunction getTHProfit(uint256 _index) external view returns (uint256);\r\n\tfunction getToken() external view returns (address);\r\n\tfunction getFund() external view returns (address);\r\n\tfunction getTHStructures() external view returns (uint256[] memory, address[] memory, address[] memory);\r\n\tfunction getTHData(uint256 _index) external view returns (uint256, uint256, uint256, uint256);\r\n\tfunction getTHCount() external view returns (uint256);\r\n\tfunction getTHAddress(uint256 _index) external view returns (address);\r\n\tfunction getTargetAddress(uint256 _index) external view returns (address);\r\n\tfunction getPropotion() external view returns (uint256[] memory);\r\n\tfunction getProfitBeneficiary() external view returns (address);\r\n\tfunction getReserveUpperLimit() external view returns (uint256);\r\n\tfunction getReserveLowerLimit() external view returns (uint256);\r\n\tfunction getExecuteUnit() external view returns (uint256);\r\n\r\n\t// Governmence Functions\r\n\tfunction setAimedPropotion(uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction addTargetHandler(address _targetHandlerAddr, uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction removeTargetHandler(address _targetHandlerAddr, uint256 _index, uint256[] calldata _thPropotion) external returns (bool);\r\n\tfunction setProfitBeneficiary(address _profitBeneficiary) external returns (bool);\r\n\tfunction setReserveLowerLimit(uint256 _number) external returns (bool);\r\n\tfunction setReserveUpperLimit(uint256 _number) external returns (bool);\r\n\tfunction setExecuteUnit(uint256 _number) external returns (bool);\r\n}\r\n\r\ncontract DispatcherEntrance is DSAuth {\r\n\r\n\tmapping(address => mapping(address => address)) dispatchers;\r\n\r\n\tfunction registDispatcher(address _fund, address _token, address _dispatcher) external auth {\r\n\t\tdispatchers[_fund][_token] = _dispatcher;\r\n\t}\r\n\r\n\tfunction getDispatcher(address _fund, address _token) public view returns (address) {\r\n\t\treturn dispatchers[_fund][_token];\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fund\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_dispatcher\",\"type\":\"address\"}],\"name\":\"registDispatcher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_fund\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDispatcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"DispatcherEntrance","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://a35b97b0865718170193cd77c3d973c99574edfbca4fee1b11741b55d228bf06"}]}