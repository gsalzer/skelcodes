{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ninterface Adapter {\r\n\r\n    /**\r\n     * @dev MUST return name of the protocol.\r\n     */\r\n    function getProtocolName() external pure returns (string memory);\r\n\r\n    /**\r\n     * @dev MUST return amount of the given asset locked on the protocol by the given user.\r\n     */\r\n    function getAssetAmount(address asset, address user) external view returns (int128);\r\n\r\n    /**\r\n     * @dev MUST return struct with underlying assets rates for the given asset.\r\n     */\r\n    function getUnderlyingRates(address asset) external view returns (Component[] memory);\r\n}\r\n\r\n\r\nstruct ProtocolDetail {\r\n    string name;\r\n    AssetBalance[] balances;\r\n    AssetRate[] rates;\r\n}\r\n\r\n\r\nstruct ProtocolBalance {\r\n    string name;\r\n    AssetBalance[] balances;\r\n}\r\n\r\n\r\nstruct ProtocolRate {\r\n    string name;\r\n    AssetRate[] rates;\r\n}\r\n\r\n\r\nstruct AssetBalance {\r\n    address asset;\r\n    int256 amount;\r\n    uint8 decimals;\r\n}\r\n\r\n\r\nstruct AssetRate {\r\n    address asset;\r\n    Component[] components;\r\n}\r\n\r\n\r\nstruct Component {\r\n    address underlying;\r\n    uint256 rate;\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"O: onlyOwner function!\");\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @notice Initializes owner variable with msg.sender address.\r\n     */\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership to the desired address.\r\n     * The function is callable only by the owner.\r\n     */\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        require(_owner != address(0), \"O: new owner is the zero address!\");\r\n        emit OwnershipTransferred(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Base contract for AdapterRegistry.\r\n */\r\ncontract AdapterAssetsManager is Ownable {\r\n\r\n    address internal constant INITIAL_ADAPTER = address(1);\r\n\r\n    mapping(address => address) internal adapters;\r\n\r\n    mapping(address => address[]) internal assets;\r\n\r\n    /**\r\n     * @notice Initializes contract storage.\r\n     * @param _adapters Array with adapters.\r\n     * @param _assets Nested array of supported assets for each adapter.\r\n     */\r\n    constructor(\r\n        address[] memory _adapters,\r\n        address[][] memory _assets\r\n    )\r\n        internal\r\n    {\r\n        require(_adapters.length == _assets.length, \"AAM: wrong constructor parameters!\");\r\n\r\n        adapters[INITIAL_ADAPTER] = INITIAL_ADAPTER;\r\n\r\n        for (uint256 i = 0; i < _adapters.length; i++) {\r\n            addAdapter(_adapters[i], _assets[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Adds new adapter to adapters list.\r\n     * The function is callable only by the owner.\r\n     * @param newAdapter Address of new adapter.\r\n     * @param _assets Addresses of adapter's assets.\r\n     */\r\n    function addAdapter(\r\n        address newAdapter,\r\n        address[] memory _assets\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newAdapter != address(0), \"AAM: zero adapter!\");\r\n        require(newAdapter != INITIAL_ADAPTER, \"AAM: initial adapter!\");\r\n        require(adapters[newAdapter] == address(0), \"AAM: adapter exists!\");\r\n\r\n        adapters[newAdapter] = adapters[INITIAL_ADAPTER];\r\n        adapters[INITIAL_ADAPTER] = newAdapter;\r\n\r\n        assets[newAdapter] = _assets;\r\n    }\r\n\r\n    /**\r\n     * @notice Removes one of adapters from adapters list.\r\n     * The function is callable only by the owner.\r\n     * @param adapter Address of adapter to be removed.\r\n     */\r\n    function removeAdapter(\r\n        address adapter\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(isValidAdapter(adapter), \"AAM: invalid adapter!\");\r\n\r\n        address prevAdapter;\r\n        address currentAdapter = adapters[adapter];\r\n        while (currentAdapter != adapter) {\r\n            prevAdapter = currentAdapter;\r\n            currentAdapter = adapters[currentAdapter];\r\n        }\r\n\r\n        delete assets[adapter];\r\n\r\n        adapters[prevAdapter] = adapters[adapter];\r\n        adapters[adapter] = address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds new asset to adapter.\r\n     * The function is callable only by the owner.\r\n     * @param adapter Address of adapter.\r\n     * @param asset Address of new adapter's asset.\r\n     */\r\n    function addAdapterAsset(\r\n        address adapter,\r\n        address asset\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(isValidAdapter(adapter), \"AAM: adapter is not valid!\");\r\n        assets[adapter].push(asset);\r\n    }\r\n\r\n    /**\r\n     * @notice Removes one of adapter's assets by its index.\r\n     * The function is callable only by the owner.\r\n     * @param adapter Address of adapter.\r\n     * @param assetIndex Index of adapter's asset to be removed.\r\n     */\r\n    function removeAdapterAsset(\r\n        address adapter,\r\n        uint256 assetIndex\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(isValidAdapter(adapter), \"AAM: adapter is not valid!\");\r\n\r\n        address[] storage adapterAssets = assets[adapter];\r\n        uint256 length = adapterAssets.length;\r\n        require(assetIndex < length, \"AAM: asset index is too large!\");\r\n\r\n        if (assetIndex != length - 1) {\r\n            adapterAssets[assetIndex] = adapterAssets[length - 1];\r\n        }\r\n\r\n        adapterAssets.pop();\r\n    }\r\n\r\n    /**\r\n     * @param adapter Address of adapter.\r\n     * @return Array of adapter's assets.\r\n     */\r\n    function getAdapterAssets(\r\n        address adapter\r\n    )\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return assets[adapter];\r\n    }\r\n\r\n    /**\r\n     * @return Array of adapters.\r\n     */\r\n    function getAdapters()\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 counter = 0;\r\n        address currentAdapter = adapters[INITIAL_ADAPTER];\r\n\r\n        while (currentAdapter != INITIAL_ADAPTER) {\r\n            currentAdapter = adapters[currentAdapter];\r\n            counter++;\r\n        }\r\n\r\n        address[] memory adaptersList = new address[](counter);\r\n        counter = 0;\r\n        currentAdapter = adapters[INITIAL_ADAPTER];\r\n\r\n        while (currentAdapter != INITIAL_ADAPTER) {\r\n            adaptersList[counter] = currentAdapter;\r\n            currentAdapter = adapters[currentAdapter];\r\n            counter++;\r\n        }\r\n\r\n        return adaptersList;\r\n    }\r\n\r\n    /**\r\n     * @param adapter Address of adapter.\r\n     * @return Whether adapter is valid.\r\n     */\r\n    function isValidAdapter(\r\n        address adapter\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return adapters[adapter] != address(0) && adapter != INITIAL_ADAPTER;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title Registry for protocol adapters.\r\n* @notice getBalances() and getRates() functions\r\n* with different arguments implement the main functionality.\r\n*/\r\ncontract AdapterRegistry is AdapterAssetsManager {\r\n\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    constructor(\r\n        address[] memory _adapters,\r\n        address[][] memory _assets\r\n    )\r\n        public\r\n        AdapterAssetsManager(_adapters, _assets)\r\n    {}\r\n\r\n    /**\r\n     * @return All the amounts and rates of supported assets\r\n     * via supported adapters by the given user.\r\n     */\r\n    function getBalancesAndRates(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns(ProtocolDetail[] memory)\r\n    {\r\n        address[] memory adapters = getAdapters();\r\n        ProtocolDetail[] memory protocolDetails = new ProtocolDetail[](adapters.length);\r\n\r\n        for (uint256 i = 0; i < adapters.length; i++) {\r\n            protocolDetails[i] = ProtocolDetail({\r\n                name: Adapter(adapters[i]).getProtocolName(),\r\n                balances: getBalances(user, adapters[i]),\r\n                rates: getRates(adapters[i])\r\n            });\r\n        }\r\n\r\n        return protocolDetails;\r\n    }\r\n\r\n    /**\r\n     * @return All the amounts of supported assets\r\n     * via supported adapters by the given user.\r\n     */\r\n    function getBalances(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns(ProtocolBalance[] memory)\r\n    {\r\n        address[] memory adapters = getAdapters();\r\n        ProtocolBalance[] memory protocolBalances = new ProtocolBalance[](adapters.length);\r\n\r\n        for (uint256 i = 0; i < adapters.length; i++) {\r\n            protocolBalances[i] = ProtocolBalance({\r\n                name: Adapter(adapters[i]).getProtocolName(),\r\n                balances: getBalances(user, adapters[i])\r\n            });\r\n        }\r\n\r\n        return protocolBalances;\r\n    }\r\n\r\n    /**\r\n     * @return All the exchange rates for supported assets\r\n     * via the supported adapters.\r\n     */\r\n    function getRates()\r\n        external\r\n        view\r\n        returns (ProtocolRate[] memory)\r\n    {\r\n        address[] memory adapters = getAdapters();\r\n        ProtocolRate[] memory protocolRates = new ProtocolRate[](adapters.length);\r\n\r\n        for (uint256 i = 0; i < adapters.length; i++) {\r\n            protocolRates[i] = ProtocolRate({\r\n                name: Adapter(adapters[i]).getProtocolName(),\r\n                rates: getRates(adapters[i])\r\n            });\r\n        }\r\n\r\n        return protocolRates;\r\n    }\r\n\r\n    /**\r\n     * @return All the amounts of supported assets\r\n     * via the given adapter by the given user.\r\n     */\r\n    function getBalances(\r\n        address user,\r\n        address adapter\r\n    )\r\n        public\r\n        view\r\n        returns (AssetBalance[] memory)\r\n    {\r\n        address[] memory adapterAssets = getAdapterAssets(adapter);\r\n\r\n        return getBalances(user, adapter, adapterAssets);\r\n    }\r\n\r\n    /**\r\n     * @return All the amounts of the given assets\r\n     * via the given adapter by the given user.\r\n     */\r\n    function getBalances(\r\n        address user,\r\n        address adapter,\r\n        address[] memory assets\r\n    )\r\n        public\r\n        view\r\n        returns (AssetBalance[] memory)\r\n    {\r\n        uint256 length = assets.length;\r\n        AssetBalance[] memory assetBalances = new AssetBalance[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address asset = assets[i];\r\n            assetBalances[i] = AssetBalance({\r\n                asset: asset,\r\n                amount: Adapter(adapter).getAssetAmount(asset, user),\r\n                decimals: getAssetDecimals(asset)\r\n            });\r\n        }\r\n\r\n        return assetBalances;\r\n    }\r\n\r\n    /**\r\n     * @return All the exchange rates for supported assets\r\n     * via the given adapter.\r\n     */\r\n    function getRates(\r\n        address adapter\r\n    )\r\n        public\r\n        view\r\n        returns (AssetRate[] memory)\r\n    {\r\n        address[] memory adapterAssets = assets[adapter];\r\n\r\n        return getRates(adapter, adapterAssets);\r\n    }\r\n\r\n    /**\r\n     * @return All the exchange rates for the given assets\r\n     * via the given adapter.\r\n     */\r\n    function getRates(\r\n        address adapter,\r\n        address[] memory assets\r\n    )\r\n        public\r\n        view\r\n        returns (AssetRate[] memory)\r\n    {\r\n        uint256 length = assets.length;\r\n        AssetRate[] memory rates = new AssetRate[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address asset = assets[i];\r\n            rates[i] = AssetRate({\r\n                asset: asset,\r\n                components: Adapter(adapter).getUnderlyingRates(asset)\r\n            });\r\n        }\r\n\r\n        return rates;\r\n    }\r\n\r\n    function getAssetDecimals(\r\n        address asset\r\n    )\r\n        internal\r\n        view\r\n        returns (uint8)\r\n    {\r\n        return asset == ETH ? uint8(18) : ERC20(asset).decimals();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_assets\",\"type\":\"address[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdapter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"addAdapterAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getAdapterAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct AssetBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct AssetBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ProtocolBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct AssetBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalancesAndRates\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct AssetBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"components\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetRate[]\",\"name\":\"rates\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ProtocolDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"getRates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"components\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetRate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getRates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"components\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetRate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRates\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct Component[]\",\"name\":\"components\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetRate[]\",\"name\":\"rates\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ProtocolRate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"isValidAdapter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetIndex\",\"type\":\"uint256\"}],\"name\":\"removeAdapterAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AdapterRegistry","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"ipfs://c12dbd7596d77466045e2e41d34536b83dc8b289aa86575907944f9b9938f4e8"}]}