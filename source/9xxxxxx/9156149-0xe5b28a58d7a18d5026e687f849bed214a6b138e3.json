{"status":"1","message":"OK","result":[{"SourceCode":"{\"Afx.sol\":{\"content\":\"pragma solidity 0.5.12;\\n\\nimport \\\"./Multisig.sol\\\";\\n\\ncontract ERC20 {\\n  function balanceOf(address who) public view returns (uint256);\\n  function allowance(address owner, address spender) public view returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  function transfer(address to, uint256 value) public returns(bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract TestX is ERC20 {\\n    \\n    uint256 constant TOTALSUPPLY = 50000000;\\n\\n    using SafeMath for uint256;\\n    \\n    string public name = \\\"AssetfinX\\\";\\n    string public symbol = \\\"AFX\\\";\\n    uint8 public decimals = 18;\\n    uint256 public totalSupply = TOTALSUPPLY*10**uint256(decimals);\\n\\taddress payable public owner;\\n\\tuint256 public circulatingSupply;\\n\\tbool private contractStatus;\\n\\taddress public multisigAddress;\\n\\tuint256 public minFreezeTime;\\n\\n    mapping (address =\\u003e uint256) public balances;\\n\\tmapping (address =\\u003e uint256[2]) public freezeOf;\\n\\tmapping (address =\\u003e uint256) public lockOf;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowed;\\n    mapping (address =\\u003e mapping(uint256 =\\u003e mapping(uint256 =\\u003e uint256))) public mintTransaction;\\n    mapping (address =\\u003e mapping(address =\\u003e uint256)) public ownerTransaction;\\n    mapping (address =\\u003e mapping(address =\\u003e mapping(uint256 =\\u003e uint256))) public vestTransaction;\\n\\n\\tevent Freeze(address indexed from, uint256 value, uint256 freezetime);\\n\\tevent Unfreeze(address indexed from, uint256 value, uint256 unfreezetime);\\n\\tevent Lock(address indexed from, uint256 amount, uint256 locktime);\\n    event Release(address indexed from, uint256 amount, uint256 releasetime);\\n\\n    constructor(uint256 _initialSupply, bool _status, address _multisigAddress) public  {\\n        balances[msg.sender] = _initialSupply;   \\n\\t\\tcirculatingSupply = _initialSupply;           \\n\\t\\towner = msg.sender;\\n\\t\\tcontractStatus = _status;\\n\\t\\tmultisigAddress = _multisigAddress;\\n        emit Transfer(address(0), owner, _initialSupply);\\n    }\\n\\n    modifier onlyOwner(){\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n    \\n    modifier contractActive(){\\n        require(contractStatus, \\\"Contract is inactive\\\");\\n        _;\\n    }\\n    \\n    modifier multisigCheck(uint256 _id){\\n        require(Multisig(multisigAddress).executeChange(_id), \\\"Not confirmed\\\");\\n        _;\\n    }\\n    \\n    modifier multisigAdminCheck(uint256 _id, address _newaddress){\\n        require(Multisig(multisigAddress).executeAdminChange(_id, _newaddress), \\\"Not confirmed\\\");\\n        _;\\n    }\\n    \\n    /** \\n     * @dev Set Minimum time for freeze\\n     * @param _time Minimum time\\n     */ \\n    function setminimumFreezetime(uint256 _time) public onlyOwner returns (bool) {\\n        require(_time \\u003e 0, \\\"Invalid time\\\");\\n        minFreezeTime = _time;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Request Multisig contract to change admin \\n     * @param _newAdmin New admin address \\n     */ \\n    function requestchangeAdmin(address _newAdmin) public contractActive onlyOwner returns (bool) {\\n        ownerTransaction[msg.sender][_newAdmin] = Multisig(multisigAddress).requestOwnerChange(owner, _newAdmin);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Change admin \\n     * @param _address New owner address\\n     */ \\n    function changeAdmin(address payable _address) public contractActive onlyOwner multisigAdminCheck(ownerTransaction[owner][_address], _address) returns (bool) {\\n        owner = _address;\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Request Multisig contract for vesting\\n     * @param _address Token holder address\\n     * @param _amount Amount to be vested\\n     */ \\n    function vestRequest(address _address, uint256 _amount) public contractActive onlyOwner returns (bool) {\\n       vestTransaction[owner][_address][_amount] = Multisig(multisigAddress).vestingTransaction(owner, _address, _amount);\\n       return true;\\n    }\\n    \\n    /**\\n     * @dev Request Multisig contract for Mint \\n     * @param _amount Amount to be Minted\\n     * @param _time Current time\\n     */ \\n    function mintRequest(uint256 _amount, uint256 _time) public contractActive onlyOwner returns (bool) {\\n       mintTransaction[owner][_amount][_time] = Multisig(multisigAddress).mintTransaction(owner, _amount, _time);\\n       return true;\\n    }\\n\\n    /**\\n     * @dev Check balance of the holder\\n     * @param tokenOwner Token holder address\\n     */ \\n    function balanceOf(address tokenOwner) public view returns (uint256) {\\n        return balances[tokenOwner];\\n    }\\n\\n    /**\\n     * @dev Transfer token to specified address\\n     * @param _to Receiver address\\n     * @param _value Amount of the tokens\\n     */\\n    function transfer(address _to, uint256 _value) public contractActive returns (bool) {\\n        require(_to != address(0), \\\"Null address\\\");                                         \\n\\t\\trequire(_value \\u003e 0, \\\"Invalid Value\\\"); \\n        require(balances[msg.sender] \\u003e= _value, \\\"Insufficient balance\\\");                           \\n        _transfer(msg.sender, _to, _value); \\n        return true;\\n    }\\n \\n    /**\\n     * @dev Approve respective tokens for spender\\n     * @param _spender Spender address\\n     * @param _value The amount of tokens to be allowed\\n     */\\n   function approve(address _spender, uint256 _value) public contractActive returns (bool) {\\n\\t\\trequire(_value \\u003e= 0, \\\"Invalid value\\\");\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev To view approved balance\\n     * @param holder The holder address\\n     * @param delegate The spender address\\n     */ \\n    function allowance(address holder, address delegate) public view returns (uint256) {\\n        return allowed[holder][delegate];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param _from  The holder address\\n     * @param _to  The Receiver address\\n     * @param _value  the amount of tokens to be transferred\\n     */\\n   function transferFrom(address _from, address _to, uint256 _value) public contractActive returns (bool) {\\n        require( _to != address(0), \\\"Null address\\\");\\n        require(_from != address(0), \\\"Null address\\\");\\n\\t\\trequire( _value \\u003e 0 , \\\"Invalid value\\\"); \\n        require( _value \\u003c= balances[_from] , \\\"Insufficient balance\\\");\\n        require( _value \\u003c= allowed[_from][msg.sender] , \\\"Insufficient allowance\\\");\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Internal Transfer function\\n     * @param _from  The holder address\\n     * @param _to  The Receiver address\\n     * @param _value  the amount of tokens to be transferred\\n     */\\n    function _transfer(address _from, address _to, uint256 _value) internal {\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(_from, _to, _value); \\n    }\\n    \\n    /**\\n     * @dev Freeze tokens - User can freeze again only after UnFreezeing the previous one.\\n     * @param _value  The amount of tokens to be freeze\\n     * @param _time  Timeperiod for freezing in seconds\\n     */\\n\\tfunction freeze(uint256 _value, uint256 _time) public contractActive returns (bool) {\\n        require(_value \\u003e= 0, \\\"Invalid Value\\\");\\n        require(freezeOf[msg.sender][0] == 0, \\\"Tokens already frozen\\\");\\n        require( _value \\u003c= balances[msg.sender], \\\"Insufficient balance\\\"); \\n        require(_time \\u003e= minFreezeTime, \\\"Invalid time\\\");\\n        balances[msg.sender] = balances[msg.sender].sub(_value); \\n        freezeOf[msg.sender][0] = _value; \\n        freezeOf[msg.sender][1] = now.add(_time);\\n        emit Transfer(msg.sender, address(this), _value);\\n        emit Freeze(msg.sender, _value, now);\\n        return true;\\n    }\\n\\t\\n\\t/**\\n     * @dev UnFreeze tokens\\n     */\\n\\tfunction unfreeze() public contractActive returns (bool) {\\n        require(freezeOf[msg.sender][0] != 0, \\\"Sender has no tokens to unfreeze\\\");\\n\\t\\trequire(now \\u003e= freezeOf[msg.sender][1], \\\"Invalid time\\\");\\n\\t\\tbalances[msg.sender] = balances[msg.sender].add(freezeOf[msg.sender][0]);\\n\\t\\temit Transfer(address(this), msg.sender, freezeOf[msg.sender][0]);\\n        emit Unfreeze(msg.sender, freezeOf[msg.sender][0], now);\\n        freezeOf[msg.sender][0] = 0;\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Mint tokens to increase the circulating supply\\n     * @param _amount The amount of tokens to be Minted\\n     * @param _reqestedTime  Request submitted time\\n     */\\n    function mint( uint256 _amount, uint256 _reqestedTime) public contractActive onlyOwner multisigCheck(mintTransaction[owner][_amount][_reqestedTime]) returns (bool) {\\n        require( _amount \\u003e 0, \\\"Invalid amount\\\");\\n        require(circulatingSupply.add(_amount) \\u003c= TOTALSUPPLY, \\\"Supply exceeds limit\\\");\\n        \\n        circulatingSupply = circulatingSupply.add(_amount);\\n        balances[owner] = balances[owner].add(_amount);\\n        \\n        emit Transfer(address(0), owner, _amount);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Vesting lock tokens\\n     * @param _address Holder address\\n     * @param _amount Amount of token to be locked\\n     */\\n    function vestLock(address _address, uint256 _amount) public contractActive onlyOwner multisigCheck(vestTransaction[owner][_address][_amount]) returns (bool) {\\n       require(_amount \\u003e= 0, \\\"Invalid Amount\\\");\\n       require(balances[_address] \\u003e= _amount, \\\"Invalid balance\\\");\\n       \\n       balances[_address] = balances[_address].sub(_amount);\\n       lockOf[_address] = lockOf[_address].add(_amount);\\n       emit Transfer(_address,address(this),_amount);\\n       emit Lock(_address,_amount,now);\\n       return true;\\n    }\\n    \\n    /**\\n     * @dev Vesting Release token\\n     * @param _address Holder address \\n     * @param _amount Amount of token to be released\\n     */ \\n    function vestRelease(address _address, uint256 _amount) public contractActive onlyOwner multisigCheck(vestTransaction[owner][_address][_amount]) returns (bool) {\\n       require(_amount \\u003e= 0, \\\"Invalid Amount\\\");\\n       require(lockOf[_address] \\u003e= _amount, \\\"Insufficient Amount\\\");\\n       \\n       lockOf[_address] = lockOf[_address].sub(_amount);\\n       balances[_address] = balances[_address].add(_amount);\\n       emit Transfer(address(this), _address, _amount);\\n       emit Release(_address, _amount,now);\\n       return true;\\n    }\\n    \\n    /**\\n     * @dev updatecontractStatus to change the status of the contract from active to inactive\\n     * @param _status status of the contract\\n     */\\n    function updatecontractStatus(bool _status) public onlyOwner returns(bool) {\\n        require(contractStatus != _status, \\\"Invalid status\\\");\\n        contractStatus = _status;\\n        return true;\\n    }\\n    \\n    /**\\n     * dev Update Multisig Contract address \\n     * @param _address New contract address \\n     */ \\n    function updateMultisigAddress(address _address) public contractActive onlyOwner returns(bool) {\\n        require(_address != address(0), \\\"Null Address\\\");\\n        multisigAddress = _address;\\n        return true;\\n    }\\n    \\n}\\n\"},\"Multisig.sol\":{\"content\":\"pragma solidity 0.5.12;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath { \\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n      assert(b \\u003c= a);\\n      return a - b;\\n    }\\n    \\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n      uint256 c = a + b;\\n      assert(c \\u003e= a);\\n      return c;\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\n contract Multisig {\\n    using SafeMath for uint256;\\n    address payable public superAdmin;\\n    address[] public owners;\\n    uint256 public transactionId;\\n    uint256 public transactionCount;\\n    bool public status;\\n\\n    mapping (address =\\u003e bool) public newOwner;\\n    mapping (uint256 =\\u003e bool) public confirmations;\\n    mapping (uint256 =\\u003e bool) public isConfirmed;\\n    mapping (address =\\u003e mapping(uint256 =\\u003e bool)) public setConfirm;\\n    mapping (uint256 =\\u003e uint256) public confirmCount;\\n    mapping (address =\\u003e mapping(address =\\u003e bool)) public ownertnx;\\n    \\n    event Ownerchange(address indexed owneraddress, address newowner, uint256 indexed tnxid);\\n    event Mint(address indexed owneraddress, uint256 _time, uint256 indexed tnxid);\\n    event Vest(address indexed owneraddress, address useraddress, uint256 vestamount, uint256 indexed tnxid);\\n    event Approved(address indexed owneraddress, uint256 indexed tnxid);\\n\\n    constructor(bool _status) public {\\n        superAdmin = msg.sender;\\n        owners.push(superAdmin);\\n        newOwner[msg.sender] = true;\\n        status = _status;\\n    } \\n    \\n    modifier onlySuperAdmin() {\\n        require (msg.sender == superAdmin, \\\"onlySuperAdmin\\\");\\n        _;\\n    }\\n    \\n    modifier isOwner() {\\n        require (newOwner[msg.sender], \\\"Not a owner\\\");\\n        _;\\n    }\\n    \\n    modifier contractStatus() {\\n         require(status, \\\"Contract Inactive\\\");\\n         _;\\n    }\\n    \\n    /**\\n     * @dev Change and update Super admin \\n     * @param _address New address to be changed \\n     */ \\n    function changeSuperadmin(address payable _address) public onlySuperAdmin returns(bool) {\\n        require(_address != address(0), \\\"Null Address\\\");\\n        superAdmin = _address;\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Add owner\\n     * @param ownerAddress Address to be added as owner list\\n     */ \\n    function addOwner(address[] memory ownerAddress) public onlySuperAdmin contractStatus returns (bool) {\\n        for(uint i=0; i \\u003c ownerAddress.length; i++) {\\n            require (!newOwner[ownerAddress[i]],\\\"Already a owner\\\");\\n            newOwner[ownerAddress[i]] = true;\\n            owners.push(ownerAddress[i]);\\n        }\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Remove Owner \\n     * @param _address Address to be removed from owner list\\n     */\\n    function removeOwner(address _address) public onlySuperAdmin contractStatus returns (bool) {\\n        require (newOwner[_address], \\\"Not a owner\\\");\\n        for(uint i=0; i \\u003c owners.length; i++) {\\n            if(owners[i] == _address) {\\n                owners[i] = owners[owners.length.sub(1)];\\n                owners.length = owners.length.sub(1);\\n            }\\n        }\\n        newOwner[_address] = false;\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Request submission for owner change in AFX contract \\n     * @param currentOwner Current owner address \\n     * @param _newOwner New owner address\\n     */ \\n    function requestOwnerChange(address currentOwner, address _newOwner) public contractStatus returns (uint256) {\\n        require ((currentOwner != address(0)) \\u0026\\u0026 (_newOwner != address(0)),\\\"Null address\\\");\\n        require (newOwner[currentOwner], \\\"Should already be a owner\\\"); \\n        require(!newOwner[_newOwner],\\\"Should not be a owner\\\");\\n        require(!ownertnx[currentOwner][_newOwner], \\\"Transaction submitted already\\\");\\n        ownertnx[currentOwner][_newOwner] = true;\\n        transactionId = transactionCount.add(1);\\n        confirmations[transactionId] = true;\\n        transactionCount = transactionCount.add(1);\\n        emit Ownerchange(currentOwner, _newOwner, transactionId);\\n        return transactionId;\\n    }\\n    \\n    /** @dev Approve Request \\n     * _transactionId Id to be approved\\n     */ \\n    function approveRequest(uint256 _transactionId) public isOwner contractStatus returns (bool) {\\n        require(confirmations[_transactionId], \\\"Invalid Transaction\\\");\\n        require(_setConfirmation(_transactionId), \\\"Transaction not confirmed\\\");\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Internal function\\n     */ \\n    function _setConfirmation(uint256 _transactionId) internal returns (bool) {\\n        require (!setConfirm[msg.sender][_transactionId], \\\"Transaction already confirmed\\\");\\n        setConfirm[msg.sender][_transactionId] = true;\\n        confirmCount[_transactionId] = confirmCount[_transactionId].add(1);\\n        if(confirmCount[_transactionId] \\u003e (owners.length).div(2)) {\\n            isConfirmed[_transactionId] = true;\\n        }\\n        emit Approved(msg.sender, transactionId);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Check if request is approved\\n     * @param _transactionId Id to check \\n     */ \\n    function executeAdminChange(uint256 _transactionId, address _newaddress) public returns (bool) {\\n        require(confirmations[_transactionId], \\\"Invalid Transaction\\\");\\n        newOwner[_newaddress] = true;\\n        owners.push(_newaddress);\\n        return isConfirmed[_transactionId];\\n    }\\n    \\n    /**\\n     * @dev Check if request is approved\\n     * @param _transactionId Id to check \\n     */ \\n    function executeChange(uint256 _transactionId) public view returns (bool) {\\n        require(confirmations[_transactionId], \\\"Invalid Transaction\\\");\\n        return isConfirmed[_transactionId];\\n    }\\n\\n    /**\\n     * @dev Request submission for vesting in AFX contract \\n     * @param _owner Token holder address \\n     * @param _address User address \\n     * @param _amount Amount to be vest\\n     */ \\n    function vestingTransaction(address _owner, address _address, uint256 _amount) public contractStatus returns (uint256) {\\n        require (newOwner[_owner],\\\"Not a owner\\\");\\n        transactionId = transactionCount.add(1);\\n        confirmations[transactionId] = true;\\n        transactionCount = transactionCount.add(1);\\n        emit Vest(_owner, _address, _amount, transactionId);\\n        return transactionId;\\n    }\\n    \\n    /**\\n     * @dev Request submission for Minting in AFX contract\\n     * @param _owner Token holder address \\n     * @param _amount Amount to mint \\n     * @param _time Requested time\\n     */ \\n    function mintTransaction(address _owner, uint256 _amount, uint256 _time) public contractStatus returns (uint256) {\\n        require (newOwner[_owner],\\\"Not a owner\\\");\\n        transactionId = transactionCount.add(1);\\n        confirmations[transactionId] = true;\\n        transactionCount = transactionCount.add(1);\\n        emit Mint(_owner, _amount, _time);\\n        return transactionId;\\n    }\\n    \\n    /**\\n     * @dev Return owner count \\n     */ \\n    function ownerscount() public view returns(uint256) {\\n        return owners.length;\\n    }\\n    \\n    /**\\n     * @dev Update Contract status\\n     * @param _status Status to be updated\\n     */ \\n    function updatecontractStatus(bool _status) public onlySuperAdmin returns(bool) {\\n        require(status != _status);\\n        status = _status;\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Selfdestruct\\n     */ \\n    function kill() public onlySuperAdmin {\\n        selfdestruct(superAdmin);\\n    }\\n    \\n }\\n \\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_multisigAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezetime\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasetime\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unfreezetime\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reqestedTime\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"mintRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"requestchangeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setminimumFreezetime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateMultisigAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updatecontractStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vestLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vestRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vestRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TestX","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d0cf564469531a73cfa82331526b63bbba4cc4bc","Library":"","LicenseType":"None","SwarmSource":"bzzr://1e106c430f00abc15c514d14863f0efd299fae1a3d082799f4af5d5b85125a15"}]}