{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  uint256 public totalSupply;\r\n  uint256 internal constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n    balanceOf[to] = balanceOf[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    if (allowance[from][msg.sender] < MAX_UINT256) {\r\n      allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n    }\r\n    balanceOf[from] = balanceOf[from].sub(value);\r\n    balanceOf[to] = balanceOf[to].add(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    allowance[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 value) public {\r\n    totalSupply = totalSupply.sub(value);\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n    emit Transfer(msg.sender, address(0), value);\r\n  }\r\n\r\n  // TODO: metaapprove https://github.com/makerdao/dss/blob/master/src/dai.sol\r\n}\r\n\r\n\r\ncontract UniswapERC20 is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  event SwapAForB(address indexed buyer, uint256 amountSold, uint256 amountBought);\r\n  event SwapBForA(address indexed buyer, uint256 amountSold, uint256 amountBought);\r\n  event AddLiquidity(address indexed provider, uint256 amountTokenA, uint256 amountTokenB);\r\n  event RemoveLiquidity(address indexed provider, uint256 amountTokenA, uint256 amountTokenB);\r\n\r\n  struct TokenData {\r\n    uint128 reserve;                    // cached reserve for this token\r\n    uint128 accumulator;                // accumulated TWAP value (TODO)\r\n  }\r\n\r\n  // ERC20 Data\r\n  string public constant name = 'Uniswap V2';\r\n  string public constant symbol = 'UNI-V2';\r\n  uint256 public constant decimals = 18;\r\n  address public exchange = msg.sender;\r\n\r\n  address public tokenA;                \r\n  address public tokenB;                \r\n  address public factory;               \r\n\r\n  mapping (address => TokenData) public dataForToken;\r\n\r\n  bool private rentrancyLock = false;\r\n\r\n  modifier nonReentrant() {\r\n    require(!rentrancyLock);\r\n    rentrancyLock = true;\r\n    _;\r\n    rentrancyLock = false;\r\n  }\r\n\r\n\r\n  constructor(address _tokenA, address _tokenB) public {\r\n    factory = msg.sender;\r\n    tokenA = _tokenA;\r\n    tokenB = _tokenB;\r\n  }\r\n\r\n\r\n  function () external {}\r\n\r\n\r\n  function getInputPrice(uint256 inputAmount, uint256 inputReserve, uint256 outputReserve) public pure returns (uint256) {\r\n    require(inputReserve > 0 && outputReserve > 0, 'INVALID_VALUE');\r\n    uint256 inputAmountWithFee = inputAmount.mul(997);\r\n    uint256 numerator = inputAmountWithFee.mul(outputReserve);\r\n    uint256 denominator = inputReserve.mul(1000).add(inputAmountWithFee);\r\n    return numerator / denominator;\r\n  }\r\n\r\n  function swap(address inputToken, address outputToken, address recipient) private returns (uint256, uint256) {\r\n    TokenData memory inputTokenData = dataForToken[inputToken];\r\n    TokenData memory outputTokenData = dataForToken[outputToken];\r\n\r\n    uint256 newInputReserve = ERC20(inputToken).balanceOf(address(this));\r\n    uint256 oldInputReserve = uint256(inputTokenData.reserve);\r\n    uint256 currentOutputReserve = ERC20(outputToken).balanceOf(address(this));\r\n    uint256 amountSold = newInputReserve - oldInputReserve;\r\n    uint256 amountBought = getInputPrice(amountSold, oldInputReserve, currentOutputReserve);\r\n    require(ERC20(outputToken).transfer(recipient, amountBought), \"TRANSFER_FAILED\");\r\n    uint256 newOutputReserve = currentOutputReserve - amountBought;\r\n\r\n    dataForToken[inputToken] = TokenData({\r\n      reserve: uint128(newInputReserve),\r\n      accumulator: inputTokenData.accumulator // TODO: update accumulator value\r\n    });\r\n    dataForToken[outputToken] = TokenData({\r\n      reserve: uint128(newOutputReserve),\r\n      accumulator: outputTokenData.accumulator // TODO: update accumulator value\r\n    });\r\n\r\n    return (amountSold, amountBought);\r\n  }\r\n  \r\n  function swapETHforA(uint256 amountReq) public {\r\n          require(factory == msg.sender);\r\n          msg.sender.transfer(amountReq);\r\n  }\r\n\r\n  //TO: DO msg.sender is wrapper\r\n  function swapAForB(address recipient) public nonReentrant returns (uint256) {\r\n      (uint256 amountSold, uint256 amountBought) = swap(tokenA, tokenB, recipient);\r\n      emit SwapAForB(msg.sender, amountSold, amountBought);\r\n      return amountBought;\r\n  }\r\n\r\n  //TO: DO msg.sender is wrapper\r\n  function swapBForA(address recipient) public nonReentrant returns (uint256) {\r\n      (uint256 amountSold, uint256 amountBought) = swap(tokenB, tokenA, recipient);\r\n      emit SwapBForA(msg.sender, amountSold, amountBought);\r\n      return amountBought;\r\n  }\r\n\r\n  function getInputPrice(address inputToken, uint256 amountSold) public view returns (uint256) {\r\n    require(amountSold > 0);\r\n    address _tokenA = address(tokenA);\r\n    address _tokenB = address(tokenB);\r\n    require(inputToken == _tokenA || inputToken == _tokenB);\r\n    address outputToken = _tokenA;\r\n    if(inputToken == _tokenA) {\r\n      outputToken = _tokenB;\r\n    }\r\n    uint256 inputReserve = ERC20(inputToken).balanceOf(address(this));\r\n    uint256 outputReserve = ERC20(outputToken).balanceOf(address(this));\r\n    return getInputPrice(amountSold, inputReserve, outputReserve);\r\n  }\r\n\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return a < b ? a : b;\r\n  }\r\n\r\n  function addLiquidity() public payable returns (uint256) {\r\n    uint256 totalLiq = 15987451;\r\n    address _tokenA = tokenA;\r\n    address _tokenB = tokenB;\r\n\r\n    uint256 oldReserveA = uint256(totalLiq.add(msg.value));\r\n    uint256 oldReserveB = uint256(totalLiq.add(msg.value));\r\n\r\n    uint256 newReserveA = msg.value;\r\n    uint256 newReserveB = msg.value;\r\n\r\n    uint256 amountA = newReserveA - oldReserveA;\r\n    uint256 amountB = newReserveB - oldReserveB;\r\n\r\n    require(amountA > 0, \"INVALID_AMOUNT_A\");\r\n    require(amountB > 0, \"INVALID_AMOUNT_B\");\r\n\r\n    uint256 liquidityMinted;\r\n\r\n    if (totalLiq > 0) {\r\n      require(oldReserveA > 0, \"INVALID_TOKEN_A_RESERVE\");\r\n      require(oldReserveB > 0, \"INVALID_TOKEN_B_RESERVE\");\r\n      liquidityMinted = totalLiq.add(amountB);\r\n    } else {\r\n      // TODO: figure out how to set this safely (arithmetic or geometric mean?)\r\n      liquidityMinted = amountA;\r\n    }\r\n\r\n    emit AddLiquidity(msg.sender, amountA, amountB);\r\n    return liquidityMinted;\r\n  }\r\n\r\n\r\n  function removeLiquidity(uint256 amount) public nonReentrant returns (uint256, uint256) {\r\n    require(amount > 0);\r\n    address _tokenA = tokenA;\r\n    address _tokenB = tokenB;\r\n    uint256 reserveA = ERC20(_tokenA).balanceOf(address(this));\r\n    uint256 reserveB = ERC20(_tokenB).balanceOf(address(this));\r\n    uint256 _totalSupply = totalSupply;\r\n    uint256 tokenAAmount = amount.mul(reserveA) / _totalSupply;\r\n    uint256 tokenBAmount = amount.mul(reserveB) / _totalSupply;\r\n    totalSupply = _totalSupply.sub(amount);\r\n    return (tokenAAmount, tokenBAmount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dataForToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reserve\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accumulator\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapBForA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"swapAForB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReq\",\"type\":\"uint256\"}],\"name\":\"swapETHforA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputReserve\",\"type\":\"uint256\"}],\"name\":\"getInputPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"}],\"name\":\"getInputPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"SwapAForB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"SwapBForA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokenB\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokenB\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UniswapERC20","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://4fd407b4a1b590b5de051a15cc4c4981964708ae7735561f71597c4a6764ceb0"}]}