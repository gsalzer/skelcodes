{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract MainContract {\r\n    function getUserInvestInfo(address addr) public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n}\r\n\r\ncontract AOQFund {\r\n\r\n    using SafeMath for *;\r\n\r\n    uint ethWei = 1 ether;\r\n    uint256  fundValue;\r\n    uint256  gradeOne;\r\n    uint256  gradeTwo;\r\n    uint256  gradeThree;\r\n    address public mainContract;\r\n    bool public canWithdraw = false;\r\n    address owner;\r\n    uint256 public totalInvestorCount;\r\n\r\n    address payable projectAddress = 0x64d7d8AA5F785FF3Fb894Ac3b505Bd65cFFC562F;\r\n\r\n    uint256 closeTime;\r\n\r\n    uint256 public gradeThreeCount;\r\n    uint256 public gradeTwoCount;\r\n    uint256 public gradeOneCount;\r\n\r\n    uint256 public gradeThreeCountLimit = 10;\r\n    uint256 public gradeTwoCountLimit = 90;\r\n\r\n    struct Invest {\r\n        uint256 level;\r\n        bool withdrawed;\r\n        uint256 lastInvestTime;\r\n        uint256 grade;\r\n    }\r\n\r\n    mapping(uint256 => uint256) gradeDistribute;\r\n    mapping(address => Invest) public projectInvestor;\r\n    mapping(address => bool) admin;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        admin[msg.sender] = true;\r\n\r\n        gradeDistribute[3] = 250;\r\n        gradeDistribute[2] = 350;\r\n        gradeDistribute[1] = 400;\r\n\r\n    }\r\n\r\n    //modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \"sorry humans only\");\r\n        require(tx.origin == msg.sender, \"sorry, human only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(admin[msg.sender] == true, 'only admin can call');\r\n        _;\r\n    }\r\n\r\n    modifier onlyMainContract(){\r\n        require(msg.sender == mainContract, 'only Main Contract');\r\n        _;\r\n    }\r\n\r\n    modifier isContract() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength != 0, \"ERROR_ONLY_CONTRACT\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address addr)\r\n    public\r\n    onlyOwner()\r\n    {\r\n        admin[addr] = true;\r\n    }\r\n\r\n    function setCloseTime(uint256 cTime)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        closeTime = cTime;\r\n    }\r\n\r\n    function setProjectAddress(address payable pAddress)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        projectAddress = pAddress;\r\n    }\r\n\r\n    function setMainContract(address addr)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        mainContract = addr;\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n\r\n    function setGradeCountLimit(uint256 gradeThreeLimit, uint256 gradeTwoLimit)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        gradeThreeCountLimit = gradeThreeLimit;\r\n        gradeTwoCountLimit = gradeTwoLimit;\r\n    }\r\n\r\n    function countDownOverSet()\r\n    public\r\n    onlyMainContract()\r\n    isContract()\r\n    {\r\n        fundValue = address(this).balance;\r\n        gradeThree = fundValue.mul(gradeDistribute[3]).div(1000);\r\n        gradeTwo = fundValue.mul(gradeDistribute[2]).div(1000);\r\n        gradeOne = fundValue.sub(gradeThree).sub(gradeTwo);\r\n        closeTime = now + 3 days;\r\n    }\r\n\r\n    function getFundInfo()\r\n    public\r\n    view\r\n    returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        return (fundValue, gradeThree, gradeTwo, gradeOne);\r\n    }\r\n\r\n    function receiveInvest(address investor, uint256 level, bool isNew)\r\n    public\r\n    onlyMainContract()\r\n    isContract()\r\n    {\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(investor)}\r\n        require(codeLength == 0, \"not a valid human address\");\r\n\r\n        projectInvestor[investor].level = level;\r\n        projectInvestor[investor].lastInvestTime = now;\r\n\r\n        if (isNew) {\r\n            totalInvestorCount = totalInvestorCount.add(1);\r\n        }\r\n    }\r\n\r\n    function setFrontInvestors(address investor, uint256 grade)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n\r\n        Invest storage investInfo = projectInvestor[investor];\r\n\r\n        require(investInfo.level >= 1 && investInfo.withdrawed == false, 'invalid investor');\r\n        require(canWithdraw == false, 'invalid period');\r\n        require(grade < 4, 'invalid grade');\r\n\r\n        if (grade == 3 && investInfo.grade != 3) {\r\n            require(gradeThreeCount <= gradeThreeCountLimit, 'only 10 count allowed');\r\n            gradeThreeCount = gradeThreeCount.add(1);\r\n            if (investInfo.grade == 2) {\r\n                gradeTwoCount = gradeTwoCount.sub(1);\r\n            }\r\n        }\r\n        if (grade == 2 && investInfo.grade != 2) {\r\n            require(gradeTwoCount <= gradeTwoCountLimit, 'only 90 count allowed');\r\n            gradeTwoCount = gradeTwoCount.add(1);\r\n            if (investInfo.grade == 3) {\r\n                gradeThreeCount = gradeThreeCount.sub(1);\r\n            }\r\n        }\r\n        if (grade < 2 && investInfo.grade >= 2) {\r\n            if (investInfo.grade == 2) {\r\n                gradeTwoCount = gradeTwoCount.sub(1);\r\n            }\r\n            if (investInfo.grade == 3) {\r\n                gradeThreeCount = gradeThreeCount.sub(1);\r\n            }\r\n        }\r\n\r\n        investInfo.grade = grade;\r\n\r\n    }\r\n\r\n    function setGradeOne(uint256 num)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        gradeOneCount = num;\r\n    }\r\n\r\n    function openCanWithdraw(uint256 open)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        if (open == 1) {\r\n            canWithdraw = true;\r\n        } else {\r\n            canWithdraw = false;\r\n        }\r\n    }\r\n\r\n    function getInvest(address investor) internal view returns (uint256){\r\n        MainContract mainContractIns = MainContract(mainContract);\r\n        uint256 three;\r\n        (,,three,,,,,,,) = mainContractIns.getUserInvestInfo(investor);\r\n        return three;\r\n    }\r\n\r\n    function withdrawFund()\r\n    public\r\n    isHuman()\r\n    {\r\n        require(canWithdraw == true, 'can not withdraw now');\r\n\r\n        Invest storage investInfo = projectInvestor[msg.sender];\r\n        require(investInfo.withdrawed == false, 'withdrawed address');\r\n\r\n        uint256 withdrawAmount;\r\n\r\n        withdrawAmount = getFundReward(msg.sender);\r\n\r\n        if (withdrawAmount > 0) {\r\n            investInfo.withdrawed = true;\r\n        }\r\n\r\n        msg.sender.transfer(withdrawAmount);\r\n\r\n    }\r\n\r\n    function getFundReward(address addr)\r\n    public\r\n    view\r\n    isHuman()\r\n    returns (uint256)\r\n    {\r\n\r\n        Invest storage investInfo = projectInvestor[addr];\r\n\r\n        uint256 withdrawAmount = 0;\r\n\r\n        uint256 freeze;\r\n        freeze = getInvest(addr);\r\n\r\n        if (canWithdraw != false && investInfo.withdrawed != true && freeze > 0) {\r\n\r\n            if (investInfo.grade == 3 && gradeThreeCount > 0) {\r\n                withdrawAmount = gradeThree.div(gradeThreeCount);\r\n            } else if (investInfo.grade == 2 && gradeTwoCount > 0) {\r\n                withdrawAmount = gradeTwo.div(gradeTwoCount);\r\n            }\r\n\r\n            if (investInfo.grade < 2 && gradeOneCount > 0) {\r\n                withdrawAmount = gradeOne.div(gradeOneCount);\r\n            }\r\n        }\r\n\r\n        return withdrawAmount;\r\n\r\n    }\r\n\r\n    function close() public\r\n    onlyOwner()\r\n    {\r\n        require(canWithdraw == true && gradeThreeCount > 0, 'Game is not start over now!');\r\n        require(now > closeTime, 'only 3 days later Game Over');\r\n        selfdestruct(projectAddress);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"mul overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"div zero\");\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"lower sub bigger\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"mod zero\");\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"gradeOneCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"grade\",\"type\":\"uint256\"}],\"name\":\"setFrontInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"countDownOverSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gradeThreeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"open\",\"type\":\"uint256\"}],\"name\":\"openCanWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cTime\",\"type\":\"uint256\"}],\"name\":\"setCloseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMainContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setGradeOne\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"isNew\",\"type\":\"bool\"}],\"name\":\"receiveInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gradeThreeLimit\",\"type\":\"uint256\"},{\"name\":\"gradeTwoLimit\",\"type\":\"uint256\"}],\"name\":\"setGradeCountLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectInvestor\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"withdrawed\",\"type\":\"bool\"},{\"name\":\"lastInvestTime\",\"type\":\"uint256\"},{\"name\":\"grade\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gradeTwoCountLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFundReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gradeTwoCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gradeThreeCountLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pAddress\",\"type\":\"address\"}],\"name\":\"setProjectAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"AOQFund","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://042ccdcee403dae72a5fdb2096af51fa115b3637534473cb0b8d5a211dd5e4f7"}]}