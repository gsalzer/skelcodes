{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >0.4.99 <0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address payable private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor(address payable newOwner) public {\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract IReferStorage {\r\n    function setReferrerPercent(address _contractAddress, uint _newPercent) public;\r\n\r\n    function setWhitelist(address _newUser, bool _status) public;\r\n\r\n    function withdrawFunds(uint _amount, address _beneficiary, address _contract) public;\r\n}\r\n\r\ncontract IFundsStorage {\r\n    function getPercentFund(address _contractAddress, uint _typeFund) public view returns(uint);\r\n\r\n    function setPercentFund(address _contractAddress, uint _typeFund, uint _newPercent) public;\r\n\r\n    function withdrawFunds(uint _typeFund, address _contract, uint _amount, address payable _beneficiary) public;\r\n\r\n    function setWhitelist(address _newUser, bool _status) public;\r\n}\r\n\r\ncontract ISundayLottery {\r\n    function buyTicket(\r\n        address _contract,\r\n        address payable _wallet,\r\n        uint _stake,\r\n        bytes memory _referrerLink,\r\n        bytes32 _hash\r\n    ) public payable;\r\n\r\n    function getTicketInfo(address _contract, uint round) public view returns (\r\n        address payable _wallet,\r\n        uint _investment,\r\n        uint _stakeAmount,\r\n        uint _stake,\r\n        uint _happyNumber\r\n    );\r\n\r\n    function currentRound() public view returns (uint);\r\n\r\n    function makeTwist(address _contract, uint _numberReveal, address _playerWallet) public;\r\n\r\n    function withdrawFunds(uint _amount, address payable _beneficiary) public;\r\n\r\n    function balanceAll() public view returns (uint);\r\n\r\n    function calcMaxStake() public view returns (uint _availableFunds);\r\n\r\n    function calcStake(uint _amount) public view returns (uint _availableFunds);\r\n\r\n    function setSystemOwnerPercent(uint _newValue) external;\r\n\r\n    function setBotComission(uint _newValue) external;\r\n\r\n    function updateAddress(address _newWallet, uint _number) external;\r\n\r\n    function payToMyGameContract(address payable _wallet) external;\r\n}\r\n\r\ncontract IHeadsOrTails {\r\n    function makeNewGame(\r\n        address payable _ownerWallet,\r\n        address payable _contractOwnerWallet,\r\n        uint _systemOwnerPercent,\r\n        uint _percentOwner,\r\n        address _myAccountToJpFund, address _myAccountToReferFund\r\n    ) public returns(address payable);\r\n}\r\n\r\ncontract Controller is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    address public addressReferStorage;\r\n    address public addressFundStorage;\r\n    address public addressHeadsOrTails;\r\n\r\n    address[] private _arrayContractOwners;\r\n    //owner -> list of contracts\r\n    mapping(address => address payable []) private _listOfContract;\r\n    //owner -> list of contracts\r\n\r\n    mapping(address => address payable []) private _listOfJoinedMyGame;\r\n    //owner -> list of contracts\r\n\r\n    mapping(address => address) private _ownerByContract;\r\n    //address of contract -> owner\r\n\r\n    mapping(address => bool) public myGameWhitelist;\r\n\r\n    address public croupier;\r\n    uint public indexMyGame;\r\n\r\n    IReferStorage private referStorage;\r\n    IFundsStorage private fundsStorage;\r\n    IHeadsOrTails private headsOrTails;\r\n\r\n    event MakeNewGameContract(address indexed owner, address indexed addressContract);\r\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\r\n    event WithdrawFund(string logMessage, uint amount, address indexed sender, address indexed addressContract, uint additional);\r\n\r\n    modifier onlyCroupier {\r\n        require(msg.sender == croupier || isOwner(), \"only croupier methods, called by non-croupier.\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _croupier\r\n    ) public\r\n    Ownable(msg.sender)\r\n    {\r\n        croupier = _croupier;\r\n    }\r\n\r\n    function makeNewGame(\r\n        address payable _ownerWallet,\r\n        address payable _contractOwnerWallet,\r\n        uint _systemOwnerPercent,\r\n        uint _percentOwner,\r\n        uint _percentReferrer,\r\n        uint _percentFundDay, uint _percentFundWeek, uint _percentFundMonth, uint _percentFundYear,\r\n        address _myAccountToJpFund, address _myAccountToReferFund,\r\n        bool isMyGame\r\n    ) public {\r\n        require(_percentOwner >= _percentReferrer);\r\n        require(_contractOwnerWallet != address(0));\r\n        address myGameAddress;\r\n        if (_percentOwner > 100) {\r\n            _percentOwner = 100;\r\n        }\r\n        if (countContractByOwner(owner()) > 0) {\r\n            myGameAddress = getAddressContract(owner(), indexMyGame);\r\n        }\r\n\r\n        if (isMyGame == true) {\r\n            require(myGameWhitelist[msg.sender]);\r\n            _myAccountToJpFund = myGameAddress;\r\n            _myAccountToReferFund = myGameAddress;\r\n            _ownerWallet = owner();\r\n        }\r\n\r\n        address payable newContractAddress = headsOrTails.makeNewGame(\r\n            _ownerWallet,\r\n            _contractOwnerWallet,\r\n                _systemOwnerPercent,\r\n            _percentOwner,\r\n            _myAccountToJpFund, _myAccountToReferFund\r\n        );\r\n\r\n        if (isMyGame == false) {\r\n            settingJpPercentNewGameContract(\r\n                newContractAddress, _myAccountToJpFund,\r\n                _percentFundDay, _percentFundWeek, _percentFundMonth, _percentFundYear\r\n            );\r\n            settingReferPercentNewGameContract(\r\n                newContractAddress, _myAccountToReferFund,\r\n                _percentReferrer\r\n            );\r\n\r\n            _checkNewOwner(_ownerWallet);\r\n            _listOfContract[msg.sender].push(newContractAddress);\r\n        } else {\r\n            _listOfContract[_ownerWallet].push(newContractAddress);\r\n            _listOfJoinedMyGame[msg.sender].push(newContractAddress);\r\n            _getSundayLottery(_ownerWallet, indexMyGame).payToMyGameContract(newContractAddress);\r\n        }\r\n\r\n        _ownerByContract[newContractAddress] = _ownerWallet;\r\n        fundsStorage.setWhitelist(newContractAddress, true);\r\n        referStorage.setWhitelist(newContractAddress, true);\r\n\r\n        emit MakeNewGameContract(msg.sender, newContractAddress);\r\n    }\r\n\r\n    function settingJpPercentNewGameContract(\r\n        address payable _newContractAddress,\r\n        address _myAccountToJpFund,\r\n        uint _percentFundDay, uint _percentFundWeek, uint _percentFundMonth, uint _percentFundYear\r\n    ) internal {\r\n        address accountToJpFund = _myAccountToJpFund;\r\n\r\n        if (_myAccountToJpFund == address(0)) {\r\n            accountToJpFund = _newContractAddress;\r\n        }\r\n\r\n        setJpFundPercent(accountToJpFund, 0, _percentFundDay);\r\n        setJpFundPercent(accountToJpFund, 1, _percentFundWeek);\r\n        setJpFundPercent(accountToJpFund, 2, _percentFundMonth);\r\n        setJpFundPercent(accountToJpFund, 3, _percentFundYear);\r\n    }\r\n\r\n    function settingReferPercentNewGameContract(\r\n        address payable _newContractAddress,\r\n        address _myAccountToReferFund,\r\n        uint _percentReferrer\r\n    ) internal {\r\n        address accountToReferFund = _myAccountToReferFund;\r\n        if (_myAccountToReferFund == address(0)) {\r\n            accountToReferFund = _newContractAddress;\r\n        }\r\n        referStorage.setReferrerPercent(accountToReferFund, _percentReferrer);\r\n    }\r\n\r\n    function setJpFundPercent(address _accountToJpFund, uint _fundType, uint _percent) internal {\r\n        if (_percent > 0) {\r\n            fundsStorage.setPercentFund(_accountToJpFund, _fundType, _percent);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Aceess to game contract\r\n    */\r\n\r\n    function buyTicket(\r\n        address payable _owner,\r\n        uint _index,\r\n        address payable _wallet,\r\n        uint _stake,\r\n        bytes calldata _referrerLink,\r\n        bytes32 _hash\r\n    ) external payable {\r\n        address payable contractAddress = getAddressContract(_owner, _index);\r\n        _getSundayLottery(_owner, _index).buyTicket.value(msg.value)(contractAddress, _wallet, _stake, _referrerLink, _hash);\r\n    }\r\n\r\n    function getAddressContract(address _owner, uint _index) public view returns (address payable) {\r\n        return _listOfContract[_owner][_index];\r\n    }\r\n\r\n    function getJoinedMyGameContract(address _owner, uint _index) public view returns (address payable) {\r\n        return _listOfJoinedMyGame[_owner][_index];\r\n    }\r\n\r\n    function _getSundayLottery(address payable _owner, uint _index) internal view returns (ISundayLottery ) {\r\n        address payable addressContract = getAddressContract(_owner, _index);\r\n        return ISundayLottery(addressContract);\r\n    }\r\n\r\n    function getTicketInfo(address payable _contractOwner, uint _index, uint round) public view returns\r\n    (address payable _wallet, uint _investment, uint _stakeAmount, uint _stake, uint _happyNumber) {\r\n        address payable contractAddress = getAddressContract(_contractOwner, _index);\r\n        (_wallet, _investment, _stakeAmount, _stake, _happyNumber) = _getSundayLottery(_contractOwner, _index).getTicketInfo(contractAddress, round);\r\n    }\r\n\r\n    function getCurrentRound(address payable _contractOwner, uint _index) public view returns (uint) {\r\n        return _getSundayLottery(_contractOwner, _index).currentRound();\r\n    }\r\n\r\n    function getCalcStake(address payable _contractOwner, uint _index, uint _amount) public view returns (uint) {\r\n        return _getSundayLottery(_contractOwner, _index).calcStake(_amount);\r\n    }\r\n\r\n    function getCalcMaxStake(address payable _contractOwner, uint _index) public view returns (uint) {\r\n        return _getSundayLottery(_contractOwner, _index).calcMaxStake();\r\n    }\r\n\r\n    function settleBet(address payable _contractOwner, uint _index, uint _reveal, address _playerWallet) onlyCroupier public {\r\n        address payable contractAddress = getAddressContract(_contractOwner, _index);\r\n        _getSundayLottery(_contractOwner, _index).makeTwist(contractAddress, _reveal, _playerWallet);\r\n    }\r\n\r\n    function setSystemOwnerPercent(address payable _contractOwner, uint _index, uint _newValue) onlyOwner public {\r\n        _getSundayLottery(_contractOwner, _index).setSystemOwnerPercent(_newValue);\r\n    }\r\n\r\n    function setBotComission(address payable _contractOwner, uint _index, uint _newValue) onlyOwner public {\r\n        _getSundayLottery(_contractOwner, _index).setBotComission(_newValue);\r\n    }\r\n\r\n    function updateGameImportantAddress(address payable _contractOwner, uint _index, address _newWallet, uint _number) onlyOwner public {\r\n        _getSundayLottery(_contractOwner, _index).updateAddress(_newWallet, _number);\r\n    }\r\n\r\n    /**\r\n    * Access to funds contract\r\n    */\r\n    function withdrawReferFunds(uint _amount, address _contract) public {\r\n        require(_ownerByContract[_contract] == msg.sender);\r\n        referStorage.withdrawFunds(_amount, msg.sender, _contract);\r\n        emit WithdrawFund(\"Withdraw funds from refer contract\", _amount, msg.sender, _contract, 0);\r\n    }\r\n\r\n    function withdrawJackpotFunds(uint _amount, address _contract, uint _typeFund) payable public {\r\n        require(_ownerByContract[_contract] == msg.sender);\r\n        fundsStorage.withdrawFunds(_typeFund, _contract, _amount, msg.sender);\r\n        emit WithdrawFund(\"Withdraw funds from jackpot contract\", _amount, msg.sender, _contract, _typeFund);\r\n    }\r\n\r\n    // from game contract\r\n    function withdrawGameFunds(uint _indexContract, uint _amount) public {\r\n        address addressContract = _listOfContract[msg.sender][_indexContract];\r\n        require(countContractByOwner(msg.sender) > 0 );\r\n        require(addressContract != address(0));\r\n        require(_amount <= _getSundayLottery(msg.sender, _indexContract).balanceAll());\r\n        _getSundayLottery(msg.sender, _indexContract).withdrawFunds(_amount, msg.sender);\r\n        emit WithdrawFund(\"Withdraw funds from game contract\", _amount, msg.sender, addressContract, _indexContract);\r\n    }\r\n\r\n    // to game contract\r\n    function depositToContract(address _owner, uint _index) public payable {\r\n        address payable addressContract = getAddressContract(_owner, _index);\r\n        if (countContractByOwner(_owner) > 0 && addressContract != address(0)) {\r\n            addressContract.transfer(msg.value);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function withdrawParentContractFunds(uint _amount) external onlyOwner {\r\n        require(_amount <= balanceAll(), \"Increase amount larger than balance.\");\r\n        address payable owner = owner();\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n    * Aceess to Control functions\r\n    */\r\n    function setCroupierWallet(address _newWallet) external onlyOwner {\r\n        require(_newWallet != address(0));\r\n        address _oldWallet = croupier;\r\n        croupier = _newWallet;\r\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\r\n    }\r\n\r\n    function setIndexMyGame(uint _newValue) onlyOwner public {\r\n        indexMyGame = _newValue;\r\n    }\r\n\r\n    function setStorageAddress(address _addressFundStorage, address _addressReferStorage, address _addressHeadsOrTails) external onlyOwner {\r\n        require(_addressReferStorage != address(0) && _addressFundStorage != address(0) && _addressHeadsOrTails != address(0));\r\n        addressFundStorage = _addressFundStorage;\r\n        addressReferStorage = _addressReferStorage;\r\n        addressHeadsOrTails = _addressHeadsOrTails;\r\n\r\n        fundsStorage = IFundsStorage(_addressFundStorage);\r\n        referStorage = IReferStorage(_addressReferStorage);\r\n        headsOrTails = IHeadsOrTails(addressHeadsOrTails);\r\n    }\r\n\r\n    function setMyGameWhitelist(address _newUser, bool _status) external onlyOwner {\r\n        myGameWhitelist[_newUser] = _status;\r\n    }\r\n\r\n    function finish() external onlyOwner {\r\n        address payable __owner = owner();\r\n        selfdestruct(__owner);\r\n    }\r\n\r\n    function balanceAll() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function balanceByGameContract(address payable _owner, uint _index) public view returns (uint) {\r\n        return _getSundayLottery(_owner, _index).balanceAll();\r\n    }\r\n\r\n    function _checkNewOwner(address _owner) internal {\r\n        if (_isNewOwner(_owner)) {\r\n            _arrayContractOwners.push(_owner);\r\n        }\r\n    }\r\n\r\n    function _isNewOwner(address _owner) internal view returns (bool) {\r\n        return countContractByOwner(_owner) > 0 ? false : true;\r\n    }\r\n\r\n    function countOwnersContract() external view returns (uint) {\r\n        return _arrayContractOwners.length;\r\n    }\r\n\r\n    function getOwnerContract(uint _index) external view returns (address) {\r\n        return _arrayContractOwners[_index];\r\n    }\r\n\r\n    function countContractByOwner(address _owner) public view returns (uint) {\r\n        return _listOfContract[_owner].length;\r\n    }\r\n\r\n    function countJoinedMyGameContractByOwner(address _owner) public view returns (uint) {\r\n        return _listOfJoinedMyGame[_owner].length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_croupier\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressContract\",\"type\":\"address\"}],\"name\":\"MakeNewGameContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"logMessage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additional\",\"type\":\"uint256\"}],\"name\":\"WithdrawFund\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressHeadsOrTails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressReferStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"balanceByGameContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_referrerLink\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"countContractByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"countJoinedMyGameContractByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOwnersContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"depositToContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAddressContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCalcMaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCalcStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getJoinedMyGameContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOwnerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getTicketInfo\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_happyNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexMyGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_ownerWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_contractOwnerWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_systemOwnerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFundDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFundWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFundMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFundYear\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_myAccountToJpFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_myAccountToReferFund\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMyGame\",\"type\":\"bool\"}],\"name\":\"makeNewGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myGameWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setBotComission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setCroupierWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setIndexMyGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMyGameWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressFundStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressReferStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressHeadsOrTails\",\"type\":\"address\"}],\"name\":\"setStorageAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setSystemOwnerPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reveal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_playerWallet\",\"type\":\"address\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"updateGameImportantAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexContract\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGameFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_typeFund\",\"type\":\"uint256\"}],\"name\":\"withdrawJackpotFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawParentContractFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"withdrawReferFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005d6caea68ccc6aeff1963ab40d45211c69ef9295","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://8879439315f434358e930d481f4c557531bdc14186c411343928c9d9dfd3d635"}]}