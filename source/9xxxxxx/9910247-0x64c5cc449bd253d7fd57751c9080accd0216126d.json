{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        external\n        returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    function decimals() external view returns (uint256 digits);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken(uint256 _ethAmount, address _tokenAddress, uint256 _maxAmount)\n        external\n        payable\n        returns (uint256, uint256);\n\n    function swapTokenToEther(address _tokenAddress, uint256 _amount, uint256 _maxAmount)\n        external\n        returns (uint256);\n\n    function swapTokenToToken(address _src, address _dest, uint256 _amount)\n        external\n        payable\n        returns (uint256);\n\n    function getExpectedRate(address src, address dest, uint256 srcQty)\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint256);\n\n    function balanceOf(address) public returns (uint256);\n\n    function approve(address, uint256) public;\n\n    function transfer(address, uint256) public returns (bool);\n\n    function transferFrom(address, address, uint256) public returns (bool);\n\n    function deposit() public payable;\n\n    function withdraw(uint256) public;\n}\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract SaverExchangeConstantAddresses {\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant KYBER_WRAPPER = 0x8F337bD3b7F2b05d9A8dC8Ac518584e833424893;\n    address public constant UNISWAP_WRAPPER = 0x1e30124FDE14533231216D95F7798cD0061e5cf8;\n    address public constant OASIS_WRAPPER = 0x891f5A171f865031b0f3Eb9723bb8f68C901c9FE;\n\n    \n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n}\n\ncontract Discount {\n    address public owner;\n    mapping(address => CustomServiceFee) public serviceFees;\n\n    uint256 constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint256 amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint256) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint256 _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n    }\n}\n\ncontract SaverExchange is DSMath, SaverExchangeConstantAddresses {\n    uint256 public constant SERVICE_FEE = 800; \n\n    event Swap(\n        address src,\n        address dest,\n        uint256 amountSold,\n        uint256 amountBought,\n        address wrapper\n    );\n\n    function swapTokenToToken(\n        address _src,\n        address _dest,\n        uint256 _amount,\n        uint256 _minPrice,\n        uint256 _exchangeType,\n        address _exchangeAddress,\n        bytes memory _callData,\n        uint256 _0xPrice\n    ) public payable {\n        \n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\n\n        if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n            require(msg.value >= _amount, \"msg.value smaller than amount\");\n        } else {\n            require(\n                ERC20(orderAddresses[1]).transferFrom(msg.sender, address(this), _amount),\n                \"Not able to withdraw wanted amount\"\n            );\n        }\n\n        uint256 fee = takeFee(_amount, orderAddresses[1]);\n        _amount = sub(_amount, fee);\n        \n        uint256[2] memory tokens;\n        address wrapper;\n        uint256 price;\n        bool success;\n\n        \n        tokens[1] = _amount;\n\n        if (_exchangeType == 4) {\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _amount);\n            }\n\n            (success, tokens[0], ) = takeOrder(\n                orderAddresses,\n                _callData,\n                address(this).balance,\n                _amount\n            );\n            \n            require(success && tokens[0] > 0, \"0x transaction failed\");\n            wrapper = address(_exchangeAddress);\n        }\n\n        if (tokens[0] == 0) {\n            (wrapper, price) = getBestPrice(\n                _amount,\n                orderAddresses[1],\n                orderAddresses[2],\n                _exchangeType\n            );\n\n            require(price > _minPrice || _0xPrice > _minPrice, \"Slippage hit\");\n\n            \n            if (_0xPrice >= price) {\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _amount);\n                }\n                (success, tokens[0], tokens[1]) = takeOrder(\n                    orderAddresses,\n                    _callData,\n                    address(this).balance,\n                    _amount\n                );\n                \n                if (success && tokens[0] > 0) {\n                    wrapper = address(_exchangeAddress);\n                    emit Swap(orderAddresses[1], orderAddresses[2], _amount, tokens[0], wrapper);\n                }\n            }\n\n            if (tokens[1] > 0) {\n                \n                if (tokens[1] != _amount) {\n                    (wrapper, price) = getBestPrice(\n                        tokens[1],\n                        orderAddresses[1],\n                        orderAddresses[2],\n                        _exchangeType\n                    );\n                }\n\n                \n                require(price > _minPrice, \"Slippage hit onchain price\");\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n                    (tokens[0], ) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(\n                        tokens[1],\n                        orderAddresses[2],\n                        uint256(-1)\n                    );\n                } else {\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\n\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\n                        tokens[0] = ExchangeInterface(wrapper).swapTokenToEther(\n                            orderAddresses[1],\n                            tokens[1],\n                            uint256(-1)\n                        );\n                    } else {\n                        tokens[0] = ExchangeInterface(wrapper).swapTokenToToken(\n                            orderAddresses[1],\n                            orderAddresses[2],\n                            tokens[1]\n                        );\n                    }\n                }\n\n                emit Swap(orderAddresses[1], orderAddresses[2], _amount, tokens[0], wrapper);\n            }\n        }\n\n        \n        if (address(this).balance > 0) {\n            msg.sender.transfer(address(this).balance);\n        }\n\n        \n        if (orderAddresses[2] != KYBER_ETH_ADDRESS) {\n            if (ERC20(orderAddresses[2]).balanceOf(address(this)) > 0) {\n                ERC20(orderAddresses[2]).transfer(\n                    msg.sender,\n                    ERC20(orderAddresses[2]).balanceOf(address(this))\n                );\n            }\n        }\n\n        if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n            if (ERC20(orderAddresses[1]).balanceOf(address(this)) > 0) {\n                ERC20(orderAddresses[1]).transfer(\n                    msg.sender,\n                    ERC20(orderAddresses[1]).balanceOf(address(this))\n                );\n            }\n        }\n    }\n\n    \n    \n    \n    \n    \n    function takeOrder(\n        address[3] memory _addresses,\n        bytes memory _data,\n        uint256 _value,\n        uint256 _amount\n    ) private returns (bool, uint256, uint256) {\n        bool success;\n\n        \n        (success, ) = _addresses[0].call.value(_value)(_data);\n\n        uint256 tokensLeft = _amount;\n        uint256 tokensReturned = 0;\n        if (success) {\n            \n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\n                tokensLeft = address(this).balance;\n            } else {\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\n            }\n\n            \n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\n                TokenInterface(WETH_ADDRESS).withdraw(\n                    TokenInterface(WETH_ADDRESS).balanceOf(address(this))\n                );\n                tokensReturned = address(this).balance;\n            } else {\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\n            }\n        }\n\n        return (success, tokensReturned, tokensLeft);\n    }\n\n    \n    \n    \n    \n    \n    function getBestPrice(\n        uint256 _amount,\n        address _srcToken,\n        address _destToken,\n        uint256 _exchangeType\n    ) public returns (address, uint256) {\n        uint256 expectedRateKyber;\n        uint256 expectedRateUniswap;\n        uint256 expectedRateOasis;\n\n        if (_exchangeType == 1) {\n            return (OASIS_WRAPPER, getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount));\n        }\n\n        if (_exchangeType == 2) {\n            return (KYBER_WRAPPER, getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount));\n        }\n\n        if (_exchangeType == 3) {\n            expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\n            expectedRateUniswap = expectedRateUniswap * (10**(18 - getDecimals(_destToken)));\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\n        }\n\n        expectedRateKyber = getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount);\n        expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\n        expectedRateUniswap = expectedRateUniswap * (10**(18 - getDecimals(_destToken)));\n        expectedRateOasis = getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount);\n        expectedRateOasis = expectedRateOasis * (10**(18 - getDecimals(_destToken)));\n\n        if (\n            (expectedRateKyber >= expectedRateUniswap) && (expectedRateKyber >= expectedRateOasis)\n        ) {\n            return (KYBER_WRAPPER, expectedRateKyber);\n        }\n\n        if (\n            (expectedRateOasis >= expectedRateKyber) && (expectedRateOasis >= expectedRateUniswap)\n        ) {\n            return (OASIS_WRAPPER, expectedRateOasis);\n        }\n\n        if (\n            (expectedRateUniswap >= expectedRateKyber) && (expectedRateUniswap >= expectedRateOasis)\n        ) {\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\n        }\n    }\n\n    function getExpectedRate(\n        address _wrapper,\n        address _srcToken,\n        address _destToken,\n        uint256 _amount\n    ) public returns (uint256) {\n        bool success;\n        bytes memory result;\n\n        (success, result) = _wrapper.call(\n            abi.encodeWithSignature(\n                \"getExpectedRate(address,address,uint256)\",\n                _srcToken,\n                _destToken,\n                _amount\n            )\n        );\n\n        if (success) {\n            return sliceUint(result, 0);\n        } else {\n            return 0;\n        }\n    }\n\n    \n    \n    \n    function takeFee(uint256 _amount, address _token) internal returns (uint256 feeAmount) {\n        uint256 fee = SERVICE_FEE;\n\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(msg.sender)) {\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(msg.sender);\n        }\n\n        if (fee == 0) {\n            feeAmount = 0;\n        } else {\n            feeAmount = _amount / SERVICE_FEE;\n            if (_token == KYBER_ETH_ADDRESS) {\n                WALLET_ID.transfer(feeAmount);\n            } else {\n                ERC20(_token).transfer(WALLET_ID, feeAmount);\n            }\n        }\n    }\n\n    function getDecimals(address _token) internal view returns (uint256) {\n        \n        if (_token == address(0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A)) {\n            return 9;\n        }\n        \n        if (_token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\n            return 6;\n        }\n        \n        if (_token == address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) {\n            return 8;\n        }\n\n        return 18;\n    }\n\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n        require(bs.length >= start + 32, \"slicing out of range\");\n\n        uint256 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n\n    \n    function() external payable {}\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_exchangeType\",\"type\":\"uint256\"}],\"name\":\"getBestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wrapper\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_exchangeType\",\"type\":\"uint256\"},{\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"name\":\"_callData\",\"type\":\"bytes\"},{\"name\":\"_0xPrice\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"}]","ContractName":"SaverExchange","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}