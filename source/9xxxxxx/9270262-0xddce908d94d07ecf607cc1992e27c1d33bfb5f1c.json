{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface DTokenInterface {\r\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\r\n\r\n  function redeem(uint256 dTokenToBurn) external returns (uint256 underlyingReceived);\r\n\r\n  function redeemUnderlying(uint256 underelyingToReceive) external returns (uint256 dTokensBurned);\r\n\r\n  function pullSurplus() external returns (uint256 cTokenSurplus);\r\n\r\n  function accrueInterest() external;\r\n\r\n  function balanceOfUnderlying(address account) external returns (uint256 underlyingBalance);\r\n\r\n  function getSurplus() external returns (uint256 cDaiSurplus);\r\n\r\n  function exchangeRateCurrent() external returns (uint256 dTokenExchangeRate);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256 dTokenInterestRate);\r\n\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread);\r\n\r\n  function getVersion() external pure returns (uint256 version);\r\n}\r\n\r\n\r\ninterface CTokenInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256 err);\r\n\r\n  function redeem(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function balanceOf(address account) external returns (uint256 balance);\r\n\r\n  function balanceOfUnderlying(address account) external returns (uint256 balance);\r\n\r\n  function exchangeRateCurrent() external returns (uint256 exchangeRate);\r\n\r\n  function transfer(address recipient, uint256 value) external returns (bool);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256 rate);\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaUSDCPrototype0\r\n * @author 0age (dToken mechanics derived from Compound cTokens, ERC20 methods\r\n * derived from OpenZeppelin's ERC20 contract)\r\n * @notice Initial prototype for a cUSDC wrapper token. This version is not\r\n * upgradeable, and serves as an initial test of the eventual dUSDC mechanics.\r\n * The dUSDC exchange rate will grow at an approximate APR of 4% or at the cUSDC\r\n * exchange rate, whichever is greater.\r\n */\r\ncontract DharmaUSDCPrototype0 is ERC20Interface, DTokenInterface {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal constant _DHARMA_USDC_VERSION = 0;\r\n\r\n  // Note: this is a constant for the proof-of-concept but will be configurable.\r\n  // 4% APR interest assuming 15 second block time & 2,102,400 blocks per year\r\n  uint256 internal constant _RATE_PER_BLOCK = 1000000019025875275;\r\n\r\n  string internal constant _NAME = \"Dharma USD Coin (Prototype 0)\";\r\n  string internal constant _SYMBOL = \"dUSDC-p0\";\r\n  uint8 internal constant _DECIMALS = 8; // to match cUSDC\r\n\r\n  uint256 internal constant _SCALING_FACTOR = 1e18;\r\n  uint256 internal constant _HALF_OF_SCALING_FACTOR = 5e17;\r\n  uint256 internal constant _COMPOUND_SUCCESS = 0;\r\n\r\n  CTokenInterface internal constant _CUSDC = CTokenInterface(\r\n    0x39AA39c021dfbaE8faC545936693aC917d5E7563 // mainnet\r\n  );\r\n\r\n  ERC20Interface internal constant _USDC = ERC20Interface(\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 // mainnet\r\n  );\r\n\r\n  // Note: this is just an EOA for the initial prototype.\r\n  address internal constant _VAULT = 0x7e4A8391C728fEd9069B2962699AB416628B19Fa;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  // TODO: pack these more tightly in storage\r\n  uint256 private _blockLastUpdated;\r\n  uint256 private _dUSDCExchangeRate;\r\n  uint256 private _cUSDCExchangeRate;\r\n\r\n  constructor() public {\r\n    // Approve cUSDC to transfer USDC on behalf of this contract in order to mint.\r\n    require(_USDC.approve(address(_CUSDC), uint256(-1)));\r\n\r\n    _blockLastUpdated = block.number;\r\n    _dUSDCExchangeRate = 1e16; // 1 USDC == 1 dUSDC to start\r\n    _cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` USDC from `msg.sender` to this contract, use them\r\n   * to mint cUSDC, and mint dTokens with `msg.sender` as the beneficiary. Ensure\r\n   * that this contract has been approved to transfer the USDC on behalf of the\r\n   * caller.\r\n   * @param usdcToSupply uint256 The amount of usdc to provide as part of minting.\r\n   * @return The amount of dUSDC received in return for the supplied USDC.\r\n   */\r\n  function mint(\r\n    uint256 usdcToSupply\r\n  ) external accrues returns (uint256 dUSDCMinted) {\r\n    // Determine the dUSDC to mint using the exchange rate\r\n    dUSDCMinted = usdcToSupply.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    // Pull in USDC (requires that this contract has sufficient allowance)\r\n    require(\r\n      _USDC.transferFrom(msg.sender, address(this), usdcToSupply),\r\n      \"USDC transfer failed.\"\r\n    );\r\n\r\n    // Use the USDC to mint cUSDC (TODO: include error code in revert reason)\r\n    require(_CUSDC.mint(usdcToSupply) == _COMPOUND_SUCCESS, \"cUSDC mint failed.\");\r\n\r\n    // Mint dUSDC to the caller\r\n    _mint(msg.sender, usdcToSupply, dUSDCMinted);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem `dUSDCToBurn` dUSDC from `msg.sender`, use the corresponding\r\n   * cUSDC to redeem USDC, and transfer the USDC to `msg.sender`.\r\n   * @param dUSDCToBurn uint256 The amount of dUSDC to provide for USDC.\r\n   * @return The amount of usdc received in return for the provided cUSDC.\r\n   */\r\n  function redeem(\r\n    uint256 dUSDCToBurn\r\n  ) external accrues returns (uint256 usdcReceived) {\r\n    // Determine the underlying USDC value of the dUSDC to be burned\r\n    usdcReceived = dUSDCToBurn.mul(_dUSDCExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Burn the dUSDC\r\n    _burn(msg.sender, usdcReceived, dUSDCToBurn);\r\n\r\n    // Use the cUSDC to redeem USDC  (TODO: include error code in revert reason)\r\n    require(\r\n      _CUSDC.redeemUnderlying(usdcReceived) == _COMPOUND_SUCCESS,\r\n      \"cUSDC redeem failed.\"\r\n    );\r\n\r\n    // Send the USDC to the redeemer\r\n    require(_USDC.transfer(msg.sender, usdcReceived), \"USDC transfer failed.\");\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem the dUSDC equivalent value of USDC amount `usdcToReceive` from\r\n   * `msg.sender`, use the corresponding cUSDC to redeem USDC, and transfer the\r\n   * USDC to `msg.sender`.\r\n   * @param usdcToReceive uint256 The amount, denominated in USDC, of the cUSDC to\r\n   * provide for USDC.\r\n   * @return The amount of USDC received in return for the provided cUSDC.\r\n   */\r\n  function redeemUnderlying(\r\n    uint256 usdcToReceive\r\n  ) external accrues returns (uint256 dUSDCBurned) {\r\n    // Determine the dUSDC to redeem using the exchange rate\r\n    dUSDCBurned = usdcToReceive.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    // Burn the dUSDC\r\n    _burn(msg.sender, usdcToReceive, dUSDCBurned);\r\n\r\n    // Use the cUSDC to redeem USDC  (TODO: include error code in revert reason)\r\n    require(\r\n      _CUSDC.redeemUnderlying(usdcToReceive) == _COMPOUND_SUCCESS,\r\n      \"cUSDC redeem failed.\"\r\n    );\r\n\r\n    // Send the USDC to the redeemer\r\n    require(_USDC.transfer(msg.sender, usdcToReceive), \"USDC transfer failed.\");\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer cUSDC in excess of the total dUSDC balance to a dedicated\r\n   * \"vault\" account.\r\n   * @return The amount of cUSDC transferred to the vault account.\r\n   */\r\n  function pullSurplus() external accrues returns (uint256 cUSDCSurplus) {\r\n    // Determine the cUSDC surplus (difference between total dUSDC and total cUSDC)\r\n    cUSDCSurplus = _getSurplus();\r\n\r\n    // Send the cUSDC surplus to the vault\r\n    require(_CUSDC.transfer(_VAULT, cUSDCSurplus), \"cUSDC transfer failed.\");\r\n  }\r\n\r\n  /**\r\n   * @notice Manually advance the dUSDC exchange rate and update the cUSDC\r\n   * exchange rate to that of the current block.\r\n   */\r\n  function accrueInterest() external accrues {\r\n    // The `accrues()` modifier contains all function logic.\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `recipient`.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `value` tokens on behalf of\r\n   * `msg.sender`.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   * @return A boolean indicating whether the approval was successful.\r\n   */\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `sender` to `recipient` as long as\r\n   * `msg.sender` has sufficient allowance.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferFrom(\r\n    address sender, address recipient, uint256 amount\r\n  ) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    uint256 allowance = _allowances[sender][msg.sender];\r\n    if (allowance != uint256(-1)) {\r\n      _approve(sender, msg.sender, allowance.sub(amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Increase the current allowance of `spender` by `value` tokens.\r\n   * @param spender address The account to grant the additional allowance.\r\n   * @param addedValue uint256 The amount to increase the allowance by.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function increaseAllowance(\r\n    address spender, uint256 addedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Decrease the current allowance of `spender` by `value` tokens.\r\n   * @param spender address The account to decrease the allowance for.\r\n   * @param subtractedValue uint256 The amount to subtract from the allowance.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender, uint256 subtractedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the dUSDC balance of an account, denominated in\r\n   * its USDC equivalent value.\r\n   * @param account address The account to check the balance for.\r\n   * @return The total USDC-equivalent cUSDC balance.\r\n   */\r\n  function balanceOfUnderlying(\r\n    address account\r\n  ) external returns (uint256 usdcBalance) {\r\n    // Get most recent dUSDC exchange rate by determining accrued interest\r\n    (uint256 dUSDCExchangeRate,,) = _getAccruedInterest();\r\n\r\n    // Convert account balance to USDC equivalent using the exchange rate\r\n    usdcBalance = _balances[account].mul(dUSDCExchangeRate) / _SCALING_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total surplus, or cUSDC balance that\r\n   * exceeds the total dUSDC balance.\r\n   * @return The total surplus.\r\n   */\r\n  function getSurplus() external accrues returns (uint256 cUSDCSurplus) {\r\n    // Determine the cUSDC surplus (difference between total dUSDC and total cUSDC)\r\n    cUSDCSurplus = _getSurplus();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dUSDC exchange rate (multiplied by\r\n   * 10^18).\r\n   * @return The current exchange rate.\r\n   */\r\n  function exchangeRateCurrent() external returns (uint256 dUSDCExchangeRate) {\r\n    // Get most recent dUSDC exchange rate by determining accrued interest\r\n    (dUSDCExchangeRate,,) = _getAccruedInterest();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dUSDC interest earned per block\r\n   * (multiplied by 10^18).\r\n   * @return The current interest rate.\r\n   */\r\n  function supplyRatePerBlock() external view returns (uint256 dUSDCInterestRate) {\r\n    (dUSDCInterestRate,) = _getRatePerBlock();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current cUSDC interest spread over dUSDC per\r\n   * block (multiplied by 10^18).\r\n   * @return The current interest rate spread.\r\n   */\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread) {\r\n    (uint256 dUSDCInterestRate, uint256 cUSDCInterestRate) = _getRatePerBlock();\r\n    rateSpread = cUSDCInterestRate - dUSDCInterestRate;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dUSDC supply.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dUSDC balance of an account.\r\n   * @param account address The account to check the dUSDC balance for.\r\n   * @return The balance of the given account.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256 dUSDC) {\r\n    dUSDC = _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total allowance that `spender` has to\r\n   * transfer funds from the `owner` account using `transferFrom`.\r\n   * @param owner address The account that is granting the allowance.\r\n   * @param spender address The account that has been granted the allowance.\r\n   * @return The allowance of the given spender for the given owner.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the name of the token.\r\n   * @return The name of the token.\r\n   */\r\n  function name() external pure returns (string memory) {\r\n    return _NAME;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the symbol of the token.\r\n   * @return The symbol of the token.\r\n   */\r\n  function symbol() external pure returns (string memory) {\r\n    return _SYMBOL;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the number of decimals of the token.\r\n   * @return The number of decimals of the token.\r\n   */\r\n  function decimals() external pure returns (uint8) {\r\n    return _DECIMALS;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function for getting the current Dharma USDC version.\r\n   * @return The current Dharma USDC version.\r\n   */\r\n  function getVersion() external pure returns (uint256 version) {\r\n    version = _DHARMA_USDC_VERSION;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to mint `amount` tokens by exchanging `exchanged`\r\n   * tokens to `account` and emit corresponding `Mint` & `Transfer` events.\r\n   * @param account address The account to mint tokens to.\r\n   * @param exchanged uint256 The amount of underlying tokens used to mint.\r\n   * @param amount uint256 The amount of tokens to mint.\r\n   */\r\n  function _mint(address account, uint256 exchanged, uint256 amount) internal {\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n\r\n    emit Mint(account, exchanged, amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to burn `amount` tokens by exchanging `exchanged`\r\n   * tokens from `account` and emit corresponding `Redeeem` & `Transfer` events.\r\n   * @param account address The account to burn tokens from.\r\n   * @param exchanged uint256 The amount of underlying tokens given for burning.\r\n   * @param amount uint256 The amount of tokens to burn.\r\n   */\r\n  function _burn(address account, uint256 exchanged, uint256 amount) internal {\r\n    uint256 balancePriorToBurn = _balances[account];\r\n    require(\r\n      balancePriorToBurn >= amount, \"Supplied amount exceeds account balance.\"\r\n    );\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = balancePriorToBurn - amount; // overflow checked above\r\n\r\n    emit Transfer(account, address(0), amount);\r\n    emit Redeem(account, exchanged, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to move `amount` tokens from `sender` to\r\n   * `recipient` and emit a corresponding `Transfer` event.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set the allowance for `spender` to transfer up\r\n   * to `value` tokens on behalf of `owner`.\r\n   * @param owner address The account that has granted the allowance.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal, view-esque function to get the latest dUSDC and cUSDC\r\n   * exchange rates for USDC and update the record of each in the event that they\r\n   * have not already been updated in the given block.\r\n   * @return The dUSDC and cUSDC exchange rate, as well as a boolean indicating if\r\n   * interest accrual has been processed already or needs to be calculated and\r\n   * placed in storage.\r\n   */\r\n  function _getAccruedInterest() internal /* view */ returns (\r\n    uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued\r\n  ) {\r\n    // Get the number of blocks since the last time interest was accrued\r\n    uint256 blocksToAccrueInterest = block.number - _blockLastUpdated;\r\n    fullyAccrued = (blocksToAccrueInterest == 0);\r\n\r\n    // Skip calculation and read from storage if interest was accrued this block\r\n    if (fullyAccrued) {\r\n      dUSDCExchangeRate = _dUSDCExchangeRate;\r\n      cUSDCExchangeRate = _cUSDCExchangeRate;\r\n    } else {\r\n      // Calculate the accrued interest over the period\r\n      uint256 defaultInterest = _pow(_RATE_PER_BLOCK, blocksToAccrueInterest);\r\n\r\n      // Retrieve the latest exchange rate for cUSDC\r\n      cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();\r\n\r\n      // Calculate the accrued interest for Compound over the period\r\n      uint256 cUSDCInterest = (\r\n        cUSDCExchangeRate.mul(_SCALING_FACTOR).div(_cUSDCExchangeRate)\r\n      );\r\n\r\n      // Take the lesser of the two and use it to adjust the dUSDC exchange rate\r\n      dUSDCExchangeRate = _dUSDCExchangeRate.mul(\r\n        defaultInterest > cUSDCInterest ? cUSDCInterest : defaultInterest\r\n      ) / _SCALING_FACTOR;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal, view-esque function to get the total surplus, or cUSDC\r\n   * balance that exceeds the total dUSDC balance.\r\n   * @return The total surplus.\r\n   */\r\n  function _getSurplus() internal /* view */ returns (uint256 cUSDCSurplus) {\r\n    // Determine the total value of all issued dUSDC in USDC, rounded up\r\n    uint256 dUSDCUnderlying = (\r\n      _totalSupply.mul(_dUSDCExchangeRate) / _SCALING_FACTOR\r\n    ).add(1);\r\n\r\n    // Compare to total underlying USDC value of all cUSDC held by this contract\r\n    uint256 usdcSurplus = (\r\n      _CUSDC.balanceOfUnderlying(address(this)).sub(dUSDCUnderlying)\r\n    );\r\n\r\n    // Determine the cUSDC equivalent of this surplus amount\r\n    cUSDCSurplus = usdcSurplus.mul(_SCALING_FACTOR).div(_cUSDCExchangeRate);\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dUSDC and cUSDC interest supply rate\r\n   * per block (multiplied by 10^18).\r\n   * @return The current dUSDC and cUSDC interest rates.\r\n   */\r\n  function _getRatePerBlock() internal view returns (\r\n    uint256 dUSDCSupplyRate, uint256 cUSDCSupplyRate\r\n  ) {\r\n    uint256 defaultSupplyRate = _RATE_PER_BLOCK.sub(_SCALING_FACTOR);\r\n    cUSDCSupplyRate = _CUSDC.supplyRatePerBlock(); // NOTE: accrue on Compound first?\r\n    dUSDCSupplyRate = (\r\n      defaultSupplyRate < cUSDCSupplyRate ? defaultSupplyRate : cUSDCSupplyRate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to take `floatIn` (i.e. the value * 10^18) and\r\n   * raise it to the power of `power` using \"exponentiation by squaring\" (see\r\n   * Maker's DSMath implementation).\r\n   * @param floatIn uint256 The value.\r\n   * @param power address The power to raise the value by.\r\n   * @return The specified value raised to the specified power.\r\n   */\r\n  function _pow(uint256 floatIn, uint256 power) internal pure returns (uint256 floatOut) {\r\n    floatOut = power % 2 != 0 ? floatIn : _SCALING_FACTOR;\r\n\r\n    for (power /= 2; power != 0; power /= 2) {\r\n      floatIn = (floatIn.mul(floatIn)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n\r\n      if (power % 2 != 0) {\r\n        floatOut = (floatIn.mul(floatOut)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to determine the latest dUSDC and cUSDC exchange rates, and\r\n   * to update the respective storage values if they have not already been\r\n   * updated at some point in the current block, before proceeding to execution\r\n   * of the rest of the decorated function.\r\n   */\r\n  modifier accrues() {\r\n    (\r\n      uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued\r\n    ) = _getAccruedInterest();\r\n\r\n    if (!fullyAccrued) {\r\n      // Update storage with dUSDC + cUSDC exchange rates as of the current block\r\n      _blockLastUpdated = block.number;\r\n      _dUSDCExchangeRate = dUSDCExchangeRate;\r\n      _cUSDCExchangeRate = cUSDCExchangeRate;\r\n    }\r\n\r\n    _;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cUSDCSurplus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cUSDCSurplus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpreadPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateSpread\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDC\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcToReceive\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCBurned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcToSupply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCMinted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCInterestRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCExchangeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dUSDCToBurn\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"DharmaUSDCPrototype0","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://7359847f22a54b7d46cf796bf2b615b0bf8e8444dedc74c054db867b034d7056"}]}