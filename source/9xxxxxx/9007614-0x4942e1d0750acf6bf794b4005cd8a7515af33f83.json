{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    PAX Token Reserve (PAXTR)\r\n    ERC20 Token for the People\r\n    https://paxco.in/\r\n    -\r\n    Developed by James Galbraith, https://Decentralised.Tech/\r\n*/\r\n\r\npragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, 'Address not contract owner');\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, 'Address not contract owner');\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PAXTR is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public payable {\r\n        endOfMonth = 1575158400;\r\n        owner = 0x08d19746Ee0c0833FC5EAF98181eB91DAEEb9abB;\r\n        baseBalance[owner] = 2500000000;\r\n        emit Transfer(address(0), owner, 10000000000);\r\n    }\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Unlock(address indexed owner, uint256 value);\r\n    event Lock(address indexed owner, uint256 value);\r\n\r\n\r\n    // Main Variables\r\n    uint256 public constant decimals = 8;\r\n    string public constant name = \"PAX Treasure Reserve\";\r\n    string public constant symbol = \"PAXTR\";\r\n\r\n    string public acknowledgementOfUse = \"http://paxco.in/PAXTR-acknowledgment-of-the-human-rights.pdf\";\r\n    bytes32 public acknowledgementOfUseHash = 0xbec69211ae828f3e8e4f566b1fcbee4fe0d2b7fdebbaad76fdfbb3850b1a0a46;\r\n\r\n    address public minterAddress;\r\n    address public worldTreasuryAddress;\r\n\r\n    uint256 public createdTreasure = 0;\r\n    uint256 public maximumBaseSupply = 0;\r\n    uint256 public treasureAge = 948;\r\n\r\n    uint256 public endOfMonth;\r\n    uint256 public monthCount;\r\n\r\n    bool public transfersPaused;\r\n\r\n    function pauseTransfers(bool state) public onlyOwner {\r\n        transfersPaused = state;\r\n    }\r\n\r\n    // Demurrage base\r\n    uint256 public demurrageBaseMultiplier = 1000000000000000000;\r\n\r\n    // Balance Mapping\r\n    mapping(address => uint256) public baseBalance;\r\n    mapping(address => mapping(address => uint256)) public allowanceMapping;\r\n\r\n    struct Treasure {\r\n        uint256 monthlyClaim;\r\n        uint256 endMonth;\r\n        uint256 totalClaimed;\r\n        mapping(uint256 => uint256) claimedInMonth;\r\n    }\r\n    mapping(address => Treasure) public treasure;\r\n    function claimedInMonth(address account) public view returns (uint256) {\r\n        return treasure[account].claimedInMonth[monthCount];\r\n    }\r\n\r\n    mapping(address => uint256) public totalReferrals;\r\n    mapping(address => mapping(uint256 => uint256)) public monthlyReferrals;\r\n\r\n    // Instant Unlock Quota\r\n    uint256 public monthReferralQuota = 1;\r\n    uint256 public permanentReferralQuota = 5;\r\n\r\n    // Treasure\r\n    function issueTreasure(address account, address referral) public {\r\n        require(msg.sender == minterAddress, 'Only the minterAddress may call this function');\r\n        require(treasure[account].endMonth == 0, 'Account has already been issued their Lifetime Treasure');\r\n\r\n        if (referral != address(0)) {\r\n            totalReferrals[referral] = totalReferrals[referral].add(1);\r\n            monthlyReferrals[referral][monthCount] = monthlyReferrals[referral][monthCount].add(1);\r\n        }\r\n\r\n        uint256 _baseBalance = (uint256(50000000).mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n        uint256 _newWorldBalance = (uint256(45500000000).mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n        maximumBaseSupply = maximumBaseSupply.add(_baseBalance);\r\n        baseBalance[account] = baseBalance[account].add(_baseBalance);\r\n        emit Transfer(address(0), account, 50000000);\r\n        baseBalance[worldTreasuryAddress] = baseBalance[worldTreasuryAddress].add(_newWorldBalance);\r\n        emit Transfer(address(0), worldTreasuryAddress, 45500000000);\r\n        createdTreasure = createdTreasure.add(1);\r\n        treasure[account].endMonth = monthCount.add(treasureAge);\r\n        treasure[account].monthlyClaim = uint256(500000000000).div(treasureAge);\r\n        claim(account, 50000000);\r\n    }\r\n\r\n    function treasureWithdraw(address account, address to, uint256 amount) public onlyOwner {\r\n        require(treasure[account].endMonth > monthCount.add(1), \"Treasure is not active anymore\");\r\n        uint256 maximumClaim = treasure[account].monthlyClaim.mul(treasure[account].endMonth.sub(monthCount.add(1)));\r\n        require(amount <= maximumClaim, \"Not enough PAXTR to withdraw!\");\r\n        treasure[account].monthlyClaim = (maximumClaim.sub(amount)).div(treasure[account].endMonth.sub(monthCount.add(1)));\r\n        uint256 baseAmount = (amount.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n        maximumBaseSupply = maximumBaseSupply.add(baseAmount);\r\n        baseBalance[to] = baseBalance[to].add(baseAmount);\r\n        emit Unlock(account, amount);\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function treasureDeposit(address account, address from, uint256 amount) public onlyOwner {\r\n        require(balanceOf(from) >= amount, 'From does not have sufficent balance');\r\n        require(treasure[account].endMonth > monthCount.add(1), \"Treasure is not active anymore\");\r\n        uint256 maximumClaim = treasure[account].monthlyClaim.mul(treasure[account].endMonth.sub(monthCount.add(1)));\r\n        treasure[account].monthlyClaim = (maximumClaim.add(amount)).div(treasure[account].endMonth.sub(monthCount.add(1)));\r\n        uint256 baseAmount = (amount.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n        baseBalance[from] = baseBalance[from].sub(baseAmount);\r\n        maximumBaseSupply = maximumBaseSupply.sub(baseAmount);\r\n        emit Lock(account, amount);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function claim(address account, uint256 amount) private returns (bool) {\r\n        if (treasure[account].endMonth < monthCount || treasure[account].claimedInMonth[monthCount] == treasure[account].monthlyClaim) {\r\n            return false;\r\n        } else {\r\n            if (amount >= treasure[account].monthlyClaim.sub(treasure[account].claimedInMonth[monthCount]) || totalReferrals[account] >= permanentReferralQuota || monthlyReferrals[account][monthCount] >= monthReferralQuota) {\r\n                uint256 _amount = treasure[account].monthlyClaim.sub(treasure[account].claimedInMonth[monthCount]);\r\n                treasure[account].claimedInMonth[monthCount] = treasure[account].monthlyClaim;\r\n                uint256 baseAmount = (_amount.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n                baseBalance[account] = baseBalance[account].add(baseAmount);\r\n                maximumBaseSupply = maximumBaseSupply.add(baseAmount);\r\n                treasure[account].totalClaimed = treasure[account].totalClaimed.add(_amount);\r\n                emit Transfer(address(0), account, _amount);\r\n                emit Unlock(account, _amount);\r\n                return true;\r\n            } else {\r\n                treasure[account].claimedInMonth[monthCount] = treasure[account].claimedInMonth[monthCount].add(amount);\r\n                uint256 baseAmount = (amount.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n                baseBalance[account] = baseBalance[account].add(baseAmount);\r\n                maximumBaseSupply = maximumBaseSupply.add(baseAmount);\r\n                treasure[account].totalClaimed = treasure[account].totalClaimed.add(amount);\r\n                emit Transfer(address(0), account, amount);\r\n                emit Unlock(account, amount);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Users can unlock treasure if they have required refferals without making a transfer\r\n    function selfClaim() public {\r\n        claim(msg.sender, 0);\r\n    }\r\n\r\n    // Migrate Accounts from Old Contract\r\n    mapping(address => bool) public hasMigrated;\r\n    function migrateAccount(address account, uint256 _balance, uint256 _totalRefferals, uint256 _monthsRefferals, bool _hasTreasure, uint256 _treasureBalance) public onlyOwner {\r\n        require(treasure[account].endMonth == 0, 'New treasure already exists for this wallet');\r\n        require(hasMigrated[account] == false, 'This wallet has already been migrated');\r\n        hasMigrated[account] = true;\r\n        if (_balance != 0) {\r\n            uint256 _baseBalance = (_balance.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n            baseBalance[account] = baseBalance[account].add(_baseBalance);\r\n            emit Transfer(address(0), account, _balance);\r\n        }\r\n        totalReferrals[account] = totalReferrals[account].add(_totalRefferals);\r\n        monthlyReferrals[account][monthCount] = monthlyReferrals[account][monthCount].add(_monthsRefferals);\r\n        if (_hasTreasure == true) {\r\n            treasure[account].monthlyClaim = _treasureBalance.div(treasureAge);\r\n            treasure[account].endMonth = monthCount.add(treasureAge);\r\n            treasure[account].totalClaimed = uint256(500000000000).sub(_treasureBalance);\r\n            createdTreasure = createdTreasure.add(1);\r\n        }\r\n    }\r\n\r\n    // New Month\r\n    function newMonth() public {\r\n        if (now >= endOfMonth) {\r\n            endOfMonth = endOfMonth.add(2635200);\r\n            monthCount = monthCount.add(1);\r\n            uint256 bigInt = 1000000000000000000;\r\n            demurrageBaseMultiplier = (demurrageBaseMultiplier.mul(bigInt))/(bigInt+(((treasureAge.mul(bigInt))/12)/55555));\r\n        }\r\n    }\r\n\r\n    // ERC20 Standard Functions\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return (maximumBaseSupply.mul(demurrageBaseMultiplier)).div(1000000000000000000);\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return (baseBalance[account].mul(demurrageBaseMultiplier)).div(1000000000000000000);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(transfersPaused == false, 'Transfers have been paused');\r\n        require(balanceOf(msg.sender) >= amount, 'Sender does not have enough balance');\r\n        uint256 baseAmount = (amount.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n        baseBalance[msg.sender] = baseBalance[msg.sender].sub(baseAmount);\r\n        baseBalance[recipient] = baseBalance[recipient].add(baseAmount);\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        newMonth();\r\n        claim(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowanceMapping[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowanceMapping[msg.sender][spender] = amount;\r\n        newMonth();\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(transfersPaused == false, 'Transfers have been paused');\r\n        require(allowanceMapping[sender][recipient] >= amount, 'Sender has not authorised this transaction');\r\n        require(balanceOf(sender) >= amount, 'Sender does not have enough balance');\r\n        uint256 baseAmount = (amount.mul(1000000000000000000)).div(demurrageBaseMultiplier);\r\n        baseBalance[sender] = baseBalance[sender].sub(baseAmount);\r\n        baseBalance[recipient] = baseBalance[recipient].add(baseAmount);\r\n        allowanceMapping[sender][recipient] = allowanceMapping[sender][recipient].sub(baseAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n        newMonth();\r\n        claim(sender, amount);\r\n        return true;\r\n    }\r\n\r\n    // DAO Change Functions\r\n\r\n    function setAcknowledgementOfUse(string memory _location, bytes32 _hash) public onlyOwner {\r\n        bytes memory emptyStringTest = bytes(_location);\r\n        require(emptyStringTest.length != 0 && _hash != bytes32(0), 'Not enough data supplied');\r\n        acknowledgementOfUse = _location;\r\n        acknowledgementOfUseHash = _hash;\r\n    }\r\n\r\n    function setMinterAddress(address _minterAddress) public onlyOwner {\r\n        minterAddress = _minterAddress;\r\n    }\r\n\r\n    function setWorldTreasuryAddress(address _worldTreasuryAddress) public onlyOwner {\r\n        worldTreasuryAddress = _worldTreasuryAddress;\r\n    }\r\n\r\n    function setTreasureAge(uint256 _treasureAge) public onlyOwner {\r\n        treasureAge = _treasureAge;\r\n    }\r\n\r\n    function adjustEndOfMonth(uint256 _endOfMonth) public onlyOwner {\r\n        require(_endOfMonth > block.timestamp, 'Specifed time is in the past');\r\n        endOfMonth = _endOfMonth;\r\n    }\r\n\r\n    function setRefferalQuote(uint256 _total, uint256 _month) public onlyOwner {\r\n        monthReferralQuota = _month;\r\n        permanentReferralQuota = _total;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"permanentReferralQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"treasureWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"demurrageBaseMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"treasureDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasureAge\",\"type\":\"uint256\"}],\"name\":\"setTreasureAge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setAcknowledgementOfUse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setWorldTreasuryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowanceMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthReferralQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"treasure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"monthlyClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumBaseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acknowledgementOfUseHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdTreasure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newMonth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefferals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_monthsRefferals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasTreasure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_treasureBalance\",\"type\":\"uint256\"}],\"name\":\"migrateAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endOfMonth\",\"type\":\"uint256\"}],\"name\":\"adjustEndOfMonth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthlyReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acknowledgementOfUse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"worldTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"setMinterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedInMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"setRefferalQuote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"issueTreasure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"pauseTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasureAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"}]","ContractName":"PAXTR","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://f59edae68ed3b255e640797dd10a84d83e9a262ff046ad194b6d145c8eff4900"}]}