{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract TransferableToken{\r\n    function balanceOf(address _owner) public returns (uint256 balance) ;\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) ;\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) ;\r\n}\r\n\r\n\r\ncontract TokenClaimer{\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n  function _claimStdTokens(address _token, address payable to) internal {\r\n        if (_token == address(0x0)) {\r\n            to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        TransferableToken token = TransferableToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n\r\n        (bool status,) = _token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", to, balance));\r\n        require(status, \"call failed\");\r\n        emit ClaimedTokens(_token, to, balance);\r\n  }\r\n}\r\n\r\ncontract TokenInterface is TransferableToken{\r\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n    function generateTokens(address _owner, uint _amount) public returns (bool);\r\n}\r\n\r\ncontract OneTimeMint{\r\n  TokenInterface public token_contract;\r\n  address public target_addr;\r\n  uint public amount;\r\n  bool public is_minted;\r\n\r\n  constructor(address _token, address _target, uint _amount) public{\r\n    token_contract = TokenInterface(_token);\r\n    target_addr = _target;\r\n    amount = _amount;\r\n    is_minted = false;\r\n  }\r\n\r\n  function mint() public{\r\n    require(is_minted == false, \"already minted\");\r\n    token_contract.generateTokens(target_addr, amount);\r\n    is_minted = true;\r\n  }\r\n}\r\n\r\ncontract OneTimeMintFactory{\r\n  event NewOneTimeMint(address addr);\r\n\r\n  function createOneTimeMint(address _token, address _target, uint _amount)public returns(address){\r\n    OneTimeMint otm = new OneTimeMint(_token, _target, _amount);\r\n    emit NewOneTimeMint(address(otm));\r\n    return address(otm);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createOneTimeMint\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"NewOneTimeMint\",\"type\":\"event\"}]","ContractName":"OneTimeMintFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://25917f8eec1a8a317bd78e40c54883fc1a871ecc71391e1caec35c3bd74696bd"}]}