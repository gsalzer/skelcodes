{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"CrowdliToken.sol\":{\"content\":\"pragma solidity 0.5.17;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC1404.sol\\\";\\r\\n\\r\\ncontract CrowdliToken is IERC20, IERC1404, Ownable {\\r\\n    /**\\r\\n     * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n     * in bugs, because programmers usually assume that an overflow raises an\\r\\n     * error, which is the standard behavior in high level programming languages.\\r\\n     * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n     * operation overflows.\\r\\n     *\\r\\n     * Using this library instead of the unchecked operations eliminates an entire\\r\\n     * class of bugs, so it\\u0027s recommended to use it always.\\r\\n     */\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * Library for managing addresses assigned to a Role.\\r\\n     */\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role _transferblock;\\r\\n    Roles.Role _kyc;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e uint256) private _allocated;\\r\\n    mapping (uint8 =\\u003e string) private _restrictionCodes;\\r\\n    mapping (uint8 =\\u003e string) private _burnCodes;\\r\\n    mapping (uint8 =\\u003e string) private _mintCodes;\\r\\n    mapping (uint8 =\\u003e string) private _blockCodes;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping (address =\\u003e mapping (bytes32 =\\u003e uint256)) private _propertyAmountLocks;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name = \\\"CROWDLITOKEN\\\";\\r\\n    string private _symbol = \\\"CRT\\\";\\r\\n    uint8 private _decimals = 5;\\r\\n\\r\\n    uint8 private constant CODE_TYPE_RESTRICTION = 1;\\r\\n    uint8 private constant CODE_TYPE_BURN = 2;\\r\\n    uint8 private constant CODE_TYPE_MINT = 3;\\r\\n    uint8 private constant CODE_TYPE_BLOCK = 4;\\r\\n\\r\\n    uint8 private constant NO_RESTRICTIONS = 0;\\r\\n    uint8 private constant FROM_NOT_IN_KYC_ROLE = 1;\\r\\n    uint8 private constant TO_NOT_IN_KYC_ROLE = 2;\\r\\n    uint8 private constant FROM_IN_TRANSFERBLOCK_ROLE = 3;\\r\\n    uint8 private constant TO_IN_TRANSFERBLOCK_ROLE = 4;\\r\\n    uint8 private constant NOT_ENOUGH_FUNDS = 5;\\r\\n    uint8 private constant NOT_ENOUGH_UNALLOCATED_FUNDS = 6;\\r\\n\\r\\n    constructor() public {\\r\\n        _restrictionCodes[0] = \\\"NO_RESTRICTIONS\\\";\\r\\n        _restrictionCodes[1] = \\\"FROM_NOT_IN_KYC_ROLE\\\";\\r\\n        _restrictionCodes[2] = \\\"TO_NOT_IN_KYC_ROLE\\\";\\r\\n        _restrictionCodes[3] = \\\"FROM_IN_TRANSFERBLOCK_ROLE\\\";\\r\\n        _restrictionCodes[4] = \\\"TO_IN_TRANSFERBLOCK_ROLE\\\";\\r\\n        _restrictionCodes[5] = \\\"NOT_ENOUGH_FUNDS\\\";\\r\\n        _restrictionCodes[6] = \\\"NOT_ENOUGH_UNALLOCATED_FUNDS\\\";\\r\\n\\r\\n        _mintCodes[0] = \\\"CRT_SALE\\\";\\r\\n        _mintCodes[1] = \\\"ANNUAL_ISSUANCE_FEE\\\";\\r\\n        _mintCodes[2] = \\\"QUARTERLY_ISSUANCE_FEE\\\";\\r\\n        _mintCodes[3] = \\\"REPLACE_TOKENS\\\";\\r\\n        _mintCodes[4] = \\\"OTHER\\\";\\r\\n\\r\\n        _burnCodes[0] = \\\"KYC_ISSUE\\\";\\r\\n        _burnCodes[1] = \\\"REFUND_EXIT\\\";\\r\\n        _burnCodes[2] = \\\"REPLACE_TOKENS\\\";\\r\\n        _burnCodes[3] = \\\"OTHER\\\";\\r\\n\\r\\n        _blockCodes[0] = \\\"KYC_ISSUE\\\";\\r\\n        _blockCodes[1] = \\\"KYT_ISSUE\\\";\\r\\n        _blockCodes[2] = \\\"LOST_TOKENS\\\";\\r\\n        _blockCodes[3] = \\\"MAINTENANCE\\\";\\r\\n        _blockCodes[4] = \\\"OTHER\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the name of the token\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the symbol of the token\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of decimals the token uses\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(detectTransferRestriction(sender,recipient,amount) == NO_RESTRICTIONS, \\\"CROWDLITOKEN: Transferrestriction detected please call detectTransferRestriction(address from, address to, uint256 value) for detailed information\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal onlyOwner {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        require(_kyc.has(account), \\\"CROWDLITOKEN: address is not in kyc list\\\");\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal onlyOwner {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Destroys `amount` tokens from `account`.\\r\\n     *\\r\\n     * See {_burn}.\\r\\n     */\\r\\n    function burn(address account, uint256 amount, uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_BURN), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        require(allocatedTokens(account) == 0, \\\"CROWDLITOKEN: There are token allocations, its not allowed to burn tokens if there are token allocations\\\");\\r\\n        _burn(account, amount);\\r\\n        emit Burn(account, amount, code);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Mint} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function mintTo(address account, uint256 amount, uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_MINT), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        _mint(account, amount);\\r\\n        emit Mint(account, amount, code);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns a human-readable message for a given restrictioncode\\r\\n     */\\r\\n    function messageForTransferRestriction(uint8 restrictionCode) external view returns (string memory){\\r\\n        require(codeExist(restrictionCode,CODE_TYPE_RESTRICTION), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        return _restrictionCodes[restrictionCode];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns a human-readable message for a given burncode\\r\\n     */\\r\\n    function messageForBurnCode(uint8 burnCode) external view returns (string memory){\\r\\n        require(codeExist(burnCode,CODE_TYPE_BURN), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        return _burnCodes[burnCode];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns a human-readable message for a given mintcode\\r\\n     */\\r\\n    function messageForMintCode(uint8 mintCode) external view returns (string memory){\\r\\n        require(codeExist(mintCode,CODE_TYPE_MINT), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        return _mintCodes[mintCode];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns a human-readable message for a given blockcode\\r\\n     */\\r\\n    function messageForBlockCode(uint8 blockCode) external view returns (string memory){\\r\\n        require(codeExist(blockCode,CODE_TYPE_BLOCK), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        return _blockCodes[blockCode];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Detects if a transfer will be reverted and if so returns an appropriate reference code\\r\\n     */\\r\\n    function detectTransferRestriction(address from, address to, uint256 value) public view returns (uint8){\\r\\n        if(!_kyc.has(from)){\\r\\n            return FROM_NOT_IN_KYC_ROLE;\\r\\n        } else if(!_kyc.has(to)){\\r\\n            return TO_NOT_IN_KYC_ROLE;\\r\\n        } else if(_transferblock.has(from)){\\r\\n            return FROM_IN_TRANSFERBLOCK_ROLE;\\r\\n        } else if(_transferblock.has(to)){\\r\\n            return TO_IN_TRANSFERBLOCK_ROLE;\\r\\n        } else if(_balances[from] \\u003c value){\\r\\n            return NOT_ENOUGH_FUNDS;\\r\\n        } else if(_balances[from].sub(_allocated[from]) \\u003c value){\\r\\n            return NOT_ENOUGH_UNALLOCATED_FUNDS;\\r\\n        } else {\\r\\n            return NO_RESTRICTIONS;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Mark a List of `address` with the kyc Role\\r\\n     */\\r\\n    function addUserListToKycRole(address[] calldata whitelistedAddresses) external onlyOwner {\\r\\n        for(uint i=0; i\\u003c whitelistedAddresses.length; i++){\\r\\n            _kyc.add(whitelistedAddresses[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove the Role kyc from an `address`\\r\\n     */\\r\\n    function removeUserFromKycRole(address whitelistedAddress) external onlyOwner {\\r\\n        require(_balances[whitelistedAddress] == 0, \\\"CROWDLITOKEN: To remove someone from the whitelist the balance have to be 0\\\");\\r\\n        _kyc.remove(whitelistedAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Add the Role `transferblock` to an `address`\\r\\n     */\\r\\n    function addTransferBlock(address blockedAddress, uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_BLOCK), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        _transferblock.add(blockedAddress);\\r\\n        emit Block(blockedAddress, code);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove the Role `transferblock` from an `address`\\r\\n     */\\r\\n    function removeTransferblock(address unblockAddress, uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_BLOCK), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        _transferblock.remove(unblockAddress);\\r\\n        emit Unblock(unblockAddress, code);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get the total amount of allocated tokens for a specific `owner`\\r\\n     */\\r\\n    function allocatedTokens(address owner) public view returns (uint256){\\r\\n\\t    return _allocated[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get the amount of allocated tokens for a specific `owner` for a specific `property`\\r\\n     */\\r\\n    function propertyLock(address owner, bytes32 propertyAddress) public view returns (uint256) {\\r\\n        return _propertyAmountLocks[owner][propertyAddress];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Add a new `restrictionCode` with a related `codeText` to the available `_restrictionCodes`\\r\\n     */\\r\\n    function setRestrictionCode(uint8 code, string calldata codeText) external onlyOwner {\\r\\n        require(!codeExist(code,CODE_TYPE_RESTRICTION), \\\"CROWDLITOKEN: The code already exists\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        _restrictionCodes[code] = codeText;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Add a new `burncode` with a related `codeText` to the available `_burnCodes`\\r\\n     */\\r\\n    function setBurnCode(uint8 code, string calldata codeText) external onlyOwner {\\r\\n        require(!codeExist(code,CODE_TYPE_BURN), \\\"CROWDLITOKEN: The code already exists\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        _burnCodes[code] = codeText;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Add a new `mintcode` with a related `codeText` to the available `_mintCodes`\\r\\n     */\\r\\n    function setMintCode(uint8 code, string calldata codeText) external onlyOwner {\\r\\n        require(!codeExist(code,CODE_TYPE_MINT), \\\"CROWDLITOKEN: The code already exists\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        _mintCodes[code] = codeText;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Add a new `blockcode` with a related `codeText` to the available `_blockCodes`\\r\\n     */\\r\\n    function setBlockCode(uint8 code, string calldata codeText) external onlyOwner {\\r\\n        require(!codeExist(code,CODE_TYPE_BLOCK), \\\"CROWDLITOKEN: The code already exists\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        _blockCodes[code] = codeText;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove a `restrictioncode` from the available `_restrictionCodes`\\r\\n     */\\r\\n    function removeRestrictionCode(uint8 restrictionCode) external onlyOwner {\\r\\n        require(codeExist(restrictionCode,CODE_TYPE_RESTRICTION), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        require(restrictionCode \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        delete _restrictionCodes[restrictionCode];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove a `burncode` from the available `_burnCodes`\\r\\n     */\\r\\n    function removeBurnCode(uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_BURN), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        delete _burnCodes[code];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove a `mintcode` from the available `_mintCodes`\\r\\n     */\\r\\n    function removeMintCode(uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_MINT), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        delete _mintCodes[code];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Remove a `blockcode` from the available `_blockCodes`\\r\\n     */\\r\\n    function removeBlockCode(uint8 code) external onlyOwner {\\r\\n        require(codeExist(code,CODE_TYPE_BLOCK), \\\"CROWDLITOKEN: The code does not exist\\\");\\r\\n        require(code \\u003e 100, \\\"ERC1404: Codes till 100 are reserverd for the SmartContract internals\\\");\\r\\n        delete _blockCodes[code];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allocate a specific `amount` of tokens for a specific `property` for a specific `owner` address\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` needs enough unallocated funds\\r\\n     */\\r\\n    function allocateAmountFromAddressForProperty(address owner, bytes32 propertyAddress, uint256 amount) external onlyOwner {\\r\\n        require(_balances[owner] - allocatedTokens(owner) \\u003e= amount, \\\"CrowdliToken: Not enough unallocated tokens to allocate the requested amount\\\");\\r\\n        _allocated[owner] = _allocated[owner].add(amount);\\r\\n\\t    _propertyAmountLocks[owner][propertyAddress] = _propertyAmountLocks[owner][propertyAddress].add(amount);\\r\\n        emit Allocate(owner, propertyAddress, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unallocate a specific `amount` of tokens for a specific `property` for a specific `owner` address\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` needs enough unallocated funds\\r\\n     */\\r\\n    function unallocatePropertyFromAddress(address owner, bytes32 propertyAddress, uint256 amount) external onlyOwner {\\r\\n        require(propertyLock(owner,propertyAddress) \\u003e 0, \\\"CROWDLITOKEN: The property has no allocated tokens for that address\\\");\\r\\n        require(amount \\u003c= propertyLock(owner,propertyAddress), \\\"CROWDLITOKEN: There are not enough allocated tokens to unallocate the requested amount\\\");\\r\\n        _allocated[owner] = _allocated[owner].sub(amount);\\r\\n        _propertyAmountLocks[owner][propertyAddress] = _propertyAmountLocks[owner][propertyAddress].sub(amount);\\r\\n        emit Unallocate(owner, propertyAddress, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Check if the given Code exists\\r\\n     */\\r\\n    function codeExist(uint8 code,uint8 codeType) internal view returns (bool){\\r\\n        bytes memory memString;\\r\\n        if(codeType == CODE_TYPE_RESTRICTION){\\r\\n            memString = bytes(_restrictionCodes[code]);\\r\\n        } else if(codeType == CODE_TYPE_BURN){\\r\\n            memString = bytes(_burnCodes[code]);\\r\\n        } else if(codeType == CODE_TYPE_MINT){\\r\\n            memString = bytes(_mintCodes[code]);\\r\\n        } else if(codeType == CODE_TYPE_BLOCK){\\r\\n            memString = bytes(_blockCodes[code]);\\r\\n        }\\r\\n        if (memString.length == 0) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Emitted when `tokens` are allocated to a specific property\\r\\n     */\\r\\n    event Allocate(address indexed owner, bytes32 indexed propertyAddress, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * Emitted when `tokens` are unallocated from a specific property\\r\\n     */\\r\\n    event Unallocate(address indexed owner, bytes32 indexed propertyAddress, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * Emitted when `value` tokens are burned from one account (`from`)\\r\\n     */\\r\\n    event Burn(address indexed from, uint256 value, uint8 code);\\r\\n\\r\\n    /**\\r\\n     * Emitted when `value` tokens are minted to a account (`to`)\\r\\n     */\\r\\n    event Mint(address indexed to, uint256 value, uint8 code);\\r\\n\\r\\n    /**\\r\\n     * Emitted when `blockAddress` is blocked for transfers for a reason (`code`)\\r\\n     */\\r\\n    event Block(address indexed blockAddress, uint8 code);\\r\\n\\r\\n    /**\\r\\n     * Emitted when `unblockAddress` is no more blocked for transfers for a reason (`code`)\\r\\n     */\\r\\n    event Unblock(address indexed unblockAddress, uint8 code);\\r\\n}\\r\\n\"},\"IERC1404.sol\":{\"content\":\"pragma solidity 0.5.17;\\r\\n\\r\\ninterface IERC1404 {\\r\\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\\r\\n    /// @param from Sending address\\r\\n    /// @param to Receiving address\\r\\n    /// @param value Amount of tokens being transferred\\r\\n    /// @return Code by which to reference message for rejection reasoning\\r\\n    function detectTransferRestriction (address from, address to, uint256 value) external view returns (uint8);\\r\\n\\r\\n    /// @notice Returns a human-readable message for a given restriction code\\r\\n    /// @param restrictionCode Identifier for looking up a message\\r\\n    /// @return Text showing the restriction\\u0027s reasoning\\r\\n    function messageForTransferRestriction (uint8 restrictionCode) external view returns (string memory);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Migrations.sol\":{\"content\":\"pragma solidity 0.5.17;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"Roles.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account\\u0027s access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"propertyAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blockAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"Block\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"propertyAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unallocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unblockAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"Unblock\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"blockedAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"addTransferBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addUserListToKycRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"propertyAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateAmountFromAddressForProperty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"allocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"blockCode\",\"type\":\"uint8\"}],\"name\":\"messageForBlockCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"burnCode\",\"type\":\"uint8\"}],\"name\":\"messageForBurnCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mintCode\",\"type\":\"uint8\"}],\"name\":\"messageForMintCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"mintTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"propertyAddress\",\"type\":\"bytes32\"}],\"name\":\"propertyLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"removeBlockCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"removeBurnCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"removeMintCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"removeRestrictionCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"unblockAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"removeTransferblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"removeUserFromKycRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"codeText\",\"type\":\"string\"}],\"name\":\"setBlockCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"codeText\",\"type\":\"string\"}],\"name\":\"setBurnCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"codeText\",\"type\":\"string\"}],\"name\":\"setMintCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"codeText\",\"type\":\"string\"}],\"name\":\"setRestrictionCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"propertyAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unallocatePropertyFromAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrowdliToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://2f59b9c85a0f9be9e5f094fa513032354613b182c9bfd66b21bbd373cf044a97"}]}