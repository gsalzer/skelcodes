{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.26;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ninterface KyberNetworkProxyInterface {\r\n    function maxGasPrice() public view returns(uint);\r\n    function getUserCapInWei(address user) public view returns(uint);\r\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\r\n    function enabled() public view returns(bool);\r\n    function info(bytes32 id) public view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\r\n        returns (uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\r\n        uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\r\n\r\n    function swapEtherToToken(ERC20 token, uint minRate) public payable returns (uint);\r\n\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) public returns (uint);\r\n}\r\n\r\ninterface OrFeedInterface {\r\n  function getExchangeRate ( string fromSymbol, string toSymbol, string venue, uint256 amount ) external view returns ( uint256 );\r\n  function getTokenDecimalCount ( address tokenAddress ) external view returns ( uint256 );\r\n  function getTokenAddress ( string symbol ) external view returns ( address );\r\n  function getSynthBytes32 ( string symbol ) external view returns ( bytes32 );\r\n  function getForexAddress ( string symbol ) external view returns ( address );\r\n}\r\n\r\ncontract KyberTradeUSDC{\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    KyberNetworkProxyInterface public proxy = KyberNetworkProxyInterface(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    OrFeedInterface orfeed= OrFeedInterface(0x73f5022bec0e01c0859634b0c7186301c5464b46);\r\n    address usdcAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    bytes  PERM_HINT = \"PERM\";\r\n    address owner;\r\n\r\n    constructor() public\r\n    {\r\n     owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert(\"Not Owner.\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function xETHUSDC (KyberNetworkProxyInterface _kyberNetworkProxy, ERC20 token, address destAddress) internal{\r\n\r\n        uint minRate;\r\n        (, minRate) = _kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, token, msg.value);\r\n        uint destAmount = _kyberNetworkProxy.swapEtherToToken.value(msg.value)(token, minRate);\r\n        require(token.transfer(destAddress, destAmount),\"Error\");\r\n    }\r\n\r\n    function () external payable  {\r\n\r\n    }\r\n\r\n    function withdrawETHAndTokens() private onlyOwner{\r\n        msg.sender.transfer(address(this).balance);\r\n        ERC20 usdcToken = ERC20(usdcAddress);\r\n        uint256 currentTokenBalance = usdcToken.balanceOf(this);\r\n        usdcToken.transfer(msg.sender, currentTokenBalance);\r\n    }\r\n\r\n    function getPrice() public view returns(uint256){\r\n        uint256 currentPrice = orfeed.getExchangeRate(\"ETH\", \"USD\", \"\", 100000000);\r\n        return currentPrice;\r\n    }\r\n\r\n    function getKyberSellPrice() public view returns (uint256){\r\n       uint256 currentPrice = orfeed.getExchangeRate(\"ETH\", \"USDC\", \"SELL-KYBER-EXCHANGE\", 1000000000000000000);\r\n        return currentPrice;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getKyberSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"KyberTradeUSDC","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://3ea9fc488882ea427952671bfdd5d33abb57a54cabb59b3141e1f92beb7a47dd"}]}