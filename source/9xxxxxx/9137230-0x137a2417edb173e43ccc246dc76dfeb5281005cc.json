{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ninterface ERC20Token {\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `msg.sender`\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    /**\r\n     * @notice return total supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract's owner\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only the contract's owner can invoke this function\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n      * @dev Sets an owner address\r\n      * @param _newOwner new owner address\r\n      */\r\n    function _setOwner(address _newOwner) internal {\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev is sender the owner of the contract?\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     *      Renouncing to ownership will leave the contract without an owner.\r\n     *      It will not be possible to call the functions with the `onlyOwner`\r\n     *      modifier anymore.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"New owner cannot be address(0)\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\"PROXIABLE\") = \"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\"\r\n    event Upgraded(address indexed implementation);\r\n\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \"Not compatible\"\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n        emit Upgraded(newAddress);\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SafeTransfer {\r\n    function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {\r\n        _token.transfer(_to, _value);\r\n        assembly {\r\n        switch returndatasize()\r\n            case 0 {\r\n            result := not(0)\r\n            }\r\n            case 32 {\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n            }\r\n            default {\r\n            revert(0, 0)\r\n            }\r\n        }\r\n        require(result, \"Unsuccessful token transfer\");\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        ERC20Token _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool result)\r\n    {\r\n        _token.transferFrom(_from, _to, _value);\r\n        assembly {\r\n        switch returndatasize()\r\n            case 0 {\r\n            result := not(0)\r\n            }\r\n            case 32 {\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n            }\r\n            default {\r\n            revert(0, 0)\r\n            }\r\n        }\r\n        require(result, \"Unsuccessful token transfer\");\r\n    }\r\n}\r\n\r\n/* solium-disable security/no-block-members */\r\n/* solium-disable security/no-inline-assembly */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title License\r\n* @dev Contract for buying a license\r\n*/\r\ncontract License is Ownable, ApproveAndCallFallBack, SafeTransfer, Proxiable {\r\n    uint256 public price;\r\n\r\n    ERC20Token token;\r\n    address burnAddress;\r\n\r\n    struct LicenseDetails {\r\n        uint price;\r\n        uint creationTime;\r\n    }\r\n\r\n    address[] public licenseOwners;\r\n    mapping(address => uint) public idxLicenseOwners;\r\n    mapping(address => LicenseDetails) public licenseDetails;\r\n\r\n    event Bought(address buyer, uint256 price);\r\n    event PriceChanged(uint256 _price);\r\n\r\n    bool internal _initialized;\r\n\r\n    /**\r\n     * @param _tokenAddress Address of token used to pay for licenses (SNT)\r\n     * @param _price Price of the licenses\r\n     * @param _burnAddress Address where the license fee is going to be sent\r\n     */\r\n    constructor(address _tokenAddress, uint256 _price, address _burnAddress) public {\r\n        init(_tokenAddress, _price, _burnAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize contract (used with proxy). Can only be called once\r\n     * @param _tokenAddress Address of token used to pay for licenses (SNT)\r\n     * @param _price Price of the licenses\r\n     * @param _burnAddress Address where the license fee is going to be sent\r\n     */\r\n    function init(\r\n        address _tokenAddress,\r\n        uint256 _price,\r\n        address _burnAddress\r\n    ) public {\r\n        assert(_initialized == false);\r\n\r\n        _initialized = true;\r\n\r\n        price = _price;\r\n        token = ERC20Token(_tokenAddress);\r\n        burnAddress = _burnAddress;\r\n\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function updateCode(address newCode) public onlyOwner {\r\n        updateCodeAddress(newCode);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the address already owns a license\r\n     * @param _address The address to check\r\n     * @return bool\r\n     */\r\n    function isLicenseOwner(address _address) public view returns (bool) {\r\n        return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Buy a license\r\n     * @dev Requires value to be equal to the price of the license.\r\n     *      The msg.sender must not already own a license.\r\n     */\r\n    function buy() external returns(uint) {\r\n        uint id = _buyFrom(msg.sender);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @notice Buy a license\r\n     * @dev Requires value to be equal to the price of the license.\r\n     *      The _owner must not already own a license.\r\n     */\r\n    function _buyFrom(address _licenseOwner) internal returns(uint) {\r\n        require(licenseDetails[_licenseOwner].creationTime == 0, \"License already bought\");\r\n\r\n        licenseDetails[_licenseOwner] = LicenseDetails({\r\n            price: price,\r\n            creationTime: block.timestamp\r\n        });\r\n\r\n        uint idx = licenseOwners.push(_licenseOwner);\r\n        idxLicenseOwners[_licenseOwner] = idx;\r\n\r\n        emit Bought(_licenseOwner, price);\r\n\r\n        require(_safeTransferFrom(token, _licenseOwner, burnAddress, price), \"Unsuccessful token transfer\");\r\n\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the license price\r\n     * @param _price The new price of the license\r\n     * @dev Only the owner of the contract can perform this action\r\n    */\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        price = _price;\r\n        emit PriceChanged(_price);\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of license owners\r\n     * @return uint\r\n     */\r\n    function getNumLicenseOwners() external view returns (uint256) {\r\n        return licenseOwners.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Support for \"approveAndCall\". Callable only by `token()`.\r\n     * @param _from Who approved.\r\n     * @param _amount Amount being approved, need to be equal `price()`.\r\n     * @param _token Token being approved, need to be equal `token()`.\r\n     * @param _data Abi encoded data with selector of `buy(and)`.\r\n     */\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\r\n        require(_amount == price, \"Wrong value\");\r\n        require(_token == address(token), \"Wrong token\");\r\n        require(_token == address(msg.sender), \"Wrong call\");\r\n        require(_data.length == 4, \"Wrong data length\");\r\n\r\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\r\n\r\n        _buyFrom(_from);\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes abi encoded data with selector for \"buy()\".\r\n     * @param _data Abi encoded data.\r\n     * @return Decoded registry call.\r\n     */\r\n    function _abiDecodeBuy(bytes memory _data) internal pure returns(bytes4 sig) {\r\n        assembly {\r\n            sig := mload(add(_data, add(0x20, 0)))\r\n        }\r\n    }\r\n}\r\n\r\n/* solium-disable security/no-block-members */\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ArbitratorLicense\r\n* @dev Contract for management of an arbitrator license\r\n*/\r\ncontract ArbitrationLicense is License {\r\n\r\n    enum RequestStatus {NONE,AWAIT,ACCEPTED,REJECTED,CLOSED}\r\n\r\n    struct Request{\r\n        address seller;\r\n        address arbitrator;\r\n        RequestStatus status;\r\n        uint date;\r\n    }\r\n\r\n\tstruct ArbitratorLicenseDetails {\r\n        uint id;\r\n        bool acceptAny;// accept any seller\r\n    }\r\n\r\n    mapping(address => ArbitratorLicenseDetails) public arbitratorlicenseDetails;\r\n    mapping(address => mapping(address => bool)) public permissions;\r\n    mapping(address => mapping(address => bool)) public blacklist;\r\n    mapping(bytes32 => Request) public requests;\r\n\r\n    event ArbitratorRequested(bytes32 id, address indexed seller, address indexed arbitrator);\r\n\r\n    event RequestAccepted(bytes32 id, address indexed arbitrator, address indexed seller);\r\n    event RequestRejected(bytes32 id, address indexed arbitrator, address indexed seller);\r\n    event RequestCanceled(bytes32 id, address indexed arbitrator, address indexed seller);\r\n    event BlacklistSeller(address indexed arbitrator, address indexed seller);\r\n    event UnBlacklistSeller(address indexed arbitrator, address indexed seller);\r\n\r\n    /**\r\n     * @param _tokenAddress Address of token used to pay for licenses (SNT)\r\n     * @param _price Amount of token needed to buy a license\r\n     * @param _burnAddress Burn address where the price of the license is sent\r\n     */\r\n    constructor(address _tokenAddress, uint256 _price, address _burnAddress)\r\n      License(_tokenAddress, _price, _burnAddress)\r\n      public {}\r\n\r\n    /**\r\n     * @notice Buy an arbitrator license\r\n     */\r\n    function buy() external returns(uint) {\r\n        return _buy(msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy an arbitrator license and set if the arbitrator accepts any seller\r\n     * @param _acceptAny When set to true, all sellers are accepted by the arbitrator\r\n     */\r\n    function buy(bool _acceptAny) external returns(uint) {\r\n        return _buy(msg.sender, _acceptAny);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy an arbitrator license and set if the arbitrator accepts any seller. Sets the arbitrator as the address in params instead of the sender\r\n     * @param _sender Address of the arbitrator\r\n     * @param _acceptAny When set to true, all sellers are accepted by the arbitrator\r\n     */\r\n    function _buy(address _sender, bool _acceptAny) internal returns (uint id) {\r\n        id = _buyFrom(_sender);\r\n        arbitratorlicenseDetails[_sender].id = id;\r\n        arbitratorlicenseDetails[_sender].acceptAny = _acceptAny;\r\n    }\r\n\r\n    /**\r\n     * @notice Change acceptAny parameter for arbitrator\r\n     * @param _acceptAny indicates does arbitrator allow to accept any seller/choose sellers\r\n     */\r\n    function changeAcceptAny(bool _acceptAny) public {\r\n        require(isLicenseOwner(msg.sender), \"Message sender should have a valid arbitrator license\");\r\n        require(arbitratorlicenseDetails[msg.sender].acceptAny != _acceptAny,\r\n                \"Message sender should pass parameter different from the current one\");\r\n\r\n        arbitratorlicenseDetails[msg.sender].acceptAny = _acceptAny;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to accept a seller\r\n     * @param _arbitrator address of a licensed arbitrator\r\n     */\r\n    function requestArbitrator(address _arbitrator) public {\r\n       require(isLicenseOwner(_arbitrator), \"Arbitrator should have a valid license\");\r\n       require(!arbitratorlicenseDetails[_arbitrator].acceptAny, \"Arbitrator already accepts all cases\");\r\n\r\n       bytes32 _id = keccak256(abi.encodePacked(_arbitrator, msg.sender));\r\n       RequestStatus _status = requests[_id].status;\r\n       require(_status != RequestStatus.AWAIT && _status != RequestStatus.ACCEPTED, \"Invalid request status\");\r\n\r\n       if(_status == RequestStatus.REJECTED || _status == RequestStatus.CLOSED){\r\n           require(requests[_id].date + 3 days < block.timestamp,\r\n            \"Must wait 3 days before requesting the arbitrator again\");\r\n       }\r\n\r\n       requests[_id] = Request({\r\n            seller: msg.sender,\r\n            arbitrator: _arbitrator,\r\n            status: RequestStatus.AWAIT,\r\n            date: block.timestamp\r\n       });\r\n\r\n       emit ArbitratorRequested(_id, msg.sender, _arbitrator);\r\n    }\r\n\r\n    /**\r\n     * @dev Get Request Id\r\n     * @param _arbitrator Arbitrator address\r\n     * @param _account Seller account\r\n     * @return Request Id\r\n     */\r\n    function getId(address _arbitrator, address _account) external pure returns(bytes32){\r\n        return keccak256(abi.encodePacked(_arbitrator,_account));\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to accept a seller's request\r\n     * @param _id request id\r\n     */\r\n    function acceptRequest(bytes32 _id) public {\r\n        require(isLicenseOwner(msg.sender), \"Arbitrator should have a valid license\");\r\n        require(requests[_id].status == RequestStatus.AWAIT, \"This request is not pending\");\r\n        require(!arbitratorlicenseDetails[msg.sender].acceptAny, \"Arbitrator already accepts all cases\");\r\n        require(requests[_id].arbitrator == msg.sender, \"Invalid arbitrator\");\r\n\r\n        requests[_id].status = RequestStatus.ACCEPTED;\r\n\r\n        address _seller = requests[_id].seller;\r\n        permissions[msg.sender][_seller] = true;\r\n\r\n        emit RequestAccepted(_id, msg.sender, requests[_id].seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to reject a request\r\n     * @param _id request id\r\n     */\r\n    function rejectRequest(bytes32 _id) public {\r\n        require(isLicenseOwner(msg.sender), \"Arbitrator should have a valid license\");\r\n        require(requests[_id].status == RequestStatus.AWAIT || requests[_id].status == RequestStatus.ACCEPTED,\r\n            \"Invalid request status\");\r\n        require(!arbitratorlicenseDetails[msg.sender].acceptAny, \"Arbitrator accepts all cases\");\r\n        require(requests[_id].arbitrator == msg.sender, \"Invalid arbitrator\");\r\n\r\n        requests[_id].status = RequestStatus.REJECTED;\r\n        requests[_id].date = block.timestamp;\r\n\r\n        address _seller = requests[_id].seller;\r\n        permissions[msg.sender][_seller] = false;\r\n\r\n        emit RequestRejected(_id, msg.sender, requests[_id].seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows seller to cancel a request\r\n     * @param _id request id\r\n     */\r\n    function cancelRequest(bytes32 _id) public {\r\n        require(requests[_id].seller == msg.sender,  \"This request id does not belong to the message sender\");\r\n        require(requests[_id].status == RequestStatus.AWAIT || requests[_id].status == RequestStatus.ACCEPTED, \"Invalid request status\");\r\n\r\n        address arbitrator = requests[_id].arbitrator;\r\n\r\n        requests[_id].status = RequestStatus.CLOSED;\r\n        requests[_id].date = block.timestamp;\r\n\r\n        address _arbitrator = requests[_id].arbitrator;\r\n        permissions[_arbitrator][msg.sender] = false;\r\n\r\n        emit RequestCanceled(_id, arbitrator, requests[_id].seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to blacklist a seller\r\n     * @param _seller Seller address\r\n     */\r\n    function blacklistSeller(address _seller) public {\r\n        require(isLicenseOwner(msg.sender), \"Arbitrator should have a valid license\");\r\n\r\n        blacklist[msg.sender][_seller] = true;\r\n\r\n        emit BlacklistSeller(msg.sender, _seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to remove a seller from the blacklist\r\n     * @param _seller Seller address\r\n     */\r\n    function unBlacklistSeller(address _seller) public {\r\n        require(isLicenseOwner(msg.sender), \"Arbitrator should have a valid license\");\r\n\r\n        blacklist[msg.sender][_seller] = false;\r\n\r\n        emit UnBlacklistSeller(msg.sender, _seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if Arbitrator permits to use his/her services\r\n     * @param _seller sellers's address\r\n     * @param _arbitrator arbitrator's address\r\n     */\r\n    function isAllowed(address _seller, address _arbitrator) public view returns(bool) {\r\n        return (arbitratorlicenseDetails[_arbitrator].acceptAny && !blacklist[_arbitrator][_seller]) || permissions[_arbitrator][_seller];\r\n    }\r\n\r\n    /**\r\n     * @notice Support for \"approveAndCall\". Callable only by `token()`.\r\n     * @param _from Who approved.\r\n     * @param _amount Amount being approved, need to be equal `price()`.\r\n     * @param _token Token being approved, need to be equal `token()`.\r\n     * @param _data Abi encoded data with selector of `buy(and)`.\r\n     */\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\r\n        require(_amount == price, \"Wrong value\");\r\n        require(_token == address(token), \"Wrong token\");\r\n        require(_token == address(msg.sender), \"Wrong call\");\r\n        require(_data.length == 4, \"Wrong data length\");\r\n\r\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \"Wrong method selector\"); //bytes4(keccak256(\"buy()\"))\r\n\r\n        _buy(_from, false);\r\n    }\r\n}\r\n\r\n/* solium-disable no-empty-blocks */\r\n/* solium-disable security/no-inline-assembly */\r\n\r\n\r\n\r\n/**\r\n * @dev Uses ethereum signed messages\r\n */\r\ncontract MessageSigned {\r\n\r\n    constructor() internal {}\r\n\r\n    /**\r\n     * @dev recovers address who signed the message\r\n     * @param _signHash operation ethereum signed message hash\r\n     * @param _messageSignature message `_signHash` signature\r\n     */\r\n    function _recoverAddress(bytes32 _signHash, bytes memory _messageSignature)\r\n        internal\r\n        pure\r\n        returns(address)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        (v,r,s) = signatureSplit(_messageSignature);\r\n        return ecrecover(_signHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash a hash with `\"\\x19Ethereum Signed Message:\\n32\"`\r\n     * @param _hash Sign to hash.\r\n     * @return Hash to be signed.\r\n     */\r\n    function _getSignHash(bytes32 _hash) internal pure returns (bytes32 signHash) {\r\n        signHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash));\r\n    }\r\n\r\n    /**\r\n     * @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`\r\n     * @param _signature Signature string\r\n     */\r\n    function signatureSplit(bytes memory _signature)\r\n        internal\r\n        pure\r\n        returns (uint8 v, bytes32 r, bytes32 s)\r\n    {\r\n        require(_signature.length == 65, \"Bad signature length\");\r\n        // The signature format is a compact form of:\r\n        //   {bytes32 r}{bytes32 s}{uint8 v}\r\n        // Compact means, uint8 is not padded to 32 bytes.\r\n        assembly {\r\n            r := mload(add(_signature, 32))\r\n            s := mload(add(_signature, 64))\r\n            // Here we are loading the last 32 bytes, including 31 bytes\r\n            // of 's'. There is no 'mload8' to do this.\r\n            //\r\n            // 'byte' is not working due to the Solidity parser, so lets\r\n            // use the second best option, 'and'\r\n            v := and(mload(add(_signature, 65)), 0xff)\r\n        }\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        require(v == 27 || v == 28, \"Bad signature version\");\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract SecuredFunctions is Ownable {\r\n\r\n    mapping(address => bool) public allowedContracts;\r\n\r\n    /// @notice Only allowed addresses and the same contract can invoke this function\r\n    modifier onlyAllowedContracts {\r\n        require(allowedContracts[msg.sender] || msg.sender == address(this), \"Only allowed contracts can invoke this function\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set contract addresses with special privileges to execute special functions\r\n     * @param _contract Contract address\r\n     * @param _allowed Is contract allowed?\r\n     */\r\n    function setAllowedContract (\r\n        address _contract,\r\n        bool _allowed\r\n    ) public onlyOwner {\r\n        allowedContracts[_contract] = _allowed;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Stakable is Ownable, SafeTransfer {\r\n\r\n    uint public basePrice = 0.01 ether;\r\n\r\n    address payable public burnAddress;\r\n\r\n    struct Stake {\r\n        uint amount;\r\n        address payable owner;\r\n        address token;\r\n    }\r\n\r\n    mapping(uint => Stake) public stakes;\r\n    mapping(address => uint) public stakeCounter;\r\n\r\n    event BurnAddressChanged(address sender, address prevBurnAddress, address newBurnAddress);\r\n    event BasePriceChanged(address sender, uint prevPrice, uint newPrice);\r\n\r\n    event Staked(uint indexed itemId, address indexed owner, uint amount);\r\n    event Unstaked(uint indexed itemId, address indexed owner, uint amount);\r\n    event Slashed(uint indexed itemId, address indexed owner, address indexed slasher, uint amount);\r\n\r\n    constructor(address payable _burnAddress) public {\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the burn address\r\n     * @param _burnAddress New burn address\r\n     */\r\n    function setBurnAddress(address payable _burnAddress) external onlyOwner {\r\n        emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the base price\r\n     * @param _basePrice New burn address\r\n     */\r\n    function setBasePrice(uint _basePrice) external onlyOwner {\r\n        emit BasePriceChanged(msg.sender, basePrice, _basePrice);\r\n        basePrice = _basePrice;\r\n    }\r\n\r\n    function _stake(uint _itemId, address payable _owner, address _tokenAddress) internal {\r\n        require(stakes[_itemId].owner == address(0), \"Already has/had a stake\");\r\n\r\n        stakeCounter[_owner]++;\r\n\r\n        uint stakeAmount = basePrice * stakeCounter[_owner] * stakeCounter[_owner]; // y = basePrice * x^2\r\n\r\n        // Using only ETH as stake for phase 0\r\n        _tokenAddress = address(0);\r\n        require(msg.value == stakeAmount, \"ETH amount is required\");\r\n\r\n        // Uncomment to support tokens\r\n        /*\r\n        if (_tokenAddress != address(0)) {\r\n            require(msg.value == 0, \"Cannot send ETH with token address different from 0\");\r\n            ERC20Token tokenToPay = ERC20Token(_tokenAddress);\r\n            require(_safeTransferFrom(tokenToPay, _owner, address(this), stakeAmount), \"Unsuccessful token transfer\");\r\n        } else {\r\n            require(msg.value == stakeAmount, \"ETH amount is required\");\r\n        }\r\n        */\r\n\r\n        stakes[_itemId].amount = stakeAmount;\r\n        stakes[_itemId].owner = _owner;\r\n        stakes[_itemId].token = _tokenAddress;\r\n\r\n        emit Staked(_itemId,  _owner, stakeAmount);\r\n    }\r\n\r\n    function getAmountToStake(address _owner) public view returns(uint){\r\n        uint stakeCnt = stakeCounter[_owner] + 1;\r\n        return basePrice * stakeCnt * stakeCnt; // y = basePrice * x^2\r\n    }\r\n\r\n    function _unstake(uint _itemId) internal {\r\n        Stake storage s = stakes[_itemId];\r\n\r\n        if (s.amount == 0) return; // No stake for item\r\n\r\n        uint amount = s.amount;\r\n        s.amount = 0;\r\n\r\n        assert(stakeCounter[s.owner] > 0);\r\n        stakeCounter[s.owner]--;\r\n\r\n        if (s.token == address(0)) {\r\n            (bool success, ) = s.owner.call.value(amount)(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        } else {\r\n            require(_safeTransfer(ERC20Token(s.token), s.owner, amount), \"Couldn't transfer funds\");\r\n        }\r\n\r\n        emit Unstaked(_itemId, s.owner, amount);\r\n    }\r\n\r\n    function _slash(uint _itemId) internal {\r\n        Stake storage s = stakes[_itemId];\r\n\r\n        // TODO: what happens if offer was previosly validated and the user removed the stake?\r\n        if (s.amount == 0) return;\r\n\r\n        uint amount = s.amount;\r\n        s.amount = 0;\r\n\r\n        if (s.token == address(0)) {\r\n            (bool success, ) = burnAddress.call.value(amount)(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        } else {\r\n            require(_safeTransfer(ERC20Token(s.token), burnAddress, amount), \"Couldn't transfer funds\");\r\n        }\r\n\r\n        emit Slashed(_itemId, s.owner, msg.sender, amount);\r\n    }\r\n\r\n    function _refundStake(uint _itemId) internal {\r\n        Stake storage s = stakes[_itemId];\r\n\r\n        if (s.amount == 0) return;\r\n\r\n        uint amount = s.amount;\r\n        s.amount = 0;\r\n\r\n        stakeCounter[s.owner]--;\r\n\r\n        if (amount != 0) {\r\n            if (s.token == address(0)) {\r\n                (bool success, ) = s.owner.call.value(amount)(\"\");\r\n                require(success, \"Transfer failed.\");\r\n            } else {\r\n                require(_safeTransfer(ERC20Token(s.token), s.owner, amount), \"Couldn't transfer funds\");\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n* @title MetadataStore\r\n* @dev User and offers registry\r\n*/\r\ncontract MetadataStore is Stakable, MessageSigned, SecuredFunctions, Proxiable {\r\n\r\n    struct User {\r\n        string contactData;\r\n        string location;\r\n        string username;\r\n    }\r\n\r\n    struct Offer {\r\n        int16 margin;\r\n        uint[] paymentMethods;\r\n        uint limitL;\r\n        uint limitU;\r\n        address asset;\r\n        string currency;\r\n        address payable owner;\r\n        address payable arbitrator;\r\n        bool deleted;\r\n    }\r\n\r\n    License public sellingLicenses;\r\n    ArbitrationLicense public arbitrationLicenses;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => uint) public user_nonce;\r\n\r\n    Offer[] public offers;\r\n    mapping(address => uint256[]) public addressToOffers;\r\n    mapping(address => mapping (uint256 => bool)) public offerWhitelist;\r\n\r\n    bool internal _initialized;\r\n\r\n    event OfferAdded(\r\n        address owner,\r\n        uint256 offerId,\r\n        address asset,\r\n        string location,\r\n        string currency,\r\n        string username,\r\n        uint[] paymentMethods,\r\n        uint limitL,\r\n        uint limitU,\r\n        int16 margin\r\n    );\r\n\r\n    event OfferRemoved(address owner, uint256 offerId);\r\n\r\n    /**\r\n     * @param _sellingLicenses Sellers licenses contract address\r\n     * @param _arbitrationLicenses Arbitrators licenses contract address\r\n     * @param _burnAddress Address to send slashed offer funds\r\n     */\r\n    constructor(address _sellingLicenses, address _arbitrationLicenses, address payable _burnAddress) public\r\n        Stakable(_burnAddress)\r\n    {\r\n        init(_sellingLicenses, _arbitrationLicenses);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize contract (used with proxy). Can only be called once\r\n     * @param _sellingLicenses Sellers licenses contract address\r\n     * @param _arbitrationLicenses Arbitrators licenses contract address\r\n     */\r\n    function init(\r\n        address _sellingLicenses,\r\n        address _arbitrationLicenses\r\n    ) public {\r\n        assert(_initialized == false);\r\n\r\n        _initialized = true;\r\n\r\n        sellingLicenses = License(_sellingLicenses);\r\n        arbitrationLicenses = ArbitrationLicense(_arbitrationLicenses);\r\n\r\n        basePrice = 0.01 ether;\r\n\r\n\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function updateCode(address newCode) public onlyOwner {\r\n        updateCodeAddress(newCode);\r\n    }\r\n\r\n    event LicensesChanged(address sender, address oldSellingLicenses, address newSellingLicenses, address oldArbitrationLicenses, address newArbitrationLicenses);\r\n\r\n    /**\r\n     * @dev Initialize contract (used with proxy). Can only be called once\r\n     * @param _sellingLicenses Sellers licenses contract address\r\n     * @param _arbitrationLicenses Arbitrators licenses contract address\r\n     */\r\n    function setLicenses(\r\n        address _sellingLicenses,\r\n        address _arbitrationLicenses\r\n    ) public onlyOwner {\r\n        emit LicensesChanged(msg.sender, address(sellingLicenses), address(_sellingLicenses), address(arbitrationLicenses), (_arbitrationLicenses));\r\n\r\n        sellingLicenses = License(_sellingLicenses);\r\n        arbitrationLicenses = ArbitrationLicense(_arbitrationLicenses);\r\n    }\r\n\r\n    /**\r\n     * @dev Get datahash to be signed\r\n     * @param _username Username\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _nonce Nonce value (obtained from user_nonce)\r\n     * @return bytes32 to sign\r\n     */\r\n    function _dataHash(string memory _username, string memory _contactData, uint _nonce) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this), _username, _contactData, _nonce));\r\n    }\r\n\r\n    /**\r\n     * @notice Get datahash to be signed\r\n     * @param _username Username\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @return bytes32 to sign\r\n     */\r\n    function getDataHash(string calldata _username, string calldata _contactData) external view returns (bytes32) {\r\n        return _dataHash(_username, _contactData, user_nonce[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Get signer address from signature. This uses the signature parameters to validate the signature\r\n     * @param _username Status username\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _nonce User nonce\r\n     * @param _signature Signature obtained from the previous parameters\r\n     * @return Signing user address\r\n     */\r\n    function _getSigner(\r\n        string memory _username,\r\n        string memory _contactData,\r\n        uint _nonce,\r\n        bytes memory _signature\r\n    ) internal view returns(address) {\r\n        bytes32 signHash = _getSignHash(_dataHash(_username, _contactData, _nonce));\r\n        return _recoverAddress(signHash, _signature);\r\n    }\r\n\r\n    /**\r\n     * @notice Get signer address from signature\r\n     * @param _username Status username\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _nonce User nonce\r\n     * @param _signature Signature obtained from the previous parameters\r\n     * @return Signing user address\r\n     */\r\n    function getMessageSigner(\r\n        string calldata _username,\r\n        string calldata _contactData,\r\n        uint _nonce,\r\n        bytes calldata _signature\r\n    ) external view returns(address) {\r\n        return _getSigner(_username, _contactData, _nonce, _signature);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds or updates user information\r\n     * @param _user User address to update\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _location New location\r\n     * @param _username New status username\r\n     */\r\n    function _addOrUpdateUser(\r\n        address _user,\r\n        string memory _contactData,\r\n        string memory _location,\r\n        string memory _username\r\n    ) internal {\r\n        User storage u = users[_user];\r\n        u.contactData = _contactData;\r\n        u.location = _location;\r\n        u.username = _username;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds or updates user information via signature\r\n     * @param _signature Signature\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _location New location\r\n     * @param _username New status username\r\n     * @return Signing user address\r\n     */\r\n    function addOrUpdateUser(\r\n        bytes calldata _signature,\r\n        string calldata _contactData,\r\n        string calldata _location,\r\n        string calldata _username,\r\n        uint _nonce\r\n    ) external returns(address payable _user) {\r\n        _user = address(uint160(_getSigner(_username, _contactData, _nonce, _signature)));\r\n\r\n        require(_nonce == user_nonce[_user], \"Invalid nonce\");\r\n\r\n        user_nonce[_user]++;\r\n        _addOrUpdateUser(_user, _contactData, _location, _username);\r\n\r\n        return _user;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds or updates user information\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _location New location\r\n     * @param _username New status username\r\n     * @return Signing user address\r\n     */\r\n    function addOrUpdateUser(\r\n        string calldata _contactData,\r\n        string calldata _location,\r\n        string calldata _username\r\n    ) external {\r\n        _addOrUpdateUser(msg.sender, _contactData, _location, _username);\r\n    }\r\n\r\n    /**\r\n     * @notice Adds or updates user information\r\n     * @dev can only be called by the escrow contract\r\n     * @param _sender Address that sets the user info\r\n     * @param _contactData Contact Data   ContactType:UserId\r\n     * @param _location New location\r\n     * @param _username New status username\r\n     * @return Signing user address\r\n     */\r\n    function addOrUpdateUser(\r\n        address _sender,\r\n        string calldata _contactData,\r\n        string calldata _location,\r\n        string calldata _username\r\n    ) external onlyAllowedContracts {\r\n        _addOrUpdateUser(_sender, _contactData, _location, _username);\r\n    }\r\n\r\n    /**\r\n    * @dev Add a new offer with a new user if needed to the list\r\n    * @param _asset The address of the erc20 to exchange, pass 0x0 for Eth\r\n    * @param _contactData Contact Data   ContactType:UserId\r\n    * @param _location The location on earth\r\n    * @param _currency The currency the user want to receive (USD, EUR...)\r\n    * @param _username The username of the user\r\n    * @param _paymentMethods The list of the payment methods the user accept\r\n    * @param _limitL Lower limit accepted\r\n    * @param _limitU Upper limit accepted\r\n    * @param _margin The margin for the user\r\n    * @param _arbitrator The arbitrator used by the offer\r\n    */\r\n    function addOffer(\r\n        address _asset,\r\n        string memory _contactData,\r\n        string memory _location,\r\n        string memory _currency,\r\n        string memory _username,\r\n        uint[] memory _paymentMethods,\r\n        uint _limitL,\r\n        uint _limitU,\r\n        int16 _margin,\r\n        address payable _arbitrator\r\n    ) public payable {\r\n        //require(sellingLicenses.isLicenseOwner(msg.sender), \"Not a license owner\");\r\n        // @TODO: limit number of offers if the sender is unlicensed?\r\n\r\n        require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), \"Arbitrator does not allow this transaction\");\r\n\r\n        require(_limitL <= _limitU, \"Invalid limits\");\r\n        require(msg.sender != _arbitrator, \"Cannot arbitrate own offers\");\r\n\r\n        _addOrUpdateUser(\r\n            msg.sender,\r\n            _contactData,\r\n            _location,\r\n            _username\r\n        );\r\n\r\n        Offer memory newOffer = Offer(\r\n            _margin,\r\n            _paymentMethods,\r\n            _limitL,\r\n            _limitU,\r\n            _asset,\r\n            _currency,\r\n            msg.sender,\r\n            _arbitrator,\r\n            false\r\n        );\r\n\r\n        uint256 offerId = offers.push(newOffer) - 1;\r\n        offerWhitelist[msg.sender][offerId] = true;\r\n        addressToOffers[msg.sender].push(offerId);\r\n\r\n        emit OfferAdded(\r\n            msg.sender,\r\n            offerId,\r\n            _asset,\r\n            _location,\r\n            _currency,\r\n            _username,\r\n            _paymentMethods,\r\n            _limitL,\r\n            _limitU,\r\n            _margin);\r\n\r\n        _stake(offerId, msg.sender, _asset);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove user offer\r\n     * @dev Removed offers are marked as deleted instead of being deleted\r\n     * @param _offerId Id of the offer to remove\r\n     */\r\n    function removeOffer(uint256 _offerId) external {\r\n        require(offerWhitelist[msg.sender][_offerId], \"Offer does not exist\");\r\n\r\n        offers[_offerId].deleted = true;\r\n        offerWhitelist[msg.sender][_offerId] = false;\r\n        emit OfferRemoved(msg.sender, _offerId);\r\n\r\n        _unstake(_offerId);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the offer by Id\r\n     * @dev normally we'd access the offers array, but it would not return the payment methods\r\n     * @param _id Offer id\r\n     * @return Offer data (see Offer struct)\r\n     */\r\n    function offer(uint256 _id) external view returns (\r\n        address asset,\r\n        string memory currency,\r\n        int16 margin,\r\n        uint[] memory paymentMethods,\r\n        uint limitL,\r\n        uint limitH,\r\n        address payable owner,\r\n        address payable arbitrator,\r\n        bool deleted\r\n    ) {\r\n        Offer memory theOffer = offers[_id];\r\n\r\n        // In case arbitrator rejects the seller\r\n        address payable offerArbitrator = theOffer.arbitrator;\r\n        if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){\r\n            offerArbitrator = address(0);\r\n        }\r\n\r\n        return (\r\n            theOffer.asset,\r\n            theOffer.currency,\r\n            theOffer.margin,\r\n            theOffer.paymentMethods,\r\n            theOffer.limitL,\r\n            theOffer.limitU,\r\n            theOffer.owner,\r\n            offerArbitrator,\r\n            theOffer.deleted\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the offer's owner by Id\r\n     * @dev Helper function\r\n     * @param _id Offer id\r\n     * @return Seller address\r\n     */\r\n    function getOfferOwner(uint256 _id) external view returns (address payable) {\r\n        return (offers[_id].owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the offer's asset by Id\r\n     * @dev Helper function\r\n     * @param _id Offer id\r\n     * @return Token address used in the offer\r\n     */\r\n    function getAsset(uint256 _id) external view returns (address) {\r\n        return (offers[_id].asset);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the offer's arbitrator by Id\r\n     * @dev Helper function\r\n     * @param _id Offer id\r\n     * @return Arbitrator address\r\n     */\r\n    function getArbitrator(uint256 _id) external view returns (address payable) {\r\n        return (offers[_id].arbitrator);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the size of the offers\r\n     * @return Number of offers stored in the contract\r\n     */\r\n    function offersSize() external view returns (uint256) {\r\n        return offers.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get all the offer ids of the address in params\r\n     * @param _address Address of the offers\r\n     * @return Array of offer ids for a specific address\r\n     */\r\n    function getOfferIds(address _address) external view returns (uint256[] memory) {\r\n        return addressToOffers[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Slash offer stake. If the sender is not the escrow contract, nothing will happen\r\n     * @param _offerId Offer Id to slash\r\n     */\r\n    function slashStake(uint _offerId) external onlyAllowedContracts {\r\n        _slash(_offerId);\r\n    }\r\n\r\n    /**\r\n     * @dev Refunds a stake. Can be called automatically after an escrow is released\r\n     * @param _offerId Offer Id to slash\r\n     */\r\n    function refundStake(uint _offerId) external onlyAllowedContracts {\r\n        _refundStake(_offerId);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToOffers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offersSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_contactData\",\"type\":\"string\"}],\"name\":\"getDataHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_contactData\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getMessageSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contactData\",\"type\":\"string\"},{\"name\":\"_location\",\"type\":\"string\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"addOrUpdateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingLicenses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getArbitrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCode\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"refundStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellingLicenses\",\"type\":\"address\"},{\"name\":\"_arbitrationLicenses\",\"type\":\"address\"}],\"name\":\"setLicenses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"slashStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOfferOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getOfferIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"margin\",\"type\":\"int16\"},{\"name\":\"paymentMethods\",\"type\":\"uint256[]\"},{\"name\":\"limitL\",\"type\":\"uint256\"},{\"name\":\"limitH\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"arbitrator\",\"type\":\"address\"},{\"name\":\"deleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAmountToStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"margin\",\"type\":\"int16\"},{\"name\":\"limitL\",\"type\":\"uint256\"},{\"name\":\"limitU\",\"type\":\"uint256\"},{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"arbitrator\",\"type\":\"address\"},{\"name\":\"deleted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"removeOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"contactData\",\"type\":\"string\"},{\"name\":\"location\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrationLicenses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_contactData\",\"type\":\"string\"},{\"name\":\"_location\",\"type\":\"string\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateUser\",\"outputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_basePrice\",\"type\":\"uint256\"}],\"name\":\"setBasePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellingLicenses\",\"type\":\"address\"},{\"name\":\"_arbitrationLicenses\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_contactData\",\"type\":\"string\"},{\"name\":\"_location\",\"type\":\"string\"},{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"addOrUpdateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_contactData\",\"type\":\"string\"},{\"name\":\"_location\",\"type\":\"string\"},{\"name\":\"_currency\",\"type\":\"string\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_paymentMethods\",\"type\":\"uint256[]\"},{\"name\":\"_limitL\",\"type\":\"uint256\"},{\"name\":\"_limitU\",\"type\":\"uint256\"},{\"name\":\"_margin\",\"type\":\"int16\"},{\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"addOffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sellingLicenses\",\"type\":\"address\"},{\"name\":\"_arbitrationLicenses\",\"type\":\"address\"},{\"name\":\"_burnAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"paymentMethods\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"limitL\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"limitU\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"margin\",\"type\":\"int16\"}],\"name\":\"OfferAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"OfferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldSellingLicenses\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newSellingLicenses\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldArbitrationLicenses\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newArbitrationLicenses\",\"type\":\"address\"}],\"name\":\"LicensesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevBurnAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBurnAddress\",\"type\":\"address\"}],\"name\":\"BurnAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"BasePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"slasher\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MetadataStore","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f49bbf077d371a35e8ceb8b23a912184b24ec15000000000000000000000000063f5035069e325ac3b2546bbdc4df49b244cedfa0000000000000000000000000000000000000000000000000000000000000002","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://809fa920940f186d4d1e730f4ade497ce29ff1ae920da6d3ea723bc6b3f6ad40"}]}