{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/IHolder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IHolder {\r\n    function stopLoss() public view returns(uint256);\r\n    function takeProfit() public view returns(uint256);\r\n\r\n    function openPosition(\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        uint256 amount,\r\n        uint256 leverageRatio,\r\n        uint256 _stopLoss,\r\n        uint256 _takeProfit\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256);\r\n\r\n    function closePosition(\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        address user\r\n    )\r\n        external;\r\n\r\n    function collateralAmount(IERC20 token) public returns(uint256);\r\n    function borrowAmount(IERC20 token) public returns(uint256);\r\n    function pnl(IERC20 collateral, IERC20 debt, uint256 leverageRatio) public returns(uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/UniversalERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            address(uint160(to)).transfer(amount);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value > amount) {\r\n                msg.sender.transfer(msg.value.sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\r\n        if (!isETH(token)) {\r\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\r\n                token.safeApprove(to, 0);\r\n            }\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\r\n\r\n        if (isETH(token)) {\r\n            return 18;\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall.gas(5000)(\r\n            abi.encodeWithSignature(\"decimals()\")\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall.gas(5000)(\r\n                abi.encodeWithSignature(\"DECIMALS()\")\r\n            );\r\n        }\r\n\r\n        return success ? abi.decode(data, (uint256)) : 18;\r\n    }\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n}\r\n\r\n// File: contracts/HolderBase.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HolderBase is IHolder {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    address public delegate;\r\n    address public owner = msg.sender;\r\n    uint256 private _stopLoss;\r\n    uint256 private _takeProfit;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCallback {\r\n        require(msg.sender == address(this), \"Access denied\");\r\n        _;\r\n    }\r\n\r\n    function stopLoss() public view returns(uint256) {\r\n        return _stopLoss;\r\n    }\r\n\r\n    function takeProfit() public view returns(uint256) {\r\n        return _takeProfit;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender != tx.origin);\r\n    }\r\n\r\n    function pnl(IERC20 collateral, IERC20 debt, uint256 leverageRatio) public returns(uint256) {\r\n        uint256 value = _pnl(collateral, debt);\r\n        if (value > 1e18) {\r\n            return uint256(1e18).add(\r\n                value.sub(1e18).mul(leverageRatio)\r\n            );\r\n        } else {\r\n            return uint256(1e18).sub(\r\n                uint256(1e18).sub(value).mul(leverageRatio)\r\n            );\r\n        }\r\n    }\r\n\r\n    function openPosition(\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        uint256 amount,\r\n        uint256 leverageRatio,\r\n        uint256 stopLossValue,\r\n        uint256 takeProfitValue\r\n    )\r\n        external\r\n        payable\r\n        onlyOwner\r\n        returns(uint256)\r\n    {\r\n        _stopLoss = stopLossValue;\r\n        _takeProfit = takeProfitValue;\r\n\r\n        debt.universalTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _flashLoan(\r\n            debt,\r\n            amount.mul(leverageRatio.sub(1)),\r\n            abi.encodeWithSelector(\r\n                this.openPositionCallback.selector,\r\n                collateral,\r\n                debt,\r\n                amount,\r\n                leverageRatio\r\n                // repayAmount added dynamically in executeOperation\r\n            )\r\n        );\r\n\r\n        return collateralAmount(collateral);\r\n    }\r\n\r\n    function openPositionCallback(\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        uint256 amount,\r\n        uint256 leverageRatio,\r\n        uint256 repayAmount\r\n    )\r\n        external\r\n        onlyCallback\r\n    {\r\n        uint256 value = _exchange(debt, collateral, amount.mul(leverageRatio));\r\n        _deposit(collateral, value);\r\n        _borrow(debt, repayAmount);\r\n        _repayFlashLoan(debt, repayAmount);\r\n    }\r\n\r\n    function closePosition(\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        address user\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 borrowedAmount = borrowAmount(debt);\r\n\r\n        _flashLoan(\r\n            debt,\r\n            borrowedAmount,\r\n            abi.encodeWithSelector(\r\n                this.closePositionCallback.selector,\r\n                collateral,\r\n                debt,\r\n                user,\r\n                borrowedAmount\r\n                // repayAmount added dynamically in executeOperation\r\n            )\r\n        );\r\n    }\r\n\r\n    function closePositionCallback(\r\n        IERC20 collateral,\r\n        IERC20 debt,\r\n        address user,\r\n        uint256 borrowedAmount,\r\n        uint256 repayAmount\r\n    )\r\n        external\r\n        onlyCallback\r\n    {\r\n        _repay(debt, borrowedAmount);\r\n        _redeemAll(collateral);\r\n        uint256 returnedAmount = _exchange(collateral, debt, collateral.universalBalanceOf(address(this)));\r\n        _repayFlashLoan(debt, repayAmount);\r\n        debt.universalTransfer(user, returnedAmount.sub(repayAmount));\r\n    }\r\n\r\n    // Internals for overriding\r\n\r\n    function _flashLoan(IERC20 asset, uint256 amount, bytes memory data) internal;\r\n    function _repayFlashLoan(IERC20 token, uint256 amount) internal;\r\n\r\n    function _exchange(IERC20 fromToken, IERC20 toToken, uint256 amount) internal returns(uint256);\r\n\r\n    function _pnl(IERC20 collateral, IERC20 debt) internal returns(uint256);\r\n    function _deposit(IERC20 token, uint256 amount) internal;\r\n    function _redeem(IERC20 token, uint256 amount) internal;\r\n    function _redeemAll(IERC20 token) internal;\r\n    function _borrow(IERC20 token, uint256 amount) internal;\r\n    function _repay(IERC20 token, uint256 amount) internal;\r\n}\r\n\r\n// File: contracts/interface/aave/IFlashLoanReceiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IFlashLoanReceiver {\r\n    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts/interface/aave/ILendingPool.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface ILendingPool {\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\r\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\r\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\r\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\r\n}\r\n\r\n// File: contracts/FlashLoanAave.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FlashLoanAave {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    ILendingPool public constant POOL = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\r\n    address public constant CORE = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\r\n\r\n    function _flashLoan(IERC20 token, uint256 amount, bytes memory data) internal {\r\n        POOL.flashLoan(\r\n            address(this),\r\n            address(token),\r\n            amount,\r\n            data\r\n        );\r\n    }\r\n\r\n    function _repayFlashLoan(IERC20 token, uint256 amount) internal {\r\n        token.universalTransfer(CORE, amount);\r\n    }\r\n\r\n    // Callback for Aave flashLoan\r\n    function executeOperation(\r\n        address /*reserve*/,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata params\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender == address(POOL), \"Access denied, only pool alowed\");\r\n        (bool success, bytes memory data) = address(this).call(abi.encodePacked(params, amount.add(fee)));\r\n        require(success, string(abi.encodePacked(\"External call failed: \", data)));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IOneSplit {\r\n\r\n    // disableFlags = FLAG_UNISWAP + FLAG_KYBER + ...\r\n    uint256 constant public FLAG_UNISWAP = 0x01;\r\n    uint256 constant public FLAG_KYBER = 0x02;\r\n    uint256 constant public FLAG_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\r\n    uint256 constant public FLAG_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\r\n    uint256 constant public FLAG_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\r\n    uint256 constant public FLAG_BANCOR = 0x04;\r\n    uint256 constant public FLAG_OASIS = 0x08;\r\n    uint256 constant public FLAG_COMPOUND = 0x10;\r\n    uint256 constant public FLAG_FULCRUM = 0x20;\r\n    uint256 constant public FLAG_CHAI = 0x40;\r\n    uint256 constant public FLAG_AAVE = 0x80;\r\n    uint256 constant public FLAG_SMART_TOKEN = 0x100;\r\n    uint256 constant public FLAG_MULTI_PATH_ETH = 0x200; // Turned off by default\r\n\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution // [Uniswap, Kyber, Bancor, Oasis]\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution, // [Uniswap, Kyber, Bancor, Oasis]\r\n        uint256 disableFlags // 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\r\n    )\r\n        public\r\n        payable;\r\n\r\n    function goodSwap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256 parts,\r\n        uint256 disableFlags // 1 - Uniswap, 2 - Kyber, 4 - Bancor, 8 - Oasis, 16 - Compound, 32 - Fulcrum, 64 - Chai, 128 - Aave, 256 - SmartToken\r\n    )\r\n        public\r\n        payable;\r\n}\r\n\r\n// File: contracts/ExchangeOneSplit.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ExchangeOneSplit {\r\n\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    IOneSplit public constant ONE_SPLIT = IOneSplit(0xDFf2AA5689FCBc7F479d8c84aC857563798436DD);\r\n\r\n    function _exchange(IERC20 fromToken, IERC20 toToken, uint256 amount) internal returns(uint256) {\r\n        fromToken.universalApprove(address(ONE_SPLIT), amount);\r\n\r\n        uint256 beforeBalance = toToken.universalBalanceOf(address(this));\r\n        ONE_SPLIT.goodSwap.value(fromToken.isETH() ? amount : 0)(\r\n            fromToken,\r\n            toToken,\r\n            amount,\r\n            0,\r\n            1,\r\n            0\r\n        );\r\n\r\n        return toToken.universalBalanceOf(address(this)).sub(beforeBalance);\r\n    }\r\n}\r\n\r\n// File: contracts/interface/compound/IPriceOracle.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IPriceOracle {\r\n    /**\r\n      * @notice Get the underlying price of a cToken asset\r\n      * @param cToken The cToken to get the underlying price of\r\n      * @return The underlying asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/compound/ICompoundController.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ninterface ICompoundController {\r\n    function oracle() external view returns(IPriceOracle);\r\n    function enterMarkets(address[] calldata cTokens) external returns(uint256[] memory);\r\n    function checkMembership(address account, address cToken) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interface/compound/ICERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract ICERC20 is IERC20 {\r\n    function comptroller() external view returns(ICompoundController);\r\n    function balanceOfUnderlying(address account) external returns(uint256);\r\n    function borrowBalanceCurrent(address account) external returns(uint256);\r\n\r\n    function mint() external payable;\r\n    function mint(uint256 amount) external returns(uint256);\r\n    function redeem(uint256 amount) external returns(uint256);\r\n    function borrow(uint256 amount) external returns(uint256);\r\n    function repayBorrow() external payable returns (uint256);\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n}\r\n\r\n// File: contracts/ProtocolCompound.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ProtocolCompound {\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for IERC20;\r\n\r\n    function collateralAmount(IERC20 token) public returns(uint256) {\r\n        return _getCToken(token).balanceOfUnderlying(address(this));\r\n    }\r\n\r\n    function borrowAmount(IERC20 token) public returns(uint256) {\r\n        return _getCToken(token).borrowBalanceCurrent(address(this));\r\n    }\r\n\r\n    function _pnl(IERC20 collateral, IERC20 debt) internal returns(uint256) {\r\n        ICERC20 cCollateral = _getCToken(collateral);\r\n        ICERC20 cDebt = _getCToken(debt);\r\n        IPriceOracle oracle = cCollateral.comptroller().oracle();\r\n        return oracle.getUnderlyingPrice(address(cCollateral)).mul(collateralAmount(collateral))\r\n            .mul(1e18)\r\n            .div(\r\n                oracle.getUnderlyingPrice(address(cDebt)).mul(borrowAmount(debt))\r\n            );\r\n    }\r\n\r\n    function _deposit(IERC20 token, uint256 amount) internal {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (!cToken.comptroller().checkMembership(address(this), address(cToken))) {\r\n            _enterMarket(cToken);\r\n        }\r\n\r\n        if (token.isETH()) {\r\n            // cToken.mint.value(amount)();\r\n            // TypeError: Member \"mint\" not unique after argument-dependent lookup in contract ICERC20.\r\n            (bool success,) = address(cToken).call.value(amount)(abi.encodeWithSignature(\"mint()\"));\r\n            require(success);\r\n        } else {\r\n            token.universalApprove(address(cToken), amount);\r\n            cToken.mint(amount);\r\n        }\r\n    }\r\n\r\n    function _redeem(IERC20 token, uint256 amount) internal {\r\n        ICERC20 cToken = _getCToken(token);\r\n        cToken.redeem(amount);\r\n    }\r\n\r\n    function _redeemAll(IERC20 token) internal {\r\n        ICERC20 cToken = _getCToken(token);\r\n        _redeem(token, IERC20(cToken).universalBalanceOf(address(this)));\r\n    }\r\n\r\n    function _borrow(IERC20 token, uint256 amount) internal {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (!cToken.comptroller().checkMembership(address(this), address(cToken))) {\r\n            _enterMarket(cToken);\r\n        }\r\n\r\n        cToken.borrow(amount);\r\n    }\r\n\r\n    function _repay(IERC20 token, uint256 amount) internal {\r\n        ICERC20 cToken = _getCToken(token);\r\n        if (token.isETH()) {\r\n            // cToken.repayBorrow.value(amount)();\r\n            // TypeError: Member \"repayBorrow\" not unique after argument-dependent lookup in contract ICERC20.\r\n            (bool success,) = address(cToken).call.value(amount)(abi.encodeWithSignature(\"repayBorrow()\"));\r\n            require(success);\r\n        } else {\r\n            token.universalApprove(address(cToken), amount);\r\n            cToken.repayBorrow(amount);\r\n        }\r\n    }\r\n\r\n    // Private\r\n\r\n    function _getCToken(IERC20 token) private pure returns(ICERC20) {\r\n        if (token == IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F)) {  // DAI\r\n            return ICERC20(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);  // cDAI\r\n        } else if (token == IERC20(0)) { // ETH\r\n            return ICERC20(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);  // cETH\r\n        } else {\r\n            require(false, \"Unsupported token\");\r\n        }\r\n    }\r\n\r\n    function _enterMarket(ICERC20 cToken) private {\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = address(cToken);\r\n        cToken.comptroller().enterMarkets(tokens);\r\n    }\r\n}\r\n\r\n// File: contracts/HolderOne.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HolderOne is\r\n    HolderBase,\r\n    FlashLoanAave,\r\n    ExchangeOneSplit,\r\n    ProtocolCompound\r\n{\r\n}","ABI":"[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_SPLIT\",\"outputs\":[{\"internalType\":\"contract IOneSplit\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"borrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"closePosition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"closePositionCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLossValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeProfitValue\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"openPositionCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverageRatio\",\"type\":\"uint256\"}],\"name\":\"pnl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"takeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HolderOne","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://76429166d10ee4f019c861f3c88832bfe778a317a49650e0ad78584003f918a4"}]}