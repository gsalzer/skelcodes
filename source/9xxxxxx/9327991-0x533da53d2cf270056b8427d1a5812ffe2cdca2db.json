{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Blocklock\r\n * @author Brendan Asselstine\r\n * @notice A time lock with a cooldown period.  When locked, the contract will remain locked until it is unlocked manually\r\n * or the lock duration expires.  After the contract is unlocked, it cannot be locked until the cooldown duration expires.\r\n */\r\nlibrary Blocklock {\r\n  using SafeMath for uint256;\r\n\r\n  struct State {\r\n    uint256 lockedAt;\r\n    uint256 unlockedAt;\r\n    uint256 lockDuration;\r\n    uint256 cooldownDuration;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the duration of the lock.  This how long the lock lasts before it expires and automatically unlocks.\r\n   * @param self The Blocklock state\r\n   * @param lockDuration The duration, in blocks, that the lock should last.\r\n   */\r\n  function setLockDuration(State storage self, uint256 lockDuration) public {\r\n    require(lockDuration > 0, \"Blocklock/lock-min\");\r\n    self.lockDuration = lockDuration;\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the cooldown duration in blocks.  This is the number of blocks that must pass before being able to\r\n   * lock again.  The cooldown duration begins when the lock duration expires, or when it is unlocked manually.\r\n   * @param self The Blocklock state\r\n   * @param cooldownDuration The duration of the cooldown, in blocks.\r\n   */\r\n  function setCooldownDuration(State storage self, uint256 cooldownDuration) public {\r\n    require(cooldownDuration > 0, \"Blocklock/cool-min\");\r\n    self.cooldownDuration = cooldownDuration;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns whether the state is locked at the given block number.\r\n   * @param self The Blocklock state\r\n   * @param blockNumber The current block number.\r\n   */\r\n  function isLocked(State storage self, uint256 blockNumber) public view returns (bool) {\r\n    uint256 endAt = lockEndAt(self);\r\n    return (\r\n      self.lockedAt != 0 &&\r\n      blockNumber >= self.lockedAt &&\r\n      blockNumber < endAt\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Locks the state at the given block number.\r\n   * @param self The Blocklock state\r\n   * @param blockNumber The block number to use as the lock start time\r\n   */\r\n  function lock(State storage self, uint256 blockNumber) public {\r\n    require(canLock(self, blockNumber), \"Blocklock/no-lock\");\r\n    self.lockedAt = blockNumber;\r\n  }\r\n\r\n  /**\r\n   * @notice Manually unlocks the lock.\r\n   * @param self The Blocklock state\r\n   * @param blockNumber The block number at which the lock is being unlocked.\r\n   */\r\n  function unlock(State storage self, uint256 blockNumber) public {\r\n    self.unlockedAt = blockNumber;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns whether the Blocklock can be locked at the given block number\r\n   * @param self The Blocklock state\r\n   * @param blockNumber The block number to check against\r\n   * @return True if we can lock at the given block number, false otherwise.\r\n   */\r\n  function canLock(State storage self, uint256 blockNumber) public view returns (bool) {\r\n    uint256 endAt = lockEndAt(self);\r\n    return (\r\n      self.lockedAt == 0 ||\r\n      blockNumber >= endAt.add(self.cooldownDuration)\r\n    );\r\n  }\r\n\r\n  function cooldownEndAt(State storage self) internal view returns (uint256) {\r\n    return lockEndAt(self).add(self.cooldownDuration);\r\n  }\r\n\r\n  function lockEndAt(State storage self) internal view returns (uint256) {\r\n    uint256 endAt = self.lockedAt.add(self.lockDuration);\r\n    // if we unlocked early\r\n    if (self.unlockedAt >= self.lockedAt && self.unlockedAt < endAt) {\r\n      endAt = self.unlockedAt;\r\n    }\r\n    return endAt;\r\n  }\r\n}","ABI":"[]","ContractName":"Blocklock","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://14c31ecd27e4a04266cdd008de0d8bfab86501f0cec018a415febdb7728a472c"}]}