{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-12-13\r\n*/\r\n\r\npragma solidity >= 0.5.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary ECDSA {\r\n    \r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        \r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        \r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        \r\n        \r\n        \r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        \r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    \r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        \r\n        \r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\ncontract Escrow {\r\n\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n\r\n    event FundsDeposited(address indexed buyer, uint256 amount);\r\n    event FundsRefunded();\r\n    event FundsReleased(address indexed seller, uint256 amount);\r\n    event DisputeResolved();\r\n    event OwnershipTransferred(address indexed oldOwner, address newOwner);\r\n    event MediatorChanged(address indexed oldMediator, address newMediator);\r\n\r\n    bytes32 escrowID;\r\n    uint256 amount;\r\n    uint256 fee;\r\n    address payable public owner;\r\n    address payable public mediator;\r\n    address payable public feeCollector;\r\n    address payable public buyer;\r\n    address payable public seller;\r\n    bool public initialized = false;\r\n    bool public funded = false;\r\n    bool public completed = false;\r\n    bytes32 public releaseMsgHash;\r\n    bytes32 public resolveMsgHash;\r\n\r\n    modifier onlyExactAmount(uint256 _amount) {\r\n        require(_amount == depositAmount(), \"Amount needs to be exact.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBuyer() {\r\n        require(msg.sender == buyer, \"Only the buyer can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithBuyerSignature(bytes32 hash, bytes memory signature) {\r\n        require(\r\n            hash.toEthSignedMessageHash()\r\n                .recover(signature) == buyer,\r\n            \"Must be signed by buyer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyWithParticipantSignature(bytes32 hash, bytes memory signature) {\r\n        address signer = hash.toEthSignedMessageHash()\r\n            .recover(signature);\r\n        require(\r\n            signer == buyer || signer == seller,\r\n            \"Must be signed by either buyer or seller.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlySeller() {\r\n        require(msg.sender == seller, \"Only the seller can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMediator() {\r\n        require(msg.sender == mediator, \"Only the mediator can call this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUninitialized() {\r\n        require(initialized == false, \"Escrow already initialized.\");\r\n        initialized = true;\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnfunded() {\r\n        require(funded == false, \"Escrow already funded.\");\r\n        funded = true;\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunded() {\r\n        require(funded == true, \"Escrow not funded.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyIncompleted() {\r\n        require(completed == false, \"Escrow already completed.\");\r\n        completed = true;\r\n        _;\r\n    }\r\n\r\n    function init(\r\n        bytes32 _escrowID,\r\n        address payable _owner,\r\n        address payable _feeCollector,\r\n        address payable _buyer,\r\n        address payable  _seller,\r\n        uint256 _amount,\r\n        uint256 _fee\r\n    )\r\n        external\r\n        onlyUninitialized\r\n    {\r\n        escrowID = _escrowID;\r\n        amount = _amount;\r\n        fee = _fee;\r\n        buyer = _buyer;\r\n        seller = _seller;\r\n        feeCollector = _feeCollector;\r\n        owner = _owner;\r\n        mediator = _owner;\r\n        releaseMsgHash = keccak256(\r\n            abi.encodePacked(\"releaseFunds()\", escrowID, address(this))\r\n        );\r\n        resolveMsgHash = keccak256(\r\n            abi.encodePacked(\"resolveDispute()\", escrowID, address(this))\r\n        );\r\n        emit OwnershipTransferred(address(0), _owner);\r\n        emit MediatorChanged(address(0), _owner);\r\n    }\r\n\r\n    function () external payable {\r\n        deposit();\r\n    }\r\n\r\n    function depositAmount() public view returns (uint256) {\r\n        return amount.add(fee);\r\n    }\r\n\r\n    function deposit()\r\n        public\r\n        payable\r\n        onlyBuyer\r\n        onlyUnfunded\r\n        onlyExactAmount(msg.value)\r\n    {\r\n        emit FundsDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    function refund()\r\n        public\r\n        onlySeller\r\n        onlyFunded\r\n        onlyIncompleted\r\n    {\r\n        buyer.transfer(depositAmount());\r\n        emit FundsRefunded();\r\n    }\r\n\r\n    function _releaseFees() private {\r\n        if (owner != mediator) {\r\n            feeCollector.transfer(fee);\r\n            mediator.transfer(fee);\r\n        } else {\r\n            feeCollector.transfer(fee.mul(2));\r\n        }\r\n    }\r\n\r\n    function releaseFunds(\r\n        bytes calldata _signature\r\n    )\r\n        external\r\n        onlyFunded\r\n        onlyIncompleted\r\n        onlyWithBuyerSignature(releaseMsgHash, _signature)\r\n    {\r\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\r\n        emit FundsReleased(seller, releaseAmount);\r\n        seller.transfer(releaseAmount);\r\n        _releaseFees();\r\n    }\r\n\r\n    function resolveDispute(\r\n        bytes calldata _signature,\r\n        uint8 _buyerPercent\r\n    )\r\n        external\r\n        onlyFunded\r\n        onlyMediator\r\n        onlyIncompleted\r\n        onlyWithParticipantSignature(resolveMsgHash, _signature)\r\n    {\r\n        require(_buyerPercent <= 100, \"_buyerPercent must be 100 or lower\");\r\n        uint256 releaseAmount = depositAmount().sub(fee.mul(2));\r\n\r\n        emit DisputeResolved();\r\n\r\n        if (_buyerPercent > 0)\r\n          buyer.transfer(releaseAmount.mul(uint256(_buyerPercent)).div(100));\r\n        if (_buyerPercent < 100)\r\n          seller.transfer(releaseAmount.mul(uint256(100).sub(_buyerPercent)).div(100));\r\n\r\n        _releaseFees();\r\n    }\r\n\r\n    function setOwner(address payable _newOwner) external onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setMediator(address payable _newMediator) external onlyOwner {\r\n        emit MediatorChanged(mediator, _newMediator);\r\n        mediator = _newMediator;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrowID\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_feeCollector\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMediator\",\"type\":\"address\"}],\"name\":\"setMediator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_buyerPercent\",\"type\":\"uint8\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseMsgHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolveMsgHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FundsRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldMediator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newMediator\",\"type\":\"address\"}],\"name\":\"MediatorChanged\",\"type\":\"event\"}]","ContractName":"Escrow","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://69018343d730d66ee4960a1c69d4aa4feba2b9fbd1894887fa78a27a0250c2e5"}]}