{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowed;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address addr) public view returns (uint256) {\r\n        return _balances[addr];\r\n    }\r\n\r\n    function allowance(address addr, address spender) public view returns (uint256) {\r\n        return _allowed[addr][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract SmartPool250 is ERC20, Ownable {\r\n\r\n    string private _name = \"Smartsel\";\r\n    string private _symbol = \"SATL\";\r\n    uint8 private _decimals = 18;\r\n\r\n    struct StartUp {\r\n        address account;\r\n        uint256 goal;\r\n        uint256 time;\r\n        uint256[] accumulated;\r\n    }\r\n\r\n    StartUp startup;\r\n\r\n    struct User {\r\n        bool active;\r\n        uint256 time;\r\n        uint256 checkpoint;\r\n        uint256 reserved;\r\n    }\r\n\r\n    mapping (address => User) holders;\r\n    mapping (uint256 => uint256) activated;\r\n\r\n    uint256 public amountOfStakes;\r\n\r\n    uint256 public stakingRequirement = 10e18;\r\n    uint256 public limitOfStakes = 250;\r\n    uint256 public holderReward = 10e18;\r\n\r\n    uint256 tokenPriceIncremental = 0.00001 ether;\r\n    uint256 magnitude = 1e18;\r\n\r\n    uint256 date;\r\n    uint256 public period = 30 days;\r\n\r\n    address payable public wallet;\r\n    address payable public dev;\r\n\r\n    IERC20 public BITL;\r\n    uint256 public priceBITL = 1e18;\r\n    bool public ownerMode;\r\n    bool public deprecated;\r\n\r\n    event Purchased(address indexed sender, address indexed recipient, uint256 amountSATL);\r\n    event Sold(address indexed sender, address indexed recipient, uint256 amountSATL, uint256 amountETH);\r\n    event StakeActivated(address indexed account, uint256 time);\r\n    event StakeDeactivated(address indexed account, uint256 time);\r\n    event DividendsPayed(address indexed account, address indexed recipient, uint256 amount);\r\n    event ExchangedSATLtoBITL(address indexed from, address indexed recipient,  uint256 amountSATL, uint256 amountBITL);\r\n    event ExchangedBITLtoETH(address indexed from, address indexed recipient, uint256 amountBITL, uint256 amountETH);\r\n    event InitStartUp(address wallet, uint256 goal);\r\n    event EndStartUp(address wallet, uint256 goal);\r\n    event Donate(address indexed sender, uint256 amount);\r\n\r\n    constructor(address BITLAddr, address payable walletAddr, address payable devAddr) public {\r\n        require(BITLAddr != address(0) && walletAddr != address(0) && devAddr != address(0));\r\n\r\n        date = block.timestamp;\r\n        BITL = IERC20(BITLAddr);\r\n        wallet = walletAddr;\r\n        dev = devAddr;\r\n\r\n        ownerMode = true;\r\n\r\n        purchase(msg.sender);\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value > 0) {\r\n            purchase(msg.sender);\r\n        } else {\r\n            withdrawDividends(msg.sender);\r\n        }\r\n    }\r\n\r\n    modifier createStake(address account, uint256 value) {\r\n        _;\r\n        if (\r\n            _balances[account] >= stakingRequirement &&\r\n            _balances[account].sub(value) < stakingRequirement &&\r\n            amountOfStakes < limitOfStakes\r\n            ) {\r\n\r\n            if (startup.account != address(0))  {\r\n                accumulate();\r\n            }\r\n\r\n            holders[account].active = true;\r\n            holders[account].time = block.timestamp;\r\n            holders[account].checkpoint = block.timestamp;\r\n\r\n            amountOfStakes++;\r\n\r\n            uint256 idx = (block.timestamp.sub(date)).div(period);\r\n            activated[idx]++;\r\n\r\n            emit StakeActivated(account, block.timestamp);\r\n\r\n        }\r\n    }\r\n\r\n    modifier removeStake(address account, uint256 value) {\r\n        _;\r\n        if (\r\n            _balances[account] < stakingRequirement &&\r\n            _balances[account].add(value) >= stakingRequirement\r\n            ) {\r\n\r\n            if (startup.account != address(0))  {\r\n                accumulate();\r\n            }\r\n\r\n            uint256 divs = getDividends(account);\r\n            if (divs > 0) {\r\n                holders[account].reserved = divs;\r\n            }\r\n            holders[account].active = false;\r\n\r\n            amountOfStakes--;\r\n\r\n            uint256 idx = (block.timestamp.sub(date)).div(period);\r\n            if (idx == (holders[account].time.sub(date)).div(period)) {\r\n                activated[idx]--;\r\n            }\r\n\r\n            emit StakeDeactivated(account, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function accumulate() internal {\r\n        uint256 idx = (block.timestamp - ((startup.time - date) / period * period + date)) / period;\r\n\r\n        if (idx > 0 && startup.accumulated.length < idx) {\r\n            uint256 len = startup.accumulated.length;\r\n            for (uint256 i = 0; i < idx - len; i++) {\r\n                startup.accumulated.push(amountOfStakes * holderReward);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal removeStake(from, value) createStake(to, value) {\r\n        require(from != to);\r\n\r\n        super._transfer(from, to, value);\r\n\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal createStake(account, value) {\r\n\r\n        super._mint(account, value);\r\n\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal removeStake(account, amount) {\r\n\r\n        super._burn(account, amount);\r\n\r\n    }\r\n\r\n    function purchase(address recipient) public payable {\r\n\r\n        uint256 value;\r\n        uint256 amount;\r\n        uint256 allowed = BITL.allowance(recipient, address(this));\r\n\r\n        if (msg.value > 0) {\r\n            value = msg.value;\r\n        } else if (allowed > 0) {\r\n            value = allowed.mul(priceBITL).mul(getCurrentPrice()).div(magnitude).div(magnitude);\r\n            BITL.transferFrom(recipient, address(this), allowed);\r\n        }\r\n\r\n        if (amountOfStakes > 0) {\r\n            amount = value.div(getCurrentPrice()).mul(magnitude);\r\n        } else {\r\n            amount = 10e18;\r\n        }\r\n\r\n        _purchase(recipient, amount);\r\n\r\n    }\r\n\r\n    function _purchase(address recipient, uint256 value) internal {\r\n\r\n        _mint(recipient, value);\r\n\r\n        emit Purchased(msg.sender, recipient, value);\r\n    }\r\n\r\n    function sell(address payable recipient, uint256 value) public {\r\n\r\n        uint256 amountETH = value.mul(getCurrentPrice()).div(magnitude);\r\n\r\n        _burn(msg.sender, value);\r\n\r\n        recipient.transfer(amountETH);\r\n\r\n        emit Sold(msg.sender, recipient, value, amountETH);\r\n    }\r\n\r\n    function withdrawDividends(address recipient) public {\r\n        require(holders[msg.sender].active);\r\n\r\n        uint256 reward = getDividends(msg.sender);\r\n\r\n        holders[msg.sender].checkpoint = block.timestamp;\r\n        holders[msg.sender].reserved = 0;\r\n\r\n        _mint(recipient, reward);\r\n\r\n        emit DividendsPayed(msg.sender, recipient, reward);\r\n    }\r\n\r\n    function receiveApproval(address account, uint256 value, address token, bytes memory extraData) public {\r\n        require(token == address(BITL));\r\n        uint256 uintData;\r\n        assembly { uintData := mload(add(extraData, add(0x20, 0))) }\r\n        if (uintData == 0) {\r\n            purchase(account);\r\n        } else {\r\n            exchangeBITLtoETH(account, account, value);\r\n        }\r\n    }\r\n\r\n    function exchangeBITLtoETH(address from, address recipient, uint256 value) public {\r\n        if (ownerMode) {\r\n            require(isOwner(tx.origin));\r\n        }\r\n\r\n        uint256 amountETH = value.mul(priceBITL).mul(getCurrentPrice()).div(magnitude).div(magnitude);\r\n\r\n        BITL.transferFrom(from, address(this), value);\r\n        address(uint160(recipient)).transfer(amountETH);\r\n\r\n        emit ExchangedBITLtoETH(from, recipient, value, amountETH);\r\n    }\r\n\r\n    function exchangeSATLtoBITL(address recipient, uint256 value) public {\r\n\r\n        uint256 amountBITL = value.mul(priceBITL).div(magnitude);\r\n\r\n        _burn(msg.sender, value);\r\n        BITL.transfer(recipient, amountBITL);\r\n\r\n        emit ExchangedSATLtoBITL(msg.sender, recipient, value, amountBITL);\r\n    }\r\n\r\n    function initiateStartUp(address account, uint256 goal) public onlyOwner {\r\n        require(account != address(0));\r\n\r\n        startup.account = account;\r\n        startup.goal = goal;\r\n        startup.time = block.timestamp;\r\n        startup.accumulated.push(payouts().mul(holderReward).mul(nextDate().sub(block.timestamp)).div(period));\r\n\r\n        emit InitStartUp(account, goal);\r\n    }\r\n\r\n    function setStartUpWallet(address payable account) public onlyOwner {\r\n        require(account != address(0));\r\n\r\n        startup.account = account;\r\n    }\r\n\r\n    function setStartUpGoal(uint256 goal) public onlyOwner {\r\n        require(goal != 0);\r\n\r\n        startup.goal = goal;\r\n    }\r\n\r\n    function payToStartUp() public onlyOwner {\r\n\r\n        uint256 amount = getAccumulated();\r\n\r\n        _mint(startup.account, amount.mul(85).div(100));\r\n        _mint(dev, amount.mul(10).div(100));\r\n        _mint(wallet, amount.mul(5).div(100));\r\n\r\n        emit EndStartUp(startup.account, amount);\r\n\r\n        delete startup;\r\n    }\r\n\r\n    function setPriceBITL(uint256 value) public onlyOwner {\r\n        require(value != 0);\r\n        priceBITL = value;\r\n    }\r\n\r\n    function switchOwnerMode() public onlyOwner {\r\n        if (!ownerMode) {\r\n            ownerMode = true;\r\n        } else {\r\n            ownerMode = false;\r\n        }\r\n    }\r\n\r\n    function switchDeprecated() public onlyOwner {\r\n        if (!deprecated) {\r\n            deprecated = true;\r\n        } else {\r\n            deprecated = false;\r\n        }\r\n    }\r\n\r\n    function setWallet(address payable account) public onlyOwner {\r\n        require(account != address(0));\r\n\r\n        wallet = account;\r\n    }\r\n\r\n    function withdraw(address payable recipient, uint256 value) public onlyOwner {\r\n\r\n        recipient.transfer(value);\r\n\r\n    }\r\n\r\n    function donate() public payable {\r\n\r\n        uint256 allowed = BITL.allowance(msg.sender, address(this));\r\n\r\n        if (allowed > 0) {\r\n            BITL.transferFrom(msg.sender, address(this), allowed);\r\n        }\r\n\r\n        emit Donate(msg.sender, msg.value);\r\n\r\n    }\r\n\r\n    function getDividends(address account) public view returns(uint256) {\r\n        if (deprecated) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 reward = holders[account].reserved;\r\n\r\n        if (holders[account].active) {\r\n            if (holders[account].time == holders[account].checkpoint) {\r\n\r\n                if (block.timestamp < (holders[account].time - date) / period * period + period + date) {\r\n\r\n                    reward = 0;\r\n\r\n                } else {\r\n                    uint256 next = ((holders[account].time - date) / period * period + period + date);\r\n\r\n                    uint256 multiplier = (block.timestamp - next) / period;\r\n\r\n                    reward = holderReward * (next - holders[account].time) / period + holderReward * multiplier;\r\n\r\n                    return reward;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (block.timestamp < (holders[account].checkpoint - date) / period * period + period + date) {\r\n\r\n                    reward = 0;\r\n\r\n                } else {\r\n                    uint256 multiplier = (block.timestamp - ((holders[account].checkpoint - date) / period * period + date)) / period;\r\n\r\n                    reward = holderReward * multiplier;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return reward;\r\n\r\n    }\r\n\r\n    function getAccumulated() public view returns(uint256) {\r\n        if (startup.account == address(0)) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 payout;\r\n\r\n        uint256 idx = (block.timestamp - ((startup.time - date) / period * period + date)) / period;\r\n        if (idx == 0) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint256 i = 0; i < startup.accumulated.length; i++) {\r\n\r\n            payout += startup.accumulated[i];\r\n\r\n        }\r\n\r\n        if (idx > startup.accumulated.length) {\r\n            for (uint256 i = 0; i < idx - startup.accumulated.length; i++) {\r\n\r\n                payout += amountOfStakes * holderReward;\r\n\r\n            }\r\n        }\r\n\r\n        if (payout < startup.goal) {\r\n            return payout;\r\n        } else {\r\n            return startup.goal;\r\n        }\r\n\r\n    }\r\n\r\n    function activatedStakes() public view returns(uint256) {\r\n        return activated[(block.timestamp - date) / period];\r\n    }\r\n\r\n    function payouts() public view returns(uint256) {\r\n        return amountOfStakes - activatedStakes();\r\n    }\r\n\r\n    function getCurrentPrice() public view returns(uint256) {\r\n        uint256 price = ((5e16 + activatedStakes() * tokenPriceIncremental) - (5e16 - payouts() * tokenPriceIncremental)) * magnitude / (5e16 + activatedStakes() * tokenPriceIncremental);\r\n        uint256 inaccuracy = price % tokenPriceIncremental;\r\n        if (inaccuracy > 0) {\r\n            price = price - inaccuracy + tokenPriceIncremental;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getAmountOfFreeStakes() public view returns(uint256) {\r\n        return limitOfStakes - amountOfStakes;\r\n    }\r\n\r\n    function nextDate() public view returns(uint256) {\r\n        return(date + period + (block.timestamp - date) / period * period);\r\n    }\r\n\r\n    function getStartUpInfo() public view returns(address, uint256) {\r\n        return(startup.account, startup.goal);\r\n    }\r\n\r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"exchangeBITLtoETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BITL\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setStartUpWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payToStartUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAmountOfFreeStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchDeprecated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccumulated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"switchOwnerMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartUpInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"setStartUpGoal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"initiateStartUp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holderReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPriceBITL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerMode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceBITL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"exchangeSATLtoBITL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitOfStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activatedStakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"BITLAddr\",\"type\":\"address\"},{\"name\":\"walletAddr\",\"type\":\"address\"},{\"name\":\"devAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSATL\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSATL\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StakeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StakeDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSATL\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBITL\",\"type\":\"uint256\"}],\"name\":\"ExchangedSATLtoBITL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountBITL\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"ExchangedBITLtoETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"InitStartUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"EndStartUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SmartPool250","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000075d5851226b663fd015b6d1c5b174c77d2b931000000000000000000000000054c04c2f23077385e06087e53c92642f667d28f2000000000000000000000000f76e4656474c7c293d96f57f8a2e40b9872f6c0a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d26eebc314e2eb59950a5c10ae39167cd9ef17263b2d5278f8f11dea5991edf3"}]}