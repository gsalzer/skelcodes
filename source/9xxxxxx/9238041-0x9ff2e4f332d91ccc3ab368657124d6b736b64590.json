{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Roles.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping(address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n  function add(Role storage role, address account) internal {\r\n    require(!has(role, account), 'Roles: account already has role');\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n  function remove(Role storage role, address account) internal {\r\n    require(has(role, account), 'Roles: account does not have role');\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0), 'Roles: account is the zero address');\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: contracts/Initializable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(\r\n      initializing || isConstructor() || !initialized,\r\n      'Contract instance has already been initialized'\r\n    );\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly {\r\n      cs := extcodesize(address)\r\n    } // solhint-disable-line\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private initializableGap;\r\n}\r\n\r\n// File: contracts/Context.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor() internal {} // solhint-disable-line\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n  function div(uint256 a, uint256 b, string memory errorMessage)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n  {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n  function transferFrom(address sender, address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n  /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC20` interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using `_mint`.\r\n * For a generic mechanism see `ERC20Mintable`.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See `IERC20.approve`.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(_msgSender(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _transfer(from, to, value);\r\n        _approve(\r\n            from,\r\n            _msgSender(),\r\n            _allowances[from][_msgSender()].sub(value)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount)\r\n        internal\r\n    {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    uint256[50] private erc20Gap;\r\n}\r\n\r\n// File: contracts/ERC20Detailed.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is ERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function initialize(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    uint256[50] private erc20DetailedGap;\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is ERC20Detailed {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n  function initialize(address sender) public initializer {\r\n    _owner = sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n  function owner() external view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n  function isOwner() public view returns (bool) {\r\n    return _msgSender() == _owner;\r\n  }\r\n\r\n  /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  uint256[50] private ownableGap;\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Ownable {\r\n  /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n  event Paused(address account);\r\n\r\n  /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n  function initialize() public initializer {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n  function paused() external view returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n  modifier whenNotPaused() {\r\n    require(!_paused, 'Pausable: paused');\r\n    _;\r\n  }\r\n\r\n  /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n  modifier whenPaused() {\r\n    require(_paused, 'Pausable: not paused');\r\n    _;\r\n  }\r\n\r\n  /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n  function pause() external onlyOwner whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n  function unpause() external onlyOwner whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n\r\n  uint256[50] private pausableGap;\r\n}\r\n\r\n// File: contracts/AdminRole.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract AdminRole is Pausable {\r\n  using Roles for Roles.Role;\r\n\r\n  event AdminAdded(address indexed account);\r\n  event AdminRemoved(address indexed account);\r\n\r\n  Roles.Role private _admins;\r\n\r\n  modifier onlyAdmin() {\r\n    require(\r\n      isAdmin(_msgSender()),\r\n      'AdminRole: caller does not have the Admin role'\r\n    );\r\n    _;\r\n  }\r\n\r\n  function isAdmin(address account) public view returns (bool) {\r\n    return _admins.has(account);\r\n  }\r\n\r\n  // adding an admin should be possible any time\r\n  function addAdmin(address account) external onlyOwner {\r\n    _addAdmin(account);\r\n  }\r\n\r\n  // removing an admin should be possible any time\r\n  function removeAdmin(address account) external onlyOwner {\r\n    _removeAdmin(account);\r\n  }\r\n\r\n  // renouncing admin role should be possible any time\r\n  function renounceAdmin() external {\r\n    _removeAdmin(_msgSender());\r\n  }\r\n\r\n  function _addAdmin(address account) internal {\r\n    _admins.add(account);\r\n    emit AdminAdded(account);\r\n  }\r\n\r\n  function _removeAdmin(address account) internal {\r\n    _admins.remove(account);\r\n    emit AdminRemoved(account);\r\n  }\r\n\r\n  uint256[50] private adminRoleGap;\r\n}\r\n\r\n// File: contracts/StateManager.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract StateManager is AdminRole {\r\n  event WhitelistedAdded(address indexed account);\r\n  event WhitelistedRemoved(address indexed account);\r\n\r\n  event BlockedAdded(address indexed account);\r\n  event BlockedRemoved(address indexed account);\r\n\r\n  event BlacklistedAdded(address indexed account);\r\n\r\n  enum States { None, Whitelisted, Blacklisted, Blocked }\r\n  mapping(address => uint256) internal addressState;\r\n\r\n  modifier notBlocked() {\r\n    require(!isBlocked(_msgSender()), \"Blocked: caller is not blocked \");\r\n    _;\r\n  }\r\n  modifier notBlacklisted() {\r\n    require(\r\n      !isBlacklisted(_msgSender()),\r\n      \"Blacklisted: caller is not blacklisted\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function isWhitelisted(address account) public view returns (bool) {\r\n    return addressState[account] == uint256(States.Whitelisted);\r\n  }\r\n\r\n  function isBlocked(address account) public view returns (bool) {\r\n    return addressState[account] == uint256(States.Blocked);\r\n  }\r\n\r\n  function isBlacklisted(address account) public view returns (bool) {\r\n    return addressState[account] == uint256(States.Blacklisted);\r\n  }\r\n\r\n  function addWhitelisted(address account) external onlyAdmin whenNotPaused {\r\n    require(!isWhitelisted(account), \"Whitelisted: already whitelisted\");\r\n    require(!isBlocked(account), \"Whitelisted: cannot add Blocked accounts\");\r\n    require(\r\n      !isBlacklisted(account),\r\n      \"Whitelisted: cannot add Blacklisted accounts\"\r\n    );\r\n    _addWhitelisted(account);\r\n  }\r\n\r\n  function addBlocked(address account) external onlyAdmin {\r\n    require(!isBlocked(account), \"Blocked: already blocked\");\r\n    require(\r\n      !isBlacklisted(account),\r\n      \"Blocked: cannot add Blacklisted accounts\"\r\n    );\r\n    _addBlocked(account);\r\n  }\r\n\r\n  function addBlacklisted(address account) external onlyAdmin {\r\n    require(!isBlacklisted(account), \"Blacklisted: already Blacklisted\");\r\n    _addBlacklisted(account);\r\n  }\r\n\r\n  function removeWhitelisted(address account) external onlyAdmin whenNotPaused {\r\n    _removeWhitelisted(account);\r\n  }\r\n\r\n  function removeBlocked(address account) external onlyAdmin whenNotPaused {\r\n    _removeBlocked(account);\r\n  }\r\n\r\n  function renounceWhitelisted() external whenNotPaused {\r\n    _removeWhitelisted(_msgSender());\r\n  }\r\n\r\n  function _addWhitelisted(address account) internal {\r\n    addressState[account] = uint256(States.Whitelisted);\r\n    emit WhitelistedAdded(account);\r\n  }\r\n  function _addBlocked(address account) internal {\r\n    addressState[account] = uint256(States.Blocked);\r\n    emit BlockedAdded(account);\r\n  }\r\n\r\n  function _addBlacklisted(address account) internal {\r\n    addressState[account] = uint256(States.Blacklisted);\r\n    emit BlacklistedAdded(account);\r\n  }\r\n\r\n  function _removeWhitelisted(address account) internal {\r\n    delete addressState[account];\r\n    emit WhitelistedRemoved(account);\r\n  }\r\n\r\n  function _removeBlocked(address account) internal {\r\n    delete addressState[account];\r\n    emit BlockedRemoved(account);\r\n  }\r\n\r\n  uint256[50] private stateManagerGap;\r\n}\r\n\r\n// File: contracts/ERC20Pausable.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev ERC20 modified with pausable transfers.\r\n */\r\ncontract ERC20Pausable is StateManager {\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        whenNotPaused\r\n        notBlacklisted\r\n        notBlocked\r\n        returns (bool)\r\n    {\r\n        require(!isBlacklisted(to), \"Cannot send to Blacklisted Address\");\r\n        require(!isBlocked(to), \"Cannot send to blocked Address\");\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        whenNotPaused\r\n        notBlacklisted\r\n        notBlocked\r\n        returns (bool)\r\n    {\r\n        require(!isBlacklisted(to), \"Cannot send to Blacklisted Address\");\r\n        require(!isBlocked(to), \"Cannot send to blocked Address\");\r\n        require(!isBlacklisted(from), \"Cannot send from Blacklisted Address\");\r\n        require(!isBlocked(from), \"Cannot send from blocked Address\");\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        whenNotPaused\r\n        notBlacklisted\r\n        notBlocked\r\n        returns (bool)\r\n    {\r\n        require(!isBlacklisted(spender), \"Cannot send to Blacklisted Address\");\r\n        require(!isBlocked(spender), \"Cannot send to blocked Address\");\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        whenNotPaused\r\n        notBlacklisted\r\n        notBlocked\r\n        returns (bool)\r\n    {\r\n        require(!isBlacklisted(spender), \"Cannot send to Blacklisted Address\");\r\n        require(!isBlocked(spender), \"Cannot send to blocked Address\");\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        whenNotPaused\r\n        notBlacklisted\r\n        notBlocked\r\n        returns (bool)\r\n    {\r\n        require(!isBlacklisted(spender), \"Cannot send to Blacklisted Address\");\r\n        require(!isBlocked(spender), \"Cannot send to blocked Address\");\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    uint256[50] private erc20PausableGap;\r\n}\r\n\r\n// File: contracts/QCAD.sol\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract QCAD is ERC20Pausable {\r\n  function initialize(\r\n    string calldata name,\r\n    string calldata symbol,\r\n    uint8 decimals,\r\n    address[] calldata admins\r\n  ) external initializer {\r\n    ERC20Detailed.initialize(name, symbol, decimals);\r\n    Ownable.initialize(_msgSender());\r\n    Pausable.initialize();\r\n\r\n    for (uint256 i = 0; i < admins.length; ++i) {\r\n      _addAdmin(admins[i]);\r\n    }\r\n  }\r\n\r\n  function mint(address account, uint256 amount)\r\n    external\r\n    onlyAdmin\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(isWhitelisted(account), \"minting to non-whitelisted address\");\r\n    _mint(account, amount);\r\n    return true;\r\n  }\r\n\r\n  function burn(uint256 amount)\r\n    external\r\n    onlyAdmin\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    _burn(address(this), amount);\r\n    return true;\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pausable","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://69ba2ab4b0ca4c49213d8bd3e016f9cc1ff5b9d28cd922e3050182458dd17ea1"}]}