{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-02-11\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\ncontract IStdToken {\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n}\r\n\r\n\r\n\r\ncontract SwapCommon {\r\n\r\n    mapping(address => bool) private _admins;\r\n    mapping(address => bool) private _services;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_admins[msg.sender], \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(_admins[msg.sender] || _services[msg.sender], \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _admins[msg.sender] = true;\r\n    }\r\n\r\n    function addAdmin(address addr) public onlyAdmin {\r\n        _admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) public onlyAdmin {\r\n        _admins[addr] = false;\r\n    }\r\n\r\n    function isAdmin(address addr) public view returns (bool) {\r\n        return _admins[addr];\r\n    }\r\n\r\n    function addService(address addr) public onlyAdmin {\r\n        _services[addr] = true;\r\n    }\r\n\r\n    function removeService(address addr) public onlyAdmin {\r\n        _services[addr] = false;\r\n    }\r\n\r\n    function isService(address addr) public view returns (bool) {\r\n        return _services[addr];\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract SwapCore is SwapCommon {\r\n\r\n    address public controllerAddress = address(0x0);\r\n\r\n    IStdToken public mntpToken;\r\n\r\n    modifier onlyController() {\r\n        require(controllerAddress == msg.sender, \"not controller\");\r\n        _;\r\n    }\r\n\r\n    constructor(address mntpTokenAddr) SwapCommon() public {\r\n        controllerAddress = msg.sender;\r\n        mntpToken = IStdToken(mntpTokenAddr);\r\n    }\r\n\r\n    function setNewControllerAddress(address newAddress) public onlyController {\r\n        controllerAddress = newAddress;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Swap {\r\n\r\n    SwapCore public core;\r\n\r\n    IStdToken public mntpToken;\r\n\r\n    bool public isActual = true;\r\n    bool public isActive = true;\r\n\r\n    event onSwapMntp(address indexed from, uint256 amount, bytes32 to);\r\n    event onSentMntp(address indexed to, uint256 amount, bytes32 from);\r\n\r\n    modifier onlyAdmin() {\r\n        require(core.isAdmin(msg.sender), \"not admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrService() {\r\n        require(core.isAdmin(msg.sender) || core.isService(msg.sender), \"not admin/service\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address addr) {\r\n        require(addr != address(0x0), \"nil address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActiveContract() {\r\n        require(isActive, \"inactive contract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInactiveContract() {\r\n        require(!isActive, \"active contract\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActualContract() {\r\n        require(isActual, \"outdated contract\");\r\n        _;\r\n    }\r\n\r\n    constructor(address coreAddr) public onlyValidAddress(coreAddr) {\r\n        core = SwapCore(coreAddr);\r\n        mntpToken = core.mntpToken();\r\n    }\r\n\r\n    function toggleActivity() public onlyActualContract onlyAdmin {\r\n        isActive = !isActive;\r\n    }\r\n\r\n    function migrateContract(address newControllerAddr) public onlyValidAddress(newControllerAddr) onlyActualContract onlyAdmin {\r\n        core.setNewControllerAddress(newControllerAddr);\r\n        uint256 mntpTokenAmount = getMntpBalance();\r\n        if (mntpTokenAmount > 0) mntpToken.transfer(newControllerAddr, mntpTokenAmount);\r\n        isActive = false;\r\n        isActual = false;\r\n    }\r\n\r\n    function getMntpBalance() public view returns(uint256) {\r\n        return mntpToken.balanceOf(address(this));\r\n    }\r\n\r\n    function drainMntp(address addr) public onlyValidAddress(addr) onlyAdmin onlyInactiveContract {\r\n        uint256 amount = getMntpBalance();\r\n        if (amount > 0) mntpToken.transfer(addr, amount);\r\n    }\r\n\r\n    // ---\r\n\r\n    function swapMntp(uint256 amount, bytes32 mintAddress) public onlyActualContract onlyActiveContract {\r\n        require(amount > 0, \"zero amount\");\r\n        require(mntpToken.balanceOf(msg.sender) >= amount, \"not enough mntp\");\r\n        require(mntpToken.allowance(msg.sender, address(this)) >= amount, \"invalid allowance\");\r\n\r\n        require(mntpToken.transferFrom(msg.sender, address(this), amount), \"transfer failure\");\r\n        emit onSwapMntp(msg.sender, amount, mintAddress);\r\n    }\r\n\r\n    function sendMntp(uint256 amount, address addr, bytes32 sourceMintAddress) public onlyActualContract onlyActiveContract onlyAdminOrService {\r\n        require(amount > 0, \"zero amount\");\r\n        require(mntpToken.balanceOf(address(this)) >= amount, \"not enough mntp\");\r\n\r\n        require(mntpToken.transfer(addr, amount), \"transfer failure\");\r\n        emit onSentMntp(msg.sender, amount, sourceMintAddress);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    // Multiplies two numbers, throws on overflow.\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    // Integer division of two numbers, truncating the quotient.\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    // Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    // Adds two numbers, throws on overflow.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    // Min from a/b\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    // Max from a/b\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? b : a;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setNewControllerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mntpToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isService\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"mntpTokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SwapCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000083cee9e086a77e492ee0bb93c2b0437ad6fdeccc","Library":"","LicenseType":"None","SwarmSource":"bzzr://9c0f77ab6d8d6924550483fc0d3a36b9608e8eebdb318b0d74e23cfb2aa57c61"}]}