{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n/*\r\n  This file is part of The Colony Network.\r\n\r\n  The Colony Network is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  The Colony Network is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with The Colony Network. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract TokenAuthority is DSAuthority {\r\n  address public token;\r\n  mapping(address => mapping(bytes4 => bool)) authorizations;\r\n\r\n  bytes4 constant BURN_FUNC_SIG = bytes4(keccak256(\"burn(uint256)\"));\r\n  bytes4 constant BURN_OVERLOAD_FUNC_SIG = bytes4(keccak256(\"burn(address,uint256)\"));\r\n\r\n  constructor(address _token, address _colony, address[] memory allowedToTransfer) public {\r\n    token = _token;\r\n    bytes4 transferSig = bytes4(keccak256(\"transfer(address,uint256)\"));\r\n    bytes4 transferFromSig = bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\r\n    bytes4 mintSig = bytes4(keccak256(\"mint(uint256)\"));\r\n    bytes4 mintSigOverload = bytes4(keccak256(\"mint(address,uint256)\"));\r\n\r\n    authorizations[_colony][transferSig] = true;\r\n    authorizations[_colony][mintSig] = true;\r\n    authorizations[_colony][mintSigOverload] = true;\r\n\r\n    for (uint i = 0; i < allowedToTransfer.length; i++) {\r\n      authorizations[allowedToTransfer[i]][transferSig] = true;\r\n      authorizations[allowedToTransfer[i]][transferFromSig] = true;\r\n    }\r\n  }\r\n\r\n  function canCall(address src, address dst, bytes4 sig) public view returns (bool) {\r\n    if (sig == BURN_FUNC_SIG || sig == BURN_OVERLOAD_FUNC_SIG) {\r\n      // We allow anyone to burn their own tokens even when the token is still locked\r\n      return true;\r\n    }\r\n\r\n    if (dst != token) {\r\n      return false;\r\n    }\r\n\r\n    return authorizations[src][sig];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_colony\",\"type\":\"address\"},{\"name\":\"allowedToTransfer\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenAuthority","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009d35e819b96312c412403456f0ed94c4e65fce510000000000000000000000002c9f30a6585e6b9783fb410bf702753d73c8deae00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://905ae19ec95e696850884f6171ef6edd4a5cbabf1cd08b31581bca5024779c41"}]}