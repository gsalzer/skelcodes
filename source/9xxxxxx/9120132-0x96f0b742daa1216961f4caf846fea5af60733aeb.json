{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract CrowdsaleToken {\r\n    using SafeMath for uint256;\r\n    /* Public variables of the token */\r\n    string public constant name = 'Rocketclock';\r\n    string public constant symbol = 'RCLK';\r\n    //uint256 public constant decimals = 6;\r\n    address payable owner;\r\n    address payable contractaddress;\r\n    uint256 public constant totalSupply = 1000;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    //mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address payable indexed from, address payable indexed to, uint256 value);\r\n    //event LogWithdrawal(address receiver, uint amount);\r\n\r\n    modifier onlyOwner() {\r\n        // Only owner is allowed to do this action.\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() public{\r\n        contractaddress = address(this);\r\n        owner = msg.sender;\r\n        balanceOf[owner] = totalSupply;\r\n        //balanceOf[contractaddress] = totalSupply;\r\n\r\n    }\r\n\r\n    /*ERC20*/\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address payable _from, address payable _to, uint256 _value) internal {\r\n    //function _transfer(address _from, address _to, uint _value) public {\r\n        require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] > _value);                // Check if the sender has enough\r\n        require (balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Send `_value` tokens to `_to` from your account\r\n    /// @param _to The address of the recipient\r\n    /// @param _value the amount to send\r\n    function transfer(address payable _to, uint256 _value) public returns (bool success) {\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n\r\n    }\r\n\r\n    /*\r\n    * Returns unsold tokens to owner - mainly for development and testing\r\n    * _from : crowdsale address\r\n    */\r\n    function crownfundTokenBalanceToOwner(address payable _from) public onlyOwner returns (bool success) {\r\n      // owner can not move tokens from participants\r\n      CrowdSale c = CrowdSale(_from);\r\n      address crowdsaleOwner = c.getOwner();\r\n      if (crowdsaleOwner == owner ) {\r\n        uint256 _value = balanceOf[_from];\r\n        balanceOf[_from] = 0;\r\n        balanceOf[owner] = balanceOf[owner].add(_value);\r\n        emit Transfer(_from, owner, _value);\r\n        return true;\r\n      }\r\n      else{\r\n        return false;\r\n      }\r\n\r\n    }\r\n\r\n    /*fallback function*/\r\n    function () external payable onlyOwner{}\r\n\r\n\r\n    function getBalance(address addr) public view returns(uint256) {\r\n      return balanceOf[addr];\r\n    }\r\n\r\n    function getEtherBalance() public view returns(uint256) {\r\n      //return contract ether balance;\r\n      return address(this).balance;\r\n    }\r\n\r\n    function getOwner() public view returns(address) {\r\n      return owner;\r\n    }\r\n\r\n}\r\n\r\ncontract CrowdSale {\r\n    using SafeMath for uint256;\r\n\r\n    address payable public beneficiary;\r\n    address payable public crowdsaleAddress;\r\n    //debugging\r\n    address payable public tokenAddress;\r\n    address payable public owner;\r\n    uint public fundingGoal;\r\n    uint public amountRaised;\r\n    uint public tokensSold;\r\n    //crowdsaledeadline\r\n    uint public deadline;\r\n    //download Deadline\r\n    uint public downloaddeadline;\r\n    //emergencydeadline\r\n    uint public emergencydeadline;\r\n    uint public initiation;\r\n    //uint public price;\r\n    //0.25 eth = 250 finney\r\n    // total price is 150 price + 100 collateral that participants get back when calling download function\r\n    uint256 public constant totalprice = 250 finney;\r\n    uint256 public constant price = 150 finney;\r\n    uint256 public constant collateral = 100 finney;\r\n    // amount of tokens participants receive\r\n    uint public constant amount = 1;\r\n    // the amount of tokens owner must have before he can withdraw crowdfund\r\n    uint public constant tokenGoal = 990;\r\n\r\n    CrowdsaleToken public tokenReward;\r\n    //ether balance\r\n    mapping(address => uint256) public balanceOf;\r\n    // to give participants an incentive to claim their tokens for download\r\n    mapping(address => uint256) public balanceCollateral;\r\n    bool public fundingGoalReached = false;\r\n    bool public crowdsaleClosed = false;\r\n\r\n    event GoalReached(address beneficiary, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    modifier onlyOwner() {\r\n        // Only owner is allowed to do this action.\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    constructor(\r\n        address payable ifSuccessfulSendTo,\r\n        address payable addressOfTokenUsedAsReward\r\n    )public {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = 75 * 1 ether;\r\n        //crowdfund deadline\r\n        deadline = now + 60 * 1 days;\r\n        //download deadline\r\n        downloaddeadline = now + 120 * 1 days;\r\n        //this is to prevent eth from getting locked up in the contract in case something goes wrong\r\n        //this means if the project fails to deliver, participants have 60 days to withdraw their contribution\r\n        emergencydeadline = now + 180 * 1 days;\r\n        initiation = now;\r\n        crowdsaleAddress = address(this);\r\n        tokenAddress = addressOfTokenUsedAsReward;\r\n        tokenReward = CrowdsaleToken(addressOfTokenUsedAsReward);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n\r\n    function () external payable {\r\n\r\n      require(!crowdsaleClosed);\r\n      if (now <= deadline){\r\n\r\n        uint256 _value = msg.value;\r\n        if(_value >= totalprice){\r\n          //add amount of eth sent minus collateral\r\n          uint256 _value_price = _value.sub(collateral);\r\n          balanceOf[msg.sender] = balanceOf[msg.sender].add(_value_price);\r\n          //add collateral to collateral balance\r\n          balanceCollateral[msg.sender] = balanceCollateral[msg.sender].add(collateral);\r\n          tokensSold += amount;\r\n          amountRaised += _value_price;\r\n          tokenReward.transfer(msg.sender, amount);\r\n          emit FundTransfer(msg.sender, amount, true);\r\n        }\r\n        else{\r\n          //donation\r\n          amountRaised += msg.value;\r\n        }\r\n      }\r\n      else{\r\n        revert();\r\n      }\r\n\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n    modifier afterDownloadDeadline() { if (now >= downloaddeadline) _; }\r\n    modifier afterEmergencyDeadline() { if (now >= emergencydeadline) _; }\r\n    modifier goalReached() { if (amountRaised >= fundingGoal) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() public afterDeadline returns(bool) {\r\n        if (amountRaised >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            emit GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n        return crowdsaleClosed;\r\n    }\r\n\r\n    /*\r\n    * Add owner and crowdsale balance together\r\n    *\r\n    */\r\n    function getCrowdsaleOwnerTokenBalance() view public returns (uint256){\r\n\r\n      uint256 ownertokenbalance = tokenReward.getBalance(owner);\r\n      uint256 crowdsaletokenbalance = tokenReward.getBalance(crowdsaleAddress);\r\n      uint256 total = ownertokenbalance.add(crowdsaletokenbalance);\r\n      return total;\r\n    }\r\n\r\n    /*\r\n    * to receive downloadlink you need to send token back to owner\r\n    * don't use this function untill dev communicates it's ready!!\r\n    */\r\n    function getDownload() public afterDeadline returns(bool) {\r\n\r\n      if (tokenReward.getBalance(msg.sender) >= amount){\r\n        // tokens are returned to owner\r\n        tokenReward.transfer(owner, amount);\r\n        emit FundTransfer(owner, amount, true);\r\n\r\n        // collateral is returned to participant\r\n        uint256 returnamount = balanceCollateral[msg.sender];\r\n        balanceCollateral[msg.sender] = 0;\r\n        // refunds\r\n        if (returnamount > 0) {\r\n            if (msg.sender.send(returnamount)) {\r\n                emit FundTransfer(msg.sender, returnamount, false);\r\n            } else {\r\n                balanceCollateral[msg.sender] = returnamount;\r\n            }\r\n        }\r\n        // check javascript function that handles download distribution\r\n        return true;\r\n      }\r\n      else{\r\n        return false;\r\n      }\r\n\r\n    }\r\n\r\n    /**\r\n     * Withdraw the funds\r\n     *\r\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was not reached, each contributor can withdraw\r\n     * the amount they contributed.\r\n     */\r\n    function safeWithdrawal() public afterDeadline {\r\n        if (!fundingGoalReached) {\r\n            //return balance + collateral\r\n            uint256 returnamount = balanceOf[msg.sender].add(balanceCollateral[msg.sender]);\r\n            balanceOf[msg.sender] = 0;\r\n            balanceCollateral[msg.sender] = 0;\r\n            // refunds\r\n            if (returnamount >= totalprice) {\r\n                if (msg.sender.send(returnamount)) {\r\n                    emit FundTransfer(msg.sender, returnamount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = returnamount;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    * Withdraw funds after the download deadline, if download was not delivered.\r\n    * We know download was not delivered because owner has not received all tokens back\r\n    *\r\n    */\r\n    function safeWithdrawalNoDownload() public afterDownloadDeadline {\r\n        /* people need to send coins back to owner to get a download link */\r\n        /* if balance of owner is not close to 1000 ( > 990), users have voted against */\r\n        // must be tokenbalance\r\n        if (this.getCrowdsaleOwnerTokenBalance() < tokenGoal) {\r\n            uint256 returnamount = balanceOf[msg.sender].add(balanceCollateral[msg.sender]);\r\n            balanceOf[msg.sender] = 0;\r\n            balanceCollateral[msg.sender] = 0;\r\n            // refunds\r\n            if (returnamount >= totalprice) {\r\n                if (msg.sender.send(returnamount)) {\r\n                    emit FundTransfer(msg.sender, returnamount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = returnamount;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    * Owner can only withdraw if downloads have been distributed before downloaddeadline\r\n    * To receive download users must send token back to owner\r\n    */\r\n    function crowdfundWithdrawal() public afterDownloadDeadline onlyOwner {\r\n      // only if almost everyone has returned their token to owner will owner be able to withdraw crowdfund\r\n      // getCrowdsaleOwnerTokenBalance() adds balance of crowdfund and owner together\r\n      if (this.getCrowdsaleOwnerTokenBalance() >= tokenGoal){\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n\r\n          //users need to send their token back to owner to download\r\n          if (beneficiary.send(amountRaised)) {\r\n              emit FundTransfer(beneficiary, amountRaised, false);\r\n          }\r\n\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    /*\r\n    * In case something goes wrong\r\n    * If project does not deliver, participants have 60 days before the contract balance can be emptied by the owner\r\n    */\r\n    function emergencyWithdrawal() public afterEmergencyDeadline onlyOwner {\r\n\r\n        if (beneficiary == msg.sender) {\r\n\r\n          if (beneficiary.send(address(this).balance)) {\r\n              emit FundTransfer(beneficiary, address(this).balance, false);\r\n          }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /* in case goal is reached early, close crowdsale deadline */\r\n    function closeDeadline() public goalReached onlyOwner {\r\n      deadline = now;\r\n    }\r\n\r\n    function getcrowdsaleClosed() public view returns(bool) {\r\n      return crowdsaleClosed;\r\n    }\r\n\r\n    function getfundingGoalReached() public view returns(bool) {\r\n      return fundingGoalReached;\r\n    }\r\n\r\n    function getOwner() public view returns(address) {\r\n      return owner;\r\n    }\r\n\r\n    function getbalanceOf(address _from) public view returns(uint256) {\r\n      return balanceOf[_from];\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ifSuccessfulSendTo\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeDeadline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"crowdfundWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"downloaddeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencydeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrowdsaleOwnerTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDownload\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"getbalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcrowdsaleClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getfundingGoalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawalNoDownload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"internalType\":\"contract CrowdsaleToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008749cf4fd4f327a4907df5bcfb04365e6f7a2d90000000000000000000000000bd6b9de8648d162b92f469c611163e0cdd249eb1","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://deba7f446efaf6abac49836089dc881c22feb4011cce7e582a8783bed4269b3d"}]}