{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract TokenERC20 is Ownable {\n    bytes32 public standard;\n    bytes32 public name;\n    bytes32 public symbol;\n    uint256 public totalSupply;\n    uint8 public decimals;\n    bool public allowTransactions;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n}\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes memory sig) internal pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n    \n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n}\n\ncontract StmWalletSwap is Ownable {\n    using ECRecovery for bytes32;\n    \n    mapping(bytes32 => bool) public swapList;\n    \n    event Swap(address _recipient, bytes32 _tradeID, address _cFrom, address _cOut, uint256 _vFrom, uint256 _vOut);\n    event TransferAltChain(bytes32 _tradeID, address _to, address _token, uint256 _amount);\n    event AddEth(uint256 _amount);\n    \n   /**\n    * _tradeID   - swap ID\n    * _cFrom     - coin from\n    * _cOut      - coin out\n    * _vFrom     - value from\n    * _vOut      - value out\n    * _time      - max live time\n    * _sign      - keccak256\n    **/ \n    function swap(bytes32 _tradeID, address _cFrom, address _cOut, uint256 _vFrom, uint256 _vOut, uint256 _time, bytes calldata _sign) payable external \n    {\n        require(_cFrom != _cOut);\n        bytes32 _hashSwap = keccak256(abi.encodePacked(_tradeID, _cFrom, _cOut, _vFrom, _vOut, _time));\n        \n        if(now > _time) {\n            return;\n        }\n        \n        verifySign(_hashSwap, _sign, _tradeID);\n        swapList[_tradeID] = true;\n        \n        if (_cFrom == address(0x0)) {\n            require(msg.value > 0);\n            require(msg.value == _vFrom);\n        } else {\n            require(TokenERC20(_cFrom).transferFrom(msg.sender, address(this), _vFrom));\n        }\n        \n        if (_cOut == address(0x0)) {\n            msg.sender.transfer(_vOut);\n        } else {\n            require(TokenERC20(_cOut).transfer(msg.sender, _vOut));\n        }\n        \n        emit Swap(msg.sender, _tradeID, _cFrom, _cOut, _vFrom, _vOut);\n    }\n    \n    function verifySign(bytes32 _hashSwap, bytes memory _sign, bytes32 _tradeID) private view {\n        require(_hashSwap.recover(_sign) == owner);\n        require(!swapList[_tradeID]);\n    }\n    \n    function withdraw(address payable _to, address _token, uint256 _amount) external onlyOwner {\n        if (_token == address(0x0)) {\n            _to.transfer(_amount);\n        } else {\n            TokenERC20(_token).transfer(_to, _amount);\n        }\n    }\n    \n    function transferAltChain(bytes32 _tradeID, address payable _to, address _token, uint256 _amount) external onlyOwner {\n        if (_token == address(0x0)) {\n            _to.transfer(_amount);\n        } else {\n            TokenERC20(_token).transfer(_to, _amount);\n        }\n        emit TransferAltChain(_tradeID, _to, _token, _amount);\n    }\n    \n    function addEth() payable external\n    {\n        emit AddEth(msg.value);\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_cFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_cOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferAltChain\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_cFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tradeID\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAltChain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StmWalletSwap","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://d1fb12cb2455d8b226415b34ce15781f91f1fa9d67e5f4b1117b5d607a3012dd"}]}