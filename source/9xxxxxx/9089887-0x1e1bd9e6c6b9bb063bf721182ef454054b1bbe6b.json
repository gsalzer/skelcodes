{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\n\ninterface IACL {\n  function setRole(bytes32 _role, address _candidate, bool _allow) external;\n  function hasRole(address _candidate, bytes32 _role) external view returns (bool);\n}\n\ninterface IPPGlobalRegistry {\n  function setContract(bytes32 _key, address _value) external;\n\n  // GETTERS\n  function getContract(bytes32 _key) external view returns (address);\n  function getACL() external view returns (IACL);\n  function getGaltTokenAddress() external view returns (address);\n  function getPPTokenRegistryAddress() external view returns (address);\n  function getPPLockerRegistryAddress() external view returns (address);\n  function getPPMarketAddress() external view returns (address);\n}\n\ninterface IPPTokenRegistry {\n  event AddToken(address indexed token, address indexed owener, address indexed factory);\n  event SetFactory(address factory);\n  event SetLockerRegistry(address lockerRegistry);\n\n  function tokenList(uint256 _index) external view returns (address);\n  function isValid(address _tokenContract) external view returns (bool);\n  function requireValidToken(address _token) external view;\n  function addToken(address _privatePropertyToken) external;\n  function getAllTokens() external view returns (address[] memory);\n}\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates if the contract has been initialized.\n   */\n  bool public initialized;\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n  }\n}\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract OwnableAndInitializable is Ownable, Initializable {\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(tx.origin);\n  }\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract. Allow a custom owner setup;\n   */\n  modifier initializeWithOwner(address _owner) {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(_owner);\n  }\n}\n\ncontract PPTokenRegistry is IPPTokenRegistry, OwnableAndInitializable {\n\n  bytes32 public constant ROLE_TOKEN_REGISTRAR = bytes32(\"TOKEN_REGISTRAR\");\n\n  struct Details {\n    bool active;\n    address factory;\n  }\n\n  IPPGlobalRegistry public globalRegistry;\n\n  address[] public tokenList;\n\n  // Token address => Details\n  mapping(address => Details) public tokens;\n\n  modifier onlyFactory() {\n    require(\n      globalRegistry.getACL().hasRole(msg.sender, ROLE_TOKEN_REGISTRAR),\n      \"Invalid registrar\"\n    );\n\n    _;\n  }\n\n  function initialize(IPPGlobalRegistry _ppGlobalRegistry) external isInitializer {\n    globalRegistry = _ppGlobalRegistry;\n  }\n\n  // FACTORY INTERFACE\n\n  function addToken(address _token) external onlyFactory {\n    Details storage token = tokens[_token];\n\n    token.active = true;\n    token.factory = msg.sender;\n\n    tokenList.push(_token);\n\n    emit AddToken(_token, Ownable(_token).owner(), msg.sender);\n  }\n\n  // REQUIRES\n  function requireValidToken(address _token) external view {\n    require(tokens[_token].active == true, \"Token address is invalid\");\n  }\n\n  // GETTERS\n\n  function isValid(address _token) external view returns (bool) {\n    return tokens[_token].active;\n  }\n\n  function getAllTokens() external view returns (address[] memory) {\n    return tokenList;\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owener\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockerRegistry\",\"type\":\"address\"}],\"name\":\"SetLockerRegistry\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_TOKEN_REGISTRAR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalRegistry\",\"outputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPPGlobalRegistry\",\"name\":\"_ppGlobalRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"requireValidToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPTokenRegistry","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://9993150ac4d2fdbd272f21aaa03298881575af42ec7f5535459de40719c550bd"}]}