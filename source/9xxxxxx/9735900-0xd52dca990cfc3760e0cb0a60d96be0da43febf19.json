{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract EXCH {\r\n    function distribute(uint256 _amount) public returns (uint256);\r\n    function appreciateTokenPrice(uint256 _amount) public;\r\n}\r\n\r\ncontract TOKEN {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n    function stakeCount(address stakerAddr) external view returns (uint256);\r\n    function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\r\n    function currentDay() external view returns (uint256);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = address(0x86d9344094297cf5a6c77c07476F40C2F9903CD8);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\ncontract HMX is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint ACTIVATION_TIME = 1585440000;\r\n\r\n    modifier isActivated {\r\n        require(now >= ACTIVATION_TIME);\r\n\r\n        if (now <= (ACTIVATION_TIME + 2 minutes)) {\r\n            require(tx.gasprice <= 0.2 szabo);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenHolders {\r\n        require(myTokens(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDivis {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    modifier isStakeActivated {\r\n        require(stakeActivated == true);\r\n        _;\r\n    }\r\n\r\n    event onDistribute(\r\n        address indexed customerAddress,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onTokenAppreciation(\r\n        uint256 tokenPrice,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingHEX,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 hexEarned,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onRoll(\r\n        address indexed customerAddress,\r\n        uint256 hexRolled,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 hexWithdrawn\r\n    );\r\n\r\n    event onStakeStart(\r\n        address indexed customerAddress,\r\n        uint256 uniqueID,\r\n        uint256 currentTokens,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onStakeEnd(\r\n        address indexed customerAddress,\r\n        uint256 uniqueID,\r\n        uint256 returnAmount,\r\n        uint256 difference,\r\n        uint256 timestamp\r\n    );\r\n\r\n    string public name = \"HEXMAX\";\r\n    string public symbol = \"HEX4\";\r\n    uint8 constant public decimals = 8;\r\n    uint256 constant private priceMagnitude = 1e8;\r\n    uint256 constant private divMagnitude = 2 ** 64;\r\n\r\n    uint8 constant private appreciateFee = 2;\r\n    uint8 constant private buyInFee = 6;\r\n    uint8 constant private sellOutFee = 6;\r\n    uint8 constant private transferFee = 1;\r\n    uint8 constant private devFee = 1;\r\n    uint8 constant private hexTewFee = 1;\r\n    uint8 constant private hexRiseFee = 1;\r\n\r\n    mapping(address => uint256) private tokenBalanceLedger;\r\n    mapping(address => uint256) private referralBalance;\r\n    mapping(address => int256) private payoutsTo;\r\n    mapping(address => uint256) public lockedHexBalanceLedger;\r\n\r\n    struct Stats {\r\n       uint256 deposits;\r\n       uint256 withdrawals;\r\n       uint256 staked;\r\n       uint256 activeStakes;\r\n    }\r\n\r\n    mapping(address => Stats) public playerStats;\r\n\r\n    uint256 public referralRequirement = 100000e8;\r\n    uint256 public totalStakeBalance = 0;\r\n    uint256 public totalPlayer = 0;\r\n    uint256 public totalDonation = 0;\r\n    uint256 public totalTewFundReceived = 0;\r\n    uint256 public totalTewFundCollected = 0;\r\n    uint256 public totalRiseFundReceived = 0;\r\n    uint256 public totalRiseFundCollected = 0;\r\n\r\n    uint256 private tokenSupply = 0;\r\n    uint256 private profitPerShare = 0;\r\n    uint256 private contractValue = 0;\r\n    uint256 private tokenPrice = 100000000;\r\n\r\n    EXCH hextew;\r\n    EXCH hexrise;\r\n\r\n    TOKEN erc20;\r\n\r\n    struct StakeStore {\r\n      uint40 stakeID;\r\n      uint256 hexAmount;\r\n      uint72 stakeShares;\r\n      uint16 lockedDay;\r\n      uint16 stakedDays;\r\n      uint16 unlockedDay;\r\n      bool started;\r\n      bool ended;\r\n    }\r\n\r\n    bool stakeActivated = true;\r\n    bool feedActivated = true;\r\n    mapping(address => mapping(uint256 => StakeStore)) public stakeLists;\r\n\r\n    constructor() public {\r\n        hextew = EXCH(address(0xD495cC8C7c29c7fA3E027a5759561Ab68C363609));\r\n        hexrise = EXCH(address(0x8D5CA96e9984662625e6cbF490Da40c9D7270865));\r\n        erc20 = TOKEN(address(0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39));\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n\r\n    function checkAndTransferHEX(uint256 _amount) private {\r\n        require(erc20.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\r\n    }\r\n\r\n    function distribute(uint256 _amount) isActivated public {\r\n        require(_amount > 0, \"must be a positive value\");\r\n        checkAndTransferHEX(_amount);\r\n        totalDonation += _amount;\r\n        profitPerShare = SafeMath.add(profitPerShare, (_amount * divMagnitude) / tokenSupply);\r\n        emit onDistribute(msg.sender, _amount);\r\n    }\r\n\r\n    function appreciateTokenPrice(uint256 _amount) isActivated public {\r\n        require(_amount > 0, \"must be a positive value\");\r\n        checkAndTransferHEX(_amount);\r\n        totalDonation += _amount;\r\n        contractValue = contractValue.add(_amount);\r\n\r\n        if (tokenSupply > priceMagnitude) {\r\n            tokenPrice = (contractValue.mul(priceMagnitude)) / tokenSupply;\r\n        }\r\n\r\n        emit onTokenAppreciation(tokenPrice, now);\r\n    }\r\n\r\n    function payFund(bytes32 exchange) public {\r\n        if (exchange == \"hextew\") {\r\n          uint256 _hexToPay = totalTewFundCollected.sub(totalTewFundReceived);\r\n          require(_hexToPay > 0);\r\n          totalTewFundReceived = totalTewFundReceived.add(_hexToPay);\r\n          erc20.approve(address(0xD495cC8C7c29c7fA3E027a5759561Ab68C363609), _hexToPay);\r\n          hextew.distribute(_hexToPay);\r\n        } else if (exchange == \"hexrise\") {\r\n          uint256 _hexToPay = totalRiseFundCollected.sub(totalRiseFundReceived);\r\n          require(_hexToPay > 0);\r\n          totalRiseFundReceived = totalRiseFundReceived.add(_hexToPay);\r\n          erc20.approve(address(0x8D5CA96e9984662625e6cbF490Da40c9D7270865), _hexToPay);\r\n          hexrise.appreciateTokenPrice(_hexToPay);\r\n        }\r\n    }\r\n\r\n    function roll() onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo[_customerAddress] +=  (int256) (_dividends * divMagnitude);\r\n        _dividends += referralBalance[_customerAddress];\r\n        referralBalance[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(address(0), _customerAddress, _dividends);\r\n        emit onRoll(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() external {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _lockedToken = (lockedHexBalanceLedger[_customerAddress].mul(priceMagnitude)) / tokenPrice;\r\n        uint256 _tokens = tokenBalanceLedger[_customerAddress].sub(_lockedToken);\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo[_customerAddress] += (int256) (_dividends * divMagnitude);\r\n        _dividends += referralBalance[_customerAddress];\r\n        referralBalance[_customerAddress] = 0;\r\n        erc20.transfer(_customerAddress, _dividends);\r\n        playerStats[_customerAddress].withdrawals += _dividends;\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function buy(address _referredBy, uint256 _amount) public returns (uint256) {\r\n        checkAndTransferHEX(_amount);\r\n        return purchaseTokens(_referredBy, msg.sender, _amount);\r\n    }\r\n\r\n    function buyFor(address _referredBy, address _customerAddress, uint256 _amount) public returns (uint256) {\r\n        checkAndTransferHEX(_amount);\r\n        return purchaseTokens(_referredBy, _customerAddress, _amount);\r\n    }\r\n\r\n    function _purchaseTokens(address _customerAddress, uint256 _incomingHEX, uint256 _dividends) private returns(uint256) {\r\n        uint256 _amountOfTokens = (_incomingHEX.mul(priceMagnitude)) / tokenPrice;\r\n        uint256 _fee = _dividends * divMagnitude;\r\n\r\n        require(_amountOfTokens > 0 && _amountOfTokens.add(tokenSupply) > tokenSupply);\r\n\r\n        if (tokenSupply > 0) {\r\n            tokenSupply = tokenSupply.add(_amountOfTokens);\r\n            profitPerShare += (_dividends * divMagnitude / tokenSupply);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * divMagnitude / tokenSupply)));\r\n        } else {\r\n            tokenSupply = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger[_customerAddress] =  tokenBalanceLedger[_customerAddress].add(_amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare * _amountOfTokens - _fee);\r\n        payoutsTo[_customerAddress] += _updatedPayouts;\r\n\r\n        emit Transfer(address(0), _customerAddress, _amountOfTokens);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function purchaseTokens(address _referredBy, address _customerAddress, uint256 _incomingHEX) private isActivated returns (uint256) {\r\n        if (playerStats[_customerAddress].deposits == 0) {\r\n            totalPlayer++;\r\n        }\r\n\r\n        playerStats[_customerAddress].deposits += _incomingHEX;\r\n\r\n        require(_incomingHEX > 0);\r\n\r\n        uint256 _appreciateFee = _incomingHEX.mul(appreciateFee).div(100);\r\n        uint256 _dividendFee = feedActivated == true ? _incomingHEX.mul(buyInFee).div(100) : _incomingHEX.mul(buyInFee+1).div(100);\r\n        uint256 _devFee = _incomingHEX.mul(devFee).div(100);\r\n        uint256 _hexTewFee = feedActivated == true ? _incomingHEX.mul(hexTewFee).div(100) : 0;\r\n        uint256 _taxedHEX = _incomingHEX.sub(_appreciateFee).sub(_dividendFee).sub(_devFee).sub(_hexTewFee);\r\n\r\n        _purchaseTokens(owner, _devFee, 0);\r\n        uint256 _amountOfTokens = _purchaseTokens(_customerAddress, _taxedHEX, _dividendFee);\r\n\r\n        if (_referredBy != address(0) && _referredBy != _customerAddress && tokenBalanceLedger[_referredBy] >= referralRequirement) {\r\n            referralBalance[_referredBy] = referralBalance[_referredBy].add(_hexTewFee);\r\n        } else {\r\n            totalTewFundCollected = totalTewFundCollected.add(_hexTewFee);\r\n        }\r\n\r\n        contractValue = contractValue.add(_incomingHEX.sub(_hexTewFee).sub(_dividendFee));\r\n\r\n        if (tokenSupply > priceMagnitude) {\r\n            tokenPrice = (contractValue.mul(priceMagnitude)) / tokenSupply;\r\n        }\r\n\r\n        if (hexToSendFund(\"hextew\") >= 10000e8) {\r\n            payFund(\"hextew\");\r\n        }\r\n\r\n        emit onTokenPurchase(_customerAddress, _incomingHEX, _amountOfTokens, _referredBy, now);\r\n        emit onTokenAppreciation(tokenPrice, now);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) isActivated onlyTokenHolders public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _lockedToken = (lockedHexBalanceLedger[_customerAddress].mul(priceMagnitude)) / tokenPrice;\r\n\r\n        require(_amountOfTokens > 0 && _amountOfTokens <= tokenBalanceLedger[_customerAddress].sub(_lockedToken));\r\n\r\n        uint256 _hex = _amountOfTokens.mul(tokenPrice).div(priceMagnitude);\r\n        uint256 _appreciateFee = _hex.mul(appreciateFee).div(100);\r\n        uint256 _dividendFee = feedActivated == true ? _hex.mul(sellOutFee).div(100) : _hex.mul(sellOutFee+1).div(100);\r\n        uint256 _devFee = _hex.mul(devFee).div(100);\r\n        uint256 _hexRiseFee = feedActivated == true ? _hex.mul(hexRiseFee).div(100) : 0;\r\n\r\n        _purchaseTokens(owner, _devFee, 0);\r\n        totalRiseFundCollected = totalRiseFundCollected.add(_hexRiseFee);\r\n\r\n        _hex = _hex.sub(_appreciateFee).sub(_dividendFee).sub(_devFee).sub(_hexRiseFee);\r\n\r\n        tokenSupply = tokenSupply.sub(_amountOfTokens);\r\n        tokenBalanceLedger[_customerAddress] = tokenBalanceLedger[_customerAddress].sub(_amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare * _amountOfTokens + (_hex * divMagnitude));\r\n        payoutsTo[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply > 0) {\r\n            profitPerShare = SafeMath.add(profitPerShare, (_dividendFee * divMagnitude) / tokenSupply);\r\n        }\r\n\r\n        contractValue = contractValue.sub(_hex.add(_hexRiseFee).add(_dividendFee));\r\n\r\n        if (tokenSupply > priceMagnitude) {\r\n            tokenPrice = (contractValue.mul(priceMagnitude)) / tokenSupply;\r\n        }\r\n\r\n        if (hexToSendFund(\"hexrise\") >= 10000e8) {\r\n            payFund(\"hexrise\");\r\n        }\r\n\r\n        emit Transfer(_customerAddress, address(0), _amountOfTokens);\r\n        emit onTokenSell(_customerAddress, _amountOfTokens, _hex, now);\r\n        emit onTokenAppreciation(tokenPrice, now);\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) isActivated onlyTokenHolders external returns (bool) {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _lockedToken = (lockedHexBalanceLedger[_customerAddress].mul(priceMagnitude)) / tokenPrice;\r\n\r\n        require(_amountOfTokens > 0 && _amountOfTokens <= tokenBalanceLedger[_customerAddress].sub(_lockedToken));\r\n\r\n        if (myDividends(true) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = _amountOfTokens.mul(transferFee).div(100);\r\n        uint256 _taxedTokens = _amountOfTokens.sub(_tokenFee);\r\n\r\n        tokenBalanceLedger[_customerAddress] = tokenBalanceLedger[_customerAddress].sub(_amountOfTokens);\r\n        tokenBalanceLedger[_toAddress] = tokenBalanceLedger[_toAddress].add(_taxedTokens);\r\n\r\n        payoutsTo[_customerAddress] -= (int256) (profitPerShare * _amountOfTokens);\r\n        payoutsTo[_toAddress] += (int256) (profitPerShare * _taxedTokens);\r\n\r\n        tokenSupply = tokenSupply.sub(_tokenFee);\r\n\r\n        if (tokenSupply > priceMagnitude)\r\n        {\r\n            tokenPrice = (contractValue.mul(priceMagnitude)) / tokenSupply;\r\n        }\r\n\r\n        emit Transfer(_customerAddress, address(0), _tokenFee);\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        emit onTokenAppreciation(tokenPrice, now);\r\n\r\n        return true;\r\n    }\r\n\r\n    function stakeStart(uint256 _amount, uint256 _days) public isStakeActivated {\r\n        require(_amount <= 4722366482869645213695);\r\n        require(hexBalanceOfNoFee(msg.sender, true) >= _amount);\r\n\r\n        erc20.stakeStart(_amount, _days); // revert or succeed\r\n\r\n        uint256 _stakeIndex;\r\n        uint40 _stakeID;\r\n        uint72 _stakeShares;\r\n        uint16 _lockedDay;\r\n        uint16 _stakedDays;\r\n\r\n        _stakeIndex = erc20.stakeCount(address(this));\r\n        _stakeIndex = SafeMath.sub(_stakeIndex, 1);\r\n\r\n        (_stakeID,,_stakeShares,_lockedDay,_stakedDays,,) = erc20.stakeLists(address(this), _stakeIndex);\r\n\r\n        uint256 _uniqueID =  uint256(keccak256(abi.encodePacked(_stakeID, _stakeShares))); // unique enough\r\n        require(stakeLists[msg.sender][_uniqueID].started == false); // still check for collision\r\n        stakeLists[msg.sender][_uniqueID].started = true;\r\n\r\n        stakeLists[msg.sender][_uniqueID] = StakeStore(_stakeID, _amount, _stakeShares, _lockedDay, _stakedDays, uint16(0), true, false);\r\n\r\n        totalStakeBalance = SafeMath.add(totalStakeBalance, _amount);\r\n\r\n        playerStats[msg.sender].activeStakes += 1;\r\n        playerStats[msg.sender].staked += _amount;\r\n\r\n        lockedHexBalanceLedger[msg.sender] = SafeMath.add(lockedHexBalanceLedger[msg.sender], _amount);\r\n\r\n        emit onStakeStart(msg.sender, _uniqueID, calculateTokensReceived(_amount, false), now);\r\n    }\r\n\r\n    function _stakeEnd(uint256 _stakeIndex, uint40 _stakeIdParam, uint256 _uniqueID) public view returns (uint16){\r\n        uint40 _stakeID;\r\n        uint72 _stakedHearts;\r\n        uint72 _stakeShares;\r\n        uint16 _lockedDay;\r\n        uint16 _stakedDays;\r\n        uint16 _unlockedDay;\r\n\r\n        (_stakeID,_stakedHearts,_stakeShares,_lockedDay,_stakedDays,_unlockedDay,) = erc20.stakeLists(address(this), _stakeIndex);\r\n        require(stakeLists[msg.sender][_uniqueID].started == true && stakeLists[msg.sender][_uniqueID].ended == false);\r\n        require(stakeLists[msg.sender][_uniqueID].stakeID == _stakeIdParam && _stakeIdParam == _stakeID);\r\n        require(stakeLists[msg.sender][_uniqueID].hexAmount == uint256(_stakedHearts));\r\n        require(stakeLists[msg.sender][_uniqueID].stakeShares == _stakeShares);\r\n        require(stakeLists[msg.sender][_uniqueID].lockedDay == _lockedDay);\r\n        require(stakeLists[msg.sender][_uniqueID].stakedDays == _stakedDays);\r\n\r\n        return _unlockedDay;\r\n    }\r\n\r\n    function stakeEnd(uint256 _stakeIndex, uint40 _stakeIdParam, uint256 _uniqueID) public {\r\n        uint16 _unlockedDay = _stakeEnd(_stakeIndex, _stakeIdParam, _uniqueID);\r\n\r\n        if (_unlockedDay == 0){\r\n            stakeLists[msg.sender][_uniqueID].unlockedDay = uint16(erc20.currentDay()); // no penalty/penalty/reward\r\n        } else {\r\n            stakeLists[msg.sender][_uniqueID].unlockedDay = _unlockedDay;\r\n        }\r\n\r\n        uint256 _balance = erc20.balanceOf(address(this));\r\n\r\n        erc20.stakeEnd(_stakeIndex, _stakeIdParam); // revert or 0 or less or equal or more hex returned.\r\n        stakeLists[msg.sender][_uniqueID].ended = true;\r\n\r\n        uint256 _amount = SafeMath.sub(erc20.balanceOf(address(this)), _balance);\r\n        uint256 _stakedAmount = stakeLists[msg.sender][_uniqueID].hexAmount;\r\n        uint256 _difference;\r\n\r\n        if (_amount <= _stakedAmount) {\r\n            _difference = SafeMath.sub(_stakedAmount, _amount);\r\n            contractValue = contractValue.sub(_difference);\r\n            _difference = (_difference.mul(priceMagnitude)) / tokenPrice;\r\n            tokenSupply = SafeMath.sub(tokenSupply, _difference);\r\n            tokenBalanceLedger[msg.sender] = SafeMath.sub(tokenBalanceLedger[msg.sender], _difference);\r\n            int256 _updatedPayouts = (int256) (profitPerShare * _difference);\r\n            payoutsTo[msg.sender] -= _updatedPayouts;\r\n            emit Transfer(msg.sender, address(0), _difference);\r\n        } else if (_amount > _stakedAmount) {\r\n            _difference = SafeMath.sub(_amount, _stakedAmount);\r\n            _difference = purchaseTokens(address(0), msg.sender, _difference);\r\n        }\r\n\r\n        totalStakeBalance = SafeMath.sub(totalStakeBalance, _stakedAmount);\r\n        playerStats[msg.sender].activeStakes -= 1;\r\n\r\n        lockedHexBalanceLedger[msg.sender] = SafeMath.sub(lockedHexBalanceLedger[msg.sender], _stakedAmount);\r\n\r\n        emit onStakeEnd(msg.sender, _uniqueID, _amount, _difference, now);\r\n    }\r\n\r\n    function setName(string memory _name) onlyOwner public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string memory _symbol) onlyOwner public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function setHexStaking(bool _stakeActivated) onlyOwner public\r\n    {\r\n        stakeActivated = _stakeActivated;\r\n    }\r\n\r\n    function setFeeding(bool _feedActivated) onlyOwner public\r\n    {\r\n        feedActivated = _feedActivated;\r\n    }\r\n\r\n    function totalHexBalance() public view returns (uint256) {\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply;\r\n    }\r\n\r\n    function myTokens(bool _stakeable) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress, _stakeable);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress, bool _stakeable) public view returns (uint256) {\r\n        if (_stakeable == false) {\r\n            return tokenBalanceLedger[_customerAddress];\r\n        }\r\n        else if (_stakeable == true) {\r\n            uint256 _lockedToken = (lockedHexBalanceLedger[_customerAddress].mul(priceMagnitude)) / tokenPrice;\r\n            return (tokenBalanceLedger[_customerAddress].sub(_lockedToken));\r\n        }\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare * tokenBalanceLedger[_customerAddress]) - payoutsTo[_customerAddress]) / divMagnitude;\r\n    }\r\n\r\n    function sellPrice(bool _includeFees) public view returns (uint256) {\r\n        uint256 _appreciateFee = 0;\r\n        uint256 _dividendFee = 0;\r\n        uint256 _devFee = 0;\r\n        uint256 _hexRiseFee = 0;\r\n\r\n        if (_includeFees) {\r\n            _appreciateFee = tokenPrice.mul(appreciateFee).div(100);\r\n            _dividendFee = feedActivated == true ? tokenPrice.mul(sellOutFee).div(100) : tokenPrice.mul(sellOutFee+1).div(100);\r\n            _devFee = tokenPrice.mul(devFee).div(100);\r\n            _hexRiseFee = feedActivated == true ? tokenPrice.mul(hexRiseFee).div(100) : 0;\r\n        }\r\n\r\n        return (tokenPrice.sub(_appreciateFee).sub(_dividendFee).sub(_devFee).sub(_hexRiseFee));\r\n    }\r\n\r\n    function buyPrice(bool _includeFees) public view returns(uint256) {\r\n        uint256 _appreciateFee = 0;\r\n        uint256 _dividendFee = 0;\r\n        uint256 _devFee = 0;\r\n        uint256 _hexTewFee = 0;\r\n\r\n        if (_includeFees) {\r\n            _appreciateFee = tokenPrice.mul(appreciateFee).div(100);\r\n            _dividendFee = feedActivated == true ? tokenPrice.mul(buyInFee).div(100) : tokenPrice.mul(buyInFee+1).div(100);\r\n            _devFee = tokenPrice.mul(devFee).div(100);\r\n            _hexTewFee = feedActivated == true ? tokenPrice.mul(hexTewFee).div(100) : 0;\r\n        }\r\n\r\n        return (tokenPrice.add(_appreciateFee).add(_dividendFee).add(_devFee).add(_hexTewFee));\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _hexToSpend, bool _includeFees) public view returns (uint256) {\r\n        uint256 _appreciateFee = 0;\r\n        uint256 _dividendFee = 0;\r\n        uint256 _devFee = 0;\r\n        uint256 _hexTewFee = 0;\r\n\r\n        if (_includeFees) {\r\n            _appreciateFee = _hexToSpend.mul(appreciateFee).div(100);\r\n            _dividendFee = feedActivated == true ? _hexToSpend.mul(buyInFee).div(100) : _hexToSpend.mul(buyInFee+1).div(100);\r\n            _devFee = _hexToSpend.mul(devFee).div(100);\r\n            _hexTewFee = feedActivated == true ? _hexToSpend.mul(hexTewFee).div(100) : 0;\r\n        }\r\n\r\n        uint256 _taxedHEX = _hexToSpend.sub(_appreciateFee).sub(_dividendFee).sub(_devFee).sub(_hexTewFee);\r\n        uint256 _amountOfTokens = (_taxedHEX.mul(priceMagnitude)) / tokenPrice;\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function hexBalanceOf(address _customerAddress, bool _stakeable) public view returns(uint256) {\r\n        uint256 _price = sellPrice(true);\r\n        uint256 _balance = balanceOf(_customerAddress, _stakeable);\r\n        uint256 _value = (_balance.mul(_price)) / priceMagnitude;\r\n\r\n        return _value;\r\n    }\r\n\r\n    function hexBalanceOfNoFee(address _customerAddress, bool _stakeable) public view returns(uint256) {\r\n        uint256 _price = sellPrice(false);\r\n        uint256 _balance = balanceOf(_customerAddress, _stakeable);\r\n        uint256 _value = (_balance.mul(_price)) / priceMagnitude;\r\n\r\n        return _value;\r\n    }\r\n\r\n    function hexToSendFund(bytes32 exchange) public view returns(uint256) {\r\n        if (exchange == \"hextew\") {\r\n          return totalTewFundCollected.sub(totalTewFundReceived);\r\n        } else if (exchange == \"hexrise\") {\r\n          return totalRiseFundCollected.sub(totalRiseFundReceived);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onStakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onStakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenAppreciation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingHEX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hexWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_stakeIdParam\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_uniqueID\",\"type\":\"uint256\"}],\"name\":\"_stakeEnd\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"appreciateTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stakeable\",\"type\":\"bool\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeFees\",\"type\":\"bool\"}],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hexToSpend\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_includeFees\",\"type\":\"bool\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stakeable\",\"type\":\"bool\"}],\"name\":\"hexBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stakeable\",\"type\":\"bool\"}],\"name\":\"hexBalanceOfNoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"exchange\",\"type\":\"bytes32\"}],\"name\":\"hexToSendFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedHexBalanceLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakeable\",\"type\":\"bool\"}],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"exchange\",\"type\":\"bytes32\"}],\"name\":\"payFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeStakes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_includeFees\",\"type\":\"bool\"}],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_feedActivated\",\"type\":\"bool\"}],\"name\":\"setFeeding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakeActivated\",\"type\":\"bool\"}],\"name\":\"setHexStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_stakeIdParam\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"_uniqueID\",\"type\":\"uint256\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeID\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"hexAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"unlockedDay\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalHexBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRiseFundCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRiseFundReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTewFundCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTewFundReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HMX","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://67f94d52f3e810cb33ee3e8255761e716348e38169714b47aa9f38b2cd05d51d"}]}