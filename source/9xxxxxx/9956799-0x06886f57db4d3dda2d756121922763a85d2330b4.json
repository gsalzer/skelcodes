{"status":"1","message":"OK","result":[{"SourceCode":"// Code from https://etherscan.io/address/0xbd185de5172ca64eec3d8cc763883a68f9154cd6#code\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// ---------------------------------------------------------------------------------------------------\r\n// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\r\n//\r\n// Radek Ostrowski / https://startonchain.com - MIT Licence.\r\n// Source: https://github.com/radek1st/ens-subdomain-factory\r\n// ---------------------------------------------------------------------------------------------------\r\n\r\n/**\r\n* @title EnsRegistry\r\n* @dev Extract of the interface for ENS Registry\r\n*/\r\ncontract EnsRegistry {\r\n\tfunction setOwner(bytes32 node, address owner) public;\r\n\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n\tfunction setResolver(bytes32 node, address resolver) public;\r\n\tfunction owner(bytes32 node) public view returns (address);\r\n}\r\n\r\n/**\r\n* @title EnsResolver\r\n* @dev Extract of the interface for ENS Resolver\r\n*/\r\ncontract EnsResolver {\r\n\tfunction setAddr(bytes32 node, address addr) public;\r\n}\r\n\r\n/**\r\n * @title EnsSubdomainFactory\r\n * @dev Allows to create and configure a subdomain for Ethereum ENS in one call.\r\n * After deploying this contract, change the owner of the domain you want to use\r\n * to this deployed contract address. For example, transfer the ownership of \"startonchain.eth\"\r\n * so anyone can create subdomains like \"radek.startonchain.eth\".\r\n */\r\ncontract EnsSubdomainFactory {\r\n\taddress public owner;\r\n\tEnsRegistry public registry;\r\n\tEnsResolver public resolver;\r\n\tbool public locked;\r\n\tbytes32 ethNamehash = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\r\n\r\n\tevent SubdomainCreated(address indexed creator, address indexed owner, string subdomain, string domain);\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tevent RegistryUpdated(address indexed previousRegistry, address indexed newRegistry);\r\n\tevent ResolverUpdated(address indexed previousResolver, address indexed newResolver);\r\n\tevent DomainTransfersLocked();\r\n\r\n\tconstructor(EnsRegistry _registry, EnsResolver _resolver) public {\r\n\t\towner = msg.sender;\r\n\t\tregistry = _registry;\r\n\t\tresolver = _resolver;\r\n\t\tlocked = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t *\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to create a subdomain (e.g. \"radek.startonchain.eth\"),\r\n\t * set its resolver and set its target address\r\n\t * @param _subdomain - sub domain name only e.g. \"radek\"\r\n\t * @param _domain - parent domain name e.g. \"startonchain\"\r\n\t * @param _owner - address that will become owner of this new subdomain\r\n\t * @param _target - address that this new domain will resolve to\r\n\t */\r\n\tfunction newSubdomain(string _subdomain, string _domain, address _owner, address _target) public {\r\n\t\t//create namehash for the domain\r\n\t\tbytes32 domainNamehash = keccak256(abi.encodePacked(ethNamehash, keccak256(abi.encodePacked(_domain))));\r\n\t\t//make sure this contract owns the domain\r\n\t\trequire(registry.owner(domainNamehash) == address(this), \"this contract should own the domain\");\r\n\t\t//create labelhash for the sub domain\r\n\t\tbytes32 subdomainLabelhash = keccak256(abi.encodePacked(_subdomain));\r\n\t\t//create namehash for the sub domain\r\n\t\tbytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, subdomainLabelhash));\r\n\t\t//make sure it is free or owned by the sender\r\n\t\trequire(registry.owner(subdomainNamehash) == address(0) ||\r\n\t\tregistry.owner(subdomainNamehash) == msg.sender, \"sub domain already owned\");\r\n\t\t//create new subdomain, temporarily this smartcontract is the owner\r\n\t\tregistry.setSubnodeOwner(domainNamehash, subdomainLabelhash, address(this));\r\n\t\t//set public resolver for this domain\r\n\t\tregistry.setResolver(subdomainNamehash, resolver);\r\n\t\t//set the destination address\r\n\t\tresolver.setAddr(subdomainNamehash, _target);\r\n\t\t//change the ownership back to requested owner\r\n\t\tregistry.setOwner(subdomainNamehash, _owner);\r\n\r\n\t\temit SubdomainCreated(msg.sender, _owner, _subdomain, _domain);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the owner of a domain (e.g. \"startonchain.eth\"),\r\n\t * @param _domain - domain name e.g. \"startonchain\"\r\n\t */\r\n\tfunction domainOwner(string _domain) public view returns(address) {\r\n\t\tbytes32 namehash = keccak256(abi.encodePacked(ethNamehash, keccak256(abi.encodePacked(_domain))));\r\n\t\treturn registry.owner(namehash);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Return the owner of a subdomain (e.g. \"radek.startonchain.eth\"),\r\n\t * @param _subdomain - sub domain name only e.g. \"radek\"\r\n\t * @param _domain - parent domain name e.g. \"startonchain\"\r\n\t */\r\n\tfunction subdomainOwner(string _subdomain, string _domain) public view returns(address) {\r\n\t\tbytes32 domainNamehash = keccak256(abi.encodePacked(ethNamehash, keccak256(abi.encodePacked(_domain))));\r\n\t\tbytes32 subdomainNamehash = keccak256(abi.encodePacked(domainNamehash, keccak256(abi.encodePacked(_subdomain))));\r\n\t\treturn registry.owner(subdomainNamehash);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The contract owner can take away the ownership of any domain owned by this contract.\r\n\t * @param _node - namehash of the domain\r\n\t * @param _owner - new owner for the domain\r\n\t */\r\n\tfunction transferDomainOwnership(bytes32 _node, address _owner) public onlyOwner {\r\n\t\trequire(!locked);\r\n\t\tregistry.setOwner(_node, _owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev The contract owner can lock and prevent any future domain ownership transfers.\r\n\t */\r\n\tfunction lockDomainOwnershipTransfers() public onlyOwner {\r\n\t\trequire(!locked);\r\n\t\tlocked = true;\r\n\t\temit DomainTransfersLocked();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to update to new ENS registry.\r\n\t * @param _registry The address of new ENS registry to use.\r\n\t */\r\n\tfunction updateRegistry(EnsRegistry _registry) public onlyOwner {\r\n\t\trequire(registry != _registry, \"new registry should be different from old\");\r\n\t\temit RegistryUpdated(registry, _registry);\r\n\t\tregistry = _registry;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows to update to new ENS resolver.\r\n\t * @param _resolver The address of new ENS resolver to use.\r\n\t */\r\n\tfunction updateResolver(EnsResolver _resolver) public onlyOwner {\r\n\t\trequire(resolver != _resolver, \"new resolver should be different from old\");\r\n\t\temit ResolverUpdated(resolver, _resolver);\r\n\t\tresolver = _resolver;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n\t * @param _owner The address to transfer ownership to.\r\n\t */\r\n\tfunction transferContractOwnership(address _owner) public onlyOwner {\r\n\t\trequire(_owner != address(0), \"cannot transfer to address(0)\");\r\n\t\temit OwnershipTransferred(owner, _owner);\r\n\t\towner = _owner;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"domainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferDomainOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockDomainOwnershipTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_subdomain\",\"type\":\"string\"},{\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"subdomainOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subdomain\",\"type\":\"string\"},{\"name\":\"_domain\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"newSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"updateResolver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subdomain\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"SubdomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousRegistry\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegistry\",\"type\":\"address\"}],\"name\":\"RegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousResolver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newResolver\",\"type\":\"address\"}],\"name\":\"ResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DomainTransfersLocked\",\"type\":\"event\"}]","ContractName":"EnsSubdomainFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e0000000000000000000000004976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41","Library":"","LicenseType":"None","SwarmSource":"bzzr://1fce896411037e023f73c1bf9f527397ad8b70e05e97857e882ebcfbc99699e0"}]}