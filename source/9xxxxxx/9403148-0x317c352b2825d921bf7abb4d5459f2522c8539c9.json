{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\ncontract SmartContactForUser {\r\n    event PersonRemoval(address indexed removed, address indexed attachedTo, Role indexed role);\r\n    event HolderAdd(address indexed added);\r\n    mapping(address => mapping(address => uint256)) _allowed; //mapping of accounts allowed to withdraw from a given account and their balances\r\n    address[] _holders; //all token holders\r\n    address _owner;\r\n    enum Role {Holder, Appointee, Owner}\r\n    constructor() public payable {\r\n        _holders.push(msg.sender);\r\n        _owner = msg.sender;\r\n    }\r\n    function holderExist(address accountToCheck) public view returns (bool){\r\n        for(uint i = 0; i<_holders.length; i++){\r\n            if(_holders[i] == accountToCheck)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function signContact(address accountToAdd) public returns (bool){\r\n        require(!holderExist(accountToAdd), \"Contact already exists.\");\r\n        require(checkHolderPermission(msg.sender), \"Not authorized\");\r\n        _holders.push(accountToAdd);\r\n        assert(holderExist(accountToAdd));\r\n        emit HolderAdd(accountToAdd);\r\n        return true;\r\n    }\r\n    /*Only contract's owner can remove a holder.\r\n    */\r\n    function removeContact(address toRemove) public returns (bool){\r\n        require(checkOwnerPermission(msg.sender), \"Not authorized.\");\r\n        require(holderExist(toRemove), \"Contact not exist.\");\r\n        uint index;\r\n        for(uint i = 0; i<_holders.length; i++){\r\n            if(_holders[i] == toRemove){\r\n                index = i;\r\n            }\r\n        }\r\n        uint256 arrlen = _holders.length;\r\n        delete _holders[index];\r\n        _holders[index] = _holders[arrlen - 1];\r\n        _holders.length--;\r\n        \r\n        emit PersonRemoval(toRemove, address(0), Role.Holder);\r\n        return true;\r\n    }\r\n    function checkHolderPermission(address toCheck) public view returns (bool){\r\n        return (holderExist(toCheck));\r\n        return true;\r\n    }\r\n    function checkOwnerPermission(address toCheck) public view returns (bool){\r\n        return (toCheck == _owner);\r\n    }\r\n    function checkAppointeePermission(address toCheck, address mapToOwner) public view returns (bool){\r\n        return (_allowed[mapToOwner][toCheck] != 0);\r\n    }\r\n    function getOwner() public view returns(address owner){\r\n        return _owner;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"added\",\"type\":\"address\"}],\"name\":\"HolderAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attachedTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum SmartContactForUser.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"PersonRemoval\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toCheck\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mapToOwner\",\"type\":\"address\"}],\"name\":\"checkAppointeePermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toCheck\",\"type\":\"address\"}],\"name\":\"checkHolderPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toCheck\",\"type\":\"address\"}],\"name\":\"checkOwnerPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountToCheck\",\"type\":\"address\"}],\"name\":\"holderExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeContact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountToAdd\",\"type\":\"address\"}],\"name\":\"signContact\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartContactForUser","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://ce0ea0ed414ab5ad24bba7d4ce98b1b914dc0c7d313bdffdb43cfeef1b03d520"}]}