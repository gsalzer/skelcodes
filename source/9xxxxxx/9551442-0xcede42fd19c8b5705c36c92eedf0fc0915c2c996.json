{"status":"1","message":"OK","result":[{"SourceCode":"{\"BaseOptionsConverter.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\n\\r\\ncontract BaseOptionsConverter\\r\\n{\\r\\n\\tmodifier onlyESOP()\\r\\n\\t{\\r\\n\\t\\trequire (msg.sender == getESOP());\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getESOP() public constant returns (address);\\r\\n\\r\\n\\tfunction getExercisePeriodDeadline() public constant returns (uint32);\\r\\n\\r\\n\\tfunction exerciseOptions(address employee, uint poolOptions,\\r\\n\\t\\t\\t\\t\\t\\t\\tuint extraOptions, uint bonusOptions,\\r\\n\\t\\t\\t\\t\\t\\t\\tbool agreeToAcceleratedVestingBonusConditions) onlyESOP public;\\r\\n}\\r\\n\"},\"EmployeesList.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\n\\r\\nimport \\\"./ESOPTypes.sol\\\";\\r\\n\\r\\ncontract EmployeesList is ESOPTypes, Destructable\\r\\n{\\r\\n\\tevent LogCreateEmployee(address indexed e, uint32 poolOptions, uint32 extraOptions, uint16 idx);\\r\\n\\tevent LogUpdateEmployee(address indexed e, uint32 poolOptions, uint32 extraOptions, uint16 idx);\\r\\n\\tevent LogChangeEmployeeState(address indexed e, EmployeeState oldState, EmployeeState newState);\\r\\n\\tevent LogRemoveEmployee(address indexed e);\\r\\n\\r\\n\\tmapping (address =\\u003e Employee) employees;\\r\\n\\taddress[] public addresses;\\r\\n\\r\\n\\tfunction size() external constant returns (uint16)\\r\\n\\t{\\r\\n\\t\\treturn uint16(addresses.length);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setEmployee(address e, uint32 issueDate,\\r\\n\\t\\t\\t\\t\\t\\tuint32 timeToSign, uint32 terminatedAt,\\r\\n\\t\\t\\t\\t\\t\\tuint32 fadeoutStarts, uint32 poolOptions,\\r\\n\\t\\t\\t\\t\\t\\tuint32 extraOptions, uint32 suspendedAt,\\r\\n\\t\\t\\t\\t\\t\\tEmployeeState state) external onlyOwner returns (bool isNew)\\r\\n\\t{\\r\\n\\t\\tuint16 empIdx = employees[e].idx;\\r\\n\\t\\tif (empIdx == 0)\\r\\n\\t\\t{\\r\\n\\t\\t\\t// new element\\r\\n\\t\\t\\tuint addSize = addresses.length;\\r\\n\\t\\t\\trequire(addSize != 0xFFFF);\\r\\n\\r\\n\\t\\t\\tisNew = true;\\r\\n\\t\\t\\tempIdx = uint16(addSize + 1);\\r\\n\\t\\t\\taddresses.push(e);\\r\\n\\r\\n\\t\\t\\temit LogCreateEmployee(e, poolOptions, extraOptions, empIdx);\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t\\tisNew = false;\\r\\n\\t\\t\\temit LogUpdateEmployee(e, poolOptions, extraOptions, empIdx);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temployees[e] = Employee({\\r\\n\\t\\t\\tissueDate: issueDate,\\r\\n\\t\\t\\ttimeToSign: timeToSign,\\r\\n\\t\\t\\tterminatedAt: terminatedAt,\\r\\n\\t\\t\\tfadeoutStarts: fadeoutStarts,\\r\\n\\t\\t\\tpoolOptions: poolOptions,\\r\\n\\t\\t\\textraOptions: extraOptions,\\r\\n\\t\\t\\tsuspendedAt: suspendedAt,\\r\\n\\t\\t\\tstate: state,\\r\\n\\t\\t\\tidx: empIdx\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeState(address e, EmployeeState state) external onlyOwner\\r\\n\\t{\\r\\n\\t\\trequire(employees[e].idx != 0);\\r\\n\\t\\temployees[e].state = state;\\r\\n\\t\\temit LogChangeEmployeeState(e, employees[e].state, state);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setFadeoutStarts(address e, uint32 fadeoutStarts) external onlyOwner\\r\\n\\t{\\r\\n\\t\\trequire(employees[e].idx != 0);\\r\\n\\t\\temployees[e].fadeoutStarts = fadeoutStarts;\\r\\n\\t\\temit LogUpdateEmployee(e, employees[e].poolOptions, employees[e].extraOptions, employees[e].idx);\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeEmployee(address e) external onlyOwner returns (bool)\\r\\n\\t{\\r\\n\\t\\tuint16 empIdx = employees[e].idx;\\r\\n\\t\\tif (empIdx == 0)\\r\\n\\t\\t\\treturn false;\\r\\n\\r\\n\\t\\tdelete employees[e];\\r\\n\\t\\tdelete addresses[empIdx-1];\\r\\n\\t\\temit LogRemoveEmployee(e);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction terminateEmployee(address e, uint32 issueDate, uint32 terminatedAt, uint32 fadeoutStarts) external onlyOwner\\r\\n\\t{\\r\\n\\t\\tEmployee storage employee = employees[e];\\r\\n\\t\\trequire(employee.idx != 0);\\r\\n\\r\\n\\t\\temployee.state = EmployeeState.Terminated;\\r\\n\\t\\temit LogChangeEmployeeState(e, employee.state, EmployeeState.Terminated);\\r\\n\\t\\temployee.issueDate = issueDate;\\r\\n\\t\\temployee.terminatedAt = terminatedAt;\\r\\n\\t\\temployee.fadeoutStarts = fadeoutStarts;\\r\\n\\t\\temployee.suspendedAt = 0;\\r\\n\\t\\temit LogUpdateEmployee(e, employee.poolOptions, employee.extraOptions, employee.idx);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getEmployee(address e) external constant returns (uint32, uint32, uint32, uint32, uint32, uint32, uint32, EmployeeState)\\r\\n\\t{\\r\\n\\t\\tEmployee storage employee = employees[e];\\r\\n\\t\\trequire(employee.idx != 0);\\r\\n\\r\\n\\t\\treturn (employee.issueDate, employee.timeToSign, employee.terminatedAt, employee.fadeoutStarts,\\r\\n\\t\\t\\temployee.poolOptions, employee.extraOptions, employee.suspendedAt, employee.state);\\r\\n\\t}\\r\\n\\r\\n\\tfunction hasEmployee(address e) external constant returns (bool)\\r\\n\\t{\\r\\n\\t\\treturn employees[e].idx != 0;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSerializedEmployee(address e) external constant returns (uint[9])\\r\\n\\t{\\r\\n\\t\\tEmployee memory employee = employees[e];\\r\\n\\t\\trequire(employee.idx != 0);\\r\\n\\t\\treturn serializeEmployee(employee);\\r\\n\\t}\\r\\n}\\r\\n\"},\"ERC20OptionsConverter.sol\":{\"content\":\"pragma solidity ^0.4.26;\\n\\nimport \\u0027./ESOPTypes.sol\\u0027;\\nimport \\u0027./BaseOptionsConverter.sol\\u0027;\\n\\ncontract ERC20OptionsConverter is BaseOptionsConverter, TimeSource\\n{\\n\\tusing SafeMath for uint;\\n\\n\\taddress esopAddress;\\n\\tuint32 exercisePeriodDeadline;\\n\\tmapping(address =\\u003e uint) internal balances;\\n\\tstring public name;\\n\\tstring public symbol;\\n\\tuint public totalSupply;\\n\\n\\tuint32 public optionsConversionDeadline;\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\n\\n\\tmodifier converting()\\n\\t{\\n\\t\\trequire (currentTime() \\u003c exercisePeriodDeadline);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier converted()\\n\\t{\\n\\t\\trequire (currentTime() \\u003e= optionsConversionDeadline);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction getESOP() public constant returns (address)\\n\\t{\\n\\t\\treturn esopAddress;\\n\\t}\\n\\n\\tfunction getExercisePeriodDeadline() public constant returns(uint32)\\n\\t{\\n\\t\\treturn exercisePeriodDeadline;\\n\\t}\\n\\n\\tfunction exerciseOptions(address employee, uint poolOptions, uint extraOptions, uint bonusOptions,\\n\\t\\tbool agreeToAcceleratedVestingBonusConditions) public onlyESOP converting\\n\\t{\\n\\t\\tuint options = poolOptions.add(extraOptions).add(bonusOptions);\\n\\t\\ttotalSupply = totalSupply.add(options);\\n\\t\\tbalances[employee] += options;\\n\\t\\temit Transfer(0, employee, options);\\n\\t}\\n\\n\\tfunction transfer(address _to, uint _value) converted public\\n\\t{\\n\\t\\trequire(balances[msg.sender] \\u003e= _value);\\n\\t\\tbalances[msg.sender] -= _value;\\n\\t\\tbalances[_to] += _value;\\n\\t\\temit Transfer(msg.sender, _to, _value);\\n\\t}\\n\\n\\tfunction balanceOf(address _owner) constant public returns (uint balance)\\n\\t{\\n\\t\\treturn balances[_owner];\\n\\t}\\n\\n\\tfunction () payable public\\n\\t{\\n\\t\\trevert();\\n\\t}\\n\\n\\tconstructor(address esop, uint32 exerciseDeadline, uint32 conversionDeadline, string tokenName, string tokenSymbol) public\\n\\t{\\n\\t\\tesopAddress = esop;\\n\\t\\texercisePeriodDeadline = exerciseDeadline;\\n\\t\\toptionsConversionDeadline = conversionDeadline;\\n\\t\\tname = tokenName;\\n\\t\\tsymbol = tokenSymbol;\\n\\t}\\n}\\n\"},\"ESOP.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\n\\r\\nimport \\\"./ESOPTypes.sol\\\";\\r\\nimport \\\"./EmployeesList.sol\\\";\\r\\nimport \\\"./OptionsCalculator.sol\\\";\\r\\nimport \\u0027./BaseOptionsConverter.sol\\u0027;\\r\\n\\r\\ncontract ESOP is ESOPTypes, TimeSource\\r\\n{\\r\\n\\tevent LogESOPOffered(address indexed employee, address company, uint32 poolOptions, uint32 extraOptions);\\r\\n\\tevent LogEmployeeSignedToESOP(address indexed employee);\\r\\n\\tevent LogSuspendEmployee(address indexed employee, uint32 suspendedAt);\\r\\n\\tevent LogContinueSuspendedEmployee(address indexed employee, uint32 continuedAt, uint32 suspendedPeriod);\\r\\n\\tevent LogTerminateEmployee(address indexed employee, address company, uint32 terminatedAt, TerminationType termType);\\r\\n\\tevent LogEmployeeOptionsExercised(address indexed employee, address exercisedFor, uint32 poolOptions, bool disableAcceleratedVesting);\\r\\n\\tevent LogEmployeeMigrated(address indexed employee, address migration, uint pool, uint extra);\\r\\n\\r\\n\\tevent LogESOPOpened(address company);\\r\\n\\tevent LogOptionsConversionOffered(address company, address converter, uint32 convertedAt, uint32 exercisePeriodDeadline);\\r\\n\\r\\n\\tenum ESOPState { New, Open, Conversion }\\r\\n\\tenum TerminationType { Regular, BadLeaver }\\r\\n\\r\\n\\t// COMPANY DATA\\r\\n\\r\\n\\tstring public companyName;\\r\\n\\tstring public companyStreet;\\r\\n\\tstring public companyCity;\\r\\n\\tstring public companyZip;\\r\\n\\tstring public companyCountry;\\r\\n\\tstring public companyRegisterNumber;\\r\\n\\tbool public companyDetailsSet;\\r\\n\\r\\n\\t// LEGAL DATA\\r\\n\\tstring public courtCity;\\r\\n\\tstring public courtCountry;\\r\\n\\tbool public legalDetailsSet;\\r\\n\\r\\n\\t// CODE REPO\\r\\n\\tstring public repoURL;\\r\\n\\tstring public commitId;\\r\\n\\tbool public codeDetailsSet;\\r\\n\\r\\n\\t//CONFIG\\r\\n\\tOptionsCalculator public optionsCalculator;\\r\\n\\tuint public totalPoolOptions;\\t// total poolOptions in The Pool\\r\\n\\tbytes public ESOPLegalWrapperIPFSHash;\\t// ipfs hash of document establishing this ESOP\\r\\n\\taddress public companyAddress;\\t// company address\\r\\n\\taddress public rootOfTrust;\\t// root of immutable root of trust pointing to given ESOP implementation\\r\\n\\tuint32 constant public MINIMUM_MANUAL_SIGN_PERIOD = 2 weeks;\\t// default period for employee signature\\r\\n\\r\\n\\t// STATE\\r\\n\\tuint public remainingPoolOptions;\\t// poolOptions that remain to be assigned\\r\\n\\tESOPState public esopState;\\t// state of ESOP\\r\\n\\tuint32 public esopIssueDate; // timestamp of issue of ESOP\\r\\n\\tEmployeesList public employees;\\t// list of employees\\r\\n\\tuint public totalExtraOptions;\\t// how many extra options inserted\\r\\n\\tuint32 public conversionOfferedAt;\\t// when conversion event happened\\r\\n\\tuint32 public exerciseOptionsDeadline;\\t// employee conversion deadline\\r\\n\\tBaseOptionsConverter public optionsConverter;\\t// option conversion proxy\\r\\n\\r\\n\\tmodifier hasEmployee(address e)\\r\\n\\t{\\r\\n\\t\\trequire(employees.hasEmployee(e));\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyESOPNew()\\r\\n\\t{\\r\\n\\t\\trequire(esopState == ESOPState.New);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyESOPOpen()\\r\\n\\t{\\r\\n\\t\\trequire(esopState == ESOPState.Open);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyESOPConversion()\\r\\n\\t{\\r\\n\\t\\trequire(esopState == ESOPState.Conversion);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyCompany()\\r\\n\\t{\\r\\n\\t\\trequire(companyAddress == msg.sender);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction distributeAndReturnToPool(uint distributedOptions, uint idx) internal returns (uint)\\r\\n\\t{\\r\\n\\t\\t// enumerate all employees that were offered poolOptions after than fromIdx -1 employee\\r\\n\\t\\tEmployee memory emp;\\r\\n\\t\\tfor (uint i = idx; i \\u003c employees.size(); i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\taddress ea = employees.addresses(i);\\r\\n\\t\\t\\tif (ea != 0)  // address(0) is deleted employee\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\temp = _loademp(ea);\\r\\n\\t\\t\\t\\t// skip employees with no poolOptions and terminated employees\\r\\n\\t\\t\\t\\tif (emp.poolOptions \\u003e 0 \\u0026\\u0026 ( emp.state == EmployeeState.WaitingForSignature || emp.state == EmployeeState.Employed) )\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tuint newoptions = optionsCalculator.calcNewEmployeePoolOptions(distributedOptions);\\r\\n\\t\\t\\t\\t\\temp.poolOptions += uint32(newoptions);\\r\\n\\t\\t\\t\\t\\tdistributedOptions -= uint32(newoptions);\\r\\n\\t\\t\\t\\t\\t_saveemp(ea, emp);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn distributedOptions;\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeEmployeesWithExpiredSignaturesAndReturnFadeout() onlyESOPOpen public\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp;\\r\\n\\t\\tuint32 ct = currentTime();\\r\\n\\t\\tfor (uint i = 0; i \\u003c employees.size(); i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\taddress ea = employees.addresses(i);\\r\\n\\t\\t\\tif (ea != 0) // address(0) is deleted employee\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tuint[9] memory ser = employees.getSerializedEmployee(ea);\\r\\n\\t\\t\\t\\temp = deserializeEmployee(ser);\\r\\n\\t\\t\\t\\t// remove employees with expired signatures\\r\\n\\t\\t\\t\\tif (emp.state == EmployeeState.WaitingForSignature \\u0026\\u0026 ct \\u003e emp.timeToSign)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tremainingPoolOptions += distributeAndReturnToPool(emp.poolOptions, i+1);\\r\\n\\t\\t\\t\\t\\ttotalExtraOptions -= emp.extraOptions;\\r\\n\\t\\t\\t\\t\\temployees.removeEmployee(ea);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// return fadeout to pool\\r\\n\\t\\t\\t\\tif (emp.state == EmployeeState.Terminated \\u0026\\u0026 ct \\u003e emp.fadeoutStarts)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tuint returnedPoolOptions;\\r\\n\\t\\t\\t\\t\\tuint returnedExtraOptions;\\r\\n\\t\\t\\t\\t\\t(returnedPoolOptions, returnedExtraOptions) = optionsCalculator.calculateFadeoutToPool(ct, ser);\\r\\n\\t\\t\\t\\t\\tif (returnedPoolOptions \\u003e 0 || returnedExtraOptions \\u003e 0)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\temployees.setFadeoutStarts(ea, ct);\\r\\n\\t\\t\\t\\t\\t\\tremainingPoolOptions += returnedPoolOptions;\\r\\n\\t\\t\\t\\t\\t\\ttotalExtraOptions -= returnedExtraOptions;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCompanyDetails(string pcompanyName, string pcompanyStreet, string pcompanyCity, string pcompanyZip,\\r\\n\\t\\t\\t\\t\\t\\tstring pcompanyCountry, string pcompanyRegisterNumber)  external onlyCompany onlyESOPNew returns (bool)\\r\\n\\t{\\r\\n\\t\\tcompanyName = pcompanyName;\\r\\n\\t\\tcompanyStreet = pcompanyStreet;\\r\\n\\t\\tcompanyCity = pcompanyCity;\\r\\n\\t\\tcompanyZip = pcompanyZip;\\r\\n\\t\\tcompanyCountry = pcompanyCountry;\\r\\n\\t\\tcompanyRegisterNumber = pcompanyRegisterNumber;\\r\\n\\r\\n\\t\\tcompanyDetailsSet = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setLegalDetails(string pcourtCity, string pcourtCountry) external onlyCompany onlyESOPNew returns (bool)\\r\\n\\t{\\r\\n\\t\\tcourtCity = pcourtCity;\\r\\n\\t\\tcourtCountry = pcourtCountry;\\r\\n\\r\\n\\t\\tlegalDetailsSet = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCodeDetails(string prepoURL, string pcommitId) external onlyCompany onlyESOPNew returns (bool)\\r\\n\\t{\\r\\n\\t\\trepoURL = prepoURL;\\r\\n\\t\\tcommitId = pcommitId;\\r\\n\\r\\n\\t\\tcodeDetailsSet = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction openESOP(uint32 pTotalPoolOptions, bytes pESOPLegalWrapperIPFSHash) external onlyCompany onlyESOPNew returns (bool)\\r\\n\\t{\\r\\n\\t\\trequire(companyDetailsSet);\\r\\n\\t\\trequire(legalDetailsSet);\\r\\n\\t\\trequire(codeDetailsSet);\\r\\n\\r\\n\\t\\tesopState = ESOPState.Open;\\r\\n\\t\\tesopIssueDate = currentTime();\\r\\n\\t\\temit LogESOPOpened(companyAddress);\\r\\n\\r\\n\\t\\ttotalPoolOptions = pTotalPoolOptions;\\r\\n\\t\\tremainingPoolOptions = totalPoolOptions;\\r\\n\\t\\tESOPLegalWrapperIPFSHash = pESOPLegalWrapperIPFSHash;\\r\\n\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction offerOptionsToEmployee(address e, uint32 issueDate, uint32 timeToSign, uint32 extraOptions, bool noPool) external onlyESOPOpen onlyCompany returns (bool)\\r\\n\\t{\\r\\n\\t\\trequire(!employees.hasEmployee(e));\\r\\n\\t\\trequire(timeToSign \\u003e= currentTime() + MINIMUM_MANUAL_SIGN_PERIOD);\\r\\n\\r\\n\\t\\tuint poolOptions;\\r\\n\\t\\tif(noPool)\\r\\n\\t\\t\\tpoolOptions = 0;\\r\\n\\t\\telse\\r\\n\\t\\t\\tpoolOptions = optionsCalculator.calcNewEmployeePoolOptions(remainingPoolOptions);\\r\\n\\r\\n\\t\\trequire (poolOptions \\u003c= 0xFFFFFFFF);\\r\\n\\r\\n\\t\\tEmployee memory emp = Employee({\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tissueDate: issueDate,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttimeToSign: timeToSign,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tterminatedAt: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfadeoutStarts: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpoolOptions: uint32(poolOptions),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\textraOptions: extraOptions,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsuspendedAt: 0,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstate: EmployeeState.WaitingForSignature,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tidx: 0\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t_saveemp(e, emp);\\r\\n\\t\\tremainingPoolOptions -= poolOptions;\\r\\n\\t\\ttotalExtraOptions += extraOptions;\\r\\n\\r\\n\\t\\temit LogESOPOffered(e, companyAddress, uint32(poolOptions), extraOptions);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction increaseEmployeeExtraOptions(address e, uint32 extraOptions) external onlyESOPOpen onlyCompany hasEmployee(e) returns (bool)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = _loademp(e);\\r\\n\\t\\trequire (emp.state == EmployeeState.Employed || emp.state == EmployeeState.WaitingForSignature);\\r\\n\\r\\n\\t\\temp.extraOptions += extraOptions;\\r\\n\\t\\t_saveemp(e, emp);\\r\\n\\t\\ttotalExtraOptions += extraOptions;\\r\\n\\r\\n\\t\\temit LogESOPOffered(e, companyAddress, 0, extraOptions);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction employeeSignsToESOP() external hasEmployee(msg.sender) onlyESOPOpen returns (bool)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = _loademp(msg.sender);\\r\\n\\r\\n\\t\\trequire (emp.state == EmployeeState.WaitingForSignature);\\r\\n\\r\\n\\t\\tuint32 t = currentTime();\\r\\n\\t\\tif (t \\u003e emp.timeToSign)\\r\\n\\t\\t{\\r\\n\\t\\t\\tremainingPoolOptions += distributeAndReturnToPool(emp.poolOptions, emp.idx);\\r\\n\\t\\t\\ttotalExtraOptions -= emp.extraOptions;\\r\\n\\t\\t\\temployees.removeEmployee(msg.sender);\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temployees.changeState(msg.sender, EmployeeState.Employed);\\r\\n\\t\\temit LogEmployeeSignedToESOP(msg.sender);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction toggleEmployeeSuspension(address e, uint32 toggledAt) external onlyESOPOpen onlyCompany hasEmployee(e) returns (bool)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = _loademp(e);\\r\\n\\t\\trequire (emp.state == EmployeeState.Employed);\\r\\n\\t\\trequire (emp.suspendedAt \\u003c= toggledAt);\\r\\n\\r\\n\\t\\tif (emp.suspendedAt == 0) // not suspended till now\\r\\n\\t\\t{\\r\\n\\t\\t\\temp.suspendedAt = toggledAt;\\r\\n\\t\\t\\temit LogSuspendEmployee(e, toggledAt);\\r\\n\\t\\t}\\r\\n\\t\\telse\\r\\n\\t\\t{\\r\\n\\t\\t\\tuint32 suspendedPeriod = toggledAt - emp.suspendedAt;\\r\\n\\t\\t\\temp.issueDate += suspendedPeriod;\\r\\n\\t\\t\\temp.suspendedAt = 0;\\r\\n\\t\\t\\temit LogContinueSuspendedEmployee(e, toggledAt, suspendedPeriod);\\r\\n\\t\\t}\\r\\n\\t\\t_saveemp(e, emp);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction terminateEmployee(address e, uint32 terminatedAt, uint8 terminationType) external onlyESOPOpen onlyCompany hasEmployee(e) returns (bool)\\r\\n\\t{\\r\\n\\t\\tTerminationType termType = TerminationType(terminationType);\\r\\n\\t\\tEmployee memory emp = _loademp(e);\\r\\n\\r\\n\\t\\trequire (terminatedAt \\u003e= emp.issueDate);\\r\\n\\t\\trequire(emp.state == EmployeeState.WaitingForSignature || emp.state == EmployeeState.Employed);\\r\\n\\r\\n\\t\\tif (emp.state == EmployeeState.WaitingForSignature)\\r\\n\\t\\t\\ttermType = TerminationType.BadLeaver;\\r\\n\\r\\n\\t\\tuint returnedOptions;\\r\\n\\t\\tuint returnedExtraOptions;\\r\\n\\r\\n\\t\\tif (termType == TerminationType.Regular) // good leaver -\\u003e release vested tokens\\r\\n\\t\\t{\\r\\n\\t\\t\\tif (emp.suspendedAt \\u003e 0 \\u0026\\u0026 emp.suspendedAt \\u003c terminatedAt)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\temp.issueDate += terminatedAt - emp.suspendedAt;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// vesting applies\\r\\n\\t\\t\\treturnedOptions = emp.poolOptions - optionsCalculator.calculateVestedOptions(terminatedAt, emp.issueDate, emp.poolOptions);\\r\\n\\t\\t\\treturnedExtraOptions = emp.extraOptions - optionsCalculator.calculateVestedOptions(terminatedAt, emp.issueDate, emp.extraOptions);\\r\\n\\t\\t\\temployees.terminateEmployee(e, emp.issueDate, terminatedAt, terminatedAt);\\r\\n\\t\\t}\\r\\n\\t\\telse if (termType == TerminationType.BadLeaver) // bad leaver - no Options\\r\\n\\t\\t{\\r\\n\\t\\t\\treturnedOptions = emp.poolOptions;\\r\\n\\t\\t\\treturnedExtraOptions = emp.extraOptions;\\r\\n\\t\\t\\temployees.removeEmployee(e);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tremainingPoolOptions += distributeAndReturnToPool(returnedOptions, emp.idx);\\r\\n\\t\\ttotalExtraOptions -= returnedExtraOptions;\\r\\n\\t\\temit LogTerminateEmployee(e, companyAddress, terminatedAt, termType);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction offerOptionsConversion(uint32 pexerciseOptionsDeadline, BaseOptionsConverter converter) external onlyESOPOpen onlyCompany returns (bool)\\r\\n\\t{\\r\\n\\t\\tuint32 offerMadeAt = currentTime();\\r\\n\\t\\trequire(converter.getExercisePeriodDeadline() - offerMadeAt \\u003e= MINIMUM_MANUAL_SIGN_PERIOD);\\r\\n\\r\\n\\t\\t// exerciseOptions must be callable by us\\r\\n\\t\\trequire(converter.getESOP() == address(this));\\r\\n\\r\\n\\t\\t// return to pool everything we can\\r\\n\\t\\tremoveEmployeesWithExpiredSignaturesAndReturnFadeout();\\r\\n\\r\\n\\t\\t// from now vesting and fadeout stops, no new employees may be added\\r\\n\\t\\tconversionOfferedAt = offerMadeAt;\\r\\n\\t\\texerciseOptionsDeadline = pexerciseOptionsDeadline;\\r\\n\\t\\toptionsConverter = converter;\\r\\n\\r\\n\\t\\t// this is very irreversible\\r\\n\\t\\tesopState = ESOPState.Conversion;\\r\\n\\t\\temit LogOptionsConversionOffered(companyAddress, address(converter), offerMadeAt, exerciseOptionsDeadline);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction exerciseOptionsInternal(uint32 calcAtTime, address employee, address exerciseFor, bool disableAcceleratedVesting) internal returns (bool)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = _loademp(employee);\\r\\n\\r\\n\\t\\trequire(emp.state != EmployeeState.OptionsExercised);\\r\\n\\r\\n\\t\\t// if we are burning options then send 0\\r\\n\\t\\tif (exerciseFor != address(0))\\r\\n\\t\\t{\\r\\n\\t\\t\\tuint pool;\\r\\n\\t\\t\\tuint extra;\\r\\n\\t\\t\\tuint bonus;\\r\\n\\t\\t\\t(pool, extra, bonus) = optionsCalculator.calculateOptionsComponents(serializeEmployee(emp), calcAtTime, conversionOfferedAt, disableAcceleratedVesting);\\r\\n\\t\\t}\\r\\n\\t\\t// call before options conversion contract to prevent re-entry\\r\\n\\t\\temployees.changeState(employee, EmployeeState.OptionsExercised);\\r\\n\\t\\t// exercise options in the name of employee and assign those to exerciseFor\\r\\n\\t\\toptionsConverter.exerciseOptions(exerciseFor, pool, extra, bonus, !disableAcceleratedVesting);\\r\\n\\r\\n\\t\\temit LogEmployeeOptionsExercised(employee, exerciseFor, uint32(pool + extra + bonus), !disableAcceleratedVesting);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction employeeExerciseOptions(bool agreeToAcceleratedVestingBonusConditions) external onlyESOPConversion hasEmployee(msg.sender) returns (bool)\\r\\n\\t{\\r\\n\\t\\tuint32 ct = currentTime();\\r\\n\\t\\trequire (ct \\u003c= exerciseOptionsDeadline);\\r\\n\\r\\n\\t\\treturn exerciseOptionsInternal(ct, msg.sender, msg.sender, !agreeToAcceleratedVestingBonusConditions);\\r\\n\\t}\\r\\n\\r\\n\\tfunction employeeDenyExerciseOptions() external onlyESOPConversion hasEmployee(msg.sender) returns (bool)\\r\\n\\t{\\r\\n\\t\\tuint32 ct = currentTime();\\r\\n\\t\\trequire (ct \\u003c= exerciseOptionsDeadline);\\r\\n\\r\\n\\t\\t// burn the options by sending to 0\\r\\n\\t\\treturn exerciseOptionsInternal(ct, msg.sender, address(0), true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction exerciseExpiredEmployeeOptions(address e, bool disableAcceleratedVesting) external onlyESOPConversion onlyCompany hasEmployee(e) returns (bool)\\r\\n\\t{\\r\\n\\t\\tuint32 ct = currentTime();\\r\\n\\t\\trequire (ct \\u003e exerciseOptionsDeadline);\\r\\n\\r\\n\\t\\treturn exerciseOptionsInternal(ct, e, companyAddress, disableAcceleratedVesting);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcEffectiveOptionsForEmployee(address e, uint32 calcAtTime) public constant hasEmployee(e) returns (uint)\\r\\n\\t{\\r\\n\\t\\treturn optionsCalculator.calculateOptions(employees.getSerializedEmployee(e), calcAtTime, conversionOfferedAt, false);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _loademp(address e) private constant returns (Employee memory)\\r\\n\\t{\\r\\n\\t\\treturn deserializeEmployee(employees.getSerializedEmployee(e));\\r\\n\\t}\\r\\n\\r\\n\\tfunction _saveemp(address e, Employee memory emp) private\\r\\n\\t{\\r\\n\\t\\temployees.setEmployee(e, emp.issueDate, emp.timeToSign, emp.terminatedAt, emp.fadeoutStarts, emp.poolOptions, emp.extraOptions, emp.suspendedAt, emp.state);\\r\\n\\t}\\r\\n\\r\\n\\tfunction() public payable\\r\\n\\t{\\r\\n\\t\\trevert();\\r\\n\\t}\\r\\n\\r\\n\\tconstructor(address company, address pRootOfTrust, OptionsCalculator pOptionsCalculator, EmployeesList pEmployeesList)  public\\r\\n\\t{\\r\\n\\t\\tcompanyAddress = company;\\r\\n\\t\\trootOfTrust = pRootOfTrust;\\r\\n\\t\\toptionsCalculator = pOptionsCalculator;\\r\\n\\t\\temployees = pEmployeesList;\\r\\n\\t}\\r\\n}\\r\\n\"},\"ESOPTypes.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\nimport \\\"./Types.sol\\\";\\r\\n\\r\\ncontract ESOPTypes\\r\\n{\\r\\n\\t// enums are numbered starting from 0. NotSet is used to check for non existing mapping\\r\\n\\tenum EmployeeState\\r\\n\\t{\\r\\n\\t\\tNotSet,\\r\\n\\t\\tWaitingForSignature,\\r\\n\\t\\tEmployed,\\r\\n\\t\\tTerminated,\\r\\n\\t\\tOptionsExercised\\r\\n\\t}\\r\\n\\r\\n\\tstruct Employee\\r\\n\\t{\\r\\n\\t\\t// when vesting starts\\r\\n\\t\\tuint32 issueDate;\\r\\n\\t\\t// wait for employee signature until that time\\r\\n\\t\\tuint32 timeToSign;\\r\\n\\t\\t// date when employee was terminated, 0 for not terminated\\r\\n\\t\\tuint32 terminatedAt;\\r\\n\\t\\t// when fade out starts, 0 for not set, initally == terminatedAt\\r\\n\\t\\t// used only when calculating options returned to pool\\r\\n\\t\\tuint32 fadeoutStarts;\\r\\n\\t\\t// poolOptions employee gets (exit bonus not included)\\r\\n\\t\\tuint32 poolOptions;\\r\\n\\t\\t// extra options employee gets\\r\\n\\t\\tuint32 extraOptions;\\r\\n\\t\\t// time at which employee got suspended, 0 - not suspended\\r\\n\\t\\tuint32 suspendedAt;\\r\\n\\t\\t// what is employee current status, takes 8 bit in storage\\r\\n\\t\\tEmployeeState state;\\r\\n\\t\\t// index in iterable mapping\\r\\n\\t\\tuint16 idx;\\r\\n\\t}\\r\\n\\r\\n\\tfunction serializeEmployee(Employee memory employee) internal pure returns(uint[9] emp)\\r\\n\\t{\\r\\n\\t\\tassembly { emp := employee }\\r\\n\\t}\\r\\n\\r\\n\\tfunction deserializeEmployee(uint[9] serializedEmployee) internal pure returns (Employee memory emp)\\r\\n\\t{\\r\\n\\t\\tassembly { emp := serializedEmployee }\\r\\n\\t}\\r\\n}\\r\\n\"},\"OptionsCalculator.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\n\\r\\nimport \\\"./ESOPTypes.sol\\\";\\r\\n\\r\\ncontract OptionsCalculator is Destructable, ESOPTypes\\r\\n{\\r\\n\\tusing SafeMath for uint;\\r\\n\\r\\n    uint constant public FP_SCALE = 10000;\\r\\n\\r\\n\\t// cliff duration in seconds\\r\\n\\tuint public cliffPeriod;\\r\\n\\t// vesting duration in seconds\\r\\n\\tuint public vestingPeriod;\\r\\n\\t// maximum promille that can fade out\\r\\n\\tuint public maxFadeoutPromille;\\r\\n\\t// minimal options after fadeout\\r\\n\\tfunction residualAmountPromille() public constant returns(uint) { return FP_SCALE - maxFadeoutPromille; }\\r\\n\\t// exit bonus promille\\r\\n\\tuint public bonusOptionsPromille;\\r\\n\\t// per mille of unassigned poolOptions that new employee gets\\r\\n\\tuint public newEmployeePoolPromille;\\r\\n\\t// options per share\\r\\n\\tuint public optionsPerShare;\\r\\n\\t// company address\\r\\n\\taddress public companyAddress;\\r\\n\\t// options strike price\\r\\n\\tuint constant public STRIKE_PRICE = 1;\\r\\n\\r\\n\\tmodifier onlyCompany()\\r\\n\\t{\\r\\n\\t\\trequire (msg.sender == companyAddress);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction calcNewEmployeePoolOptions(uint remainingPoolOptions) public constant returns (uint)\\r\\n\\t{\\r\\n\\t\\treturn (remainingPoolOptions * newEmployeePoolPromille).divRound(FP_SCALE);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateVestedOptions(uint t, uint vestingStarts, uint options) public constant returns (uint)\\r\\n\\t{\\r\\n\\t\\tif (t \\u003c= vestingStarts)\\r\\n\\t\\t\\treturn 0;\\r\\n\\r\\n\\t\\tuint effectiveTime = t - vestingStarts;\\r\\n\\t\\tif (effectiveTime \\u003c cliffPeriod)\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\tif (effectiveTime \\u003c vestingPeriod)\\r\\n\\t\\t\\treturn (options * effectiveTime).divRound(vestingPeriod);\\r\\n\\t\\treturn options;\\r\\n\\t}\\r\\n\\r\\n\\tfunction applyFadeoutToOptions(uint32 t, uint32 issueDate, uint32 terminatedAt, uint options, uint vestedOptions) public constant returns (uint)\\r\\n\\t{\\r\\n\\t\\t// fadeout duration equals to employment duration\\r\\n\\r\\n\\t\\tif (t \\u003c terminatedAt)\\r\\n\\t\\t\\treturn vestedOptions;\\r\\n\\t\\tuint timefromTermination = t - terminatedAt;\\r\\n\\t\\tuint employmentPeriod = terminatedAt - issueDate;\\r\\n\\r\\n\\t\\t// minimum value of options at the end of fadeout, it is a % of all employee\\u0027s options\\r\\n\\t\\tuint minFadeValue = (options * (FP_SCALE - maxFadeoutPromille)).divRound(FP_SCALE);\\r\\n\\r\\n\\t\\t// however employee cannot have more than options after fadeout than he was vested at termination\\r\\n\\t\\tif (minFadeValue \\u003e= vestedOptions)\\r\\n\\t\\t\\treturn vestedOptions;\\r\\n\\r\\n\\t\\t// fadeout period complete\\r\\n\\t\\tif (timefromTermination \\u003e employmentPeriod)\\r\\n\\t\\t\\treturn minFadeValue;\\r\\n\\r\\n\\t\\treturn (minFadeValue + ((vestedOptions - minFadeValue) * (employmentPeriod - timefromTermination)).divRound(employmentPeriod) );\\r\\n\\t}\\r\\n\\r\\n\\t// returns tuple of (vested pool options, vested extra options, bonus)\\r\\n\\tfunction calculateOptionsComponents(uint[9] employee, uint32 calcAtTime,uint32 conversionOfferedAt,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tbool disableAcceleratedVesting) public constant returns (uint, uint, uint)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = deserializeEmployee(employee);\\r\\n\\r\\n\\t\\t// no options if:\\r\\n\\t\\t// \\t1. converted options\\r\\n\\t\\t// \\t2. esop is not singed\\r\\n\\t\\t// \\t3. employee with no options\\r\\n\\r\\n\\t\\tif (emp.state == EmployeeState.OptionsExercised)\\r\\n\\t\\t\\treturn (0,0,0);\\r\\n\\r\\n\\t\\tif (emp.state == EmployeeState.WaitingForSignature)\\r\\n\\t\\t\\treturn (0,0,0);\\r\\n\\r\\n\\t\\tuint issuedOptions = emp.poolOptions + emp.extraOptions;\\r\\n\\t\\tif (issuedOptions == 0)\\r\\n\\t\\t\\treturn (0,0,0);\\r\\n\\r\\n\\t\\t// no options when esop is being converted and conversion deadline expired\\r\\n\\t\\tbool isESOPConverted = conversionOfferedAt \\u003e 0 \\u0026\\u0026 calcAtTime \\u003e= conversionOfferedAt;\\r\\n\\r\\n\\t\\t// if emp is terminated but we calc options before term, simulate employed again\\r\\n\\t\\tif (calcAtTime \\u003c emp.terminatedAt \\u0026\\u0026 emp.terminatedAt \\u003e 0)\\r\\n\\t\\t\\temp.state = EmployeeState.Employed;\\r\\n\\r\\n\\t\\tuint vestedOptions = issuedOptions;\\r\\n\\t\\tbool accelerateVesting = isESOPConverted \\u0026\\u0026 emp.state == EmployeeState.Employed \\u0026\\u0026 !disableAcceleratedVesting;\\r\\n\\r\\n\\t\\tif (!accelerateVesting)\\r\\n\\t\\t{\\r\\n\\t\\t\\t// choose vesting time\\r\\n\\t\\t\\tuint32 calcVestingAt = calcAtTime;\\r\\n\\t\\t\\tif(emp.state == EmployeeState.Terminated)\\r\\n\\t\\t\\t\\tcalcVestingAt = emp.terminatedAt;\\r\\n\\t\\t\\telse if(emp.suspendedAt \\u003e 0 \\u0026\\u0026 emp.suspendedAt \\u003c calcAtTime)\\r\\n\\t\\t\\t\\tcalcVestingAt = emp.suspendedAt;\\r\\n\\t\\t\\telse if(conversionOfferedAt \\u003e 0)\\r\\n\\t\\t\\t\\tcalcVestingAt = conversionOfferedAt;\\r\\n\\r\\n\\t\\t\\tvestedOptions = calculateVestedOptions(calcVestingAt, emp.issueDate, issuedOptions);\\r\\n\\t\\t}\\r\\n\\t\\t// calc fadeout for terminated employees\\r\\n\\t\\tif (emp.state == EmployeeState.Terminated)\\r\\n\\t\\t{\\r\\n\\t\\t\\t// use conversion event time to compute fadeout to stop fadeout on conversion IF not after conversion date\\r\\n\\t\\t\\tif(isESOPConverted)\\r\\n\\t\\t\\t\\tvestedOptions = applyFadeoutToOptions(conversionOfferedAt, emp.issueDate, emp.terminatedAt, issuedOptions, vestedOptions);\\r\\n\\t\\t\\telse\\r\\n\\t\\t\\t\\tvestedOptions = applyFadeoutToOptions(calcAtTime, emp.issueDate, emp.terminatedAt, issuedOptions, vestedOptions);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint vestedPoolOptions;\\r\\n\\t\\tuint vestedExtraOptions;\\r\\n\\t\\t(vestedPoolOptions, vestedExtraOptions) = extractVestedOptionsComponents(emp.poolOptions, emp.extraOptions, vestedOptions);\\r\\n\\r\\n\\t\\tif(accelerateVesting)\\r\\n\\t\\t\\treturn\\t(vestedPoolOptions, vestedExtraOptions, (vestedPoolOptions*bonusOptionsPromille).divRound(FP_SCALE));\\r\\n\\r\\n\\t\\treturn\\t(vestedPoolOptions, vestedExtraOptions, 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateOptions(uint[9] employee, uint32 calcAtTime, uint32 conversionOfferedAt, bool disableAcceleratedVesting) public constant returns (uint)\\r\\n\\t{\\r\\n\\t\\tuint vestedPoolOptions;\\r\\n\\t\\tuint vestedExtraOptions;\\r\\n\\t\\tuint bonus;\\r\\n\\t\\t(vestedPoolOptions, vestedExtraOptions, bonus) = calculateOptionsComponents(employee, calcAtTime, conversionOfferedAt, disableAcceleratedVesting);\\r\\n\\t\\treturn vestedPoolOptions + vestedExtraOptions + bonus;\\r\\n\\t}\\r\\n\\r\\n\\tfunction extractVestedOptionsComponents(uint issuedPoolOptions, uint issuedExtraOptions, uint vestedOptions) public pure returns (uint, uint)\\r\\n\\t{\\r\\n\\t\\tif (issuedExtraOptions == 0)\\r\\n\\t\\t\\treturn (vestedOptions, 0);\\r\\n\\t\\tuint poolOptions = (issuedPoolOptions*vestedOptions).divRound(issuedPoolOptions + issuedExtraOptions);\\r\\n\\t\\treturn (poolOptions, vestedOptions - poolOptions);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateFadeoutToPool(uint32 t, uint[9] employee) public constant returns (uint, uint)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = deserializeEmployee(employee);\\r\\n\\r\\n\\t\\tuint vestedOptions = calculateVestedOptions(emp.terminatedAt, emp.issueDate, emp.poolOptions);\\r\\n\\t\\tuint returnedPoolOptions = applyFadeoutToOptions(emp.fadeoutStarts, emp.issueDate, emp.terminatedAt, emp.poolOptions, vestedOptions) -\\r\\n\\r\\n\\t\\tapplyFadeoutToOptions(t, emp.issueDate, emp.terminatedAt, emp.poolOptions, vestedOptions);\\r\\n\\r\\n\\t\\tuint vestedExtraOptions = calculateVestedOptions(emp.terminatedAt, emp.issueDate, emp.extraOptions);\\r\\n\\t\\tuint returnedExtraOptions = applyFadeoutToOptions(emp.fadeoutStarts, emp.issueDate, emp.terminatedAt, emp.extraOptions, vestedExtraOptions) -\\r\\n\\r\\n\\t\\tapplyFadeoutToOptions(t, emp.issueDate, emp.terminatedAt, emp.extraOptions, vestedExtraOptions);\\r\\n\\r\\n\\t\\treturn (returnedPoolOptions, returnedExtraOptions);\\r\\n\\t}\\r\\n\\r\\n\\tfunction simulateOptions(uint32 issueDate, uint32 terminatedAt, uint32 poolOptions,\\r\\n\\t\\tuint32 extraOptions, uint32 suspendedAt, uint8 employeeState, uint32 calcAtTime) public constant returns (uint)\\r\\n\\t{\\r\\n\\t\\tEmployee memory emp = Employee({issueDate: issueDate,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tterminatedAt: terminatedAt,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tpoolOptions: poolOptions,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\textraOptions: extraOptions,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstate: EmployeeState(employeeState),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttimeToSign: issueDate + 2 weeks,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfadeoutStarts: terminatedAt,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsuspendedAt: suspendedAt,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tidx:1});\\r\\n\\r\\n\\t\\treturn calculateOptions(serializeEmployee(emp), calcAtTime, 0, false);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setParameters(uint32 pCliffPeriod, uint32 pVestingPeriod,\\r\\n\\t\\t\\t\\t\\t\\tuint32 pResidualAmountPromille, uint32 pBonusOptionsPromille,\\r\\n\\t\\t\\t\\t\\t\\tuint32 pNewEmployeePoolPromille, uint32 pOptionsPerShare) external onlyCompany\\r\\n\\t{\\r\\n\\t\\trequire (pResidualAmountPromille \\u003c= FP_SCALE);\\r\\n\\t\\trequire (pBonusOptionsPromille \\u003c= FP_SCALE);\\r\\n\\t\\trequire (pNewEmployeePoolPromille \\u003c= FP_SCALE);\\r\\n\\t\\trequire (pOptionsPerShare != 0);\\r\\n\\r\\n\\t\\trequire (pCliffPeriod \\u003c= pVestingPeriod);\\r\\n\\t\\trequire (optionsPerShare == 0);\\r\\n\\r\\n\\t\\tcliffPeriod = pCliffPeriod;\\r\\n\\t\\tvestingPeriod = pVestingPeriod;\\r\\n\\t\\tmaxFadeoutPromille = FP_SCALE - pResidualAmountPromille;\\r\\n\\t\\tbonusOptionsPromille = pBonusOptionsPromille;\\r\\n\\t\\tnewEmployeePoolPromille = pNewEmployeePoolPromille;\\r\\n\\t\\toptionsPerShare = pOptionsPerShare;\\r\\n\\t}\\r\\n\\r\\n\\tconstructor (address pCompanyAddress) public\\r\\n\\t{\\r\\n\\t\\tcompanyAddress = pCompanyAddress;\\r\\n\\t}\\r\\n}\\r\\n\"},\"Types.sol\":{\"content\":\"pragma solidity ^0.4.26;\\r\\n\\r\\nlibrary SafeMath\\r\\n{\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\\r\\n\\t{\\r\\n\\t\\tuint256 c = a * b;\\r\\n\\t\\tassert(a == 0 || c / a == b);\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\\r\\n\\t{\\r\\n\\t\\tuint256 c = a / b;\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\tfunction divRound(uint256 a, uint256 b) internal pure returns (uint256)\\r\\n\\t{\\r\\n\\t\\tuint256 c = (a + (b/2)) / b;\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\\r\\n\\t{\\r\\n\\t\\tassert(b \\u003c= a);\\r\\n\\t\\treturn a - b;\\r\\n\\t}\\r\\n\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\\r\\n\\t{\\r\\n\\t\\tuint256 c = a + b;\\r\\n\\t\\tassert(c \\u003e= a);\\r\\n\\t\\treturn c;\\r\\n\\t}\\r\\n\\r\\n\\tfunction absDiff(uint256 a, uint256 b) internal pure returns (uint256)\\r\\n\\t{\\r\\n\\t\\treturn a \\u003e b ? a - b : a - b;\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract Ownable\\r\\n{\\r\\n\\taddress _owner;\\r\\n\\tevent LogOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\tconstructor () internal\\r\\n\\t{\\r\\n\\t\\t_owner = msg.sender;\\r\\n\\t\\temit LogOwnershipTransferred(address(0), _owner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction owner() public view returns (address)\\r\\n\\t{\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(msg.sender == _owner);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferOwnership(address newOwner) public onlyOwner\\r\\n\\t{\\r\\n\\t\\trequire(newOwner != address(0));\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t\\temit LogOwnershipTransferred(_owner, newOwner);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract Destructable is Ownable\\r\\n{\\r\\n\\tfunction selfdestroy() public onlyOwner\\r\\n\\t{\\r\\n\\t\\tselfdestruct(_owner);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract TimeSource\\r\\n{\\r\\n\\tuint32 private mockNow;\\r\\n\\r\\n\\tfunction currentTime() public constant returns (uint32)\\r\\n\\t{\\r\\n\\t\\trequire(block.timestamp \\u003c= 0xFFFFFFFF);\\r\\n\\t\\tif(mockNow \\u003e 0)\\r\\n\\t\\t\\treturn mockNow;\\r\\n\\t\\treturn uint32(block.timestamp);\\r\\n\\t}\\r\\n\\r\\n\\tfunction mockTime(uint32 t) public\\r\\n\\t{\\r\\n\\t\\trequire(block.number \\u003c= 3316029);\\r\\n\\t\\tmockNow = t;\\r\\n\\t}\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"extraOptions\",\"type\":\"uint32\"}],\"name\":\"increaseEmployeeExtraOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pcourtCity\",\"type\":\"string\"},{\"name\":\"pcourtCountry\",\"type\":\"string\"}],\"name\":\"setLegalDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"employees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"courtCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exerciseOptionsDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalExtraOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_MANUAL_SIGN_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"esopState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootOfTrust\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repoURL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"terminatedAt\",\"type\":\"uint32\"},{\"name\":\"terminationType\",\"type\":\"uint8\"}],\"name\":\"terminateEmployee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agreeToAcceleratedVestingBonusConditions\",\"type\":\"bool\"}],\"name\":\"employeeExerciseOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyDetailsSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitId\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"employeeDenyExerciseOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"toggledAt\",\"type\":\"uint32\"}],\"name\":\"toggleEmployeeSuspension\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionsCalculator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeEmployeesWithExpiredSignaturesAndReturnFadeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"courtCity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pTotalPoolOptions\",\"type\":\"uint32\"},{\"name\":\"pESOPLegalWrapperIPFSHash\",\"type\":\"bytes\"}],\"name\":\"openESOP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pexerciseOptionsDeadline\",\"type\":\"uint32\"},{\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"offerOptionsConversion\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codeDetailsSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyZip\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"disableAcceleratedVesting\",\"type\":\"bool\"}],\"name\":\"exerciseExpiredEmployeeOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ESOPLegalWrapperIPFSHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"esopIssueDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyCity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyStreet\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionOfferedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pcompanyName\",\"type\":\"string\"},{\"name\":\"pcompanyStreet\",\"type\":\"string\"},{\"name\":\"pcompanyCity\",\"type\":\"string\"},{\"name\":\"pcompanyZip\",\"type\":\"string\"},{\"name\":\"pcompanyCountry\",\"type\":\"string\"},{\"name\":\"pcompanyRegisterNumber\",\"type\":\"string\"}],\"name\":\"setCompanyDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingPoolOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"legalDetailsSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"calcAtTime\",\"type\":\"uint32\"}],\"name\":\"calcEffectiveOptionsForEmployee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"t\",\"type\":\"uint32\"}],\"name\":\"mockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"e\",\"type\":\"address\"},{\"name\":\"issueDate\",\"type\":\"uint32\"},{\"name\":\"timeToSign\",\"type\":\"uint32\"},{\"name\":\"extraOptions\",\"type\":\"uint32\"},{\"name\":\"noPool\",\"type\":\"bool\"}],\"name\":\"offerOptionsToEmployee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionsConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyRegisterNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPoolOptions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prepoURL\",\"type\":\"string\"},{\"name\":\"pcommitId\",\"type\":\"string\"}],\"name\":\"setCodeDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"employeeSignsToESOP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"pRootOfTrust\",\"type\":\"address\"},{\"name\":\"pOptionsCalculator\",\"type\":\"address\"},{\"name\":\"pEmployeesList\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"poolOptions\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"extraOptions\",\"type\":\"uint32\"}],\"name\":\"LogESOPOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"}],\"name\":\"LogEmployeeSignedToESOP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suspendedAt\",\"type\":\"uint32\"}],\"name\":\"LogSuspendEmployee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"continuedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"suspendedPeriod\",\"type\":\"uint32\"}],\"name\":\"LogContinueSuspendedEmployee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"terminatedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"termType\",\"type\":\"uint8\"}],\"name\":\"LogTerminateEmployee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exercisedFor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"poolOptions\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"disableAcceleratedVesting\",\"type\":\"bool\"}],\"name\":\"LogEmployeeOptionsExercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"employee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"migration\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"extra\",\"type\":\"uint256\"}],\"name\":\"LogEmployeeMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"company\",\"type\":\"address\"}],\"name\":\"LogESOPOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"company\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"converter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"convertedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"exercisePeriodDeadline\",\"type\":\"uint32\"}],\"name\":\"LogOptionsConversionOffered\",\"type\":\"event\"}]","ContractName":"ESOP","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000924471ba31cfcc78b37d208c53f8fb24959768430000000000000000000000008bda9fb49b2423b8c46fec1918d51f8838addb1a00000000000000000000000082390fed1f0d12054fea486ee4c070efd1108392000000000000000000000000cd3ca10148b76533add6116bbe6f655e61fe1bd8","Library":"","LicenseType":"None","SwarmSource":"bzzr://aceafd3bc38fa83da2b9dc15b94c7e294071d89ec2fcab2e1e2305ff8d6f9dbe"}]}