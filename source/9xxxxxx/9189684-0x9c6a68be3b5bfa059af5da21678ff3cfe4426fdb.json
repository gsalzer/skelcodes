{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract IERC20 {\r\n    function getRateBQT() public view returns (uint);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/libs/zeppelin/math/SafeMath.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'Multiple error!');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, 'The dividend must other 0!');\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'subtrahend less than or equal minus!');\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'Total must greater than or equal!');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, 'The dividend must other 0!');\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/Future.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\ncontract Future {\r\n    using SafeMath for uint;\r\n    IERC20 public token;\r\n    uint openTime = 1609434000;\r\n    address owner;\r\n    address admin = 0x3c4e80D44927566ff8c30a5b665E4012e1b68471; // ledger1\r\n\r\n    constructor (address _owner) public {\r\n        owner = (_owner == 0x0) ? admin : _owner;\r\n    }\r\n\r\n    //Fallback function\r\n    function () external payable {\r\n    }\r\n\r\n    modifier onlyValidPermission() {\r\n        require(((msg.sender == owner) && (now > openTime)) || msg.sender == admin, 'No permission');\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0, 'Address must different 0x0!');\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidTransferOwner() {\r\n        require(msg.sender == owner || msg.sender == admin, 'No permission');\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, 'Only admin');\r\n        _;\r\n    }\r\n\r\n    function withdrawByType(address addressToken) onlyValidPermission validAddress(addressToken) public {\r\n        token = IERC20(addressToken);\r\n        require(token.transfer(msg.sender, token.balanceOf(address(this))), 'Withdraw failed!');\r\n    }\r\n\r\n    function withdrawOnlyETH() onlyValidPermission public {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function changeOwner(address _newOwner) onlyValidTransferOwner public {\r\n        require(_newOwner != address(0x0));\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function changeAdmin(address _newAdmin) onlyAdmin public {\r\n        require(_newAdmin != address(0x0));\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function changeTimeExpired(uint _times) onlyAdmin public {\r\n        openTime = _times;\r\n    }\r\n }","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"changeTimeExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawOnlyETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressToken\",\"type\":\"address\"}],\"name\":\"withdrawByType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Future","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005503df85f30165f984c127930d9110aa1b3d080a","Library":"","LicenseType":"None","SwarmSource":"bzzr://f99ab3630ab611c3f1eab9f24b1a0b2a7c91b1bd42494ccc1574fab7fbe7cea2"}]}