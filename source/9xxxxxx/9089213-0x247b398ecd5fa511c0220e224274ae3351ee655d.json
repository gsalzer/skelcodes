{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ncontract IERC20 {\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Auth {\r\n  address internal backupAdmin;\r\n  address internal mainAdmin;\r\n  address internal contractAdmin;\r\n  address internal dabAdmin;\r\n  address internal gemAdmin;\r\n  address internal LAdmin;\r\n\r\n  constructor(\r\n    address _backupAdmin,\r\n    address _mainAdmin,\r\n    address _contractAdmin,\r\n    address _dabAdmin,\r\n    address _gemAdmin,\r\n    address _LAdmin\r\n  )\r\n  internal\r\n  {\r\n    backupAdmin = _backupAdmin;\r\n    mainAdmin = _mainAdmin;\r\n    contractAdmin = _contractAdmin;\r\n    dabAdmin = _dabAdmin;\r\n    gemAdmin = _gemAdmin;\r\n    LAdmin = _LAdmin;\r\n  }\r\n\r\n  modifier onlyBackupAdmin() {\r\n    require(isBackupAdmin(), \"onlyBackupAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyMainAdmin() {\r\n    require(isMainAdmin(), \"onlyMainAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyBackupOrMainAdmin() {\r\n    require(isMainAdmin() || isBackupAdmin(), \"onlyBackupOrMainAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyContractAdmin() {\r\n    require(isContractAdmin() || isMainAdmin(), \"onlyContractAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyLAdmin() {\r\n    require(isLAdmin() || isMainAdmin(), \"onlyLAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyDABAdmin() {\r\n    require(isDABAdmin() || isMainAdmin(), \"onlyDABAdmin\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyGEMAdmin() {\r\n    require(isGEMAdmin() || isMainAdmin(), \"onlyGEMAdmin\");\r\n    _;\r\n  }\r\n\r\n  function isBackupAdmin() public view returns (bool) {\r\n    return msg.sender == backupAdmin;\r\n  }\r\n\r\n  function isMainAdmin() public view returns (bool) {\r\n    return msg.sender == mainAdmin;\r\n  }\r\n\r\n  function isContractAdmin() public view returns (bool) {\r\n    return msg.sender == contractAdmin;\r\n  }\r\n\r\n  function isLAdmin() public view returns (bool) {\r\n    return msg.sender == LAdmin;\r\n  }\r\n\r\n  function isDABAdmin() public view returns (bool) {\r\n    return msg.sender == dabAdmin;\r\n  }\r\n\r\n  function isGEMAdmin() public view returns (bool) {\r\n    return msg.sender == gemAdmin;\r\n  }\r\n}\r\n\r\ninterface IContractNo2 {\r\n  function adminCommission(uint _amount) external;\r\n\r\n  function deposit(\r\n    address _user,\r\n    uint8 _type,\r\n    uint packageAmount,\r\n    uint _dabAmount,\r\n    uint _gemAmount\r\n  ) external;\r\n\r\n  function getProfit(address _user, uint _stakingBalance) external returns (uint, uint);\r\n\r\n  function getWithdraw(address _user, uint _stakingBalance, uint8 _type) external returns (uint, uint);\r\n\r\n  function validateJoinPackage(\r\n    address _user,\r\n    address _to,\r\n    uint8 _type,\r\n    uint _dabAmount,\r\n    uint _gemAmount\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface IContractNo3 {\r\n\r\n  function isCitizen(address _user) view external returns (bool);\r\n\r\n  function register(address _user, string _userName, address _inviter) external returns (uint);\r\n\r\n  function addF1M9DepositedToInviter(address _invitee, uint _amount) external;\r\n\r\n  function checkInvestorsInTheSameReferralTree(address _inviter, address _invitee) external view returns (bool);\r\n\r\n  function increaseInviterF1HaveJoinedPackage(address _invitee) external;\r\n\r\n  function increaseInviterF1HaveJoinedM9Package(address _invitee) external;\r\n\r\n  function addNetworkDepositedToInviter(address _inviter, uint _dabAmount, uint _gemAmount) external;\r\n\r\n  function getF1M9Deposited(address _investor) external view returns (uint);\r\n\r\n  function getDirectlyInviteeHaveJoinedM9Package(address _investor) external view returns (address[]);\r\n\r\n  function getRank(address _investor) external view returns (uint8);\r\n\r\n  function getInviter(address _investor) external view returns (address);\r\n\r\n  function showInvestorInfo(address _investorAddress) external view returns (uint, string memory, address, address[],  address[],  address[], uint, uint, uint, uint, uint);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Multiplies two unsigned integers, reverts on overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul error');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, 'SafeMath div error');\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub error');\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two unsigned integers, reverts on overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add error');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n   * reverts when dividing by zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, 'SafeMath mod error');\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ContractNo1 is Auth {\r\n  using SafeMath for uint;\r\n\r\n  enum PackageType {\r\n    M0,\r\n    M3,\r\n    M6,\r\n    M9,\r\n    M12,\r\n    M15,\r\n    M18\r\n  }\r\n\r\n  enum WithdrawType {\r\n    Half,\r\n    Full\r\n  }\r\n\r\n  mapping(address => bool) public lAS;\r\n  IERC20 public dabToken = IERC20(0x5E7Ebea68ab05198F771d77a875480314f1d0aae);\r\n  IContractNo2 public contractNo2;\r\n  IContractNo3 public contractNo3;\r\n\r\n  uint public minJP = 5e18;\r\n  uint8 public gemJPPercent = 30;\r\n\r\n  event Registered(uint id, string userName, address userAddress, address inviter);\r\n  event PackageJoined(address indexed from, address indexed to, PackageType packageType, uint dabAmount, uint gemAmount);\r\n  event Profited(address indexed user, uint dabAmount, uint gemAmount);\r\n  event Withdrew(address indexed user, uint dabAmount, uint gemAmount);\r\n\r\n  constructor(\r\n    address _backupAdmin,\r\n    address _mainAdmin,\r\n    address _dabAdmin,\r\n    address _LAdmin\r\n  )\r\n  public\r\n  Auth(\r\n    _backupAdmin,\r\n    _mainAdmin,\r\n    msg.sender,\r\n    _dabAdmin,\r\n    address(0x0),\r\n    _LAdmin\r\n  ) {\r\n  }\r\n\r\n  // ADMINS FUNCTIONS\r\n\r\n  function setC(address _c) onlyContractAdmin public {\r\n    contractNo3 = IContractNo3(_c);\r\n  }\r\n\r\n  function setW(address _w) onlyContractAdmin public {\r\n    contractNo2 = IContractNo2(_w);\r\n  }\r\n\r\n  function updateBackupAdmin(address _newBackupAdmin) onlyBackupAdmin public {\r\n    require(_newBackupAdmin != address(0x0), 'Invalid address');\r\n    backupAdmin = _newBackupAdmin;\r\n  }\r\n\r\n  function updateMainAdmin(address _newMainAdmin) onlyBackupOrMainAdmin public {\r\n    require(_newMainAdmin != address(0x0), 'Invalid address');\r\n    mainAdmin = _newMainAdmin;\r\n  }\r\n\r\n  function updateContractAdmin(address _newContractAdmin) onlyMainAdmin public {\r\n    require(_newContractAdmin != address(0x0), 'Invalid address');\r\n    contractAdmin = _newContractAdmin;\r\n  }\r\n\r\n  function updateDABAdmin(address _newDABAdmin) onlyMainAdmin public {\r\n    require(_newDABAdmin != address(0x0), 'Invalid address');\r\n    dabAdmin = _newDABAdmin;\r\n  }\r\n\r\n  function updateLockerAdmin(address _newLockerAdmin) onlyMainAdmin public {\r\n    require(_newLockerAdmin != address(0x0), 'Invalid address');\r\n    LAdmin = _newLockerAdmin;\r\n  }\r\n\r\n  function LA(address[] _values, bool _locked) onlyLAdmin public {\r\n    require(_values.length > 0, 'Values cannot be empty');\r\n    require(_values.length <= 256, 'Maximum is 256');\r\n    for (uint8 i = 0; i < _values.length; i++) {\r\n      require(_values[i] != msg.sender, 'Yourself!!!');\r\n      lAS[_values[i]] = _locked;\r\n    }\r\n  }\r\n\r\n  function setMinJP(uint _minJP) onlyMainAdmin public {\r\n    require(_minJP > 0, 'Must be > 0');\r\n    minJP = _minJP;\r\n  }\r\n\r\n  function setGemJP(uint8 _gemJPPercent) onlyMainAdmin public {\r\n    require(0 < _gemJPPercent && _gemJPPercent < 101, 'Must be 1 - 100');\r\n    gemJPPercent = _gemJPPercent;\r\n  }\r\n\r\n  // PUBLIC FUNCTIONS\r\n\r\n  function register(string memory _userName, address _inviter) public {\r\n    require(contractNo3.isCitizen(_inviter), 'Inviter did not registered');\r\n    require(_inviter != msg.sender, 'Cannot referral yourself');\r\n    uint id = contractNo3.register(msg.sender, _userName, _inviter);\r\n    emit Registered(id, _userName, msg.sender, _inviter);\r\n  }\r\n\r\n  function showMe() public view returns (uint, string memory, address, address[], address[], address[], uint, uint, uint, uint, uint) {\r\n    return contractNo3.showInvestorInfo(msg.sender);\r\n  }\r\n\r\n  function joinPackage(address _to, PackageType _type, uint _dabAmount, uint _gemAmount) public {\r\n    uint packageAmount = _dabAmount.add(_gemAmount);\r\n    validateJoinPackage(msg.sender, _to, _type, _dabAmount, _gemAmount);\r\n    require(packageAmount >= minJP, 'Package amount must be greater min');\r\n    require(dabToken.allowance(msg.sender, address(this)) >= _dabAmount, 'Please call approve() first');\r\n    require(dabToken.balanceOf(msg.sender) >= _dabAmount, 'You have not enough funds');\r\n    if (_gemAmount > 0) {\r\n      uint8 gemPercent = uint8(_gemAmount.mul(100).div(packageAmount));\r\n      require(gemPercent <= gemJPPercent, 'Too much GEM');\r\n      contractNo2.adminCommission(_gemAmount.div(5));\r\n    }\r\n\r\n    require(dabToken.transferFrom(msg.sender, address(this), _dabAmount), 'Transfer token to contract failed');\r\n\r\n    contractNo2.deposit(_to, uint8(_type), packageAmount, _dabAmount, _gemAmount);\r\n\r\n    require(dabToken.transfer(dabAdmin, _dabAmount.div(5)), 'Transfer token to admin failed');\r\n\r\n    emit PackageJoined(msg.sender, _to, _type, _dabAmount, _gemAmount);\r\n  }\r\n\r\n  function profit() public {\r\n    require(!lAS[msg.sender], 'You can\\'t do this now');\r\n    uint dabProfit;\r\n    uint gemProfit;\r\n    (dabProfit, gemProfit) = contractNo2.getProfit(msg.sender, dabToken.balanceOf(address(this)));\r\n    require(dabToken.transfer(msg.sender, dabProfit), 'Transfer profit to user failed');\r\n    emit Profited(msg.sender, dabProfit, gemProfit);\r\n  }\r\n\r\n  function withdraw(WithdrawType _type) public {\r\n    require(!lAS[msg.sender], 'You can\\'t do this now');\r\n    uint dabWithdrawable;\r\n    uint gemWithdrawable;\r\n    (dabWithdrawable, gemWithdrawable) = contractNo2.getWithdraw(msg.sender, dabToken.balanceOf(address(this)), uint8(_type));\r\n    require(dabToken.transfer(msg.sender, dabWithdrawable), 'Transfer token to user failed');\r\n    emit Withdrew(msg.sender, dabWithdrawable, gemWithdrawable);\r\n  }\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n  function validateJoinPackage(address _from, address _to, PackageType _type, uint _dabAmount, uint _gemAmount) private {\r\n    require(contractNo3.isCitizen(_from), 'Please register first');\r\n    require(contractNo3.isCitizen(_to), 'You can only active an exists member');\r\n    if (_from != _to) {\r\n      require(contractNo3.checkInvestorsInTheSameReferralTree(_from, _to), 'This user isn\\'t in your referral tree');\r\n    }\r\n    require(contractNo2.validateJoinPackage(_from, _to, uint8(_type), _dabAmount, _gemAmount), 'Type or amount is invalid');\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newContractAdmin\",\"type\":\"address\"}],\"name\":\"updateContractAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDABAdmin\",\"type\":\"address\"}],\"name\":\"updateDABAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractNo3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userName\",\"type\":\"string\"},{\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_c\",\"type\":\"address\"}],\"name\":\"setC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBackupAdmin\",\"type\":\"address\"}],\"name\":\"updateBackupAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lAS\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDABAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minJP\",\"type\":\"uint256\"}],\"name\":\"setMinJP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"profit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLockerAdmin\",\"type\":\"address\"}],\"name\":\"updateLockerAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gemJPPercent\",\"type\":\"uint8\"}],\"name\":\"setGemJP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dabToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_w\",\"type\":\"address\"}],\"name\":\"setW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBackupAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showMe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGEMAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMainAdmin\",\"type\":\"address\"}],\"name\":\"updateMainAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractNo2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minJP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_values\",\"type\":\"address[]\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"LA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gemJPPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_dabAmount\",\"type\":\"uint256\"},{\"name\":\"_gemAmount\",\"type\":\"uint256\"}],\"name\":\"joinPackage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_backupAdmin\",\"type\":\"address\"},{\"name\":\"_mainAdmin\",\"type\":\"address\"},{\"name\":\"_dabAdmin\",\"type\":\"address\"},{\"name\":\"_LAdmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"packageType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"dabAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gemAmount\",\"type\":\"uint256\"}],\"name\":\"PackageJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dabAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gemAmount\",\"type\":\"uint256\"}],\"name\":\"Profited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dabAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gemAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"}]","ContractName":"ContractNo1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ba62976c30f1d8790fb6ad5ac475531bcb5cca860000000000000000000000005420bb0005d00baf4d600b9f255c56e601611347000000000000000000000000343a67edbd58a317b9135d9ee9f6c1b4d700f9d30000000000000000000000002bc5d5af92fb9ef2867be98ea3e2ea946fbb8365","Library":"","LicenseType":"None","SwarmSource":"bzzr://d607d75505b60759187c238885b1ea763001ac60be81b0e1c2a5c7ec0de0d928"}]}