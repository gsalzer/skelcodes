{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\ncontract IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return The address of the owner.\r\n    //// function owner() external view returns (address);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\n\r\ncontract Ownable is IERC173 {\r\n    address internal _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"The owner should be the sender\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0x0), msg.sender);\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _newOwner Address of the new owner\r\n    */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"0x0 Is not a valid owner\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\n/**\r\n* @dev Library to perform safe calls to standard method for ERC20 tokens.\r\n*\r\n* Why Transfers: transfer methods could have a return value (bool), throw or revert for insufficient funds or\r\n* unathorized value.\r\n*\r\n* Why Approve: approve method could has a return value (bool) or does not accept 0 as a valid value (BNB token).\r\n* The common strategy used to clean approvals.\r\n*\r\n* We use the Solidity call instead of interface methods because in the case of transfer, it will fail\r\n* for tokens with an implementation without returning a value.\r\n* Since versions of Solidity 0.4.22 the EVM has a new opcode, called RETURNDATASIZE.\r\n* This opcode stores the size of the returned data of an external call. The code checks the size of the return value\r\n* after an external call and reverts the transaction in case the return data is shorter than expected\r\n*/\r\nlibrary SafeERC20 {\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 prevBalance = _token.balanceOf(address(this));\r\n\r\n        if (prevBalance < _value) {\r\n            // Insufficient funds\r\n            return false;\r\n        }\r\n\r\n        address(_token).call(\r\n           abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value)\r\n        );\r\n\r\n        // Fail if the new balance its not equal than previous balance sub _value\r\n        return prevBalance - _value == _token.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the _value of tokens to be transferred\r\n    * @return bool whether the transfer was successful or not\r\n    */\r\n    function safeTransferFrom(\r\n        IERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool)\r\n    {\r\n        uint256 prevBalance = _token.balanceOf(_from);\r\n\r\n        if (\r\n           prevBalance < _value || // Insufficient funds\r\n            _token.allowance(_from, address(this)) < _value // Insufficient allowance\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        address(_token).call(\r\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", _from, _to, _value)\r\n        );\r\n\r\n        // Fail if the new balance its not equal than previous balance sub _value\r\n        return prevBalance - _value == _token.balanceOf(_from);\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    * @return bool whether the approve was successful or not\r\n    */\r\n    function safeApprove(IERC20 _token, address _spender, uint256 _value) internal returns (bool) {\r\n        address(_token).call(\r\n           abi.encodeWithSignature(\"approve(address,uint256)\",_spender, _value)\r\n        );\r\n\r\n        // Fail if the new allowance its not equal than _value\r\n        return _token.allowance(address(this), _spender) == _value;\r\n    }\r\n\r\n    /**\r\n    * @dev Clear approval\r\n    * Note that if 0 is not a valid value it will be set to 1.\r\n    * @param _token erc20 The address of the ERC20 contract\r\n    * @param _spender The address which will spend the funds.\r\n    */\r\n    function clearApprove(IERC20 _token, address _spender) internal returns (bool) {\r\n        bool success = safeApprove(_token, _spender, 0);\r\n\r\n        if (!success) {\r\n            success = safeApprove(_token, _spender, 1);\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    using SafeMath for uint256;\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        require(z >= x, \"Add overflow\");\r\n        return z;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(x >= y, \"Sub overflow\");\r\n        return x - y;\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 z = x * y;\r\n        require(z/x == y, \"Mul overflow\");\r\n        return z;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        return x / y;\r\n    }\r\n\r\n    function muldiv(uint256 x, uint256 y, uint256 z) internal pure returns (uint256) {\r\n        require(z != 0, \"div by zero\");\r\n        return x.mul(y) / z;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n    @title Emyto token escrow\r\n    @author Victor Fage <victorfage@gmail.com>\r\n*/\r\ncontract EmytoTokenEscrow is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Events\r\n\r\n    event CreateEscrow(\r\n        bytes32 _escrowId,\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        uint256 _fee,\r\n        IERC20 _token,\r\n        uint256 _salt\r\n    );\r\n\r\n    event SignedCreateEscrow(bytes32 _escrowId, bytes _agentSignature);\r\n\r\n    event CancelSignature(bytes _agentSignature);\r\n\r\n    event Deposit(\r\n        bytes32 _escrowId,\r\n        uint256 _toEscrow,\r\n        uint256 _toEmyto\r\n    );\r\n\r\n    event Withdraw(\r\n        bytes32 _escrowId,\r\n        address _sender,\r\n        address _to,\r\n        uint256 _toAmount,\r\n        uint256 _toAgent\r\n    );\r\n\r\n    event Cancel(bytes32 _escrowId, uint256 _amount);\r\n\r\n    event SetEmytoFee(uint256 _fee);\r\n\r\n    event EmytoWithdraw(IERC20 _token, address _to, uint256 _amount);\r\n\r\n    struct Escrow {\r\n        address agent;\r\n        address depositant;\r\n        address retreader;\r\n        uint256 fee;\r\n        IERC20 token;\r\n        uint256 balance;\r\n    }\r\n\r\n    // 10000 ==  100%\r\n    //   505 == 5.05%\r\n    uint256 public BASE = 10000;\r\n    uint256 private MAX_EMYTO_FEE = 50;\r\n    uint256 private MAX_AGENT_FEE = 1000;\r\n    uint256 public emytoFee;\r\n\r\n    // Token to balance of emyto\r\n    mapping(address => uint256) public emytoBalances;\r\n    mapping(bytes32 => Escrow) public escrows;\r\n\r\n    mapping (address => mapping (bytes => bool)) public canceledSignatures;\r\n\r\n    // OnlyOwner functions\r\n\r\n    /**\r\n        @notice Set the emyto fee\r\n\r\n        @dev Only the owner of the contract can send this transaction\r\n\r\n        @param _fee The new emyto fee\r\n    */\r\n    function setEmytoFee(uint256 _fee) external onlyOwner {\r\n        require(_fee <= MAX_EMYTO_FEE, \"setEmytoFee: The emyto fee should be low or equal than the MAX_EMYTO_FEE\");\r\n        emytoFee = _fee;\r\n\r\n        emit SetEmytoFee(_fee);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw the accumulated amount of the fee\r\n\r\n        @dev Only the owner of the contract can send this transaction\r\n\r\n        @param _token The address of the token to withdraw\r\n        @param _to The address destination of the tokens\r\n        @param _amount The amount to withdraw\r\n    */\r\n    function emytoWithdraw(\r\n        IERC20 _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        require(_to != address(0), \"emytoWithdraw: The to address 0 its invalid\");\r\n\r\n        emytoBalances[address(_token)] = emytoBalances[address(_token)].sub(_amount);\r\n\r\n        require(\r\n            _token.safeTransfer(_to, _amount),\r\n            \"emytoWithdraw: Error transfer to emyto\"\r\n        );\r\n\r\n        emit EmytoWithdraw(_token, _to, _amount);\r\n    }\r\n\r\n    // View functions\r\n\r\n    /**\r\n        @notice Calculate the escrow id\r\n\r\n        @dev The id of the escrow its generate with keccak256 function using the parameters of the function\r\n\r\n        @param _agent The agent address\r\n        @param _depositant The depositant address\r\n        @param _retreader The retreader address\r\n        @param _fee The fee percentage(calculate in BASE), this fee will sent to the agent when the escrow is withdrawn\r\n        @param _token The token address\r\n        @param _salt An entropy value, used to generate the id\r\n\r\n        @return The id of the escrow\r\n    */\r\n    function calculateId(\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        uint256 _fee,\r\n        IERC20 _token,\r\n        uint256 _salt\r\n    ) public view returns(bytes32) {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                address(this),\r\n                _agent,\r\n                _depositant,\r\n                _retreader,\r\n                _fee,\r\n                _token,\r\n                _salt\r\n            )\r\n        );\r\n    }\r\n\r\n    // External functions\r\n\r\n    /**\r\n        @notice Create an ERC20 escrow\r\n            Fee: The ratio is expressed in order of BASE, for example\r\n                1% is 100\r\n                50.00% is 5000\r\n                23.45% is 2345\r\n\r\n        @dev The id of the escrow its generate with keccak256 function,\r\n            using the address of this contract, the sender(agent), the _depositant,\r\n            the _retreader, the _fee, the _token and the salt number\r\n\r\n            The agent will be the sender of the transaction\r\n            The _fee should be low or equal than 1000(10%)\r\n\r\n        @param _depositant The depositant address\r\n        @param _retreader The retrea    der address\r\n        @param _fee The fee percentage(calculate in BASE), this fee will sent to the agent when the escrow is withdrawn\r\n        @param _token The token address\r\n        @param _salt An entropy value, used to generate the id\r\n\r\n        @return The id of the escrow\r\n    */\r\n    function createEscrow(\r\n        address _depositant,\r\n        address _retreader,\r\n        uint256 _fee,\r\n        IERC20 _token,\r\n        uint256 _salt\r\n    ) external returns(bytes32 escrowId) {\r\n        escrowId = _createEscrow(\r\n            msg.sender,\r\n            _depositant,\r\n            _retreader,\r\n            _fee,\r\n            _token,\r\n            _salt\r\n        );\r\n    }\r\n\r\n    /**\r\n        @notice Create an escrow, using the signature provided by the agent\r\n\r\n        @dev The signature can will be cancel with cancelSignature function\r\n\r\n        @param _agent The agent address\r\n        @param _depositant The depositant address\r\n        @param _retreader The retrea    der address\r\n        @param _fee The fee percentage(calculate in BASE), this fee will sent to the agent when the escrow is withdrawn\r\n        @param _token The token address\r\n        @param _salt An entropy value, used to generate the id\r\n        @param _agentSignature The signature provided by the agent\r\n\r\n        @return The id of the escrow\r\n    */\r\n    function signedCreateEscrow(\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        uint256 _fee,\r\n        IERC20 _token,\r\n        uint256 _salt,\r\n        bytes calldata _agentSignature\r\n    ) external returns(bytes32 escrowId) {\r\n        escrowId = _createEscrow(\r\n            _agent,\r\n            _depositant,\r\n            _retreader,\r\n            _fee,\r\n            _token,\r\n            _salt\r\n        );\r\n\r\n        require(!canceledSignatures[_agent][_agentSignature], \"signedCreateEscrow: The signature was canceled\");\r\n\r\n        require(\r\n            _agent == _ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", escrowId)), _agentSignature),\r\n            \"signedCreateEscrow: Invalid agent signature\"\r\n        );\r\n\r\n        emit SignedCreateEscrow(escrowId, _agentSignature);\r\n    }\r\n\r\n    /**\r\n        @notice Cancel a create escrow signature\r\n\r\n        @param _agentSignature The signature provided by the agent\r\n    */\r\n    function cancelSignature(bytes calldata _agentSignature) external {\r\n        canceledSignatures[msg.sender][_agentSignature] = true;\r\n\r\n        emit CancelSignature(_agentSignature);\r\n    }\r\n\r\n    /**\r\n        @notice Deposit an amount valuate in escrow token to an escrow\r\n\r\n        @dev The depositant of the escrow should be the sender, previous need the approve of the ERC20 tokens\r\n\r\n        @param _escrowId The id of the escrow\r\n        @param _amount The amount to deposit in an escrow, with emyto fee amount\r\n    */\r\n    function deposit(bytes32 _escrowId, uint256 _amount) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        require(msg.sender == escrow.depositant, \"deposit: The sender should be the depositant\");\r\n\r\n        uint256 toEmyto = _feeAmount(_amount, emytoFee);\r\n\r\n        // Transfer the tokens\r\n        require(\r\n            escrow.token.safeTransferFrom(msg.sender, address(this), _amount),\r\n            \"deposit: Error deposit tokens\"\r\n        );\r\n\r\n        // Assign the fee amount to emyto\r\n        emytoBalances[address(escrow.token)] += toEmyto;\r\n        // Assign the deposit amount to the escrow, subtracting the fee emyto amount\r\n        uint256 toEscrow = _amount.sub(toEmyto);\r\n        escrow.balance += toEscrow;\r\n\r\n        emit Deposit(_escrowId, toEscrow, toEmyto);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw an amount from an escrow and send the tokens to the retreader address\r\n\r\n        @dev The sender should be the depositant or the agent of the escrow\r\n\r\n        @param _escrowId The id of the escrow\r\n        @param _amount The base amount\r\n    */\r\n    function withdrawToRetreader(bytes32 _escrowId, uint256 _amount) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        _withdraw(_escrowId, escrow.depositant, escrow.retreader, _amount);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw an amount from an escrow and the tokens  send to the depositant address\r\n\r\n        @dev The sender should be the retreader or the agent of the escrow\r\n\r\n        @param _escrowId The id of the escrow\r\n        @param _amount The base amount\r\n    */\r\n    function withdrawToDepositant(bytes32 _escrowId, uint256 _amount) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        _withdraw(_escrowId, escrow.retreader, escrow.depositant, _amount);\r\n    }\r\n\r\n    /**\r\n        @notice Cancel an escrow and send the balance of the escrow to the depositant address\r\n\r\n        @dev The sender should be the agent of the escrow\r\n            The escrow will deleted\r\n\r\n        @param _escrowId The id of the escrow\r\n    */\r\n    function cancel(bytes32 _escrowId) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        require(msg.sender == escrow.agent, \"cancel: The sender should be the agent\");\r\n\r\n        uint256 balance = escrow.balance;\r\n        address depositant = escrow.depositant;\r\n        IERC20 token = escrow.token;\r\n\r\n        // Delete escrow\r\n        delete escrows[_escrowId];\r\n\r\n        // Send the tokens to the depositant if the escrow have balance\r\n        if (balance != 0)\r\n            require(\r\n                token.safeTransfer(depositant, balance),\r\n                \"cancel: Error transfer to the depositant\"\r\n            );\r\n\r\n        emit Cancel(_escrowId, balance);\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function _createEscrow(\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        uint256 _fee,\r\n        IERC20 _token,\r\n        uint256 _salt\r\n    ) internal returns(bytes32 escrowId) {\r\n        require(_fee <= MAX_AGENT_FEE, \"createEscrow: The agent fee should be low or equal than 1000\");\r\n\r\n        // Calculate the escrow id\r\n        escrowId = calculateId(\r\n            _agent,\r\n            _depositant,\r\n            _retreader,\r\n            _fee,\r\n            _token,\r\n            _salt\r\n        );\r\n\r\n        // Check if the escrow was created\r\n        require(escrows[escrowId].agent == address(0), \"createEscrow: The escrow exists\");\r\n\r\n        // Add escrow to the escrows array\r\n        escrows[escrowId] = Escrow({\r\n            agent: _agent,\r\n            depositant: _depositant,\r\n            retreader: _retreader,\r\n            fee: _fee,\r\n            token: _token,\r\n            balance: 0\r\n        });\r\n\r\n        emit CreateEscrow(escrowId, _agent, _depositant, _retreader, _fee, _token, _salt);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw an amount from an escrow and send to _to address\r\n\r\n        @dev The sender should be the _approved or the agent of the escrow\r\n\r\n        @param _escrowId The id of the escrow\r\n        @param _approved The address of approved\r\n        @param _to The address of gone the tokens\r\n        @param _amount The base amount\r\n    */\r\n    function _withdraw(\r\n        bytes32 _escrowId,\r\n        address _approved,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        require(msg.sender == _approved || msg.sender == escrow.agent, \"_withdraw: The sender should be the _approved or the agent\");\r\n\r\n        // Calculate the fee\r\n        uint256 toAgent = _feeAmount(_amount, escrow.fee);\r\n        // Actualize escrow balance in storage\r\n        escrow.balance = escrow.balance.sub(_amount);\r\n        // Send fee to the agent\r\n        require(\r\n            escrow.token.safeTransfer(escrow.agent, toAgent),\r\n            \"_withdraw: Error transfer tokens to the agent\"\r\n        );\r\n        // Substract the agent fee\r\n        uint256 toAmount = _amount.sub(toAgent);\r\n        // Send amount to the _to\r\n        require(\r\n            escrow.token.safeTransfer(_to, toAmount),\r\n            \"_withdraw: Error transfer to the _to\"\r\n        );\r\n\r\n        emit Withdraw(_escrowId, msg.sender, _to, toAmount, toAgent);\r\n    }\r\n\r\n    /**\r\n        @notice Calculate the fee amount\r\n\r\n        @dev Formula: _amount * _fee / BASE\r\n\r\n        @param _amount The base amount\r\n        @param _fee The fee\r\n\r\n        @return The calculate fee\r\n    */\r\n    function _feeAmount(\r\n        uint256 _amount,\r\n        uint256 _fee\r\n    ) internal view returns(uint256) {\r\n        return _amount.mul(_fee).div(BASE);\r\n    }\r\n\r\n    function _ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(_sig, 32))\r\n            s := mload(add(_sig, 64))\r\n            v := and(mload(add(_sig, 65)), 255)\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        return ecrecover(_hash, v, r, s);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"CancelSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"CreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toEscrow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toEmyto\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmytoWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetEmytoFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"SignedCreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toAgent\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"calculateId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"cancelSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canceledSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"createEscrow\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emytoBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emytoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emytoWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"retreader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setEmytoFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"signedCreateEscrow\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToDepositant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToRetreader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EmytoTokenEscrow","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://27dca38dc14947f0479dbdabd225d37a95bbe21fb2262d52d363f9ae6fe2a58f"}]}