{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \"frozen\" state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Module {\r\n    function init(BaseWallet _wallet) external;\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n    function recoverToken(address _token) external;\r\n}\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract BaseWallet {\r\n    address public implementation;\r\n    address public owner;\r\n    mapping (address => bool) public authorised;\r\n    mapping (bytes4 => address) public enabled;\r\n    uint public modules;\r\n    function init(address _owner, address[] calldata _modules) external;\r\n    function authoriseModule(address _module, bool _value) external;\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n    function setOwner(address _newOwner) external;\r\n    function invoke(address _target, uint _value, bytes calldata _data) external returns (bytes memory _result);\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules. \r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract ModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n    function deregisterModule(address _module) external;\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n    function deregisterUpgrader(address _upgrader) external;\r\n    function recoverToken(address _token) external;\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\ncontract TokenPriceProvider {\r\n    mapping(address => uint256) public cachedPrices;\r\n    function setPrice(ERC20 _token, uint256 _price) public;\r\n    function setPriceForTokenList(ERC20[] calldata _tokens, uint256[] calldata _prices) external;\r\n    function getEtherValue(uint256 _amount, address _token) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title GuardianStorage\r\n * @dev Contract storing the state of wallets related to guardians and lock.\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n * @author Olivier Van Den Biggelaar - <olivier@argent.xyz>\r\n */\r\ncontract GuardianStorage {\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function guardianCount(BaseWallet _wallet) external view returns (uint256);\r\n    function getGuardians(BaseWallet _wallet) external view returns (address[] memory);\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n    function setLock(BaseWallet _wallet, uint256 _releaseAfter) external;\r\n    function isLocked(BaseWallet _wallet) external view returns (bool);\r\n    function getLock(BaseWallet _wallet) external view returns (uint256);\r\n    function getLocker(BaseWallet _wallet) external view returns (address);\r\n}\r\n\r\n/**\r\n * @title TransferStorage\r\n * @dev Contract storing the state of wallets related to transfers (limit and whitelist).\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ncontract TransferStorage {\r\n    function setWhitelist(BaseWallet _wallet, address _target, uint256 _value) external;\r\n    function getWhitelist(BaseWallet _wallet, address _target) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Interface for a contract that can invest tokens in order to earn an interest.\r\n * @author Julien Niset - <julien@argent.xyz>\r\n */\r\ninterface Invest {\r\n\r\n    event InvestmentAdded(address indexed _wallet, address _token, uint256 _invested, uint256 _period);\r\n    event InvestmentRemoved(address indexed _wallet, address _token, uint256 _fraction);\r\n\r\n    function addInvestment(\r\n        BaseWallet _wallet, \r\n        address _token, \r\n        uint256 _amount, \r\n        uint256 _period\r\n    ) \r\n        external\r\n        returns (uint256 _invested);\r\n\r\n    function removeInvestment(\r\n        BaseWallet _wallet, \r\n        address _token, \r\n        uint256 _fraction\r\n    ) \r\n        external;\r\n\r\n    function getInvestment(\r\n        BaseWallet _wallet,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 _tokenValue, uint256 _periodEnd);\r\n}\r\n\r\ncontract VatLike {\r\n    function can(address, address) public view returns (uint);\r\n    function dai(address) public view returns (uint);\r\n    function hope(address) public;\r\n}\r\n\r\ncontract JoinLike {\r\n    function gem() public returns (GemLike);\r\n    function dai() public returns (GemLike);\r\n    function join(address, uint) public;\r\n    function exit(address, uint) public;\r\n    VatLike public vat;\r\n}\r\n\r\ncontract PotLike {\r\n    function chi() public view returns (uint);\r\n    function pie(address) public view returns (uint);\r\n    function drip() public;\r\n}\r\n\r\ncontract ScdMcdMigration {\r\n    function swapSaiToDai(uint wad) external;\r\n    function swapDaiToSai(uint wad) external;\r\n    JoinLike public saiJoin;\r\n    JoinLike public wethJoin;\r\n    JoinLike public daiJoin;\r\n}\r\n\r\ncontract GemLike {\r\n    function balanceOf(address) public view returns (uint);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns ceil(a / b).\r\n    */\r\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        if(a % b == 0) {\r\n            return c;\r\n        }\r\n        else {\r\n            return c + 1;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseModule\r\n * @dev Basic module that contains some methods common to all modules.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract BaseModule is Module {\r\n\r\n    // Empty calldata\r\n    bytes constant internal EMPTY_BYTES = \"\";\r\n\r\n    // The adddress of the module registry.\r\n    ModuleRegistry internal registry;\r\n    // The address of the Guardian storage\r\n    GuardianStorage internal guardianStorage;\r\n\r\n    /**\r\n     * @dev Throws if the wallet is locked.\r\n     */\r\n    modifier onlyWhenUnlocked(BaseWallet _wallet) {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(!guardianStorage.isLocked(_wallet), \"BM: wallet must be unlocked\");\r\n        _;\r\n    }\r\n\r\n    event ModuleCreated(bytes32 name);\r\n    event ModuleInitialised(address wallet);\r\n\r\n    constructor(ModuleRegistry _registry, GuardianStorage _guardianStorage, bytes32 _name) public {\r\n        registry = _registry;\r\n        guardianStorage = _guardianStorage;\r\n        emit ModuleCreated(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the target wallet of the call.\r\n     */\r\n    modifier onlyWallet(BaseWallet _wallet) {\r\n        require(msg.sender == address(_wallet), \"BM: caller must be wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\r\n     */\r\n    modifier onlyWalletOwner(BaseWallet _wallet) {\r\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \"BM: must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet.\r\n     */\r\n    modifier strictOnlyWalletOwner(BaseWallet _wallet) {\r\n        require(isOwner(_wallet, msg.sender), \"BM: msg.sender must be an owner for the wallet\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) public onlyWallet(_wallet) {\r\n        emit ModuleInitialised(address(_wallet));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\r\n    * module by mistake and transfer them to the Module Registry. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(address(registry), total);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to check if an address is the owner of a target wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _addr The address.\r\n     */\r\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\r\n        return _wallet.owner() == _addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to invoke a wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _to The target address for the transaction.\r\n     * @param _value The value of the transaction.\r\n     * @param _data The data of the transaction.\r\n     */\r\n    function invokeWallet(address _wallet, address _to, uint256 _value, bytes memory _data) internal returns (bytes memory _res) {\r\n        bool success;\r\n        // solium-disable-next-line security/no-call-value\r\n        (success, _res) = _wallet.call(abi.encodeWithSignature(\"invoke(address,uint256,bytes)\", _to, _value, _data));\r\n        if(success && _res.length > 0) { //_res is empty if _wallet is an \"old\" BaseWallet that can't return output values\r\n            (_res) = abi.decode(_res, (bytes));\r\n        } else if (_res.length > 0) {\r\n            // solium-disable-next-line security/no-inline-assembly\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        } else if(!success) {\r\n            revert(\"BM: wallet invoke reverted\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title RelayerModule\r\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract RelayerModule is BaseModule {\r\n\r\n    uint256 constant internal BLOCKBOUND = 10000;\r\n\r\n    mapping (address => RelayerConfig) public relayer;\r\n\r\n    struct RelayerConfig {\r\n        uint256 nonce;\r\n        mapping (bytes32 => bool) executedTx;\r\n    }\r\n\r\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\r\n\r\n    /**\r\n     * @dev Throws if the call did not go through the execute() method.\r\n     */\r\n    modifier onlyExecute {\r\n        require(msg.sender == address(this), \"RM: must be called via execute()\");\r\n        _;\r\n    }\r\n\r\n    /* ***************** Abstract method ************************* */\r\n\r\n    /**\r\n    * @dev Gets the number of valid signatures that must be provided to execute a\r\n    * specific relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @return The number of required signatures.\r\n    */\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256);\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST throw if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    */\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool);\r\n\r\n    /* ************************************************************ */\r\n\r\n    /**\r\n    * @dev Executes a relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function execute(\r\n        BaseWallet _wallet,\r\n        bytes calldata _data,\r\n        uint256 _nonce,\r\n        bytes calldata _signatures,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint startGas = gasleft();\r\n        bytes32 signHash = getSignHash(address(this), address(_wallet), 0, _data, _nonce, _gasPrice, _gasLimit);\r\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\r\n        require(verifyData(address(_wallet), _data), \"RM: the wallet authorized is different then the target of the relayed data\");\r\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\r\n        if((requiredSignatures * 65) == _signatures.length) {\r\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\r\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\r\n                    // solium-disable-next-line security/no-call-value\r\n                    (success,) = address(this).call(_data);\r\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\r\n                }\r\n            }\r\n        }\r\n        emit TransactionExecuted(address(_wallet), success, signHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current nonce for a wallet.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\r\n        return relayer[address(_wallet)].nonce;\r\n    }\r\n\r\n    /**\r\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\r\n    * @param _from The starting address for the relayed transaction (should be the module)\r\n    * @param _to The destination address for the relayed transaction (should be the wallet)\r\n    * @param _value The value for the relayed transaction\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function getSignHash(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        uint256 _nonce,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the relayed transaction is unique.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    * @param _signHash The signed hash of the transaction\r\n    */\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        if(relayer[address(_wallet)].executedTx[_signHash] == true) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].executedTx[_signHash] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that a nonce has the correct format and is valid.\r\n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    */\r\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\r\n        if(_nonce <= relayer[address(_wallet)].nonce) {\r\n            return false;\r\n        }\r\n        uint256 nonceBlock = (_nonce & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128;\r\n        if(nonceBlock > block.number + BLOCKBOUND) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].nonce = _nonce;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\r\n    * @param _signedHash The signed hash\r\n    * @param _signatures The concatenated signatures.\r\n    * @param _index The index of the signature to recover.\r\n    */\r\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\r\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\r\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\r\n        }\r\n        require(v == 27 || v == 28);\r\n        return ecrecover(_signedHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n    * @dev Refunds the gas used to the Relayer. \r\n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures. \r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The gas used.\r\n    * @param _gasPrice The gas price for the refund.\r\n    * @param _gasLimit The gas limit for the refund.\r\n    * @param _signatures The number of signatures used in the call.\r\n    * @param _relayer The address of the Relayer.\r\n    */\r\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\r\n        uint256 amount = 29292 + _gasUsed; // 21000 (transaction) + 7620 (execution of refund) + 672 to log the event + _gasUsed\r\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\r\n        if(_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {\r\n            if(_gasPrice > tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            }\r\n            else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            invokeWallet(address(_wallet), _relayer, amount, EMPTY_BYTES);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns false if the refund is expected to fail.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The expected gas used.\r\n    * @param _gasPrice The expected gas price for the refund.\r\n    */\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if(_gasPrice > 0\r\n            && _signatures > 1\r\n            && (address(_wallet).balance < _gasUsed * _gasPrice || _wallet.authorised(address(this)) == false)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\r\n    * as the wallet passed as the input of the execute() method. \r\n    @return false if the addresses are different.\r\n    */\r\n    function verifyData(address _wallet, bytes memory _data) private pure returns (bool) {\r\n        require(_data.length >= 36, \"RM: Invalid dataWallet\");\r\n        address dataWallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\r\n            dataWallet := mload(add(_data, 0x24))\r\n        }\r\n        return dataWallet == _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Parses the data to extract the method signature.\r\n    */\r\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\r\n        require(_data.length >= 4, \"RM: Invalid functionPrefix\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            prefix := mload(add(_data, 0x20))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title OnlyOwnerModule\r\n * @dev Module that extends BaseModule and RelayerModule for modules where the execute() method\r\n * must be called with one signature frm the owner.\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract OnlyOwnerModule is BaseModule, RelayerModule {\r\n\r\n    // bytes4 private constant IS_ONLY_OWNER_MODULE = bytes4(keccak256(\"isOnlyOwnerModule()\"));\r\n\r\n   /**\r\n    * @dev Returns a constant that indicates that the module is an OnlyOwnerModule.\r\n    * @return The constant bytes4(keccak256(\"isOnlyOwnerModule()\"))\r\n    */\r\n    function isOnlyOwnerModule() external pure returns (bytes4) {\r\n        // return IS_ONLY_OWNER_MODULE;\r\n        return this.isOnlyOwnerModule.selector;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * Unlike its overrided parent, this method can be called via the RelayerModule's execute()\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external onlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \"BM: module is not registered\");\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    // Overrides to use the incremental nonce and save some gas\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 /* _signHash */) internal returns (bool) {\r\n        return checkAndUpdateNonce(_wallet, _nonce);\r\n    }\r\n\r\n    function validateSignatures(\r\n        BaseWallet _wallet,\r\n        bytes memory /* _data */,\r\n        bytes32 _signHash,\r\n        bytes memory _signatures\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address signer = recoverSigner(_signHash, _signatures, 0);\r\n        return isOwner(_wallet, signer); // \"OOM: signer must be owner\"\r\n    }\r\n\r\n    function getRequiredSignatures(BaseWallet /* _wallet */, bytes memory /* _data */) internal view returns (uint256) {\r\n        return 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title LimitManager\r\n * @dev Module to manage a daily spending limit\r\n * @author Julien Niset - <julien@argent.im>\r\n */\r\ncontract LimitManager is BaseModule {\r\n\r\n    // large limit when the limit can be considered disabled\r\n    uint128 constant private LIMIT_DISABLED = uint128(-1); // 3.40282366920938463463374607431768211455e+38\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct LimitManagerConfig {\r\n        // The daily limit\r\n        Limit limit;\r\n        // The current usage\r\n        DailySpent dailySpent;\r\n    }\r\n\r\n    struct Limit {\r\n        // the current limit\r\n        uint128 current;\r\n        // the pending limit if any\r\n        uint128 pending;\r\n        // when the pending limit becomes the current limit\r\n        uint64 changeAfter;\r\n    }\r\n\r\n    struct DailySpent {\r\n        // The amount already spent during the current period\r\n        uint128 alreadySpent;\r\n        // The end of the current period\r\n        uint64 periodEnd;\r\n    }\r\n\r\n    // wallet specific storage\r\n    mapping (address => LimitManagerConfig) internal limits;\r\n    // The default limit\r\n    uint256 public defaultLimit;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event LimitChanged(address indexed wallet, uint indexed newLimit, uint64 indexed startAfter);\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(uint256 _defaultLimit) public {\r\n        defaultLimit = _defaultLimit;\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by setting the limit to the default value.\r\n     * @param _wallet The target wallet.\r\n     */\r\n    function init(BaseWallet _wallet) public onlyWallet(_wallet) {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        if(limit.current == 0 && limit.changeAfter == 0) {\r\n            limit.current = uint128(defaultLimit);\r\n        }\r\n    }\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n     * @dev Changes the daily limit.\r\n     * The limit is expressed in ETH and the change is pending for the security period.\r\n     * @param _wallet The target wallet.\r\n     * @param _newLimit The new limit.\r\n     * @param _securityPeriod The security period.\r\n     */\r\n    function changeLimit(BaseWallet _wallet, uint256 _newLimit, uint256 _securityPeriod) internal {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        // solium-disable-next-line security/no-block-members\r\n        uint128 current = (limit.changeAfter > 0 && limit.changeAfter < now) ? limit.pending : limit.current;\r\n        limit.current = current;\r\n        limit.pending = uint128(_newLimit);\r\n        // solium-disable-next-line security/no-block-members\r\n        limit.changeAfter = uint64(now.add(_securityPeriod));\r\n        // solium-disable-next-line security/no-block-members\r\n        emit LimitChanged(address(_wallet), _newLimit, uint64(now.add(_securityPeriod)));\r\n    }\r\n\r\n     /**\r\n     * @dev Disable the daily limit.\r\n     * The change is pending for the security period.\r\n     * @param _wallet The target wallet.\r\n     * @param _securityPeriod The security period.\r\n     */\r\n    function disableLimit(BaseWallet _wallet, uint256 _securityPeriod) internal {\r\n        changeLimit(_wallet, LIMIT_DISABLED, _securityPeriod);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current daily limit for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @return the current limit expressed in ETH.\r\n    */\r\n    function getCurrentLimit(BaseWallet _wallet) public view returns (uint256 _currentLimit) {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        _currentLimit = uint256(currentLimit(limit.current, limit.pending, limit.changeAfter));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns whether the daily limit is disabled for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @return true if the daily limit is disabled, false otherwise.\r\n    */\r\n    function isLimitDisabled(BaseWallet _wallet) public view returns (bool _limitDisabled) {\r\n        uint256 currentLimit = getCurrentLimit(_wallet);\r\n        _limitDisabled = currentLimit == LIMIT_DISABLED;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets a pending limit for a wallet if any.\r\n    * @param _wallet The target wallet.\r\n    * @return the pending limit (in ETH) and the time at chich it will become effective.\r\n    */\r\n    function getPendingLimit(BaseWallet _wallet) external view returns (uint256 _pendingLimit, uint64 _changeAfter) {\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        // solium-disable-next-line security/no-block-members\r\n        return ((now < limit.changeAfter)? (uint256(limit.pending), limit.changeAfter) : (0,0));\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the amount of tokens that has not yet been spent during the current period.\r\n    * @param _wallet The target wallet.\r\n    * @return the amount of tokens (in ETH) that has not been spent yet and the end of the period.\r\n    */\r\n    function getDailyUnspent(BaseWallet _wallet) external view returns (uint256 _unspent, uint64 _periodEnd) {\r\n        uint256 limit = getCurrentLimit(_wallet);\r\n        DailySpent storage expense = limits[address(_wallet)].dailySpent;\r\n        // solium-disable-next-line security/no-block-members\r\n        if(now > expense.periodEnd) {\r\n            _unspent = limit;\r\n            // solium-disable-next-line security/no-block-members\r\n            _periodEnd = uint64(now + 24 hours);\r\n        }\r\n        else {\r\n            _periodEnd = expense.periodEnd;\r\n            if(expense.alreadySpent < limit) {\r\n                _unspent = limit - expense.alreadySpent;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to check if a transfer is within the limit.\r\n    * If yes the daily unspent for the current period is updated.\r\n    * @param _wallet The target wallet.\r\n    * @param _amount The amount for the transfer\r\n    */\r\n    function checkAndUpdateDailySpent(BaseWallet _wallet, uint _amount) internal returns (bool) {\r\n        if(_amount == 0) return true;\r\n        Limit storage limit = limits[address(_wallet)].limit;\r\n        uint128 current = currentLimit(limit.current, limit.pending, limit.changeAfter);\r\n        if(isWithinDailyLimit(_wallet, current, _amount)) {\r\n            updateDailySpent(_wallet, current, _amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to update the daily spent for the current period.\r\n    * @param _wallet The target wallet.\r\n    * @param _limit The current limit for the wallet.\r\n    * @param _amount The amount to add to the daily spent.\r\n    */\r\n    function updateDailySpent(BaseWallet _wallet, uint128 _limit, uint _amount) internal {\r\n        if(_limit != LIMIT_DISABLED) {\r\n            DailySpent storage expense = limits[address(_wallet)].dailySpent;\r\n            // solium-disable-next-line security/no-block-members\r\n            if (expense.periodEnd < now) {\r\n                // solium-disable-next-line security/no-block-members\r\n                expense.periodEnd = uint64(now + 24 hours);\r\n                expense.alreadySpent = uint128(_amount);\r\n            }\r\n            else {\r\n                expense.alreadySpent += uint128(_amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if a transfer amount is withing the daily limit for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _limit The current limit for the wallet.\r\n    * @param _amount The transfer amount.\r\n    * @return true if the transfer amount is withing the daily limit.\r\n    */\r\n    function isWithinDailyLimit(BaseWallet _wallet, uint _limit, uint _amount) internal view returns (bool)  {\r\n        if(_limit == LIMIT_DISABLED) {\r\n            return true;\r\n        }\r\n        DailySpent storage expense = limits[address(_wallet)].dailySpent;\r\n        // solium-disable-next-line security/no-block-members\r\n        if (expense.periodEnd < now) {\r\n            return (_amount <= _limit);\r\n        } else {\r\n            return (expense.alreadySpent + _amount <= _limit && expense.alreadySpent + _amount >= expense.alreadySpent);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to get the current limit from a Limit struct.\r\n    * @param _current The value of the current parameter\r\n    * @param _pending The value of the pending parameter\r\n    * @param _changeAfter The value of the changeAfter parameter\r\n    */\r\n    function currentLimit(uint128 _current, uint128 _pending, uint64 _changeAfter) internal view returns (uint128) {\r\n        // solium-disable-next-line security/no-block-members\r\n        if(_changeAfter > 0 && _changeAfter < now) {\r\n            return _pending;\r\n        }\r\n        return _current;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title BaseTransfer\r\n * @dev Module containing internal methods to execute or approve transfers\r\n * @author Olivier VDB - <olivier@argent.xyz>\r\n */\r\ncontract BaseTransfer is BaseModule {\r\n\r\n    // Mock token address for ETH\r\n    address constant internal ETH_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    // *************** Events *************************** //\r\n\r\n    event Transfer(address indexed wallet, address indexed token, uint256 indexed amount, address to, bytes data);\r\n    event Approved(address indexed wallet, address indexed token, uint256 amount, address spender);\r\n    event CalledContract(address indexed wallet, address indexed to, uint256 amount, bytes data);\r\n\r\n    // *************** Internal Functions ********************* //\r\n\r\n    /**\r\n    * @dev Helper method to transfer ETH or ERC20 for a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The ERC20 address.\r\n    * @param _to The recipient.\r\n    * @param _value The amount of ETH to transfer\r\n    * @param _data The data to *log* with the transfer.\r\n    */\r\n    function doTransfer(BaseWallet _wallet, address _token, address _to, uint256 _value, bytes memory _data) internal {\r\n        if(_token == ETH_TOKEN) {\r\n            invokeWallet(address(_wallet), _to, _value, EMPTY_BYTES);\r\n        }\r\n        else {\r\n            bytes memory methodData = abi.encodeWithSignature(\"transfer(address,uint256)\", _to, _value);\r\n            invokeWallet(address(_wallet), _token, 0, methodData);\r\n        }\r\n        emit Transfer(address(_wallet), _token, _value, _to, _data);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to approve spending the ERC20 of a wallet.\r\n    * @param _wallet The target wallet.\r\n    * @param _token The ERC20 address.\r\n    * @param _spender The spender address.\r\n    * @param _value The amount of token to transfer.\r\n    */\r\n    function doApproveToken(BaseWallet _wallet, address _token, address _spender, uint256 _value) internal {\r\n        bytes memory methodData = abi.encodeWithSignature(\"approve(address,uint256)\", _spender, _value);\r\n        invokeWallet(address(_wallet), _token, 0, methodData);\r\n        emit Approved(address(_wallet), _token, _value, _spender);\r\n    }\r\n\r\n    /**\r\n    * @dev Helper method to call an external contract.\r\n    * @param _wallet The target wallet.\r\n    * @param _contract The contract address.\r\n    * @param _value The ETH value to transfer.\r\n    * @param _data The method data.\r\n    */\r\n    function doCallContract(BaseWallet _wallet, address _contract, uint256 _value, bytes memory _data) internal {\r\n        invokeWallet(address(_wallet), _contract, _value, _data);\r\n        emit CalledContract(address(_wallet), _contract, _value, _data);\r\n    }\r\n}\r\n\r\n/**\r\n * @title MakerV2Manager\r\n * @dev Module to convert SAI <-> DAI and lock/unlock MCD DAI into/from Maker's Pot,\r\n * @author Olivier VDB - <olivier@argent.xyz>\r\n */\r\ncontract MakerV2Manager is Invest, BaseModule, RelayerModule, OnlyOwnerModule {\r\n\r\n    bytes32 constant NAME = \"MakerV2Manager\";\r\n\r\n    // The address of the SAI token\r\n    GemLike public saiToken;\r\n    // The address of the (MCD) DAI token\r\n    GemLike public daiToken;\r\n    // The address of the SAI <-> DAI migration contract\r\n    address public scdMcdMigration;\r\n    // The address of the Pot\r\n    PotLike public pot;\r\n    // The address of the Dai Adapter\r\n    JoinLike public daiJoin;\r\n    // The address of the Vat\r\n    VatLike public vat;\r\n\r\n    // Method signatures to reduce gas cost at depoyment\r\n    bytes4 constant internal ERC20_APPROVE = bytes4(keccak256(\"approve(address,uint256)\"));\r\n    bytes4 constant internal SWAP_SAI_DAI = bytes4(keccak256(\"swapSaiToDai(uint256)\"));\r\n    bytes4 constant internal SWAP_DAI_SAI = bytes4(keccak256(\"swapDaiToSai(uint256)\"));\r\n    bytes4 constant internal ADAPTER_JOIN = bytes4(keccak256(\"join(address,uint256)\"));\r\n    bytes4 constant internal ADAPTER_EXIT = bytes4(keccak256(\"exit(address,uint256)\"));\r\n    bytes4 constant internal VAT_HOPE = bytes4(keccak256(\"hope(address)\"));\r\n    bytes4 constant internal POT_JOIN = bytes4(keccak256(\"join(uint256)\"));\r\n    bytes4 constant internal POT_EXIT = bytes4(keccak256(\"exit(uint256)\"));\r\n\r\n    uint256 constant internal RAY = 10 ** 27;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // ****************** Events *************************** //\r\n\r\n    event TokenConverted(address indexed _wallet, address _srcToken, uint _srcAmount, address _destToken, uint _destAmount);\r\n\r\n    // *************** Constructor ********************** //\r\n\r\n    constructor(\r\n        ModuleRegistry _registry,\r\n        GuardianStorage _guardianStorage,\r\n        ScdMcdMigration _scdMcdMigration,\r\n        PotLike _pot\r\n    )\r\n        BaseModule(_registry, _guardianStorage, NAME)\r\n        public\r\n    {\r\n        scdMcdMigration = address(_scdMcdMigration);\r\n        saiToken = _scdMcdMigration.saiJoin().gem();\r\n        daiJoin = _scdMcdMigration.daiJoin();\r\n        vat = daiJoin.vat();\r\n        daiToken = daiJoin.dai();\r\n        pot = _pot;\r\n    }\r\n\r\n    // *************** External/Public Functions ********************* //\r\n\r\n    /* ********************************** Implementation of Invest ************************************* */\r\n\r\n    /**\r\n     * @dev Invest tokens for a given period.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @param _amount The amount of tokens to invest.\r\n     * @param _period The period over which the tokens may be locked in the investment (optional).\r\n     * @return The exact amount of tokens that have been invested.\r\n     */\r\n    function addInvestment(\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _period\r\n    )\r\n        external\r\n        returns (uint256 _invested)\r\n    {\r\n        require(_token == address(daiToken), \"DM: token should be DAI\");\r\n        joinDsr(_wallet, _amount);\r\n        _invested = _amount;\r\n        emit InvestmentAdded(address(_wallet), address(daiToken), _amount, _period);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit invested postions.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @param _fraction The fraction of invested tokens to exit in per 10000.\r\n     */\r\n    function removeInvestment(\r\n        BaseWallet _wallet,\r\n        address _token,\r\n        uint256 _fraction\r\n    )\r\n        external\r\n    {\r\n        require(_token == address(daiToken), \"DM: token should be DAI\");\r\n        require(_fraction <= 10000, \"DM: invalid fraction value\");\r\n        exitDsr(_wallet, dsrBalance(_wallet).mul(_fraction) / 10000);\r\n        emit InvestmentRemoved(address(_wallet), _token, _fraction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount of investment in a given token.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @return The value in tokens of the investment (including interests) and the time at which the investment can be removed.\r\n     */\r\n    function getInvestment(\r\n        BaseWallet _wallet,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 _tokenValue, uint256 _periodEnd)\r\n    {\r\n        _tokenValue = _token == address(daiToken) ? dsrBalance(_wallet) : 0;\r\n        _periodEnd = 0;\r\n    }\r\n\r\n    /* ****************************************** DSR wrappers ******************************************* */\r\n\r\n    function dsrBalance(BaseWallet _wallet) public view returns (uint256) {\r\n        return pot.chi().mul(pot.pie(address(_wallet))) / RAY;\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner deposit MCD DAI into the DSR Pot.\r\n    * @param _wallet The target wallet.\r\n    * @param _amount The amount of DAI to deposit\r\n    */\r\n    function joinDsr(\r\n        BaseWallet _wallet,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        if (daiToken.balanceOf(address(_wallet)) < _amount) {\r\n            swapSaiToDai(_wallet, _amount - daiToken.balanceOf(address(_wallet)));\r\n        }\r\n\r\n        // Execute drip to get the chi rate updated to rho == now, otherwise join will fail\r\n        pot.drip();\r\n        // Approve DAI adapter to take the DAI amount\r\n        invokeWallet(address(_wallet), address(daiToken), 0, abi.encodeWithSelector(ERC20_APPROVE, address(daiJoin), _amount));\r\n        // Join DAI into the vat (_amount of external DAI is burned and the vat transfers _amount of internal DAI from the adapter to the _wallet)\r\n        invokeWallet(address(_wallet), address(daiJoin), 0, abi.encodeWithSelector(ADAPTER_JOIN, address(_wallet), _amount));\r\n        // Approve the pot to take out (internal) DAI from the wallet's balance in the vat\r\n        if (vat.can(address(_wallet), address(pot)) == 0) {\r\n            invokeWallet(address(_wallet), address(vat), 0, abi.encodeWithSelector(VAT_HOPE, address(pot)));\r\n        }\r\n        // Compute the pie value in the pot\r\n        uint256 pie = _amount.mul(RAY) / pot.chi();\r\n        // Join the pie value to the pot\r\n        invokeWallet(address(_wallet), address(pot), 0, abi.encodeWithSelector(POT_JOIN, pie));\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner withdraw MCD DAI from the DSR Pot.\r\n    * @param _wallet The target wallet.\r\n    * @param _amount The amount of DAI to withdraw\r\n    */\r\n    function exitDsr(\r\n        BaseWallet _wallet,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        // Execute drip to count the savings accumulated until this moment\r\n        pot.drip();\r\n        // Calculates the pie value in the pot equivalent to the DAI wad amount\r\n        uint256 pie = _amount.mul(RAY) / pot.chi();\r\n        // Exit DAI from the pot\r\n        invokeWallet(address(_wallet), address(pot), 0, abi.encodeWithSelector(POT_EXIT, pie));\r\n        // Allow adapter to access the _wallet's DAI balance in the vat\r\n        if (vat.can(address(_wallet), address(daiJoin)) == 0) {\r\n            invokeWallet(address(_wallet), address(vat), 0, abi.encodeWithSelector(VAT_HOPE, address(daiJoin)));\r\n        }\r\n        // Check the actual balance of DAI in the vat after the pot exit\r\n        uint bal = vat.dai(address(_wallet));\r\n        // It is necessary to check if due to rounding the exact _amount can be exited by the adapter.\r\n        // Otherwise it will do the maximum DAI balance in the vat\r\n        uint256 withdrawn = bal >= _amount.mul(RAY) ? _amount : bal / RAY;\r\n        invokeWallet(address(_wallet), address(daiJoin), 0, abi.encodeWithSelector(ADAPTER_EXIT, address(_wallet), withdrawn));\r\n    }\r\n\r\n    function exitAllDsr(\r\n        BaseWallet _wallet\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        // Execute drip to count the savings accumulated until this moment\r\n        pot.drip();\r\n        // Gets the total pie belonging to the _wallet\r\n        uint256 pie = pot.pie(address(_wallet));\r\n        // Exit DAI from the pot\r\n        invokeWallet(address(_wallet), address(pot), 0, abi.encodeWithSelector(POT_EXIT, pie));\r\n        // Allow adapter to access the _wallet's DAI balance in the vat\r\n        if (vat.can(address(_wallet), address(daiJoin)) == 0) {\r\n            invokeWallet(address(_wallet), address(vat), 0, abi.encodeWithSelector(VAT_HOPE, address(daiJoin)));\r\n        }\r\n        // Exits the DAI amount corresponding to the value of pie\r\n        uint256 withdrawn = pot.chi().mul(pie) / RAY;\r\n        invokeWallet(address(_wallet), address(daiJoin), 0, abi.encodeWithSelector(ADAPTER_EXIT, address(_wallet), withdrawn));\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner convert SCD SAI into MCD DAI.\r\n    * @param _wallet The target wallet.\r\n    * @param _amount The amount of SAI to convert\r\n    */\r\n    function swapSaiToDai(\r\n        BaseWallet _wallet,\r\n        uint256 _amount\r\n    )\r\n        public\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(saiToken.balanceOf(address(_wallet)) >= _amount, \"DM: insufficient SAI\");\r\n        invokeWallet(address(_wallet), address(saiToken), 0, abi.encodeWithSelector(ERC20_APPROVE, scdMcdMigration, _amount));\r\n        invokeWallet(address(_wallet), scdMcdMigration, 0, abi.encodeWithSelector(SWAP_SAI_DAI, _amount));\r\n        emit TokenConverted(address(_wallet), address(saiToken), _amount, address(daiToken), _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev lets the owner convert MCD DAI into SCD SAI.\r\n    * @param _wallet The target wallet.\r\n    * @param _amount The amount of DAI to convert\r\n    */\r\n    function swapDaiToSai(\r\n        BaseWallet _wallet,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(daiToken.balanceOf(address(_wallet)) >= _amount, \"DM: insufficient DAI\");\r\n        invokeWallet(address(_wallet), address(daiToken), 0, abi.encodeWithSelector(ERC20_APPROVE, scdMcdMigration, _amount));\r\n        invokeWallet(address(_wallet), scdMcdMigration, 0, abi.encodeWithSelector(SWAP_DAI_SAI, _amount));\r\n        emit TokenConverted(address(_wallet), address(daiToken), _amount, address(saiToken), _amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exitDsr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapDaiToSai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"exitAllDsr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapSaiToDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"joinDsr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_fraction\",\"type\":\"uint256\"}],\"name\":\"removeInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saiToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatures\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"dsrBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getInvestment\",\"outputs\":[{\"name\":\"_tokenValue\",\"type\":\"uint256\"},{\"name\":\"_periodEnd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOnlyOwnerModule\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scdMcdMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"addInvestment\",\"outputs\":[{\"name\":\"_invested\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_guardianStorage\",\"type\":\"address\"},{\"name\":\"_scdMcdMigration\",\"type\":\"address\"},{\"name\":\"_pot\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_srcToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"name\":\"TokenConverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ModuleInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"InvestmentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fraction\",\"type\":\"uint256\"}],\"name\":\"InvestmentRemoved\",\"type\":\"event\"}]","ContractName":"MakerV2Manager","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db010500000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f000000000000000000000000c73e0383f3aff3215e6f04b0331d58cecf0ab849000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf7","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://4799972ba6ce61a3bd48380a6917b63dfcff5c5db122ea9ca64e20f611e3eea6"}]}