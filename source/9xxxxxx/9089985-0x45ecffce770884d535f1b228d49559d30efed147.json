{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.13;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract MockApplication {\n  IERC20 galtToken;\n\n  constructor(IERC20 _galtToken) public {\n    galtToken = _galtToken;\n  }\n\n  function claimProtocolEthFee() external {\n    msg.sender.transfer(address(this).balance);\n  }\n\n  function claimProtocolGaltFee(bytes32 _applicationId) external {\n    galtToken.transfer(msg.sender, galtToken.balanceOf(address(this)));\n  }\n\n  function () external payable {\n  }\n}\n\nlibrary ArraySet {\n  struct AddressSet {\n    address[] array;\n    mapping(address => uint256) map;\n    mapping(address => bool) exists;\n  }\n\n  struct Bytes32Set {\n    bytes32[] array;\n    mapping(bytes32 => uint256) map;\n    mapping(bytes32 => bool) exists;\n  }\n\n  // AddressSet\n  function add(AddressSet storage _set, address _v) internal {\n    require(_set.exists[_v] == false, \"Element already exists\");\n\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n  }\n\n  function addSilent(AddressSet storage _set, address _v) internal returns (bool) {\n    if (_set.exists[_v] == true) {\n      return false;\n    }\n\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n\n    return true;\n  }\n\n  function remove(AddressSet storage _set, address _v) internal {\n    require(_set.array.length > 0, \"Array is empty\");\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\n\n    _remove(_set, _v);\n  }\n\n  function removeSilent(AddressSet storage _set, address _v) internal returns (bool) {\n    if (_set.exists[_v] == false) {\n      return false;\n    }\n\n    _remove(_set, _v);\n    return true;\n  }\n\n  function _remove(AddressSet storage _set, address _v) internal {\n    uint256 lastElementIndex = _set.array.length - 1;\n    uint256 currentElementIndex = _set.map[_v];\n    address lastElement = _set.array[lastElementIndex];\n\n    _set.array[currentElementIndex] = lastElement;\n    delete _set.array[lastElementIndex];\n\n    _set.array.length = _set.array.length - 1;\n    delete _set.map[_v];\n    delete _set.exists[_v];\n    _set.map[lastElement] = currentElementIndex;\n  }\n\n  function clear(AddressSet storage _set) internal {\n    for (uint256 i = 0; i < _set.array.length; i++) {\n      address v = _set.array[i];\n      delete _set.map[v];\n      _set.exists[v] = false;\n    }\n\n    delete _set.array;\n  }\n\n  function has(AddressSet storage _set, address _v) internal view returns (bool) {\n    return _set.exists[_v];\n  }\n\n  function elements(AddressSet storage _set) internal view returns (address[] storage) {\n    return _set.array;\n  }\n\n  function size(AddressSet storage _set) internal view returns (uint256) {\n    return _set.array.length;\n  }\n\n  function isEmpty(AddressSet storage _set) internal view returns (bool) {\n    return _set.array.length == 0;\n  }\n\n  // Bytes32Set\n  function add(Bytes32Set storage _set, bytes32 _v) internal {\n    require(_set.exists[_v] == false, \"Element already exists\");\n\n    _add(_set, _v);\n  }\n\n  function addSilent(Bytes32Set storage _set, bytes32 _v) internal returns (bool) {\n    if (_set.exists[_v] == true) {\n      return false;\n    }\n\n    _add(_set, _v);\n\n    return true;\n  }\n\n  function _add(Bytes32Set storage _set, bytes32 _v) internal {\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n  }\n\n  function remove(Bytes32Set storage _set, bytes32 _v) internal {\n    require(_set.array.length > 0, \"Array is empty\");\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\n\n    _remove(_set, _v);\n  }\n\n  function removeSilent(Bytes32Set storage _set, bytes32 _v) internal returns (bool) {\n    if (_set.exists[_v] == false) {\n      return false;\n    }\n\n    _remove(_set, _v);\n    return true;\n  }\n\n  function _remove(Bytes32Set storage _set, bytes32 _v) internal {\n    uint256 lastElementIndex = _set.array.length - 1;\n    uint256 currentElementIndex = _set.map[_v];\n    bytes32 lastElement = _set.array[lastElementIndex];\n\n    _set.array[currentElementIndex] = lastElement;\n    delete _set.array[lastElementIndex];\n\n    _set.array.length = _set.array.length - 1;\n    delete _set.map[_v];\n    delete _set.exists[_v];\n    _set.map[lastElement] = currentElementIndex;\n  }\n\n  function clear(Bytes32Set storage _set) internal {\n    for (uint256 i = 0; i < _set.array.length; i++) {\n      _set.exists[_set.array[i]] = false;\n    }\n\n    delete _set.array;\n  }\n\n  function has(Bytes32Set storage _set, bytes32 _v) internal view returns (bool) {\n    return _set.exists[_v];\n  }\n\n  function elements(Bytes32Set storage _set) internal view returns (bytes32[] storage) {\n    return _set.array;\n  }\n\n  function size(Bytes32Set storage _set) internal view returns (uint256) {\n    return _set.array.length;\n  }\n\n  function isEmpty(Bytes32Set storage _set) internal view returns (bool) {\n    return _set.array.length == 0;\n  }\n\n  ///////////////////////////// Uint256Set /////////////////////////////////////////\n  struct Uint256Set {\n    uint256[] array;\n    mapping(uint256 => uint256) map;\n    mapping(uint256 => bool) exists;\n  }\n\n  function add(Uint256Set storage _set, uint256 _v) internal {\n    require(_set.exists[_v] == false, \"Element already exists\");\n\n    _add(_set, _v);\n  }\n\n  function addSilent(Uint256Set storage _set, uint256 _v) internal returns (bool) {\n    if (_set.exists[_v] == true) {\n      return false;\n    }\n\n    _add(_set, _v);\n\n    return true;\n  }\n\n  function _add(Uint256Set storage _set, uint256 _v) internal {\n    _set.map[_v] = _set.array.length;\n    _set.exists[_v] = true;\n    _set.array.push(_v);\n  }\n\n  function remove(Uint256Set storage _set, uint256 _v) internal {\n    require(_set.array.length > 0, \"Array is empty\");\n    require(_set.exists[_v] == true, \"Element doesn't exist\");\n\n    _remove(_set, _v);\n  }\n\n  function removeSilent(Uint256Set storage _set, uint256 _v) internal returns (bool) {\n    if (_set.exists[_v] == false) {\n      return false;\n    }\n\n    _remove(_set, _v);\n    return true;\n  }\n\n  function _remove(Uint256Set storage _set, uint256 _v) internal {\n    uint256 lastElementIndex = _set.array.length - 1;\n    uint256 currentElementIndex = _set.map[_v];\n    uint256 lastElement = _set.array[lastElementIndex];\n\n    _set.array[currentElementIndex] = lastElement;\n    delete _set.array[lastElementIndex];\n\n    _set.array.length = _set.array.length - 1;\n    delete _set.map[_v];\n    delete _set.exists[_v];\n    _set.map[lastElement] = currentElementIndex;\n  }\n\n  function clear(Uint256Set storage _set) internal {\n    for (uint256 i = 0; i < _set.array.length; i++) {\n      _set.exists[_set.array[i]] = false;\n    }\n\n    delete _set.array;\n  }\n\n  function has(Uint256Set storage _set, uint256 _v) internal view returns (bool) {\n    return _set.exists[_v];\n  }\n\n  function elements(Uint256Set storage _set) internal view returns (uint256[] storage) {\n    return _set.array;\n  }\n\n  function size(Uint256Set storage _set) internal view returns (uint256) {\n    return _set.array.length;\n  }\n\n  function isEmpty(Uint256Set storage _set) internal view returns (bool) {\n    return _set.array.length == 0;\n  }\n}\n\ncontract Initializable {\n\n  /**\n   * @dev Indicates if the contract has been initialized.\n   */\n  bool public initialized;\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n  }\n}\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract OwnableAndInitializable is Ownable, Initializable {\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract.\n   */\n  modifier isInitializer() {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(tx.origin);\n  }\n\n  /**\n   * @dev Modifier to use in the initialization function of a contract. Allow a custom owner setup;\n   */\n  modifier initializeWithOwner(address _owner) {\n    require(!initialized, \"Contract instance has already been initialized\");\n    _;\n    initialized = true;\n    _transferOwnership(_owner);\n  }\n}\n\ncontract FeeMixer is OwnableAndInitializable {\n  using ArraySet for ArraySet.AddressSet;\n  using ArraySet for ArraySet.Bytes32Set;\n\n  event AddSource(bytes32 id, address indexed addr);\n  event RemoveSource(bytes32 id, address indexed addr);\n  event SetDestinations(uint256 count);\n  event CallSource(bytes32 indexed id, address indexed sender, bool ok);\n  event CallSourceFailed(bytes32 indexed id, address indexed sender, address destination, bytes data);\n  event DistributeEthBeneficiary(address beneficiary, uint256 amount);\n  event DistributeEth(address sender, uint256 beneficiaries, uint256 passedInAmount, uint256 distributedAmount);\n  event DistributeERC20Beneficiary(address beneficiary, uint256 amount);\n  event DistributeERC20(address sender, uint256 beneficiaries, uint256 passedInAmount, uint256 distributedAmount);\n\n  struct Source {\n    address addr;\n    bytes data;\n  }\n\n  address[] internal destinationAddresses;\n  uint256[] internal destinationShares;\n\n  mapping(bytes32 => Source) internal sourceDetails;\n  mapping(address => ArraySet.Bytes32Set) internal sourcesByAddress;\n\n  ArraySet.Bytes32Set internal sources;\n\n  function removeSource(bytes32 _id) external onlyOwner {\n    // keep sourceDetails\n    sources.remove(_id);\n    sourcesByAddress[sourceDetails[_id].addr].remove(_id);\n\n    emit RemoveSource(_id, sourceDetails[_id].addr);\n  }\n\n  function initialize(address _newOwner) external isInitializer {\n    _transferOwnership(_newOwner);\n  }\n\n  function addSource(address _addr, bytes calldata _data) external onlyOwner {\n    bytes32 id = keccak256(abi.encode(_addr, _data));\n\n    require(sources.has(id) == false, \"Source already exists\");\n\n    Source storage s = sourceDetails[id];\n\n    s.addr = _addr;\n    s.data = _data;\n\n    sources.add(id);\n    sourcesByAddress[_addr].add(id);\n\n    emit AddSource(id, _addr);\n  }\n\n  function setDestinations(address[] calldata _addresses, uint256[] calldata _shares) external onlyOwner {\n    require(_addresses.length == _shares.length, \"Address and share lengths should be equal\");\n\n    uint256 total = 0;\n    uint256 len = _shares.length;\n\n    for (uint256 i = 0; i < len; i++) {\n      total += _shares[i];\n    }\n\n    require(total == 100, \"Total shares should be equal 100%\");\n\n    destinationAddresses = _addresses;\n    destinationShares = _shares;\n\n    emit SetDestinations(len);\n  }\n\n  // Trigger contract  contract using `call()` to the source\n  function callSource(bytes32 _sourceId) external returns (bool) {\n    Source storage s = sourceDetails[_sourceId];\n\n    require(sources.has(_sourceId) == true, \"Invalid ID\");\n\n    address destination = s.addr;\n    bytes memory data = s.data;\n    uint256 dataLength = s.data.length;\n\n    bool result;\n\n    assembly {\n        let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n        let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n        result := call(\n            sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                               // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                               // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n            destination,\n            0,                 // Passing in value option doesn't supported\n            d,\n            dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n            x,\n            0                  // Output is ignored, therefore the output size is zero\n        )\n    }\n\n    emit CallSource(_sourceId, msg.sender, result);\n\n    if (result == false) {\n      emit CallSourceFailed(_sourceId, msg.sender, destination, data);\n    }\n\n    return result;\n  }\n\n  function distributeEth(uint256 _value) external {\n    require(_value <= address(this).balance, \"Not enough funds\");\n\n    uint256 total = 0;\n    uint256 reward = 0;\n    address payable beneficiary;\n\n    for (uint256 i = 0; i < destinationShares.length; i++) {\n      reward = _value * destinationShares[i] / 100;\n      beneficiary = address(uint160(destinationAddresses[i]));\n      beneficiary.transfer(reward);\n      total += reward;\n\n      emit DistributeEthBeneficiary(beneficiary, reward);\n    }\n\n    emit DistributeEth(msg.sender, destinationAddresses.length, _value, total);\n  }\n\n  function distributeERC20(address _erc20Contract, uint256 _value) external {\n    IERC20 token = IERC20(_erc20Contract);\n\n    require(_value <= token.balanceOf(address(this)), \"Not enough funds\");\n\n    uint256 total = 0;\n    uint256 reward = 0;\n    address beneficiary;\n\n    for (uint256 i = 0; i < destinationShares.length; i++) {\n      reward = _value * destinationShares[i] / 100;\n      beneficiary = destinationAddresses[i];\n      token.transfer(beneficiary, reward);\n      total += reward;\n\n      emit DistributeERC20Beneficiary(beneficiary, reward);\n    }\n\n    emit DistributeERC20(msg.sender, destinationAddresses.length, _value, total);\n  }\n\n  // GETTERS\n\n  function getSources() external view returns (bytes32[] memory) {\n    return sources.elements();\n  }\n\n  function getSourceCount() external view returns (uint256) {\n    return sources.size();\n  }\n\n  function getSourcesByAddress(address _destination) external view returns (bytes32[] memory) {\n    return sourcesByAddress[_destination].elements();\n  }\n\n  function getSourcesByAddressCount(address _destination) external view returns (uint256) {\n    return sourcesByAddress[_destination].size();\n  }\n\n  function getSource(\n    bytes32 _id\n  )\n    external\n    view\n    returns (\n      bool active,\n      address addr,\n      bytes memory data\n    )\n  {\n    Source storage s = sourceDetails[_id];\n\n    active = sources.has(_id);\n    addr = s.addr;\n    data = s.data;\n  }\n\n  function getDestinations() external view returns (address[] memory addresses, uint256[] memory shares) {\n    return (destinationAddresses, destinationShares);\n  }\n\n  function getDestinationCount() external view returns (uint256) {\n    return destinationAddresses.length;\n  }\n\n  function () external payable {\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"CallSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallSourceFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"passedInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeERC20Beneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"passedInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"}],\"name\":\"DistributeEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeEthBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"SetDestinations\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sourceId\",\"type\":\"bytes32\"}],\"name\":\"callSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distributeERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distributeEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDestinationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDestinations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSourceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSources\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"getSourcesByAddress\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"getSourcesByAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"removeSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"setDestinations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeMixer","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":"bzzr://232068cca4672cc3ef5e91349688180fa352c5a8278466933e9dfc1de81dc584"}]}