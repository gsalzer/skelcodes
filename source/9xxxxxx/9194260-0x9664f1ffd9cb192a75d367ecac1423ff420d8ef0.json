{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\trequire(b <= a);\r\n\t\tc = a - b;\r\n\t}\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a * b;\r\n\t\trequire(a == 0 || c / a == b);\r\n\t}\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\trequire(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\ncontract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () internal {\r\n\t\t_owner = msg.sender;\r\n\t\temit OwnershipTransferred(address(0), _owner);\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: owner cannot be the zero address\");\r\n\t\trequire(newOwner != address(this), \"Ownable: owner cannot be the contract address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract Bitburn is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring constant public name = \"Bitburn\";\r\n\tstring constant public symbol = \"BTU\";\r\n\tuint8 constant public decimals = 0;\r\n\tuint256 private _totalSupply;\r\n\tmapping (address => uint256) private _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private burnRate;\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\tevent Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n\tevent Burn(uint256 amount);\r\n\tevent BurnRateChanged(uint256 previousBurnRate, uint256 newBurnRate);\r\n\tevent BurnOwnerTokens(uint256 amount);\r\n\r\n\tconstructor (address _distrib, address _owner) public {\r\n\t\trequire(_distrib != address(0) && _owner != address(0));\r\n\r\n\t\ttransferOwnership(_owner);\r\n\r\n\t\t_totalSupply = 2000000;\r\n\t\t_balances[_owner] = _totalSupply*3/10;\r\n\t\t_balances[_distrib] = _totalSupply-_balances[_owner];\r\n\t\temit Transfer(address(0), _distrib, _balances[_distrib]);\r\n\t\temit Transfer(address(0), _owner, _balances[_owner]);\r\n\r\n\t\tburnRate = 20;\r\n\t\temit BurnRateChanged(0, burnRate);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev returns the burn percentage of transfer amount.\r\n\t *\r\n\t * Note: see also {setBurnRate}.\r\n\t */\r\n\tfunction getBurnRate() public view returns (uint256) {\r\n\t\treturn burnRate;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev sets the burn percentage of transfer amount from 0.5% to 5% inclusive.\r\n\t *\r\n\t * Emits a {BurnRateChanged} event.\r\n\t *\r\n\t * Requirement: `_burnRate` must be within [5; 50] (to programmatically escape using fractional numbers).\r\n\t */\r\n\tfunction setBurnRate(uint256 _burnRate) public onlyOwner {\r\n\t\t//Amount multiplier: [0.005; 0.05]\r\n\t\trequire(_burnRate >= 5 && _burnRate <= 50, \"Burn rate out of bounds\");\r\n\r\n\t\temit BurnRateChanged(burnRate, _burnRate);\r\n\t\tburnRate = _burnRate;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev totally burns the whole `_amount` of the contract's owner.\r\n\t *\r\n\t * Emits a {BurnOwnerTokens} event.\r\n\t *\r\n\t * Requirement: the contract's owner must have a balance of at least `_amount`.\r\n\t */\r\n\tfunction burnOwnerTokens(uint256 _amount) public onlyOwner {\r\n\t\trequire(_balances[msg.sender] >= _amount, \"Burn amount exceeds balance\");\r\n\r\n\t\t_balances[msg.sender] = _balances[msg.sender].sub(_amount);\r\n\t\t_totalSupply = _totalSupply.sub(_amount);\r\n\t\temit BurnOwnerTokens(_amount);\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn _balances[_owner];\r\n\t}\r\n\r\n\tfunction transfer(address _recipient, uint256 _amount) public returns (bool) {\r\n\t\t_transfer(msg.sender, _recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\r\n\t\trequire(_allowances[_sender][_recipient] >= _amount, \"Transfer amount exceeds allowance\");\r\n\r\n\t\t_transfer(_sender, _recipient, _amount);\r\n\t\t_allowances[_sender][_recipient] = _allowances[_sender][_recipient].sub(_amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n\t\trequire(_balances[_sender] >= _amount, \"Transfer amount exceeds balance\");\r\n\t\trequire(_recipient != address(0), \"Cannot transfer to the zero address\");\r\n\t\trequire(_recipient != address(this), \"Cannot transfer to the contract address\");\r\n\r\n\t\tuint256 burnAmount = _amount.mul(burnRate).div(1000);\r\n\t\tuint256 newAmount = _amount.sub(burnAmount);\r\n\t\t_balances[_sender] = _balances[_sender].sub(_amount);\r\n\t\t_balances[_recipient] = _balances[_recipient].add(newAmount);\r\n\t\t_totalSupply = _totalSupply.sub(burnAmount);\r\n\t\temit Transfer(_sender, _recipient, _amount);\r\n\t\temit Burn(burnAmount);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _amount) public returns (bool) {\r\n\t\t_approve(msg.sender, _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\r\n\t\treturn _allowances[_owner][_spender];\r\n\t}\r\n\r\n\tfunction increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, _spender, _allowances[msg.sender][_spender].add(_addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n\t\t_approve(msg.sender, _spender, _allowances[msg.sender][_spender].sub(_subtractedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address _owner, address _spender, uint256 _amount) internal {\r\n\t\trequire(_spender != address(0), \"Cannot approve to the zero address\");\r\n\t\trequire(_spender != address(this), \"Cannot approve to the contract address\");\r\n\r\n\t\t_allowances[_owner][_spender] = _amount;\r\n\t\temit Approval(_owner, _spender, _amount);\r\n\t}\r\n}\r\n\r\ncontract BitburnDistrib is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tBitburn private BTU;\r\n\r\n\tbool public SALE_FINALIZED;\r\n\tbool private SALE_ACTIVE;\r\n\tbool private SELFDROP_ACTIVE;\r\n\r\n\tuint256 private SALE_PRICE;\r\n\tuint256 private SELFDROP_VALUE;\r\n\tuint256 private RECIP_ADDIT_TEST;\r\n\r\n\tuint256 public SALE_TOTALSENT;\r\n\tuint256 public SALE_TOTALRECEIVED;\r\n\tuint256 public AIRDROP_TOTALSENT;\r\n\tuint256 public AIRDROP_TOTALRECEIVED;\r\n\tuint256 public SELFDROP_TOTALSENT;\r\n\tuint256 public SELFDROP_TOTALRECEIVED;\r\n\tuint256 public PARTNERSHIP_TOTALSENT;\r\n\tuint256 public PARTNERSHIP_TOTALRECEIVED;\r\n\r\n\tmapping (address => bool) private AIRDROP_ALLRECIPS;\r\n\tmapping (address => bool) private SELFDROP_ALLRECIPS;\r\n\r\n\tevent SaleParamsChanged(bool previous_SALE_ACTIVE, uint256 previous_SALE_PRICE, bool new_SALE_ACTIVE, uint256 new_SALE_PRICE);\r\n\tevent SelfdropParamsChanged(bool previous_SELFDROP_ACTIVE, uint256 previous_SELFDROP_VALUE, bool new_SELFDROP_ACTIVE, uint256 new_SELFDROP_VALUE);\r\n\tevent Sold(uint256 sentETH, uint256 boughtETH, uint256 refundedETH, uint256 sentTokens, uint256 receivedTokens);\r\n\tevent Airdropped(uint256 sentTokens, uint256 receivedTokens);\r\n\tevent Selfdropped(uint256 sentTokens, uint256 receivedTokens);\r\n\tevent SentToPartner(address partner, uint256 sentTokens, uint256 receivedTokens);\r\n\r\n\tconstructor () public {\r\n\t\tBTU = new Bitburn(address(this), msg.sender);\r\n\r\n\t\tRECIP_ADDIT_TEST = 10000000000000000;\r\n\t}\r\n\r\n\tfunction getBurnAmount(uint256 _senderAmount) internal view returns (uint256) {\r\n\t\treturn _senderAmount.mul(BTU.getBurnRate()).div(1000);\r\n\t}\r\n\r\n\tfunction getSenderAmount(uint256 _recipientAmount) internal view returns (uint256) {\r\n\t\treturn (uint256(1000)).mul(_recipientAmount).div( (uint256(1000)).sub(BTU.getBurnRate()) );\r\n\t}\r\n\r\n\tfunction getSaleParams() public view returns (bool, uint256) {\r\n\t\treturn (SALE_ACTIVE, SALE_PRICE);\r\n\t}\r\n\r\n\tfunction setSaleParams(bool _SALE_ACTIVE, uint256 _SALE_PRICE) public onlyOwner {\r\n\t\trequire(!SALE_FINALIZED, \"Changing parameters: token sale already finished\");\r\n\t\trequire(_SALE_PRICE > 0, \"Changing parameters: _SALE_PRICE must be > 0\");\r\n\r\n\t\temit SaleParamsChanged(SALE_ACTIVE, SALE_PRICE, _SALE_ACTIVE, _SALE_PRICE);\r\n\t\tSALE_ACTIVE = _SALE_ACTIVE;\r\n\t\tSALE_PRICE = _SALE_PRICE;\r\n\t}\r\n\r\n\tfunction getSelfdropParams() public view returns (bool, uint256) {\r\n\t\treturn (SELFDROP_ACTIVE, SELFDROP_VALUE);\r\n\t}\r\n\r\n\tfunction setSelfdropParams(bool _SELFDROP_ACTIVE, uint256 _SELFDROP_VALUE) public onlyOwner {\r\n\t\trequire(_SELFDROP_VALUE > 0, \"Changing parameters: _SELFDROP_VALUE must be > 0\");\r\n\r\n\t\temit SelfdropParamsChanged(SELFDROP_ACTIVE, SELFDROP_VALUE, _SELFDROP_ACTIVE, _SELFDROP_VALUE);\r\n\t\tSELFDROP_ACTIVE = _SELFDROP_ACTIVE;\r\n\t\tSELFDROP_VALUE = _SELFDROP_VALUE;\r\n\t}\r\n\r\n\tfunction getRecipAdditTest() public view returns (uint256) {\r\n\t\treturn RECIP_ADDIT_TEST;\r\n\t}\r\n\r\n\tfunction setRecipAdditTest(uint256 _RECIP_ADDIT_TEST) public onlyOwner {\r\n\t\tRECIP_ADDIT_TEST = _RECIP_ADDIT_TEST;\r\n\t}\r\n\r\n\tfunction() external payable {\r\n\t\tif (msg.data.length == 0) {\r\n\t\t\tif (msg.value >= SALE_PRICE) {\r\n\t\t\t\tif (SALE_ACTIVE) {\r\n\t\t\t\t\tuint256 thisTokenBalance = BTU.balanceOf(address(this));\r\n\t\t\t\t\trequire(thisTokenBalance > 0, \"Token sale: the contract address has no tokens\");\r\n\r\n\t\t\t\t\tuint256 nettoTake = msg.value.div(SALE_PRICE);\r\n\t\t\t\t\tuint256 bruttoTake = getSenderAmount(nettoTake);\r\n\r\n\t\t\t\t\tif (bruttoTake > thisTokenBalance) {\r\n\t\t\t\t\t\tuint256 nettoGive = thisTokenBalance.sub(getBurnAmount(thisTokenBalance));\r\n\t\t\t\t\t\tuint256 totalCost = nettoGive.mul(SALE_PRICE);\r\n\t\t\t\t\t\tuint256 r = msg.value.sub(totalCost);\r\n\t\t\t\t\t\tif (r > 0) {\r\n\t\t\t\t\t\t\tmsg.sender.transfer(r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trequire(BTU.transfer(msg.sender, thisTokenBalance));\r\n\t\t\t\t\t\tSALE_TOTALSENT = SALE_TOTALSENT.add(thisTokenBalance);\r\n\t\t\t\t\t\tSALE_TOTALRECEIVED = SALE_TOTALRECEIVED.add(nettoGive);\r\n\t\t\t\t\t\temit Sold(msg.value, totalCost, r, thisTokenBalance, nettoGive);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tuint256 totalCost = nettoTake.mul(SALE_PRICE);\r\n\t\t\t\t\t\tuint256 r = msg.value.sub(totalCost);\r\n\t\t\t\t\t\tif (r > 0) {\r\n\t\t\t\t\t\t\tmsg.sender.transfer(r);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trequire(BTU.transfer(msg.sender, bruttoTake));\r\n\t\t\t\t\t\tSALE_TOTALSENT = SALE_TOTALSENT.add(bruttoTake);\r\n\t\t\t\t\t\tSALE_TOTALRECEIVED = SALE_TOTALRECEIVED.add(nettoTake);\r\n\t\t\t\t\t\temit Sold(msg.value, totalCost, r, bruttoTake, nettoTake);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (SALE_FINALIZED) {\r\n\t\t\t\t\trevert(\"Token sale: already finished\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trevert(\"Token sale: currently inactive\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (msg.value == 0) {\r\n\t\t\t\tif (SELFDROP_ACTIVE) {\r\n\t\t\t\t\trequire(!SELFDROP_ALLRECIPS[msg.sender] && msg.sender.balance >= RECIP_ADDIT_TEST, \"Token selfdrop: recipient not validated\");\r\n\t\t\t\t\tuint256 thisTokenBalance = BTU.balanceOf(address(this));\r\n\t\t\t\t\trequire(thisTokenBalance > 0, \"Token selfdrop: the contract address has no tokens\");\r\n\r\n\t\t\t\t\tSELFDROP_ALLRECIPS[msg.sender] = true;\r\n\t\t\t\t\tuint256 bruttoGive = getSenderAmount(SELFDROP_VALUE);\r\n\r\n\t\t\t\t\tif (thisTokenBalance >= bruttoGive) {\r\n\t\t\t\t\t\trequire(BTU.transfer(msg.sender, bruttoGive));\r\n\t\t\t\t\t\tSELFDROP_TOTALSENT = SELFDROP_TOTALSENT.add(bruttoGive);\r\n\t\t\t\t\t\tSELFDROP_TOTALRECEIVED = SELFDROP_TOTALRECEIVED.add(SELFDROP_VALUE);\r\n\t\t\t\t\t\temit Selfdropped(bruttoGive, SELFDROP_VALUE);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tuint256 nettoGive = thisTokenBalance.sub(getBurnAmount(thisTokenBalance));\r\n\t\t\t\t\t\trequire(BTU.transfer(msg.sender, thisTokenBalance));\r\n\t\t\t\t\t\tSELFDROP_TOTALSENT = SELFDROP_TOTALSENT.add(thisTokenBalance);\r\n\t\t\t\t\t\tSELFDROP_TOTALRECEIVED = SELFDROP_TOTALRECEIVED.add(nettoGive);\r\n\t\t\t\t\t\temit Selfdropped(thisTokenBalance, nettoGive);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trevert(\"Token selfdrop: currently inactive\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trevert(\"Token sale / selfdrop: invalid query\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction airdropTokens(address[] memory _batchRecips, uint256 _value) public onlyOwner {\r\n\t\tuint256 recipsLength = _batchRecips.length;\r\n\t\tuint256 bruttoGive = getSenderAmount(_value);\r\n\t\trequire(BTU.balanceOf(address(this)) >= recipsLength*bruttoGive, \"Token airdrop: the contract address has not enough tokens\");\r\n\r\n\t\tuint256 BATCHSENT;\r\n\t\tuint256 BATCHRECEIVED;\r\n\t\tfor (uint256 i=0; i<recipsLength; i++) {\r\n\t\t\tif (!AIRDROP_ALLRECIPS[_batchRecips[i]]) {\r\n\t\t\t\tAIRDROP_ALLRECIPS[_batchRecips[i]] = true;\r\n\t\t\t\trequire(BTU.transfer(_batchRecips[i], bruttoGive));\r\n\t\t\t\tBATCHSENT = BATCHSENT.add(bruttoGive);\r\n\t\t\t\tBATCHRECEIVED = BATCHRECEIVED.add(_value);\r\n\t\t\t}\r\n\t\t}\r\n\t\tAIRDROP_TOTALSENT = AIRDROP_TOTALSENT.add(BATCHSENT);\r\n\t\tAIRDROP_TOTALRECEIVED = AIRDROP_TOTALRECEIVED.add(BATCHRECEIVED);\r\n\t\temit Airdropped(BATCHSENT, BATCHRECEIVED);\r\n\t}\r\n\r\n\tfunction SendToPartner(address _partner, uint256 _amount) public onlyOwner {\r\n\t\tuint256 bruttoGive = getSenderAmount(_amount);\r\n\t\trequire(BTU.transfer(_partner, bruttoGive));\r\n\t\tPARTNERSHIP_TOTALSENT = PARTNERSHIP_TOTALSENT.add(bruttoGive);\r\n\t\tPARTNERSHIP_TOTALRECEIVED = PARTNERSHIP_TOTALRECEIVED.add(_amount);\r\n\t\temit SentToPartner(_partner, bruttoGive, _amount);\r\n\t}\r\n\r\n\tfunction withdrawTokens(uint256 _amount) public onlyOwner {\r\n\t\trequire(!(SELFDROP_ACTIVE || SALE_ACTIVE), \"Token withdrawal: cannot withdraw funds while token distribution is active\");\r\n\r\n\t\trequire(BTU.transfer(msg.sender, _amount));\r\n\t}\r\n\r\n\tfunction withdrawEth(uint256 _amount) public onlyOwner {\r\n\t\trequire(!(SELFDROP_ACTIVE || SALE_ACTIVE), \"ETH withdrawal: cannot withdraw funds while token distribution is active\");\r\n\r\n\t\tmsg.sender.transfer(_amount);\r\n\t}\r\n\r\n\tfunction finalizeSale() public onlyOwner {\r\n\t\trequire(!(SELFDROP_ACTIVE || SALE_ACTIVE) && BTU.balanceOf(address(this)) == 0, \"Finalizing token sale: requirements not met\");\r\n\r\n\t\tSALE_FINALIZED = true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PARTNERSHIP_TOTALRECEIVED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_SALE_ACTIVE\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_SALE_PRICE\",\"type\":\"uint256\"}],\"name\":\"setSaleParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SendToPartner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecipAdditTest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDROP_TOTALRECEIVED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSaleParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_TOTALSENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_FINALIZED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDROP_TOTALSENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_SELFDROP_ACTIVE\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_SELFDROP_VALUE\",\"type\":\"uint256\"}],\"name\":\"setSelfdropParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_TOTALSENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PARTNERSHIP_TOTALSENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_batchRecips\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"airdropTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALE_TOTALRECEIVED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_RECIP_ADDIT_TEST\",\"type\":\"uint256\"}],\"name\":\"setRecipAdditTest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_TOTALRECEIVED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSelfdropParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previous_SALE_ACTIVE\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous_SALE_PRICE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"new_SALE_ACTIVE\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_SALE_PRICE\",\"type\":\"uint256\"}],\"name\":\"SaleParamsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previous_SELFDROP_ACTIVE\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous_SELFDROP_VALUE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"new_SELFDROP_ACTIVE\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_SELFDROP_VALUE\",\"type\":\"uint256\"}],\"name\":\"SelfdropParamsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"Selfdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"SentToPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitburnDistrib","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://dd818ba3442363f52a3aa2059f10b10fd47ee0c409ff3d12e1dedc733bcbf8d5"}]}