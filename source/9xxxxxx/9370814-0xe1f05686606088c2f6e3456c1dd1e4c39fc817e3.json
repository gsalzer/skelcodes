{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n\r\n    Source code of https://fixed.swaprate.finance\r\n\r\n */\r\n\r\n// File: LICENSE\r\n\r\n/**\r\n\r\nThe software and documentation available in this repository (the \"Software\") is protected by copyright law and accessible pursuant to the license set forth below. Copyright © 2020 Blockeys BV. All rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person or organization obtaining the Software (the “Licensee”) to privately study, review, and analyze the Software. Licensee shall not use the Software for any other purpose. Licensee shall not modify, transfer, assign, share, or sub-license the Software or any derivative works of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: opium-contracts/contracts/Lib/LibEIP712.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n/// @title Opium.Lib.LibEIP712 contract implements the domain of EIP712 for meta transactions\r\ncontract LibEIP712 {\r\n    // EIP712Domain structure\r\n    // name - protocol name\r\n    // version - protocol version\r\n    // verifyingContract - signed message verifying contract\r\n    struct EIP712Domain {\r\n        string  name;\r\n        string  version;\r\n        address verifyingContract;\r\n    }\r\n\r\n    // Calculate typehash of ERC712Domain\r\n    bytes32 constant internal EIP712DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\r\n        \"EIP712Domain(\",\r\n        \"string name,\",\r\n        \"string version,\",\r\n        \"address verifyingContract\",\r\n        \")\"\r\n    ));\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 internal DOMAIN_SEPARATOR;\r\n\r\n    // Calculate domain separator at creation\r\n    constructor () public {\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\r\n            EIP712DOMAIN_TYPEHASH,\r\n            keccak256(\"Opium Network\"),\r\n            keccak256(\"1\"),\r\n            address(this)\r\n        ));\r\n    }\r\n\r\n    /// @notice Hashes EIP712Message\r\n    /// @param hashStruct bytes32 Hash of structured message\r\n    /// @return result bytes32 Hash of EIP712Message\r\n    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\r\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\r\n\r\n        assembly {\r\n            // Load free memory pointer\r\n            let memPtr := mload(64)\r\n\r\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\r\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\r\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\r\n\r\n            // Compute hash\r\n            result := keccak256(memPtr, 66)\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: opium-contracts/contracts/Matching/SwaprateMatch/LibSwaprateOrder.sol\r\n\r\npragma solidity 0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/// @title Opium.Matching.SwaprateMatch.LibSwaprateOrder contract implements EIP712 signed SwaprateOrder for Opium.Matching.SwaprateMatch\r\ncontract LibSwaprateOrder is LibEIP712 {\r\n    /**\r\n        Structure of order\r\n        Description should be considered from the order signer (maker) perspective\r\n\r\n        syntheticId - address of derivative syntheticId\r\n        oracleId - address of derivative oracleId\r\n        token - address of derivative margin token\r\n\r\n        makerMarginAddress - address of token that maker is willing to pay with\r\n        takerMarginAddress - address of token that maker is willing to receive\r\n\r\n        makerAddress - address of maker\r\n        takerAddress - address of counterparty (taker). If zero address, then taker could be anyone\r\n\r\n        senderAddress - address which is allowed to settle the order on-chain. If zero address, then anyone could settle\r\n\r\n        relayerAddress - address of the relayer fee recipient\r\n        affiliateAddress - address of the affiliate fee recipient\r\n\r\n        feeTokenAddress - address of token which is used for fees\r\n\r\n        endTime - timestamp of derivative maturity\r\n\r\n        quantity - quantity of positions maker wants to receive\r\n        partialFill - whether maker allows partial fill of it's order\r\n\r\n        param0...param9 - additional params to pass it to syntheticId\r\n\r\n        relayerFee - amount of fee in feeToken that should be paid to relayer\r\n        affiliateFee - amount of fee in feeToken that should be paid to affiliate\r\n\r\n        nonce - unique order ID\r\n\r\n        signature - Signature of EIP712 message. Not used in hash, but then set for order processing purposes\r\n\r\n     */\r\n    struct SwaprateOrder {\r\n        address syntheticId;\r\n        address oracleId;\r\n        address token;\r\n\r\n        address makerAddress;\r\n        address takerAddress;\r\n\r\n        address senderAddress;\r\n\r\n        address relayerAddress;\r\n        address affiliateAddress;\r\n\r\n        address feeTokenAddress;\r\n\r\n        uint256 endTime;\r\n\r\n        uint256 quantity;\r\n        uint256 partialFill;\r\n\r\n        uint256 param0;\r\n        uint256 param1;\r\n        uint256 param2;\r\n        uint256 param3;\r\n        uint256 param4;\r\n        uint256 param5;\r\n        uint256 param6;\r\n        uint256 param7;\r\n        uint256 param8;\r\n        uint256 param9;\r\n\r\n        uint256 relayerFee;\r\n        uint256 affiliateFee;\r\n\r\n        uint256 nonce;\r\n\r\n        // Not used in hash\r\n        bytes signature;\r\n    }\r\n\r\n    // Calculate typehash of Order\r\n    bytes32 constant internal EIP712_ORDER_TYPEHASH = keccak256(abi.encodePacked(\r\n        \"Order(\",\r\n        \"address syntheticId,\",\r\n        \"address oracleId,\",\r\n        \"address token,\",\r\n\r\n        \"address makerAddress,\",\r\n        \"address takerAddress,\",\r\n\r\n        \"address senderAddress,\",\r\n\r\n        \"address relayerAddress,\",\r\n        \"address affiliateAddress,\",\r\n\r\n        \"address feeTokenAddress,\",\r\n\r\n        \"uint256 endTime,\",\r\n\r\n        \"uint256 quantity,\",\r\n        \"uint256 partialFill,\",\r\n\r\n        \"uint256 param0,\",\r\n        \"uint256 param1,\",\r\n        \"uint256 param2,\",\r\n        \"uint256 param3,\",\r\n        \"uint256 param4,\",\r\n        \"uint256 param5,\",\r\n        \"uint256 param6,\",\r\n        \"uint256 param7,\",\r\n        \"uint256 param8,\",\r\n        \"uint256 param9,\",\r\n\r\n        \"uint256 relayerFee,\",\r\n        \"uint256 affiliateFee,\",\r\n\r\n        \"uint256 nonce\",\r\n        \")\"\r\n    ));\r\n\r\n    /// @notice Hashes the order\r\n    /// @param _order SwaprateOrder Order to hash\r\n    /// @return hash bytes32 Order hash\r\n    function hashOrder(SwaprateOrder memory _order) public pure returns (bytes32 hash) {\r\n        hash = keccak256(\r\n            abi.encodePacked(\r\n                abi.encodePacked(\r\n                    EIP712_ORDER_TYPEHASH,\r\n                    uint256(_order.syntheticId),\r\n                    uint256(_order.oracleId),\r\n                    uint256(_order.token),\r\n\r\n                    uint256(_order.makerAddress),\r\n                    uint256(_order.takerAddress),\r\n\r\n                    uint256(_order.senderAddress),\r\n\r\n                    uint256(_order.relayerAddress),\r\n                    uint256(_order.affiliateAddress),\r\n\r\n                    uint256(_order.feeTokenAddress)\r\n                ),\r\n                abi.encodePacked(\r\n                    _order.endTime,\r\n                    _order.quantity,\r\n                    _order.partialFill\r\n                ),\r\n                abi.encodePacked(\r\n                    _order.param0,\r\n                    _order.param1,\r\n                    _order.param2,\r\n                    _order.param3,\r\n                    _order.param4\r\n                ),\r\n                abi.encodePacked(\r\n                    _order.param5,\r\n                    _order.param6,\r\n                    _order.param7,\r\n                    _order.param8,\r\n                    _order.param9\r\n                ),\r\n                abi.encodePacked(\r\n                    _order.relayerFee,\r\n                    _order.affiliateFee,\r\n\r\n                    _order.nonce\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @notice Verifies order signature\r\n    /// @param _hash bytes32 Hash of the order\r\n    /// @param _signature bytes Signature of the order\r\n    /// @param _address address Address of the order signer\r\n    /// @return bool Returns whether `_signature` is valid and was created by `_address`\r\n    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\r\n        require(_signature.length == 65, \"ORDER:INVALID_SIGNATURE_LENGTH\");\r\n\r\n        bytes32 digest = hashEIP712Message(_hash);\r\n        address recovered = retrieveAddress(digest, _signature);\r\n        return _address == recovered;\r\n    }\r\n\r\n    /// @notice Helping function to recover signer address\r\n    /// @param _hash bytes32 Hash for signature\r\n    /// @param _signature bytes Signature\r\n    /// @return address Returns address of signature creator\r\n    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signature, 32))\r\n            s := mload(add(_signature, 64))\r\n            v := byte(0, mload(add(_signature, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n            // solium-disable-next-line arg-overflow\r\n            return ecrecover(_hash, v, r, s);\r\n        }\r\n    }\r\n}\r\n\r\n// File: opium-contracts/contracts/Lib/Whitelisted.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n/// @title Opium.Lib.Whitelisted contract implements whitelist with modifier to restrict access to only whitelisted addresses\r\ncontract Whitelisted {\r\n    // Whitelist array\r\n    address[] internal whitelist;\r\n\r\n    /// @notice This modifier restricts access to functions, which could be called only by whitelisted addresses\r\n    modifier onlyWhitelisted() {\r\n        // Allowance flag\r\n        bool allowed = false;\r\n\r\n        // Going through whitelisted addresses array\r\n        uint256 whitelistLength = whitelist.length;\r\n        for (uint256 i = 0; i < whitelistLength; i++) {\r\n            // If `msg.sender` is met within whitelisted addresses, raise the flag and exit the loop\r\n            if (whitelist[i] == msg.sender) {\r\n                allowed = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Check if flag was raised\r\n        require(allowed, \"Only whitelisted allowed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Getter for whitelisted addresses array\r\n    /// @return Array of whitelisted addresses\r\n    function getWhitelist() public view returns (address[] memory) {\r\n        return whitelist;\r\n    }\r\n}\r\n\r\n// File: opium-contracts/contracts/Lib/WhitelistedWithGovernance.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @title Opium.Lib.WhitelistedWithGovernance contract implements Opium.Lib.Whitelisted and adds governance for whitelist controlling\r\ncontract WhitelistedWithGovernance is Whitelisted {\r\n    // Emitted when new governor is set\r\n    event GovernorSet(address governor);\r\n\r\n    // Emitted when new whitelist is proposed\r\n    event Proposed(address[] whitelist);\r\n    // Emitted when proposed whitelist is committed (set)\r\n    event Committed(address[] whitelist);\r\n\r\n    // Proposal life timelock interval\r\n    uint256 public timeLockInterval;\r\n\r\n    // Governor address\r\n    address public governor;\r\n\r\n    // Timestamp of last proposal\r\n    uint256 public proposalTime;\r\n\r\n    // Proposed whitelist\r\n    address[] public proposedWhitelist;\r\n\r\n    /// @notice This modifier restricts access to functions, which could be called only by governor\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == governor, \"Only governor allowed\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Contract constructor\r\n    /// @param _timeLockInterval uint256 Initial value for timelock interval\r\n    /// @param _governor address Initial value for governor\r\n    constructor(uint256 _timeLockInterval, address _governor) public {\r\n        timeLockInterval = _timeLockInterval;\r\n        governor = _governor;\r\n        emit GovernorSet(governor);\r\n    }\r\n\r\n    /// @notice Calling this function governor could propose new whitelist addresses array. Also it allows to initialize first whitelist if it was not initialized yet.\r\n    function proposeWhitelist(address[] memory _whitelist) public onlyGovernor {\r\n        // Restrict empty proposals\r\n        require(_whitelist.length != 0, \"Can't be empty\");\r\n\r\n        // Consider empty whitelist as not initialized, as proposing of empty whitelists is not allowed\r\n        // If whitelist has never been initialized, we set whitelist right away without proposal\r\n        if (whitelist.length == 0) {\r\n            whitelist = _whitelist;\r\n            emit Committed(_whitelist);\r\n\r\n        // Otherwise save current time as timestamp of proposal, save proposed whitelist and emit event\r\n        } else {\r\n            proposalTime = now;\r\n            proposedWhitelist = _whitelist;\r\n            emit Proposed(_whitelist);\r\n        }\r\n    }\r\n\r\n    /// @notice Calling this function governor commits proposed whitelist if timelock interval of proposal was passed\r\n    function commitWhitelist() public onlyGovernor {\r\n        // Check if proposal was made\r\n        require(proposalTime != 0, \"Didn't proposed yet\");\r\n\r\n        // Check if timelock interval was passed\r\n        require((proposalTime + timeLockInterval) < now, \"Can't commit yet\");\r\n        \r\n        // Set new whitelist and emit event\r\n        whitelist = proposedWhitelist;\r\n        emit Committed(whitelist);\r\n\r\n        // Reset proposal time lock\r\n        proposalTime = 0;\r\n    }\r\n\r\n    /// @notice This function allows governor to transfer governance to a new governor and emits event\r\n    /// @param _governor address Address of new governor\r\n    function setGovernor(address _governor) public onlyGovernor {\r\n        require(_governor != address(0), \"Can't set zero address\");\r\n        governor = _governor;\r\n        emit GovernorSet(governor);\r\n    }\r\n}\r\n\r\n// File: opium-contracts/contracts/Lib/WhitelistedWithGovernanceAndChangableTimelock.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/// @notice Opium.Lib.WhitelistedWithGovernanceAndChangableTimelock contract implements Opium.Lib.WhitelistedWithGovernance and adds possibility for governor to change timelock interval within timelock interval\r\ncontract WhitelistedWithGovernanceAndChangableTimelock is WhitelistedWithGovernance {\r\n    // Emitted when new timelock is proposed\r\n    event Proposed(uint256 timelock);\r\n    // Emitted when new timelock is committed (set)\r\n    event Committed(uint256 timelock);\r\n\r\n    // Timestamp of last timelock proposal\r\n    uint256 public timeLockProposalTime;\r\n    // Proposed timelock\r\n    uint256 public proposedTimeLock;\r\n\r\n    /// @notice Calling this function governor could propose new timelock\r\n    /// @param _timelock uint256 New timelock value\r\n    function proposeTimelock(uint256 _timelock) public onlyGovernor {\r\n        timeLockProposalTime = now;\r\n        proposedTimeLock = _timelock;\r\n        emit Proposed(_timelock);\r\n    }\r\n\r\n    /// @notice Calling this function governor could commit previously proposed new timelock if timelock interval of proposal was passed\r\n    function commitTimelock() public onlyGovernor {\r\n        // Check if proposal was made\r\n        require(timeLockProposalTime != 0, \"Didn't proposed yet\");\r\n        // Check if timelock interval was passed\r\n        require((timeLockProposalTime + timeLockInterval) < now, \"Can't commit yet\");\r\n        \r\n        // Set new timelock and emit event\r\n        timeLockInterval = proposedTimeLock;\r\n        emit Committed(proposedTimeLock);\r\n\r\n        // Reset timelock time lock\r\n        timeLockProposalTime = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/Interface/IAggregator.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\n\r\ninterface IAggregator {\r\n    function execute(bytes calldata _command, LibSwaprateOrder.SwaprateOrder calldata _order) external returns (bool);\r\n}\r\n\r\n// File: contracts/Aggregators/CompoundSupplyAggregator.sol\r\n\r\npragma solidity ^0.5.4;\r\n\r\ncontract ICToken {\r\n    address public underlying;\r\n    function mint(uint256 mintAmount) external returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n}\r\n\r\ncontract IERC20Detailed is IERC20 {\r\n    uint public decimals;\r\n}\r\n\r\ncontract BytesToTypes {\r\n    function bytesToUint256(bytes memory _input, uint _offst) internal pure returns (uint256 _output) {\r\n        assembly {\r\n            _output := mload(add(_input, _offst))\r\n        }\r\n    }\r\n\r\n    function bytesToUint8(bytes memory  _input, uint _offst) internal pure returns (uint8 _output) {\r\n        assembly {\r\n            _output := mload(add(_input, _offst))\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory  _input, uint _offst) internal pure returns (address _output) {\r\n        assembly {\r\n            _output := mload(add(_input, _offst))\r\n        }\r\n    }\r\n}\r\n\r\ncontract CompoundSupplyAggregator is BytesToTypes, WhitelistedWithGovernanceAndChangableTimelock, Ownable, IAggregator, LibSwaprateOrder {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20Detailed;\r\n\r\n    event Deposit(uint256 id, address sender, address cToken, uint256 cTokenAmount);\r\n    event EmergencyWithdraw(uint256 id, address sender, address cToken, uint256 cTokenAmount);\r\n    event Withdraw(uint256 id, address sender, address cToken, uint256 cTokenAmount);\r\n\r\n    uint256 constant public BASE = 1e18;\r\n\r\n    address public sendHelper;\r\n\r\n    // sender => id => cToken => cTokenAmount\r\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public balances;\r\n\r\n    // Nonces\r\n    // sender => nonce\r\n    mapping(address => uint256) public nonces;\r\n\r\n    modifier onlySendHelper() {\r\n        require(msg.sender == sendHelper, \"ONLY_SEND_HELPER\");\r\n        _;\r\n    }\r\n\r\n    // Initial timelock period\r\n    uint256 public constant WHITELIST_TIMELOCK = 1 hours;\r\n\r\n    constructor(address _sendHelper) public WhitelistedWithGovernance(WHITELIST_TIMELOCK, msg.sender) {\r\n        sendHelper = _sendHelper;\r\n    }\r\n\r\n    // @param bytes _command (+1 in parser)\r\n    // [00]      - 1  bytes - command - Only 0x01 is supported - mint()\r\n    // [01 - 20] - 20 bytes - cToken\r\n    function execute(bytes calldata _command, SwaprateOrder calldata _order) external onlySendHelper returns (bool) {\r\n        require(_command.length == 21, \"NOT_VALID_COMMAND\");\r\n        require(_order.partialFill == 0, \"ONLY_ALL_OR_NOTHING\");\r\n\r\n        // Parse command\r\n        uint8 command = bytesToUint8(_command, 1);\r\n\r\n        // Parse cToken address\r\n        ICToken cToken = ICToken(bytesToAddress(_command, 21));\r\n\r\n        // Verify that cToken is in whitelist\r\n        _verifyCToken(address(cToken));\r\n\r\n        // Create instance for token\r\n        IERC20Detailed token = IERC20Detailed(_order.token);\r\n\r\n        // Calculate token base\r\n        uint256 tokenBase = 10 ** token.decimals();\r\n        uint256 nominal = _order.quantity.mul(tokenBase); // TODO: Implement multiplier later when it's done on BE\r\n\r\n        // mint\r\n        if (command != uint8(1)) {\r\n            revert(\"UNKNOWN_COMMAND_CODE\");\r\n        }\r\n\r\n        require(token.allowance(_order.makerAddress, address(this)) >= nominal, \"NOT_APPROVED_AMOUNT\");\r\n        token.safeTransferFrom(_order.makerAddress, address(this), nominal);\r\n        token.safeApprove(address(cToken), nominal);\r\n\r\n        uint256 error = cToken.mint(nominal);\r\n        if (error != 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256 id = ++nonces[_order.makerAddress];\r\n\r\n        uint256 cTokens = nominal.mul(BASE).div(cToken.exchangeRateCurrent());\r\n        balances[_order.makerAddress][id][address(cToken)] = balances[_order.makerAddress][id][address(cToken)].add(cTokens);\r\n\r\n        emit Deposit(id, _order.makerAddress, address(cToken), cTokens);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint256 _id, address _sender, ICToken _cToken, uint256 _cTokenAmount) external onlyOwner {\r\n        require(balances[_sender][_id][address(_cToken)] >= _cTokenAmount, \"NOT_ENOUGH_CTOKENS\");\r\n\r\n        uint256 error = _cToken.redeem(_cTokenAmount);\r\n        if (error != 0) {\r\n            revert(\"Error while redeem\");\r\n        }\r\n\r\n        uint256 redeemedAmount = _cTokenAmount.mul(_cToken.exchangeRateCurrent()).div(BASE);\r\n\r\n        IERC20Detailed(_cToken.underlying()).safeTransfer(_sender, redeemedAmount);\r\n\r\n        balances[_sender][_id][address(_cToken)] = balances[_sender][_id][address(_cToken)].sub(_cTokenAmount);\r\n\r\n        emit Withdraw(_id, _sender, address(_cToken), _cTokenAmount);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 _id, address _cToken, uint256 _amount) external {\r\n        require(balances[msg.sender][_id][_cToken] >= _amount, \"NOT_ENOUGH_CTOKENS\");\r\n\r\n        balances[msg.sender][_id][_cToken] = balances[msg.sender][_id][_cToken].sub(_amount);\r\n        IERC20Detailed(_cToken).safeTransfer(msg.sender, _amount);\r\n\r\n        emit EmergencyWithdraw(_id, msg.sender, _cToken, _amount);\r\n    }\r\n\r\n    function setSendHelper(address _sendHelper) external onlyOwner {\r\n        sendHelper = _sendHelper;\r\n    }\r\n\r\n    function _verifyCToken(address _cToken) view private {\r\n        // Validity flag\r\n        bool valid = false;\r\n\r\n        // Going through whitelisted cTokens array\r\n        uint256 whitelistLength = whitelist.length;\r\n        for (uint256 i = 0; i < whitelistLength; i++) {\r\n            // If `msg.sender` is met within whitelisted addresses, raise the flag and exit the loop\r\n            if (whitelist[i] == _cToken) {\r\n                valid = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Check if flag was raised\r\n        require(valid, \"Only whitelisted cTokens are valid\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sendHelper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"Committed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"Committed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"Proposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WHITELIST_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_command\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialFill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param9\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwaprateOrder.SwaprateOrder\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"syntheticId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialFill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param9\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwaprateOrder.SwaprateOrder\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"}],\"name\":\"proposeTimelock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"proposeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposedWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sendHelper\",\"type\":\"address\"}],\"name\":\"setSendHelper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockProposalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"contract ICToken\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundSupplyAggregator","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e60c3a67c51483f7b619ff6e47f5f2d14de7d7d4","Library":"","LicenseType":"None","SwarmSource":"bzzr://0cb6daf6b38236e34b80ce65b8b740f6565d24e84c8dde5de4947fbe124d187b"}]}