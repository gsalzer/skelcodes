{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract Fier {\r\n    string  public name = \"Fire\";\r\n    string  public symbol = \"FIRE\";\r\n    string  public standard = \"DApp Token v1.0\";\r\n    uint256 public totalSupply;\r\n    uint256 public decimals=18;\r\n\r\n    uint256 public origin_block = 0;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public temp_balances;\r\n    mapping(address => uint256) public lastBurnBlockNumber;\r\n    \r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => mapping(address => uint256)) public temp_allowance;\r\n    mapping(address => mapping(address => uint256)) public lastAllowanceBurnBlockNumber; \r\n    \r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    constructor () public {\r\n        totalSupply = 100000000000000*(10**(decimals));\r\n        balanceOf[msg.sender] = totalSupply;\r\n        temp_balances[msg.sender] = totalSupply;\r\n        origin_block = block.number;\r\n        lastBurnBlockNumber[msg.sender] = origin_block;\r\n\r\n    }\r\n    \r\n    function burn (address _add) public returns(bool success){\r\n        \r\n        uint256 unit;\r\n        uint256 lastBurnBlockNumber_add = lastBurnBlockNumber[_add];\r\n        uint256 lastBlockNumber = block.number;\r\n        \r\n        if (lastBurnBlockNumber_add<(27000000 + origin_block)){\r\n            \r\n            if (lastBlockNumber>(origin_block+27000000)){\r\n                lastBlockNumber = origin_block + 27000000;\r\n            }\r\n            \r\n            uint256 difference = lastBlockNumber - lastBurnBlockNumber_add;\r\n            \r\n            uint256 balance = temp_balances[_add];\r\n           \r\n            \r\n            if (difference>10000000){\r\n                \r\n                unit = (difference/10000000);\r\n                \r\n                for (uint256 i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*3593813)/100000000000);\r\n                }\r\n                \r\n                difference = (difference-(unit*10000000));\r\n            }\r\n            \r\n            if (difference>1000000){\r\n                \r\n                unit = (difference/1000000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*35938136636)/100000000000);\r\n                }\r\n                \r\n                difference = (difference-(unit*1000000));\r\n            }\r\n            \r\n            if (difference>100000){\r\n                \r\n                unit = (difference/100000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*90272517794)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*100000));\r\n\r\n                \r\n            }\r\n            \r\n            if (difference>10000){\r\n                \r\n                unit=(difference/10000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*98981847473)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*10000));\r\n\r\n            }\r\n            \r\n            if (difference>1000){\r\n                \r\n                unit=(difference/1000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99897715231)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*1000));\r\n\r\n                \r\n            }\r\n            \r\n            if (difference>100){\r\n                \r\n                unit = (difference/100);\r\n\r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99989766812)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*100));\r\n            \r\n            }\r\n            \r\n            if (difference>10){\r\n                \r\n                unit = (difference/10);\r\n\r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99998976634)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*10));\r\n                \r\n            }\r\n            \r\n            if (difference>1){\r\n                \r\n                unit = difference;\r\n\r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99999897662)/100000000000);\r\n                    \r\n                }\r\n                \r\n\r\n            }\r\n\r\n            totalSupply = ((totalSupply-temp_balances[_add])+balance); \r\n            \r\n            temp_balances[_add] = balance;\r\n\r\n        }\r\n        \r\n        lastBurnBlockNumber[_add]=lastBlockNumber;\r\n        \r\n        if (msg.sender==_add){\r\n            balanceOf[msg.sender] = temp_balances[msg.sender];\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burn_allowance (address _add, address _add2) public returns (bool success){\r\n        \r\n        uint256 unit;\r\n        uint256 lastBurnBlockNumber_add = lastAllowanceBurnBlockNumber[_add][_add2];\r\n        uint256 lastBlockNumber = block.number;\r\n        \r\n        if (lastBurnBlockNumber_add<(27000000 + origin_block)){\r\n            if (lastBlockNumber>(origin_block+27000000)){\r\n                lastBlockNumber = origin_block + 27000000;\r\n            }\r\n            \r\n            uint256 balance = temp_allowance[_add][_add2];\r\n            uint256 difference = lastBlockNumber - lastBurnBlockNumber_add;\r\n            \r\n            if (difference>10000000){\r\n                \r\n                unit = (difference/10000000);\r\n                \r\n                for (uint256 i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*3593813)/100000000000);\r\n                }\r\n                \r\n                difference = (difference-(unit*10000000));\r\n            }\r\n            \r\n            if (difference>1000000){\r\n                \r\n                unit = (difference/1000000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*35938136636)/100000000000);\r\n                }\r\n                \r\n                difference = (difference-(unit*1000000));\r\n            }\r\n            \r\n            if (difference>100000){\r\n                \r\n                unit = (difference/100000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*90272517794)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*100000));\r\n\r\n                \r\n            }\r\n            \r\n            if (difference>10000){\r\n                \r\n                unit=(difference/10000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*98981847473)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*10000));\r\n\r\n            }\r\n            \r\n            if (difference>1000){\r\n                \r\n                unit=(difference/1000);\r\n                \r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99897715231)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*1000));\r\n\r\n                \r\n            }\r\n            \r\n            if (difference>100){\r\n                \r\n                unit = (difference/100);\r\n\r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99989766812)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*100));\r\n            \r\n            }\r\n            \r\n            if (difference>10){\r\n                \r\n                unit = (difference/10);\r\n\r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99998976634)/100000000000);\r\n                    \r\n                }\r\n                \r\n                difference = (difference-(unit*10));\r\n                \r\n            }\r\n            \r\n            if (difference>1){\r\n                \r\n                unit = difference;\r\n\r\n                for (i=0; i<unit; i++){\r\n                    \r\n                    balance = ((balance*99999897662)/100000000000);\r\n                    \r\n                }\r\n                \r\n\r\n            }\r\n            \r\n            temp_allowance[_add][_add2] = balance;\r\n            \r\n        }\r\n        \r\n        lastAllowanceBurnBlockNumber[_add][_add2] = lastBlockNumber;\r\n        \r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        burn(msg.sender);\r\n        \r\n        require(balanceOf[msg.sender] >= _value);\r\n        \r\n        temp_balances[msg.sender] = (temp_balances[msg.sender]-_value);\r\n        balanceOf[msg.sender] = (balanceOf[msg.sender] - _value);\r\n        \r\n        burn(_to);\r\n        balanceOf[_to] = balanceOf[_to] + _value;\r\n        temp_balances[_to] = temp_balances[_to]+_value;\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transfer_percentage(address _to, uint256 _percentage) public returns (bool success) {\r\n        \r\n        burn(msg.sender);\r\n        \r\n        require(_percentage<10000000000);\r\n        \r\n        uint256 _value = ((_percentage*balanceOf[msg.sender])/10000000000);\r\n        \r\n        require(balanceOf[msg.sender] >= _value);\r\n        \r\n        temp_balances[msg.sender] = (temp_balances[msg.sender] - _value);\r\n\r\n        balanceOf[msg.sender] = (balanceOf[msg.sender]-_value);\r\n        \r\n        burn(_to);\r\n        temp_balances[_to] = (temp_balances[_to]+ _value);\r\n        balanceOf[_to] = (balanceOf[_to]+ _value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        temp_allowance[msg.sender][_spender] = _value;\r\n        lastAllowanceBurnBlockNumber[msg.sender][_spender]=block.number;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n                \r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        \r\n        burn(_from);\r\n        \r\n        burn_allowance(_from, msg.sender);\r\n        \r\n        require(_value <= temp_allowance[_from][msg.sender]);\r\n        require(_value <= temp_balances[_from]);\r\n        \r\n        \r\n        balanceOf[_from] = (balanceOf[_from] - _value);\r\n        temp_balances[_from] = (temp_balances[_from] - _value);\r\n        \r\n        burn(_to);\r\n        \r\n        balanceOf[_to] = (balanceOf[_to] + _value);\r\n        temp_balances[_to] = (temp_balances[_to] + _value);\r\n        \r\n        allowance[_from][msg.sender] = (allowance[_from][msg.sender] - _value);\r\n        temp_allowance[_from][msg.sender] = (temp_allowance[_from][msg.sender] - _value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"},{\"name\":\"_add2\",\"type\":\"address\"}],\"name\":\"burn_allowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBurnBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"transfer_percentage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"temp_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"temp_allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAllowanceBurnBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"origin_block\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Fier","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://0da91c142ec78b5f055f4b3401cd11c9710e9da7f074f27d35b21114cbb046d7"}]}