{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ConnectBasic.\r\n * @dev Connector to deposit/withdraw assets.\r\n */\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address _user) external view returns (bool);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint _id) external returns (uint _num);\r\n    function setUint(uint _id, uint _val) external;\r\n}\r\n\r\ninterface EventInterface {\r\n    function emitEvent(uint64 _connectorID, bytes4 _eventCode, bytes calldata _eventData) external;\r\n}\r\n\r\ncontract Memory {\r\n\r\n    /**\r\n     * @dev Return InstaMemory Address.\r\n     */\r\n    function getMemoryAddr() public pure returns (address) {\r\n        return 0x9e95a00eF2b580130C535aA9900bd2DFB6ADDB8C; // InstaMemory Address\r\n    }\r\n\r\n    /**\r\n     * @dev Return InstaEvent Address.\r\n     */\r\n    function getEventAddr() public pure returns (address) {\r\n        return 0x7dca403Db8aE6dA00Cfbd3bc04755713B38A0544;\r\n    }\r\n\r\n    function connectorID() public pure returns(uint64) {\r\n        return 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Stored Uint Value From InstaMemory.\r\n     * @param getId Storage ID.\r\n     * @param val if any value.\r\n     */\r\n    function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n        returnVal = getId == 0 ? val : MemoryInterface(getMemoryAddr()).getUint(getId);\r\n    }\r\n\r\n    /**\r\n     * @dev Store Uint Value In InstaMemory.\r\n     * @param setId Storage ID.\r\n     * @param val Value To store.\r\n     */\r\n    function setUint(uint setId, uint val) internal {\r\n        if (setId != 0) MemoryInterface(getMemoryAddr()).setUint(setId, val);\r\n    }\r\n\r\n}\r\n\r\ncontract BasicResolver is Memory {\r\n\r\n    event LogDeposit(address erc20, uint tokenAmt, uint getId, uint setId);\r\n    event LogWithdraw(address erc20, uint tokenAmt, address to, uint getId, uint setId);\r\n\r\n    /**\r\n     * @dev ETH Address.\r\n     */\r\n    function getEthAddr() public pure returns (address) {\r\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit Assets To Smart Account.\r\n     * @param erc20 Token Address.\r\n     * @param tokenAmt Token Amount.\r\n     * @param getId Get Storage ID.\r\n     * @param setId Set Storage ID.\r\n     */\r\n    function deposit(address erc20, uint tokenAmt, uint getId, uint setId) public payable {\r\n        uint amt = getUint(getId, tokenAmt);\r\n        if (erc20 != getEthAddr()) {\r\n            ERC20Interface token = ERC20Interface(erc20);\r\n            amt = amt == uint(-1) ? token.balanceOf(msg.sender) : amt;\r\n            token.transferFrom(msg.sender, address(this), amt);\r\n        } else {\r\n            require(msg.value == amt, \"invalid-ether-amount\");\r\n        }\r\n        setUint(setId, amt);\r\n        emit LogDeposit(erc20, amt, getId, setId);\r\n        bytes4 _eventCode = bytes4(keccak256(\"LogDeposit(address, uint, uint, uint)\"));\r\n        bytes memory _eventParam = abi.encode(erc20, amt, getId, setId);\r\n        EventInterface(getEventAddr()).emitEvent(connectorID(), _eventCode, _eventParam);\r\n    }\r\n\r\n   /**\r\n     * @dev Withdraw Assets To Smart Account.\r\n     * @param erc20 Token Address.\r\n     * @param tokenAmt Token Amount.\r\n     * @param to Withdraw token address.\r\n     * @param getId Get Storage ID.\r\n     * @param setId Set Storage ID.\r\n     */\r\n    function withdraw(\r\n        address erc20,\r\n        uint tokenAmt,\r\n        address payable to,\r\n        uint getId,\r\n        uint setId\r\n    ) public payable {\r\n        require(AccountInterface(address(this)).isAuth(to), \"invalid-to-address\");\r\n        uint amt = getUint(getId, tokenAmt);\r\n        if (erc20 == getEthAddr()) {\r\n            amt = amt == uint(-1) ? address(this).balance : amt;\r\n            to.transfer(amt);\r\n        } else {\r\n            ERC20Interface token = ERC20Interface(erc20);\r\n            amt = amt == uint(-1) ? token.balanceOf(address(this)) : amt;\r\n            token.transfer(to, amt);\r\n        }\r\n        setUint(setId, amt);\r\n        emit LogWithdraw(erc20, amt, to, getId, setId);\r\n        bytes4 _eventCode = bytes4(keccak256(\"LogWithdraw(address, uint, address, uint, uint)\"));\r\n        bytes memory _eventParam = abi.encode(erc20, amt, to, getId, setId);\r\n        EventInterface(getEventAddr()).emitEvent(connectorID(), _eventCode, _eventParam);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ConnectBasic is BasicResolver {\r\n    string public name = \"Basic-v1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemoryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectBasic","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://fcef06a0804bc8506470dd6f6669f43b6ab8c24726f41d67f72edc4318c084f0"}]}