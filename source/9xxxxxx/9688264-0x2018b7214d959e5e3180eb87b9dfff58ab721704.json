{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with buidler v1.1.2 https://buidler.dev\n\n// File contracts/PProxyStorage.sol\n\npragma solidity ^0.6.2;\n\ncontract PProxyStorage {\n\n    function readString(bytes32 _key) public view returns(string memory) {\n        return bytes32ToString(storageRead(_key));\n    }\n\n    function setString(bytes32 _key, string memory _value) internal {\n        storageSet(_key, stringToBytes32(_value));\n    }\n\n    function readBool(bytes32 _key) public view returns(bool) {\n        return storageRead(_key) == bytes32(uint256(1));\n    }\n\n    function setBool(bytes32 _key, bool _value) internal {\n        if(_value) {\n            storageSet(_key, bytes32(uint256(1)));\n        } else {\n            storageSet(_key, bytes32(uint256(0)));\n        }\n    }\n\n    function readAddress(bytes32 _key) public view returns(address) {\n        return bytes32ToAddress(storageRead(_key));\n    }\n\n    function setAddress(bytes32 _key, address _value) internal {\n        storageSet(_key, addressToBytes32(_value));\n    }\n\n    function storageRead(bytes32 _key) public view returns(bytes32) {\n        bytes32 value;\n        //solium-disable-next-line security/no-inline-assembly\n        assembly {\n            value := sload(_key)\n        }\n        return value;\n    }\n\n    function storageSet(bytes32 _key, bytes32 _value) internal {\n        // targetAddress = _address;  // No!\n        bytes32 implAddressStorageKey = _key;\n        //solium-disable-next-line security/no-inline-assembly\n        assembly {\n            sstore(implAddressStorageKey, _value)\n        }\n    }\n\n    function bytes32ToAddress(bytes32 _value) public pure returns(address) {\n        return address(uint160(uint256(_value)));\n    }\n\n    function addressToBytes32(address _value) public pure returns(bytes32) {\n        return bytes32(uint256(_value));\n    }\n\n    function stringToBytes32(string memory _value) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(_value);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(_value, 32))\n        }\n    }\n\n    function bytes32ToString(bytes32 _value) public pure returns (string memory) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint256 j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(_value) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (uint256 j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n}\n\n\n// File contracts/PProxy.sol\n\npragma solidity ^0.6.2;\n\n\ncontract PProxy is PProxyStorage {\n\n    bytes32 constant IMPLEMENTATION_SLOT = keccak256(abi.encodePacked(\"IMPLEMENTATION_SLOT\"));\n    bytes32 constant OWNER_SLOT = keccak256(abi.encodePacked(\"OWNER_SLOT\"));\n\n    modifier onlyProxyOwner() {\n        require(msg.sender == readAddress(OWNER_SLOT), \"PProxy.onlyProxyOwner: msg sender not owner\");\n        _;\n    }\n\n    constructor () public {\n        setAddress(OWNER_SLOT, msg.sender);\n    }\n\n    function getProxyOwner() public view returns (address) {\n       return readAddress(OWNER_SLOT);\n    }\n\n    function setProxyOwner(address _newOwner) onlyProxyOwner public {\n        setAddress(OWNER_SLOT, _newOwner);\n    }\n\n    function getImplementation() public view returns (address) {\n        return readAddress(IMPLEMENTATION_SLOT);\n    }\n\n    function setImplementation(address _newImplementation) onlyProxyOwner public {\n        setAddress(IMPLEMENTATION_SLOT, _newImplementation);\n    }\n\n\n    fallback () external payable {\n       return internalFallback();\n    }\n\n    function internalFallback() internal virtual {\n        address contractAddr = readAddress(IMPLEMENTATION_SLOT);\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize())\n            let result := delegatecall(gas(), contractAddr, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n\n}\n\n\n// File contracts/interfaces/IPProxyOverrides.sol\n\npragma solidity ^0.6.2;\n\ninterface IPProxyOverrides {\n    function doesOverride(bytes4 _selector) external view returns (bool);\n}\n\n\n// File contracts/PProxyOverrideable.sol\n\npragma solidity ^0.6.2;\n\n\n\ncontract PProxyOverrideable is PProxy {\n\n    bytes32 constant OVERRIDES_SLOT = keccak256(abi.encodePacked(\"OVERRIDES_SLOT\"));\n\n    function getOverrides() public view returns (address) {\n        return readAddress(OVERRIDES_SLOT);\n    }\n\n    function setOverrides(address _newOverrides) public onlyProxyOwner {\n        setAddress(OVERRIDES_SLOT, _newOverrides);\n    }\n\n    function internalFallback() internal virtual override {\n        IPProxyOverrides overrides = IPProxyOverrides(readAddress(OVERRIDES_SLOT));\n        // If overrrides function implements function override the called function.\n        if(overrides.doesOverride(msg.sig)) {\n            address contractAddr = address(overrides);\n            assembly {\n                let ptr := mload(0x40)\n                calldatacopy(ptr, 0, calldatasize())\n                let result := delegatecall(gas(), contractAddr, ptr, calldatasize(), 0, 0)\n                let size := returndatasize()\n                returndatacopy(ptr, 0, size)\n\n                switch result\n                case 0 { revert(ptr, size) }\n                default { return(ptr, size) }\n            }\n        } else {\n            super.internalFallback();\n        }\n    }\n}\n\n\n// File contracts/PProxyPausable.sol\n\npragma solidity ^0.6.2;\n\n\ncontract PProxyPausable is PProxy {\n\n    bytes32 constant PAUSED_SLOT = keccak256(abi.encodePacked(\"PAUSED_SLOT\"));\n    bytes32 constant PAUZER_SLOT = keccak256(abi.encodePacked(\"PAUZER_SLOT\"));\n\n    constructor() PProxy() public {\n        setAddress(PAUZER_SLOT, msg.sender);\n    }\n\n    modifier onlyPauzer() {\n        require(msg.sender == readAddress(PAUZER_SLOT), \"PProxyPausable.onlyPauzer: msg sender not pauzer\");\n        _;\n    }\n\n    modifier notPaused() {\n        require(!readBool(PAUSED_SLOT), \"PProxyPausable.notPaused: contract is paused\");\n        _;\n    }\n\n    function getPauzer() public view returns (address) {\n        return readAddress(PAUZER_SLOT);\n    }\n\n    function setPauzer(address _newPauzer) public onlyProxyOwner{\n        setAddress(PAUZER_SLOT, _newPauzer);\n    }\n\n    function renouncePauzer() public onlyPauzer {\n        setAddress(PAUZER_SLOT, address(0));\n    }\n\n    function getPaused() public view returns (bool) {\n        return readBool(PAUSED_SLOT);\n    }\n\n    function setPaused(bool _value) public onlyPauzer {\n        setBool(PAUSED_SLOT, _value);\n    }\n\n    function internalFallback() internal virtual override notPaused {\n        super.internalFallback();\n    }\n\n}\n\n\n// File contracts/PProxyOverrideablePausable.sol\n\npragma solidity ^0.6.2;\n\n\n\ncontract PProxyOverrideablePausable is PProxyOverrideable, PProxyPausable {\n    function internalFallback() internal override(PProxyOverrideable, PProxyPausable) notPaused {\n        PProxyOverrideable.internalFallback();\n    }\n}\n\n\n// File contracts/test/TestImplementation.sol\n\npragma solidity ^0.6.2;\n\n\ncontract TestImplementation {\n\n    string public value;\n    string public value1;\n\n    function setValue1(string calldata _value) external {\n        value1 = _value;\n    }\n\n    function getValue1() public view returns(string memory) {\n        return value1;\n    }\n\n    function setValue(string calldata _value) external {\n        value = _value;\n    }\n\n    function getValue() public view returns(string memory) {\n        return value;\n    }\n\n}\n\n\n// File contracts/test/TestOverrides.sol\n\npragma solidity ^0.6.2;\n\ncontract TestOverrides {\n\n    string public value;\n    string public value1;\n\n    function doesOverride(bytes4 _selector) public view returns (bool) {\n        if(\n            _selector == this.name.selector ||\n            _selector == this.symbol.selector ||\n            _selector == this.setValue1.selector\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function name() public view returns (string memory) {\n        return \"TOKEN_NAME\";\n    }\n\n    function symbol() public view returns (string memory) {\n        return \"SYMBOL\";\n    }\n\n    function setValue1(string memory _value) public {\n        value1 = \"OVERWRITTEN\";\n    }\n\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauzer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"readAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"readBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"readString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauzer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauzer\",\"type\":\"address\"}],\"name\":\"setPauzer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setProxyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"storageRead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PProxyPausable","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"","SwarmSource":""}]}