{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _amount) external;\r\n  function withdraw(uint256 _amount) external;\r\n  function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\n// Solidity Interface\r\n\r\ninterface CurveFi {\r\n  function get_dx_underlying(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dy\r\n  ) external view returns (uint256);\r\n  function get_dy_underlying(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx\r\n  ) external view returns (uint256);\r\n  function get_dx(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dy\r\n  ) external view returns (uint256);\r\n  function get_dy(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx\r\n  ) external view returns (uint256);\r\n  function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\ninterface yCurveFi {\r\n  function calc_token_amount(\r\n    uint256[4] calldata amounts,\r\n    bool deposit\r\n  ) external view returns (uint256);\r\n}\r\n\r\ninterface sCurveFi {\r\n  function calc_token_amount(\r\n    uint256[2] calldata amounts,\r\n    bool deposit\r\n  ) external view returns (uint256);\r\n}\r\n\r\ncontract yCurveExchangeView is ReentrancyGuard, Ownable {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n  address public constant yDAI = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n  address public constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n  address public constant yUSDC = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\r\n  address public constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n  address public constant yUSDT = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\r\n  address public constant TUSD = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n  address public constant yTUSD = address(0x73a052500105205d34Daf004eAb301916DA8190f);\r\n  address public constant ySUSD = address(0xF61718057901F84C4eEC4339EF8f0D86D2B45600);\r\n  address public constant SUSD = address(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51);\r\n  address public constant ySWAP = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n  address public constant yCURVE = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n  address public constant sSWAP = address(0xeDf54bC005bc2Df0Cc6A675596e843D28b16A966);\r\n  address public constant sCURVE = address(0x2b645a6A426f22fB7954dC15E583e3737B8d1434);\r\n\r\n  constructor () public {\r\n\r\n  }\r\n\r\n  function get_address_underlying(int128 index) public pure returns (address) {\r\n    if (index == 0) {\r\n      return DAI;\r\n    } else if (index == 1) {\r\n      return USDC;\r\n    } else if (index == 2) {\r\n      return USDT;\r\n    } else if (index == 3) {\r\n      return TUSD;\r\n    } else if (index == 4) {\r\n      return SUSD;\r\n    }\r\n  }\r\n  function get_address(int128 index) public pure returns (address) {\r\n    if (index == 0) {\r\n      return yDAI;\r\n    } else if (index == 1) {\r\n      return yUSDC;\r\n    } else if (index == 2) {\r\n      return yUSDT;\r\n    } else if (index == 3) {\r\n      return yTUSD;\r\n    } else if (index == 4) {\r\n      return ySUSD;\r\n    }\r\n  }\r\n\r\n  function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256) {\r\n    if (i == 4) { // How much j (USDT) will I get, if I sell dx SUSD (i)\r\n      uint256 _yt = dx.mul(1e18).div(yERC20(get_address(i)).getPricePerFullShare());\r\n      uint256 _y = CurveFi(sSWAP).get_dy(0, 1, _yt);\r\n      return calc_withdraw_amount_y(_y, j);\r\n      //return _y.mul(1e18).div(CurveFi(ySWAP).get_virtual_price()).div(decimals[uint256(j)]);\r\n    } else if (j == 4) { // How much SUSD (j) will I get, if I sell dx USDT (i)\r\n      uint256[4] memory _amounts;\r\n      _amounts[uint256(i)] = dx.mul(1e18).div(yERC20(get_address(i)).getPricePerFullShare());\r\n      uint256 _y = yCurveFi(ySWAP).calc_token_amount(_amounts, true);\r\n      uint256 _fee = _y.mul(4).div(10000);\r\n      return CurveFi(sSWAP).get_dy_underlying(1, 0, _y.sub(_fee));\r\n    } else {\r\n      uint256 _dy = CurveFi(ySWAP).get_dy_underlying(i, j, dx);\r\n      return _dy.sub(_dy.mul(4).div(10000));\r\n    }\r\n  }\r\n\r\n  function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256) {\r\n    if (i == 4) { // How much j (USDT) will I get, if I sell dx SUSD (i)\r\n      uint256 _y = CurveFi(sSWAP).get_dy(0, 1, dx);\r\n      uint256 _j = calc_withdraw_amount_y(_y, j);\r\n      return _j.mul(yERC20(get_address(j)).getPricePerFullShare()).div(1e18);\r\n    } else if (j == 4) { // How much SUSD (j) will I get, if I sell dx USDT (i)\r\n      uint256[4] memory _amounts;\r\n      _amounts[uint256(i)] = dx;\r\n      uint256 _y = yCurveFi(ySWAP).calc_token_amount(_amounts, true);\r\n      uint256 _fee = _y.mul(4).div(10000);\r\n      return CurveFi(sSWAP).get_dy(1, 0, _y.sub(_fee));\r\n    } else {\r\n      uint256 _dy = CurveFi(ySWAP).get_dy(i, j, dx);\r\n      return _dy.sub(_dy.mul(4).div(10000));\r\n    }\r\n  }\r\n\r\n  function calc_withdraw_amount_y(uint256 amount, int128 j) public view returns (uint256) {\r\n    uint256 _ytotal = IERC20(yCURVE).totalSupply();\r\n\r\n    uint256 _yDAI = IERC20(yDAI).balanceOf(ySWAP);\r\n    uint256 _yUSDC = IERC20(yUSDC).balanceOf(ySWAP);\r\n    uint256 _yUSDT = IERC20(yUSDT).balanceOf(ySWAP);\r\n    uint256 _yTUSD = IERC20(yTUSD).balanceOf(ySWAP);\r\n\r\n    uint256[4] memory _amounts;\r\n    _amounts[0] = _yDAI.mul(amount).div(_ytotal);\r\n    _amounts[1] = _yUSDC.mul(amount).div(_ytotal);\r\n    _amounts[2] = _yUSDT.mul(amount).div(_ytotal);\r\n    _amounts[3] = _yTUSD.mul(amount).div(_ytotal);\r\n\r\n    uint256 _base = _calc_to(_amounts, j).mul(yERC20(get_address(j)).getPricePerFullShare()).div(1e18);\r\n    uint256 _fee = _base.mul(4).div(10000);\r\n    return _base.sub(_fee);\r\n  }\r\n  function _calc_to(uint256[4] memory _amounts, int128 j) public view returns (uint256) {\r\n    if (j == 0) {\r\n      return _calc_to_dai(_amounts);\r\n    } else if (j == 1) {\r\n      return _calc_to_usdc(_amounts);\r\n    } else if (j == 2) {\r\n      return _calc_to_usdt(_amounts);\r\n    } else if (j == 3) {\r\n      return _calc_to_tusd(_amounts);\r\n    }\r\n  }\r\n\r\n  function _calc_to_dai(uint256[4] memory _amounts) public view returns (uint256) {\r\n    uint256 _from_usdc = CurveFi(ySWAP).get_dy(1, 0, _amounts[1]);\r\n    uint256 _from_usdt = CurveFi(ySWAP).get_dy(2, 0, _amounts[2]);\r\n    uint256 _from_tusd = CurveFi(ySWAP).get_dy(3, 0, _amounts[3]);\r\n    return _amounts[0].add(_from_usdc).add(_from_usdt).add(_from_tusd);\r\n  }\r\n  function _calc_to_usdc(uint256[4] memory _amounts) public view returns (uint256) {\r\n    uint256 _from_dai = CurveFi(ySWAP).get_dy(0, 1, _amounts[0]);\r\n    uint256 _from_usdt = CurveFi(ySWAP).get_dy(2, 1, _amounts[2]);\r\n    uint256 _from_tusd = CurveFi(ySWAP).get_dy(3, 1, _amounts[3]);\r\n    return _amounts[1].add(_from_dai).add(_from_usdt).add(_from_tusd);\r\n  }\r\n  function _calc_to_usdt(uint256[4] memory _amounts) public view returns (uint256) {\r\n    uint256 _from_dai = CurveFi(ySWAP).get_dy(0, 2, _amounts[0]);\r\n    uint256 _from_usdc = CurveFi(ySWAP).get_dy(1, 2, _amounts[1]);\r\n    uint256 _from_tusd = CurveFi(ySWAP).get_dy(3, 2, _amounts[3]);\r\n    return _amounts[2].add(_from_dai).add(_from_usdc).add(_from_tusd);\r\n  }\r\n  function _calc_to_tusd(uint256[4] memory _amounts) public view returns (uint256) {\r\n    uint256 _from_dai = CurveFi(ySWAP).get_dy(0, 3, _amounts[0]);\r\n    uint256 _from_usdc = CurveFi(ySWAP).get_dy(1, 3, _amounts[1]);\r\n    uint256 _from_usdt = CurveFi(ySWAP).get_dy(2, 3, _amounts[2]);\r\n    return _amounts[3].add(_from_dai).add(_from_usdc).add(_from_usdt);\r\n  }\r\n\r\n  function calc_withdraw_amount(uint256 amount) external view returns (uint256[5] memory) {\r\n    uint256 _stotal = IERC20(sCURVE).totalSupply();\r\n    uint256 _ytotal = IERC20(yCURVE).totalSupply();\r\n    uint256 _yCURVE = IERC20(yCURVE).balanceOf(sSWAP);\r\n\r\n    uint256 _yshares = _yCURVE.mul(amount).div(_stotal);\r\n\r\n    uint256[5] memory _amounts;\r\n    _amounts[0] = IERC20(yDAI).balanceOf(ySWAP);\r\n    _amounts[1] = IERC20(yUSDC).balanceOf(ySWAP);\r\n    _amounts[2] = IERC20(yUSDT).balanceOf(ySWAP);\r\n    _amounts[3] = IERC20(yTUSD).balanceOf(ySWAP);\r\n    _amounts[4] = IERC20(ySUSD).balanceOf(sSWAP);\r\n\r\n    _amounts[0] = _amounts[0].mul(_yshares).div(_ytotal);\r\n    _amounts[0] = _amounts[0].sub(_amounts[0].mul(4).div(10000));\r\n    _amounts[1] = _amounts[1].mul(_yshares).div(_ytotal);\r\n    _amounts[1] = _amounts[1].sub(_amounts[1].mul(4).div(10000));\r\n    _amounts[2] = _amounts[2].mul(_yshares).div(_ytotal);\r\n    _amounts[2] = _amounts[2].sub(_amounts[2].mul(4).div(10000));\r\n    _amounts[3] = _amounts[3].mul(_yshares).div(_ytotal);\r\n    _amounts[3] = _amounts[3].sub(_amounts[3].mul(4).div(10000));\r\n    _amounts[4] = _amounts[4].mul(amount).div(_stotal);\r\n    _amounts[4] = _amounts[4].sub(_amounts[4].mul(4).div(10000));\r\n\r\n    return _amounts;\r\n  }\r\n\r\n  function calc_deposit_amount(uint256[5] calldata amounts) external view returns (uint256) {\r\n    uint256[4] memory _y;\r\n    _y[0] = amounts[0].mul(1e18).div(yERC20(yDAI).getPricePerFullShare());\r\n    _y[1] = amounts[1].mul(1e18).div(yERC20(yUSDC).getPricePerFullShare());\r\n    _y[2] = amounts[2].mul(1e18).div(yERC20(yUSDT).getPricePerFullShare());\r\n    _y[3] = amounts[3].mul(1e18).div(yERC20(yTUSD).getPricePerFullShare());\r\n    uint256 _y_output = yCurveFi(ySWAP).calc_token_amount(_y, true);\r\n    uint256[2] memory _s;\r\n    _s[0] = amounts[4].mul(1e18).div(yERC20(ySUSD).getPricePerFullShare());\r\n    _s[1] = _y_output.mul(1e18).div(CurveFi(ySWAP).get_virtual_price());\r\n    uint256 _base = sCurveFi(sSWAP).calc_token_amount(_s, true);\r\n    uint256 _fee = _base.mul(4).div(10000);\r\n    return _base.sub(_fee);\r\n  }\r\n\r\n  // incase of half-way error\r\n  function inCaseTokenGetsStuck(IERC20 _TokenAddress) onlyOwner public {\r\n      uint qty = _TokenAddress.balanceOf(address(this));\r\n      _TokenAddress.safeTransfer(msg.sender, qty);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_amounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"}],\"name\":\"_calc_to\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_amounts\",\"type\":\"uint256[4]\"}],\"name\":\"_calc_to_dai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_amounts\",\"type\":\"uint256[4]\"}],\"name\":\"_calc_to_tusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_amounts\",\"type\":\"uint256[4]\"}],\"name\":\"_calc_to_usdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_amounts\",\"type\":\"uint256[4]\"}],\"name\":\"_calc_to_usdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"amounts\",\"type\":\"uint256[5]\"}],\"name\":\"calc_deposit_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calc_withdraw_amount\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"}],\"name\":\"calc_withdraw_amount_y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"index\",\"type\":\"int128\"}],\"name\":\"get_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"index\",\"type\":\"int128\"}],\"name\":\"get_address_underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"get_dy_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokenGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sCURVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sSWAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yCURVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ySUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ySWAP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yTUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"yCurveExchangeView","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://f838a4d7625ef12f4f277ccbf9f0d6375ee91671122ed6e9463d332f6a7d5dce"}]}