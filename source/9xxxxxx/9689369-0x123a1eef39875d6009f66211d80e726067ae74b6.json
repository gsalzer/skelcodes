{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n *    ______                           ____                    __               ______\r\n *   / ____/____ _ ____ ___   ___     / __ \\ ___   ____ _ ____/ /___   _____   / ____/____   _____\r\n *  / / __ / __ `// __ `__ \\ / _ \\   / /_/ // _ \\ / __ `// __  // _ \\ / ___/  / /_   / __ \\ / ___/\r\n * / /_/ // /_/ // / / / / //  __/  / _, _//  __// /_/ // /_/ //  __// /     / __/  / /_/ // /\r\n * \\____/ \\__,_//_/ /_/ /_/ \\___/  /_/ |_| \\___/ \\__,_/ \\__,_/ \\___//_/     /_/     \\____//_/\r\n *    _____               _____                          __   __     _               ___                            __     __\r\n *   / ___/ ____ _ __  __/ ___/ ____   ____ ___   ___   / /_ / /_   (_)____   ____ _|__ \\   _      __ ____   _____ / /____/ /\r\n *   \\__ \\ / __ `// / / /\\__ \\ / __ \\ / __ `__ \\ / _ \\ / __// __ \\ / // __ \\ / __ `/__/ /  | | /| / // __ \\ / ___// // __  /\r\n *  ___/ // /_/ // /_/ /___/ // /_/ // / / / / //  __// /_ / / / // // / / // /_/ // __/ _ | |/ |/ // /_/ // /   / // /_/ /\r\n * /____/ \\__,_/ \\__, //____/ \\____//_/ /_/ /_/ \\___/ \\__//_/ /_//_//_/ /_/ \\__, //____/(_)|__/|__/ \\____//_/   /_/ \\__,_/\r\n *              /____/                                                     /____/\r\n */\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256)\r\n    {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of GAME\r\n */\r\ninterface IGame {\r\n    function block2timestamp(uint256 blockNumber) external view returns (uint256);\r\n    function serial2player(uint256 serial) external view returns (address payable);\r\n\r\n    function getStatus() external view\r\n        returns (\r\n            uint256 timer,\r\n            uint256 roundCounter,\r\n            uint256 playerCounter,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n\r\n            uint256 cookieFund,\r\n            uint256 winnerFund,\r\n\r\n            uint256 surpriseIssued,\r\n            uint256 bonusIssued,\r\n            uint256 cookieIssued,\r\n            uint256 shareholderIssued\r\n        );\r\n\r\n    function getRound(uint256 serial) external view\r\n        returns (\r\n            uint256 openedBlock,\r\n            uint256 closingBlock,\r\n            uint256 closedTimestamp,\r\n            uint256 openingWinnerFund,\r\n            uint256 closingWinnerFund,\r\n            address payable opener,\r\n            uint256 openerBonus\r\n        );\r\n\r\n    function getRoundWinners(uint256 serial) external view\r\n        returns (\r\n            uint8[10] memory serials,\r\n            uint256[10] memory winnersMessageSerials,\r\n            uint256[10] memory winnersWeis\r\n        );\r\n\r\n    function getPlayer(address account) external view\r\n        returns (\r\n            uint256 serial,\r\n            bytes memory name,\r\n            bytes memory adviserName,\r\n            address payable adviser,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n            uint256 followerCounter,\r\n            uint256 followerMessageCounter,\r\n            uint256 followerCookieCounter,\r\n            uint256 bonusWeis,\r\n            uint256 surpriseWeis\r\n        );\r\n\r\n    function getPlayerPrime(address account) external view\r\n        returns (\r\n            bytes memory playerName,\r\n            uint256 pinnedMessageSerial,\r\n            uint8 topPlayerPosition,\r\n            uint8 shareholderPosition,\r\n            uint256 shareholderStakingWeis,\r\n            uint256 shareholderProfitWeis,\r\n            uint256 shareholderFirstBlockNumber\r\n        );\r\n\r\n    function getMessage(uint256 serial) external view\r\n        returns (\r\n            address payable account,\r\n            bytes memory name,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getCookie(uint256 serial) external view\r\n        returns (\r\n            address payable player,\r\n            address payable adviser,\r\n            bytes memory playerName,\r\n            bytes memory adviserName,\r\n            uint256 playerWeis,\r\n            uint256 adviserWeis,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getPlayerDisplay(address account) external view\r\n        returns (\r\n            uint256 messageCounter,\r\n            uint256 pinnedMessageSerial,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        );\r\n\r\n    function getShareholders() external view\r\n        returns (\r\n            uint256 shareholderBidCounter,\r\n            address payable[6] memory accounts\r\n        );\r\n\r\n    function getTopPlayers() external view\r\n        returns (address payable[20] memory accounts);\r\n\r\n    function getShareholderBid(uint256 serial) external view\r\n        returns (\r\n            address payable account,\r\n            bytes memory name,\r\n            uint256 stakingBefore,\r\n            uint256 stakingAfter,\r\n            uint256 blockNumber\r\n        );\r\n}\r\n\r\n\r\n/**\r\n * @dev Structs of game.\r\n */\r\nlibrary GameLib {\r\n    struct Message {\r\n        uint256 serial;\r\n        address account;\r\n        bytes name;\r\n        bytes text;\r\n        uint256 blockNumber;\r\n    }\r\n\r\n    struct Cookie {\r\n        uint256 serial;\r\n\r\n        address payable player;\r\n        address payable adviser;\r\n        bytes playerName;\r\n        bytes adviserName;\r\n        uint256 playerWeis;\r\n        uint256 adviserWeis;\r\n\r\n        uint256 messageSerial;\r\n        bytes text;\r\n        uint256 blockNumber;\r\n    }\r\n\r\n    struct Round {\r\n        uint256 openedBlock;\r\n        uint256 closingBlock;\r\n        uint256 closedTimestamp;\r\n        uint256 openingWinnerFund;\r\n        uint256 closingWinnerFund;\r\n        address payable opener;\r\n        uint256 openerBonus;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Structs of player.\r\n */\r\nlibrary PlayerLib {\r\n    struct Player {\r\n        uint256 serial;\r\n\r\n        bytes name;\r\n        bytes adviserName;\r\n        address payable adviser;\r\n        uint256 messageCounter;\r\n        uint256 cookieCounter;\r\n        uint256 followerCounter;\r\n        uint256 followerMessageCounter;\r\n        uint256 followerCookieCounter;\r\n        uint256 bonusWeis;\r\n        uint256 surpriseWeis;\r\n    }\r\n}\r\n\r\n/**\r\n * @title GameReaderA contract.\r\n */\r\ncontract ReaderA {\r\n    using SafeMath for uint256;\r\n    using PlayerLib for PlayerLib.Player;\r\n\r\n    IGame private _game;\r\n\r\n    uint8 constant SM_PAGE = 10;\r\n    uint8 constant LG_PAGE = 20;\r\n    uint8 constant SHAREHOLDER_MAX_POSITION = 6;\r\n    uint8 constant TOP_PLAYER_MAX_POSITION = 20;\r\n    uint8 constant WINNERS_PER_ROUND = 10;\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor ()\r\n        public\r\n    {\r\n        _game = IGame(0x1234567B172f040f45D7e924C0a7d088016191A6);\r\n    }\r\n\r\n    function () external payable {\r\n        revert(\"Cannot deposit\");\r\n    }\r\n\r\n    function game()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(_game);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns status.\r\n     */\r\n    function status()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 timer,\r\n            uint256 roundCounter,\r\n            uint256 playerCounter,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter\r\n        )\r\n    {\r\n        (\r\n            timer,\r\n            roundCounter,\r\n            playerCounter,\r\n            messageCounter,\r\n            cookieCounter,\r\n\r\n            , // uint256 cookieFund,\r\n            , // uint256 winnerFund,\r\n\r\n            , // uint256 surpriseIssued,\r\n            , // uint256 bonusIssued,\r\n            , // uint256 cookieIssued,\r\n            // uint256 shareholderIssued\r\n        )\r\n        = _game.getStatus();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns funds and bonus data.\r\n     */\r\n    function prizes()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 cookieFund,\r\n            uint256 winnerFund,\r\n\r\n            uint256 surpriseIssued,\r\n            uint256 bonusIssued,\r\n            uint256 cookieIssued,\r\n            uint256 shareholderIssued\r\n        )\r\n    {\r\n        (\r\n            , // uint256 timer,\r\n            , // uint256 roundCounter,\r\n            , // uint256 playerCounter,\r\n            , // uint256 messageCounter,\r\n            , // uint256 cookieCounter,\r\n\r\n            cookieFund,\r\n            winnerFund,\r\n\r\n            surpriseIssued,\r\n            bonusIssued,\r\n            cookieIssued,\r\n            shareholderIssued\r\n        )\r\n        = _game.getStatus();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns round info of `roundSerial`.\r\n     *\r\n     * roundSerial > 0: history\r\n     * roundSerial == 0: latest\r\n     */\r\n    function round(uint256 roundSerial)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 serial,\r\n\r\n            uint256 openedBlock,\r\n            uint256 openedTimestamp,\r\n            uint256 closingBlock,\r\n            uint256 closingTimestamp,\r\n            uint256 closedTimestamp,\r\n            uint256 openingWinnerFund,\r\n            uint256 closingWinnerFund,\r\n            address opener,\r\n            bytes memory openerName,\r\n            uint256 openerBonusWeis\r\n        )\r\n    {\r\n        (\r\n            , // uint256 timer,\r\n            uint256 roundCounter,\r\n            , // uint256 playerCounter,\r\n            , // uint256 messageCounter,\r\n            , // uint256 cookieCounter,\r\n\r\n            , // uint256 cookieFund,\r\n            , // uint256 winnerFund,\r\n\r\n            , // uint256 surpriseIssued,\r\n            , // uint256 bonusIssued,\r\n            , // uint256 cookieIssued,\r\n            // uint256 shareholderIssued\r\n        )\r\n        = _game.getStatus();\r\n\r\n        if (roundSerial == 0)\r\n        {\r\n            roundSerial = roundCounter;\r\n        }\r\n\r\n        if (roundSerial <= roundCounter)\r\n        {\r\n            GameLib.Round memory theRound = _round(roundSerial);\r\n            PlayerLib.Player memory thePlayer = _player(theRound.opener);\r\n\r\n            serial = roundSerial;\r\n            openedBlock = theRound.openedBlock;\r\n            closingBlock = theRound.closingBlock;\r\n            closedTimestamp = theRound.closedTimestamp;\r\n            openingWinnerFund = theRound.openingWinnerFund;\r\n            closingWinnerFund = theRound.closingWinnerFund;\r\n\r\n            opener = theRound.opener;\r\n            openerName = thePlayer.name;\r\n            openerBonusWeis = theRound.openerBonus;\r\n\r\n            openedTimestamp = _game.block2timestamp(theRound.openedBlock);\r\n            closingTimestamp = _game.block2timestamp(theRound.closingBlock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns round winners @ `roundSerial`.\r\n     */\r\n    function roundWinners(uint256 roundSerial)\r\n        public\r\n        view\r\n        returns (\r\n            uint8[WINNERS_PER_ROUND] memory winnerSerials,\r\n            uint256[WINNERS_PER_ROUND] memory messageSerials,\r\n            address[WINNERS_PER_ROUND] memory players,\r\n            bytes[WINNERS_PER_ROUND] memory playerNames,\r\n            uint256[WINNERS_PER_ROUND] memory bonusWeis,\r\n            bytes[WINNERS_PER_ROUND] memory texts,\r\n            uint256[WINNERS_PER_ROUND] memory blockNumbers,\r\n            uint256[WINNERS_PER_ROUND] memory timestamps\r\n        )\r\n    {\r\n        GameLib.Round memory theRound = _round(roundSerial);\r\n\r\n        if (theRound.closingBlock > 0)\r\n        {\r\n            (\r\n                winnerSerials,\r\n                messageSerials,\r\n                bonusWeis\r\n            )\r\n            = _game.getRoundWinners(roundSerial);\r\n\r\n            for (uint8 i = 0; i < WINNERS_PER_ROUND; i++)\r\n            {\r\n                GameLib.Message memory message = _message(messageSerials[i]);\r\n                PlayerLib.Player memory thePlayer = _player(message.account);\r\n\r\n                players[i] = message.account;\r\n                playerNames[i] = thePlayer.name;\r\n                texts[i] = message.text;\r\n                blockNumbers[i] = message.blockNumber;\r\n                timestamps[i] = _game.block2timestamp(message.blockNumber);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a message info @ global `serial`.\r\n     */\r\n    function message(uint256 serial)\r\n        public\r\n        view\r\n        returns (\r\n            address account,\r\n            bytes memory name,\r\n            bytes memory text,\r\n            uint256 blockNumber,\r\n            uint256 timestamp\r\n        )\r\n    {\r\n        GameLib.Message memory theMessage = _message(serial);\r\n\r\n        account = theMessage.account;\r\n        name = theMessage.name;\r\n        text = theMessage.text;\r\n        blockNumber = theMessage.blockNumber;\r\n        timestamp = _game.block2timestamp(blockNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns game messages, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function messages(uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[LG_PAGE] memory serials,\r\n            address[LG_PAGE] memory accounts,\r\n            bytes[LG_PAGE] memory names,\r\n            bytes[LG_PAGE] memory texts,\r\n            uint256[LG_PAGE] memory blockNumbers,\r\n            uint256[LG_PAGE] memory timestamps\r\n        )\r\n    {\r\n        (\r\n            , // uint256 timer,\r\n            , // uint256 roundCounter,\r\n            , // uint256 playerCounter,\r\n            uint256 messageCounter,\r\n            , // uint256 cookieCounter,\r\n\r\n            , // uint256 cookieFund,\r\n            , // uint256 winnerFund,\r\n\r\n            , // uint256 surpriseIssued,\r\n            , // uint256 bonusIssued,\r\n            , // uint256 cookieIssued,\r\n            // uint256 shareholderIssued\r\n        )\r\n        = _game.getStatus();\r\n\r\n        if (till == 0)\r\n        {\r\n            till = messageCounter;\r\n        }\r\n\r\n        if (till <= messageCounter)\r\n        {\r\n            for (uint256 i = 0; i < LG_PAGE; i++)\r\n            {\r\n                uint256 serial = till.sub(i);\r\n                if (serial < 1)\r\n                {\r\n                    break;\r\n                }\r\n\r\n                serials[i] = serial;\r\n\r\n                GameLib.Message memory theMessage = _message(serial);\r\n                accounts[i] = theMessage.account;\r\n\r\n                PlayerLib.Player memory thePlayer = _player(theMessage.account);\r\n                names[i] = thePlayer.name;\r\n\r\n                texts[i] = theMessage.text;\r\n                blockNumbers[i] = theMessage.blockNumber;\r\n                timestamps[i] = _game.block2timestamp(theMessage.blockNumber);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns game cookies, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function cookies(uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[LG_PAGE] memory serials,\r\n\r\n            address[LG_PAGE] memory players,\r\n            address[LG_PAGE] memory advisers,\r\n            bytes[LG_PAGE] memory playerNames,\r\n            bytes[LG_PAGE] memory adviserNames,\r\n            uint256[LG_PAGE] memory playerWeis,\r\n            uint256[LG_PAGE] memory adviserWeis,\r\n\r\n            uint256[LG_PAGE] memory messageSerials,\r\n            bytes[LG_PAGE] memory texts,\r\n            uint256[LG_PAGE] memory blockNumbers,\r\n            uint256[LG_PAGE] memory timestamps\r\n        )\r\n    {\r\n        if (till == 0)\r\n        {\r\n\r\n            (\r\n                , // uint256 timer,\r\n                , // uint256 roundCounter,\r\n                , // uint256 playerCounter,\r\n                , // uint256 messageCounter,\r\n                till, // uint256 cookieCounter,\r\n\r\n                , // uint256 cookieFund,\r\n                , // uint256 winnerFund,\r\n\r\n                , // uint256 surpriseIssued,\r\n                , // uint256 bonusIssued,\r\n                , // uint256 cookieIssued,\r\n                // uint256 shareholderIssued\r\n            )\r\n            = _game.getStatus();\r\n        }\r\n\r\n        for (uint256 i = 0; i < LG_PAGE; i++)\r\n        {\r\n            uint256 serial = till.sub(i);\r\n            if (serial < 1)\r\n            {\r\n                break;\r\n            }\r\n\r\n            serials[i] = serial;\r\n\r\n            GameLib.Cookie memory cookie = _cookie(serial);\r\n\r\n            players[i] = cookie.player;\r\n            advisers[i] = cookie.adviser;\r\n            playerNames[i] = cookie.playerName;\r\n            adviserNames[i] = cookie.adviserName;\r\n            playerWeis[i] = cookie.playerWeis;\r\n            adviserWeis[i] = cookie.adviserWeis;\r\n\r\n            messageSerials[i] = cookie.messageSerial;\r\n            texts[i] = cookie.text;\r\n            blockNumbers[i] = cookie.blockNumber;\r\n            timestamps[i] = _game.block2timestamp(cookie.blockNumber);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns top-players.\r\n     */\r\n    function topPlayers()\r\n        public\r\n        view\r\n        returns (\r\n            address payable[TOP_PLAYER_MAX_POSITION] memory accounts,\r\n            bytes[TOP_PLAYER_MAX_POSITION] memory names,\r\n            uint256[TOP_PLAYER_MAX_POSITION] memory messageSerials,\r\n            uint256[TOP_PLAYER_MAX_POSITION] memory messageCounters,\r\n            bytes[TOP_PLAYER_MAX_POSITION] memory texts,\r\n            uint256[TOP_PLAYER_MAX_POSITION] memory blockNumbers,\r\n            uint256[TOP_PLAYER_MAX_POSITION] memory timestamps\r\n        )\r\n    {\r\n        accounts = _game.getTopPlayers();\r\n\r\n        for (uint8 i = 0; i < TOP_PLAYER_MAX_POSITION; i++)\r\n        {\r\n            if (accounts[i] != address(0))\r\n            {\r\n                names[i] = _player(accounts[i]).name;\r\n\r\n                (\r\n                    messageCounters[i],\r\n                    , // uint256 pinnedMessageSerial,\r\n                    messageSerials[i],\r\n                    texts[i],\r\n                    blockNumbers[i]\r\n                )\r\n                = _game.getPlayerDisplay(accounts[i]);\r\n\r\n                timestamps[i] = _game.block2timestamp(blockNumbers[i]);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns shareholders.\r\n     */\r\n    function shareholders()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 bidCounter,\r\n\r\n            address payable[SHAREHOLDER_MAX_POSITION] memory accounts,\r\n            bytes[SHAREHOLDER_MAX_POSITION] memory names,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory stakingWeis,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory profitWeis,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory firstBlockNumbers,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory firstTimestamps,\r\n\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory messageCounters,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory messageSerials,\r\n            bytes[SHAREHOLDER_MAX_POSITION] memory texts,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory blockNumbers,\r\n            uint256[SHAREHOLDER_MAX_POSITION] memory timestamps\r\n        )\r\n    {\r\n        (bidCounter, accounts) = _game.getShareholders();\r\n\r\n        for (uint8 i = 0; i < SHAREHOLDER_MAX_POSITION; i++)\r\n        {\r\n            (\r\n                names[i], // bytes memory playerName,\r\n                , // uint256 pinnedMessageSerial,\r\n                , // uint8 topPlayerPosition,\r\n                , // uint8 shareholderPosition,\r\n                stakingWeis[i], // uint256 shareholderStakingWeis,\r\n                profitWeis[i], // uint256 shareholderProfitWeis,\r\n                firstBlockNumbers[i] // uint256 shareholderFirstBlockNumber\r\n            )\r\n            = _game.getPlayerPrime(accounts[i]);\r\n\r\n            firstTimestamps[i] = _game.block2timestamp(firstBlockNumbers[i]);\r\n\r\n            (\r\n                messageCounters[i],\r\n                , // uint256 pinnedMessageSerial,\r\n                messageSerials[i],\r\n                texts[i],\r\n                blockNumbers[i]\r\n            )\r\n            = _game.getPlayerDisplay(accounts[i]);\r\n\r\n            timestamps[i] = _game.block2timestamp(blockNumbers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns shareholder bid logs, `till` a serial.\r\n     *\r\n     * till > 0: history\r\n     * till == 0: latest\r\n     */\r\n    function shareholderBids(uint256 till)\r\n        public\r\n        view\r\n        returns (\r\n            uint256[SM_PAGE] memory serials,\r\n\r\n            address[SM_PAGE] memory accounts,\r\n            bytes[SM_PAGE] memory names,\r\n            uint256[SM_PAGE] memory beforeWeis,\r\n            uint256[SM_PAGE] memory afterWeis,\r\n            uint256[SM_PAGE] memory blockNumbers,\r\n            uint256[SM_PAGE] memory timestamps\r\n        )\r\n    {\r\n        (uint256 bidCounter,) = _game.getShareholders();\r\n\r\n        if (till == 0)\r\n        {\r\n            till = bidCounter;\r\n        }\r\n\r\n        if (till <= bidCounter)\r\n        {\r\n            for (uint256 i = 0; i < SM_PAGE; i++)\r\n            {\r\n                uint256 serial = till.sub(i);\r\n                if (serial < 1)\r\n                {\r\n                    break;\r\n                }\r\n\r\n                uint256 blockNumber;\r\n                serials[i] = serial;\r\n\r\n                (\r\n                    accounts[i],\r\n                    names[i],\r\n                    beforeWeis[i],\r\n                    afterWeis[i],\r\n                    blockNumber\r\n                )\r\n                = _game.getShareholderBid(serial);\r\n\r\n                blockNumbers[i] = blockNumber;\r\n                timestamps[i] = _game.block2timestamp(blockNumber);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- ---------\r\n     *     ____         _                __           ______                     __   _\r\n     *    / __ \\ _____ (_)_   __ ____ _ / /_ ___     / ____/__  __ ____   _____ / /_ (_)____   ____   _____\r\n     *   / /_/ // ___// /| | / // __ `// __// _ \\   / /_   / / / // __ \\ / ___// __// // __ \\ / __ \\ / ___/\r\n     *  / ____// /   / / | |/ // /_/ // /_ /  __/  / __/  / /_/ // / / // /__ / /_ / // /_/ // / / /(__  )\r\n     * /_/    /_/   /_/  |___/ \\__,_/ \\__/ \\___/  /_/     \\__,_//_/ /_/ \\___/ \\__//_/ \\____//_/ /_//____/\r\n     *\r\n     * --------- --------- --------- --------- --------- --------- --------- --------- --------- --------- ---------\r\n     */\r\n\r\n    /**\r\n     * @dev Returns round {GameLib.Round} @ `serial`.\r\n     */\r\n    function _round(uint256 serial)\r\n        private\r\n        view\r\n        returns (GameLib.Round memory)\r\n    {\r\n        (\r\n            uint256 openedBlock,\r\n            uint256 closingBlock,\r\n            uint256 closedTimestamp,\r\n            uint256 openingWinnerFund,\r\n            uint256 closingWinnerFund,\r\n            address payable opener,\r\n            uint256 openerBonus\r\n        )\r\n        = _game.getRound(serial);\r\n\r\n        return GameLib.Round(\r\n            openedBlock,\r\n            closingBlock,\r\n            closedTimestamp,\r\n            openingWinnerFund,\r\n            closingWinnerFund,\r\n            opener,\r\n            openerBonus\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns player {PlayerLib.Player} of `account`.\r\n     */\r\n    function _player(address account)\r\n        private\r\n        view\r\n        returns (PlayerLib.Player memory)\r\n    {\r\n        (\r\n            uint256 serial,\r\n            bytes memory name,\r\n            bytes memory adviserName,\r\n            address payable adviser,\r\n            uint256 messageCounter,\r\n            uint256 cookieCounter,\r\n            uint256 followerCounter,\r\n            uint256 followerMessageCounter,\r\n            uint256 followerCookieCounter,\r\n            uint256 bonusWeis,\r\n            uint256 surpriseWeis\r\n        )\r\n        = _game.getPlayer(account);\r\n\r\n        return PlayerLib.Player(\r\n            serial,\r\n            name,\r\n            adviserName,\r\n            adviser,\r\n            messageCounter,\r\n            cookieCounter,\r\n            followerCounter,\r\n            followerMessageCounter,\r\n            followerCookieCounter,\r\n            bonusWeis,\r\n            surpriseWeis\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns message {GameLib.Message} @ `serial`.\r\n     */\r\n    function _message(uint256 serial)\r\n        private\r\n        view\r\n        returns (GameLib.Message memory)\r\n    {\r\n        (\r\n            address payable account,\r\n            bytes memory name,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        )\r\n        = _game.getMessage(serial);\r\n\r\n        return GameLib.Message(serial, account, name, text, blockNumber);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns cookie {GameLib.Cookie} @ `serial`.\r\n     */\r\n    function _cookie(uint256 serial)\r\n        private\r\n        view\r\n        returns (GameLib.Cookie memory)\r\n    {\r\n        (\r\n            address payable playerAccount,\r\n            address payable adviserAccount,\r\n            bytes memory playerName,\r\n            bytes memory adviserName,\r\n            uint256 playerWeis,\r\n            uint256 adviserWeis,\r\n\r\n            uint256 messageSerial,\r\n            bytes memory text,\r\n            uint256 blockNumber\r\n        )\r\n        = _game.getCookie(serial);\r\n\r\n        return GameLib.Cookie(serial, playerAccount, adviserAccount, playerName, adviserName, playerWeis, adviserWeis, messageSerial, text, blockNumber);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"cookies\",\"outputs\":[{\"internalType\":\"uint256[20]\",\"name\":\"serials\",\"type\":\"uint256[20]\"},{\"internalType\":\"address[20]\",\"name\":\"players\",\"type\":\"address[20]\"},{\"internalType\":\"address[20]\",\"name\":\"advisers\",\"type\":\"address[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"playerNames\",\"type\":\"bytes[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"adviserNames\",\"type\":\"bytes[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"playerWeis\",\"type\":\"uint256[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"adviserWeis\",\"type\":\"uint256[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"messageSerials\",\"type\":\"uint256[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"texts\",\"type\":\"bytes[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"blockNumbers\",\"type\":\"uint256[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"timestamps\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"}],\"name\":\"message\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"uint256[20]\",\"name\":\"serials\",\"type\":\"uint256[20]\"},{\"internalType\":\"address[20]\",\"name\":\"accounts\",\"type\":\"address[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"names\",\"type\":\"bytes[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"texts\",\"type\":\"bytes[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"blockNumbers\",\"type\":\"uint256[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"timestamps\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cookieFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"surpriseIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookieIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareholderIssued\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundSerial\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingWinnerFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingWinnerFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"openerName\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"openerBonusWeis\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundSerial\",\"type\":\"uint256\"}],\"name\":\"roundWinners\",\"outputs\":[{\"internalType\":\"uint8[10]\",\"name\":\"winnerSerials\",\"type\":\"uint8[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"messageSerials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"players\",\"type\":\"address[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"playerNames\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"bonusWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"texts\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"blockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"timestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"till\",\"type\":\"uint256\"}],\"name\":\"shareholderBids\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"serials\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"accounts\",\"type\":\"address[10]\"},{\"internalType\":\"bytes[10]\",\"name\":\"names\",\"type\":\"bytes[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"beforeWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"afterWeis\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"blockNumbers\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"timestamps\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidCounter\",\"type\":\"uint256\"},{\"internalType\":\"address payable[6]\",\"name\":\"accounts\",\"type\":\"address[6]\"},{\"internalType\":\"bytes[6]\",\"name\":\"names\",\"type\":\"bytes[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"stakingWeis\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"profitWeis\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"firstBlockNumbers\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"firstTimestamps\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"messageCounters\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"messageSerials\",\"type\":\"uint256[6]\"},{\"internalType\":\"bytes[6]\",\"name\":\"texts\",\"type\":\"bytes[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"blockNumbers\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"timestamps\",\"type\":\"uint256[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookieCounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topPlayers\",\"outputs\":[{\"internalType\":\"address payable[20]\",\"name\":\"accounts\",\"type\":\"address[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"names\",\"type\":\"bytes[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"messageSerials\",\"type\":\"uint256[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"messageCounters\",\"type\":\"uint256[20]\"},{\"internalType\":\"bytes[20]\",\"name\":\"texts\",\"type\":\"bytes[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"blockNumbers\",\"type\":\"uint256[20]\"},{\"internalType\":\"uint256[20]\",\"name\":\"timestamps\",\"type\":\"uint256[20]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReaderA","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://222c4a8505ecec260d9d1188f8e27ec0807b421070e3f236260001514bd00a2a"}]}