{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC223.sol\":{\"content\":\"pragma solidity ^0.4.11;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract ERC223 {\\r\\n  uint public totalSupply;\\r\\n  function balanceOf(address who) constant returns (uint);\\r\\n\\r\\n  function name() constant returns (string _name);\\r\\n  function symbol() constant returns (string _symbol);\\r\\n  function decimals() constant returns (uint8 _decimals);\\r\\n  function totalSupply() constant returns (uint256 _supply);\\r\\n\\r\\n  function transfer(address to, uint value) returns (bool ok);\\r\\n  function transfer(address to, uint value, bytes data) returns (bool ok);\\r\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\\r\\n}\\r\\n\\r\\ncontract ContractReceiver {\\r\\n  function tokenFallback(address _from, uint _value, bytes _data);\\r\\n}\\r\\n\\r\\ncontract ERC223Token is ERC223 {\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  mapping(address =\\u003e uint) balances;\\r\\n\\r\\n  string public name;\\r\\n  string public symbol;\\r\\n  uint8 public decimals;\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n\\r\\n  // Function to access name of token .\\r\\n  function name() constant returns (string _name) {\\r\\n      return name;\\r\\n  }\\r\\n  // Function to access symbol of token .\\r\\n  function symbol() constant returns (string _symbol) {\\r\\n      return symbol;\\r\\n  }\\r\\n  // Function to access decimals of token .\\r\\n  function decimals() constant returns (uint8 _decimals) {\\r\\n      return decimals;\\r\\n  }\\r\\n  // Function to access total supply of tokens .\\r\\n  function totalSupply() constant returns (uint256 _totalSupply) {\\r\\n      return totalSupply;\\r\\n  }\\r\\n\\r\\n  // Function that is called when a user or another contract wants to transfer funds .\\r\\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\\r\\n    if(isContract(_to)) {\\r\\n        return transferToContract(_to, _value, _data);\\r\\n    }\\r\\n    else {\\r\\n        return transferToAddress(_to, _value, _data);\\r\\n    }\\r\\n}\\r\\n\\r\\n  // Standard function transfer similar to ERC20 transfer with no _data .\\r\\n  // Added due to backwards compatibility reasons .\\r\\n  function transfer(address _to, uint _value) returns (bool success) {\\r\\n\\r\\n    //standard function transfer similar to ERC20 transfer with no _data\\r\\n    //added due to backwards compatibility reasons\\r\\n    bytes memory empty;\\r\\n    if(isContract(_to)) {\\r\\n        return transferToContract(_to, _value, empty);\\r\\n    }\\r\\n    else {\\r\\n        return transferToAddress(_to, _value, empty);\\r\\n    }\\r\\n}\\r\\n\\r\\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\\r\\n  function isContract(address _addr) private returns (bool is_contract) {\\r\\n      uint length;\\r\\n      assembly {\\r\\n            //retrieve the size of the code on target address, this needs assembly\\r\\n            length := extcodesize(_addr)\\r\\n        }\\r\\n        if(length\\u003e0) {\\r\\n            return true;\\r\\n        }\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n  //function that is called when transaction target is an address\\r\\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\\r\\n    if (balanceOf(msg.sender) \\u003c _value) revert();\\r\\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\\r\\n    balances[_to] = balanceOf(_to).add(_value);\\r\\n    Transfer(msg.sender, _to, _value);\\r\\n    ERC223Transfer(msg.sender, _to, _value, _data);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  //function that is called when transaction target is a contract\\r\\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\\r\\n    if (balanceOf(msg.sender) \\u003c _value) revert();\\r\\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\\r\\n    balances[_to] = balanceOf(_to).add(_value);\\r\\n    ContractReceiver reciever = ContractReceiver(_to);\\r\\n    reciever.tokenFallback(msg.sender, _value, _data);\\r\\n    Transfer(msg.sender, _to, _value);\\r\\n    ERC223Transfer(msg.sender, _to, _value, _data);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n\\r\\n  function balanceOf(address _owner) constant returns (uint balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n}\\r\\n\"},\"LancsToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./ERC223.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n// Contract Name\\r\\ncontract LancsToken is ERC223Token {\\r\\n    using SafeMath for uint256;\\r\\n    string public name = \\\"LancsToken\\\";\\r\\n    string public symbol = \\\"LANC\\\";\\r\\n    uint public decimals = 4; // 1.1234 LANC\\r\\n    uint public totalSupply = 1000000000 * (10**decimals);\\r\\n    address private treasury = 0x38A4000dF95775667D0C7985e6E8b4fc216cBa3f;\\r\\n    //ICO Price; 4dec, 1etc=50000LANC\\r\\n    uint256 private priceDiv = 2000000000;\\r\\n\\r\\n    event Purchase(address indexed purchaser, uint256 amount);\\r\\n\\r\\n    constructor() public {\\r\\n        balances[msg.sender] = 850000000 * (10**decimals);\\r\\n        balances[0x0] = 150000000 * (10**decimals);\\r\\n    }\\r\\n\\r\\n    function() public payable {\\r\\n        bytes memory empty;\\r\\n        if (msg.value == 0) {revert(\\\"Transaction has no value\\\");}\\r\\n        uint256 purchasedAmount = msg.value.div(priceDiv);\\r\\n        if (purchasedAmount == 0) {revert(\\\"Not enough ETC sent\\\");}\\r\\n        if (purchasedAmount \\u003e balances[0x0]) {revert(\\\"Too much ETC sent\\\");}\\r\\n\\r\\n        treasury.transfer(msg.value);\\r\\n        balances[0x0] = balances[0x0].sub(purchasedAmount);\\r\\n        balances[msg.sender] = balances[msg.sender].add(purchasedAmount);\\r\\n\\r\\n        emit Transfer(0x0, msg.sender, purchasedAmount);\\r\\n        emit ERC223Transfer(0x0, msg.sender, purchasedAmount, empty);\\r\\n        emit Purchase(msg.sender, purchasedAmount);\\r\\n    }\\r\\n\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.4.18;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n  * @dev Multiplies two numbers, throws on overflow.\\r\\n  */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    uint256 c = a * b;\\r\\n    assert(c / a == b);\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Integer division of two numbers, truncating the quotient.\\r\\n  */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n  */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    assert(b \\u003c= a);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Adds two numbers, throws on overflow.\\r\\n  */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    assert(c \\u003e= a);\\r\\n    return c;\\r\\n  }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"}]","ContractName":"LancsToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://69b756bad05321d489fd77d631b39e683c6fb3792a8042907fe68658f0cd8281"}]}