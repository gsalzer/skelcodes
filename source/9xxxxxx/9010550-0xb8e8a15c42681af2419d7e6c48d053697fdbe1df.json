{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/utils/Adminable.sol\n\n/**\n * @title Adminable.\n */\ncontract Adminable is Claimable {\n    address[] public adminArray;\n\n    struct AdminInfo {\n        bool valid;\n        uint256 index;\n    }\n\n    mapping(address => AdminInfo) public adminTable;\n\n    event AdminAccepted(address indexed _admin);\n    event AdminRejected(address indexed _admin);\n\n    /**\n     * @dev Reverts if called by any account other than one of the administrators.\n     */\n    modifier onlyAdmin() {\n        require(adminTable[msg.sender].valid, \"caller is illegal\");\n        _;\n    }\n\n    /**\n     * @dev Accept a new administrator.\n     * @param _admin The administrator's address.\n     */\n    function accept(address _admin) external onlyOwner {\n        require(_admin != address(0), \"administrator is illegal\");\n        AdminInfo storage adminInfo = adminTable[_admin];\n        require(!adminInfo.valid, \"administrator is already accepted\");\n        adminInfo.valid = true;\n        adminInfo.index = adminArray.length;\n        adminArray.push(_admin);\n        emit AdminAccepted(_admin);\n    }\n\n    /**\n     * @dev Reject an existing administrator.\n     * @param _admin The administrator's address.\n     */\n    function reject(address _admin) external onlyOwner {\n        AdminInfo storage adminInfo = adminTable[_admin];\n        require(adminArray.length > adminInfo.index, \"administrator is already rejected\");\n        require(_admin == adminArray[adminInfo.index], \"administrator is already rejected\");\n        // at this point we know that adminArray.length > adminInfo.index >= 0\n        address lastAdmin = adminArray[adminArray.length - 1]; // will never underflow\n        adminTable[lastAdmin].index = adminInfo.index;\n        adminArray[adminInfo.index] = lastAdmin;\n        adminArray.length -= 1; // will never underflow\n        delete adminTable[_admin];\n        emit AdminRejected(_admin);\n    }\n\n    /**\n     * @dev Get an array of all the administrators.\n     * @return An array of all the administrators.\n     */\n    function getAdminArray() external view returns (address[] memory) {\n        return adminArray;\n    }\n\n    /**\n     * @dev Get the total number of administrators.\n     * @return The total number of administrators.\n     */\n    function getAdminCount() external view returns (uint256) {\n        return adminArray.length;\n    }\n}\n\n// File: contracts/saga/interfaces/ITransactionLimiter.sol\n\n/**\n * @title Transaction Limiter Interface.\n */\ninterface ITransactionLimiter {\n    /**\n     * @dev Reset the total buy-amount and the total sell-amount.\n     */\n    function resetTotal() external;\n\n    /**\n     * @dev Increment the total buy-amount.\n     * @param _amount The amount to increment by.\n     */\n    function incTotalBuy(uint256 _amount) external;\n\n    /**\n     * @dev Increment the total sell-amount.\n     * @param _amount The amount to increment by.\n     */\n    function incTotalSell(uint256 _amount) external;\n}\n\n// File: contracts/saga/interfaces/IETHConverter.sol\n\n/**\n * @title ETH Converter Interface.\n */\ninterface IETHConverter {\n    /**\n     * @dev Get the current SDR worth of a given ETH amount.\n     * @param _ethAmount The amount of ETH to convert.\n     * @return The equivalent amount of SDR.\n     */\n    function toSdrAmount(uint256 _ethAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the current ETH worth of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to convert.\n     * @return The equivalent amount of ETH.\n     */\n    function toEthAmount(uint256 _sdrAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the original SDR worth of a converted ETH amount.\n     * @param _ethAmount The amount of ETH converted.\n     * @return The original amount of SDR.\n     */\n    function fromEthAmount(uint256 _ethAmount) external view returns (uint256);\n}\n\n// File: contracts/saga/interfaces/IRateApprover.sol\n\n/**\n * @title Rate Approver Interface.\n */\ninterface IRateApprover {\n    /**\n     * @dev Approve high and low rate.\n     * @param _highRateN The numerator of the high rate.\n     * @param _highRateD The denominator of the high rate.\n     * @param _lowRateN The numerator of the low rate.\n     * @param _lowRateD The denominator of the low rate.\n     * @return Success flag and error reason.\n     */\n    function approveRate(uint256 _highRateN, uint256 _highRateD, uint256 _lowRateN, uint256 _lowRateD) external view  returns (bool, string);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\n    bytes32 internal constant _ISGAAuthorizationManager_ = \"ISGAAuthorizationManager\";\n    bytes32 internal constant _ISGAToken_                = \"ISGAToken\"               ;\n    bytes32 internal constant _ISGATokenManager_         = \"ISGATokenManager\"        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\n    bytes32 internal constant _IWalletsTradingDataSource_       = \"IWalletsTradingDataSource\"      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \"WalletsTLSGATokenManager\"         ;\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\n        _;\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/saga/ETHConverter.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title ETH Converter.\n */\ncontract ETHConverter is IETHConverter, ContractAddressLocatorHolder, Adminable {\n    string public constant VERSION = \"1.0.0\";\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev SDR/ETH price maximum resolution.\n     * @notice Allow for sufficiently-high resolution.\n     * @notice Prevents multiplication-overflow.\n     */\n    uint256 public constant MAX_RESOLUTION = 0x10000000000000000;\n\n    uint256 public sequenceNum = 0;\n    uint256 public highPriceN = 0;\n    uint256 public highPriceD = 0;\n    uint256 public lowPriceN = 0;\n    uint256 public lowPriceD = 0;\n\n    event PriceSaved(uint256 _highPriceN, uint256 _highPriceD, uint256 _lowPriceN, uint256 _lowPriceD);\n    event PriceNotSaved(uint256 _highPriceN, uint256 _highPriceD, uint256 _lowPriceN, uint256 _lowPriceD);\n\n    /*\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the ITransactionLimiter interface.\n     */\n    function getTransactionLimiter() public view returns (ITransactionLimiter) {\n        return ITransactionLimiter(getContractAddress(_ITransactionLimiter_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IRateApprover interface.\n     */\n    function getRateApprover() public view returns (IRateApprover) {\n        return IRateApprover(getContractAddress(_IRateApprover_));\n    }\n\n    /**\n    * @dev throw if called before high price set.\n    */\n    modifier onlyIfHighPriceSet() {\n        assert(highPriceN > 0 && highPriceD > 0);\n        _;\n    }\n\n    /**\n    * @dev throw if called before low price set.\n    */\n    modifier onlyIfLowPriceSet() {\n        assert(lowPriceN > 0 && lowPriceD > 0);\n        _;\n    }\n\n    /**\n     * @dev Set the SDR/ETH high price and the SDR/ETH low price.\n     * @param _sequenceNum The sequence-number of the operation.\n     * @param _highPriceN The numerator of the SDR/ETH high price.\n     * @param _highPriceD The denominator of the SDR/ETH high price.\n     * @param _lowPriceN The numerator of the SDR/ETH low price.\n     * @param _lowPriceD The denominator of the SDR/ETH low price.\n     */\n    function setPrice(uint256 _sequenceNum, uint256 _highPriceN, uint256 _highPriceD, uint256 _lowPriceN, uint256 _lowPriceD) external onlyAdmin  {\n        require(1 <= _highPriceN && _highPriceN <= MAX_RESOLUTION, \"high price numerator is out of range\");\n        require(1 <= _highPriceD && _highPriceD <= MAX_RESOLUTION, \"high price denominator is out of range\");\n        require(1 <= _lowPriceN && _lowPriceN <= MAX_RESOLUTION, \"low price numerator is out of range\");\n        require(1 <= _lowPriceD && _lowPriceD <= MAX_RESOLUTION, \"low price denominator is out of range\");\n        require(_highPriceN * _lowPriceD >= _highPriceD * _lowPriceN, \"high price is smaller than low price\");//will never overflow (MAX_RESOLUTION = 2^64 )\n\n        (bool success, string memory reason) = getRateApprover().approveRate(_highPriceN, _highPriceD, _lowPriceN, _lowPriceD);\n        require(success, reason);\n\n        if (sequenceNum < _sequenceNum) {\n            sequenceNum = _sequenceNum;\n            highPriceN = _highPriceN;\n            highPriceD = _highPriceD;\n            lowPriceN = _lowPriceN;\n            lowPriceD = _lowPriceD;\n            getTransactionLimiter().resetTotal();\n            emit PriceSaved(_highPriceN, _highPriceD, _lowPriceN, _lowPriceD);\n        }\n        else {\n            emit PriceNotSaved(_highPriceN, _highPriceD, _lowPriceN, _lowPriceD);\n        }\n    }\n\n    /**\n     * @dev Get the current SDR worth of a given ETH amount.\n     * @param _ethAmount The amount of ETH to convert.\n     * @return The equivalent amount of SDR.\n     */\n    function toSdrAmount(uint256 _ethAmount) external view onlyIfLowPriceSet returns (uint256) {\n        return _ethAmount.mul(lowPriceN) / lowPriceD;\n    }\n\n    /**\n     * @dev Get the current ETH worth of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to convert.\n     * @return The equivalent amount of ETH.\n     */\n    function toEthAmount(uint256 _sdrAmount) external view onlyIfHighPriceSet returns (uint256) {\n        return _sdrAmount.mul(highPriceD) / highPriceN;\n    }\n\n    /**\n     * @dev Get the original SDR worth of a converted ETH amount.\n     * @param _ethAmount The amount of ETH converted.\n     * @return The original amount of SDR.\n     */\n    function fromEthAmount(uint256 _ethAmount) external view onlyIfHighPriceSet returns (uint256) {\n        return _ethAmount.mul(highPriceN) / highPriceD;\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getRateApprover\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPriceD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"fromEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sequenceNum\",\"type\":\"uint256\"},{\"name\":\"_highPriceN\",\"type\":\"uint256\"},{\"name\":\"_highPriceD\",\"type\":\"uint256\"},{\"name\":\"_lowPriceN\",\"type\":\"uint256\"},{\"name\":\"_lowPriceD\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminTable\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"toSdrAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sequenceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPriceN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowPriceN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"accept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowPriceD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sdrAmount\",\"type\":\"uint256\"}],\"name\":\"toEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RESOLUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransactionLimiter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_highPriceN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_highPriceD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lowPriceN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lowPriceD\",\"type\":\"uint256\"}],\"name\":\"PriceSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_highPriceN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_highPriceD\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lowPriceN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lowPriceD\",\"type\":\"uint256\"}],\"name\":\"PriceNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"AdminRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ETHConverter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://40b5840d061f774102df0935b668a7cedbd10ba67c1325e2f7762e963f8d3e9d"}]}