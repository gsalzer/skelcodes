{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/UserBonus.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract UserBonus {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant BONUS_PERCENTS_PER_WEEK = 1;\r\n    uint256 public constant BONUS_TIME = 1 weeks;\r\n\r\n    struct UserBonusData {\r\n        uint256 threadPaid;\r\n        uint256 lastPaidTime;\r\n        uint256 numberOfUsers;\r\n        mapping(address => bool) userRegistered;\r\n        mapping(address => uint256) userPaid;\r\n    }\r\n\r\n    UserBonusData public bonus;\r\n\r\n    event BonusPaid(uint256 users, uint256 amount);\r\n    event UserAddedToBonus(address indexed user);\r\n\r\n    modifier payRepBonusIfNeeded {\r\n        payRepresentativeBonus();\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        bonus.lastPaidTime = block.timestamp;\r\n    }\r\n\r\n    function payRepresentativeBonus() public {\r\n        while (bonus.numberOfUsers > 0 && bonus.lastPaidTime.add(BONUS_TIME) <= block.timestamp) {\r\n            uint256 reward = address(this).balance.mul(BONUS_PERCENTS_PER_WEEK).div(100);\r\n            bonus.threadPaid = bonus.threadPaid.add(reward.div(bonus.numberOfUsers));\r\n            bonus.lastPaidTime = bonus.lastPaidTime.add(BONUS_TIME);\r\n            emit BonusPaid(bonus.numberOfUsers, reward);\r\n        }\r\n    }\r\n\r\n    function userRegisteredForBonus(address user) public view returns(bool) {\r\n        return bonus.userRegistered[user];\r\n    }\r\n\r\n    function userBonusPaid(address user) public view returns(uint256) {\r\n        return bonus.userPaid[user];\r\n    }\r\n\r\n    function userBonusEarned(address user) public view returns(uint256) {\r\n        return bonus.userRegistered[user] ? bonus.threadPaid.sub(bonus.userPaid[user]) : 0;\r\n    }\r\n\r\n    function retrieveBonus() public payRepBonusIfNeeded {\r\n        require(bonus.userRegistered[msg.sender], \"User not registered for bonus\");\r\n\r\n        uint256 amount = Math.min(address(this).balance, userBonusEarned(msg.sender));\r\n        bonus.userPaid[msg.sender] = bonus.userPaid[msg.sender].add(amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function _addUserToBonus(address user) internal payRepBonusIfNeeded {\r\n        require(!bonus.userRegistered[user], \"User already registered for bonus\");\r\n\r\n        bonus.userRegistered[user] = true;\r\n        bonus.userPaid[user] = bonus.threadPaid;\r\n        bonus.numberOfUsers = bonus.numberOfUsers.add(1);\r\n        emit UserAddedToBonus(user);\r\n    }\r\n}\r\n\r\n// File: contracts/Claimable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract Claimable is Ownable {\r\n\r\n    address public pendingOwner;\r\n\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        revert();\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public onlyPendingOwner {\r\n        _transferOwnership(pendingOwner);\r\n        delete pendingOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/EtherHives.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EtherHives is Claimable, UserBonus {\r\n\r\n    struct Player {\r\n        uint256 registeredDate;\r\n        bool airdropCollected;\r\n        address referrer;\r\n        uint256 balanceHoney;\r\n        uint256 balanceWax;\r\n        uint256 points;\r\n        uint256 medals;\r\n        uint256 qualityLevel;\r\n        uint256 lastTimeCollected;\r\n        uint256 unlockedBee;\r\n        uint256[BEES_COUNT] bees;\r\n\r\n        uint256 totalDeposited;\r\n        uint256 totalWithdrawed;\r\n        uint256 referralsTotalDeposited;\r\n        uint256 subreferralsCount;\r\n        address[] referrals;\r\n    }\r\n\r\n    uint256 public constant BEES_COUNT = 8;\r\n    uint256 public constant SUPER_BEE_INDEX = BEES_COUNT - 1;\r\n    uint256 public constant TRON_BEE_INDEX = BEES_COUNT - 2;\r\n    uint256 public constant MEDALS_COUNT = 10;\r\n    uint256 public constant QUALITIES_COUNT = 6;\r\n    uint256[BEES_COUNT] public BEES_PRICES = [0e18, 1500e18, 7500e18, 30000e18, 75000e18, 250000e18, 750000e18, 100000e18];\r\n    uint256[BEES_COUNT] public BEES_LEVELS_PRICES = [0e18, 0e18, 11250e18, 45000e18, 112500e18, 375000e18, 1125000e18, 0];\r\n    uint256[BEES_COUNT] public BEES_MONTHLY_PERCENTS = [0, 100, 102, 104, 106, 108, 111, 200];\r\n    uint256[MEDALS_COUNT] public MEDALS_POINTS = [0e18, 50000e18, 190000e18, 510000e18, 1350000e18, 3225000e18, 5725000e18, 8850000e18, 12725000e18, 23500000e18];\r\n    uint256[MEDALS_COUNT] public MEDALS_REWARDS = [0e18, 3500e18, 10500e18, 24000e18, 65000e18, 140000e18, 185000e18, 235000e18, 290000e18, 800000e18];\r\n    uint256[QUALITIES_COUNT] public QUALITY_HONEY_PERCENT = [70, 72, 74, 76, 78, 80];\r\n    uint256[QUALITIES_COUNT] public QUALITY_PRICE = [0e18, 15000e18, 50000e18, 120000e18, 250000e18, 400000e18];\r\n\r\n    uint256 public constant COINS_PER_ETH = 250000;\r\n    uint256 public constant MAX_BEES_PER_TARIFF = 32;\r\n    uint256 public constant FIRST_BEE_AIRDROP_AMOUNT = 500e18;\r\n    uint256 public constant ADMIN_PERCENT = 10;\r\n    uint256 public constant HONEY_DISCOUNT_PERCENT = 10;\r\n    uint256 public constant SUPERBEE_PERCENT_UNLOCK = 30;\r\n    uint256 public constant SUPER_BEE_BUYER_PERIOD = 7 days;\r\n    uint256[] public REFERRAL_PERCENT_PER_LEVEL = [5, 3, 2];\r\n    uint256[] public REFERRAL_POINT_PERCENT = [50, 25, 0];\r\n\r\n    uint256 public maxBalance;\r\n    uint256 public totalPlayers;\r\n    uint256 public totalDeposited;\r\n    uint256 public totalWithdrawed;\r\n    uint256 public totalBeesBought;\r\n    mapping(address => Player) public players;\r\n\r\n    event Registered(address indexed user, address indexed referrer);\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event Withdrawed(address indexed user, uint256 amount);\r\n    event ReferrerPaid(address indexed user, address indexed referrer, uint256 indexed level, uint256 amount);\r\n    event MedalAwarded(address indexed user, uint256 indexed medal);\r\n    event QualityUpdated(address indexed user, uint256 indexed quality);\r\n    event RewardCollected(address indexed user, uint256 honeyReward, uint256 waxReward);\r\n    event BeeUnlocked(address indexed user, uint256 bee);\r\n    event BeesBought(address indexed user, uint256 bee, uint256 count);\r\n\r\n    constructor() public {\r\n        _register(owner(), address(0));\r\n    }\r\n\r\n    function __addBalance(uint256 wax, uint256 honey) public {\r\n        players[msg.sender].balanceWax += wax;\r\n        players[msg.sender].balanceHoney += honey;\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value == 0) {\r\n            if (players[msg.sender].registeredDate > 0) {\r\n                collect();\r\n            }\r\n        } else {\r\n            deposit(address(0));\r\n        }\r\n    }\r\n\r\n    function playerBees(address who) public view returns(uint256[BEES_COUNT] memory) {\r\n        return players[who].bees;\r\n    }\r\n\r\n    function superBeeUnlocked() public view returns(bool) {\r\n        return address(this).balance <= maxBalance.mul(100 - SUPERBEE_PERCENT_UNLOCK).div(100);\r\n    }\r\n\r\n    function referrals(address user) public view returns(address[] memory) {\r\n        return players[user].referrals;\r\n    }\r\n\r\n    function referrerOf(address user, address ref) internal view returns(address) {\r\n        if (players[user].registeredDate == 0 && ref != user) {\r\n            return ref;\r\n        }\r\n        return players[user].referrer;\r\n    }\r\n\r\n    function transfer(address account, uint256 amount) public returns(bool) {\r\n        require(msg.sender == owner());\r\n\r\n        collect();\r\n\r\n        _payWithWaxAndHoney(msg.sender, amount);\r\n        players[account].balanceWax = players[account].balanceWax.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function deposit(address ref) public payable payRepBonusIfNeeded {\r\n        Player storage player = players[msg.sender];\r\n        address refAddress = referrerOf(msg.sender, ref);\r\n\r\n        require((msg.value == 0) != player.registeredDate > 0, \"Send 0 for registration\");\r\n\r\n        // Register player\r\n        if (player.registeredDate == 0) {\r\n            _register(msg.sender, refAddress);\r\n        }\r\n\r\n        collect();\r\n\r\n        // Update player record\r\n        uint256 wax = msg.value.mul(COINS_PER_ETH);\r\n        player.balanceWax = player.balanceWax.add(wax);\r\n        player.totalDeposited = player.totalDeposited.add(msg.value);\r\n        totalDeposited = totalDeposited.add(msg.value);\r\n        player.points = player.points.add(wax);\r\n        emit Deposited(msg.sender, msg.value);\r\n\r\n        // collectMedals(msg.sender);\r\n\r\n        _distributeFees(msg.sender, wax, msg.value, refAddress);\r\n\r\n        _addToBonusIfNeeded(msg.sender);\r\n\r\n        uint256 adminWithdrawed = players[owner()].totalWithdrawed;\r\n        maxBalance = Math.max(maxBalance, address(this).balance.add(adminWithdrawed));\r\n    }\r\n\r\n    function withdraw(uint256 amount) public {\r\n        Player storage player = players[msg.sender];\r\n\r\n        collect();\r\n\r\n        uint256 value = amount.div(COINS_PER_ETH);\r\n        require(value > 0, \"Trying to withdraw too small\");\r\n        player.balanceHoney = player.balanceHoney.sub(amount);\r\n        player.totalWithdrawed = player.totalWithdrawed.add(value);\r\n        totalWithdrawed = totalWithdrawed.add(value);\r\n        msg.sender.transfer(value);\r\n        emit Withdrawed(msg.sender, value);\r\n    }\r\n\r\n    function collect() public payRepBonusIfNeeded {\r\n        Player storage player = players[msg.sender];\r\n        require(player.registeredDate > 0, \"Not registered yet\");\r\n\r\n        if (userBonusEarned(msg.sender) > 0) {\r\n            retrieveBonus();\r\n        }\r\n\r\n        (uint256 balanceHoney, uint256 balanceWax) = instantBalance(msg.sender);\r\n        emit RewardCollected(\r\n            msg.sender,\r\n            balanceHoney.sub(player.balanceHoney),\r\n            balanceWax.sub(player.balanceWax)\r\n        );\r\n\r\n        if (!player.airdropCollected && player.registeredDate < now) {\r\n            player.airdropCollected = true;\r\n        }\r\n\r\n        player.balanceHoney = balanceHoney;\r\n        player.balanceWax = balanceWax;\r\n        player.lastTimeCollected = block.timestamp;\r\n    }\r\n\r\n    function instantBalance(address account)\r\n        public\r\n        view\r\n        returns(\r\n            uint256 balanceHoney,\r\n            uint256 balanceWax\r\n        )\r\n    {\r\n        Player storage player = players[account];\r\n        if (player.registeredDate == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        balanceHoney = player.balanceHoney;\r\n        balanceWax = player.balanceWax;\r\n\r\n        uint256 collected = earned(account);\r\n        if (!player.airdropCollected && player.registeredDate < now) {\r\n            collected = collected.sub(FIRST_BEE_AIRDROP_AMOUNT);\r\n            balanceWax = balanceWax.add(FIRST_BEE_AIRDROP_AMOUNT);\r\n        }\r\n\r\n        uint256 honeyReward = collected.mul(QUALITY_HONEY_PERCENT[player.qualityLevel]).div(100);\r\n        uint256 waxReward = collected.sub(honeyReward);\r\n\r\n        balanceHoney = balanceHoney.add(honeyReward);\r\n        balanceWax = balanceWax.add(waxReward);\r\n    }\r\n\r\n    function unlock(uint256 bee) public payable payRepBonusIfNeeded {\r\n        Player storage player = players[msg.sender];\r\n\r\n        if (msg.value > 0) {\r\n            deposit(address(0));\r\n        }\r\n\r\n        collect();\r\n\r\n        require(bee < SUPER_BEE_INDEX, \"No more levels to unlock\"); // Minus last level\r\n        require(player.bees[bee - 1] == MAX_BEES_PER_TARIFF, \"Prev level must be filled\");\r\n        require(bee == player.unlockedBee + 1, \"Trying to unlock wrong bee type\");\r\n\r\n        if (bee == TRON_BEE_INDEX) {\r\n            require(player.medals >= 9);\r\n        }\r\n        _payWithWaxAndHoney(msg.sender, BEES_LEVELS_PRICES[bee]);\r\n        player.unlockedBee = bee;\r\n        player.bees[bee] = 1;\r\n        emit BeeUnlocked(msg.sender, bee);\r\n    }\r\n\r\n    function buyBees(uint256 bee, uint256 count) public payable payRepBonusIfNeeded {\r\n        Player storage player = players[msg.sender];\r\n\r\n        if (msg.value > 0) {\r\n            deposit(address(0));\r\n        }\r\n\r\n        collect();\r\n\r\n        require(bee > 0 && bee < BEES_COUNT, \"Don't try to buy bees of type 0\");\r\n        if (bee == SUPER_BEE_INDEX) {\r\n            require(superBeeUnlocked(), \"SuperBee is not unlocked yet\");\r\n            require(block.timestamp.sub(player.registeredDate) < SUPER_BEE_BUYER_PERIOD, \"You should be registered less than 7 days ago\");\r\n        } else {\r\n            require(bee <= player.unlockedBee, \"This bee type not unlocked yet\");\r\n        }\r\n\r\n        require(player.bees[bee].add(count) <= MAX_BEES_PER_TARIFF);\r\n        player.bees[bee] = player.bees[bee].add(count);\r\n        totalBeesBought = totalBeesBought.add(count);\r\n        uint256 honeySpent = _payWithWaxAndHoney(msg.sender, BEES_PRICES[bee].mul(count));\r\n\r\n        _distributeFees(msg.sender, honeySpent, 0, referrerOf(msg.sender, address(0)));\r\n\r\n        emit BeesBought(msg.sender, bee, count);\r\n    }\r\n\r\n    function updateQualityLevel() public payRepBonusIfNeeded {\r\n        Player storage player = players[msg.sender];\r\n\r\n        collect();\r\n\r\n        require(player.qualityLevel < QUALITIES_COUNT - 1);\r\n        _payWithHoneyOnly(msg.sender, QUALITY_PRICE[player.qualityLevel + 1]);\r\n        player.qualityLevel++;\r\n        emit QualityUpdated(msg.sender, player.qualityLevel);\r\n    }\r\n\r\n    function earned(address user) public view returns(uint256) {\r\n        Player storage player = players[user];\r\n        if (player.registeredDate == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 total = 0;\r\n        for (uint i = 1; i < BEES_COUNT; i++) {\r\n            total = total.add(\r\n                player.bees[i].mul(BEES_PRICES[i]).mul(BEES_MONTHLY_PERCENTS[i]).div(100)\r\n            );\r\n        }\r\n\r\n        return total\r\n            .mul(block.timestamp.sub(player.lastTimeCollected))\r\n            .div(30 days)\r\n            .add(player.airdropCollected || player.registeredDate == now ? 0 : FIRST_BEE_AIRDROP_AMOUNT);\r\n    }\r\n\r\n    function collectMedals(address user) public payRepBonusIfNeeded {\r\n        Player storage player = players[user];\r\n\r\n        collect();\r\n\r\n        for (uint i = player.medals; i < MEDALS_COUNT; i++) {\r\n            if (player.points >= MEDALS_POINTS[i]) {\r\n                player.balanceWax = player.balanceWax.add(MEDALS_REWARDS[i]);\r\n                player.medals = i + 1;\r\n                emit MedalAwarded(user, i + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function retrieveBonus() public {\r\n        totalWithdrawed = totalWithdrawed.add(userBonusEarned(msg.sender));\r\n        super.retrieveBonus();\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        super.claimOwnership();\r\n        _register(owner(), address(0));\r\n    }\r\n\r\n    function _distributeFees(address user, uint256 wax, uint256 deposited, address refAddress) internal {\r\n        // Pay admin fee fees\r\n        address(uint160(owner())).transfer(wax * ADMIN_PERCENT / 100 / COINS_PER_ETH);\r\n\r\n        // Update referrer record if exist\r\n        if (refAddress != address(0)) {\r\n            Player storage referrer = players[refAddress];\r\n            referrer.referralsTotalDeposited = referrer.referralsTotalDeposited.add(deposited);\r\n            _addToBonusIfNeeded(refAddress);\r\n\r\n            // Pay ref rewards\r\n            address to = refAddress;\r\n            for (uint i = 0; to != address(0) && i < REFERRAL_PERCENT_PER_LEVEL.length; i++) {\r\n                uint256 reward = wax.mul(REFERRAL_PERCENT_PER_LEVEL[i]).div(100);\r\n                players[to].balanceHoney = players[to].balanceHoney.add(reward);\r\n                players[to].points = players[to].points.add(wax.mul(REFERRAL_POINT_PERCENT[i]).div(100));\r\n                emit ReferrerPaid(user, to, i + 1, reward);\r\n                // collectMedals(to);\r\n\r\n                to = players[to].referrer;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _register(address user, address refAddress) internal {\r\n        Player storage player = players[user];\r\n\r\n        player.registeredDate = block.timestamp;\r\n        player.bees[0] = MAX_BEES_PER_TARIFF;\r\n        player.unlockedBee = 1;\r\n        player.lastTimeCollected = block.timestamp;\r\n        totalBeesBought = totalBeesBought.add(MAX_BEES_PER_TARIFF);\r\n        totalPlayers++;\r\n\r\n        if (refAddress != address(0)) {\r\n            player.referrer = refAddress;\r\n            players[refAddress].referrals.push(user);\r\n\r\n            if (players[refAddress].referrer != address(0)) {\r\n                players[players[refAddress].referrer].subreferralsCount++;\r\n            }\r\n\r\n            _addToBonusIfNeeded(refAddress);\r\n        }\r\n        emit Registered(user, refAddress);\r\n    }\r\n\r\n    function _payWithHoneyOnly(address user, uint256 amount) internal {\r\n        Player storage player = players[user];\r\n        player.balanceHoney = player.balanceHoney.sub(amount);\r\n    }\r\n\r\n    function _payWithWaxOnly(address user, uint256 amount) internal {\r\n        Player storage player = players[user];\r\n        player.balanceWax = player.balanceWax.sub(amount);\r\n    }\r\n\r\n    function _payWithWaxAndHoney(address user, uint256 amount) internal returns(uint256) {\r\n        Player storage player = players[user];\r\n\r\n        uint256 wax = Math.min(amount, player.balanceWax);\r\n        uint256 honey = amount.sub(wax).mul(100 - HONEY_DISCOUNT_PERCENT).div(100);\r\n\r\n        player.balanceWax = player.balanceWax.sub(wax);\r\n        _payWithHoneyOnly(user, honey);\r\n\r\n        return honey;\r\n    }\r\n\r\n    function _addToBonusIfNeeded(address user) internal {\r\n        if (user != address(0) && !bonus.userRegistered[user]) {\r\n            Player storage player = players[user];\r\n\r\n            if (player.totalDeposited >= 5 ether &&\r\n                player.referrals.length >= 10 &&\r\n                player.referralsTotalDeposited >= 50 ether)\r\n            {\r\n                _addUserToBonus(user);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bee\",\"type\":\"uint256\"}],\"name\":\"BeeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"BeesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"users\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"medal\",\"type\":\"uint256\"}],\"name\":\"MedalAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"}],\"name\":\"QualityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferrerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"honeyReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"waxReward\",\"type\":\"uint256\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserAddedToBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BEES_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BEES_LEVELS_PRICES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BEES_MONTHLY_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BEES_PRICES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_PERCENTS_PER_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COINS_PER_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_BEE_AIRDROP_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HONEY_DISCOUNT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_BEES_PER_TARIFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MEDALS_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MEDALS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MEDALS_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUALITIES_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QUALITY_HONEY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"QUALITY_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENT_PER_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_POINT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPERBEE_PERCENT_UNLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPER_BEE_BUYER_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPER_BEE_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRON_BEE_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"honey\",\"type\":\"uint256\"}],\"name\":\"__addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threadPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPaidTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfUsers\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"buyBees\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"collectMedals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"instantBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceHoney\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceWax\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payRepresentativeBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"playerBees\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"registeredDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"airdropCollected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceHoney\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceWax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"medals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualityLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedBee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralsTotalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subreferralsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superBeeUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBeesBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bee\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateQualityLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBonusEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBonusPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRegisteredForBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtherHives","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://0828906c94877c6089af72e5ab609f498f5d5867b1c596d558574acd56ef8a1b"}]}