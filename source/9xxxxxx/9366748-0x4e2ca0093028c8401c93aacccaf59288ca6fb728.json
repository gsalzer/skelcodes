{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"},\"Counters.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"},\"GelatoCore.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoCore.sol\\\";\\nimport \\\"./GelatoUserProxyManager.sol\\\";\\nimport \\\"./GelatoCoreAccounting.sol\\\";\\nimport \\\"./Counters.sol\\\";\\n\\n/// @title GelatoCore\\n/// @notice Execution Claim: minting, checking, execution, and cancellation\\n/// @dev Find all NatSpecs inside IGelatoCore\\ncontract GelatoCore is IGelatoCore, GelatoUserProxyManager, GelatoCoreAccounting {\\n\\n    // Library for unique ExecutionClaimIds\\n    using Counters for Counters.Counter;\\n    using Address for address payable;  /// for oz\\u0027s sendValue method\\n\\n    // ================  STATE VARIABLES ======================================\\n    Counters.Counter private executionClaimIds;\\n    // executionClaimId =\\u003e userProxyWithExecutionClaimId\\n    mapping(uint256 =\\u003e IGelatoUserProxy) public override userProxyWithExecutionClaimId;\\n    // executionClaimId =\\u003e bytes32 executionClaimHash\\n    mapping(uint256 =\\u003e bytes32) public override executionClaimHash;\\n\\n    // ================  MINTING ==============================================\\n    function mintExecutionClaim(\\n        address _selectedExecutor,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector\\n    )\\n        external\\n        payable\\n        override\\n        onlyRegisteredExecutors(_selectedExecutor)\\n    {\\n        // ______ Authenticate msg.sender is proxied user or a proxy _______\\n        IGelatoUserProxy userProxy;\\n        if (_isUser(msg.sender)) userProxy = proxyByUser[msg.sender];\\n        else if (_isUserProxy(msg.sender)) userProxy = IGelatoUserProxy(msg.sender);\\n        // solhint-disable-next-line\\n        else revert(\\\"GelatoCore.mintExecutionClaim: msg.sender is not proxied\\\");\\n        // =============\\n        // ______ Read Gas Values \\u0026 Charge Minting Deposit _______________________\\n        uint256[3] memory conditionGasActionGasMinExecutionGas;\\n        {\\n            uint256 conditionGas = _condition.conditionGas();\\n            require(conditionGas != 0, \\\"GelatoCore.mintExecutionClaim: 0 conditionGas\\\");\\n            conditionGasActionGasMinExecutionGas[0] = conditionGas;\\n\\n            uint256 actionGas = _action.actionGas();\\n            require(actionGas != 0, \\\"GelatoCore.mintExecutionClaim: 0 actionGas\\\");\\n            conditionGasActionGasMinExecutionGas[1] = actionGas;\\n\\n            uint256 minExecutionGas = _getMinExecutionGas(conditionGas, actionGas);\\n            conditionGasActionGasMinExecutionGas[2] = minExecutionGas;\\n\\n            require(\\n                msg.value == minExecutionGas.mul(executorPrice[_selectedExecutor]),\\n                \\\"GelatoCore.mintExecutionClaim: msg.value failed\\\"\\n            );\\n        }\\n\\n        // =============\\n        // ______ Mint new executionClaim ______________________________________\\n        executionClaimIds.increment();\\n        uint256 executionClaimId = executionClaimIds.current();\\n        userProxyWithExecutionClaimId[executionClaimId] = userProxy;\\n        // =============\\n        // ______ ExecutionClaim Hashing ______________________________________\\n        uint256 executionClaimExpiryDate = now.add(executorClaimLifespan[_selectedExecutor]);\\n\\n        // Include executionClaimId to avoid hash collisions\\n        executionClaimHash[executionClaimId] = _computeExecutionClaimHash(\\n            _selectedExecutor,\\n            executionClaimId,\\n            msg.sender, // user\\n            userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            conditionGasActionGasMinExecutionGas,\\n            executionClaimExpiryDate,\\n            msg.value\\n        );\\n\\n        // =============\\n        emit LogExecutionClaimMinted(\\n            _selectedExecutor,\\n            executionClaimId,\\n            msg.sender,  // _user\\n            userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            conditionGasActionGasMinExecutionGas,\\n            executionClaimExpiryDate,\\n            msg.value\\n        );\\n    }\\n\\n    // ================  CAN EXECUTE EXECUTOR API ============================\\n    function canExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        view\\n        override\\n        returns (GelatoCoreEnums.CanExecuteResults, uint8 reason)\\n    {\\n        return _canExecute(\\n            _executionClaimId,\\n            _user,\\n            _userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas,\\n            _executionClaimExpiryDate,\\n            _mintingDeposit\\n        );\\n    }\\n\\n    // ================  EXECUTE SUITE ======================================\\n    function execute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        override\\n    {\\n        return _execute(\\n            _executionClaimId,\\n            _user,\\n            _userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas,\\n            _executionClaimExpiryDate,\\n            _mintingDeposit\\n        );\\n    }\\n\\n    function cancelExecutionClaim(\\n        address _selectedExecutor,\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        override\\n    {\\n        bool executionClaimExpired = _executionClaimExpiryDate \\u003c= now;\\n        if (msg.sender != _user) {\\n            require(\\n                executionClaimExpired \\u0026\\u0026 msg.sender == _selectedExecutor,\\n                \\\"GelatoCore.cancelExecutionClaim: msgSender problem\\\"\\n            );\\n        }\\n        bytes32 computedExecutionClaimHash = _computeExecutionClaimHash(\\n            _selectedExecutor,\\n            _executionClaimId,\\n            _user,\\n            _userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas,\\n            _executionClaimExpiryDate,\\n            _mintingDeposit\\n        );\\n        // Checks\\n        require(\\n            computedExecutionClaimHash == executionClaimHash[_executionClaimId],\\n            \\\"GelatoCore.cancelExecutionClaim: hash compare failed\\\"\\n        );\\n        // Effects\\n        delete userProxyWithExecutionClaimId[_executionClaimId];\\n        delete executionClaimHash[_executionClaimId];\\n        emit LogExecutionClaimCancelled(\\n            _executionClaimId,\\n            _user,\\n            msg.sender,\\n            executionClaimExpired\\n        );\\n        // Interactions\\n        msg.sender.sendValue(_mintingDeposit);\\n    }\\n\\n    // ================  STATE READERS ======================================\\n    function getCurrentExecutionClaimId()\\n        external\\n        view\\n        override\\n        returns(uint256 currentId)\\n    {\\n        currentId = executionClaimIds.current();\\n    }\\n\\n    function getUserWithExecutionClaimId(uint256 _executionClaimId)\\n        external\\n        view\\n        override\\n        returns(address)\\n    {\\n        IGelatoUserProxy userProxy = userProxyWithExecutionClaimId[_executionClaimId];\\n        return userByProxy[address(userProxy)];\\n    }\\n\\n\\n    // ================  CAN EXECUTE IMPLEMENTATION ==================================\\n    function _canExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes memory _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes memory _actionPayloadWithSelector,\\n        uint256[3] memory _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        private\\n        view\\n        returns (GelatoCoreEnums.CanExecuteResults, uint8 reason)\\n    {\\n        // _____________ Static CHECKS __________________________________________\\n        if (executionClaimHash[_executionClaimId] == bytes32(0)) {\\n            if (_executionClaimId \\u003c= executionClaimIds.current()) {\\n                return (\\n                    GelatoCoreEnums.CanExecuteResults.ExecutionClaimAlreadyExecutedOrCancelled,\\n                    uint8(GelatoCoreEnums.StandardReason.NotOk)\\n                );\\n            } else {\\n                return (\\n                    GelatoCoreEnums.CanExecuteResults.ExecutionClaimNonExistant,\\n                    uint8(GelatoCoreEnums.StandardReason.NotOk)\\n                );\\n            }\\n        }\\n\\n        if (_executionClaimExpiryDate \\u003c now) {\\n            return (\\n                GelatoCoreEnums.CanExecuteResults.ExecutionClaimExpired,\\n                uint8(GelatoCoreEnums.StandardReason.NotOk)\\n            );\\n        }\\n\\n        bytes32 computedExecutionClaimHash = _computeExecutionClaimHash(\\n            msg.sender,  // selected? executor\\n            _executionClaimId,\\n            _user,\\n            _userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas,\\n            _executionClaimExpiryDate,\\n            _mintingDeposit\\n        );\\n\\n        if (computedExecutionClaimHash != executionClaimHash[_executionClaimId]) {\\n            return (\\n                GelatoCoreEnums.CanExecuteResults.WrongCalldata,\\n                uint8(GelatoCoreEnums.StandardReason.NotOk)\\n            );\\n        }\\n\\n        // _____________ Dynamic CHECKS __________________________________________\\n        // **** ConditionCheck *****\\n        (bool success, bytes memory returndata)\\n            = address(_condition).staticcall.gas(_conditionGasActionGasMinExecutionGas[0])(\\n                _conditionPayloadWithSelector\\n        );\\n\\n        if (!success) {\\n            return (\\n                GelatoCoreEnums.CanExecuteResults.UnhandledConditionError,\\n                uint8(GelatoCoreEnums.StandardReason.UnhandledError)\\n            );\\n        } else {\\n            bool conditionReached;\\n            (conditionReached, reason) = abi.decode(returndata, (bool, uint8));\\n            if (!conditionReached) return (GelatoCoreEnums.CanExecuteResults.ConditionNotOk, reason);\\n            // Condition Reached\\n            else return (GelatoCoreEnums.CanExecuteResults.Executable, reason);\\n        }\\n    }\\n\\n    // ================  EXECUTE IMPLEMENTATION ======================================\\n    function _execute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes memory _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes memory _actionPayloadWithSelector,\\n        uint256[3] memory _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        private\\n    {\\n        uint256 startGas = gasleft();\\n        require(\\n            startGas \\u003e= _conditionGasActionGasMinExecutionGas[2].sub(30000),\\n            \\\"GelatoCore._execute: Insufficient gas sent\\\"\\n        );\\n\\n        // _______ canExecute() CHECK ______________________________________________\\n        {\\n            GelatoCoreEnums.CanExecuteResults canExecuteResult;\\n            uint8 canExecuteReason;\\n            (canExecuteResult, canExecuteReason) = _canExecute(\\n                _executionClaimId,\\n                _user,\\n                _userProxy,\\n                _condition,\\n                _conditionPayloadWithSelector,\\n                _action,\\n                _actionPayloadWithSelector,\\n                _conditionGasActionGasMinExecutionGas,\\n                _executionClaimExpiryDate,\\n                _mintingDeposit\\n            );\\n\\n            if (canExecuteResult == GelatoCoreEnums.CanExecuteResults.Executable) {\\n                emit LogCanExecuteSuccess(\\n                    msg.sender,\\n                    _executionClaimId,\\n                    _user,\\n                    _condition,\\n                    canExecuteResult,\\n                    canExecuteReason\\n                );\\n            } else {\\n                emit LogCanExecuteFailed(\\n                    msg.sender,\\n                    _executionClaimId,\\n                    _user,\\n                    _condition,\\n                    canExecuteResult,\\n                    canExecuteReason\\n                );\\n                return;  // END OF EXECUTION\\n            }\\n        }\\n\\n        // EFFECTS\\n        delete executionClaimHash[_executionClaimId];\\n        delete userProxyWithExecutionClaimId[_executionClaimId];\\n\\n        // INTERACTIONS\\n        bool actionExecuted;\\n        string memory executionFailureReason;\\n        try _userProxy.delegatecallGelatoAction(\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas[1]\\n        ) {\\n            actionExecuted = true;\\n        } catch Error(string memory revertReason) {\\n            executionFailureReason = revertReason;\\n        } catch {\\n            executionFailureReason = \\\"UnhandledUserProxyError\\\";\\n        }\\n\\n        if (actionExecuted) {\\n            emit LogSuccessfulExecution(\\n                msg.sender,  // executor\\n                _executionClaimId,\\n                _user,\\n                _condition,\\n                _action,\\n                tx.gasprice,\\n                // ExecutionCost Estimate: ignore fn call overhead, due to delete gas refunds\\n                (startGas.sub(gasleft())).mul(tx.gasprice),\\n                _mintingDeposit  // executorReward\\n            );\\n            // Executor gets full reward only if Execution was successful\\n            executorBalance[msg.sender] = executorBalance[msg.sender].add(_mintingDeposit);\\n        } else {\\n            address payable payableUser = address(uint160(_user));\\n            emit LogExecutionFailure(\\n                msg.sender,\\n                _executionClaimId,\\n                payableUser,\\n                _condition,\\n                _action,\\n                executionFailureReason\\n            );\\n            // Transfer Minting deposit back to user\\n            payableUser.sendValue(_mintingDeposit);\\n        }\\n    }\\n\\n    // ================ EXECUTION CLAIM HASHING ========================================\\n    function _computeExecutionClaimHash(\\n        address _selectedExecutor,\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes memory _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes memory _actionPayloadWithSelector,\\n        uint256[3] memory _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        private\\n        pure\\n        returns(bytes32)\\n    {\\n        return keccak256(\\n            abi.encodePacked(\\n                _selectedExecutor,\\n                _executionClaimId,\\n                _user,\\n                _userProxy,\\n                _condition,\\n                _conditionPayloadWithSelector,\\n                _action,\\n                _actionPayloadWithSelector,\\n                _conditionGasActionGasMinExecutionGas,\\n                _executionClaimExpiryDate,\\n                _mintingDeposit\\n            )\\n        );\\n    }\\n\\n    // ================ GAS BENCHMARKING ==============================================\\n    function gasTestConditionCheck(\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        uint256 _conditionGas\\n    )\\n        external\\n        view\\n        override\\n        returns(bool conditionReached, uint8 reason)\\n    {\\n        uint256 startGas = gasleft();\\n        /* solhint-disable indent */\\n        (bool success,\\n         bytes memory returndata) = address(_condition).staticcall.gas(_conditionGas)(\\n            _conditionPayloadWithSelector\\n        );\\n        /* solhint-enable indent */\\n        if (!success) revert(\\\"GelatoCore.gasTestConditionCheck: Unhandled Error/wrong Args\\\");\\n        else (conditionReached, reason) = abi.decode(returndata, (bool, uint8));\\n        if (conditionReached) revert(string(abi.encodePacked(startGas - gasleft())));\\n        else revert(\\\"GelatoCore.gasTestConditionCheck: Not Executable/wrong Args\\\");\\n    }\\n\\n    function gasTestCanExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        view\\n        override\\n        returns (GelatoCoreEnums.CanExecuteResults canExecuteResult, uint8 reason)\\n    {\\n        uint256 startGas = gasleft();\\n        (canExecuteResult, reason) = _canExecute(\\n            _executionClaimId,\\n            _user,\\n            _userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas,\\n            _executionClaimExpiryDate,\\n            _mintingDeposit\\n        );\\n        if (canExecuteResult == GelatoCoreEnums.CanExecuteResults.Executable)\\n            revert(string(abi.encodePacked(startGas - gasleft())));\\n        revert(\\\"GelatoCore.gasTestCanExecute: Not Executable/Wrong Args\\\");\\n    }\\n\\n    function gasTestActionViaGasTestUserProxy(\\n        IGelatoUserProxy _gasTestUserProxy,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external\\n        override\\n        gasTestProxyCheck(address(_gasTestUserProxy))\\n    {\\n        // Always reverts inside GelatoGasTestUserProxy.executeDelegateCall\\n        _gasTestUserProxy.delegatecallGelatoAction(\\n            _action,\\n            _actionPayloadWithSelector,\\n            _actionGas\\n        );\\n        revert(\\\"GelatoCore.gasTestActionViaGasTestUserProxy: did not revert\\\");\\n    }\\n\\n    function gasTestGasTestUserProxyExecute(\\n        IGelatoUserProxy _userProxy,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external\\n        override\\n        userProxyCheck(_userProxy)\\n    {\\n        uint256 startGas = gasleft();\\n        bool actionExecuted;\\n        string memory executionFailureReason;\\n        try _userProxy.delegatecallGelatoAction(\\n            _action,\\n            _actionPayloadWithSelector,\\n            _actionGas\\n        ) {\\n            actionExecuted = true;\\n            revert(string(abi.encodePacked(startGas - gasleft())));\\n        } catch Error(string memory reason) {\\n            executionFailureReason = reason;\\n            revert(\\\"GelatoCore.gasTestTestUserProxyExecute: Defined Error Caught\\\");\\n        } catch {\\n            revert(\\\"GelatoCore.gasTestTestUserProxyExecute: Undefined Error Caught\\\");\\n        }\\n    }\\n\\n    function gasTestExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        override\\n    {\\n        uint256 startGas = gasleft();\\n        _execute(\\n            _executionClaimId,\\n            _user,\\n            _userProxy,\\n            _condition,\\n            _conditionPayloadWithSelector,\\n            _action,\\n            _actionPayloadWithSelector,\\n            _conditionGasActionGasMinExecutionGas,\\n            _executionClaimExpiryDate,\\n            _mintingDeposit\\n        );\\n        revert(string(abi.encodePacked(startGas - gasleft())));\\n    }\\n}\"},\"GelatoCoreAccounting.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoCoreAccounting.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/// @title GelatoCoreAccounting\\n/// @notice APIs for GelatoCore Owner and executorClaimLifespan\\n/// @dev Find all NatSpecs inside IGelatoCoreAccounting\\nabstract contract GelatoCoreAccounting is IGelatoCoreAccounting {\\n\\n    using Address for address payable;  /// for oz\\u0027s sendValue method\\n    using SafeMath for uint256;\\n\\n    //_____________ Gelato Executor Economics _______________________\\n    mapping(address =\\u003e uint256) public override executorPrice;\\n    mapping(address =\\u003e uint256) public override executorClaimLifespan;\\n    mapping(address =\\u003e uint256) public override executorBalance;\\n    // =========================\\n    // the minimum executionClaimLifespan imposed upon executors\\n    uint256 public constant override minExecutionClaimLifespan = 10 minutes;\\n    //_____________ Gas values for executionClaim cost calculations _______\\n    uint256 public constant override gelatoCoreExecGasOverhead = 80000;\\n    uint256 public constant override userProxyExecGasOverhead = 40000;\\n    uint256 public constant override totalExecutionGasOverhead = (\\n        gelatoCoreExecGasOverhead + userProxyExecGasOverhead\\n    );\\n\\n    // __ Executor De/Registrations _______\\n    function registerExecutor(\\n        uint256 _executorPrice,\\n        uint256 _executorClaimLifespan\\n    )\\n        external\\n        override\\n    {\\n        require(\\n            _executorClaimLifespan \\u003e= minExecutionClaimLifespan,\\n            \\\"GelatoCoreAccounting.registerExecutor: _executorClaimLifespan cannot be 0\\\"\\n        );\\n        executorPrice[msg.sender] = _executorPrice;\\n        executorClaimLifespan[msg.sender] = _executorClaimLifespan;\\n        emit LogRegisterExecutor(\\n            msg.sender,\\n            _executorPrice,\\n            _executorClaimLifespan\\n        );\\n    }\\n\\n    modifier onlyRegisteredExecutors(address _executor) {\\n        require(\\n            executorClaimLifespan[_executor] != 0,\\n            \\\"GelatoCoreAccounting.onlyRegisteredExecutors: failed\\\"\\n        );\\n        _;\\n    }\\n\\n    function deregisterExecutor()\\n        external\\n        override\\n        onlyRegisteredExecutors(msg.sender)\\n    {\\n        executorPrice[msg.sender] = 0;\\n        executorClaimLifespan[msg.sender] = 0;\\n        emit LogDeregisterExecutor(msg.sender);\\n    }\\n\\n    // __ Executor Economics _______\\n    function setExecutorPrice(uint256 _newExecutorGasPrice)\\n        external\\n        override\\n    {\\n        emit LogSetExecutorPrice(executorPrice[msg.sender], _newExecutorGasPrice);\\n        executorPrice[msg.sender] = _newExecutorGasPrice;\\n    }\\n\\n    function setExecutorClaimLifespan(uint256 _newExecutorClaimLifespan)\\n        external\\n        override\\n    {\\n        require(\\n            _newExecutorClaimLifespan \\u003e= minExecutionClaimLifespan,\\n            \\\"GelatoCoreAccounting.setExecutorClaimLifespan: failed\\\"\\n        );\\n        emit LogSetExecutorClaimLifespan(\\n            executorClaimLifespan[msg.sender],\\n            _newExecutorClaimLifespan\\n        );\\n        executorClaimLifespan[msg.sender] = _newExecutorClaimLifespan;\\n    }\\n\\n    function withdrawExecutorBalance()\\n        external\\n        override\\n    {\\n        // Checks\\n        uint256 currentExecutorBalance = executorBalance[msg.sender];\\n        require(\\n            currentExecutorBalance \\u003e 0,\\n            \\\"GelatoCoreAccounting.withdrawExecutorBalance: failed\\\"\\n        );\\n        // Effects\\n        executorBalance[msg.sender] = 0;\\n        // Interaction\\n        msg.sender.sendValue(currentExecutorBalance);\\n        emit LogWithdrawExecutorBalance(msg.sender, currentExecutorBalance);\\n    }\\n\\n    // _______ APIs for executionClaim pricing ______________________________________\\n    function getMintingDepositPayable(\\n        address _selectedExecutor,\\n        IGelatoCondition _condition,\\n        IGelatoAction _action\\n    )\\n        external\\n        view\\n        override\\n        onlyRegisteredExecutors(_selectedExecutor)\\n        returns(uint256 mintingDepositPayable)\\n    {\\n        uint256 conditionGas = _condition.conditionGas();\\n        uint256 actionGas = _action.actionGas();\\n        uint256 executionMinGas = _getMinExecutionGas(conditionGas, actionGas);\\n        mintingDepositPayable = executionMinGas.mul(executorPrice[_selectedExecutor]);\\n    }\\n\\n    function getMinExecutionGas(uint256 _conditionGas, uint256 _actionGas)\\n        external\\n        pure\\n        override\\n        returns(uint256)\\n    {\\n        return _getMinExecutionGas(_conditionGas, _actionGas);\\n    }\\n\\n    function _getMinExecutionGas(uint256 _conditionGas, uint256 _actionGas)\\n        internal\\n        pure\\n        returns(uint256)\\n    {\\n        return totalExecutionGasOverhead.add(_conditionGas).add(_actionGas);\\n    }\\n    // =======\\n}\"},\"GelatoCoreEnums.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nabstract contract GelatoCoreEnums {\\n\\n    enum CanExecuteResults {\\n        ExecutionClaimAlreadyExecutedOrCancelled,\\n        ExecutionClaimNonExistant,\\n        ExecutionClaimExpired,\\n        WrongCalldata,  // also returns if a not-selected executor calls fn\\n        ConditionNotOk,\\n        UnhandledConditionError,\\n        Executable\\n    }\\n\\n    // Not needed atm due to revert with string memory reason\\n    /* enum ExecutionResults {\\n        ActionGasNotOk,\\n        ActionNotOk,  // Mostly for caught/handled (by action) action errors\\n        DappNotOk,  // Mostly for caught/handled (by action) dapp errors\\n        UnhandledActionError,\\n        UnhandledUserProxyError,\\n        Success\\n    } */\\n\\n    enum StandardReason { Ok, NotOk, UnhandledError }\\n}\"},\"GelatoGasTestUserProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./GelatoUserProxy.sol\\\";\\n\\ncontract GelatoGasTestUserProxy is GelatoUserProxy {\\n\\n    constructor(address _user) public GelatoUserProxy(_user) {}\\n\\n    function delegatecallGelatoAction(\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external\\n        payable\\n        override\\n        auth\\n        noZeroAddress(address(_action))\\n    {\\n        uint256 startGas = gasleft();\\n\\n        // Return if insufficient actionGas (+ 210000 gas overhead buffer) is sent\\n        if (gasleft() \\u003c _actionGas + 21000)\\n            revert(\\\"GelatoGasTestUserProxy.delegatecallGelatoAction: actionGas failed\\\");\\n\\n        // Low level try / catch (fails if gasleft() \\u003c _actionGas)\\n        (bool success,\\n         bytes memory revertReason) = address(_action).delegatecall.gas(_actionGas)(\\n            _actionPayloadWithSelector\\n        );\\n        // Unhandled errors during action execution\\n        if (!success) {\\n            // error during action execution\\n            revertReason;  // silence compiler warning\\n            revert(\\\"GelatoGasTestUserProxy.delegatecallGelatoAction: unsuccessful\\\");\\n        } else { // success\\n            revert(string(abi.encodePacked(startGas - gasleft())));\\n        }\\n    }\\n}\"},\"GelatoGasTestUserProxyManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoGasTestUserProxyManager.sol\\\";\\nimport \\\"./GelatoGasTestUserProxy.sol\\\";\\n\\nabstract contract GelatoGasTestUserProxyManager is IGelatoGasTestUserProxyManager {\\n\\n    mapping(address =\\u003e address) public override userByGasTestProxy;\\n    mapping(address =\\u003e address) public override gasTestProxyByUser;\\n\\n    modifier gasTestProxyCheck(address _) {\\n        require(_isGasTestProxy(_), \\\"GelatoGasTestUserProxyManager.isGasTestProxy\\\");\\n        _;\\n    }\\n\\n    function createGasTestUserProxy()\\n        external\\n        override\\n        returns(address gasTestUserProxy)\\n    {\\n        gasTestUserProxy = address(new GelatoGasTestUserProxy(msg.sender));\\n        userByGasTestProxy[msg.sender] = gasTestUserProxy;\\n        gasTestProxyByUser[gasTestUserProxy] = msg.sender;\\n    }\\n\\n    function _isGasTestProxy(address _) private view returns(bool) {\\n        return gasTestProxyByUser[_] != address(0);\\n    }\\n}\"},\"GelatoUserProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoUserProxy.sol\\\";\\nimport \\\"./IGelatoAction.sol\\\";\\n\\n/// @title GelatoUserProxy\\n/// @dev find all NatSpecs inside IGelatoUserProxy\\ncontract GelatoUserProxy is IGelatoUserProxy {\\n    address public override user;\\n    address public override gelatoCore;\\n\\n    constructor(address _user)\\n        public\\n        noZeroAddress(_user)\\n    {\\n        user = _user;\\n        gelatoCore = msg.sender;\\n    }\\n\\n    modifier onlyUser() {\\n        require(\\n            msg.sender == user,\\n            \\\"GelatoUserProxy.onlyUser: failed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier auth() {\\n        require(\\n            msg.sender == user || msg.sender == gelatoCore,\\n            \\\"GelatoUserProxy.auth: failed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier noZeroAddress(address _) {\\n        require(\\n            _ != address(0),\\n            \\\"GelatoUserProxy.noZeroAddress\\\"\\n        );\\n        _;\\n    }\\n\\n    function callAccount(address _account, bytes calldata _payload)\\n        external\\n        payable\\n        override\\n        onlyUser\\n        noZeroAddress(_account)\\n        returns(bool success, bytes memory returndata)\\n    {\\n        (success, returndata) = _account.call(_payload);\\n        require(success, \\\"GelatoUserProxy.call(): failed\\\");\\n    }\\n\\n    function delegatecallAccount(address _account, bytes calldata _payload)\\n        external\\n        payable\\n        override\\n        onlyUser\\n        noZeroAddress(_account)\\n        returns(bool success, bytes memory returndata)\\n    {\\n        (success, returndata) = _account.delegatecall(_payload);\\n        require(success, \\\"GelatoUserProxy.delegatecall(): failed\\\");\\n    }\\n\\n    function delegatecallGelatoAction(\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external\\n        payable\\n        override\\n        virtual\\n        auth\\n        noZeroAddress(address(_action))\\n    {\\n        // Return if insufficient actionGas (+ 210000 gas overhead buffer) is sent\\n        if (gasleft() \\u003c _actionGas + 21000) revert(\\\"GelatoUserProxy: ActionGasNotOk\\\");\\n        // No try/catch, in order to bubble up action revert messages\\n        (bool success,\\n         bytes memory revertReason) = address(_action).delegatecall.gas(_actionGas)(\\n             _actionPayloadWithSelector\\n        );\\n        assembly {\\n            revertReason := add(revertReason, 68)\\n        }\\n        if (!success) revert(string(revertReason));\\n    }\\n}\"},\"GelatoUserProxyManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoUserProxyManager.sol\\\";\\nimport \\\"./GelatoGasTestUserProxyManager.sol\\\";\\n\\n/// @title GelatoUserProxyManager\\n/// @notice registry and factory for GelatoUserProxies\\n/// @dev find all NatSpecs inside IGelatoUserProxyManager\\nabstract contract GelatoUserProxyManager is IGelatoUserProxyManager, GelatoGasTestUserProxyManager {\\n\\n    uint256 public override userCount;\\n    mapping(address =\\u003e address) public override userByProxy;\\n    mapping(address =\\u003e IGelatoUserProxy) public override proxyByUser;\\n    // public override doesnt work for storage arrays\\n    address[] public users;\\n    IGelatoUserProxy[] public userProxies;\\n\\n    modifier userHasNoProxy {\\n        require(\\n            userByProxy[msg.sender] == address(0),\\n            \\\"GelatoUserProxyManager: user already has a proxy\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier userProxyCheck(IGelatoUserProxy _userProxy) {\\n        require(\\n            _isUserProxy(address(_userProxy)),\\n            \\\"GelatoUserProxyManager.userProxyCheck: _userProxy not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    function createUserProxy()\\n        external\\n        override\\n        userHasNoProxy\\n        returns(IGelatoUserProxy userProxy)\\n    {\\n        userProxy = new GelatoUserProxy(msg.sender);\\n        userByProxy[address(userProxy)] = msg.sender;\\n        proxyByUser[msg.sender] = userProxy;\\n        users.push(msg.sender);\\n        userProxies.push(userProxy);\\n        userCount++;\\n        emit LogCreateUserProxy(userProxy, msg.sender);\\n    }\\n\\n    // ______ State Read APIs __________________\\n    function isUser(address _user)\\n        external\\n        view\\n        override\\n        returns(bool)\\n    {\\n        return _isUser(_user);\\n    }\\n\\n    function isUserProxy(address _userProxy)\\n        external\\n        view\\n        override\\n        returns(bool)\\n    {\\n        return _isUserProxy(_userProxy);\\n    }\\n\\n    // ______________ State Readers ______________________________________\\n    function _isUser(address _user)\\n        internal\\n        view\\n        returns(bool)\\n    {\\n        return proxyByUser[_user] != IGelatoUserProxy(0);\\n    }\\n\\n    function _isUserProxy(address _userProxy)\\n        internal\\n        view\\n        returns(bool)\\n    {\\n        return userByProxy[_userProxy] != address(0);\\n    }\\n    // =========================\\n}\\n\"},\"IGelatoAction.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/// @title IGelatoAction - solidity interface of GelatoActionsStandard\\n/// @notice all the APIs and events of GelatoActionsStandard\\n/// @dev all the APIs are implemented inside GelatoActionsStandard\\ninterface IGelatoAction {\\n    function actionSelector() external pure returns(bytes4);\\n    function actionGas() external pure returns(uint256);\\n\\n    /* CAUTION: all actions must have their action() function according to the\\n    following standard format:\\n        function action(\\n            address _user,\\n            address _userProxy,\\n            address _source,\\n            uint256 _sourceAmount,\\n            address _destination,\\n            ...\\n        )\\n            external;\\n    action function not defined here because non-overridable, due to\\n    different arguments passed across different actions\\n    */\\n\\n    /**\\n     * @notice Returns whether the action-specific conditions are fulfilled\\n     * @dev if actions have specific conditions they should override and extend this fn\\n     * @param _actionPayloadWithSelector: the actionPayload (with actionSelector)\\n     * @return actionCondition\\n     */\\n    function actionConditionsCheck(bytes calldata _actionPayloadWithSelector)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// All actions must override this with their own implementation\\n    /*function getUsersSendTokenBalance(\\n        address _user,\\n        address _userProxy,\\n        address _source,\\n        uint256 _sourceAmount,\\n        address _destination,\\n        ...\\n    )\\n        external\\n        view\\n        override\\n        virtual\\n        returns(uint256 userSrcBalance);\\n    getUsersSendTokenBalance not defined here because non-overridable, due to\\n    different arguments passed across different actions\\n    */\\n}\"},\"IGelatoCondition.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n    /* CAUTION All Conditions must reserve the first 3 fields of their `enum Reason` as such:\\n        0: Ok,  // 0: standard field for Fulfilled Conditions and No Errors\\n        1: NotOk,  // 1: standard field for Unfulfilled Conditions or Handled Errors\\n        2: UnhandledError  // 2: standard field for Unhandled or Uncaught Errors\\n    */\\n\\n    /* CAUTION: the following functions are part of the standard IGelatoCondition interface but cannot be overriden\\n        - \\\"function reached(args) external view\\\": non-standardisable due to different arguments passed across different conditions\\n        - \\\"function getConditionValue(same args as reached function) external view/pure\\\": always takes same args as reached()\\n    */\\n\\n    function conditionSelector() external pure returns(bytes4);\\n    function conditionGas() external pure returns(uint256);\\n}\"},\"IGelatoCore.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./GelatoCoreEnums.sol\\\";\\nimport \\\"./IGelatoUserProxy.sol\\\";\\nimport \\\"./IGelatoCondition.sol\\\";\\nimport \\\"./IGelatoAction.sol\\\";\\n\\n/// @title IGelatoCore - solidity interface of GelatoCore\\n/// @notice canExecute API and minting, execution, cancellation of ExecutionClaims\\n/// @dev all the APIs and events are implemented inside GelatoCore\\ninterface IGelatoCore {\\n\\n    event LogExecutionClaimMinted(\\n        address indexed selectedExecutor,\\n        uint256 indexed executionClaimId,\\n        address indexed user,\\n        IGelatoUserProxy userProxy,\\n        IGelatoCondition condition,\\n        bytes conditionPayloadWithSelector,\\n        IGelatoAction action,\\n        bytes actionPayloadWithSelector,\\n        uint256[3] conditionGasActionTotalGasMinExecutionGas,\\n        uint256 executionClaimExpiryDate,\\n        uint256 mintingDeposit\\n    );\\n\\n    // Caution: there are no guarantees that CanExecuteResult and/or reason\\n    //  are implemented in a logical fashion by condition/action developers.\\n    event LogCanExecuteSuccess(\\n        address indexed executor,\\n        uint256 indexed executionClaimId,\\n        address indexed user,\\n        IGelatoCondition condition,\\n        GelatoCoreEnums.CanExecuteResults canExecuteResult,\\n        uint8 reason\\n    );\\n\\n    event LogCanExecuteFailed(\\n        address indexed executor,\\n        uint256 indexed executionClaimId,\\n        address indexed user,\\n        IGelatoCondition condition,\\n        GelatoCoreEnums.CanExecuteResults canExecuteResult,\\n        uint8 reason\\n    );\\n\\n    event LogSuccessfulExecution(\\n        address indexed executor,\\n        uint256 indexed executionClaimId,\\n        address indexed user,\\n        IGelatoCondition condition,\\n        IGelatoAction action,\\n        uint256 gasPriceUsed,\\n        uint256 executionCostEstimate,\\n        uint256 executorReward\\n    );\\n\\n    // Caution: there are no guarantees that ExecutionResult and/or reason\\n    //  are implemented in a logical fashion by condition/action developers.\\n    event LogExecutionFailure(\\n        address indexed executor,\\n        uint256 indexed executionClaimId,\\n        address payable indexed user,\\n        IGelatoCondition condition,\\n        IGelatoAction action,\\n        string executionFailureReason\\n    );\\n\\n    event LogExecutionClaimCancelled(\\n        uint256 indexed executionClaimId,\\n        address indexed user,\\n        address indexed cancelor,\\n        bool executionClaimExpired\\n    );\\n\\n    /**\\n     * @dev API for minting execution claims on gelatoCore\\n     * @notice re-entrancy guard because accounting ops are present inside fn\\n     * @notice msg.value is a refundable deposit - only a fee if executed\\n     * @notice minting event split into two, due to stack too deep issue\\n     */\\n    function mintExecutionClaim(\\n        address _selectedExecutor,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice If return value == 6, the claim is executable\\n     * @dev The API for executors to check whether a claim is executable.\\n     *       Caution: there are no guarantees that CanExecuteResult and/or reason\\n     *       are implemented in a logical fashion by condition/action developers.\\n     * @return GelatoCoreEnums.CanExecuteResults The outcome of the canExecuteCheck\\n     * @return reason The reason for the outcome of the canExecute Check\\n     */\\n    function canExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionTotalGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        view\\n        returns (GelatoCoreEnums.CanExecuteResults, uint8 reason);\\n\\n\\n    /**\\n     * @notice the API executors call when they execute an executionClaim\\n     * @dev if return value == 0 the claim got executed\\n     */\\n    function execute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionTotalGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external;\\n\\n    /**\\n     * @dev API for canceling executionClaims\\n     * @notice re-entrancy protection due to accounting operations and interactions\\n     * @notice prior to executionClaim expiry, only owner of _userProxy can cancel\\n        for a refund. Post executionClaim expiry, _selectedExecutor can also cancel,\\n        for a reward.\\n     * @notice .sendValue instead of .transfer due to IstanbulHF\\n     */\\n    function cancelExecutionClaim(\\n        address _selectedExecutor,\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionTotalGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external;\\n\\n    /// @dev get the current executionClaimId\\n    /// @return currentId uint256 current executionClaim Id\\n    function getCurrentExecutionClaimId() external view returns(uint256 currentId);\\n\\n    /// @dev api to read from the userProxyByExecutionClaimId state variable\\n    /// @param _executionClaimId TO DO\\n    /// @return address of the userProxy behind _executionClaimId\\n    function userProxyWithExecutionClaimId(uint256 _executionClaimId)\\n        external\\n        view\\n        returns(IGelatoUserProxy);\\n\\n    function getUserWithExecutionClaimId(uint256 _executionClaimId)\\n        external\\n        view\\n        returns(address);\\n\\n    /// @dev interface to read from the hashedExecutionClaims state variable\\n    /// @param _executionClaimId TO DO\\n    /// @return the bytes32 hash of the executionClaim with _executionClaimId\\n    function executionClaimHash(uint256 _executionClaimId)\\n        external\\n        view\\n        returns(bytes32);\\n\\n    // = GAS_BENCHMARKING ==============\\n    function gasTestConditionCheck(\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        uint256 _conditionGas\\n    )\\n        external\\n        view\\n        returns(bool executable, uint8 reason);\\n\\n    function gasTestCanExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionTotalGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external\\n        view\\n        returns (GelatoCoreEnums.CanExecuteResults canExecuteResult, uint8 reason);\\n\\n    function gasTestActionViaGasTestUserProxy(\\n        IGelatoUserProxy _gasTestUserProxy,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external;\\n\\n    function gasTestGasTestUserProxyExecute(\\n        IGelatoUserProxy _userProxy,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external;\\n\\n    function gasTestExecute(\\n        uint256 _executionClaimId,\\n        address _user,\\n        IGelatoUserProxy _userProxy,\\n        IGelatoCondition _condition,\\n        bytes calldata _conditionPayloadWithSelector,\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256[3] calldata _conditionGasActionTotalGasMinExecutionGas,\\n        uint256 _executionClaimExpiryDate,\\n        uint256 _mintingDeposit\\n    )\\n        external;\\n}\"},\"IGelatoCoreAccounting.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoCondition.sol\\\";\\nimport \\\"./IGelatoAction.sol\\\";\\n\\n/// @title IGelatoCoreAccounting - solidity interface of GelatoCoreAccounting\\n/// @notice APIs for GelatoCore Owners and Executors\\n/// @dev all the APIs and events are implemented inside GelatoCoreAccounting\\ninterface IGelatoCoreAccounting {\\n\\n    event LogRegisterExecutor(\\n        address payable indexed executor,\\n        uint256 executorPrice,\\n        uint256 executorClaimLifespan\\n    );\\n\\n    event LogDeregisterExecutor(address payable indexed executor);\\n\\n    event LogSetExecutorPrice(uint256 executorPrice, uint256 newExecutorPrice);\\n\\n    event LogSetExecutorClaimLifespan(\\n        uint256 executorClaimLifespan,\\n        uint256 newExecutorClaimLifespan\\n    );\\n\\n    event LogWithdrawExecutorBalance(\\n        address indexed executor,\\n        uint256 withdrawAmount\\n    );\\n\\n    event LogSetMinExecutionClaimLifespan(\\n        uint256 minExecutionClaimLifespan,\\n        uint256 newMinExecutionClaimLifespan\\n    );\\n\\n    event LogSetGelatoCoreExecGasOverhead(\\n        uint256 gelatoCoreExecGasOverhead,\\n        uint256 _newGasOverhead\\n    );\\n\\n    event LogSetUserProxyExecGasOverhead(\\n        uint256 userProxyExecGasOverhead,\\n        uint256 _newGasOverhead\\n    );\\n\\n    /**\\n     * @dev fn to register as an executorClaimLifespan\\n     * @param _executorPrice the price factor the executor charges for its services\\n     * @param _executorClaimLifespan the lifespan of claims minted for this executor\\n     * @notice while executorPrice could be 0, executorClaimLifespan must be at least\\n       what the core protocol defines as the minimum (e.g. 10 minutes).\\n     * @notice NEW\\n     */\\n    function registerExecutor(uint256 _executorPrice, uint256 _executorClaimLifespan) external;\\n\\n    /**\\n     * @dev fn to deregister as an executor\\n     * @notice ideally this fn is called by all executors as soon as they stop\\n       running their node/business. However, this behavior cannot be enforced.\\n       Frontends/Minters have to monitor executors\\u0027 uptime themselves, in order to\\n       determine which listed executors are alive and have strong service guarantees.\\n     */\\n    function deregisterExecutor() external;\\n\\n    /**\\n     * @dev fn for executors to configure their pricing of claims minted for them\\n     * @param _newExecutorGasPrice the new price to be listed for the executor\\n     * @notice param can be 0 for executors that operate pro bono - caution:\\n        if executors set their price to 0 then they get nothing, not even gas refunds.\\n     */\\n    function setExecutorPrice(uint256 _newExecutorGasPrice) external;\\n\\n    /**\\n     * @dev fn for executors to configure the lifespan of claims minted for them\\n     * @param _newExecutorClaimLifespan the new lifespan to be listed for the executor\\n     * @notice param cannot be 0 - use deregisterExecutor() to deregister\\n     */\\n    function setExecutorClaimLifespan(uint256 _newExecutorClaimLifespan) external;\\n\\n    /**\\n     * @dev function for executors to withdraw their ETH on core\\n     * @notice funds withdrawal =\\u003e re-entrancy protection.\\n     * @notice new: we use .sendValue instead of .transfer due to IstanbulHF\\n     */\\n    function withdrawExecutorBalance() external;\\n\\n    /// @dev get the gelato-wide minimum executionClaim lifespan\\n    /// @return the minimum executionClaim lifespan for all executors\\n    function minExecutionClaimLifespan() external view returns(uint256);\\n\\n    /// @dev get an executor\\u0027s price\\n    /// @param _executor TO DO\\n    /// @return uint256 executor\\u0027s price factor\\n    function executorPrice(address _executor) external view returns(uint256);\\n\\n    /// @dev get an executor\\u0027s executionClaim lifespan\\n    /// @param _executor TO DO\\n    /// @return uint256 executor\\u0027s executionClaim lifespan\\n    function executorClaimLifespan(address _executor) external view returns(uint256);\\n\\n    /// @dev get the gelato-internal wei balance of an executor\\n    /// @param _executor z\\n    /// @return uint256 wei amount of _executor\\u0027s gelato-internal deposit\\n    function executorBalance(address _executor) external view returns(uint256);\\n\\n    /// @dev getter for gelatoCoreExecGasOverhead state variable\\n    /// @return uint256 gelatoCoreExecGasOverhead\\n    function gelatoCoreExecGasOverhead() external pure returns(uint256);\\n\\n    /// @dev getter for userProxyExecGasOverhead state variable\\n    /// @return uint256 userProxyExecGasOverhead\\n    function userProxyExecGasOverhead() external pure returns(uint256);\\n\\n    /// @dev getter for internalExecutionGas state variable\\n    /// @return uint256 internalExecutionGas\\n    function totalExecutionGasOverhead() external pure returns(uint256);\\n\\n    /**\\n     * @dev get the deposit payable for minting on gelatoCore\\n     * @param _action the action contract to be executed\\n     * @param _selectedExecutor the executor that should call the action\\n     * @return mintingDepositPayable wei amount to deposit on GelatoCore for minting\\n     * @notice minters (e.g. frontends) should use this API to get the msg.value\\n       payable to GelatoCore\\u0027s mintExecutionClaim function.\\n     */\\n    function getMintingDepositPayable(\\n        address _selectedExecutor,\\n        IGelatoCondition _condition,\\n        IGelatoAction _action\\n    )\\n        external\\n        view\\n        returns(uint256 mintingDepositPayable);\\n\\n    /// @dev calculates gas requirements based off _actionGasTotal\\n    /// @param _conditionGas the gas forwared to condition.staticcall inside gelatoCore.execute\\n    /// @param _actionGas the gas forwarded with the action call\\n    /// @return the minimum gas required for calls to gelatoCore.execute()\\n    function getMinExecutionGas(uint256 _conditionGas, uint256 _actionGas)\\n        external\\n        pure\\n        returns(uint256);\\n}\"},\"IGelatoGasTestUserProxyManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\ninterface IGelatoGasTestUserProxyManager {\\n    function createGasTestUserProxy() external returns(address gasTestUserProxy);\\n    function userByGasTestProxy(address _user) external view returns(address);\\n    function gasTestProxyByUser(address _gasTestProxy) external view returns(address);\\n}\"},\"IGelatoUserProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoAction.sol\\\";\\nimport \\\"./GelatoCoreEnums.sol\\\";\\n\\n/// @title IGelatoUserProxy - solidity interface of GelatoConditionsStandard\\n/// @notice GelatoUserProxy.execute() API called by gelatoCore during .execute()\\n/// @dev all the APIs are implemented inside GelatoUserProxy\\ninterface IGelatoUserProxy {\\n    function callAccount(address, bytes calldata) external payable returns(bool, bytes memory);\\n    function delegatecallAccount(address, bytes calldata) external payable returns(bool, bytes memory);\\n\\n    function delegatecallGelatoAction(\\n        IGelatoAction _action,\\n        bytes calldata _actionPayloadWithSelector,\\n        uint256 _actionGas\\n    )\\n        external\\n        payable;\\n\\n    function user() external view returns(address);\\n    function gelatoCore() external view returns(address);\\n}\"},\"IGelatoUserProxyManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IGelatoUserProxy.sol\\\";\\n\\n/// @title IGelatoUserProxyManager - solidity interface of GelatoUserProxyManager\\n/// @notice APIs for GelatoUserProxy creation and registry.\\n/// @dev all the APIs and events are implemented inside GelatoUserProxyManager\\ninterface IGelatoUserProxyManager {\\n    event LogCreateUserProxy(IGelatoUserProxy indexed userProxy, address indexed user);\\n\\n    /// @notice deploys gelato proxy for users that have no proxy yet\\n    /// @dev This function should be called for users that have nothing deployed yet\\n    /// @return address of the deployed GelatoUserProxy\\n    function createUserProxy() external returns(IGelatoUserProxy);\\n\\n    // ______ State Read APIs __________________\\n    function userCount() external view returns(uint256);\\n    function userByProxy(address _userProxy) external view returns(address);\\n    function proxyByUser(address _user) external view returns(IGelatoUserProxy);\\n    function isUser(address _user) external view returns(bool);\\n    function isUserProxy(address _userProxy) external view returns(bool);\\n    //function users() external view returns(address[] memory);\\n    //function userProxies() external view returns(IGelatoUserProxy[] memory);\\n    // =========================\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoCondition\",\"name\":\"condition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum GelatoCoreEnums.CanExecuteResults\",\"name\":\"canExecuteResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"LogCanExecuteFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoCondition\",\"name\":\"condition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum GelatoCoreEnums.CanExecuteResults\",\"name\":\"canExecuteResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"name\":\"LogCanExecuteSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"userProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogCreateUserProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogDeregisterExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cancelor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"executionClaimExpired\",\"type\":\"bool\"}],\"name\":\"LogExecutionClaimCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"selectedExecutor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"userProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoCondition\",\"name\":\"condition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"contract IGelatoAction\",\"name\":\"action\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"actionPayloadWithSelector\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"conditionGasActionTotalGasMinExecutionGas\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionClaimExpiryDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintingDeposit\",\"type\":\"uint256\"}],\"name\":\"LogExecutionClaimMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoCondition\",\"name\":\"condition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoAction\",\"name\":\"action\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"executionFailureReason\",\"type\":\"string\"}],\"name\":\"LogExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorClaimLifespan\",\"type\":\"uint256\"}],\"name\":\"LogRegisterExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorClaimLifespan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExecutorClaimLifespan\",\"type\":\"uint256\"}],\"name\":\"LogSetExecutorClaimLifespan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExecutorPrice\",\"type\":\"uint256\"}],\"name\":\"LogSetExecutorPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gelatoCoreExecGasOverhead\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newGasOverhead\",\"type\":\"uint256\"}],\"name\":\"LogSetGelatoCoreExecGasOverhead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExecutionClaimLifespan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinExecutionClaimLifespan\",\"type\":\"uint256\"}],\"name\":\"LogSetMinExecutionClaimLifespan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userProxyExecGasOverhead\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newGasOverhead\",\"type\":\"uint256\"}],\"name\":\"LogSetUserProxyExecGasOverhead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionClaimId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoCondition\",\"name\":\"condition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IGelatoAction\",\"name\":\"action\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPriceUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionCostEstimate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorReward\",\"type\":\"uint256\"}],\"name\":\"LogSuccessfulExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawExecutorBalance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionClaimId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256[3]\",\"name\":\"_conditionGasActionGasMinExecutionGas\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_executionClaimExpiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingDeposit\",\"type\":\"uint256\"}],\"name\":\"canExecute\",\"outputs\":[{\"internalType\":\"enum GelatoCoreEnums.CanExecuteResults\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_selectedExecutor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_executionClaimId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256[3]\",\"name\":\"_conditionGasActionGasMinExecutionGas\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_executionClaimExpiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingDeposit\",\"type\":\"uint256\"}],\"name\":\"cancelExecutionClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createGasTestUserProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gasTestUserProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createUserProxy\",\"outputs\":[{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"userProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregisterExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionClaimId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256[3]\",\"name\":\"_conditionGasActionGasMinExecutionGas\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_executionClaimExpiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingDeposit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executionClaimHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executorClaimLifespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_gasTestUserProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_actionGas\",\"type\":\"uint256\"}],\"name\":\"gasTestActionViaGasTestUserProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionClaimId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256[3]\",\"name\":\"_conditionGasActionGasMinExecutionGas\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_executionClaimExpiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingDeposit\",\"type\":\"uint256\"}],\"name\":\"gasTestCanExecute\",\"outputs\":[{\"internalType\":\"enum GelatoCoreEnums.CanExecuteResults\",\"name\":\"canExecuteResult\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_conditionGas\",\"type\":\"uint256\"}],\"name\":\"gasTestConditionCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"conditionReached\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"reason\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionClaimId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256[3]\",\"name\":\"_conditionGasActionGasMinExecutionGas\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_executionClaimExpiryDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingDeposit\",\"type\":\"uint256\"}],\"name\":\"gasTestExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"_userProxy\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_actionGas\",\"type\":\"uint256\"}],\"name\":\"gasTestGasTestUserProxyExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gasTestProxyByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoCoreExecGasOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExecutionClaimId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actionGas\",\"type\":\"uint256\"}],\"name\":\"getMinExecutionGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_selectedExecutor\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"getMintingDepositPayable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingDepositPayable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executionClaimId\",\"type\":\"uint256\"}],\"name\":\"getUserWithExecutionClaimId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userProxy\",\"type\":\"address\"}],\"name\":\"isUserProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionClaimLifespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_selectedExecutor\",\"type\":\"address\"},{\"internalType\":\"contract IGelatoCondition\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_conditionPayloadWithSelector\",\"type\":\"bytes\"},{\"internalType\":\"contract IGelatoAction\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionPayloadWithSelector\",\"type\":\"bytes\"}],\"name\":\"mintExecutionClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyByUser\",\"outputs\":[{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_executorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executorClaimLifespan\",\"type\":\"uint256\"}],\"name\":\"registerExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExecutorClaimLifespan\",\"type\":\"uint256\"}],\"name\":\"setExecutorClaimLifespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExecutorGasPrice\",\"type\":\"uint256\"}],\"name\":\"setExecutorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExecutionGasOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userByGasTestProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userByProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userProxies\",\"outputs\":[{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProxyExecGasOverhead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userProxyWithExecutionClaimId\",\"outputs\":[{\"internalType\":\"contract IGelatoUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExecutorBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GelatoCore","CompilerVersion":"v0.6.1+commit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://f4460aa7ae41cb2d9ee6c2f3034ff6e01ba6381214f934487c6ea302be519e46"}]}