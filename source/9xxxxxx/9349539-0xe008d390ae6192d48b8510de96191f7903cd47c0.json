{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts\\OracleStore.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// Compound\r\ninterface Compound {\r\n  function supply(address asset, uint amount) external returns (uint);\r\n  function withdraw(address asset, uint requestedAmount) external returns (uint);\r\n  function getSupplyBalance(address account, address asset) view external returns (uint);\r\n  function supplyRatePerBlock() external view returns (uint);\r\n  function mint(uint mintAmount) external returns (uint);\r\n  function redeem(uint redeemTokens) external returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\n// Fulcrum\r\ninterface Fulcrum {\r\n  function supplyInterestRate() external view returns (uint256);\r\n}\r\n\r\ninterface DyDx {\r\n  struct val {\r\n       uint256 value;\r\n   }\r\n\r\n   struct set {\r\n      uint128 borrow;\r\n      uint128 supply;\r\n  }\r\n\r\n  function getEarningsRate() external view returns (val memory);\r\n  function getMarketInterestRate(uint256 marketId) external view returns (val memory);\r\n  function getMarketTotalPar(uint256 marketId) external view returns (set memory);\r\n}\r\n\r\ncontract APROracle is Ownable {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  uint256 DECIMAL = 10 ** 18;\r\n\r\n  mapping(address => uint256) _priceStore;\r\n  mapping(address => uint256) _liquidityStore;\r\n  address public oracle;\r\n\r\n  address public DAI_TOKEN_ADDRESS;\r\n  address public ETH_TOKEN_ADDRESS;\r\n\r\n  // MAINNET ADDRESSES\r\n  address public DYDX_ADDRESS;\r\n\r\n  // Ease of use functions, can also use generic lookups for new tokens\r\n  address public CDAI_TOKEN_ADDRESS;\r\n  address public CBAT_TOKEN_ADDRESS;\r\n  address public CETH_TOKEN_ADDRESS;\r\n  address public CREP_TOKEN_ADDRESS;\r\n  address public CSAI_TOKEN_ADDRESS;\r\n  address public CUSDC_TOKEN_ADDRESS;\r\n  address public CWBTC_TOKEN_ADDRESS;\r\n  address public CZRX_TOKEN_ADDRESS;\r\n\r\n  address public IZRX_TOKEN_ADDRESS;\r\n  address public IREP_TOKEN_ADDRESS;\r\n  address public IKNC_TOKEN_ADDRESS;\r\n  address public IBAT_TOKEN_ADDRESS;\r\n  address public IWBTC_TOKEN_ADDRESS;\r\n  address public IUSDC_TOKEN_ADDRESS;\r\n  address public IETH_TOKEN_ADDRESS;\r\n  address public ISAI_TOKEN_ADDRESS;\r\n  address public IDAI_TOKEN_ADDRESS;\r\n  address public ILINK_TOKEN_ADDRESS;\r\n  address public ISUSD_TOKEN_ADDRESS;\r\n\r\n  constructor() public {\r\n    oracle = msg.sender;\r\n    DYDX_ADDRESS = address(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    DAI_TOKEN_ADDRESS = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    ETH_TOKEN_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    CDAI_TOKEN_ADDRESS = address(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643);\r\n    CBAT_TOKEN_ADDRESS = address(0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E);\r\n    CETH_TOKEN_ADDRESS = address(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n    CREP_TOKEN_ADDRESS = address(0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1);\r\n    CSAI_TOKEN_ADDRESS = address(0xF5DCe57282A584D2746FaF1593d3121Fcac444dC);\r\n    CUSDC_TOKEN_ADDRESS = address(0x39AA39c021dfbaE8faC545936693aC917d5E7563);\r\n    CWBTC_TOKEN_ADDRESS = address(0xC11b1268C1A384e55C48c2391d8d480264A3A7F4);\r\n    CZRX_TOKEN_ADDRESS = address(0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407);\r\n\r\n    IZRX_TOKEN_ADDRESS = address(0xA7Eb2bc82df18013ecC2A6C533fc29446442EDEe);\r\n    IREP_TOKEN_ADDRESS = address(0xBd56E9477Fc6997609Cf45F84795eFbDAC642Ff1);\r\n    IKNC_TOKEN_ADDRESS = address(0x1cC9567EA2eB740824a45F8026cCF8e46973234D);\r\n    IWBTC_TOKEN_ADDRESS = address(0xBA9262578EFef8b3aFf7F60Cd629d6CC8859C8b5);\r\n    IUSDC_TOKEN_ADDRESS = address(0xF013406A0B1d544238083DF0B93ad0d2cBE0f65f);\r\n    IETH_TOKEN_ADDRESS = address(0x77f973FCaF871459aa58cd81881Ce453759281bC);\r\n    ISAI_TOKEN_ADDRESS = address(0x14094949152EDDBFcd073717200DA82fEd8dC960);\r\n    IDAI_TOKEN_ADDRESS = address(0x493C57C4763932315A328269E1ADaD09653B9081);\r\n    ILINK_TOKEN_ADDRESS = address(0x1D496da96caf6b518b133736beca85D5C4F9cBc5);\r\n    ISUSD_TOKEN_ADDRESS = address(0x49f4592E641820e928F9919Ef4aBd92a719B4b49);\r\n  }\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == oracle) _;\r\n  }\r\n\r\n  function set_new_IZRX_TOKEN_ADDRESS(address _new_IZRX_TOKEN_ADDRESS) public restricted {\r\n      IZRX_TOKEN_ADDRESS = _new_IZRX_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_IREP_TOKEN_ADDRESS(address _new_IREP_TOKEN_ADDRESS) public restricted {\r\n      IREP_TOKEN_ADDRESS = _new_IREP_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_IKNC_TOKEN_ADDRESS(address _new_IKNC_TOKEN_ADDRESS) public restricted {\r\n      IKNC_TOKEN_ADDRESS = _new_IKNC_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_IWBTC_TOKEN_ADDRESS(address _new_IWBTC_TOKEN_ADDRESS) public restricted {\r\n      IWBTC_TOKEN_ADDRESS = _new_IWBTC_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_IUSDC_TOKEN_ADDRESS(address _new_IUSDC_TOKEN_ADDRESS) public restricted {\r\n      IUSDC_TOKEN_ADDRESS = _new_IUSDC_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_IETH_TOKEN_ADDRESS(address _new_IETH_TOKEN_ADDRESS) public restricted {\r\n      IETH_TOKEN_ADDRESS = _new_IETH_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_ISAI_TOKEN_ADDRESS(address _new_ISAI_TOKEN_ADDRESS) public restricted {\r\n      ISAI_TOKEN_ADDRESS = _new_ISAI_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_IDAI_TOKEN_ADDRESS(address _new_IDAI_TOKEN_ADDRESS) public restricted {\r\n      IDAI_TOKEN_ADDRESS = _new_IDAI_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_ILINK_TOKEN_ADDRESS(address _new_ILINK_TOKEN_ADDRESS) public restricted {\r\n      ILINK_TOKEN_ADDRESS = _new_ILINK_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_ISUSD_TOKEN_ADDRESS(address _new_ISUSD_TOKEN_ADDRESS) public restricted {\r\n      ISUSD_TOKEN_ADDRESS = _new_ISUSD_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CDAI_TOKEN_ADDRESS(address _new_CDAI_TOKEN_ADDRESS) public restricted {\r\n      CDAI_TOKEN_ADDRESS = _new_CDAI_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CBAT_TOKEN_ADDRESS(address _new_CBAT_TOKEN_ADDRESS) public restricted {\r\n      CBAT_TOKEN_ADDRESS = _new_CBAT_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CETH_TOKEN_ADDRESS(address _new_CETH_TOKEN_ADDRESS) public restricted {\r\n      CETH_TOKEN_ADDRESS = _new_CETH_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CREP_TOKEN_ADDRESS(address _new_CREP_TOKEN_ADDRESS) public restricted {\r\n      CREP_TOKEN_ADDRESS = _new_CREP_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CSAI_TOKEN_ADDRESS(address _new_CSAI_TOKEN_ADDRESS) public restricted {\r\n      CSAI_TOKEN_ADDRESS = _new_CSAI_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CUSDC_TOKEN_ADDRESS(address _new_CUSDC_TOKEN_ADDRESS) public restricted {\r\n      CUSDC_TOKEN_ADDRESS = _new_CUSDC_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CWBTC_TOKEN_ADDRESS(address _new_CWBTC_TOKEN_ADDRESS) public restricted {\r\n      CWBTC_TOKEN_ADDRESS = _new_CWBTC_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_CZRX_TOKEN_ADDRESS(address _new_CZRX_TOKEN_ADDRESS) public restricted {\r\n      CZRX_TOKEN_ADDRESS = _new_CZRX_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_DAI_TOKEN_ADDRESS(address _new_DAI_TOKEN_ADDRESS) public restricted {\r\n      DAI_TOKEN_ADDRESS = _new_DAI_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_ETH_TOKEN_ADDRESS(address _new_ETH_TOKEN_ADDRESS) public restricted {\r\n      ETH_TOKEN_ADDRESS = _new_ETH_TOKEN_ADDRESS;\r\n  }\r\n\r\n  function set_new_DYDX_ADDRESS(address _new_DYDX_ADDRESS) public restricted {\r\n      DYDX_ADDRESS = _new_DYDX_ADDRESS;\r\n  }\r\n\r\n  function setPrice(address _token, uint256 _price) public restricted {\r\n    _priceStore[_token] = _price;\r\n  }\r\n\r\n  function getPrice(address _token) public view returns (uint256) {\r\n    return _priceStore[_token];\r\n  }\r\n\r\n  function setLiquidity(address _token, uint256 _liquidity) public restricted {\r\n    _liquidityStore[_token] = _liquidity;\r\n  }\r\n\r\n  function getLiquidity(address _token) public view returns (uint256) {\r\n    return _liquidityStore[_token];\r\n  }\r\n\r\n  // Supply rate per year normalized\r\n  function getCDAIAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CDAI_TOKEN_ADDRESS);\r\n  }\r\n  function getCBATAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CBAT_TOKEN_ADDRESS);\r\n  }\r\n  function getCETHAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CETH_TOKEN_ADDRESS);\r\n  }\r\n  function getCREPAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CREP_TOKEN_ADDRESS);\r\n  }\r\n  function getCSAIAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CSAI_TOKEN_ADDRESS);\r\n  }\r\n  function getCUSDCAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CUSDC_TOKEN_ADDRESS);\r\n  }\r\n  function getCWBTCAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CWBTC_TOKEN_ADDRESS);\r\n  }\r\n  function getCZRCAPR() public view returns (uint256) {\r\n    return getCompoundAPR(CZRX_TOKEN_ADDRESS);\r\n  }\r\n  function getCompoundAPR(address token) public view returns (uint256) {\r\n    return Compound(token).supplyRatePerBlock().mul(2102400);\r\n  }\r\n\r\n  function getDyDxSAIAPR() public view returns(uint256) {\r\n    return getDyDxAPR(1);\r\n  }\r\n  function getDyDxETHAPR() public view returns(uint256) {\r\n    return getDyDxAPR(0);\r\n  }\r\n  function getDyDxUSDCAPR() public view returns(uint256) {\r\n    return getDyDxAPR(2);\r\n  }\r\n  function getDyDxDAIAPR() public view returns(uint256) {\r\n    return getDyDxAPR(3);\r\n  }\r\n\r\n  function getIZRXAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IZRX_TOKEN_ADDRESS);\r\n  }\r\n  function getIREPAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IREP_TOKEN_ADDRESS);\r\n  }\r\n  function getIKNCAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IKNC_TOKEN_ADDRESS);\r\n  }\r\n  function getIWBTCAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IWBTC_TOKEN_ADDRESS);\r\n  }\r\n  function getIUSDCAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IUSDC_TOKEN_ADDRESS);\r\n  }\r\n  function getIETHAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IETH_TOKEN_ADDRESS);\r\n  }\r\n  function getISAIAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(ISAI_TOKEN_ADDRESS);\r\n  }\r\n  function getIDAIAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(IDAI_TOKEN_ADDRESS);\r\n  }\r\n  function getILINKAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(ILINK_TOKEN_ADDRESS);\r\n  }\r\n  function getISUSDAPR() public view returns (uint256) {\r\n    return getFulcrumAPR(ISUSD_TOKEN_ADDRESS);\r\n  }\r\n\r\n  function getFulcrumAPR(address token) public view returns(uint256) {\r\n    return Fulcrum(token).supplyInterestRate().div(100);\r\n  }\r\n\r\n  function getDyDxAPR(uint256 marketId) public view returns(uint256) {\r\n    uint256 rate      = DyDx(DYDX_ADDRESS).getMarketInterestRate(marketId).value;\r\n    uint256 aprBorrow = rate * 31622400;\r\n    uint256 borrow    = DyDx(DYDX_ADDRESS).getMarketTotalPar(marketId).borrow;\r\n    uint256 supply    = DyDx(DYDX_ADDRESS).getMarketTotalPar(marketId).supply;\r\n    uint256 usage     = (borrow * DECIMAL) / supply;\r\n    uint256 apr       = (((aprBorrow * usage) / DECIMAL) * DyDx(DYDX_ADDRESS).getEarningsRate().value) / DECIMAL;\r\n    return apr;\r\n  }\r\n\r\n  // incase of half-way error\r\n  function inCaseTokenGetsStuck(IERC20 _TokenAddress) onlyOwner public {\r\n      uint qty = _TokenAddress.balanceOf(address(this));\r\n      _TokenAddress.transfer(msg.sender, qty);\r\n  }\r\n  // incase of half-way error\r\n  function inCaseETHGetsStuck() onlyOwner public{\r\n      (bool result, ) = msg.sender.call.value(address(this).balance)(\"\");\r\n      require(result, \"transfer of ETH failed\");\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CBAT_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDAI_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREP_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CSAI_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSDC_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CWBTC_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CZRX_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DYDX_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IBAT_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IDAI_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IKNC_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ILINK_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IREP_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISAI_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISUSD_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IUSDC_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IWBTC_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IZRX_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCBATAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCDAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCETHAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCREPAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCSAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCUSDCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCWBTCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCZRCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCompoundAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getDyDxAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDyDxDAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDyDxETHAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDyDxSAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDyDxUSDCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFulcrumAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIDAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIETHAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIKNCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getILINKAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIREPAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getISAIAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getISUSDAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIUSDCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIWBTCAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIZRXAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inCaseETHGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokenGetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"setLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CBAT_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CBAT_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CDAI_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CDAI_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CETH_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CETH_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CREP_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CREP_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CSAI_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CSAI_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CUSDC_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CUSDC_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CWBTC_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CWBTC_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_CZRX_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_CZRX_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_DAI_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_DAI_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_DYDX_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_DYDX_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_ETH_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_ETH_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IDAI_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IDAI_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IETH_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IETH_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IKNC_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IKNC_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_ILINK_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_ILINK_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IREP_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IREP_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_ISAI_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_ISAI_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_ISUSD_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_ISUSD_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IUSDC_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IUSDC_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IWBTC_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IWBTC_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_IZRX_TOKEN_ADDRESS\",\"type\":\"address\"}],\"name\":\"set_new_IZRX_TOKEN_ADDRESS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"APROracle","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://1e8c3a036f30dfa1d2b15da343cb5d7f4081a9a46b62d11d12038df64d13e6e0"}]}