{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >= 0.5.12;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERCWAR is Owned {\r\n\r\n  event playerenter(address player, address token, uint256 amount, uint256 cost);\r\n  event gameended(address winner, uint256 sttamount, uint256 pyroamount);\r\n\r\n  constructor() public {\r\n    stt = 0xaC9Bb427953aC7FDDC562ADcA86CF42D988047Fd;\r\n    tokenbase[stt] = 10**20;\r\n\r\n    pyro = 0x14409B0Fc5C7f87b5DAd20754fE22d29A3dE8217;\r\n    tokenbase[pyro] = 25 * 10**18;\r\n\r\n    stopblock = block.number + 6000;\r\n  }\r\n\r\n  uint256 public stopblock;\r\n  address public winner;\r\n\r\n  mapping(address => uint256) public entries;\r\n  mapping(address => uint256) public tokenbase;\r\n  mapping(address => uint256) public blockbalance;\r\n  mapping(uint256 => address) public winpool;\r\n\r\n  bool public ended;\r\n\r\n  address stt;\r\n  address pyro;\r\n\r\n\r\n  modifier isEnded {\r\n    require(ended == true);\r\n    _;\r\n  }\r\n\r\n  modifier notEnded {\r\n    require(ended == false);\r\n    _;\r\n  }\r\n\r\n\r\n\r\n  function enter(address token, uint256 amount) public notEnded() {\r\n    require(amount > 0);\r\n    require(tokenbase[token] != 0);\r\n    if(block.number >= stopblock){\r\n      endgame();\r\n    }\r\n    else {\r\n      IERC20 itoken = IERC20(token);\r\n      uint256 blockcost = getblockcost(token);\r\n      uint256 _cost = amount * blockcost;\r\n\r\n      require(itoken.transferFrom(msg.sender, address(this), _cost));\r\n\r\n      if(stopblock + amount - block.number > 6000) {\r\n        stopblock = block.number + 6000;\r\n      }\r\n      else {\r\n        stopblock = amount + stopblock;\r\n      }\r\n      entries[token] = amount + entries[token];\r\n      winner = msg.sender;\r\n      blockbalance[msg.sender] = blockbalance[msg.sender] + amount;\r\n\r\n      poolhandler(msg.sender);\r\n\r\n      emit playerenter(msg.sender, token, amount, _cost);\r\n    }\r\n  }\r\n\r\n  function endgame() public notEnded() {\r\n    if(block.number >= stopblock) {\r\n      IERC20 _istt = IERC20(stt);\r\n      IERC20 _ipyro = IERC20(pyro);\r\n      uint256 _contractstt = _istt.balanceOf(address(this));\r\n      uint256 _contractpyro = _ipyro.balanceOf(address(this));\r\n      uint256 _sttshare = _contractstt / 25;\r\n      uint256 _pyroshare = _contractpyro / 25;\r\n      uint256 _sttwinner = _contractstt -  _sttshare * 5;\r\n      uint256 _pyrowinner = _contractpyro -  _pyroshare * 5;\r\n\r\n      uint256 _i = 0;\r\n      for (_i = 0; _i < 5; _i++) {\r\n        _istt.transfer(winpool[_i], _sttshare);\r\n        _ipyro.transfer(winpool[_i], _pyroshare);\r\n      }\r\n\r\n      _istt.transfer(winner, _sttwinner);\r\n      _ipyro.transfer(winner, _pyrowinner);\r\n      ended = true;\r\n      emit gameended(winner, _contractstt, _contractpyro);\r\n    }\r\n  }\r\n\r\n  function poolhandler(address _addr) internal returns(bool){\r\n\r\n    uint256 low = 0;\r\n\r\n    for(uint256 i = 0; i < 5; i++) {\r\n      if(winpool[i] == _addr){\r\n        return(false);\r\n      }\r\n      if(blockbalance[winpool[low]] > blockbalance[winpool[i]]) {\r\n        low = i;\r\n      }\r\n    }\r\n\r\n    if(blockbalance[_addr] > blockbalance[winpool[low]]) {\r\n      winpool[low] = _addr;\r\n    }\r\n    return(true);\r\n  }\r\n\r\n\r\n  //VIEW FUNCTIONS\r\n  function getblockcost(address token) public view returns(uint256) {\r\n    uint256 tmp = entries[pyro] + entries[stt];\r\n    uint256 a;\r\n    if (tmp >= 10**5) {\r\n      a = 20 * tokenbase[token] *  entries[token] / tmp;\r\n    }\r\n    else {\r\n      a = tokenbase[token] + (entries[token] * tokenbase[token]) / 10**4;\r\n    }\r\n    return(a);\r\n  }\r\n\r\n  //ADMIN FUNCTIONS\r\n  function adminwithdrawal(address token, uint256 amount) public onlyOwner() isEnded() {\r\n    IERC20 itoken = IERC20(token);\r\n    itoken.transfer(msg.sender, amount);\r\n  }\r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sttamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pyroamount\",\"type\":\"uint256\"}],\"name\":\"gameended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"playerenter\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminwithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endgame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getblockcost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenbase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winpool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERCWAR","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://18643c195d0df874307d37c12a111979ae222c7e99ebea80c0f11b67f5c90682"}]}