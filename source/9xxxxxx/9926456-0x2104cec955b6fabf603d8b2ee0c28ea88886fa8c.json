{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"stake/tokens/ERC20OnApprove.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\nimport { ERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC165Checker } from \\\"node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\\\";\\n\\nimport { OnApproveConstant } from \\\"stake/tokens/OnApproveConstant.sol\\\";\\n\\n\\ncontract ERC20OnApprove is ERC20, OnApproveConstant {\\n  function approveAndCall(address spender, uint256 amount, bytes memory data) public returns (bool) {\\n    require(approve(spender, amount));\\n    _callOnApprove(msg.sender, spender, amount, data);\\n  }\\n\\n  function _callOnApprove(address owner, address spender, uint256 amount, bytes memory data) internal {\\n    require(ERC165Checker._supportsInterface(spender, INTERFACE_ID_ON_APPROVE),\\n      \\\"ERC20OnApprove: spender doesn't support onApprove\\\");\\n\\n    (bool ok, bytes memory res) = spender.call(\\n      abi.encodeWithSelector(\\n        INTERFACE_ID_ON_APPROVE,\\n        owner,\\n        spender,\\n        amount,\\n        data\\n      )\\n    );\\n\\n    require(ok, string(res));\\n    // require(ok, \\\"ERC20OnApprove: failed to call onApprove\\\");\\n  }\\n\\n}\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"stake/tokens/OnApproveConstant.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\n\\ncontract OnApproveConstant {\\n  bytes4 public constant INTERFACE_ID_ON_APPROVE = bytes4(keccak256(\\\"onApprove(address,address,uint256,bytes)\\\"));\\n}\"\r\n    },\r\n    \"stake/tokens/OnApprove.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\nimport { ERC165 } from \\\"node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\\\";\\nimport { OnApproveConstant } from \\\"stake/tokens/OnApproveConstant.sol\\\";\\n\\n\\ncontract OnApprove is OnApproveConstant, ERC165 {\\n  constructor() public {\\n    _registerInterface(INTERFACE_ID_ON_APPROVE);\\n  }\\n\\n  function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external returns (bool);\\n}\"\r\n    },\r\n    \"stake/tokens/SeigToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\nimport { Ownable } from \\\"node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport { ERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport { SeigManagerI } from \\\"stake/interfaces/SeigManagerI.sol\\\";\\n\\nimport { ERC165Checker } from \\\"node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\\\";\\n\\nimport { ERC20OnApprove } from \\\"stake/tokens/ERC20OnApprove.sol\\\";\\nimport { AuthController } from \\\"stake/tokens/AuthController.sol\\\";\\n\\ncontract SeigToken is ERC20, Ownable, ERC20OnApprove, AuthController {\\n  SeigManagerI public seigManager;\\n\\n  function setSeigManager(SeigManagerI _seigManager) external onlyOwner {\\n    seigManager = _seigManager;\\n  }\\n\\n  //////////////////////\\n  // Override ERC20 functions\\n  //////////////////////\\n\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\n    require(msg.sender == sender || msg.sender == recipient, \\\"SeigToken: only sender or recipient can transfer\\\");\\n    super._transfer(sender, recipient, amount);\\n    if (address(seigManager) != address(0)) {\\n      // seigManager.onTransfer(sender, recipient, amount);\\n    }\\n  }\\n\\n  function _mint(address account, uint256 amount) internal {\\n    super._mint(account, amount);\\n    if (address(seigManager) != address(0)) {\\n      // seigManager.onTransfer(address(0), account, amount);\\n    }\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    super._burn(account, amount);\\n    if (address(seigManager) != address(0)) {\\n      // seigManager.onTransfer(account, address(0), amount);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.10;\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function _supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return _supportsERC165(account) &&\\n            _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!_supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with the `supportsERC165` method in this library.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // success determines whether the staticcall succeeded and result determines\\n        // whether the contract at account indicates support of _interfaceId\\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\\n\\n        return (success && result);\\n    }\\n\\n    /**\\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return success true if the STATICCALL succeeded, false otherwise\\n     * @return result true if the STATICCALL succeeded and the contract at account\\n     * indicates support of the interface with identifier interfaceId, false otherwise\\n     */\\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\\n        private\\n        view\\n        returns (bool, bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall.gas(30000)(encodedParams);\\n        if (result.length < 32) return (false, false);\\n        return (success, abi.decode(result, (bool)));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"stake/tokens/WTON.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\nimport { Ownable } from \\\"node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport { SafeMath } from \\\"node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\nimport { IERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC20Mintable } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\\\";\\nimport { ERC20Burnable } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport { ERC20Detailed } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\\";\\nimport { SafeERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { ReentrancyGuard } from \\\"node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { ERC165 } from \\\"node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol\\\";\\nimport { ERC165Checker } from \\\"node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\\\";\\n\\nimport { DSMath } from \\\"node_modules/coinage-token/contracts/lib/DSMath.sol\\\";\\n\\nimport { SeigManagerI } from \\\"stake/interfaces/SeigManagerI.sol\\\";\\n\\nimport { SeigToken } from \\\"./SeigToken.sol\\\";\\nimport { OnApprove } from \\\"./OnApprove.sol\\\";\\nimport { OnApproveConstant } from \\\"stake/tokens/OnApproveConstant.sol\\\";\\n\\n\\ncontract WTON is DSMath, ReentrancyGuard, Ownable, ERC20Mintable, ERC20Burnable, ERC20Detailed, SeigToken, OnApprove {\\n  using SafeERC20 for ERC20Mintable;\\n\\n  ERC20Mintable public ton;\\n\\n  constructor (\\n    ERC20Mintable _ton\\n  )\\n    public\\n    ERC20Detailed(\\\"Wrapped TON\\\", \\\"WTON\\\", 27)\\n  {\\n    require(ERC20Detailed(address(_ton)).decimals() == 18, \\\"WTON: decimals of TON must be 18\\\");\\n    ton = _ton;\\n  }\\n\\n  //////////////////////\\n  // TON Approve callback\\n  //////////////////////\\n\\n  function onApprove(\\n    address owner,\\n    address spender,\\n    uint256 tonAmount,\\n    bytes calldata data\\n  ) external returns (bool) {\\n    require(msg.sender == address(ton), \\\"WTON: only accept TON approve callback\\\");\\n\\n    // swap owner's TON to WTON\\n    _swapFromTON(owner, owner, tonAmount);\\n\\n    uint256 wtonAmount = _toRAY(tonAmount);\\n    (address depositManager, address rootchain) = _decodeTONApproveData(data);\\n\\n    // approve WTON to DepositManager\\n    _approve(owner, depositManager, wtonAmount);\\n\\n    // call DepositManager.onApprove to deposit WTON\\n    bytes memory depositManagerOnApproveData = _encodeDepositManagerOnApproveData(rootchain);\\n    _callOnApprove(owner, depositManager, wtonAmount, depositManagerOnApproveData);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev data is 64 bytes of 2 addresses in left-padded 32 bytes\\n   */\\n  function _decodeTONApproveData(\\n    bytes memory data\\n  ) internal pure returns (address depositManager, address rootchain) {\\n    require(data.length == 0x40);\\n\\n    assembly {\\n      depositManager := mload(add(data, 0x20))\\n      rootchain := mload(add(data, 0x40))\\n    }\\n  }\\n\\n  function _encodeDepositManagerOnApproveData(\\n    address rootchain\\n  ) internal pure returns (bytes memory data) {\\n    data = new bytes(0x20);\\n\\n    assembly {\\n      mstore(add(data, 0x20), rootchain)\\n    }\\n  }\\n\\n\\n  //////////////////////\\n  // Override ERC20 functions\\n  //////////////////////\\n\\n  function burnFrom(address account, uint256 amount) public {\\n    if (isMinter(msg.sender)) {\\n      _burn(account, amount);\\n      return;\\n    }\\n\\n    super.burnFrom(account, amount);\\n  }\\n\\n  //////////////////////\\n  // Swap functions\\n  //////////////////////\\n\\n  /**\\n   * @dev swap WTON to TON\\n   */\\n  function swapToTON(uint256 wtonAmount) public nonReentrant returns (bool) {\\n    return _swapToTON(msg.sender, msg.sender, wtonAmount);\\n  }\\n\\n  /**\\n   * @dev swap TON to WTON\\n   */\\n  function swapFromTON(uint256 tonAmount) public nonReentrant returns (bool) {\\n    return _swapFromTON(msg.sender, msg.sender, tonAmount);\\n  }\\n\\n  /**\\n   * @dev swap WTON to TON, and transfer TON\\n   * NOTE: TON's transfer event's `from` argument is not `msg.sender` but `WTON` address.\\n   */\\n  function swapToTONAndTransfer(address to, uint256 wtonAmount) public nonReentrant returns (bool) {\\n    return _swapToTON(to, msg.sender, wtonAmount);\\n  }\\n\\n  /**\\n   * @dev swap TON to WTON, and transfer WTON\\n   */\\n  function swapFromTONAndTransfer(address to, uint256 tonAmount) public nonReentrant returns (bool) {\\n    return _swapFromTON(msg.sender, to, tonAmount);\\n  }\\n\\n\\n  //////////////////////\\n  // Internal functions\\n  //////////////////////\\n\\n  function _swapToTON(address tonAccount, address wtonAccount, uint256 wtonAmount) internal returns (bool) {\\n    _burn(wtonAccount, wtonAmount);\\n\\n    // mint TON if WTON contract has not enough TON to transfer\\n    uint256 tonAmount = _toWAD(wtonAmount);\\n    uint256 tonBalance = ton.balanceOf(address(this));\\n    if (tonBalance < tonAmount) {\\n      ton.mint(address(this), tonAmount.sub(tonBalance));\\n    }\\n\\n    ton.safeTransfer(tonAccount, tonAmount);\\n    return true;\\n  }\\n\\n  function _swapFromTON(address tonAccount, address wtonAccount, uint256 tonAmount) internal returns (bool) {\\n    _mint(wtonAccount, _toRAY(tonAmount));\\n    ton.safeTransferFrom(tonAccount, address(this), tonAmount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev transform WAD to RAY\\n   */\\n  function _toRAY(uint256 v) internal pure returns (uint256) {\\n    return v * 10 ** 9;\\n  }\\n\\n  /**\\n   * @dev transform RAY to WAD\\n   */\\n  function _toWAD(uint256 v) internal pure returns (uint256) {\\n    return v / 10 ** 9;\\n  }\\n}\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following \\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/access/Roles.sol\\\";\\n\\ncontract MinterRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor () internal {\\n        _addMinter(_msgSender());\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"MinterRole: caller does not have the Minter role\\\");\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(_msgSender());\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/access/Roles.sol\\\";\\n\\ncontract PauserRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event PauserAdded(address indexed account);\\n    event PauserRemoved(address indexed account);\\n\\n    Roles.Role private _pausers;\\n\\n    constructor () internal {\\n        _addPauser(_msgSender());\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(_msgSender()), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyPauser {\\n        _addPauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(_msgSender());\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"stake/interfaces/PowerTONI.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\n\\ninterface PowerTONI {\\n  function seigManager() external view returns (address);\\n  function wton() external view returns (address);\\n\\n  function currentRound() external view returns (uint256);\\n  function roundDuration() external view returns (uint256);\\n  function totalDeposits() external view returns (uint256);\\n\\n  function winnerOf(uint256 round) external view returns (address);\\n  function powerOf(address account) external view returns (uint256);\\n\\n  function init() external;\\n  function start() external;\\n  function endRound() external;\\n\\n  function onDeposit(address rootchain, address account, uint256 amount) external;\\n  function onWithdraw(address rootchain, address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"stake/interfaces/DepositManagerI.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\n\\ninterface DepositManagerI {\\n  function owner() external view returns (address);\\n  function wton() external view returns (address);\\n  function registry() external view returns (address);\\n  function seigManager() external view returns (address);\\n\\n  function accStaked(address rootchain, address account) external view returns (uint256 wtonAmount);\\n  function accStakedRootChain(address rootchain) external view returns (uint256 wtonAmount);\\n  function accStakedAccount(address account) external view returns (uint256 wtonAmount);\\n\\n  function pendingUnstaked(address rootchain, address account) external view returns (uint256 wtonAmount);\\n  function pendingUnstakedRootChain(address rootchain) external view returns (uint256 wtonAmount);\\n  function pendingUnstakedAccount(address account) external view returns (uint256 wtonAmount);\\n\\n  function accUnstaked(address rootchain, address account) external view returns (uint256 wtonAmount);\\n  function accUnstakedRootChain(address rootchain) external view returns (uint256 wtonAmount);\\n  function accUnstakedAccount(address account) external view returns (uint256 wtonAmount);\\n\\n\\n  function withdrawalRequestIndex(address rootchain, address account) external view returns (uint256 index);\\n  function withdrawalRequest(address rootchain, address account, uint256 index) external view returns (uint128 withdrawableBlockNumber, uint128 amount, bool processed );\\n\\n  function WITHDRAWAL_DELAY() external view returns (uint256);\\n\\n  function setSeigManager(address seigManager) external;\\n  function deposit(address rootchain, uint256 amount) external returns (bool);\\n  function requestWithdrawal(address rootchain, uint256 amount) external returns (bool);\\n  function processRequest(address rootchain) external returns (bool);\\n  function requestWithdrawalAll(address rootchain) external returns (bool);\\n  function processRequests(address rootchain, uint256 n) external returns (bool);\\n\\n  function numRequests(address rootchain, address account) external view returns (uint256);\\n  function numPendingRequests(address rootchain, address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"stake/interfaces/RootChainRegistryI.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\n\\ninterface RootChainRegistryI {\\n  function rootchains(address rootchain) external view returns (bool);\\n\\n  function register(address rootchain) external returns (bool);\\n  function numRootChains() external view returns (uint256);\\n  function rootchainByIndex(uint256 index) external view returns (address);\\n\\n  function deployCoinage(address rootchain, address seigManager) external returns (bool);\\n  function registerAndDeployCoinage(address rootchain, address seigManager) external returns (bool);\\n  function unregister(address rootchain) external returns (bool);\\n}\"\r\n    },\r\n    \"stake/interfaces/SeigManagerI.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\n\\ninterface SeigManagerI {\\n  function registry() external view returns (address);\\n  function depositManager() external view returns (address);\\n  function ton() external view returns (address);\\n  function wton() external view returns (address);\\n  function powerton() external view returns (address);\\n  function tot() external view returns (address);\\n  function coinages(address rootchain) external view returns (address);\\n  function commissionRates(address rootchain) external view returns (uint256);\\n\\n  function lastCommitBlock(address rootchain) external view returns (uint256);\\n  function seigPerBlock() external view returns (uint256);\\n  function lastSeigBlock() external view returns (uint256);\\n  function pausedBlock() external view returns (uint256);\\n  function unpausedBlock() external view returns (uint256);\\n  function DEFAULT_FACTOR() external view returns (uint256);\\n\\n  function deployCoinage(address rootchain) external returns (bool);\\n  function setCommissionRate(address rootchain, uint256 commission, bool isCommissionRateNegative) external returns (bool);\\n\\n  function uncomittedStakeOf(address rootchain, address account) external view returns (uint256);\\n  function stakeOf(address rootchain, address account) external view returns (uint256);\\n  function additionalTotBurnAmount(address rootchain, address account, uint256 amount) external view returns (uint256 totAmount);\\n\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool);\\n  function onCommit() external returns (bool);\\n  function onDeposit(address rootchain, address account, uint256 amount) external returns (bool);\\n  function onWithdraw(address rootchain, address account, uint256 amount) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"RootChainI.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\ninterface RootChainI {\\n  function operator() external view returns (address);\\n  function isRootChain() external view returns (bool);\\n  function currentFork() external view returns (uint);\\n  function lastEpoch(uint forkNumber) external view returns (uint);\\n}\"\r\n    },\r\n    \"stake/tokens/AuthController.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\nimport { Ownable } from \\\"node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\n\\ninterface MinterRoleRenounceTarget {\\n  function renounceMinter() external;\\n}\\n\\ninterface PauserRoleRenounceTarget {\\n  function renouncePauser() external;\\n}\\n\\ninterface OwnableTarget {\\n  function renounceOwnership() external;\\n  function transferOwnership(address newOwner) external;\\n}\\n\\ncontract AuthController is Ownable {\\n  function renounceMinter(address target) public onlyOwner {\\n    MinterRoleRenounceTarget(target).renounceMinter();\\n  }\\n\\n  function renouncePauser(address target) public onlyOwner {\\n    PauserRoleRenounceTarget(target).renouncePauser();\\n  }\\n\\n  function renounceOwnership(address target) public onlyOwner {\\n    OwnableTarget(target).renounceOwnership();\\n  }\\n\\n  function transferOwnership(address target, address newOwner) public onlyOwner {\\n    OwnableTarget(target).transferOwnership(newOwner);\\n  }\\n}\"\r\n    },\r\n    \"node_modules/coinage-token/flatten.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\\n\\npragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\npragma solidity ^0.5.0;\\n\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\n// File: contracts/lib/DSMath.sol\\n\\n// https://github.com/dapphub/ds-math/blob/de45767/src/math.sol\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\ncontract DSMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    return x <= y ? x : y;\\n  }\\n  function max(uint x, uint y) internal pure returns (uint z) {\\n    return x >= y ? x : y;\\n  }\\n  function imin(int x, int y) internal pure returns (int z) {\\n    return x <= y ? x : y;\\n  }\\n  function imax(int x, int y) internal pure returns (int z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n  }\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n  }\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n  }\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //  x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //  floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function wpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : WAD;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = wmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = wmul(z, x);\\n      }\\n    }\\n  }\\n\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\\n// File: contracts/AutoIncrementCoinage.sol\\n\\n// based on ERC20 implementation of openzeppelin-solidity: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7552af95e4ec6fccd64a95b206f59a1b4ff91517/contracts/token/ERC20/ERC20.sol\\npragma solidity ^0.5.12;\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * @dev Implementation of coin age token based on ERC20 of openzeppelin-solidity\\n *\\n * AutoIncrementCoinage stores `_totalSupply` and `_balances` as RAY BASED value,\\n * `_allowances` as RAY FACTORED value.\\n *\\n * This takes public function (including _approve) parameters as RAY FACTORED value\\n * and internal function (including approve) parameters as RAY BASED value, and emits event in RAY FACTORED value.\\n *\\n * `RAY BASED` = `RAY FACTORED`  / factor\\n *\\n *  factor increases exponentially for each block mined.\\n */\\ncontract AutoIncrementCoinage is Context, IERC20, DSMath, Ownable, ERC20Detailed {\\n  using SafeMath for uint256;\\n\\n  mapping (address => uint256) internal _balances;\\n\\n  mapping (address => mapping (address => uint256)) internal _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  uint256 internal _factor;\\n\\n  uint256 internal _factorIncrement;\\n\\n  uint256 internal _lastBlock;\\n\\n  bool internal _transfersEnabled;\\n\\n  event FactorIncreased(uint256 factor);\\n\\n  modifier increaseFactor() {\\n    _increaseFactor();\\n    _;\\n  }\\n\\n  modifier onlyTransfersEnabled() {\\n    require(msg.sender == owner() || _transfersEnabled, \\\"AutoIncrementCoinage: transfer not allowed\\\");\\n    _;\\n  }\\n\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    uint256 factor,\\n    uint256 factorIncrement,\\n    bool transfersEnabled\\n  )\\n    public\\n    ERC20Detailed(name, symbol, 27)\\n  {\\n    _factor = factor;\\n    _factorIncrement = factorIncrement;\\n    _lastBlock = block.number;\\n    _transfersEnabled = transfersEnabled;\\n  }\\n\\n  function factor() public view returns (uint256) {\\n    return _applyFactor(_factor);\\n  }\\n\\n  function factorIncrement() public view returns (uint256) {\\n    return _factorIncrement;\\n  }\\n\\n  function lastBlock() public view returns (uint256) {\\n    return _lastBlock;\\n  }\\n\\n  function transfersEnabled() public view returns (bool) {\\n    return _transfersEnabled;\\n  }\\n\\n  function enableTransfers(bool v) public onlyOwner {\\n    _transfersEnabled = v;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-totalSupply}.\\n    */\\n  function totalSupply() public view returns (uint256) {\\n    // return _toRAYFactored(_totalSupply);\\n    return _applyFactor(_totalSupply);\\n  }\\n\\n\\n  /**\\n    * @dev See {IERC20-balanceOf}.\\n    */\\n  function balanceOf(address account) public view returns (uint256) {\\n    // return _toRAYFactored(_balances[account]);\\n    return _applyFactor(_balances[account]);\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transfer}.\\n    *\\n    * Requirements:\\n    *\\n    * - `recipient` cannot be the zero address.\\n    * - the caller must have a balance of at least `amount`.\\n    */\\n  function transfer(address recipient, uint256 amount) public onlyTransfersEnabled returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-allowance}.\\n    */\\n  function allowance(address owner, address spender) public view returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n    * @dev See {IERC20-approve}.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    */\\n  function approve(address spender, uint256 amount) public returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance. This is not\\n    * required by the EIP. See the note at the beginning of {ERC20};\\n    *\\n    * Requirements:\\n    * - `sender` and `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    * - the caller must have allowance for `sender`'s tokens of at least\\n    * `amount`.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount) public onlyTransfersEnabled returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"AutoIncrementCoinage: transfer amount exceeds allowance\\\"));\\n    return true;\\n  }\\n\\n  /**\\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\\n    *\\n    * This is an alternative to {approve} that can be used as a mitigation for\\n    * problems described in {IERC20-approve}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    */\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n    *\\n    * This is an alternative to {approve} that can be used as a mitigation for\\n    * problems described in {IERC20-approve}.\\n    *\\n    * Emits an {Approval} event indicating the updated allowance.\\n    *\\n    * Requirements:\\n    *\\n    * - `spender` cannot be the zero address.\\n    * - `spender` must have allowance for the caller of at least\\n    * `subtractedValue`.\\n    */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"AutoIncrementCoinage: decreased allowance below zero\\\"));\\n    return true;\\n  }\\n\\n  /**\\n    * @dev Moves tokens `amount` from `sender` to `recipient`.\\n    *\\n    * This is internal function is equivalent to {transfer}, and can be used to\\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\\n    *\\n    * Emits a {Transfer} event.\\n    *\\n    * Requirements:\\n    *\\n    * - `sender` cannot be the zero address.\\n    * - `recipient` cannot be the zero address.\\n    * - `sender` must have a balance of at least `amount`.\\n    */\\n  function _transfer(address sender, address recipient, uint256 amount) internal increaseFactor {\\n    require(sender != address(0), \\\"AutoIncrementCoinage: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"AutoIncrementCoinage: transfer to the zero address\\\");\\n\\n    uint256 rbAmount = _toRAYBased(amount);\\n\\n    _balances[sender] = _balances[sender].sub(rbAmount, \\\"AutoIncrementCoinage: transfer amount exceeds balance\\\");\\n    _balances[recipient] = _balances[recipient].add(rbAmount);\\n    emit Transfer(sender, recipient, _toRAYFactored(rbAmount));\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n    * the total supply.\\n    *\\n    * Emits a {Transfer} event with `from` set to the zero address.\\n    *\\n    * Requirements\\n    *\\n    * - `to` cannot be the zero address.\\n    */\\n  // function _mint(address account, uint256 amount) internal {\\n  function _mint(address account, uint256 amount) internal increaseFactor {\\n    require(account != address(0), \\\"AutoIncrementCoinage: mint to the zero address\\\");\\n\\n    uint256 rbAmount = _toRAYBased(amount);\\n\\n    _totalSupply = _totalSupply.add(rbAmount);\\n    _balances[account] = _balances[account].add(rbAmount);\\n    emit Transfer(address(0), account, _toRAYFactored(rbAmount));\\n  }\\n\\n    /**\\n    * @dev Destroys `amount` tokens from `account`, reducing the\\n    * total supply.\\n    *\\n    * Emits a {Transfer} event with `to` set to the zero address.\\n    *\\n    * Requirements\\n    *\\n    * - `account` cannot be the zero address.\\n    * - `account` must have at least `amount` tokens.\\n    */\\n  function _burn(address account, uint256 amount) internal increaseFactor {\\n    require(account != address(0), \\\"AutoIncrementCoinage: burn from the zero address\\\");\\n\\n    uint256 rbAmount = _toRAYBased(amount);\\n\\n    _balances[account] = _balances[account].sub(rbAmount, \\\"AutoIncrementCoinage: burn amount exceeds balance\\\");\\n    _totalSupply = _totalSupply.sub(rbAmount);\\n    emit Transfer(account, address(0), _toRAYFactored(rbAmount));\\n  }\\n\\n  /**\\n    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n    *\\n    * This is internal function is equivalent to `approve`, and can be used to\\n    * e.g. set automatic allowances for certain subsystems, etc.\\n    *\\n    * Emits an {Approval} event.\\n    *\\n    * Requirements:\\n    *\\n    * - `owner` cannot be the zero address.\\n    * - `spender` cannot be the zero address.\\n    */\\n  function _approve(address owner, address spender, uint256 amount) internal increaseFactor {\\n    require(owner != address(0), \\\"AutoIncrementCoinage: approve from the zero address\\\");\\n    require(spender != address(0), \\\"AutoIncrementCoinage: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n    * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n    * from the caller's allowance if caller is not owner.\\n    * If caller is owner, just burn tokens from `account`\\n    *\\n    * See {_burn} and {_approve}.\\n    */\\n  function _burnFrom(address account, uint256 amount) internal increaseFactor {\\n    _burn(account, amount);\\n    if (!isOwner()) {\\n      _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"AutoIncrementCoinage: burn amount exceeds allowance\\\"));\\n    }\\n  }\\n\\n  // helpers\\n\\n  function _increaseFactor() internal {\\n    uint256 n = block.number - _lastBlock;\\n\\n    if (n > 0) {\\n      _factor = _calculateFactor(n);\\n      _lastBlock = block.number;\\n\\n      emit FactorIncreased(_factor);\\n    }\\n  }\\n\\n  /**\\n   * @param v the value to be factored\\n   */\\n  function _applyFactor(uint256 v) internal view returns (uint256) {\\n    if (v == 0) {\\n      return 0;\\n    }\\n\\n    uint256 n = block.number - _lastBlock;\\n\\n    if (n == 0) {\\n      return rmul(v, _factor);\\n    }\\n\\n    return rmul(v, _calculateFactor(n));\\n  }\\n\\n  /**\\n   * @dev Override _calculateFactor to change factor calculation.\\n   */\\n  function _calculateFactor(uint256 n) internal view returns (uint256) {\\n    return rmul(_factor, rpow(_factorIncrement, n));\\n  }\\n\\n  /**\\n   * @dev Calculate RAY BASED from RAY FACTORED\\n   */\\n  function _toRAYBased(uint256 rf) internal view returns (uint256 rb) {\\n    return rdiv(rf, _factor);\\n  }\\n\\n  /**\\n   * @dev Calculate RAY FACTORED from RAY BASED\\n   */\\n  function _toRAYFactored(uint256 rb) internal view returns (uint256 rf) {\\n    return rmul(rb, _factor);\\n  }\\n}\\n\\n// File: contracts/lib/minime/Controlled.sol\\n\\npragma solidity ^0.5.12;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address payable public controller;\\n\\n    constructor () public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address payable _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\\n// File: contracts/lib/minime/TokenController.sol\\n\\npragma solidity ^0.5.12;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\\n// File: contracts/AutoIncrementCoinageSnapshot.sol\\n\\n// based on MiniMeToken implementation of giveth: https://github.com/Giveth/minime/blob/ea04d95/contracts/MiniMeToken.sol\\npragma solidity ^0.5.12;\\n\\n/*\\n  Copyright 2016, Jordi Baylina\\n\\n  This program is free software: you can redistribute it and/or modify\\n  it under the terms of the GNU General Public License as published by\\n  the Free Software Foundation, either version 3 of the License, or\\n  (at your option) any later version.\\n\\n  This program is distributed in the hope that it will be useful,\\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n  GNU General Public License for more details.\\n\\n  You should have received a copy of the GNU General Public License\\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title AutoIncrementCoinageSnapshot Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\n\\n\\n\\n\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract AutoIncrementCoinageSnapshot is IERC20, DSMath, Controlled {\\n\\n  uint public constant defaultFactor = 10 ** 18;\\n  uint8 public constant decimals = 18;        // Number of decimals of the smallest unit\\n  string public name;                         // The Token's name: e.g. DigixDAO Tokens\\n  string public symbol;                       // An identifier: e.g. REP\\n  string public version = 'C_MMT_0.1';        // An arbitrary versioning scheme\\n\\n\\n  /// @dev `Checkpoint` is the structure that attaches a block number to a\\n  ///  given value, the block number attached is the one that last changed the\\n  ///  value\\n  struct  Checkpoint {\\n\\n    // `fromBlock` is the block number that the value was generated from\\n    uint128 fromBlock;\\n\\n    // `value` is the amount of tokens at a specific block number\\n    uint128 value;\\n  }\\n\\n  // `parentToken` is the Token address that was cloned to produce this token;\\n  //  it will be 0x0 for a token that was not cloned\\n  AutoIncrementCoinageSnapshot public parentToken;\\n\\n  // `parentSnapShotBlock` is the block number from the Parent Token that was\\n  //  used to determine the initial distribution of the Clone Token\\n  uint public parentSnapShotBlock;\\n\\n  // `creationBlock` is the block number that the Clone Token was created\\n  uint public creationBlock;\\n\\n  // `balances` is the map that tracks the balance of each address, in this\\n  //  contract when the balance changes the block number that the change\\n  //  occurred is also included in the map\\n  mapping (address => Checkpoint[]) balances;\\n\\n  // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n  mapping (address => mapping (address => uint256)) allowed;\\n\\n  // Tracks the history of the `totalSupply` of the token\\n  Checkpoint[] totalSupplyHistory;\\n\\n  // Flag that determines if the token is transferable or not.\\n  bool public transfersEnabled;\\n\\n  // The factory used to create new clone tokens\\n  AutoIncrementCoinageSnapshotFactory public tokenFactory;\\n\\n  Checkpoint[] factorHistory;\\n\\n  uint256 public factorIncrement;\\n\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n  /// @notice Constructor to create a AutoIncrementCoinageSnapshot\\n  /// @param _tokenFactory The address of the AutoIncrementCoinageSnapshotFactory contract that\\n  ///  will create the Clone token contracts, the token factory needs to be\\n  ///  deployed first\\n  /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n  ///  new token\\n  /// @param _parentSnapShotBlock Block of the parent token that will\\n  ///  determine the initial distribution of the clone token, set to 0 if it\\n  ///  is a new token\\n  /// @param _tokenName Name of the new token\\n  /// @param _tokenSymbol Token Symbol for the new token\\n  /// @param _transfersEnabled If true, tokens will be able to be transferred\\n  constructor (\\n    address payable _tokenFactory,\\n    address payable _parentToken,\\n    uint _parentSnapShotBlock,\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint _factor,\\n    uint _factorIncrement,\\n    bool _transfersEnabled\\n  ) public {\\n    tokenFactory = AutoIncrementCoinageSnapshotFactory(_tokenFactory);\\n    name = _tokenName;                  // Set the name\\n    symbol = _tokenSymbol;              // Set the symbol\\n    parentToken = AutoIncrementCoinageSnapshot(_parentToken);\\n    parentSnapShotBlock = _parentSnapShotBlock;\\n    factorIncrement = _factorIncrement;\\n    transfersEnabled = _transfersEnabled;\\n    creationBlock = block.number;\\n\\n    uint factor = _factor;\\n\\n    if (isContract(address(parentToken))) {\\n      factor = parentToken.factorAt(parentSnapShotBlock);\\n    }\\n\\n    factorHistory.push(Checkpoint({\\n      fromBlock: uint128(block.number),\\n      value: uint128(factor == 0 ? defaultFactor : factor)\\n    }));\\n  }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n  /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n  /// @param _to The address of the recipient\\n  /// @param _amount The amount of tokens to be transferred\\n  /// @return Whether the transfer was successful or not\\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\\n    require(transfersEnabled);\\n    doTransfer(msg.sender, _to, _amount);\\n    return true;\\n  }\\n\\n  /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n  ///  is approved by `_from`\\n  /// @param _from The address holding the tokens being transferred\\n  /// @param _to The address of the recipient\\n  /// @param _amount The amount of tokens to be transferred\\n  /// @return True if the transfer was successful\\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n    // The controller of this contract can move tokens around at will,\\n    //  this is important to recognize! Confirm that you trust the\\n    //  controller of this contract, which in most situations should be\\n    //  another open source smart contract or 0x0\\n    if (msg.sender != controller) {\\n      require(transfersEnabled);\\n\\n      // The standard ERC 20 transferFrom functionality\\n      require(allowed[_from][msg.sender] >= _amount, \\\"AutoIncrementCoinageSnapshot: transfer amount exceeds allowance\\\");\\n      allowed[_from][msg.sender] -= _amount;\\n      emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\\n    }\\n    doTransfer(_from, _to, _amount);\\n    return true;\\n  }\\n\\n  /// @dev This is the actual transfer function in the token contract, it can\\n  ///  only be called by other functions in this contract.\\n  /// @param _from The address holding the tokens being transferred\\n  /// @param _to The address of the recipient\\n  /// @param _amount The amount of tokens in WAD FACTORED to be transferred\\n  /// @return True if the transfer was successful\\n  function doTransfer(address _from, address _to, uint _amount) internal increaseFactor {\\n\\n       if (_amount == 0) {\\n         emit Transfer(_from, _to, _amount);  // Follow the spec to louch the event when transfer 0\\n         return;\\n       }\\n\\n       require(parentSnapShotBlock < block.number, \\\"T?\\\");\\n\\n       // Do not allow transfer to 0x0 or the token contract itself\\n       require(_to != address(0), \\\"AutoIncrementCoinageSnapshot: transfer to the zero address\\\");\\n       require(_to != address(this), \\\"AutoIncrementCoinageSnapshot: transfer to the token\\\");\\n\\n       // If the amount being transfered is more than the balance of the\\n       //  account the transfer throws\\n       uint previousBalanceFrom = basedBalanceOfAt(_from, block.number);\\n       uint wbAmount = _toWADBased(_amount, block.number);\\n\\n       require(previousBalanceFrom >= wbAmount, \\\"AutoIncrementCoinageSnapshot: transfer amount exceeds balance\\\");\\n       // Alerts the token controller of the transfer\\n       if (isContract(controller)) {\\n         require(TokenController(controller).onTransfer(_from, _to, _toWADFactored(wbAmount, block.number)));\\n       }\\n\\n       // First update the balance array with the new value for the address\\n       //  sending the tokens\\n       updateValueAtNow(balances[_from], previousBalanceFrom - wbAmount);\\n\\n       // Then update the balance array with the new value for the address\\n       //  receiving the tokens\\n       uint previousBalanceTo = basedBalanceOfAt(_to, block.number);\\n       require(uint128(previousBalanceTo + wbAmount) >= previousBalanceTo); // Check for overflow\\n       updateValueAtNow(balances[_to], previousBalanceTo + wbAmount);\\n\\n       // An event to make the transfer easy to find on the blockchain\\n       emit Transfer(_from, _to, _toWADFactored(wbAmount, block.number));\\n\\n  }\\n\\n  /// @param _owner The address that's balance is being requested\\n  /// @return The balance of `_owner` at the current block\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    return balanceOfAt(_owner, block.number);\\n  }\\n\\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n  ///  its behalf. This is a modified version of the ERC20 approve function\\n  ///  to be a little bit safer\\n  /// @param _spender The address of the account able to transfer the tokens\\n  /// @param _amount The amount of tokens to be approved for transfer\\n  /// @return True if the approval was successful\\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\\n    require(transfersEnabled);\\n\\n    // To change the approve amount you first have to reduce the addresses`\\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\\n    //  already 0 to mitigate the race condition described here:\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0), \\\"AutoIncrementCoinageSnapshot: invalid approve amount\\\");\\n\\n    // Alerts the token controller of the approve function call\\n    if (isContract(controller)) {\\n      require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n    }\\n\\n    allowed[msg.sender][_spender] = _amount;\\n    emit Approval(msg.sender, _spender, _amount);\\n    return true;\\n  }\\n\\n  /// @dev This function makes it easy to read the `allowed[]` map\\n  /// @param _owner The address of the account that owns the token\\n  /// @param _spender The address of the account able to transfer the tokens\\n  /// @return Amount of remaining tokens of _owner that _spender is allowed\\n  ///  to spend\\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n  ///  its behalf, and then a function is triggered in the contract that is\\n  ///  being approved, `_spender`. This allows users to use their tokens to\\n  ///  interact with contracts in one function call instead of two\\n  /// @param _spender The address of the contract able to transfer the tokens\\n  /// @param _amount The amount of tokens to be approved for transfer\\n  /// @return True if the function call was successful\\n  function approveAndCall(address _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {\\n    require(approve(_spender, _amount));\\n\\n    ApproveAndCallFallBack(_spender).receiveApproval(\\n      msg.sender,\\n      _amount,\\n      address(this),\\n      _extraData\\n    );\\n\\n    return true;\\n  }\\n\\n  /// @dev This function makes it easy to get the total number of tokens\\n  /// @return The total number of tokens\\n  function totalSupply() public view returns (uint) {\\n    return totalSupplyAt(block.number);\\n  }\\n\\n  /// @dev This function makes it easy to get factor\\n  /// @return The factor\\n  function factor() public view returns (uint) {\\n    return factorAt(block.number);\\n  }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n  /// @param _owner The address from which the balance will be retrieved\\n  /// @param _blockNumber The block number when the balance is queried\\n  /// @return The balance at `_blockNumber` in WAS FACTORED\\n  function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\\n    return _applyFactorAt(basedBalanceOfAt(_owner, _blockNumber), _blockNumber);\\n  }\\n\\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber` in WAD BASED\\n  /// @param _owner The address from which the balance will be retrieved\\n  /// @param _blockNumber The block number when the balance is queried\\n  /// @return The balance at `_blockNumber` in WAD BASED\\n  function basedBalanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\\n    // These next few lines are used when the balance of the token is\\n    //  requested before a check point was ever created for this token, it\\n    //  requires that the `parentToken.balanceOfAt` be queried at the\\n    //  genesis block for that token as this contains initial balance of\\n    //  this token\\n    if ((balances[_owner].length == 0)\\n      || (balances[_owner][0].fromBlock > _blockNumber)) {\\n      if (address(parentToken) != address(0)) {\\n        uint bn = min(_blockNumber, parentSnapShotBlock);\\n        return _toWADBased(parentToken.balanceOfAt(_owner, bn), bn);\\n      } else {\\n        // Has no parent\\n        return 0;\\n      }\\n\\n    // This will return the expected balance during normal situations\\n    } else {\\n      return getValueAt(balances[_owner], _blockNumber);\\n    }\\n  }\\n\\n  /// @notice Total amount of tokens at a specific `_blockNumber`.\\n  /// @param _blockNumber The block number when the totalSupply is queried\\n  /// @return The total amount of tokens at `_blockNumber` in WAS FACTORED\\n  function totalSupplyAt(uint _blockNumber) public view returns (uint) {\\n    return _applyFactorAt(basedTotalSupplyAt(_blockNumber), _blockNumber);\\n  }\\n\\n  /// @notice Total amount of tokens at a specific `_blockNumber`.\\n  /// @param _blockNumber The block number when the totalSupply is queried\\n  /// @return The total amount of tokens at `_blockNumber` in WAS BASED\\n  function basedTotalSupplyAt(uint _blockNumber) public view returns (uint) {\\n\\n    // These next few lines are used when the totalSupply of the token is\\n    //  requested before a check point was ever created for this token, it\\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\\n    //  genesis block for this token as that contains totalSupply of this\\n    //  token at this block number.\\n    if ((totalSupplyHistory.length == 0)\\n      || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n      if (address(parentToken) != address(0)) {\\n        uint bn = min(_blockNumber, parentSnapShotBlock);\\n        return _toWADBased(parentToken.totalSupplyAt(bn), bn);\\n      } else {\\n        return 0;\\n      }\\n\\n    // This will return the expected totalSupply during normal situations\\n    } else {\\n      return getValueAt(totalSupplyHistory, _blockNumber);\\n    }\\n  }\\n\\n  /// @notice Factor at a specific `_blockNumber`.\\n  /// @param _blockNumber The block number when the factor is queried\\n  /// @return The factor value at `_blockNumber`\\n  function factorAt(uint _blockNumber) public view returns(uint) {\\n\\n    if (factorHistory[0].fromBlock > _blockNumber) {\\n      return wdiv(\\n        factorHistory[0].value,\\n        wpow(factorIncrement, uint256(factorHistory[0].fromBlock - _blockNumber))\\n      );\\n\\n    // This will return the expected totalSupply during normal situations\\n    } else {\\n      (uint f, uint b) = getValueAtWithBlcokNumber(factorHistory, _blockNumber);\\n      return wmul(f, wpow(factorIncrement, sub(_blockNumber, b)));\\n    }\\n  }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    function createCloneToken(\\n      string memory _cloneTokenName,\\n      string memory _cloneTokenSymbol,\\n      uint _factor,\\n      uint _factorIncrement,\\n      uint _snapshotBlock,\\n      bool _transfersEnabled\\n    ) public returns(address) {\\n      if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n\\n      AutoIncrementCoinageSnapshot cloneToken = tokenFactory.createCloneToken(\\n        address(uint160(address(this))),\\n        _snapshotBlock,\\n        _cloneTokenName,\\n        _cloneTokenSymbol,\\n        _factor,\\n        _factorIncrement,\\n        _transfersEnabled\\n      );\\n\\n      cloneToken.changeController(msg.sender);\\n\\n      // An event to make the token easy to find on the blockchain\\n      emit NewCloneToken(address(cloneToken), _snapshotBlock);\\n      return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n  /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n  /// @param _owner The address that will be assigned the new tokens\\n  /// @param _amount The quantity of tokens generated\\n  /// @return True if the tokens are generated correctly\\n  function generateTokens(address _owner, uint _amount)\\n    public\\n    onlyController\\n    increaseFactor\\n    returns (bool)\\n  {\\n    uint wbAmount = _toWADBased(_amount, block.number);\\n    uint curTotalSupply = basedTotalSupplyAt(block.number);\\n    require(uint128(curTotalSupply + wbAmount) >= curTotalSupply); // Check for overflow\\n    uint previousBalanceTo = basedBalanceOfAt(_owner, block.number);\\n    require(uint128(previousBalanceTo + wbAmount) >= previousBalanceTo); // Check for overflow\\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + wbAmount);\\n    updateValueAtNow(balances[_owner], previousBalanceTo + wbAmount);\\n    emit Transfer(address(0), _owner, _toWADFactored(wbAmount, block.number));\\n    return true;\\n  }\\n\\n\\n  /// @notice Burns `_amount` tokens from `_owner`\\n  /// @param _owner The address that will lose the tokens\\n  /// @param _amount The quantity of tokens to burn\\n  /// @return True if the tokens are burned correctly\\n  function destroyTokens(address _owner, uint _amount)\\n    onlyController\\n    increaseFactor\\n    public\\n    returns (bool)\\n  {\\n    uint wbAmount = _toWADBased(_amount, block.number);\\n    uint curTotalSupply = basedTotalSupplyAt(block.number);\\n    require(curTotalSupply >= wbAmount);\\n    uint previousBalanceFrom = basedBalanceOfAt(_owner, block.number);\\n    require(previousBalanceFrom >= wbAmount);\\n    updateValueAtNow(totalSupplyHistory, curTotalSupply - wbAmount);\\n    updateValueAtNow(balances[_owner], previousBalanceFrom - wbAmount);\\n    emit Transfer(_owner, address(0), _toWADFactored(wbAmount, block.number));\\n    return true;\\n  }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n  /// @notice Enables token holders to transfer their tokens freely if true\\n  /// @param _transfersEnabled True if transfers are allowed in the clone\\n  function enableTransfers(bool _transfersEnabled) public onlyController {\\n    transfersEnabled = _transfersEnabled;\\n  }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n  /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n  /// @param checkpoints The history of values being queried\\n  /// @param _block The block number to retrieve the value at\\n  /// @return The number of tokens being queried\\n  function getValueAt(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint) {\\n    (uint v, uint _) = getValueAtWithBlcokNumber(checkpoints, _block);\\n    return v;\\n  }\\n\\n  /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n  /// @param checkpoints The history of values being queried\\n  /// @param _block The block number to retrieve the value at\\n  /// @return The number of tokens being queried\\n  function getValueAtWithBlcokNumber(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint, uint) {\\n    if (checkpoints.length == 0) return (0, 0);\\n\\n    // Shortcut for the actual value\\n    if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n      return (checkpoints[checkpoints.length-1].value, checkpoints[checkpoints.length-1].fromBlock);\\n    if (_block < checkpoints[0].fromBlock) return (0, checkpoints[0].fromBlock);\\n\\n    // Binary search of the value in the array\\n    uint min = 0;\\n    uint max = checkpoints.length-1;\\n    while (max > min) {\\n      uint mid = (max + min + 1)/ 2;\\n      if (checkpoints[mid].fromBlock<=_block) {\\n        min = mid;\\n      } else {\\n        max = mid-1;\\n      }\\n    }\\n    return (checkpoints[min].value, checkpoints[min].fromBlock);\\n  }\\n\\n  /// @dev `updateValueAtNow` used to update the `balances` map and the\\n  ///  `totalSupplyHistory`\\n  /// @param checkpoints The history of data being updated\\n  /// @param _value The new number of tokens\\n  function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal  {\\n    require(_value == uint(uint128(_value)));\\n    if ((checkpoints.length == 0)\\n    || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n         Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n         newCheckPoint.fromBlock =  uint128(block.number);\\n         newCheckPoint.value = uint128(_value);\\n       } else {\\n         Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n         oldCheckPoint.value = uint128(_value);\\n       }\\n  }\\n\\n  /// @dev Internal function to determine if an address is a contract\\n  /// @param _addr The address being queried\\n  /// @return True if `_addr` is a contract\\n  function isContract(address _addr) view internal returns(bool) {\\n    uint size;\\n    if (_addr == address(0)) return false;\\n    assembly {\\n      size := extcodesize(_addr)\\n    }\\n    return size>0;\\n  }\\n\\n  /// @dev Helper function to return a min betwen the two uints\\n  function min(uint a, uint b) pure internal returns (uint) {\\n    return a < b ? a : b;\\n  }\\n\\n  /// @notice The fallback function: If the contract's controller has not been\\n  ///  set to 0, then the `proxyPayment` method is called which relays the\\n  ///  ether and creates tokens as described in the token controller contract\\n  function () external payable {\\n    require(isContract(controller));\\n    require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n  }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n  /// @notice This method can be used by the controller to extract mistakenly\\n  ///  sent tokens to this contract.\\n  /// @param _token The address of the token contract that you want to recover\\n  ///  set to 0 in case you want to extract ether.\\n  function claimTokens(address payable _token) public onlyController {\\n    if (_token == address(0)) {\\n      controller.transfer(address(this).balance);\\n      return;\\n    }\\n\\n    AutoIncrementCoinageSnapshot token = AutoIncrementCoinageSnapshot(_token);\\n    uint balance = token.balanceOf(address(this));\\n    token.transfer(controller, balance);\\n    emit ClaimedTokens(_token, controller, balance);\\n  }\\n\\n////////////////\\n// Internal helper functions for factor computation\\n////////////////\\n  /**\\n   * @dev Calculate WAD BASED from WAD FACTORED\\n   */\\n  function _toWADBased(uint256 wf, uint256 blockNumber) internal view returns (uint256 wb) {\\n    return wdiv(wf, factorAt(blockNumber));\\n  }\\n\\n  /**\\n   * @dev Calculate WAD FACTORED from WAD BASED\\n   */\\n  function _toWADFactored(uint256 wb, uint256 blockNumber) internal view returns (uint256 wf) {\\n    return wmul(wb, factorAt(blockNumber));\\n  }\\n\\n  /**\\n   * @param v the value to be factored\\n   */\\n  function _applyFactor(uint256 v) internal view returns (uint256) {\\n    return _applyFactorAt(v, block.number);\\n  }\\n\\n  /**\\n   * @dev apply factor to {v} at a specific block\\n   */\\n  function _applyFactorAt(uint256 v, uint256 blockNumber) internal view returns (uint256) {\\n    return wmul(v, factorAt(blockNumber));\\n  }\\n\\n////////////////\\n// Modifiers\\n////////////////\\n  modifier increaseFactor() {\\n    Checkpoint storage fh = factorHistory[factorHistory.length - 1];\\n    uint256 f = fh.value;\\n    uint256 n = block.number - fh.fromBlock;\\n\\n    if (n > 0) {\\n      f = wmul(f, wpow(factorIncrement, n));\\n\\n      updateValueAtNow(factorHistory, f);\\n\\n      emit FactorIncreased(f);\\n    }\\n\\n    _;\\n  }\\n\\n////////////////\\n// Events\\n////////////////\\n  event ClaimedTokens(address indexed token, address indexed controller, uint value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event NewCloneToken(address indexed cloneToken, uint snapshotBlock);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  event FactorIncreased(uint256 factor);\\n}\\n\\n\\n////////////////\\n// AutoIncrementCoinageSnapshotFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract AutoIncrementCoinageSnapshotFactory {\\n\\n  /// @notice Update the DApp by creating a new token with new functionalities\\n  ///  the msg.sender becomes the controller of this clone token\\n  /// @param _parentToken Address of the token being cloned\\n  /// @param _snapshotBlock Block of the parent token that will\\n  ///  determine the initial distribution of the clone token\\n  /// @param _tokenName Name of the new token\\n  /// @param _tokenSymbol Token Symbol for the new token\\n  /// @param _transfersEnabled If true, tokens will be able to be transferred\\n  /// @return The address of the new token contract\\n  function createCloneToken(\\n    address payable _parentToken,\\n    uint _snapshotBlock,\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint _factor,\\n    uint _factorIncrement,\\n    bool _transfersEnabled\\n  ) public returns (AutoIncrementCoinageSnapshot) {\\n    AutoIncrementCoinageSnapshot newToken = new AutoIncrementCoinageSnapshot(\\n      address(uint160(address(this))),\\n      _parentToken,\\n      _snapshotBlock,\\n      _tokenName,\\n      _tokenSymbol,\\n      _factor,\\n      _factorIncrement,\\n      _transfersEnabled\\n      );\\n\\n    newToken.changeController(msg.sender);\\n    return newToken;\\n  }\\n}\\n\\n// File: contracts/CustomIncrementCoinage.sol\\n\\npragma solidity ^0.5.12;\\n\\n\\n\\n/**\\n * @dev FixedIncrementCoinage increases balance and total supply by fixed amount per block.\\n */\\ncontract CustomIncrementCoinage is AutoIncrementCoinage {\\n  event FactorSet(uint256 previous, uint256 current);\\n\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    uint256 factor,\\n    bool transfersEnabled\\n  )\\n    public\\n    AutoIncrementCoinage(name, symbol, factor, 0, transfersEnabled)\\n  {}\\n\\n  /**\\n   * @dev set new factor for all users.\\n   */\\n  function setFactor(uint256 factor) external onlyOwner returns (bool) {\\n    uint256 previous = _factor;\\n    _factor = factor;\\n    emit FactorSet(previous, factor);\\n  }\\n\\n////////////////////\\n// Getters\\n////////////////////\\n  function factor() public view returns (uint256) {\\n    return _factor;\\n  }\\n\\n////////////////////\\n// Helpers\\n////////////////////\\n  function _calculateFactor(uint256 n) internal view returns (uint256) {\\n    return _factor;\\n  }\\n}\\n\\n// File: contracts/FixedIncrementCoinage.sol\\n\\npragma solidity ^0.5.12;\\n\\n\\n\\n/**\\n * @dev FixedIncrementCoinage increases balance and total supply by fixed amount per block.\\n */\\ncontract FixedIncrementCoinage is AutoIncrementCoinage {\\n  uint256 internal _seigPerBlock;\\n\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    uint256 factor,\\n    uint256 seigPerBlock,\\n    bool transfersEnabled\\n  )\\n    public\\n    AutoIncrementCoinage(name, symbol, factor, 0, transfersEnabled)\\n  {\\n    require(seigPerBlock != 0, \\\"FixedIncrementCoinage: seignorage must not be zero\\\");\\n    _seigPerBlock = seigPerBlock;\\n  }\\n\\n////////////////////\\n// Getters\\n////////////////////\\n\\n  function seigPerBlock() public view returns (uint256) {\\n    return _seigPerBlock;\\n  }\\n\\n////////////////////\\n// Helpers\\n////////////////////\\n\\n  /**\\n   * @dev Returns new factor for fixed increment per block.\\n   */\\n  function _calculateFactor(uint256 n) internal view returns (uint256) {\\n    if (_totalSupply == 0) return _factor;\\n\\n    uint256 prevTotalSupply = rmul(_totalSupply, _factor);\\n    uint256 nextTotalSupply = add(prevTotalSupply, mul(_seigPerBlock, n));\\n\\n    return rdiv(rmul(_factor, nextTotalSupply), prevTotalSupply);\\n  }\\n}\\n\\n// File: contracts/lib/minime/MiniMeToken.sol\\n\\npragma solidity ^0.5.12;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\n\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'C_MMT_0.1'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    constructor (\\n        address payable _tokenFactory,\\n        address payable _parentToken,\\n        uint _parentSnapShotBlock,\\n        string memory _tokenName,\\n        uint8 _decimalUnits,\\n        string memory _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        doTransfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            require(allowed[_from][msg.sender] >= _amount);\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        doTransfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal {\\n\\n           if (_amount == 0) {\\n               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\\n               return;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != address(0)) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer throws\\n           uint previousBalanceFrom = balanceOfAt(_from, block.number);\\n\\n           require(previousBalanceFrom >= _amount);\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           uint previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(uint128(previousBalanceTo + _amount) >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           emit Transfer(_from, _to, _amount);\\n\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public view returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes memory _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            address(this),\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public view returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public view\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != address(0)) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != address(0)) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string memory _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string memory _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            address(uint160(address(this))),\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        emit NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(uint128(curTotalSupply + _amount) >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(uint128(previousBalanceTo + _amount) >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        emit Transfer(address(0), _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        emit Transfer(_owner, address(0), _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) view internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        require(_value == uint(uint128(_value)));\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) view internal returns(bool) {\\n        uint size;\\n        if (_addr == address(0)) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address payable _token) public onlyController {\\n        if (_token == address(0)) {\\n            controller.transfer(address(this).balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(address(this));\\n        token.transfer(controller, balance);\\n        emit ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address payable _parentToken,\\n        uint _snapshotBlock,\\n        string memory _tokenName,\\n        uint8 _decimalUnits,\\n        string memory _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            address(uint160(address(this))),\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.5.0;\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/access/Roles.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\npragma solidity ^0.5.0;\\n\\n\\n\\ncontract MinterRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor () internal {\\n        _addMinter(_msgSender());\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"MinterRole: caller does not have the Minter role\\\");\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(_msgSender());\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\\n\\npragma solidity ^0.5.0;\\n\\n\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20, MinterRole {\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the {MinterRole}.\\n     */\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\npragma solidity ^0.5.0;\\n\\n\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\\n// File: contracts/mock/AutoIncrementCoinageMock.sol\\n\\npragma solidity ^0.5.12;\\n\\n\\n\\n\\ncontract AutoIncrementCoinageMock is ERC20Mintable, ERC20Burnable, AutoIncrementCoinage {\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    uint256 factor,\\n    uint256 factorIncrement,\\n    bool transfersEnabled\\n  )\\n    public\\n    AutoIncrementCoinage(name, symbol, factor, factorIncrement, transfersEnabled)\\n  {}\\n}\\n\\n// File: contracts/mock/CustomIncrementCoinageMock.sol\\n\\npragma solidity ^0.5.12;\\n\\n\\n\\n\\ncontract CustomIncrementCoinageMock is ERC20Mintable, ERC20Burnable, CustomIncrementCoinage {\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    uint256 factor,\\n    bool transfersEnabled\\n  )\\n    public\\n    CustomIncrementCoinage(name, symbol, factor, transfersEnabled)\\n  {}\\n}\\n\\n// File: contracts/mock/FixedIncrementCoinageMock.sol\\n\\npragma solidity ^0.5.12;\\n\\n\\n\\n\\ncontract FixedIncrementCoinageMock is ERC20Mintable, ERC20Burnable, FixedIncrementCoinage {\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    uint256 factor,\\n    uint256 seigPerBlock,\\n    bool transfersEnabled\\n  )\\n    public\\n    FixedIncrementCoinage(name, symbol, factor, seigPerBlock, transfersEnabled)\\n  {}\\n}\\n\\n// File: contracts/DelegateProxy.sol\\n\\n// source code from https://github.com/aragon/aragonOS/blob/next/contracts\\npragma solidity ^0.5.12;\\n\\n// https://github.com/aragon/aragonOS/blob/07d309f5e81c768269dfc49373d41fac4528ebd2/contracts/common/IsContract.sol\\ncontract IsContract {\\n  /*\\n  * NOTE: this should NEVER be used for authentication\\n  * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n  *\\n  * This is only intended to be used as a sanity check that an address is actually a contract,\\n  * RATHER THAN an address not being a contract.\\n  */\\n  function isContract(address _target) internal view returns (bool) {\\n    if (_target == address(0)) {\\n      return false;\\n    }\\n\\n    uint256 size;\\n    assembly { size := extcodesize(_target) }\\n    return size > 0;\\n  }\\n}\\n\\n\\n// https://github.com/aragon/aragonOS/blob/07d309f5e81c768269dfc49373d41fac4528ebd2/contracts/lib/misc/ERCProxy.sol\\ncontract ERCProxy {\\n  uint256 internal constant FORWARDING = 1;\\n  uint256 internal constant UPGRADEABLE = 2;\\n\\n  function proxyType() public pure returns (uint256 proxyTypeId);\\n  function implementation() public view returns (address codeAddr);\\n}\\n\\n\\n// https://github.com/aragon/aragonOS/blob/07d309f5e81c768269dfc49373d41fac4528ebd2/contracts/common/DelegateProxy.sol\\ncontract DelegateProxy is ERCProxy, IsContract {\\n  uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n  /**\\n   * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire  context execution will return!)\\n   * @param _dst Destination address to perform the delegatecall\\n   * @param _calldata Calldata for the delegatecall\\n   */\\n  function delegatedFwd(address _dst, bytes memory _calldata) internal {\\n    require(isContract(_dst));\\n    uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n    assembly {\\n      let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n      let size := returndatasize\\n      let ptr := mload(0x40)\\n      returndatacopy(ptr, 0, size)\\n\\n      // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n      // if the call returned error data, forward it\\n      switch result case 0 { revert(ptr, size) }\\n      default { return(ptr, size) }\\n    }\\n  }\\n}\\n\\n// File: contracts/Migrations.sol\\n\\npragma solidity >=0.4.21 <0.7.0;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint public last_completed_migration;\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n\\n  function upgrade(address new_address) public restricted {\\n    Migrations upgraded = Migrations(new_address);\\n    upgraded.setCompleted(last_completed_migration);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/coinage-token/contracts/lib/DSMath.sol\": {\r\n      \"content\": \"// https://github.com/dapphub/ds-math/blob/de45767/src/math.sol\\r\\n/// math.sol -- mixin for inline numerical wizardry\\r\\n\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >0.4.13;\\r\\n\\r\\ncontract DSMath {\\r\\n  function add(uint x, uint y) internal pure returns (uint z) {\\r\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n  }\\r\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n  }\\r\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n  }\\r\\n\\r\\n  function min(uint x, uint y) internal pure returns (uint z) {\\r\\n    return x <= y ? x : y;\\r\\n  }\\r\\n  function max(uint x, uint y) internal pure returns (uint z) {\\r\\n    return x >= y ? x : y;\\r\\n  }\\r\\n  function imin(int x, int y) internal pure returns (int z) {\\r\\n    return x <= y ? x : y;\\r\\n  }\\r\\n  function imax(int x, int y) internal pure returns (int z) {\\r\\n    return x >= y ? x : y;\\r\\n  }\\r\\n\\r\\n  uint constant WAD = 10 ** 18;\\r\\n  uint constant RAY = 10 ** 27;\\r\\n\\r\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, y), WAD / 2) / WAD;\\r\\n  }\\r\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, y), RAY / 2) / RAY;\\r\\n  }\\r\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, WAD), y / 2) / y;\\r\\n  }\\r\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\r\\n    z = add(mul(x, RAY), y / 2) / y;\\r\\n  }\\r\\n\\r\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\r\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\r\\n  //\\r\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\r\\n  //\\r\\n  // These facts are why it works:\\r\\n  //\\r\\n  //  If n is even, then x^n = (x^2)^(n/2).\\r\\n  //  If n is odd,  then x^n = x * x^(n-1),\\r\\n  //   and applying the equation for even x gives\\r\\n  //  x^n = x * (x^2)^((n-1) / 2).\\r\\n  //\\r\\n  //  Also, EVM division is flooring and\\r\\n  //  floor[(n-1) / 2] = floor[n / 2].\\r\\n  //\\r\\n  function wpow(uint x, uint n) internal pure returns (uint z) {\\r\\n    z = n % 2 != 0 ? x : WAD;\\r\\n\\r\\n    for (n /= 2; n != 0; n /= 2) {\\r\\n      x = wmul(x, x);\\r\\n\\r\\n      if (n % 2 != 0) {\\r\\n        z = wmul(z, x);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function rpow(uint x, uint n) internal pure returns (uint z) {\\r\\n    z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n    for (n /= 2; n != 0; n /= 2) {\\r\\n      x = rmul(x, x);\\r\\n\\r\\n      if (n % 2 != 0) {\\r\\n        z = rmul(z, x);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20, MinterRole {\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the {MinterRole}.\\n     */\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport \\\"node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context, PauserRole {\\n    /**\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"node_modules/openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"SeigManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.12;\\n\\nimport { Ownable } from \\\"node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport { Pausable } from \\\"node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\\";\\nimport { SafeMath } from \\\"node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { ERC20Mintable } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\\\";\\nimport { IERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { DSMath } from \\\"node_modules/coinage-token/contracts/lib/DSMath.sol\\\";\\nimport { CustomIncrementCoinageMock } from \\\"node_modules/coinage-token/flatten.sol\\\";\\n\\nimport { AuthController } from \\\"stake/tokens/AuthController.sol\\\";\\n\\nimport { RootChainI } from \\\"RootChainI.sol\\\";\\n\\nimport { SeigManagerI } from \\\"stake/interfaces/SeigManagerI.sol\\\";\\nimport { RootChainRegistryI } from \\\"stake/interfaces/RootChainRegistryI.sol\\\";\\nimport { DepositManagerI } from \\\"stake/interfaces/DepositManagerI.sol\\\";\\nimport { PowerTONI } from \\\"stake/interfaces/PowerTONI.sol\\\";\\n\\n\\n\\n/**\\n * @dev SeigManager gives seigniorage to operator and WTON holders.\\n * For each commit by operator, operator (or user) will get seigniorage\\n * in propotion to the staked (or delegated) amount of WTON.\\n *\\n * [Tokens]\\n * - {tot} tracks total staked or delegated WTON of each RootChain contract (and depositor?).\\n * - {coinages[rootchain]} tracks staked or delegated WTON of user or operator to a RootChain contract.\\n *\\n * For each commit by operator,\\n *  1. increases all root chains' balance of {tot} by (the staked amount of WTON) /\\n *     (total supply of TON and WTON) * (num blocks * seigniorage per block).\\n *  2. increases all depositors' blanace of {coinages[rootchain]} in proportion to the staked amount of WTON,\\n *     up to the increased amount in step (1).\\n *  3. set the root chain's balance of {committed} as the root chain's {tot} balance.\\n *\\n * For each stake or delegate with amount of {v} to a RootChain,\\n *  1. mint {v} {coinages[rootchain]} tokens to the account\\n *  2. mint {v} {tot} tokens to the root chain contract\\n *\\n * For each unstake or undelegate (or get rewards) with amount of {v} to a RootChain,\\n *  1. burn {v} {coinages[rootchain]} tokens from the account\\n *  2. burn {v + ⍺} {tot} tokens from the root chain contract,\\n *   where ⍺ = SEIGS * staked ratio of the root chian * withdrawal ratio of the account\\n *     - SEIGS                              = tot total supply - tot total supply at last commit from the root chain\\n *     - staked ratio of the root chian     = tot balance of the root chain / tot total supply\\n *     - withdrawal ratio of the account  = amount to withdraw / total supply of coinage\\n *\\n */\\ncontract SeigManager is SeigManagerI, DSMath, Ownable, Pausable, AuthController {\\n  using SafeMath for uint256;\\n  using SafeERC20 for ERC20Mintable;\\n\\n  //////////////////////////////\\n  // Common contracts\\n  //////////////////////////////\\n\\n  RootChainRegistryI internal _registry;\\n  DepositManagerI internal _depositManager;\\n  PowerTONI internal _powerton;\\n\\n  //////////////////////////////\\n  // Token-related\\n  //////////////////////////////\\n\\n  // TON token contract\\n  IERC20 internal _ton;\\n\\n  // WTON token contract\\n  ERC20Mintable internal _wton; // TODO: use mintable erc20!\\n\\n  // track total deposits of each root chain.\\n  CustomIncrementCoinageMock internal _tot;\\n\\n  // coinage token for each root chain.\\n  mapping (address => CustomIncrementCoinageMock) internal _coinages;\\n\\n  // commission rates in RAY\\n  mapping (address => uint256) internal _commissionRates;\\n\\n  // whether commission is negative or not (default=possitive)\\n  mapping (address => bool) internal _isCommissionRateNegative;\\n\\n  // last commit block number for each root chain.\\n  mapping (address => uint256) internal _lastCommitBlock;\\n\\n  // total seigniorage per block\\n  uint256 internal _seigPerBlock;\\n\\n  // the block number when seigniorages are given\\n  uint256 internal _lastSeigBlock;\\n\\n  // block number when paused or unpaused\\n  uint256 internal _pausedBlock;\\n  uint256 internal _unpausedBlock;\\n\\n  //////////////////////////////\\n  // Constants\\n  //////////////////////////////\\n\\n  uint256 constant internal _DEFAULT_FACTOR = 10 ** 27;\\n  uint256 constant public POWER_TON_NUMERATOR = 5;\\n  uint256 constant public POWER_TON_DENOMINATOR = 10;\\n\\n  uint256 constant public MAX_VALID_COMMISSION = 10 ** 27; // 1 RAY\\n  uint256 constant public MIN_VALID_COMMISSION = 10 ** 25; // 0.01 RAY\\n\\n  //////////////////////////////\\n  // Modifiers\\n  //////////////////////////////\\n\\n  modifier onlyRegistry() {\\n    require(msg.sender == address(_registry));\\n    _;\\n  }\\n\\n  modifier onlyRegistryOrOperator(address rootchain) {\\n    require(msg.sender == address(_registry) || msg.sender == RootChainI(rootchain).operator());\\n    _;\\n  }\\n\\n  modifier onlyDepositManager() {\\n    require(msg.sender == address(_depositManager));\\n    _;\\n  }\\n\\n  modifier onlyRootChain(address rootchain) {\\n    require(_registry.rootchains(rootchain));\\n    _;\\n  }\\n\\n  modifier checkCoinage(address rootchain) {\\n    require(address(_coinages[rootchain]) != address(0), \\\"SeigManager: coinage has not been deployed yet\\\");\\n    _;\\n  }\\n\\n  //////////////////////////////\\n  // Events\\n  //////////////////////////////\\n\\n  event CoinageCreated(address indexed rootchain, address coinage);\\n  event SeigGiven(address indexed rootchain, uint256 totalSeig, uint256 stakedSeig, uint256 unstakedSeig, uint256 powertonSeig);\\n  event Comitted(address indexed rootchain);\\n  event CommissionRateSet(address indexed rootchain, uint256 previousRate, uint256 newRate);\\n\\n  //////////////////////////////\\n  // Constuctor\\n  //////////////////////////////\\n\\n  constructor (\\n    ERC20Mintable ton,\\n    ERC20Mintable wton,\\n    RootChainRegistryI registry,\\n    DepositManagerI depositManager,\\n    uint256 seigPerBlock\\n  ) public {\\n    _ton = ton;\\n    _wton = wton;\\n    _registry = registry;\\n    _depositManager = depositManager;\\n    _seigPerBlock = seigPerBlock;\\n\\n    _tot = new CustomIncrementCoinageMock(\\n      \\\"\\\",\\n      \\\"\\\",\\n      _DEFAULT_FACTOR,\\n      false\\n    );\\n\\n    _lastSeigBlock = block.number;\\n  }\\n\\n  //////////////////////////////\\n  // Override Pausable\\n  //////////////////////////////\\n\\n  function pause() public onlyPauser whenNotPaused {\\n    _pausedBlock = block.number;\\n    super.pause();\\n  }\\n\\n  /**\\n   * @dev Called by a pauser to unpause, returns to normal state.\\n   */\\n  function unpause() public onlyPauser whenPaused {\\n    _unpausedBlock = block.number;\\n    super.unpause();\\n  }\\n\\n  //////////////////////////////\\n  // External functions\\n  //////////////////////////////\\n\\n  /**\\n   * @dev set PowerTON contract, only by owner.\\n   */\\n  function setPowerTON(PowerTONI powerton) external onlyOwner {\\n    _powerton = powerton;\\n  }\\n\\n\\n  /**\\n   * @dev deploy coinage token for the root chain.\\n   */\\n  function deployCoinage(address rootchain) external onlyRegistry returns (bool) {\\n    // short circuit if already coinage is deployed\\n    if (address(_coinages[rootchain]) != address(0)) {\\n      return false;\\n    }\\n\\n    // create new coinage token for the root chain contract\\n    if (address(_coinages[rootchain]) == address(0)) {\\n      _coinages[rootchain] = new CustomIncrementCoinageMock(\\n        \\\"\\\",\\n        \\\"\\\",\\n        _DEFAULT_FACTOR,\\n        false\\n      );\\n      _lastCommitBlock[rootchain] = block.number;\\n      emit CoinageCreated(rootchain, address(_coinages[rootchain]));\\n    }\\n\\n    return true;\\n  }\\n\\n  function setCommissionRate(\\n    address rootchain,\\n    uint256 commissionRate,\\n    bool isCommissionRateNegative\\n  )\\n    external\\n    onlyRegistryOrOperator(rootchain)\\n    returns (bool)\\n  {\\n    // check commission range\\n    require(\\n      (commissionRate == 0) ||\\n      (MIN_VALID_COMMISSION <= commissionRate && commissionRate <= MAX_VALID_COMMISSION),\\n      \\\"SeigManager: commission rate must be 0 or between 1 RAY and 0.01 RAY\\\"\\n    );\\n\\n    uint256 previous = _commissionRates[rootchain];\\n    _commissionRates[rootchain] = commissionRate;\\n    _isCommissionRateNegative[rootchain] = isCommissionRateNegative;\\n\\n    emit CommissionRateSet(rootchain, previous, commissionRate);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Callback for a new commit\\n   */\\n  function onCommit()\\n    external\\n    checkCoinage(msg.sender)\\n    returns (bool)\\n  {\\n    // short circuit if paused\\n    if (paused()) {\\n      return true;\\n    }\\n\\n    _increaseTot();\\n\\n    _lastCommitBlock[msg.sender] = block.number;\\n\\n    // 2. increase total supply of {coinages[rootchain]}\\n    CustomIncrementCoinageMock coinage = _coinages[msg.sender];\\n\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(msg.sender);\\n\\n    // short circuit if there is no seigs for the root chain\\n    if (prevTotalSupply >= nextTotalSupply) {\\n      emit Comitted(msg.sender);\\n      return true;\\n    }\\n\\n    uint256 seigs = nextTotalSupply - prevTotalSupply;\\n    address operator = RootChainI(msg.sender).operator();\\n    uint256 operatorSeigs;\\n\\n    // calculate commission amount\\n    bool isCommissionRateNegative = _isCommissionRateNegative[msg.sender];\\n\\n    (nextTotalSupply, operatorSeigs) = _calcSeigsDistribution(\\n      coinage,\\n      prevTotalSupply,\\n      seigs,\\n      isCommissionRateNegative,\\n      operator\\n    );\\n\\n    // gives seigniorages to the root chain as coinage\\n    coinage.setFactor(\\n      _calcNewFactor(\\n        prevTotalSupply,\\n        nextTotalSupply,\\n        coinage.factor()\\n      )\\n    );\\n\\n    // give commission to operator or delegators\\n    if (operatorSeigs != 0) {\\n      if (isCommissionRateNegative) {\\n        // TODO: adjust arithmetic error\\n        // burn by 𝜸\\n        coinage.burnFrom(operator, operatorSeigs);\\n      } else {\\n        coinage.mint(operator, operatorSeigs);\\n      }\\n    }\\n\\n    _wton.mint(address(_depositManager), seigs);\\n\\n    emit Comitted(msg.sender);\\n\\n    return true;\\n  }\\n\\n  function _calcSeigsDistribution(\\n    CustomIncrementCoinageMock coinage,\\n    uint256 prevTotalSupply,\\n    uint256 seigs,\\n    bool isCommissionRateNegative,\\n    address operator\\n  ) internal returns (\\n    uint256 nextTotalSupply,\\n    uint256 operatorSeigs\\n  ) {\\n    uint256 commissionRate = _commissionRates[msg.sender];\\n\\n    nextTotalSupply = prevTotalSupply + seigs;\\n\\n    // short circuit if there is no commission rate\\n    if (commissionRate == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // if commission rate is possitive\\n    if (!isCommissionRateNegative) {\\n      operatorSeigs = rmul(seigs, commissionRate); // additional seig for operator\\n      nextTotalSupply = nextTotalSupply.sub(operatorSeigs);\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // short circuit if there is no previous total deposit (meanning, there is no deposit)\\n    if (prevTotalSupply == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    // See negative commission distribution formular here: TBD\\n    uint256 operatorBalance = coinage.balanceOf(operator);\\n\\n    // short circuit if there is no operator deposit\\n    if (operatorBalance == 0) {\\n      return (nextTotalSupply, operatorSeigs);\\n    }\\n\\n    uint256 operatorRate = rdiv(operatorBalance, prevTotalSupply);\\n\\n    // ɑ: insufficient seig for operator\\n    operatorSeigs = rmul(\\n      rmul(seigs, operatorRate), // seigs for operator\\n      commissionRate\\n    );\\n\\n    // β:\\n    uint256 delegatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : rdiv(operatorSeigs, RAY - operatorRate);\\n\\n    // 𝜸:\\n    operatorSeigs = operatorRate == RAY\\n      ? operatorSeigs\\n      : operatorSeigs + rmul(delegatorSeigs, operatorRate);\\n\\n    nextTotalSupply = nextTotalSupply.add(delegatorSeigs);\\n\\n    return (nextTotalSupply, operatorSeigs);\\n  }\\n\\n  /**\\n   * @dev Callback for a token transfer\\n   */\\n  function onTransfer(address sender, address recipient, uint256 amount) external returns (bool) {\\n    require(msg.sender == address(_ton) || msg.sender == address(_wton),\\n      \\\"SeigManager: only TON or WTON can call onTransfer\\\");\\n\\n    if (!paused()) {\\n      _increaseTot();\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Callback for a new deposit\\n   */\\n  function onDeposit(address rootchain, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(rootchain)\\n    returns (bool)\\n  {\\n    _tot.mint(rootchain, amount);\\n    _coinages[rootchain].mint(account, amount);\\n    if (address(_powerton) != address(0)) {\\n      _powerton.onDeposit(rootchain, account, amount);\\n    }\\n    return true;\\n  }\\n\\n  // DEV ONLY\\n  event UnstakeLog(uint coinageBurnAmount, uint totBurnAmount);\\n\\n  function onWithdraw(address rootchain, address account, uint256 amount)\\n    external\\n    onlyDepositManager\\n    checkCoinage(rootchain)\\n    returns (bool)\\n  {\\n    require(_coinages[rootchain].balanceOf(account) >= amount, \\\"SeigManager: insufficiant balance to unstake\\\");\\n\\n    // burn {v + ⍺} {tot} tokens to the root chain contract,\\n    uint256 totAmount = _additionalTotBurnAmount(rootchain, account, amount);\\n    _tot.burnFrom(rootchain, amount.add(totAmount));\\n\\n    // burn {v} {coinages[rootchain]} tokens to the account\\n    _coinages[rootchain].burnFrom(account, amount);\\n\\n    if (address(_powerton) != address(0)) {\\n      _powerton.onWithdraw(rootchain, account, amount);\\n    }\\n\\n    emit UnstakeLog(amount, totAmount);\\n\\n    return true;\\n  }\\n\\n  function additionalTotBurnAmount(address rootchain, address account, uint256 amount)\\n    external\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    return _additionalTotBurnAmount(rootchain, account, amount);\\n  }\\n\\n  // return ⍺, where ⍺ = (tot.balanceOf(rootchain) - coinages[rootchain].totalSupply()) * (amount / coinages[rootchain].totalSupply())\\n  function _additionalTotBurnAmount(address rootchain, address account, uint256 amount)\\n    internal\\n    view\\n    returns (uint256 totAmount)\\n  {\\n    uint256 coinageTotalSupply = _coinages[rootchain].totalSupply();\\n    uint256 totBalalnce = _tot.balanceOf(rootchain);\\n\\n    // NOTE: arithamtic operations (mul and div) make some errors, so we gonna adjust them under 1e-9 WTON.\\n    //       note that coinageTotalSupply and totBalalnce are RAY values.\\n    if (coinageTotalSupply > totBalalnce && coinageTotalSupply - totBalalnce < WAD) {\\n      return 0;\\n    }\\n\\n    return rdiv(\\n      rmul(\\n        totBalalnce.sub(coinageTotalSupply),\\n        amount\\n      ),\\n      coinageTotalSupply\\n    );\\n  }\\n\\n  //////////////////////////////\\n  // Public and internal functions\\n  //////////////////////////////\\n\\n  function uncomittedStakeOf(address rootchain, address account) external view returns (uint256) {\\n    CustomIncrementCoinageMock coinage = _coinages[rootchain];\\n\\n    uint256 prevFactor = coinage.factor();\\n    uint256 prevTotalSupply = coinage.totalSupply();\\n    uint256 nextTotalSupply = _tot.balanceOf(rootchain);\\n    uint256 newFactor = _calcNewFactor(prevTotalSupply, nextTotalSupply, prevFactor);\\n\\n    uint256 uncomittedBalance = rmul(\\n      rdiv(coinage.balanceOf(account), prevFactor),\\n      newFactor\\n    );\\n\\n    return uncomittedBalance\\n      .sub(_coinages[rootchain].balanceOf(account));\\n  }\\n\\n  function stakeOf(address rootchain, address account) external view returns (uint256) {\\n    return _coinages[rootchain].balanceOf(account);\\n  }\\n\\n  function _calcNewFactor(uint256 source, uint256 target, uint256 oldFactor) internal pure returns (uint256) {\\n    return rdiv(rmul(target, oldFactor), source);\\n  }\\n\\n  // DEV ONLY\\n  event CommitLog1(uint256 totalStakedAmount, uint256 totalSupplyOfWTON, uint256 prevTotalSupply, uint256 nextTotalSupply);\\n\\n  function _increaseTot() internal returns (bool) {\\n    // short circuit if already seigniorage is given.\\n    if (block.number == _lastSeigBlock) {\\n      return false;\\n    }\\n\\n    if (_tot.totalSupply() == 0) {\\n      _lastSeigBlock = block.number;\\n      return false;\\n    }\\n\\n    uint256 prevTotalSupply;\\n    uint256 nextTotalSupply;\\n\\n    // 1. increase total supply of {tot} by maximum seigniorages * staked rate\\n    //    staked rate = total staked amount / total supply of (W)TON\\n\\n    prevTotalSupply = _tot.totalSupply();\\n\\n    // maximum seigniorages\\n    uint256 maxSeig = _calcNumSeigBlocks().mul(_seigPerBlock);\\n\\n    // total supply of (W)TON\\n    uint256 tos = _ton.totalSupply()\\n      .sub(_ton.balanceOf(address(_wton)))\\n      .mul(10 ** 9)                                       // convert TON total supply into ray\\n      .add(_wton.totalSupply())                           // add WTON total supply\\n      .add(_tot.totalSupply()).sub(_wton.totalSupply());  // consider additional TOT balance as total supply\\n\\n    // maximum seigniorages * staked rate\\n    uint256 stakedSeig = rdiv(\\n      rmul(\\n        maxSeig,\\n        // total staked amount\\n        _tot.totalSupply()\\n      ),\\n      tos\\n    );\\n\\n    nextTotalSupply = prevTotalSupply.add(stakedSeig);\\n    _lastSeigBlock = block.number;\\n\\n    _tot.setFactor(_calcNewFactor(prevTotalSupply, nextTotalSupply, _tot.factor()));\\n\\n    // TODO: reduce computation\\n    // DEV ONLY\\n    emit CommitLog1(\\n      _tot.totalSupply(),\\n      tos,\\n      prevTotalSupply,\\n      nextTotalSupply\\n    );\\n\\n    uint256 unstakedSeig = maxSeig.sub(stakedSeig);\\n    uint256 powertonSeig;\\n\\n    if (address(_powerton) != address(0)) {\\n      // out of gas..?\\n      // powertonSeig = unstakedSeig.mul(POWER_TON_NUMERATOR).div(POWER_TON_DENOMINATOR);\\n      powertonSeig = unstakedSeig * POWER_TON_NUMERATOR / POWER_TON_DENOMINATOR;\\n\\n      _wton.mint(address(_powerton), powertonSeig);\\n    }\\n\\n    emit SeigGiven(msg.sender, maxSeig, stakedSeig, unstakedSeig, powertonSeig);\\n\\n    return true;\\n  }\\n\\n  function _calcNumSeigBlocks() internal returns (uint256) {\\n    require(!paused());\\n\\n    uint256 span = block.number - _lastSeigBlock;\\n    if (_unpausedBlock < _lastSeigBlock) {\\n      return span;\\n    }\\n\\n    return span - (_unpausedBlock - _pausedBlock);\\n  }\\n\\n  //////////////////////////////\\n  // Storage getters\\n  //////////////////////////////\\n\\n  // solium-disable\\n  function registry() external view returns (address) { return address(_registry); }\\n  function depositManager() external view returns (address) { return address(_depositManager); }\\n  function ton() external view returns (address) { return address(_ton); }\\n  function wton() external view returns (address) { return address(_wton); }\\n  function powerton() external view returns (address) { return address(_powerton); }\\n  function tot() external view returns (address) { return address(_tot); }\\n  function coinages(address rootchain) external view returns (address) { return address(_coinages[rootchain]); }\\n  function commissionRates(address rootchain) external view returns (uint256) { return _commissionRates[rootchain]; }\\n  function isCommissionRateNegative(address rootchain) external view returns (bool) { return _isCommissionRateNegative[rootchain]; }\\n\\n  function lastCommitBlock(address rootchain) external view returns (uint256) { return _lastCommitBlock[rootchain]; }\\n  function seigPerBlock() external view returns (uint256) { return _seigPerBlock; }\\n  function lastSeigBlock() external view returns (uint256) { return _lastSeigBlock; }\\n  function pausedBlock() external view returns (uint256) { return _pausedBlock; }\\n  function unpausedBlock() external view returns (uint256) { return _unpausedBlock; }\\n\\n  function DEFAULT_FACTOR() external view returns (uint256) { return _DEFAULT_FACTOR; }\\n  // solium-enable\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20Mintable\",\"name\":\"ton\",\"type\":\"address\"},{\"internalType\":\"contract ERC20Mintable\",\"name\":\"wton\",\"type\":\"address\"},{\"internalType\":\"contract RootChainRegistryI\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract DepositManagerI\",\"name\":\"depositManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seigPerBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinage\",\"type\":\"address\"}],\"name\":\"CoinageCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"Comitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupplyOfWTON\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotalSupply\",\"type\":\"uint256\"}],\"name\":\"CommitLog1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedSeig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powertonSeig\",\"type\":\"uint256\"}],\"name\":\"SeigGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinageBurnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totBurnAmount\",\"type\":\"uint256\"}],\"name\":\"UnstakeLog\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_VALID_COMMISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POWER_TON_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POWER_TON_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"additionalTotBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"coinages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"commissionRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"deployCoinage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"isCommissionRateNegative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"}],\"name\":\"lastCommitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSeigBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onCommit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seigPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCommissionRateNegative\",\"type\":\"bool\"}],\"name\":\"setCommissionRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract PowerTONI\",\"name\":\"powerton\",\"type\":\"address\"}],\"name\":\"setPowerTON\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootchain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"uncomittedStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unpausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SeigManager","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e3a87a9343d262f5f11280058ae807b45aa34669000000000000000000000000cdb18cd1f6763a93287d20598427a50d3ba9977f000000000000000000000000ee0af430528311d2b48880e9055fb9f26fd64022000000000000000000000000a8f67b988f3227158146da1c1c4854d2dccde67d000000000000000000000000000000000000000000664bc1f1dd4acc6c5ca000","EVMVersion":"istanbul","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://50d00b8977e838230804362b03ad66a8ac2d4f747d5fd9e9f0b95e932009fa84"}]}