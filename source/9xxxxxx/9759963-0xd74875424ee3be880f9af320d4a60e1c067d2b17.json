{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal pure  returns (uint) {\r\n    uint c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal  pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal  pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function transfer(address to, uint value) public;\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transferFrom(address from, address to, uint value) public;\r\n  function approve(address spender, uint value) public;\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint;\r\n\r\n  mapping(address => uint) balances;\r\n\r\n  function transfer(address _to, uint _value) public{\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public {\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public{\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0)) ;\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract Distribute {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    function tokenSendMultiple(address _tokenAddress, address payable[] memory _to, uint[] memory _value)  internal  {\r\n\r\n\t\trequire(_to.length == _value.length);\r\n\t\trequire(_to.length <= 255);\r\n\r\n        StandardToken token = StandardToken(_tokenAddress);\r\n        \r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\ttoken.transferFrom(msg.sender, _to[i], _value[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction ethSendMultiple(address payable[] memory _to, uint[] memory _value) internal {\r\n\r\n\t\tuint remainingValue = msg.value;\r\n\r\n\t\trequire(_to.length == _value.length);\r\n\t\trequire(_to.length <= 255);\r\n\r\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\r\n\t\t\tremainingValue = remainingValue.sub(_value[i]);\r\n\t\t\trequire(_to[i].send(_value[i]));\r\n\t\t}\r\n    }\r\n    \r\n    function distributeToken(address _tokenAddress, address payable[] memory _to, uint[] memory _value) payable public {\r\n\t    tokenSendMultiple(_tokenAddress, _to, _value);\r\n    }\r\n    \r\n    function distributeEther(address payable[] memory _to, uint[] memory _value) payable public {\r\n\t\t ethSendMultiple(_to,_value);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"distributeEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"distributeToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Distribute","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://85824002f55831d9576873105a622da2d517fb0b437035e0decb2974225f3151"}]}