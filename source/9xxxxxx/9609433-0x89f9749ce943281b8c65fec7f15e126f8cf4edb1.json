{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * Target smart contract.\r\n * For any suggestions please contact me at zhuangyuan20(at)outlook.com\r\n * This is a deposit game. You can deposit some money and then withdraw it, when you withdraw the money, you may not get the exact amount A of money you deposit, instead \r\n * you will get a random amount of money, which is within [0.9A, 1.1A].\r\n * Function DepositGame() is the constructor of this contract.\r\n * Function deposit() allows a player to deposit money by sending Ether to this contract.\r\n * Function GetBonusWithdraw() allows a player to withdraw all her rewards together with the 10 Ether bonus for each user.\r\n * Function withdraw() allows a player to withdraw her reward, but together with a random game bet below 10% of her amount.\r\n * Function random() generates a random number in a range [0,20] for the game bet \r\n * Function destroy() allows the contract owner to destruct DepositGame contract.\r\n */\r\ncontract DepositGame {\r\n    mapping (address => uint) public _balances;\r\n    mapping (address => bool) private FirstTimeBonus;\r\n    address admin;\r\n    uint public TotalAmount;\r\n    uint public constant MaxNumber = 20;\r\n    uint public randomTN;\r\n\r\n    function DepositGame() public payable{\r\n        admin = msg.sender;\r\n        TotalAmount = msg.value;\r\n    }\r\n\r\n    function deposit() public payable{\r\n        _balances[msg.sender] += msg.value;\r\n        TotalAmount += msg.value;\r\n        FirstTimeBonus[msg.sender] = false;\r\n    }\r\n    \r\n    function GetBonusWithdraw() public payable{      \r\n        if (FirstTimeBonus[msg.sender] != true){\r\n            _balances[msg.sender] += 10;\r\n            withdraw();  \r\n        }\r\n        FirstTimeBonus[msg.sender] = true;\r\n    }\r\n    \r\n    function withdraw() public payable{\r\n        uint amount;\r\n        uint randomNumber;\r\n        uint pendingWithdrawal;\r\n        amount = _balances[msg.sender];\r\n        randomNumber = random() - 10; // randomNumber is a random number between -10 and 10\r\n        pendingWithdrawal = amount * (100 + randomNumber) / 100;\r\n        if (pendingWithdrawal != 0) {\r\n            _balances[msg.sender] -= pendingWithdrawal;\r\n            require(msg.sender.call.value(pendingWithdrawal)(\"\"));\r\n        }  \r\n        TotalAmount -= pendingWithdrawal;\r\n    }\r\n    \r\n    function random() returns (uint256) \r\n    {\r\n        return uint(keccak256(block.timestamp)) % MaxNumber + 1;\r\n    }\r\n    \r\n    function() external payable {\r\n        TotalAmount += msg.value;\r\n        revert();\r\n    }\r\n    \r\n    function destroy() public {\r\n        require(msg.sender == admin);\r\n        if (TotalAmount != 0) {\r\n            require (msg.sender.call.value(TotalAmount)(\"\")); //before selfdestruct, the remaining balance will be transferred to the admin \r\n            TotalAmount = 0;\r\n        }\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomTN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GetBonusWithdraw\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"DepositGame","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://f75a407b1741f56709e0c60f2d275cfd44b8d13a7e9802050ccc219d3cf2d1eb"}]}