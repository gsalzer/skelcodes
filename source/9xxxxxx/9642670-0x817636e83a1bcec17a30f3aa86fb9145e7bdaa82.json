{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n// import SafeMath for safety checks\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     \tuint256 c = a + b;\r\n     \trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n     \treturn c;\r\n     }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     \trequire(b <= a, \"SafeMath: subtraction overflow\");\r\n     \tuint256 c = a - b;\r\n\r\n     \treturn c;\r\n     }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n        \treturn 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     \trequire(b != 0, \"SafeMath: modulo by zero\");\r\n     \treturn a % b;\r\n     }\r\n }\r\n\r\n// import abstract token contract\r\ncontract ERC20 {\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address tokenlender) external view returns (uint balance);\r\n\tfunction allowance(address tokenlender, address spender) external view returns (uint remaining);\r\n\tfunction transfer(address to, uint tokens) external returns (bool success);\r\n\tfunction approve(address spender, uint tokens) external returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenlender, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApprovalHolder {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n// Declare public parameters\r\n\r\naddress payable public owner;\r\naddress public admin;\r\naddress public taxRecipient;\r\nuint256 public taxFee;\r\nERC20 public token;\r\nmapping(address => bool) public isInvoker;\r\n\r\n// Declare events\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\nevent AdminTransferred(address indexed previousOwner, address indexed newOwner);\r\nevent InvokerAdded(address indexed newInvoker);\r\nevent InvokerRemoved(address indexed previousInvoker);\r\nevent RecipientChanged(address indexed previousRecipient, address indexed newRecipient);\r\nevent TaxFeeChanged(uint256 indexed previousFee, uint256 indexed newFee);\r\nevent TransferOnBehalf(address indexed from, address indexed to, uint256 value, uint256 tax, address taxRecipient, address tokenAddress);\r\nevent TokenTransferred(address indexed to, uint256 amount);  \r\nevent EtherTransferred(address indexed to, uint256 amount);  \r\n\r\n    /**\r\n     * Constructor function\r\n  \t * @param _admin The address which is responsible for management.\r\n  \t * @param _taxRecipient The address receiving funds such as tax.\r\n  \t * @param _taxFee The tax fee applied\r\n     * Initializes contract.\r\n     */\r\n     constructor(address _admin, address _taxRecipient, uint256 _taxFee, address _tokenAddress) public {\r\n     \towner = msg.sender;\r\n     \tadmin = _admin;\r\n     \ttaxRecipient = _taxRecipient; \t\r\n     \ttaxFee = _taxFee;\r\n     \ttoken = ERC20(_tokenAddress);\r\n     }\r\n\r\n\t// functions for the owner\r\n\r\n/**\r\n* @dev destruct the contract, remaining ETH will be sent to the owner\r\n*/\r\nfunction selfDestruct() public {\r\n\trequire(msg.sender == owner);\r\n\tselfdestruct(owner);\r\n}\r\n\r\n/**\r\n* @dev transfer ownership\r\n* @param _newOwner The address of the new owner\r\n*/\r\nfunction transferOwnership(address payable _newOwner) public {\r\n\trequire(msg.sender == owner);\r\n\towner = _newOwner;\r\n\temit OwnershipTransferred(msg.sender, owner);\r\n}\r\n\r\n\t// functions for the admin\r\n\r\n/**\r\n* @dev transfer administration right\r\n* @param _newAdmin The address of the new admin\r\n*/\r\nfunction transferAdmin(address _newAdmin) public {\r\n\trequire(msg.sender == admin);\r\n\tadmin = _newAdmin;\r\n\temit AdminTransferred(msg.sender, admin);\r\n}\r\n\r\n/**\r\n* @dev admin invoker\r\n* @param _newInvoker The address of the new invoker\r\n*/\r\nfunction addInvoker(address _newInvoker) public {\r\n\trequire(msg.sender == admin);\r\n\tisInvoker[_newInvoker] = true;\r\n\temit InvokerAdded(_newInvoker);\r\n}\r\n\r\n/**\r\n* @dev remove invoker\r\n* @param _previousInvoker The invoker address to be removed\r\n*/\r\nfunction removeInvoker(address _previousInvoker) public {\r\n\trequire(msg.sender == admin);\r\n\trequire(isInvoker[_previousInvoker] == true);\r\n\tisInvoker[_previousInvoker] = false;\r\n\temit InvokerRemoved(_previousInvoker);\r\n}\r\n\r\n/**\r\n* @dev change tax recipient address\r\n* @param _newRecipient new recipient address to receive tax tokens\r\n*/\r\nfunction changeRecipient(address _newRecipient) public {\r\n\trequire(msg.sender == admin);\r\n\taddress _previousRecipient = taxRecipient;\r\n\ttaxRecipient = _newRecipient;\r\n\temit RecipientChanged(_previousRecipient, _newRecipient);\r\n}\r\n\r\n/**\r\n* @dev change tax fee \r\n* @param _newFee new tax fee\r\n*/\r\nfunction changeTaxFee(uint256 _newFee) public {\r\n\trequire(msg.sender == admin);\r\n\tuint256 _previousFee = taxFee;\r\n\ttaxFee = _newFee;\r\n\temit TaxFeeChanged(_previousFee, _newFee);\r\n}\r\n\r\n/**\r\n* @dev transfer tokens which are wrongly sent to this contract address to a given address\r\n* @param _tokenRecipient address to receive tokens\r\n* @param _amount  amount of tokens to be sent\r\n*/\r\nfunction transferToken(address _tokenRecipient, uint256 _amount) public {\r\n    require(msg.sender == admin);\r\n    require(token.transfer(_tokenRecipient, _amount));\r\n    emit TokenTransferred(_tokenRecipient, _amount);\r\n}\r\n\r\n/**\r\n* @dev transfer ethers which are wrongly sent to this contract address to a given address\r\n* @param _etherRecipient address to receive tokens\r\n* @param _amount  amount of tokens to be sent\r\n*/\r\nfunction transferEther(address payable _etherRecipient, uint256 _amount) public {\r\n    require(msg.sender == admin);\r\n    _etherRecipient.transfer(_amount);\r\n    emit EtherTransferred(_etherRecipient, _amount);\r\n}\r\n\r\n\r\n\r\n\t// functions for invokers\r\n\r\n/**\r\n* @dev transfer on behalf of clients\r\n* @param from the address tokens are transferred from\r\n* @param to the address tokens are transferred to\r\n* @param amount the amount of tokens are being transferred\r\n*/\r\nfunction transferOnBehalf(address from, address to, uint256 amount) public {\r\n    require(isInvoker[msg.sender] == true);\r\n         // avoid dual transactions when tax fee is set to be 0\r\n         if(taxFee == 0) {\r\n            require(token.transferFrom(from, to, amount));\r\n            } else {\r\n                require(token.transferFrom(from, to, amount));\r\n                require(token.transferFrom(from, taxRecipient, taxFee));\r\n            }\r\n            emit TransferOnBehalf(from, to, amount, taxFee, taxRecipient, address(token));\r\n        }\r\n    }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newInvoker\",\"type\":\"address\"}],\"name\":\"InvokerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousInvoker\",\"type\":\"address\"}],\"name\":\"InvokerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"RecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"TaxFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taxRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TransferOnBehalf\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newInvoker\",\"type\":\"address\"}],\"name\":\"addInvoker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"changeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"changeTaxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInvoker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_previousInvoker\",\"type\":\"address\"}],\"name\":\"removeInvoker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_etherRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ApprovalHolder","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000068b6dde00fd3eec669b3feab2481e002526d7cff00000000000000000000000068b6dde00fd3eec669b3feab2481e002526d7cff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa2ea633f25257607626bb1f678af84173953056","Library":"","LicenseType":"None","SwarmSource":"bzzr://a7969536b69a20d17b86acb03089bbc2cc076a2311f6bc3bf903e37524f32a44"}]}