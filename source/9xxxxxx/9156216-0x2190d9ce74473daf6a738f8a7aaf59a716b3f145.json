{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\ncontract Random {\r\n    address public owner;\r\n\r\n    uint32[] public _tickets;\r\n    uint32[] public _winners;\r\n    uint32[] public _winners_tickets;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    bytes32 public current_block_hash;\r\n    uint256 public current_block_id;\r\n\r\n\r\n    function clear() public returns (bool){\r\n        require(msg.sender==owner, \"Not the owner\");\r\n        delete _tickets;\r\n        delete _winners;\r\n        delete _winners_tickets;\r\n    }\r\n\r\n    function bulk_load_tickets(uint32[] memory tickets) public returns (bool){\r\n        require(msg.sender==owner, \"Not the owner\");\r\n        for(uint256 i = 0 ; i < tickets.length ; i++  ){\r\n            _tickets.push(tickets[i]);\r\n        }\r\n    }\r\n\r\n    function is_winner(uint32 winner_idx) public view returns(bool){\r\n        for(uint256 i = 0 ; i < _winners.length; i ++){\r\n            if( _winners[i] == winner_idx ){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function random_winners(uint32 winnersCount) public returns (bool){\r\n        require(msg.sender==owner, \"Not the owner\");\r\n         current_block_id = block.number;\r\n         current_block_hash = blockhash(current_block_id - 1);\r\n         uint256 random_number = uint256(sha256(abi.encodePacked(current_block_hash)));\r\n         delete _winners;\r\n         delete _winners_tickets;\r\n\r\n         for(uint32 i = 0 ; i < winnersCount; i ++){\r\n             uint32 winner_idx = uint32(random_number % _tickets.length);\r\n             do {\r\n                 random_number = uint256(sha256(abi.encodePacked(random_number)));\r\n                 winner_idx = uint32(random_number % _tickets.length);\r\n             } while( is_winner(winner_idx) );\r\n             _winners.push(winner_idx);\r\n             _winners_tickets.push(_tickets[winner_idx]);\r\n         }\r\n    }\r\n\r\n    function get_all_tickets() public view returns (uint32[] memory){\r\n        return _tickets;\r\n    }\r\n\r\n    function get_all_winners() public view returns (uint32[] memory){\r\n        return _winners;\r\n    }\r\n\r\n    function get_all_winners_tickets() public view returns (uint32[] memory){\r\n        return _winners_tickets;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_winners\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_winners_tickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"tickets\",\"type\":\"uint32[]\"}],\"name\":\"bulk_load_tickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_block_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_block_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_all_tickets\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_all_winners\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_all_winners_tickets\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"winner_idx\",\"type\":\"uint32\"}],\"name\":\"is_winner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"winnersCount\",\"type\":\"uint32\"}],\"name\":\"random_winners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Random","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://d55b8de9e15bdf0f43bb621beb09734077798ff118d773863572887337536004"}]}