{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n// OpenZeppelin https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\"},\"DPiggyAssetData.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"DPiggyBaseProxyData.sol\\\";\\r\\nimport \\\"ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DPiggyAssetData\\r\\n * @dev Contract for all dPiggy asset stored data.\\r\\n * It must inherit from DPiggyBaseProxyData contract for properly generate the proxy.\\r\\n * Each dPiggy asset has your own DPiggyAssetData.\\r\\n */\\r\\ncontract DPiggyAssetData is DPiggyBaseProxyData, ReentrancyGuard {\\r\\n    \\r\\n    /**\\r\\n     * @dev The Struct to store each Compound redeem execution data.\\r\\n     */\\r\\n    struct Execution {\\r\\n        /**\\r\\n         * @dev The time in Unix.\\r\\n         */\\r\\n        uint256 time;\\r\\n        \\r\\n        /**\\r\\n         * @dev The calculated rate based on Dai amount variation on Compound.\\r\\n         */\\r\\n        uint256 rate;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total amount of Dai on Compound.\\r\\n         */\\r\\n        uint256 totalDai;\\r\\n        \\r\\n        /**\\r\\n         * @dev The amount of Dai redeemed on Compound.\\r\\n         */\\r\\n        uint256 totalRedeemed;\\r\\n        \\r\\n        /**\\r\\n         * @dev The amount of asset purchased.\\r\\n         */\\r\\n        uint256 totalBought;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total of Dai deposited on the contract.\\r\\n         */\\r\\n        uint256 totalBalance;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total of Dai with fee exemption.\\r\\n         */\\r\\n        uint256 totalFeeDeduction;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total of Dai redeemed that was regarded as the fee.\\r\\n         */\\r\\n        uint256 feeAmount;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev The Struct to store the user data.\\r\\n     */\\r\\n    struct UserData {\\r\\n        /**\\r\\n         * @dev The last execution Id on deposit.\\r\\n         */\\r\\n        uint256 baseExecutionId;\\r\\n        \\r\\n        /**\\r\\n         * @dev The rate on deposit.\\r\\n         * The value is the weighted average of all deposit rates with the same base execution Id.\\r\\n         * It is used to calculate the user\\u0027s corresponding profit on the next Compound redeem execution (baseExecutionId + 1).\\r\\n         */\\r\\n        uint256 baseExecutionAvgRate;\\r\\n        \\r\\n        /**\\r\\n         * @dev The amount of Dai on deposit.\\r\\n         * The value is the amount of Dai accumulated of all deposits with the same base execution Id.\\r\\n         */\\r\\n        uint256 baseExecutionAccumulatedAmount;\\r\\n        \\r\\n        /**\\r\\n         * @dev The accumulated weight for the rate calculation.\\r\\n         * The value is auxiliary for the base execution rate calculation for all deposits with the same base execution Id.\\r\\n         */\\r\\n        uint256 baseExecutionAccumulatedWeightForRate;\\r\\n        \\r\\n        /**\\r\\n         * @dev The amount of Dai that will be applied the fee on the next Compound redeem execution (baseExecutionId + 1).\\r\\n         */\\r\\n        uint256 baseExecutionAmountForFee;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total of Dai deposited.\\r\\n         */\\r\\n        uint256 currentAllocated;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total of Dai previously deposited before the regarded deposit.\\r\\n         * The deposits are regarded the same if they have the same base execution Id.\\r\\n         */\\r\\n        uint256 previousAllocated;\\r\\n        \\r\\n        /**\\r\\n         * @dev The previous Dai profit before the regarded deposit.\\r\\n         * The deposits are regarded the same if they have the same base execution Id.\\r\\n         */\\r\\n        uint256 previousProfit;\\r\\n        \\r\\n        /**\\r\\n         * @dev The previous asset amount before the regarded deposit.\\r\\n         * The deposits are regarded the same if they have the same base execution Id.\\r\\n         */\\r\\n        uint256 previousAssetAmount;\\r\\n        \\r\\n        /**\\r\\n         * @dev The previous fee on Dai before the regarded deposit.\\r\\n         * The deposits are regarded the same if they have the same base execution Id.\\r\\n         */\\r\\n        uint256 previousFeeAmount;\\r\\n        \\r\\n        /**\\r\\n         * @dev The total amount of asset redeemed.\\r\\n         */\\r\\n        uint256 redeemed;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the minimum time between Compound redeem executions has been changed.\\r\\n     * @param newTime The new minimum time between Compound redeem executions.\\r\\n     * @param oldTime The previous minimum time between Compound redeem executions.\\r\\n     */\\r\\n    event SetMinimumTimeBetweenExecutions(uint256 newTime, uint256 oldTime);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a user has deposited Dai on the contract.\\r\\n     * @param user The user\\u0027s address.\\r\\n     * @param amount The amount of Dai deposited.\\r\\n     * @param rate The calculated rate.\\r\\n     * @param baseExecutionId The last Compound redeem execution Id.\\r\\n     * @param baseExecutionAmountForFee The amount of Dai that will be applied the fee on the next Compound redeem execution (baseExecutionId + 1).\\r\\n     */\\r\\n    event Deposit(address indexed user, uint256 amount, uint256 rate, uint256 baseExecutionId, uint256 baseExecutionAmountForFee);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a user has redeemed the asset profit on the contract.\\r\\n     * @param user The user\\u0027s address.\\r\\n     * @param amount The amount of asset redeemed.\\r\\n     */\\r\\n    event Redeem(address indexed user, uint256 amount);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a Compound redeem has been executed.\\r\\n     * @param executionId The respective Id.\\r\\n     * @param rate The calculated rate.\\r\\n     * @param totalBalance The total of Dai deposited on the contract.\\r\\n     * @param totalRedeemed The amount of Dai redeemed on Compound.\\r\\n     * @param fee The total of Dai redeemed that was regarded as the fee.\\r\\n     * @param totalBought The amount of asset purchased.\\r\\n     * @param totalAucBurned The amount of Auc purchased and burned with the fee.\\r\\n     */\\r\\n    event CompoundRedeem(uint256 indexed executionId, uint256 rate, uint256 totalBalance, uint256 totalRedeemed, uint256 fee, uint256 totalBought, uint256 totalAucBurned);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when a user has finished the own participation on the dPiggy asset.\\r\\n     * All asset profit is redeemed as well as all the Dai deposited. \\r\\n     * @param user The user\\u0027s address.\\r\\n     * @param totalRedeemed The amount of Dai redeemed on Compound.\\r\\n     * @param yield The user yield in Dai redeemed since the last Compound redeem execution.\\r\\n     * @param fee The total of Dai redeemed that was regarded as the fee.\\r\\n     * @param totalAucBurned The amount of Auc purchased and burned with the fee.\\r\\n     */\\r\\n    event Finish(address indexed user, uint256 totalRedeemed, uint256 yield, uint256 fee, uint256 totalAucBurned);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the contract is initialized with a previous data due to a proxy migration.\\r\\n     * @param previousContract The previous contract address.\\r\\n     */\\r\\n    event SetMigration(address previousContract);\\r\\n\\r\\n    /**\\r\\n     * @dev The ERC20 token address on the chain or \\u00270x0\\u0027 for Ethereum. \\r\\n     * It is the asset for the respective contract. \\r\\n     */\\r\\n    address public tokenAddress;\\r\\n    \\r\\n    /**\\r\\n     * @dev Minimum time in seconds between executions to run the Compound redeem.\\r\\n     */\\r\\n    uint256 public minimumTimeBetweenExecutions;\\r\\n    \\r\\n    /**\\r\\n     * @dev Last Compound redeem execution Id (it is an incremental number).\\r\\n     */\\r\\n    uint256 public executionId;\\r\\n    \\r\\n    /**\\r\\n     * @dev The total balance of Dai deposited.\\r\\n     */\\r\\n    uint256 public totalBalance;\\r\\n    \\r\\n    /**\\r\\n     * @dev The amount of deposited Dai that has a fee exemption due to the Auc escrowed.\\r\\n     */\\r\\n    uint256 public feeExemptionAmountForAucEscrowed;\\r\\n    \\r\\n    /**\\r\\n     * @dev It indicates if the contract asset is the cDai.\\r\\n     */\\r\\n    bool public isCompound;\\r\\n    \\r\\n    /**\\r\\n     * @dev The difference between the amount of Dai deposited and the respective value normalized to the last Compound redeem execution time.\\r\\n     * _key is the execution Id.\\r\\n     * _value is the difference of Dai.\\r\\n     */\\r\\n    mapping(uint256 =\\u003e uint256) public totalBalanceNormalizedDifference;\\r\\n    \\r\\n    /**\\r\\n     * @dev The difference between the amount of Dai with fee exemption and the respective value normalized to the last Compound redeem execution time.\\r\\n     * _key is the execution Id.\\r\\n     * _value is the difference of Dai.\\r\\n     */\\r\\n    mapping(uint256 =\\u003e uint256) public feeExemptionNormalizedDifference;\\r\\n    \\r\\n    /**\\r\\n     * @dev The remaining profit redeemed from Compound.\\r\\n     * Used on Compound asset to adjust the remaining value on the contract between executions.\\r\\n     * _key is the execution Id.\\r\\n     * _value is the redeemed value.\\r\\n     */\\r\\n    mapping(uint256 =\\u003e uint256) public remainingValueRedeemed;\\r\\n    \\r\\n    /**\\r\\n     * @dev The amount of Dai that has a fee exemption for the respective execution due to the user deposit time.\\r\\n     * _key is the execution Id.\\r\\n     * _value is the amount of Dai.\\r\\n     * The user amount of Dai proportion is calculated based on the difference between the deposit time and the next execution time.\\r\\n     */\\r\\n    mapping(uint256 =\\u003e uint256) public feeExemptionAmountForUserBaseData;\\r\\n    \\r\\n    /**\\r\\n     * @dev The Compound redeem executions data.\\r\\n     * _key is the execution Id.\\r\\n     * _value is the execution data.\\r\\n     */\\r\\n    mapping(uint256 =\\u003e Execution) public executions;\\r\\n    \\r\\n    /**\\r\\n     * @dev The user data for the asset.\\r\\n     * _key is the user address.\\r\\n     * _value is the user data.\\r\\n     */\\r\\n    mapping(address =\\u003e UserData) public usersData;\\r\\n}\\r\\n\"},\"DPiggyAssetProxy.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"DPiggyBaseProxy.sol\\\";\\r\\nimport \\\"DPiggyAssetData.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DPiggyAssetProxy\\r\\n * @dev A proxy contract for dPiggy asset.\\r\\n * It must inherit first from DPiggyBaseProxy contract for properly works.\\r\\n * The stored data is on DPiggyAssetData contract.\\r\\n */\\r\\ncontract DPiggyAssetProxy is DPiggyBaseProxy, DPiggyAssetData {\\r\\n    constructor(\\r\\n        address _admin, \\r\\n        address _implementation, \\r\\n        bytes memory data\\r\\n    ) public payable DPiggyBaseProxy(_admin, _implementation, data) {\\r\\n    } \\r\\n}\"},\"DPiggyBaseProxy.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"Address.sol\\\";\\r\\nimport \\\"DPiggyBaseProxyData.sol\\\";\\r\\nimport \\\"DPiggyBaseProxyInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DPiggyBaseProxy\\r\\n * @dev A proxy contract that implements delegation of calls to other contracts.\\r\\n * The stored data is on DPiggyBaseProxyData contract.\\r\\n */\\r\\ncontract DPiggyBaseProxy is DPiggyBaseProxyData, DPiggyBaseProxyInterface {\\r\\n\\r\\n    constructor(address _admin, address _implementation, bytes memory data) public payable {\\r\\n        admin = _admin;\\r\\n        _setImplementation(_implementation, data);\\r\\n    } \\r\\n  \\r\\n    /**\\r\\n     * @dev Fallback function that delegates the execution to an implementation contract.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        address addr = implementation;\\r\\n        assembly {\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), addr, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n  \\r\\n    /**\\r\\n     * @dev Function to be compliance with EIP 897.\\r\\n     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-897.md\\r\\n     * It is an \\\"upgradable proxy\\\".\\r\\n     */\\r\\n    function proxyType() public pure returns(uint256) {\\r\\n        return 2; \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the proxy implementation address.\\r\\n     * Only can be called by the proxy admin.\\r\\n     * The implementation address must a contract.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     * @param data ABI encoded with signature data that will be delegated over the new implementation.\\r\\n     */\\r\\n    function setImplementation(address newImplementation, bytes calldata data) onlyAdmin external override(DPiggyBaseProxyInterface) payable {\\r\\n        require(Address.isContract(newImplementation));\\r\\n        address oldImplementation = implementation;\\r\\n        _setImplementation(newImplementation, data);\\r\\n        emit SetProxyImplementation(newImplementation, oldImplementation);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Function to set the proxy admin address.\\r\\n     * Only can be called by the proxy admin.\\r\\n     * @param newAdmin Address of the new proxy admin.\\r\\n     */\\r\\n    function setAdmin(address newAdmin) onlyAdmin external override(DPiggyBaseProxyInterface) {\\r\\n        require(newAdmin != address(0));\\r\\n        address oldAdmin = admin;\\r\\n        admin = newAdmin;\\r\\n        emit SetProxyAdmin(newAdmin, oldAdmin);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to set the implementation address.\\r\\n     * @param _implementation Address of the new proxy implementation.\\r\\n     * @param data ABI encoded with signature data that will be delegated over the new implementation.\\r\\n     */\\r\\n    function _setImplementation(address _implementation, bytes memory data) internal {\\r\\n        implementation = _implementation;\\r\\n        if (data.length \\u003e 0) {\\r\\n            (bool success,) = _implementation.delegatecall(data);\\r\\n            assert(success);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"DPiggyBaseProxyData.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title DPiggyBaseProxyData\\r\\n * @dev Contract for all DPiggyBaseProxyData stored data.\\r\\n */\\r\\ncontract DPiggyBaseProxyData {\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the proxy implementation has been changed.\\r\\n     * @param newImplementation Address of the new proxy implementation.\\r\\n     * @param oldImplementation Address of the previous proxy implementation.\\r\\n     */\\r\\n    event SetProxyImplementation(address indexed newImplementation, address oldImplementation);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the admin address has been changed.\\r\\n     * @param newAdmin Address of the new admin.\\r\\n     * @param oldAdmin Address of the previous admin.\\r\\n     */\\r\\n    event SetProxyAdmin(address indexed newAdmin, address oldAdmin);\\r\\n    \\r\\n    /**\\r\\n     * @dev Modifier to check if the `msg.sender` is the admin.\\r\\n     * Only admin address can execute.\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev The contract address of the implementation.\\r\\n     */\\r\\n    address public implementation;\\r\\n    \\r\\n    /**\\r\\n     * @dev The admin address.\\r\\n     */\\r\\n    address public admin;\\r\\n}\\r\\n\"},\"DPiggyBaseProxyInterface.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title DPiggyBaseProxyInterface\\r\\n * @dev DPiggyBaseProxy interface with external functions.\\r\\n */\\r\\ninterface DPiggyBaseProxyInterface {\\r\\n    function setImplementation(address newImplementation, bytes calldata data) external payable;\\r\\n    function setAdmin(address newAdmin) external;\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @title ReentrancyGuard\\r\\n * @dev Base contract with a modifier that implements a reentrancy guard.\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    /**\\r\\n     * @dev Internal data to control the reentrancy.\\r\\n     */\\r\\n    bool internal _notEntered;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to prevents a contract from calling itself during the function execution.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        require(_notEntered, \\\"ReentrancyGuard:: reentry\\\");\\r\\n        _notEntered = false;\\r\\n        _;\\r\\n        _notEntered = true;\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAucBurned\",\"type\":\"uint256\"}],\"name\":\"CompoundRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseExecutionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseExecutionAmountForFee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAucBurned\",\"type\":\"uint256\"}],\"name\":\"Finish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousContract\",\"type\":\"address\"}],\"name\":\"SetMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"}],\"name\":\"SetMinimumTimeBetweenExecutions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"SetProxyAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"}],\"name\":\"SetProxyImplementation\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeDeduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExemptionAmountForAucEscrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeExemptionAmountForUserBaseData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeExemptionNormalizedDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTimeBetweenExecutions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remainingValueRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBalanceNormalizedDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseExecutionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseExecutionAvgRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseExecutionAccumulatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseExecutionAccumulatedWeightForRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseExecutionAmountForFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"previousFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DPiggyAssetProxy","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002f9bb3c619b0f1042d358da5e5755bcbc148ec40000000000000000000000000cb11c9b33f9793895c19b31caf0fc72ffc92023200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000684f75091be000000000000000000000000f512292d213000058Ecf8c6c27630460A1d12df90000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000003100000000000000000000000047348bb236a8ad7b7efd17c1fee987f171335a43000000000000000000000000be93d14c5defb8f41af8fb092f58e3c71c712b8500000000000000000000000008e5f4670b8e70fe77d952ba0fbbf9f4762aaf73000000000000000000000000817af8eed274becc1d6983b824338ef14ad5deff0000000000000000000000009093428aa6266d589b866ac2956e328ab9039bee000000000000000000000000505e20c0fb8252ca7ac21d54d5432eccd4f2d07600000000000000000000000001c142e94c8837d62787576bcd6f82a7bfb34ac2000000000000000000000000ba4b8fcacf85ab199061ff0cab75b33b72be3be3000000000000000000000000cda459ba2e5bbba181c7e0aa559eeef7cbe1a04b0000000000000000000000000c74e0e80b442cf74b1c515b642908b82a8878e70000000000000000000000002883ef3026a8422e05c27f264538d06cf67dcc9e000000000000000000000000fb808b3a5c074f2c6475d6926f4330b8044552e90000000000000000000000005067cc5b770f8a3a9bc7f3ce046ec6c506c14cd3000000000000000000000000dce40dec2b53d658948c5e382b48fbe22d39637b000000000000000000000000d147cd141b62d22864acf4ca2393e26242732cea000000000000000000000000088c56a24dc58c78d5d15ad55ab3811658c9dfa000000000000000000000000064abc5b10c77d93be5038e7b4965d2f0d827912700000000000000000000000077d7cd5315cd74226e0d2ee442c07c4051a7763000000000000000000000000082c1b61da09b5fdce098a212bb8070210ab91049000000000000000000000000e7cfdbdcc3ad20abeb3d9bb423a77b7ee07c1bfa000000000000000000000000ecf76e6901832b280502aa051b60536d0368dd3900000000000000000000000050d29af39bc5c249a6b426d76f473d6191c5fcbb00000000000000000000000096bde814127fe7a6425ec9a6ab6871c34d3c631a000000000000000000000000abe2b5ec3b1104bf3628c3f9083fa1eb76b0eed40000000000000000000000007dd0cb21e7c74776bd57f939c4f608246d32f6c4000000000000000000000000368a2d5cd67bb2c4c742d9482aa09f3126aa0f52000000000000000000000000881607303587a0c08887cf27e09b12519fd3502800000000000000000000000032402ca01af55ea21b9bae0a7b5fb25d8f0ffd6c000000000000000000000000a83f2281d130b7e7cb23890d7fa45a1ba2408b980000000000000000000000004929f4d38f2955649b5aa34343da04cf790b9d920000000000000000000000002a8c4eee98f7037a6339d925e5d1491861472b58000000000000000000000000813943233250790e7550accdab01b2fa26ddec700000000000000000000000009984fa02761f6ee2bae43ed8aaee1cd9d1cfd490000000000000000000000000684d85ed439c6de9f2b7ae549268d1ab6c5ecda7000000000000000000000000fb5aee960e1f7988a9d5da257531cee8ce1bca710000000000000000000000009be06a9f5299752c5c56e280b2c1985267fe098a000000000000000000000000b4fea5fccfe492e0199e81be75cea97fdba7746300000000000000000000000059f738df92525627467a455a3ebba3ac078aae840000000000000000000000008b4f2115419423b62fada5fe553417d8149f598a000000000000000000000000bd1f7d88c76a86c60d41bddd4819fae404e7151e0000000000000000000000006954796e7499c0dcdd9c908f73eaff20acfb7b8100000000000000000000000001f6a06ec1f5341f7d322a27a3dac7004c6989630000000000000000000000007da912d2be5383772f5c6a47f947b352babfc9c10000000000000000000000001328bc71177b91a5acb9ee06f7abf4f429424c44000000000000000000000000aaa20b33aeeade611f46428466bccf89afa45b1b00000000000000000000000015f4f2cc0614c146a43cc4d6794b5e66b574f46000000000000000000000000015a6859a9521b8f7dde91aa932544b9540ffd8070000000000000000000000003acc90d1922d07618e62fbaf3bed25fff52b715a0000000000000000000000004282341588f94c158bfaa40ae2c9f3abfdac647f00000000000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"ipfs://33935a5aab54f4d2a6fc96161f0afb6804d684b6c4eb0f8d30f59bc114d9657d"}]}