{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/HintoTips.sol\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\ncontract HintoTips is Ownable {\r\n    mapping(address => bool) publishers;\r\n    uint256 tipsCount;\r\n    mapping(uint256 => Tip) public tips;\r\n\r\n    struct Tip {\r\n        address publisher;\r\n        bytes32 tipCode;\r\n        bytes32 tipMetaSha256Hash;\r\n        bytes32[] recipients;\r\n        bool isValid;\r\n    }\r\n\r\n    event ApprovePublisher(address publisher);\r\n    event PublisherDisapproved(address publisher);\r\n    event TipPublished(\r\n        address publisher,\r\n        bytes32 tipCode,\r\n        uint256 tipId,\r\n        bytes32[] indexed recipients\r\n    );\r\n    event TipVoided(uint256 tipId);\r\n\r\n    modifier isPublisher() {\r\n        require(\r\n            publishers[msg.sender],\r\n            \"Only approved publishers can call this method\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier tipExists(uint256 _tipId) {\r\n        require(tipsCount > _tipId, \"Tip with the given id does not exist\");\r\n        _;\r\n    }\r\n\r\n    function approvePublisher(address _publisher) external onlyOwner() {\r\n        publishers[_publisher] = true;\r\n        emit ApprovePublisher(_publisher);\r\n    }\r\n\r\n    function disapprovePublisher(address _publisher) external onlyOwner() {\r\n        publishers[_publisher] = false;\r\n        emit PublisherDisapproved(_publisher);\r\n    }\r\n\r\n    function publishTip(\r\n        bytes32 _tipCode,\r\n        bytes32 _tipMetaSha256Hash,\r\n        bytes32[] calldata _recipients\r\n    ) external isPublisher() {\r\n        Tip memory tip = Tip(\r\n            msg.sender,\r\n            _tipCode,\r\n            _tipMetaSha256Hash,\r\n            _recipients,\r\n            true\r\n        );\r\n        tips[tipsCount] = tip;\r\n        emit TipPublished(msg.sender, _tipCode, tipsCount, _recipients);\r\n        tipsCount++;\r\n    }\r\n\r\n    function invalidateTip(uint256 _tipId) external tipExists(_tipId) {\r\n        require(\r\n            msg.sender == owner() || tips[_tipId].publisher == msg.sender,\r\n            \"Only the contract owner or the tip publisher can unvalid it\"\r\n        );\r\n        tips[_tipId].isValid = false;\r\n        emit TipVoided(_tipId);\r\n    }\r\n\r\n    function getTipsCount() external view returns (uint256) {\r\n        return tipsCount;\r\n    }\r\n\r\n    function getTip(uint256 _tipId)\r\n        external\r\n        view\r\n        tipExists(_tipId)\r\n        returns (address, bytes32, bytes32, bytes32[] memory, bool)\r\n    {\r\n        return (\r\n            tips[_tipId].publisher,\r\n            tips[_tipId].tipCode,\r\n            tips[_tipId].tipMetaSha256Hash,\r\n            tips[_tipId].recipients,\r\n            tips[_tipId].isValid\r\n        );\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"}],\"name\":\"ApprovePublisher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"}],\"name\":\"PublisherDisapproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tipCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tipId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32[]\",\"name\":\"recipients\",\"type\":\"bytes32[]\"}],\"name\":\"TipPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tipId\",\"type\":\"uint256\"}],\"name\":\"TipVoided\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_publisher\",\"type\":\"address\"}],\"name\":\"approvePublisher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_publisher\",\"type\":\"address\"}],\"name\":\"disapprovePublisher\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tipId\",\"type\":\"uint256\"}],\"name\":\"getTip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTipsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tipId\",\"type\":\"uint256\"}],\"name\":\"invalidateTip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tipCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tipMetaSha256Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_recipients\",\"type\":\"bytes32[]\"}],\"name\":\"publishTip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tips\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tipCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tipMetaSha256Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HintoTips","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://549a80c35a451bb57fa816ebe9dffe667d7fa7f17b7ad8c51bf640fa21ad0ca9"}]}