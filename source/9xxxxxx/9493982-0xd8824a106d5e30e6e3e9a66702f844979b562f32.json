{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.5.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ncontract IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/interfaces/ComptrollerInterface.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\ninterface ComptrollerInterface {\r\n    /**\r\n     * @notice Marker function used for light validation when updating the comptroller of a market\r\n     * @dev Implementations should simply return true.\r\n     * @return true\r\n     */\r\n    function isComptroller() external view returns (bool);\r\n\r\n    /*** Assets You Are In ***/\r\n\r\n    function enterMarkets(address[] calldata cTokens)\r\n        external\r\n        returns (uint256[] memory);\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(address cToken, address minter, uint256 mintAmount)\r\n        external\r\n        returns (uint256);\r\n    function mintVerify(\r\n        address cToken,\r\n        address minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    ) external;\r\n\r\n    function redeemAllowed(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemTokens\r\n    ) external returns (uint256);\r\n    function redeemVerify(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    ) external;\r\n\r\n    function borrowAllowed(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external returns (uint256);\r\n    function borrowVerify(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (uint256);\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 borrowerIndex\r\n    ) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (uint256);\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 seizeTokens\r\n    ) external;\r\n\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external;\r\n\r\n    function transferAllowed(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external returns (uint256);\r\n    function transferVerify(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external;\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint256 repayAmount\r\n    ) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/interfaces/InterestRateModel.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n/**\r\n  * @title Compound's InterestRateModel Interface\r\n  * @author Compound\r\n  */\r\ninterface InterestRateModel {\r\n    /**\r\n     * @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n     */\r\n    function isInterestRateModel() external pure returns (bool);\r\n\r\n    /**\r\n      * @notice Calculates the current borrow interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amnount of reserves the market has\r\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n      * @notice Calculates the current supply interest rate per block\r\n      * @param cash The total amount of cash the market has\r\n      * @param borrows The total amount of borrows the market has outstanding\r\n      * @param reserves The total amnount of reserves the market has\r\n      * @param reserveFactorMantissa The current reserve factor the market has\r\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n      */\r\n    function getSupplyRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves,\r\n        uint256 reserveFactorMantissa\r\n    ) external view returns (uint256);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/CTokenInterfaces.sol\r\n\r\npragma solidity ^0.5.7;\r\n\r\n\r\n\r\ncontract CTokenStorage {\r\n    /**\r\n     * @dev Guard variable for re-entrancy checks\r\n     */\r\n    bool internal _notEntered;\r\n\r\n    /**\r\n     * @notice EIP-20 token name for this token\r\n     */\r\n    string public name;\r\n\r\n    /**\r\n     * @notice EIP-20 token symbol for this token\r\n     */\r\n    string public symbol;\r\n\r\n    /**\r\n     * @notice EIP-20 token decimals for this token\r\n     */\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\r\n     */\r\n\r\n    uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\r\n\r\n    /**\r\n     * @notice Maximum fraction of interest that can be set aside for reserves\r\n     */\r\n    uint256 internal constant reserveFactorMaxMantissa = 1e18;\r\n\r\n    /**\r\n     * @notice Administrator for this contract\r\n     */\r\n    address payable public admin;\r\n\r\n    /**\r\n     * @notice Pending administrator for this contract\r\n     */\r\n    address payable public pendingAdmin;\r\n\r\n    /**\r\n     * @notice Contract which oversees inter-cToken operations\r\n     */\r\n    ComptrollerInterface public comptroller;\r\n\r\n    /**\r\n     * @notice Model which tells what the current interest rate should be\r\n     */\r\n    InterestRateModel public interestRateModel;\r\n\r\n    /**\r\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\r\n     */\r\n    uint256 internal initialExchangeRateMantissa;\r\n\r\n    /**\r\n     * @notice Fraction of interest currently set aside for reserves\r\n     */\r\n    uint256 public reserveFactorMantissa;\r\n\r\n    /**\r\n     * @notice Block number that interest was last accrued at\r\n     */\r\n    uint256 public accrualBlockNumber;\r\n\r\n    /**\r\n     * @notice Accumulator of the total earned interest rate since the opening of the market\r\n     */\r\n    uint256 public borrowIndex;\r\n\r\n    /**\r\n     * @notice Total amount of outstanding borrows of the underlying in this market\r\n     */\r\n    uint256 public totalBorrows;\r\n\r\n    /**\r\n     * @notice Total amount of reserves of the underlying held in this market\r\n     */\r\n    uint256 public totalReserves;\r\n\r\n    /**\r\n     * @notice Total number of tokens in circulation\r\n     */\r\n    uint256 public totalSupply;\r\n\r\n    /**\r\n     * @notice Official record of token balances for each account\r\n     */\r\n    mapping(address => uint256) internal accountTokens;\r\n\r\n    /**\r\n     * @notice Approved token transfer amounts on behalf of others\r\n     */\r\n    mapping(address => mapping(address => uint256)) internal transferAllowances;\r\n\r\n    /**\r\n     * @notice Container for borrow balance information\r\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n     */\r\n    struct BorrowSnapshot {\r\n        uint256 principal;\r\n        uint256 interestIndex;\r\n    }\r\n\r\n    /**\r\n     * @notice Mapping of account addresses to outstanding borrow balances\r\n     */\r\n    mapping(address => BorrowSnapshot) internal accountBorrows;\r\n}\r\n\r\ncontract CTokenInterface is CTokenStorage {\r\n    /**\r\n     * @notice Indicator that this is a CToken contract (for inspection)\r\n     */\r\n    bool public constant isCToken = true;\r\n\r\n    /*** Market Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when interest is accrued\r\n     */\r\n    event AccrueInterest(\r\n        uint256 cashPrior,\r\n        uint256 interestAccumulated,\r\n        uint256 borrowIndex,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are minted\r\n     */\r\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are redeemed\r\n     */\r\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when underlying is borrowed\r\n     */\r\n    event Borrow(\r\n        address borrower,\r\n        uint256 borrowAmount,\r\n        uint256 accountBorrows,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is repaid\r\n     */\r\n    event RepayBorrow(\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 accountBorrows,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is liquidated\r\n     */\r\n    event LiquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address cTokenCollateral,\r\n        uint256 seizeTokens\r\n    );\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when comptroller is changed\r\n     */\r\n    event NewComptroller(\r\n        ComptrollerInterface oldComptroller,\r\n        ComptrollerInterface newComptroller\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when interestRateModel is changed\r\n     */\r\n    event NewMarketInterestRateModel(\r\n        InterestRateModel oldInterestRateModel,\r\n        InterestRateModel newInterestRateModel\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when the reserve factor is changed\r\n     */\r\n    event NewReserveFactor(\r\n        uint256 oldReserveFactorMantissa,\r\n        uint256 newReserveFactorMantissa\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are added\r\n     */\r\n    event ReservesAdded(\r\n        address benefactor,\r\n        uint256 addAmount,\r\n        uint256 newTotalReserves\r\n    );\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are reduced\r\n     */\r\n    event ReservesReduced(\r\n        address admin,\r\n        uint256 reduceAmount,\r\n        uint256 newTotalReserves\r\n    );\r\n\r\n    /**\r\n     * @notice EIP20 Transfer event\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @notice EIP20 Approval event\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @notice Failure event\r\n     */\r\n    event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n    /*** User Interface ***/\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, uint256);\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n    function borrowBalanceStored(address account) public view returns (uint256);\r\n    function exchangeRateCurrent() public returns (uint256);\r\n    function exchangeRateStored() public view returns (uint256);\r\n    function getCash() external view returns (uint256);\r\n    function accrueInterest() public returns (uint256);\r\n    function seize(address liquidator, address borrower, uint256 seizeTokens)\r\n        external\r\n        returns (uint256);\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\r\n        external\r\n        returns (uint256);\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        CTokenInterface cTokenCollateral\r\n    ) external returns (uint256);\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity 0.5.7;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Context.sol\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n// File: contracts/TALEVotingBonus.sol\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n@notice contract for staking\r\n */\r\ncontract TALEVotingBonus is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    IERC20 public dai;\r\n    CTokenInterface public cDai;\r\n\r\n    // EVENTS\r\n    event ContractInitialized(uint256 stakeTimeStart, uint256 stakeTimeStop);\r\n    event Staked(address user, uint256 amountToken);\r\n    event StakedDai(address user, uint256 amountToken);\r\n    event TokensUnstaked(address voter, uint256 amountToken);\r\n    event DaiUnstaked(address voter, uint256 amountToken);\r\n\r\n    /**\r\n    @notice Vote struct */\r\n    struct Vote {\r\n        uint256 tokenAmount;\r\n        address voter;\r\n        uint8 personalityVoted;\r\n        uint256[] txsTimeToken;\r\n        uint256[] stakesToken;\r\n        // uint256 stakesCount;\r\n        uint256 unstakedTimestamp;\r\n        bool withdrawn;\r\n    }\r\n\r\n    struct VoteDai {\r\n        uint256 tokenAmount;\r\n        address voter;\r\n        uint256 stakedTimestamp;\r\n        uint256 unstakedTimestamp;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping(address => Vote) private votes; // mapping from voter to Vote struct\r\n\r\n    mapping(address => VoteDai) private votesDai; // mapping from voter to VoteDai struct\r\n    mapping(address => bool) public isDaiVoter;\r\n\r\n    address[] public voters;\r\n    mapping(uint8 => uint256) public stakesByPersonality;\r\n\r\n    uint256 public totalStakesCount; // total count of stakes\r\n    uint256 public totalStakedAmountToken;\r\n    uint256 public totalDaiStaked;\r\n\r\n    uint256 public stakeTimeStart;\r\n    uint256 public stakeTimeStop;\r\n\r\n    uint256 public minimumStakingAmountToken;\r\n\r\n    uint256 public tokenRewardMultiplier;\r\n\r\n    uint256 public minimumDAIStakingDays;\r\n    uint256 public tokenInterestShare;\r\n    uint256 public tokenPrice;\r\n\r\n    bool public contractState;\r\n\r\n    modifier onlyActive() {\r\n        require(contractState == true, \"contract is not active\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _token,\r\n        address _daiToken,\r\n        address _cDai,\r\n        uint256 _minStakingAmountToken,\r\n        uint256 _tokenRewardMultiplier,\r\n        uint256 _minimumDAIStakingDays,\r\n        uint256 _tokenInterestShare,\r\n        uint256 _tokenPrice\r\n    ) public {\r\n        token = IERC20(_token);\r\n        dai = IERC20(_daiToken);\r\n        cDai = CTokenInterface(_cDai);\r\n        tokenRewardMultiplier = _tokenRewardMultiplier;\r\n        setMinimumStakingAmountToken(_minStakingAmountToken);\r\n        minimumDAIStakingDays = _minimumDAIStakingDays;\r\n        tokenInterestShare = _tokenInterestShare;\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n    function init(uint256 startTime, uint256 stopTime) public onlyOwner {\r\n        require(!contractState, \"contract is already initialized\");\r\n\r\n        require(startTime > now, \"start time cannot be set in the past\");\r\n\r\n        require(\r\n            stopTime > startTime,\r\n            \"stop time should be greater than stop time\"\r\n        );\r\n\r\n        stakeTimeStart = startTime;\r\n        stakeTimeStop = stopTime;\r\n\r\n        contractState = true;\r\n\r\n        emit ContractInitialized(stakeTimeStart, stakeTimeStop);\r\n    }\r\n\r\n    function stake(uint8 personality, uint256 tokensAmount) public {\r\n        require(\r\n            contractState == true &&\r\n                now <= stakeTimeStop &&\r\n                now >= stakeTimeStart,\r\n            \"cannot stake\"\r\n        );\r\n\r\n        require(\r\n            personality == 1 || personality == 2,\r\n            \"personality can be either 1 or 2\"\r\n        );\r\n\r\n        Vote storage _vote = votes[msg.sender];\r\n\r\n        if (_vote.tokenAmount > 0) {\r\n            require(\r\n                _vote.personalityVoted == personality,\r\n                \"You cannot raise stake on a different personality\"\r\n            );\r\n        }\r\n\r\n        if (_vote.tokenAmount == 0) {\r\n            addVoter(msg.sender);\r\n            // create a new stake entity\r\n            uint256[] memory txs = new uint256[](0);\r\n            uint256[] memory stx = new uint256[](0);\r\n\r\n            Vote memory newVote = Vote(0, msg.sender, 0, txs, stx, 0, false);\r\n\r\n            votes[msg.sender] = newVote;\r\n            votes[msg.sender].personalityVoted = personality;\r\n        }\r\n\r\n        require(\r\n            tokensAmount >= minimumStakingAmountToken,\r\n            \"tokens must be greater than or equal to minimumStakingAmount\"\r\n        );\r\n\r\n        _vote.tokenAmount = _vote.tokenAmount.add(tokensAmount);\r\n        _vote.stakesToken.push(tokensAmount);\r\n        _vote.txsTimeToken.push(now);\r\n        stakesByPersonality[personality] = stakesByPersonality[personality].add(\r\n            tokensAmount\r\n        );\r\n\r\n        bool success = token.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokensAmount\r\n        );\r\n\r\n        require(success, \"failed in transferFrom of stakeTokens\");\r\n\r\n        totalStakedAmountToken = totalStakedAmountToken.add(tokensAmount);\r\n\r\n        emit Staked(msg.sender, tokensAmount);\r\n\r\n    }\r\n    /**\r\n        @notice Stake DAI into compound protocol\r\n        @dev user needs to approve the DAI tokens contract first\r\n     */\r\n    function stakeDAI(uint256 daiAmount) external onlyActive {\r\n        VoteDai storage _vote = votesDai[msg.sender];\r\n\r\n        if (_vote.tokenAmount == 0) {\r\n            isDaiVoter[msg.sender] = true;\r\n            votesDai[msg.sender] = VoteDai(0, msg.sender, 0, 0, false);\r\n        }\r\n\r\n        require(\r\n            daiAmount >= minimumStakingAmountToken,\r\n            \"dai must be greater than or equal to minimumStakingAmount\"\r\n        );\r\n\r\n        _vote.tokenAmount = _vote.tokenAmount.add(daiAmount);\r\n        _vote.stakedTimestamp = now;\r\n\r\n        // Transfer tokens from user\r\n        require(\r\n            dai.transferFrom(msg.sender, address(this), daiAmount),\r\n            \"failed in transferFrom of dai Tokens\"\r\n        );\r\n\r\n        // Approve cDai to transfer DAI tokens\r\n        require(\r\n            dai.approve(address(cDai), daiAmount),\r\n            \"failed in approve of dai Tokens\"\r\n        );\r\n\r\n        // Supply to Compound, expect no errors\r\n        assert(cDai.mint(daiAmount) == 0);\r\n\r\n        totalDaiStaked = totalDaiStaked.add(daiAmount);\r\n\r\n        emit StakedDai(msg.sender, daiAmount);\r\n\r\n    }\r\n\r\n    function sendTokens(address[] memory _addresses, uint256[] memory _amounts)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _addresses.length == _amounts.length,\r\n            \"addresses and amounts do not match\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            require(\r\n                token.transfer(_addresses[i], _amounts[i]),\r\n                \"token transfer failed\"\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    @notice this is function is called by the voter to unstake tokens\r\n     */\r\n    function unstake() public {\r\n        require(contractState == true && now > stakeTimeStop, \"cannot unstake\");\r\n\r\n        Vote storage _vote = votes[msg.sender];\r\n\r\n        require(_vote.txsTimeToken.length > 0, \"No stake found by the user\");\r\n\r\n        require(!_vote.withdrawn, \"Stake is already withdrawn\");\r\n\r\n        uint8 winnerPersonality = stakesByPersonality[1] >\r\n            stakesByPersonality[2]\r\n            ? 1\r\n            : 2;\r\n\r\n        uint256 withdrawAmountToken;\r\n\r\n        if (_vote.personalityVoted == winnerPersonality) {\r\n            withdrawAmountToken = _vote.tokenAmount.mul(tokenRewardMultiplier);\r\n        } else {\r\n            withdrawAmountToken = _vote.tokenAmount;\r\n        }\r\n\r\n        _vote.withdrawn = true;\r\n        _vote.unstakedTimestamp = now;\r\n\r\n        bool success = token.transfer(msg.sender, withdrawAmountToken);\r\n\r\n        require(success, \"transfer failed in withdraw\");\r\n\r\n        emit TokensUnstaked(msg.sender, withdrawAmountToken);\r\n    }\r\n\r\n    function calculateInterest(address user) public view returns (uint256) {\r\n        VoteDai storage _vote = votesDai[user];\r\n        uint256 amountToRedeem = _vote.tokenAmount;\r\n        uint256 daysPassed = now.sub(_vote.stakedTimestamp).div(1 days);\r\n\r\n        if (daysPassed < minimumDAIStakingDays) return 0;\r\n\r\n        uint256 tokenInterest = amountToRedeem\r\n            .mul(getDailyAPY())\r\n            .mul(daysPassed)\r\n            .mul(tokenInterestShare)\r\n            .div(tokenPrice)\r\n            .div(100);\r\n\r\n        return tokenInterest;\r\n\r\n    }\r\n\r\n    /**\r\n        @notice Unstake Dai tokens from contract\r\n        @dev this is function is called by the voter to unstake DAI tokens\r\n     */\r\n    function unstakeDAI() external nonReentrant onlyActive {\r\n        VoteDai storage _vote = votesDai[msg.sender];\r\n        uint256 daysPassed = now.sub(_vote.stakedTimestamp).div(1 days);\r\n\r\n        require(\r\n            daysPassed >= minimumDAIStakingDays,\r\n            \"cannot unstake, min days not met\"\r\n        );\r\n\r\n        require(!_vote.withdrawn, \"Stake is already withdrawn\");\r\n\r\n        uint256 amountToRedeem = _vote.tokenAmount;\r\n\r\n        _vote.tokenAmount = 0;\r\n        _vote.withdrawn = true;\r\n        _vote.unstakedTimestamp = now;\r\n\r\n        // Redeem DAI from compound and send back to user\r\n        require(\r\n            cDai.redeemUnderlying(amountToRedeem) == 0,\r\n            \"Cannot redeem from compound\"\r\n        );\r\n        require(\r\n            dai.transfer(msg.sender, amountToRedeem),\r\n            \"transfer failed in withdraw\"\r\n        );\r\n\r\n        // Calculate interest and send it to user\r\n        uint256 tokenAmount = calculateInterest(msg.sender);\r\n        require(\r\n            token.transfer(msg.sender, tokenAmount),\r\n            \"transfer failed in transfer of interes\"\r\n        );\r\n\r\n        emit TokensUnstaked(msg.sender, amountToRedeem);\r\n    }\r\n\r\n    function getDailyAPY() public view returns (uint256) {\r\n        // TODO: check calculation with compound discord team\r\n        return cDai.supplyRatePerBlock().mul(4).mul(60).mul(24);\r\n    }\r\n\r\n    function getStakeInfo(address _voter)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amountToken,\r\n            uint8 personality,\r\n            uint256[] memory txsTimeToken,\r\n            uint256[] memory stakesToken,\r\n            uint256 unstakedTimestamp,\r\n            bool withdrawn\r\n        )\r\n    {\r\n        Vote memory vote = votes[_voter];\r\n\r\n        amountToken = vote.tokenAmount;\r\n        personality = vote.personalityVoted;\r\n        withdrawn = vote.withdrawn;\r\n        unstakedTimestamp = vote.unstakedTimestamp;\r\n        txsTimeToken = vote.txsTimeToken;\r\n        stakesToken = vote.stakesToken;\r\n    }\r\n\r\n    function getDaiStakeInfo(address _voter)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 stakedTimeStamp,\r\n            uint256 unstakedTimestamp,\r\n            bool withdrawn\r\n        )\r\n    {\r\n        VoteDai memory vote = votesDai[_voter];\r\n\r\n        amountToken = vote.tokenAmount;\r\n        withdrawn = vote.withdrawn;\r\n        unstakedTimestamp = vote.unstakedTimestamp;\r\n        stakedTimeStamp = vote.stakedTimestamp;\r\n    }\r\n\r\n    function getAllVoters() public view returns (address[] memory allVoters) {\r\n        allVoters = voters;\r\n    }\r\n\r\n    function getTokenStakeAmountByPersonalityId(uint256 personalityId)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            Vote memory v = votes[voters[i]];\r\n            if (v.personalityVoted == personalityId) {\r\n                amount = amount.add(v.tokenAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContractActive() public view returns (bool) {\r\n        return now >= stakeTimeStart && now <= stakeTimeStop;\r\n    }\r\n\r\n    function isVoter(address _address) internal view returns (bool, uint256) {\r\n        for (uint256 i = 0; i < voters.length; i++) {\r\n            if (_address == voters[i]) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    function addVoter(address _voter) internal {\r\n        (bool _isVoter, ) = isVoter(_voter);\r\n        if (!_isVoter) {\r\n            voters.push(_voter);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // OWNER SETTINGS\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(\r\n            token.transfer(owner(), balance),\r\n            \"Error withdrawing tokens from contract\"\r\n        );\r\n    }\r\n\r\n    function setMinimumStakingAmountToken(uint256 _value) public onlyOwner {\r\n        minimumStakingAmountToken = _value;\r\n    }\r\n\r\n    function setTokenRewardMultiplier(uint256 _value) public onlyOwner {\r\n        tokenRewardMultiplier = _value;\r\n    }\r\n\r\n    function setMinimumDAIStakingDays(uint256 _value) public onlyOwner {\r\n        minimumDAIStakingDays = _value;\r\n    }\r\n\r\n    function setTokenInterestShare(uint256 _value) public onlyOwner {\r\n        tokenInterestShare = _value;\r\n    }\r\n\r\n    function setTokenPrice(uint256 _value) public onlyOwner {\r\n        tokenPrice = _value;\r\n    }\r\n\r\n    function setTokenAddress(uint256 _token) public onlyOwner {\r\n        token = IERC20(_token);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"unstakeDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakedAmountToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakesByPersonality\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumDAIStakingDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVoters\",\"outputs\":[{\"name\":\"allVoters\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinimumDAIStakingDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"personalityId\",\"type\":\"uint256\"}],\"name\":\"getTokenStakeAmountByPersonalityId\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDaiVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenRewardMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"daiAmount\",\"type\":\"uint256\"}],\"name\":\"stakeDAI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInterestShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTokenInterestShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDaiStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getDaiStakeInfo\",\"outputs\":[{\"name\":\"amountToken\",\"type\":\"uint256\"},{\"name\":\"stakedTimeStamp\",\"type\":\"uint256\"},{\"name\":\"unstakedTimestamp\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cDai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakingAmountToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDailyAPY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"name\":\"amountToken\",\"type\":\"uint256\"},{\"name\":\"personality\",\"type\":\"uint8\"},{\"name\":\"txsTimeToken\",\"type\":\"uint256[]\"},{\"name\":\"stakesToken\",\"type\":\"uint256[]\"},{\"name\":\"unstakedTimestamp\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumStakingAmountToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeTimeStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"personality\",\"type\":\"uint8\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRewardMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeTimeStop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_daiToken\",\"type\":\"address\"},{\"name\":\"_cDai\",\"type\":\"address\"},{\"name\":\"_minStakingAmountToken\",\"type\":\"uint256\"},{\"name\":\"_tokenRewardMultiplier\",\"type\":\"uint256\"},{\"name\":\"_minimumDAIStakingDays\",\"type\":\"uint256\"},{\"name\":\"_tokenInterestShare\",\"type\":\"uint256\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeTimeStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stakeTimeStop\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"StakedDai\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"DaiUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TALEVotingBonus","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000444fb48856adba02edb16582f89e82b210cfb4160000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e364300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001","Library":"","LicenseType":"None","SwarmSource":"bzzr://866c6e46285063690ad77a4ce020bc9b91eab826c45fe9920f9ecfb01f868dc7"}]}