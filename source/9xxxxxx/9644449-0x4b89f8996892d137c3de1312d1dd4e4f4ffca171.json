{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n/// @title ERC20 Token Interface\r\n/// @dev see https://github.com/ethereum/EIPs/issues/20\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract ERC20\r\n{\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    function balanceOf(\r\n        address who\r\n        )\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n        )\r\n        public\r\n        view\r\n        returns (uint);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint    value\r\n        )\r\n        public\r\n        returns (bool);\r\n}\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title Utility Functions for addresses\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary AddressUtil\r\n{\r\n    using AddressUtil for *;\r\n\r\n    function isContract(\r\n        address addr\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint32 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return (size > 0);\r\n    }\r\n\r\n    function toPayable(\r\n        address addr\r\n        )\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return address(uint160(addr));\r\n    }\r\n\r\n    // Works like address.send but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETH(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n        address payable recipient = to.toPayable();\r\n        /* solium-disable-next-line */\r\n        (success, ) = recipient.call.value(amount).gas(gasLimit)(\"\");\r\n    }\r\n\r\n    // Works like address.transfer but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETHAndVerify(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        success = to.sendETH(amount, gasLimit);\r\n        require(success, \"TRANSFER_FAILURE\");\r\n    }\r\n}\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/// @title Burnable ERC20 Token Interface\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\ncontract BurnableERC20 is ERC20\r\n{\r\n    function burn(\r\n        uint value\r\n        )\r\n        public\r\n        returns (bool);\r\n\r\n    function burnFrom(\r\n        address from,\r\n        uint value\r\n        )\r\n        public\r\n        returns (bool);\r\n}\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n        public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title ERC20 safe transfer\r\n/// @dev see https://github.com/sec-bit/badERC20Fix\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary ERC20SafeTransfer\r\n{\r\n    function safeTransferAndVerify(\r\n        address token,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n    {\r\n        safeTransferWithGasLimitAndVerify(\r\n            token,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return safeTransferWithGasLimit(\r\n            token,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferWithGasLimitAndVerify(\r\n        address token,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n    {\r\n        require(\r\n            safeTransferWithGasLimit(token, to, value, gasLimit),\r\n            \"TRANSFER_FAILURE\"\r\n        );\r\n    }\r\n\r\n    function safeTransferWithGasLimit(\r\n        address token,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // A transfer is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transfer(address,uint)\")) = 0xa9059cbb\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0xa9059cbb),\r\n            to,\r\n            value\r\n        );\r\n        (bool success, ) = token.call.gas(gasLimit)(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function safeTransferFromAndVerify(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n    {\r\n        safeTransferFromWithGasLimitAndVerify(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return safeTransferFromWithGasLimit(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasleft()\r\n        );\r\n    }\r\n\r\n    function safeTransferFromWithGasLimitAndVerify(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n    {\r\n        bool result = safeTransferFromWithGasLimit(\r\n            token,\r\n            from,\r\n            to,\r\n            value,\r\n            gasLimit\r\n        );\r\n        require(result, \"TRANSFER_FAILURE\");\r\n    }\r\n\r\n    function safeTransferFromWithGasLimit(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint    value,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        // A transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n\r\n        // bytes4(keccak256(\"transferFrom(address,address,uint)\")) = 0x23b872dd\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            bytes4(0x23b872dd),\r\n            from,\r\n            to,\r\n            value\r\n        );\r\n        (bool success, ) = token.call.gas(gasLimit)(callData);\r\n        return checkReturnValue(success);\r\n    }\r\n\r\n    function checkReturnValue(\r\n        bool success\r\n        )\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:\r\n        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)\r\n        // - A single boolean is returned: this boolean needs to be true (non-zero)\r\n        if (success) {\r\n            assembly {\r\n                switch returndatasize()\r\n                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded\r\n                case 0 {\r\n                    success := 1\r\n                }\r\n                // Standard ERC20: a single boolean value is returned which needs to be true\r\n                case 32 {\r\n                    returndatacopy(0, 0, 32)\r\n                    success := mload(0)\r\n                }\r\n                // None of the above: not successful\r\n                default {\r\n                    success := 0\r\n                }\r\n            }\r\n        }\r\n        return success;\r\n    }\r\n}\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n\r\n    function decodeFloat(\r\n        uint f\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint value)\r\n    {\r\n        uint numBitsMantissa = 23;\r\n        uint exponent = f >> numBitsMantissa;\r\n        uint mantissa = f & ((1 << numBitsMantissa) - 1);\r\n        value = mantissa * (10 ** exponent);\r\n    }\r\n}\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title ReentrancyGuard\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Exposes a modifier that guards a function against reentrancy\r\n///      Changing the value of the same storage value multiple times in a transaction\r\n///      is cheap (starting from Istanbul) so there is no need to minimize\r\n///      the number of times the value is changed\r\ncontract ReentrancyGuard\r\n{\r\n    //The default value must be 0 in order to work behind a proxy.\r\n    uint private _guardValue;\r\n\r\n    // Use this modifier on a function to prevent reentrancy\r\n    modifier nonReentrant()\r\n    {\r\n        // Check if the guard value has its original value\r\n        require(_guardValue == 0, \"REENTRANCY\");\r\n\r\n        // Set the value to something else\r\n        _guardValue = 1;\r\n\r\n        // Function body\r\n        _;\r\n\r\n        // Set the value back\r\n        _guardValue = 0;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n\r\n/// @title IProtocolFeeVault\r\n/// @dev This smart contract manages the distribution of protocol fees.\r\n///     Tokens other than LRC will be sold by TokenSeller,\r\n///     If no TokenSeller is set, the tokens or Ether will be sent to the owner\r\n///     to sell them for LRC by other means such as using a centralized exchange.\r\n///     For LRC token, 70% of them can be withdrawn to the UserStakingPool contract\r\n///     to reward LRC stakers; 20% of them can be withdrawn to the Loopring DAO,\r\n///     and the remaining 10% can be burned to reduce LRC's total supply.\r\ncontract IProtocolFeeVault\r\n{\r\n    uint public constant REWARD_PERCENTAGE      = 70;\r\n    uint public constant DAO_PERDENTAGE         = 20;\r\n\r\n    address public userStakingPoolAddress;\r\n    address public lrcAddress;\r\n    address public tokenSellerAddress;\r\n    address public daoAddress;\r\n\r\n    uint claimedReward;\r\n    uint claimedDAOFund;\r\n    uint claimedBurn;\r\n\r\n    event LRCClaimed(uint amount);\r\n    event DAOFunded(uint amountDAO, uint amountBurn);\r\n    event TokenSold(address token, uint amount);\r\n    event SettingsUpdated(uint time);\r\n\r\n    /// @dev Sets depdending contract address. All these addresses can be zero.\r\n    /// @param _userStakingPoolAddress The address of the user staking pool.\r\n    /// @param _tokenSellerAddress The address of the token seller.\r\n    /// @param _daoAddress The address of the DAO contract.\r\n    function updateSettings(\r\n        address _userStakingPoolAddress,\r\n        address _tokenSellerAddress,\r\n        address _daoAddress\r\n        )\r\n        external;\r\n\r\n    /// @dev Claims LRC as staking reward to the IUserStakingPool contract.\r\n    ///      Note that this function can only be called by\r\n    ///      the IUserStakingPool contract.\r\n    ///\r\n    /// @param amount The amount of LRC to be claimed.\r\n    function claimStakingReward(uint amount) external;\r\n\r\n    /// @dev Withdraws LRC to DAO and in the meanwhile burn some LRC according to\r\n    ///      the predefined percentages.\r\n    function fundDAO() external;\r\n\r\n    /// @dev Sells a non-LRC token or Ether to LRC. If no TokenSeller is set,\r\n    ///      the tokens or Ether will be sent to the owner.\r\n    /// @param token The token or ether (0x0) to sell.\r\n    /// @param amount THe amout of token/ether to sell.\r\n    function sellTokenForLRC(\r\n        address token,\r\n        uint    amount\r\n        )\r\n        external;\r\n\r\n    /// @dev Returns some global stats regarding fees.\r\n    /// @return accumulatedFees The accumulated amount of LRC protocol fees.\r\n    /// @return accumulatedBurn The accumulated amount of LRC to burn.\r\n    /// @return accumulatedDAOFund The accumulated amount of LRC as developer pool.\r\n    /// @return accumulatedReward The accumulated amount of LRC as staking reward.\r\n    /// @return remainingFees The remaining amount of LRC protocol fees.\r\n    /// @return remainingBurn The remaining amount of LRC to burn.\r\n    /// @return remainingDAOFund The remaining amount of LRC as developer pool.\r\n    /// @return remainingReward The remaining amount of LRC as staking reward.\r\n    function getProtocolFeeStats()\r\n        public\r\n        view\r\n        returns (\r\n            uint accumulatedFees,\r\n            uint accumulatedBurn,\r\n            uint accumulatedDAOFund,\r\n            uint accumulatedReward,\r\n            uint remainingFees,\r\n            uint remainingBurn,\r\n            uint remainingDAOFund,\r\n            uint remainingReward\r\n        );\r\n}\r\n\r\n/*\r\n\r\n  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\n\r\n/// @title ITokenSeller\r\n/// @dev Use this contract to sell tokenS for as many tokenB.\r\n/// @author Daniel Wang  - <daniel@loopring.org>\r\ncontract ITokenSeller\r\n{\r\n    /// @dev Sells all tokenS for tokenB\r\n    /// @param tokenS The token or Ether (0x0) to sell.\r\n    /// @param tokenB The token to buy.\r\n    /// @return success True if success, false otherwise.\r\n    function sellToken(\r\n        address tokenS,\r\n        address tokenB\r\n        )\r\n        external\r\n        payable\r\n        returns (bool success);\r\n}\r\n\r\n/// @title An Implementation of IProtocolFeeVault.\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract ProtocolFeeVault is Claimable, ReentrancyGuard, IProtocolFeeVault\r\n{\r\n    using AddressUtil       for address;\r\n    using AddressUtil       for address payable;\r\n    using ERC20SafeTransfer for address;\r\n    using MathUint          for uint;\r\n\r\n    constructor(address _lrcAddress)\r\n        Claimable()\r\n        public\r\n    {\r\n        require(_lrcAddress != address(0), \"ZERO_ADDRESS\");\r\n        lrcAddress = _lrcAddress;\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function updateSettings(\r\n        address _userStakingPoolAddress,\r\n        address _tokenSellerAddress,\r\n        address _daoAddress\r\n        )\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(\r\n            userStakingPoolAddress != _userStakingPoolAddress ||\r\n            tokenSellerAddress != _tokenSellerAddress ||\r\n            daoAddress != _daoAddress,\r\n            \"SAME_ADDRESSES\"\r\n        );\r\n        userStakingPoolAddress = _userStakingPoolAddress;\r\n        tokenSellerAddress = _tokenSellerAddress;\r\n        daoAddress = _daoAddress;\r\n\r\n        emit SettingsUpdated(now);\r\n    }\r\n\r\n    function claimStakingReward(\r\n        uint amount\r\n        )\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"ZERO_VALUE\");\r\n        require(msg.sender == userStakingPoolAddress, \"UNAUTHORIZED\");\r\n        lrcAddress.safeTransferAndVerify(userStakingPoolAddress, amount);\r\n        claimedReward = claimedReward.add(amount);\r\n        emit LRCClaimed(amount);\r\n    }\r\n\r\n    function fundDAO()\r\n        external\r\n        nonReentrant\r\n    {\r\n        uint amountDAO;\r\n        uint amountBurn;\r\n        (, , , , , amountBurn, amountDAO, ) = getProtocolFeeStats();\r\n\r\n        address recipient = daoAddress == address(0) ? owner : daoAddress;\r\n\r\n        if (amountDAO > 0) {\r\n            lrcAddress.safeTransferAndVerify(recipient, amountDAO);\r\n        }\r\n\r\n        if (amountBurn > 0) {\r\n            require(BurnableERC20(lrcAddress).burn(amountBurn), \"BURN_FAILURE\");\r\n        }\r\n\r\n        claimedBurn = claimedBurn.add(amountBurn);\r\n        claimedDAOFund = claimedDAOFund.add(amountDAO);\r\n\r\n        emit DAOFunded(amountDAO, amountBurn);\r\n    }\r\n\r\n    function sellTokenForLRC(\r\n        address token,\r\n        uint    amount\r\n        )\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(amount > 0, \"ZERO_AMOUNT\");\r\n        require(token != lrcAddress, \"PROHIBITED\");\r\n\r\n        address recipient = tokenSellerAddress == address(0) ? owner : tokenSellerAddress;\r\n\r\n        if (token == address(0)) {\r\n            recipient.sendETHAndVerify(amount, gasleft());\r\n        } else {\r\n            token.safeTransferAndVerify(recipient, amount);\r\n        }\r\n\r\n        require(\r\n            tokenSellerAddress == address(0) ||\r\n            ITokenSeller(tokenSellerAddress).sellToken(token, lrcAddress),\r\n            \"SELL_FAILURE\"\r\n        );\r\n\r\n        emit TokenSold(token, amount);\r\n    }\r\n\r\n    function getProtocolFeeStats()\r\n        public\r\n        view\r\n        returns (\r\n            uint accumulatedFees,\r\n            uint accumulatedBurn,\r\n            uint accumulatedDAOFund,\r\n            uint accumulatedReward,\r\n            uint remainingFees,\r\n            uint remainingBurn,\r\n            uint remainingDAOFund,\r\n            uint remainingReward\r\n        )\r\n    {\r\n        remainingFees = ERC20(lrcAddress).balanceOf(address(this));\r\n        accumulatedFees = remainingFees.add(claimedReward).add(claimedDAOFund).add(claimedBurn);\r\n\r\n        accumulatedReward = accumulatedFees.mul(REWARD_PERCENTAGE) / 100;\r\n        accumulatedDAOFund = accumulatedFees.mul(DAO_PERDENTAGE) / 100;\r\n        accumulatedBurn = accumulatedFees.sub(accumulatedReward).sub(accumulatedDAOFund);\r\n\r\n        remainingReward = accumulatedReward.sub(claimedReward);\r\n        remainingDAOFund = accumulatedDAOFund.sub(claimedDAOFund);\r\n        remainingBurn = accumulatedBurn.sub(claimedBurn);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lrcAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDAO\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurn\",\"type\":\"uint256\"}],\"name\":\"DAOFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LRCClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAO_PERDENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REWARD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimStakingReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundDAO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProtocolFeeStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedDAOFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingDAOFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lrcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTokenForLRC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSellerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userStakingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"updateSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userStakingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProtocolFeeVault","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bbbbca6a901c926f240b89eacb641d8aec7aeafd","Library":"","LicenseType":"None","SwarmSource":"bzzr://d6c666379e3205e991bbc18c9be175a4567af7fe2545e38a306418a201e40b3b"}]}