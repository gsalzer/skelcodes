{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Project Society Construction and Terraforming Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka)\r\n *\r\n * Copyright ¬©Ô∏è 2018-2020 Galt‚Ä¢Core Blockchain Company\r\n * (Founded by [Nikolai Popeka](https://github.com/npopeka) by\r\n * [Basic Agreement](ipfs/QmaCiXUmSrP16Gz8Jdzq6AJESY1EAANmmwha15uR3c1bsS)).\r\n * \r\n * üåé Galt Project is an international decentralized land and real estate property registry\r\n * governed by DAO (Decentralized autonomous organization) and self-governance platform for communities\r\n * of homeowners on Ethereum.\r\n * \r\n * üè° https://galtproject.io\r\n */\r\n\r\npragma solidity ^0.5.13;\r\n\r\ninterface IHomeMediator {\r\n  function handleBridgedTokens(address _recipient, uint256 _tokenId, bytes calldata _metadata, bytes32 _nonce) external;\r\n}\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates if the contract has been initialized.\r\n   */\r\n  bool public initialized;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   */\r\n  modifier isInitializer() {\r\n    require(!initialized, \"Contract instance has already been initialized\");\r\n    _;\r\n    initialized = true;\r\n  }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract OwnableAndInitializable is Ownable, Initializable {\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   */\r\n  modifier isInitializer() {\r\n    require(!initialized, \"Contract instance has already been initialized\");\r\n    _;\r\n    initialized = true;\r\n    _transferOwnership(tx.origin);\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract. Allow a custom owner setup;\r\n   */\r\n  modifier initializeWithOwner(address _owner) {\r\n    require(!initialized, \"Contract instance has already been initialized\");\r\n    _;\r\n    initialized = true;\r\n    _transferOwnership(_owner);\r\n  }\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ninterface IPPToken {\r\n  event SetBaseURI(string baseURI);\r\n  event SetContractDataLink(string indexed dataLink);\r\n  event SetLegalAgreementIpfsHash(bytes32 legalAgreementIpfsHash);\r\n  event SetController(address indexed controller);\r\n  event SetDetails(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetContour(\r\n    address indexed geoDataManager,\r\n    uint256 indexed privatePropertyId\r\n  );\r\n  event SetHumanAddress(uint256 indexed tokenId, string humanAddress);\r\n  event SetDataLink(uint256 indexed tokenId, string dataLink);\r\n  event SetLedgerIdentifier(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexRootHash(uint256 indexed tokenId, bytes32 ledgerIdentifier);\r\n  event SetVertexStorageLink(uint256 indexed tokenId, string vertexStorageLink);\r\n  event SetArea(uint256 indexed tokenId, uint256 area, AreaSource areaSource);\r\n  event SetExtraData(bytes32 indexed key, bytes32 value);\r\n  event SetPropertyExtraData(uint256 indexed propertyId, bytes32 indexed key, bytes32 value);\r\n  event Mint(address indexed to, uint256 indexed privatePropertyId);\r\n  event Burn(address indexed from, uint256 indexed privatePropertyId);\r\n\r\n  enum AreaSource {\r\n    USER_INPUT,\r\n    CONTRACT\r\n  }\r\n\r\n  enum TokenType {\r\n    NULL,\r\n    LAND_PLOT,\r\n    BUILDING,\r\n    ROOM,\r\n    PACKAGE\r\n  }\r\n\r\n  struct Property {\r\n    uint256 setupStage;\r\n\r\n    // (LAND_PLOT,BUILDING,ROOM) Type cannot be changed after token creation\r\n    TokenType tokenType;\r\n    // Geohash5z (x,y,z)\r\n    uint256[] contour;\r\n    // Meters above the sea\r\n    int256 highestPoint;\r\n\r\n    // USER_INPUT or CONTRACT\r\n    AreaSource areaSource;\r\n    // Calculated either by contract (for land plots and buildings) or by manual input\r\n    // in sq. meters (1 sq. meter == 1 eth)\r\n    uint256 area;\r\n\r\n    bytes32 ledgerIdentifier;\r\n    string humanAddress;\r\n    string dataLink;\r\n\r\n    // Reserved for future use\r\n    bytes32 vertexRootHash;\r\n    string vertexStorageLink;\r\n  }\r\n\r\n  // PERMISSIONED METHODS\r\n\r\n  function setContractDataLink(string calldata _dataLink) external;\r\n  function setLegalAgreementIpfsHash(bytes32 _legalAgreementIpfsHash) external;\r\n  function setController(address payable _controller) external;\r\n  function setDetails(\r\n    uint256 _tokenId,\r\n    TokenType _tokenType,\r\n    AreaSource _areaSource,\r\n    uint256 _area,\r\n    bytes32 _ledgerIdentifier,\r\n    string calldata _humanAddress,\r\n    string calldata _dataLink\r\n  )\r\n    external;\r\n\r\n  function setContour(\r\n    uint256 _tokenId,\r\n    uint256[] calldata _contour,\r\n    int256 _highestPoint\r\n  )\r\n    external;\r\n\r\n  function setArea(uint256 _tokenId, uint256 _area, AreaSource _areaSource) external;\r\n  function setLedgerIdentifier(uint256 _tokenId, bytes32 _ledgerIdentifier) external;\r\n  function setDataLink(uint256 _tokenId, string calldata _dataLink) external;\r\n  function setVertexRootHash(uint256 _tokenId, bytes32 _vertexRootHash) external;\r\n  function setVertexStorageLink(uint256 _tokenId, string calldata _vertexStorageLink) external;\r\n  function setExtraData(bytes32 _key, bytes32 _value) external;\r\n  function setPropertyExtraData(uint256 _tokenId, bytes32 _key, bytes32 _value) external;\r\n\r\n  function incrementSetupStage(uint256 _tokenId) external;\r\n\r\n  function mint(address _to) external returns (uint256);\r\n  function burn(uint256 _tokenId) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  // GETTERS\r\n  function controller() external view returns (address payable);\r\n  function extraData(bytes32 _key) external view returns (bytes32);\r\n  function propertyExtraData(uint256 _tokenId, bytes32 _key) external view returns (bytes32);\r\n  function propertyCreatedAt(uint256 _tokenId) external view returns (uint256);\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n  function ownerOf(uint256 _tokenId) external view returns (address);\r\n  function exists(uint256 _tokenId) external view returns (bool);\r\n  function getType(uint256 _tokenId) external view returns (TokenType);\r\n  function getContour(uint256 _tokenId) external view returns (uint256[] memory);\r\n  function getContourLength(uint256 _tokenId) external view returns (uint256);\r\n  function getHighestPoint(uint256 _tokenId) external view returns (int256);\r\n  function getHumanAddress(uint256 _tokenId) external view returns (string memory);\r\n  function getArea(uint256 _tokenId) external view returns (uint256);\r\n  function getAreaSource(uint256 _tokenId) external view returns (AreaSource);\r\n  function getLedgerIdentifier(uint256 _tokenId) external view returns (bytes32);\r\n  function getDataLink(uint256 _tokenId) external view returns (string memory);\r\n  function getVertexRootHash(uint256 _tokenId) external view returns (bytes32);\r\n  function getVertexStorageLink(uint256 _tokenId) external view returns (string memory);\r\n  function getSetupStage(uint256 _tokenId) external view returns (uint256);\r\n  function getDetails(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (\r\n      TokenType tokenType,\r\n      uint256[] memory contour,\r\n      int256 highestPoint,\r\n      AreaSource areaSource,\r\n      uint256 area,\r\n      bytes32 ledgerIdentifier,\r\n      string memory humanAddress,\r\n      string memory dataLink,\r\n      uint256 setupStage,\r\n      bytes32 vertexRootHash,\r\n      string memory vertexStorageLink\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ncontract ERC721Bridge {\r\n  event SetERC721Token(address token);\r\n\r\n  bytes32 internal constant ERC721_TOKEN = keccak256(abi.encodePacked(\"erc721token\"));\r\n\r\n  address public erc721Token;\r\n\r\n  function _setErc721token(address _token) internal {\r\n    require(Address.isContract(_token), \"Address should be a contract\");\r\n    erc721Token = _token;\r\n\r\n    emit SetERC721Token(_token);\r\n  }\r\n}\r\n\r\ninterface IAMB {\r\n  function messageSender() external view returns (address);\r\n  function maxGasPerTx() external view returns (uint256);\r\n  function transactionHash() external view returns (bytes32);\r\n  function messageCallStatus(bytes32 _txHash) external view returns (bool);\r\n  function failedMessageDataHash(bytes32 _txHash) external view returns (bytes32);\r\n  function failedMessageReceiver(bytes32 _txHash) external view returns (address);\r\n  function failedMessageSender(bytes32 _txHash) external view returns (address);\r\n  function requireToPassMessage(address _contract, bytes calldata _data, uint256 _gas) external;\r\n}\r\n\r\ncontract AMBMediator is Ownable {\r\n  event SetBridgeContract(address bridgeContract);\r\n  event SetMediatorContractOnOtherSide(address mediatorContract);\r\n  event SetRequestGasLimit(uint256 requestGasLimit);\r\n\r\n  uint256 public oppositeChainId;\r\n  IAMB public bridgeContract;\r\n  address public mediatorContractOnOtherSide;\r\n  uint256 public requestGasLimit;\r\n\r\n  // OWNER INTERFACE\r\n\r\n  function setBridgeContract(address _bridgeContract) external onlyOwner {\r\n    _setBridgeContract(_bridgeContract);\r\n  }\r\n\r\n  function setMediatorContractOnOtherSide(address _mediatorContract) external onlyOwner {\r\n    _setMediatorContractOnOtherSide(_mediatorContract);\r\n  }\r\n\r\n  function setRequestGasLimit(uint256 _requestGasLimit) external onlyOwner {\r\n    _setRequestGasLimit(_requestGasLimit);\r\n  }\r\n\r\n  // INTERNAL\r\n\r\n  function _setBridgeContract(address _bridgeContract) internal {\r\n    require(Address.isContract(_bridgeContract), \"Address should be a contract\");\r\n    bridgeContract = IAMB(_bridgeContract);\r\n\r\n    emit SetBridgeContract(_bridgeContract);\r\n  }\r\n\r\n  function _setMediatorContractOnOtherSide(address _mediatorContract) internal {\r\n    mediatorContractOnOtherSide = _mediatorContract;\r\n\r\n    emit SetMediatorContractOnOtherSide(_mediatorContract);\r\n  }\r\n\r\n  function _setRequestGasLimit(uint256 _requestGasLimit) internal {\r\n    require(_requestGasLimit <= bridgeContract.maxGasPerTx(), \"Gas value exceeds bridge limit\");\r\n    requestGasLimit = _requestGasLimit;\r\n\r\n    emit SetRequestGasLimit(_requestGasLimit);\r\n  }\r\n}\r\n\r\ncontract BasicMediator is AMBMediator, ERC721Bridge, OwnableAndInitializable {\r\n  event RequestFailedMessageFix(bytes32 indexed txHash);\r\n  event FailedMessageFixed(bytes32 indexed dataHash, address recipient, uint256 tokenId);\r\n\r\n  bytes4 internal constant GET_DETAILS = 0xb93a89f7; // getDetails(uint256)\r\n\r\n  bytes32 internal nonce;\r\n  mapping(bytes32 => uint256) internal messageHashTokenId;\r\n  mapping(bytes32 => address) internal messageHashRecipient;\r\n  mapping(bytes32 => bool) public messageHashFixed;\r\n\r\n  function initialize(\r\n    address _bridgeContract,\r\n    address _mediatorContractOnOtherSide,\r\n    address _erc721token,\r\n    uint256 _requestGasLimit,\r\n    uint256 _oppositeChainId,\r\n    address _owner\r\n  )\r\n    external\r\n    initializeWithOwner(_owner)\r\n    returns (bool)\r\n  {\r\n    _setBridgeContract(_bridgeContract);\r\n    _setMediatorContractOnOtherSide(_mediatorContractOnOtherSide);\r\n    _setErc721token(_erc721token);\r\n    _setRequestGasLimit(_requestGasLimit);\r\n\r\n    oppositeChainId = _oppositeChainId;\r\n\r\n    setNonce(keccak256(abi.encodePacked(address(this))));\r\n\r\n    return true;\r\n  }\r\n\r\n  // ABSTRACT METHODS\r\n\r\n  function fixFailedMessage(bytes32 _dataHash) external;\r\n\r\n  function bridgeSpecificActionsOnTokenTransfer(address _from, uint256 _tokenId) internal;\r\n\r\n  // INFO GETTERS\r\n\r\n  function getBridgeInterfacesVersion() external pure returns (uint64 major, uint64 minor, uint64 patch) {\r\n    return (1, 0, 0);\r\n  }\r\n\r\n  function getBridgeMode() external pure returns (bytes4 _data) {\r\n    return bytes4(keccak256(abi.encodePacked(\"nft-to-nft-amb\")));\r\n  }\r\n\r\n  // USER INTERFACE\r\n\r\n  function transferToken(address _from, uint256 _tokenId) external {\r\n    address to = address(this);\r\n\r\n    IERC721(erc721Token).transferFrom(_from, to, _tokenId);\r\n    bridgeSpecificActionsOnTokenTransfer(_from, _tokenId);\r\n  }\r\n\r\n  function getMetadata(uint256 _tokenId) public view returns (bytes memory metadata) {\r\n    bytes memory callData = abi.encodeWithSelector(GET_DETAILS, _tokenId);\r\n    address tokenAddress = address(erc721Token);\r\n    uint256 size;\r\n\r\n    assembly {\r\n      let result := staticcall(gas, tokenAddress, add(callData, 0x20), mload(callData), 0, 0)\r\n      size := returndatasize\r\n\r\n      switch result\r\n      case 0 { revert(0, 0) }\r\n    }\r\n\r\n    metadata = new bytes(size);\r\n\r\n    assembly {\r\n      returndatacopy(add(metadata, 0x20), 0, size)\r\n    }\r\n  }\r\n\r\n  function setNonce(bytes32 _hash) internal {\r\n    nonce = _hash;\r\n  }\r\n\r\n  function setMessageHashTokenId(bytes32 _hash, uint256 _tokenId) internal {\r\n    messageHashTokenId[_hash] = _tokenId;\r\n  }\r\n\r\n  function setMessageHashRecipient(bytes32 _hash, address _recipient) internal {\r\n    messageHashRecipient[_hash] = _recipient;\r\n  }\r\n\r\n  function setMessageHashFixed(bytes32 _hash) internal {\r\n    messageHashFixed[_hash] = true;\r\n  }\r\n\r\n  function requestFailedMessageFix(bytes32 _txHash) external {\r\n    require(!bridgeContract.messageCallStatus(_txHash), \"No fix required\");\r\n    require(bridgeContract.failedMessageReceiver(_txHash) == address(this), \"Invalid receiver\");\r\n    require(bridgeContract.failedMessageSender(_txHash) == mediatorContractOnOtherSide, \"Invalid sender\");\r\n    bytes32 dataHash = bridgeContract.failedMessageDataHash(_txHash);\r\n\r\n    bytes4 methodSelector = this.fixFailedMessage.selector;\r\n    bytes memory data = abi.encodeWithSelector(methodSelector, dataHash);\r\n    bridgeContract.requireToPassMessage(mediatorContractOnOtherSide, data, requestGasLimit);\r\n\r\n    emit RequestFailedMessageFix(_txHash);\r\n  }\r\n}\r\n\r\ncontract PPForeignMediator is BasicMediator {\r\n  bytes32 public constant LOCKER_TYPE = bytes32(\"MEDIATOR\");\r\n\r\n  function passMessage(address _from, uint256 _tokenId) internal {\r\n    bytes memory metadata = getMetadata(_tokenId);\r\n\r\n    bytes4 methodSelector = IHomeMediator(0).handleBridgedTokens.selector;\r\n    bytes memory data = abi.encodeWithSelector(methodSelector, _from, _tokenId, metadata, nonce);\r\n\r\n    bytes32 dataHash = keccak256(data);\r\n    setMessageHashTokenId(dataHash, _tokenId);\r\n    setMessageHashRecipient(dataHash, _from);\r\n    setNonce(dataHash);\r\n\r\n    bridgeContract.requireToPassMessage(mediatorContractOnOtherSide, data, requestGasLimit);\r\n  }\r\n\r\n  function handleBridgedTokens(\r\n    address _recipient,\r\n    uint256 _tokenId,\r\n    bytes32 /* _nonce */\r\n  )\r\n    external\r\n  {\r\n    require(msg.sender == address(bridgeContract), \"Only bridge allowed\");\r\n    require(bridgeContract.messageSender() == mediatorContractOnOtherSide, \"Invalid contract on other side\");\r\n    IERC721(erc721Token).transferFrom(address(this), _recipient, _tokenId);\r\n  }\r\n\r\n  function bridgeSpecificActionsOnTokenTransfer(address _from, uint256 _tokenId) internal {\r\n    passMessage(_from, _tokenId);\r\n  }\r\n\r\n  function fixFailedMessage(bytes32 _dataHash) external {\r\n    require(msg.sender == address(bridgeContract), \"Only bridge allowed\");\r\n    require(bridgeContract.messageSender() == mediatorContractOnOtherSide, \"Invalid contract on other side\");\r\n    require(!messageHashFixed[_dataHash], \"Already fixed\");\r\n\r\n    address recipient = messageHashRecipient[_dataHash];\r\n    uint256 tokenId = messageHashTokenId[_dataHash];\r\n\r\n    setMessageHashFixed(_dataHash);\r\n    IERC721(erc721Token).transferFrom(address(this), recipient, tokenId);\r\n\r\n    emit FailedMessageFixed(_dataHash, recipient, tokenId);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"FailedMessageFixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"RequestFailedMessageFix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeContract\",\"type\":\"address\"}],\"name\":\"SetBridgeContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetERC721Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mediatorContract\",\"type\":\"address\"}],\"name\":\"SetMediatorContractOnOtherSide\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestGasLimit\",\"type\":\"uint256\"}],\"name\":\"SetRequestGasLimit\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCKER_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeContract\",\"outputs\":[{\"internalType\":\"contract IAMB\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"}],\"name\":\"fixFailedMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"handleBridgedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mediatorContractOnOtherSide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oppositeChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mediatorContractOnOtherSide\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messageHashFixed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oppositeChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"requestFailedMessageFix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeContract\",\"type\":\"address\"}],\"name\":\"setBridgeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mediatorContract\",\"type\":\"address\"}],\"name\":\"setMediatorContractOnOtherSide\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestGasLimit\",\"type\":\"uint256\"}],\"name\":\"setRequestGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PPForeignMediator","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://32d47d4bcac34f6fc6a994f50e0324db42a94adc784778bb24b7c7d9e55c9a05"}]}