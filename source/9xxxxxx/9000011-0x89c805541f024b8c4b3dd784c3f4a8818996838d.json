{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n}\r\n\r\ninterface CdpsLike {\r\n    function getCdpsAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n    function gem(bytes32, address) external view returns (uint);\r\n}\r\n\r\ninterface JugLike {\r\n    function ilks(bytes32) external view returns (uint, uint);\r\n    function base() external view returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function dsr() external view returns (uint);\r\n    function pie(address) external view returns (uint);\r\n    function chi() external view returns (uint);\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (PipLike, uint);\r\n}\r\n\r\ninterface PipLike {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function daiJoin() external view returns (address);\r\n    function vat() external view returns (address);\r\n    function jug() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function gov() external view returns (address);\r\n    function adm() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function esm() external view returns (address);\r\n    function mcdFlap() external view returns (address);\r\n    function mcdFlop() external view returns (address);\r\n    function mcdDeploy() external view returns (address);\r\n    function mcdEnd() external view returns (address);\r\n    function proxyActions() external view returns (address);\r\n    function proxyActionsEnd() external view returns (address);\r\n    function proxyActionsDsr() external view returns (address);\r\n    function getCdps() external view returns (address);\r\n    function saiTub() external view returns (address);\r\n    function weth() external view returns (address);\r\n    function bat() external view returns (address);\r\n    function sai() external view returns (address);\r\n    function ethAJoin() external view returns (address);\r\n    function ethAFlip() external view returns (address);\r\n    function batAJoin() external view returns (address);\r\n    function batAFlip() external view returns (address);\r\n    function ethPip() external view returns (address);\r\n    function batAPip() external view returns (address);\r\n    function saiJoin() external view returns (address);\r\n    function saiFlip() external view returns (address);\r\n    function saiPip() external view returns (address);\r\n    function migration() external view returns (address payable);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address mcd) {\r\n        mcd = 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0;\r\n    }\r\n\r\n\r\n    struct CdpData {\r\n        uint id;\r\n        address owner;\r\n        bytes32 ilk;\r\n        uint ink;\r\n        uint art;\r\n        uint debt;\r\n        uint liqInk;\r\n        uint stabiltyRate;\r\n        uint price;\r\n        uint liqRatio;\r\n        address urn;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract McdResolver is Helpers {\r\n    function getDsr() external view returns (uint dsr) {\r\n        address pot = InstaMcdAddress(getMcdAddresses()).pot();\r\n        dsr = PotLike(pot).dsr();\r\n    }\r\n\r\n    function getDaiDeposited(address owner) external view returns (uint amt) {\r\n        address pot = InstaMcdAddress(getMcdAddresses()).pot();\r\n        uint chi = PotLike(pot).chi();\r\n        uint pie = PotLike(pot).pie(owner);\r\n        amt = rmul(pie,chi);\r\n    }\r\n\r\n    function getCdpsByAddress(address owner) external view returns (CdpData[] memory) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address cdpManger = InstaMcdAddress(getMcdAddresses()).getCdps();\r\n\r\n        (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) = CdpsLike(cdpManger).getCdpsAsc(manager, owner);\r\n        CdpData[] memory cdps = new CdpData[](ids.length);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            (uint ink, uint art) = VatLike(ManagerLike(manager).vat()).urns(ilks[i], urns[i]);\r\n            (,uint rate, uint priceMargin,,) = VatLike(ManagerLike(manager).vat()).ilks(ilks[i]);\r\n            uint mat = getIlkRatio(ilks[i]);\r\n\r\n            cdps[i] = CdpData(\r\n                ids[i],\r\n                owner,\r\n                ilks[i],\r\n                ink,\r\n                art,\r\n                 rmul(art,rate),\r\n                VatLike(ManagerLike(manager).vat()).gem(ilks[i], urns[i]),\r\n                getFee(ilks[i]),\r\n                rmul(priceMargin, mat),\r\n                mat,\r\n                urns[i]\r\n            );\r\n        }\r\n        return cdps;\r\n    }\r\n\r\n    function getCdpsById(uint id) external view returns (CdpData memory) {\r\n        address manager = InstaMcdAddress(getMcdAddresses()).manager();\r\n        address urn = ManagerLike(manager).urns(id);\r\n        bytes32 ilk = ManagerLike(manager).ilks(id);\r\n        address owner = ManagerLike(manager).owns(id);\r\n\r\n        (uint ink, uint art) = VatLike(ManagerLike(manager).vat()).urns(ilk, urn);\r\n        (,uint rate, uint priceMargin,,) = VatLike(ManagerLike(manager).vat()).ilks(ilk);\r\n        uint debt = rmul(art,rate);\r\n\r\n        uint mat = getIlkRatio(ilk);\r\n\r\n\r\n        uint feeRate = getFee(ilk);\r\n        CdpData memory cdp = CdpData(\r\n            id,\r\n            owner,\r\n            ilk,\r\n            ink,\r\n            art,\r\n            debt,\r\n            VatLike(ManagerLike(manager).vat()).gem(ilk, urn),\r\n            feeRate,\r\n            rmul(priceMargin, mat),\r\n            mat,\r\n            urn\r\n        );\r\n        return cdp;\r\n    }\r\n\r\n    function getFee(bytes32 ilk) public view returns (uint fee) {\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        (uint duty,) = JugLike(jug).ilks(ilk);\r\n        uint base = JugLike(jug).base();\r\n        fee = add(duty, base);\r\n    }\r\n\r\n    function getIlkPrice(bytes32 ilk) public view returns (uint price) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        address vat = InstaMcdAddress(getMcdAddresses()).vat();\r\n        (, uint mat) = SpotLike(spot).ilks(ilk);\r\n        (,,uint spotPrice,,) = VatLike(vat).ilks(ilk);\r\n        price = rmul(mat, spotPrice);\r\n    }\r\n\r\n    function getIlkRatio(bytes32 ilk) public view returns (uint ratio) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        (, ratio) = SpotLike(spot).ilks(ilk);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getDsr\",\"outputs\":[{\"name\":\"dsr\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"getIlkPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDaiDeposited\",\"outputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"getIlkRatio\",\"outputs\":[{\"name\":\"ratio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCdpsByAddress\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"ilk\",\"type\":\"bytes32\"},{\"name\":\"ink\",\"type\":\"uint256\"},{\"name\":\"art\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"liqInk\",\"type\":\"uint256\"},{\"name\":\"stabiltyRate\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"liqRatio\",\"type\":\"uint256\"},{\"name\":\"urn\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMcdAddresses\",\"outputs\":[{\"name\":\"mcd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCdpsById\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"ilk\",\"type\":\"bytes32\"},{\"name\":\"ink\",\"type\":\"uint256\"},{\"name\":\"art\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"liqInk\",\"type\":\"uint256\"},{\"name\":\"stabiltyRate\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"liqRatio\",\"type\":\"uint256\"},{\"name\":\"urn\",\"type\":\"address\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"getFee\",\"outputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"McdResolver","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"MIT","SwarmSource":"bzzr://a48e1e18dfa9516592de2d174f222ea6eda23c28b862095474fd3b4911fa2b9f"}]}