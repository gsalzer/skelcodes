{"status":"1","message":"OK","result":[{"SourceCode":"/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n\n* Synthetix: DelegateApprovals.sol\n*\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/DelegateApprovals.sol\n* Docs: https://docs.synthetix.io/contracts/DelegateApprovals\n*\n* Contract Dependencies: \n*\t- Owned\n*\t- State\n* Libraries: (none)\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n/* ===============================================\n* Flattened with Solidifier by Coinage\n* \n* https://solidifier.coina.ge\n* ===============================================\n*/\n\n\npragma solidity 0.4.25;\n\n\n// https://docs.synthetix.io/contracts/Owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    /**\n     * @dev Owned Constructor\n     */\n    constructor(address _owner) public {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    /**\n     * @notice Nominate a new owner of this contract.\n     * @dev Only the current owner may nominate a new owner.\n     */\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    /**\n     * @notice Accept the nomination to be owner.\n     */\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n        _;\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n\n// https://docs.synthetix.io/contracts/State\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n    constructor(address _owner, address _associatedContract) public Owned(_owner) {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract) external onlyOwner {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\n/**\n * @notice  This contract is based on the code available from this blog\n * https://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88/\n * Implements support for storing a keccak256 key and value pairs. It is the more flexible\n * and extensible option. This ensures data schema changes can be implemented without\n * requiring upgrades to the storage contract.\n */\n// https://docs.synthetix.io/contracts/EternalStorage\ncontract EternalStorage is State {\n    constructor(address _owner, address _associatedContract) public State(_owner, _associatedContract) {}\n\n    /* ========== DATA TYPES ========== */\n    mapping(bytes32 => uint) UIntStorage;\n    mapping(bytes32 => string) StringStorage;\n    mapping(bytes32 => address) AddressStorage;\n    mapping(bytes32 => bytes) BytesStorage;\n    mapping(bytes32 => bytes32) Bytes32Storage;\n    mapping(bytes32 => bool) BooleanStorage;\n    mapping(bytes32 => int) IntStorage;\n\n    // UIntStorage;\n    function getUIntValue(bytes32 record) external view returns (uint) {\n        return UIntStorage[record];\n    }\n\n    function setUIntValue(bytes32 record, uint value) external onlyAssociatedContract {\n        UIntStorage[record] = value;\n    }\n\n    function deleteUIntValue(bytes32 record) external onlyAssociatedContract {\n        delete UIntStorage[record];\n    }\n\n    // StringStorage\n    function getStringValue(bytes32 record) external view returns (string memory) {\n        return StringStorage[record];\n    }\n\n    function setStringValue(bytes32 record, string value) external onlyAssociatedContract {\n        StringStorage[record] = value;\n    }\n\n    function deleteStringValue(bytes32 record) external onlyAssociatedContract {\n        delete StringStorage[record];\n    }\n\n    // AddressStorage\n    function getAddressValue(bytes32 record) external view returns (address) {\n        return AddressStorage[record];\n    }\n\n    function setAddressValue(bytes32 record, address value) external onlyAssociatedContract {\n        AddressStorage[record] = value;\n    }\n\n    function deleteAddressValue(bytes32 record) external onlyAssociatedContract {\n        delete AddressStorage[record];\n    }\n\n    // BytesStorage\n    function getBytesValue(bytes32 record) external view returns (bytes memory) {\n        return BytesStorage[record];\n    }\n\n    function setBytesValue(bytes32 record, bytes value) external onlyAssociatedContract {\n        BytesStorage[record] = value;\n    }\n\n    function deleteBytesValue(bytes32 record) external onlyAssociatedContract {\n        delete BytesStorage[record];\n    }\n\n    // Bytes32Storage\n    function getBytes32Value(bytes32 record) external view returns (bytes32) {\n        return Bytes32Storage[record];\n    }\n\n    function setBytes32Value(bytes32 record, bytes32 value) external onlyAssociatedContract {\n        Bytes32Storage[record] = value;\n    }\n\n    function deleteBytes32Value(bytes32 record) external onlyAssociatedContract {\n        delete Bytes32Storage[record];\n    }\n\n    // BooleanStorage\n    function getBooleanValue(bytes32 record) external view returns (bool) {\n        return BooleanStorage[record];\n    }\n\n    function setBooleanValue(bytes32 record, bool value) external onlyAssociatedContract {\n        BooleanStorage[record] = value;\n    }\n\n    function deleteBooleanValue(bytes32 record) external onlyAssociatedContract {\n        delete BooleanStorage[record];\n    }\n\n    // IntStorage\n    function getIntValue(bytes32 record) external view returns (int) {\n        return IntStorage[record];\n    }\n\n    function setIntValue(bytes32 record, int value) external onlyAssociatedContract {\n        IntStorage[record] = value;\n    }\n\n    function deleteIntValue(bytes32 record) external onlyAssociatedContract {\n        delete IntStorage[record];\n    }\n}\n\n\n// https://docs.synthetix.io/contracts/DelegateApprovals\ncontract DelegateApprovals is Owned {\n    bytes32 public constant BURN_FOR_ADDRESS = \"BurnForAddress\";\n    bytes32 public constant ISSUE_FOR_ADDRESS = \"IssueForAddress\";\n    bytes32 public constant CLAIM_FOR_ADDRESS = \"ClaimForAddress\";\n    bytes32 public constant EXCHANGE_FOR_ADDRESS = \"ExchangeForAddress\";\n    bytes32 public constant APPROVE_ALL = \"ApproveAll\";\n\n    bytes32[5] private _delegatableFunctions = [\n        APPROVE_ALL,\n        BURN_FOR_ADDRESS,\n        ISSUE_FOR_ADDRESS,\n        CLAIM_FOR_ADDRESS,\n        EXCHANGE_FOR_ADDRESS\n    ];\n\n    /* ========== STATE VARIABLES ========== */\n    EternalStorage public eternalStorage;\n\n    /**\n     * @dev Constructor\n     * @param _owner The address which controls this contract.\n     * @param _eternalStorage The eternalStorage address.\n     */\n    constructor(address _owner, EternalStorage _eternalStorage) public Owned(_owner) {\n        eternalStorage = _eternalStorage;\n    }\n\n    /* ========== VIEWS ========== */\n\n    // Move it to setter and associatedState\n\n    // util to get key based on action name + address of authoriser + address for delegate\n    function _getKey(bytes32 _action, address _authoriser, address _delegate) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_action, _authoriser, _delegate));\n    }\n\n    // hash of actionName + address of authoriser + address for the delegate\n    function canBurnFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(BURN_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function canIssueFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(ISSUE_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function canClaimFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(CLAIM_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function canExchangeFor(address authoriser, address delegate) external view returns (bool) {\n        return _checkApproval(EXCHANGE_FOR_ADDRESS, authoriser, delegate);\n    }\n\n    function approvedAll(address authoriser, address delegate) public view returns (bool) {\n        return eternalStorage.getBooleanValue(_getKey(APPROVE_ALL, authoriser, delegate));\n    }\n\n    // internal function to check approval based on action\n    // if approved for all actions then will return true\n    // before checking specific approvals\n    function _checkApproval(bytes32 action, address authoriser, address delegate) internal view returns (bool) {\n        if (approvedAll(authoriser, delegate)) return true;\n\n        return eternalStorage.getBooleanValue(_getKey(action, authoriser, delegate));\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Approve All\n    function approveAllDelegatePowers(address delegate) external {\n        _setApproval(APPROVE_ALL, msg.sender, delegate);\n    }\n\n    // Removes all delegate approvals\n    function removeAllDelegatePowers(address delegate) external {\n        for (uint i = 0; i < _delegatableFunctions.length; i++) {\n            _withdrawApproval(_delegatableFunctions[i], msg.sender, delegate);\n        }\n    }\n\n    // Burn on behalf\n    function approveBurnOnBehalf(address delegate) external {\n        _setApproval(BURN_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeBurnOnBehalf(address delegate) external {\n        _withdrawApproval(BURN_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    // Issue on behalf\n    function approveIssueOnBehalf(address delegate) external {\n        _setApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeIssueOnBehalf(address delegate) external {\n        _withdrawApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    // Claim on behalf\n    function approveClaimOnBehalf(address delegate) external {\n        _setApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeClaimOnBehalf(address delegate) external {\n        _withdrawApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    // Exchange on behalf\n    function approveExchangeOnBehalf(address delegate) external {\n        _setApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function removeExchangeOnBehalf(address delegate) external {\n        _withdrawApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);\n    }\n\n    function _setApproval(bytes32 action, address authoriser, address delegate) internal {\n        require(delegate != address(0), \"Can't delegate to address(0)\");\n        eternalStorage.setBooleanValue(_getKey(action, authoriser, delegate), true);\n        emit Approval(authoriser, delegate, action);\n    }\n\n    function _withdrawApproval(bytes32 action, address authoriser, address delegate) internal {\n        // Check approval is set otherwise skip deleting approval\n        if (eternalStorage.getBooleanValue(_getKey(action, authoriser, delegate))) {\n            eternalStorage.deleteBooleanValue(_getKey(action, authoriser, delegate));\n            emit WithdrawApproval(authoriser, delegate, action);\n        }\n    }\n\n    function setEternalStorage(EternalStorage _eternalStorage) external onlyOwner {\n        require(_eternalStorage != address(0), \"Can't set eternalStorage to address(0)\");\n        eternalStorage = _eternalStorage;\n        emit EternalStorageUpdated(eternalStorage);\n    }\n\n    /* ========== EVENTS ========== */\n    event Approval(address indexed authoriser, address delegate, bytes32 action);\n    event WithdrawApproval(address indexed authoriser, address delegate, bytes32 action);\n    event EternalStorageUpdated(address newEternalStorage);\n}\n\n\n    ","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"authoriser\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canIssueFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authoriser\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canClaimFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISSUE_FOR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"approveClaimOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeIssueOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"approveExchangeOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeBurnOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeClaimOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeAllDelegatePowers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authoriser\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canBurnFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eternalStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"approveBurnOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APPROVE_ALL\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"approveIssueOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authoriser\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"approvedAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eternalStorage\",\"type\":\"address\"}],\"name\":\"setEternalStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeExchangeOnBehalf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"approveAllDelegatePowers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_FOR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_FOR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_FOR_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authoriser\",\"type\":\"address\"},{\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canExchangeFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_eternalStorage\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authoriser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authoriser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"WithdrawApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newEternalStorage\",\"type\":\"address\"}],\"name\":\"EternalStorageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"DelegateApprovals","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000de910777c787903f78c89e7a0bf7f4c435cbb1fe0000000000000000000000008f586f063ffbb89b186c8e604fc6614766f9c9d1","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"","SwarmSource":""}]}