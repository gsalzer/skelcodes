{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address user) external view returns (bool);\r\n    function sheild() external view returns (bool);\r\n    function version() external view returns (uint);\r\n}\r\n\r\ninterface ListInterface {\r\n    struct UserLink {\r\n        uint64 first;\r\n        uint64 last;\r\n        uint64 count;\r\n    }\r\n\r\n    struct UserList {\r\n        uint64 prev;\r\n        uint64 next;\r\n    }\r\n\r\n    struct AccountLink {\r\n        address first;\r\n        address last;\r\n        uint64 count;\r\n    }\r\n\r\n    struct AccountList {\r\n        address prev;\r\n        address next;\r\n    }\r\n\r\n    function accounts() external view returns (uint);\r\n    function accountID(address) external view returns (uint64);\r\n    function accountAddr(uint64) external view returns (address);\r\n    function userLink(address) external view returns (UserLink memory);\r\n    function userList(address, uint64) external view returns (UserList memory);\r\n    function accountLink(uint64) external view returns (AccountLink memory);\r\n    function accountList(uint64, address) external view returns (AccountList memory);\r\n\r\n}\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n    function list() external view returns (address);\r\n    function connectors(uint) external view returns (address);\r\n    function account(uint) external view returns (address);\r\n    function check(uint) external view returns (address);\r\n    function versionCount() external view returns (uint);\r\n\r\n}\r\n\r\ninterface ConnectorsInterface {\r\n    struct List {\r\n        address prev;\r\n        address next;\r\n    }\r\n    function chief(address) external view returns (bool);\r\n    function connectors(address) external view returns (bool);\r\n    function staticConnectors(address) external view returns (bool);\r\n\r\n    function connectorArray(uint) external view returns (address);\r\n    function connectorLength() external view returns (uint);\r\n    function staticConnectorArray(uint) external view returns (address);\r\n    function staticConnectorLength() external view returns (uint);\r\n    function connectorCount() external view returns (uint);\r\n\r\n    function isConnector(address[] calldata _connectors) external view returns (bool isOk);\r\n    function isStaticConnector(address[] calldata _connectors) external view returns (bool isOk);\r\n\r\n}\r\n\r\ninterface ConnectorInterface {\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract Helpers {\r\n    address public index;\r\n    address public list;\r\n    address public connectors;\r\n    IndexInterface indexContract;\r\n    ListInterface listContract;\r\n    ConnectorsInterface connectorsContract;\r\n}\r\n\r\ncontract AccountResolver is Helpers {\r\n\r\n    function getID(address account) public view returns(uint id){\r\n        return listContract.accountID(account);\r\n    }\r\n\r\n    function getAccount(uint64 id) public view returns(address account){\r\n        return listContract.accountAddr(uint64(id));\r\n    }\r\n\r\n    function getAuthorityIDs(address authority) public view returns(uint64[] memory){\r\n        ListInterface.UserLink memory userLink = listContract.userLink(authority);\r\n        uint64[] memory IDs = new uint64[](userLink.count);\r\n        uint64 id = userLink.first;\r\n        for (uint i = 0; i < userLink.count; i++) {\r\n            IDs[i] = id;\r\n            ListInterface.UserList memory userList = listContract.userList(authority, id);\r\n            id = userList.next;\r\n        }\r\n        return IDs;\r\n    }\r\n\r\n    function getAuthorityAccounts(address authority) public view returns(address[] memory){\r\n        uint64[] memory IDs = getAuthorityIDs(authority);\r\n        address[] memory accounts = new address[](IDs.length);\r\n        for (uint i = 0; i < IDs.length; i++) {\r\n            accounts[i] = getAccount(IDs[i]);\r\n        }\r\n        return accounts;\r\n    }\r\n\r\n    function getIDAuthorities(uint id) public view returns(address[] memory){\r\n        ListInterface.AccountLink memory accountLink = listContract.accountLink(uint64(id));\r\n        address[] memory authorities = new address[](accountLink.count);\r\n        address authority = accountLink.first;\r\n        for (uint i = 0; i < accountLink.count; i++) {\r\n            authorities[i] = authority;\r\n            ListInterface.AccountList memory accountList = listContract.accountList(uint64(id), authority);\r\n            authority = accountList.next;\r\n        }\r\n        return authorities;\r\n    }\r\n\r\n    function getAccountAuthorities(address account) public view returns(address[] memory){\r\n        return getIDAuthorities(getID(account));\r\n    }\r\n\r\n    function getAccountVersions(address[] memory accounts) public view returns(uint[] memory) {\r\n        uint[] memory versions = new uint[](accounts.length);\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            versions[i] = AccountInterface(accounts[i]).version();\r\n        }\r\n        return versions;\r\n    }\r\n\r\n    struct AuthorityData {\r\n        uint64[] IDs;\r\n        address[] accounts;\r\n        uint[] versions;\r\n    }\r\n\r\n    function getAuthorityDetails(address authority) public view returns(AuthorityData memory){\r\n        address[] memory accounts = getAuthorityAccounts(authority);\r\n        return AuthorityData(\r\n            getAuthorityIDs(authority),\r\n            accounts,\r\n            getAccountVersions(accounts)\r\n        );\r\n    }\r\n\r\n    function isShield(address account) public view returns(bool shield) {\r\n        shield = AccountInterface(account).sheild();\r\n    }\r\n}\r\n\r\n\r\ncontract ConnectorsResolver is AccountResolver {\r\n    struct ConnectorsData {\r\n        address connector;\r\n        uint connectorID;\r\n        string name;\r\n    }\r\n\r\n    function getEnabledConnectors() public view returns(address[] memory){\r\n        uint enabledCount = connectorsContract.connectorCount();\r\n        address[] memory addresses = new address[](enabledCount);\r\n        uint connectorArrayLength = connectorsContract.connectorLength();\r\n        uint count;\r\n        for (uint i = 0; i < connectorArrayLength ; i++) {\r\n            address connector = connectorsContract.connectorArray(i);\r\n            if (connectorsContract.connectors(connector)) {\r\n                addresses[count] = connector;\r\n                count++;\r\n            }\r\n        }\r\n        return addresses;\r\n    }\r\n\r\n    function getEnabledConnectorsData() public view returns(ConnectorsData[] memory){\r\n        uint enabledCount = connectorsContract.connectorCount();\r\n        ConnectorsData[] memory connectorsData = new ConnectorsData[](enabledCount);\r\n        uint connectorArrayLength = connectorsContract.connectorLength();\r\n        uint count;\r\n        for (uint i = 0; i < connectorArrayLength ; i++) {\r\n            address connector = connectorsContract.connectorArray(i);\r\n            if (connectorsContract.connectors(connector)) {\r\n                connectorsData[count] = ConnectorsData(\r\n                    connector,\r\n                    i+1,\r\n                    ConnectorInterface(connector).name()\r\n                );\r\n                count++;\r\n            }\r\n        }\r\n        return connectorsData;\r\n    }\r\n\r\n    function getStaticConnectors() public view returns(address[] memory){\r\n        uint staticLength = connectorsContract.staticConnectorLength();\r\n        address[] memory staticConnectorArray = new address[](staticLength);\r\n        for (uint i = 0; i < staticLength ; i++) {\r\n            staticConnectorArray[i] = connectorsContract.staticConnectorArray(i);\r\n        }\r\n        return staticConnectorArray;\r\n    }\r\n\r\n    function getStaticConnectorsData() public view returns(ConnectorsData[] memory){\r\n        uint staticLength = connectorsContract.staticConnectorLength();\r\n        ConnectorsData[] memory staticConnectorsData = new ConnectorsData[](staticLength);\r\n        for (uint i = 0; i < staticLength ; i++) {\r\n            address staticConnector = connectorsContract.staticConnectorArray(i);\r\n            staticConnectorsData[i] = ConnectorsData(\r\n                staticConnector,\r\n                i+1,\r\n                ConnectorInterface(staticConnector).name()\r\n            );\r\n        }\r\n        return staticConnectorsData;\r\n    }\r\n}\r\n\r\n\r\ncontract Resolver is ConnectorsResolver {\r\n    string public constant name = \"v1\";\r\n    uint public constant version = 1;\r\n\r\n    constructor(address _index) public{\r\n        index = _index;\r\n        indexContract = IndexInterface(index);\r\n        list = indexContract.list();\r\n        listContract = ListInterface(list);\r\n        connectors = indexContract.connectors(version);\r\n        connectorsContract = ConnectorsInterface(connectors);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_index\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountAuthorities\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"getAccountVersions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"getAuthorityAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"getAuthorityDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"IDs\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"versions\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AccountResolver.AuthorityData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"getAuthorityIDs\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledConnectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledConnectorsData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"connectorID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ConnectorsResolver.ConnectorsData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getIDAuthorities\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConnectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticConnectorsData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"connectorID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ConnectorsResolver.ConnectorsData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isShield\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"shield\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Resolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002971adfa57b20e5a416ae5a708a8655a9c74f723","Library":"","LicenseType":"MIT","SwarmSource":"ipfs://116288b0f328a50ad00599589a7221b8d7de9d74bbae8e79a92eac6d121f684f"}]}