{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/saga/interfaces/IReconciliationAdjuster.sol\n\n/**\n * @title Reconciliation Adjuster Interface.\n */\ninterface IReconciliationAdjuster {\n    /**\n     * @dev Get the buy-adjusted value of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to adjust.\n     * @return The adjusted amount of SDR.\n     */\n    function adjustBuy(uint256 _sdrAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the sell-adjusted value of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to adjust.\n     * @return The adjusted amount of SDR.\n     */\n    function adjustSell(uint256 _sdrAmount) external view returns (uint256);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/saga/ReconciliationAdjuster.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title Reconciliation Adjuster.\n */\ncontract ReconciliationAdjuster is IReconciliationAdjuster, Claimable {\n    string public constant VERSION = \"1.0.0\";\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev SDR adjustment factor maximum resolution.\n     * @notice Allow for sufficiently-high resolution.\n     * @notice Prevents multiplication-overflow.\n     */\n    uint256 public constant MAX_RESOLUTION = 0x10000000000000000;\n\n    uint256 public sequenceNum = 0;\n    uint256 public factorN = 0;\n    uint256 public factorD = 0;\n\n    event FactorSaved(uint256 _factorN, uint256 _factorD);\n    event FactorNotSaved(uint256 _factorN, uint256 _factorD);\n\n    /**\n    * @dev throw if called before factor set.\n    */\n    modifier onlyIfFactorSet() {\n        assert(factorN > 0 && factorD > 0);\n        _;\n    }\n\n    /**\n     * @dev Set the SDR adjustment factor.\n     * @param _sequenceNum The sequence-number of the operation.\n     * @param _factorN The numerator of the SDR adjustment factor.\n     * @param _factorD The denominator of the SDR adjustment factor.\n     */\n    function setFactor(uint256 _sequenceNum, uint256 _factorN, uint256 _factorD) external onlyOwner {\n        require(1 <= _factorN && _factorN <= MAX_RESOLUTION, \"adjustment factor numerator is out of range\");\n        require(1 <= _factorD && _factorD <= MAX_RESOLUTION, \"adjustment factor denominator is out of range\");\n\n        if (sequenceNum < _sequenceNum) {\n            sequenceNum = _sequenceNum;\n            factorN = _factorN;\n            factorD = _factorD;\n            emit FactorSaved(_factorN, _factorD);\n        }\n        else {\n            emit FactorNotSaved(_factorN, _factorD);\n        }\n    }\n\n    /**\n     * @dev Get the buy-adjusted value of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to adjust.\n     * @return The adjusted amount of SDR.\n     */\n    function adjustBuy(uint256 _sdrAmount) external view onlyIfFactorSet returns (uint256) {\n        return _sdrAmount.mul(factorD) / factorN;\n    }\n\n    /**\n     * @dev Get the sell-adjusted value of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to adjust.\n     * @return The adjusted amount of SDR.\n     */\n    function adjustSell(uint256 _sdrAmount) external view onlyIfFactorSet returns (uint256) {\n        return _sdrAmount.mul(factorN) / factorD;\n    }\n}\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"factorN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sdrAmount\",\"type\":\"uint256\"}],\"name\":\"adjustSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sequenceNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sdrAmount\",\"type\":\"uint256\"}],\"name\":\"adjustBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sequenceNum\",\"type\":\"uint256\"},{\"name\":\"_factorN\",\"type\":\"uint256\"},{\"name\":\"_factorD\",\"type\":\"uint256\"}],\"name\":\"setFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factorD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RESOLUTION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_factorN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_factorD\",\"type\":\"uint256\"}],\"name\":\"FactorSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_factorN\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_factorD\",\"type\":\"uint256\"}],\"name\":\"FactorNotSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ReconciliationAdjuster","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://7ecad242fef88c2caa4873cbcf1c91513ba33b6f7093f69e4a46343f54beebd3"}]}