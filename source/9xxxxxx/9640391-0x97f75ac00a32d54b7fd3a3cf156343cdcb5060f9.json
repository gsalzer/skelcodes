{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n========================================================================\r\n!!!!!!!!!!!!!!\r\n!!! NOTICE !!!\r\n!!!!!!!!!!!!!!\r\nThis is a test contract very similar to the formal contract.\r\nThe actual code on the mainnet is at here:\r\n    https://etherscan.io/address/0x35d1b3f3d7966a1dfe207aa4514c12a259a0492b#code\r\n========================================================================\r\n*/\r\n\r\n/// vat.sol -- Dai CDP database\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract Vat {\r\n    // --- Auth ---\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external note auth { require(live == 1, \"Vat/not-live\"); wards[usr] = 1; }\r\n    function deny(address usr) external note auth { require(live == 1, \"Vat/not-live\"); wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Vat/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => mapping (address => uint)) public can;\r\n    function hope(address usr) external note { can[msg.sender][usr] = 1; }\r\n    function nope(address usr) external note { can[msg.sender][usr] = 0; }\r\n    function wish(address bit, address usr) internal view returns (bool) {\r\n        return either(bit == usr, can[bit][usr] == 1);\r\n    }\r\n\r\n    // --- Data ---\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    mapping (bytes32 => Ilk)                       public ilks;\r\n    mapping (bytes32 => mapping (address => Urn )) public urns;\r\n    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\r\n    mapping (address => uint256)                   public dai;  // [rad]\r\n    mapping (address => uint256)                   public sin;  // [rad]\r\n\r\n    uint256 public debt;  // Total Dai Issued    [rad]\r\n    uint256 public vice;  // Total Unbacked Dai  [rad]\r\n    uint256 public Line;  // Total Debt Ceiling  [rad]\r\n    uint256 public live;  // Access Flag\r\n\r\n    // --- Logs ---\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes32  indexed  arg3,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an 'anonymous' event with a constant 6 words of calldata\r\n            // and four indexed topics: the selector and the first three args\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36),                    // arg2\r\n                 calldataload(68)                     // arg3\r\n                )\r\n        }\r\n    }\r\n\r\n    // --- Init ---\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n    }\r\n\r\n    // --- Math ---\r\n    function add(uint x, int y) internal pure returns (uint z) {\r\n        z = x + uint(y);\r\n        require(y >= 0 || z <= x);\r\n        require(y <= 0 || z >= x);\r\n    }\r\n    function sub(uint x, int y) internal pure returns (uint z) {\r\n        z = x - uint(y);\r\n        require(y <= 0 || z <= x);\r\n        require(y >= 0 || z >= x);\r\n    }\r\n    function mul(uint x, int y) internal pure returns (int z) {\r\n        z = int(x) * y;\r\n        require(int(x) >= 0);\r\n        require(y == 0 || z / y == int(x));\r\n    }\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    function init(bytes32 ilk) external note auth {\r\n        require(ilks[ilk].rate == 0, \"Vat/ilk-already-init\");\r\n        ilks[ilk].rate = 10 ** 27;\r\n    }\r\n    function file(bytes32 what, uint data) external note auth {\r\n        require(live == 1, \"Vat/not-live\");\r\n        if (what == \"Line\") Line = data;\r\n        else revert(\"Vat/file-unrecognized-param\");\r\n    }\r\n    function file(bytes32 ilk, bytes32 what, uint data) external note auth {\r\n        require(live == 1, \"Vat/not-live\");\r\n        if (what == \"spot\") ilks[ilk].spot = data;\r\n        else if (what == \"line\") ilks[ilk].line = data;\r\n        else if (what == \"dust\") ilks[ilk].dust = data;\r\n        else revert(\"Vat/file-unrecognized-param\");\r\n    }\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    // --- Fungibility ---\r\n    function slip(bytes32 ilk, address usr, int256 wad) external note auth {\r\n        gem[ilk][usr] = add(gem[ilk][usr], wad);\r\n    }\r\n    function flux(bytes32 ilk, address src, address dst, uint256 wad) external note {\r\n        require(wish(src, msg.sender), \"Vat/not-allowed\");\r\n        gem[ilk][src] = sub(gem[ilk][src], wad);\r\n        gem[ilk][dst] = add(gem[ilk][dst], wad);\r\n    }\r\n    function move(address src, address dst, uint256 rad) external note {\r\n        require(wish(src, msg.sender), \"Vat/not-allowed\");\r\n        dai[src] = sub(dai[src], rad);\r\n        dai[dst] = add(dai[dst], rad);\r\n    }\r\n\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- CDP Manipulation ---\r\n    function frob(bytes32 i, address u, address v, address w, int dink, int dart) external note {\r\n        // system is live\r\n        require(live == 1, \"Vat/not-live\");\r\n\r\n        Urn memory urn = urns[i][u];\r\n        Ilk memory ilk = ilks[i];\r\n        // ilk has been initialised\r\n        require(ilk.rate != 0, \"Vat/ilk-not-init\");\r\n\r\n        urn.ink = add(urn.ink, dink);\r\n        urn.art = add(urn.art, dart);\r\n        ilk.Art = add(ilk.Art, dart);\r\n\r\n        int dtab = mul(ilk.rate, dart);\r\n        uint tab = mul(ilk.rate, urn.art);\r\n        debt     = add(debt, dtab);\r\n\r\n        // either debt has decreased, or debt ceilings are not exceeded\r\n        require(either(dart <= 0, both(mul(ilk.Art, ilk.rate) <= ilk.line, debt <= Line)), \"Vat/ceiling-exceeded\");\r\n        // urn is either less risky than before, or it is safe\r\n        require(either(both(dart <= 0, dink >= 0), tab <= mul(urn.ink, ilk.spot)), \"Vat/not-safe\");\r\n\r\n        // urn is either more safe, or the owner consents\r\n        require(either(both(dart <= 0, dink >= 0), wish(u, msg.sender)), \"Vat/not-allowed-u\");\r\n        // collateral src consents\r\n        require(either(dink <= 0, wish(v, msg.sender)), \"Vat/not-allowed-v\");\r\n        // debt dst consents\r\n        require(either(dart >= 0, wish(w, msg.sender)), \"Vat/not-allowed-w\");\r\n\r\n        // urn has no debt, or a non-dusty amount\r\n        require(either(urn.art == 0, tab >= ilk.dust), \"Vat/dust\");\r\n\r\n        gem[i][v] = sub(gem[i][v], dink);\r\n        dai[w]    = add(dai[w],    dtab);\r\n\r\n        urns[i][u] = urn;\r\n        ilks[i]    = ilk;\r\n    }\r\n    // --- CDP Fungibility ---\r\n    function fork(bytes32 ilk, address src, address dst, int dink, int dart) external note {\r\n        Urn storage u = urns[ilk][src];\r\n        Urn storage v = urns[ilk][dst];\r\n        Ilk storage i = ilks[ilk];\r\n\r\n        u.ink = sub(u.ink, dink);\r\n        u.art = sub(u.art, dart);\r\n        v.ink = add(v.ink, dink);\r\n        v.art = add(v.art, dart);\r\n\r\n        uint utab = mul(u.art, i.rate);\r\n        uint vtab = mul(v.art, i.rate);\r\n\r\n        // both sides consent\r\n        require(both(wish(src, msg.sender), wish(dst, msg.sender)), \"Vat/not-allowed\");\r\n\r\n        // both sides safe\r\n        require(utab <= mul(u.ink, i.spot), \"Vat/not-safe-src\");\r\n        require(vtab <= mul(v.ink, i.spot), \"Vat/not-safe-dst\");\r\n\r\n        // both sides non-dusty\r\n        require(either(utab >= i.dust, u.art == 0), \"Vat/dust-src\");\r\n        require(either(vtab >= i.dust, v.art == 0), \"Vat/dust-dst\");\r\n    }\r\n    // --- CDP Confiscation ---\r\n    function grab(bytes32 i, address u, address v, address w, int dink, int dart) external note auth {\r\n        Urn storage urn = urns[i][u];\r\n        Ilk storage ilk = ilks[i];\r\n\r\n        urn.ink = add(urn.ink, dink);\r\n        urn.art = add(urn.art, dart);\r\n        ilk.Art = add(ilk.Art, dart);\r\n\r\n        int dtab = mul(ilk.rate, dart);\r\n\r\n        gem[i][v] = sub(gem[i][v], dink);\r\n        sin[w]    = sub(sin[w],    dtab);\r\n        vice      = sub(vice,      dtab);\r\n    }\r\n\r\n    // --- Settlement ---\r\n    function heal(uint rad) external note {\r\n        address u = msg.sender;\r\n        sin[u] = sub(sin[u], rad);\r\n        dai[u] = sub(dai[u], rad);\r\n        vice   = sub(vice,   rad);\r\n        debt   = sub(debt,   rad);\r\n    }\r\n    function suck(address u, address v, uint rad) external note auth {\r\n        sin[u] = add(sin[u], rad);\r\n        dai[v] = add(dai[v], rad);\r\n        vice   = add(vice,   rad);\r\n        debt   = add(debt,   rad);\r\n    }\r\n\r\n    // --- Rates ---\r\n    function fold(bytes32 i, address u, int rate) external note auth {\r\n        require(live == 1, \"Vat/not-live\");\r\n        Ilk storage ilk = ilks[i];\r\n        ilk.rate = add(ilk.rate, rate);\r\n        int rad  = mul(ilk.Art, rate);\r\n        dai[u]   = add(dai[u], rad);\r\n        debt     = add(debt,   rad);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg3\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"Line\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"can\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"flux\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"i\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"rate\",\"type\":\"int256\"}],\"name\":\"fold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"fork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"i\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"w\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"frob\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"i\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"w\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"dink\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dart\",\"type\":\"int256\"}],\"name\":\"grab\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ilks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Art\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"line\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wad\",\"type\":\"int256\"}],\"name\":\"slip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"suck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"urns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ink\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"art\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vat","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://f92a653a0da36d46984c62d1098c5983b08ae4cfcde7a6fb6257f39b39c649be"}]}