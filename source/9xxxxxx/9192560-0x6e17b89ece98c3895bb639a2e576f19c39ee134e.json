{"status":"1","message":"OK","result":[{"SourceCode":"{\"VERToken.sol\":{\"content\":\"pragma solidity ^0.5.7;\\n\\nimport \\\"./VERT_smart_contract.sol\\\";\\n\\ncontract Crowdsale_VERToken is ERC20Standard {\\n    using SafeMath for uint256;\\n\\n\\tconstructor() public {\\n\\t\\ttotalSupply = 1500000 * 0.0078335866666667 ether;\\n\\t\\tname = \\\"Vector_Robotiks_token\\\";\\n\\t\\tdecimals = 18;\\n\\t\\tsymbol = \\\"VERT\\\";\\n\\t\\tversion = \\\"1.0\\\";\\n\\t\\tshares[msg.sender] = totalSupply;\\n\\t}\\n    uint256 private _openingTime = 1577923200;\\n    uint256 private _closingTime = 1581292800;\\n\\n    /**\\n     * Event for crowdsale extending\\n     * @param newClosingTime new closing time\\n     * @param prevClosingTime old closing time\\n     */\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen {\\n        require(isOpen(), \\\"TimedCrowdsale: not open\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return the crowdsale opening time.\\n     */\\n    function openingTime() public view returns (uint256) {\\n        return _openingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale closing time.\\n     */\\n    function closingTime() public view returns (uint256) {\\n        return _closingTime;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp \\u003e= _openingTime \\u0026\\u0026 block.timestamp \\u003c= _closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp \\u003e _closingTime;\\n    }\\n\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    function _extendTime(uint256 newClosingTime) internal {\\n        require(!hasClosed(), \\\"TimedCrowdsale: already closed\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(newClosingTime \\u003e _closingTime, \\\"TimedCrowdsale: new closing time is before current closing time\\\");\\n\\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\\n        _closingTime = newClosingTime;\\n    }\\t\\n\\t\\n\\tfunction burn (uint _value) public {\\n    address burner = msg.sender;\\n    require(_value \\u003e 0);\\n    shares[burner] = shares[burner].sub(_value);\\n    totalSupply = totalSupply.sub(_value);\\n    emit Burn(burner, _value);\\n  }\\nevent Burn(address indexed burner, uint indexed value);\\n    \\n}\\n\"},\"VERT_smart_contract.sol\":{\"content\":\"pragma solidity ^0.5.7;\\n\\nlibrary SafeMath {\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0);\\n        uint256 c = a / b;\\n        \\n\\treturn c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a);\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\\ncontract ERC20Standard{\\n\\tusing SafeMath for uint256;\\n    uint public totalSupply;\\n\\tstring public name;\\n\\tuint8 public decimals;\\n\\tstring public symbol;\\n\\tstring public version;\\n\\tuint totalReward;\\n    uint lastDivideRewardTime = 1609372800;\\n    uint restReward;\\n    uint256 public balance;\\n        \\n    struct TokenHolder {\\n        uint256 shares;\\n        uint       BalanceUpdateTime;\\n        uint       rewardWithdrawTime;\\n    }\\n    mapping(address =\\u003e TokenHolder) holders;\\n    mapping (address =\\u003e uint256) public shares;\\n      uint totalTokens = totalSupply;\\n\\t\\n\\tmapping (address =\\u003e mapping (address =\\u003e uint)) allowed;\\n\\n\\t//Fix for short address attack against ERC20\\n\\tmodifier onlyPayloadSize(uint size) {\\n\\t\\tassert(msg.data.length == size + 4);\\n\\t\\t_;\\n\\t} \\n\\n\\tfunction balanceOf(address _owner) public view returns (uint sharesOf) {\\n\\t\\treturn shares[_owner];\\n\\t}\\n\\n\\tfunction transfer(address _recipient, uint _value) public onlyPayloadSize(2*32) {\\n\\t    require(shares[msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0);\\n\\t    shares[msg.sender] = shares[msg.sender].sub(_value);\\n\\t    shares[_recipient] = shares[_recipient].add(_value);\\n\\t    emit Transfer(msg.sender, _recipient, _value);        \\n        }\\n\\n\\tfunction transferFrom(address _from, address _to, uint _value) public  returns (bool success){\\n\\t    require(shares[_from] \\u003e= _value \\u0026\\u0026 allowed[_from][msg.sender] \\u003e= _value \\u0026\\u0026 _value \\u003e 0);\\n            shares[_to] = shares[_to].add(_value);\\n            shares[_from] = shares[_from].sub(_value);\\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n            emit Transfer(_from, _to, _value);\\n            return true;\\n        }\\n\\n\\tfunction  approve(address _spender, uint _value) public {\\n\\t\\tallowed[msg.sender][_spender] = _value;\\n\\t\\temit Approval(msg.sender, _spender, _value);\\n\\t}\\n\\n\\tfunction allowance(address _spender, address _owner) public view returns (uint sharesOf) {\\n\\t\\treturn allowed[_owner][_spender];\\n\\t}\\n\\n\\t//Event which is triggered to log all transfers to this contract\\u0027s event log\\n\\tevent Transfer(\\n\\t\\taddress indexed _from,\\n\\t\\taddress indexed _to,\\n\\t\\tuint _value\\n\\t\\t);\\n\\t\\t\\n\\t//Event which is triggered whenever an owner approves a new allowance for a spender.\\n\\tevent Approval(\\n\\t\\taddress indexed _owner,\\n\\t\\taddress indexed _spender,\\n\\t\\tuint _value\\n\\t\\t);\\n\\nfunction reward() view public returns(uint) {\\n        return totalReward * holders[msg.sender].shares / totalTokens;\\n    }\\n\\n    function withdrawReward() public returns(uint) {\\n        uint value = reward();\\n        if (value == 0) {\\n            return 0;\\n        }\\n        if (!msg.sender.send(value)) {\\n            return 0;\\n        }\\n        if (shares[msg.sender] == 0) {\\n            // garbage collector\\n            delete holders[msg.sender];\\n        } else {\\n            holders[msg.sender].rewardWithdrawTime = now;\\n        }\\n        return value;\\n    }\\n\\n    // Divide up reward and make it accesible for withdraw\\n    function divideUpReward() public onlyPayloadSize(2*32){\\n        require (lastDivideRewardTime + 30 days \\u003e now);\\n        lastDivideRewardTime = now;\\n        uint share = shares[msg.sender];\\n        shares[msg.sender] = 0;\\n        msg.sender.transfer(share);\\n    }\\n\\n    function beforeBalanceChanges(address _who) public {\\n        if (holders[_who].BalanceUpdateTime \\u003c= lastDivideRewardTime) {\\n            holders[_who].BalanceUpdateTime = now;\\n            holders[_who].shares = shares[_who];\\n        }\\n    }\\n}\\n\\n\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesOf\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesOf\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"beforeBalanceChanges\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"divideUpReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20Standard","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://7ec59ea2da7676bd83caffc5947e443d4e53a3799f40c0c9c687e101c2c24971"}]}