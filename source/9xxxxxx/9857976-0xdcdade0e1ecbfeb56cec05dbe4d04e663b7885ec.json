{"status":"1","message":"OK","result":[{"SourceCode":"{\"BrightID.sol\":{\"content\":\"pragma solidity ^0.6.3;\\n\\nabstract contract BrightID {\\n    function addContext(bytes32 context) virtual public;\\n    function addContextOwner(bytes32 context, address owner) virtual public;\\n    function addNodeToContext(bytes32 context, address nodeAddress) virtual public;\\n    function register(bytes32 context, bytes32[] memory cIds, uint8 v, bytes32 r, bytes32 s) virtual public;\\n    function removeContextOwner(bytes32 context, address owner) virtual public;\\n    function removeNodeToContext(bytes32 context, address nodeAddress) virtual public;\\n    function sponsor(bytes32 context, bytes32 contextid) virtual public;\\n    function isContext(bytes32 context) virtual public view returns(bool);\\n    function isContextOwner(bytes32 context, address owner) virtual public view returns(bool);\\n    function isNodeContext(bytes32 context, address nodeAddress) virtual public view returns(bool);\\n    function isUniqueHuman(address nodeAddress, bytes32 context) virtual public view returns(bool);\\n}\\n\"},\"Sponsor.sol\":{\"content\":\"\\npragma solidity ^0.6.4;\\n\\nimport \\\"./BrightID.sol\\\";\\n\\ncontract Sponsor {\\n BrightID public brightID;\\n bytes32 public context;\\n\\n constructor(BrightID _brightID, bytes32 _context) public {\\n   brightID = _brightID;\\n   context = _context;\\n }\\n\\n fallback() external payable {\\n  sponsor(msg.sender);\\n }\\n\\n // sponsor any address that sends a transaction to this contract.\\n receive() external payable {\\n   sponsor(msg.sender);\\n }\\n\\n // sponsor any address is provided by as an parameter.\\n function sponsor(address add) public {\\n   brightID.sponsor(context, bytes32(uint(add)));\\n }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract BrightID\",\"name\":\"_brightID\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_context\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"brightID\",\"outputs\":[{\"internalType\":\"contract BrightID\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"context\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"sponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Sponsor","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003ce9e5ff3f42da5deed56775e2e2cadb484d402a657468657265756d000000000000000000000000000000000000000000000000","Library":"","LicenseType":"None","SwarmSource":"ipfs://32b493e71236ba44a8096c9fc886b8536005876ac35c1394db920c8d54287b2c"}]}