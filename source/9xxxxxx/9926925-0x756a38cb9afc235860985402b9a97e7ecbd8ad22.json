{"status":"1","message":"OK","result":[{"SourceCode":"{\"HEX.sol\":{\"content\":\"\\r\\npragma solidity ^0.6.4;\\r\\n\\r\\ninterface HEX {\\r\\n   /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n   function stakeStart(uint256 newStakedHearts, uint256 newStakedDays) external;\\r\\n   function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\\r\\n   function stakeCount(address stakerAddr) external view returns (uint256);\\r\\n   function stakeLists(address owner, uint256 stakeIndex) external view returns (uint40, uint72, uint72, uint16, uint16, uint16, bool);\\r\\n   function currentDay() external view returns (uint256);\\r\\n   function dailyDataRange(uint256 beginDay, uint256 endDay) external view returns (uint256[] memory);\\r\\n   function globalInfo() external view returns (uint256[13] memory);\\r\\n\\r\\n}\\r\\n\"},\"HEXMONEY.sol\":{\"content\":\"//HEXMONEY.sol\\r\\n//\\r\\n//\\r\\n\\r\\npragma solidity ^0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./HEX.sol\\\";\\r\\n\\r\\n//Uniswap factory interface\\r\\ninterface UniswapFactoryInterface {\\r\\n    // Create Exchange\\r\\n    function createExchange(address token) external returns (address exchange);\\r\\n    // Get Exchange and Token Info\\r\\n    function getExchange(address token) external view returns (address exchange);\\r\\n    function getToken(address exchange) external view returns (address token);\\r\\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\\r\\n    // Never use\\r\\n    function initializeFactory(address template) external;\\r\\n}\\r\\n\\r\\n//Uniswap Interface\\r\\ninterface UniswapExchangeInterface {\\r\\n    // Address of ERC20 token sold on this exchange\\r\\n    function tokenAddress() external view returns (address token);\\r\\n    // Address of Uniswap Factory\\r\\n    function factoryAddress() external view returns (address factory);\\r\\n    // Provide Liquidity\\r\\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\\r\\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\\r\\n    // Get Prices\\r\\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\\r\\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\\r\\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\\r\\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\\r\\n    // Trade ETH to ERC20\\r\\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\\r\\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\\r\\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\\r\\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\\r\\n    // Trade ERC20 to ETH\\r\\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\\r\\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\\r\\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\\r\\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\\r\\n    // Trade ERC20 to ERC20\\r\\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\\r\\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\\r\\n    // Trade ERC20 to Custom Pool\\r\\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\\r\\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\\r\\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\\r\\n}\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract TokenEvents {\\r\\n\\r\\n//when a user freezes tokens\\r\\n    event TokenFreeze(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n//when a user unfreezes tokens\\r\\n    event TokenUnfreeze(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n    event Transform (\\r\\n        uint ethAmt,\\r\\n        uint HXYAmt,\\r\\n        address indexed transformer\\r\\n    );\\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////HEXMONEY TOKEN CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract HEXMONEY is IERC20, TokenEvents {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    //uniswap setup\\r\\n    address internal uniFactory = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\\r\\n    address internal uniETHHEX = 0x05cDe89cCfa0adA8C88D5A23caaa79Ef129E7883;\\r\\n    address public uniETHHXY = address(0);\\r\\n    UniswapExchangeInterface internal uniHEXInterface = UniswapExchangeInterface(uniETHHEX);\\r\\n    UniswapExchangeInterface internal uniHXYInterface;\\r\\n    UniswapFactoryInterface internal uniFactoryInterface = UniswapFactoryInterface(uniFactory);\\r\\n    //hex contract setup\\r\\n    address internal hexAddress = 0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39;\\r\\n    HEX internal hexInterface = HEX(hexAddress);\\r\\n    //transform room\\r\\n    bool public roomActive;\\r\\n    uint public roundCap = 0;\\r\\n    uint public roundTransformed = 0;\\r\\n    uint public totalHeartsTransformed = 0;\\r\\n    uint public totalHXYTransformed = 0;\\r\\n    uint public distributable = 0;\\r\\n    //mint / freeze\\r\\n    uint public unlockLvl = 0;\\r\\n    uint public lockStartTimestamp = 0;\\r\\n    uint public lockDayLength = 1825;//5 years (10% released every 6 months)\\r\\n    uint public lockedTokens = 0;\\r\\n\\r\\n    bool public mintBlock;//disables any more tokens ever being minted once _totalSupply reaches _maxSupply\\r\\n    uint public mintRatio = 1000; //1000 for 0.1% (1 HXY for every 1000 HEX)\\r\\n    uint public minFreezeDayLength = 7; // min days to freeze\\r\\n    uint internal daySeconds = 86400; // seconds in a day\\r\\n    uint public totalFrozen = 0;\\r\\n    mapping (address =\\u003e uint) public tokenFrozenBalances;//balance of HXY frozen mapped by user\\r\\n    mapping (address =\\u003e uint) public timeTillUnfreeze;//timestamp when tokens can be unfrozen\\r\\n\\r\\n    //tokenomics\\r\\n    uint256 public _maxSupply = 6000000000000000;// max supply @ 60M\\r\\n    uint256 internal _totalSupply;\\r\\n    string public constant name = \\\"HEX Money\\\";\\r\\n    string public constant symbol = \\\"HXY\\\";\\r\\n    uint public constant decimals = 8;\\r\\n\\r\\n    //multisig\\r\\n    address payable internal MULTISIG = 0x35C7a87EbC3E9fBfd2a31579c70f0A2A8D4De4c5;\\r\\n    //admin\\r\\n    address payable internal FOUNDER = 0xc61f905832aE9FB6Ef5BaD8CF6e5b8B5aE1DF026;\\r\\n    address payable internal KYLE = 0xD30BC4859A79852157211E6db19dE159673a67E2;\\r\\n    address payable internal MICHAEL = 0xe551072153c02fa33d4903CAb0435Fb86F1a80cb;\\r\\n    address payable internal SWIFT = 0x7251FFB72C77221D16e6e04c9CD309EfFd0F940D;\\r\\n    address payable internal MARCO = 0xbf1984B12878c6A25f0921535c76C05a60bdEf39;\\r\\n    //team\\r\\n    address payable internal MARK = 0x35e9034f47cc00b8A9b555fC1FDB9598b2c245fD;\\r\\n    address payable internal JARED = 0x5eCb4D3B4b451b838242c3CF8404ef18f5C486aB;\\r\\n    address payable internal LOUIS = 0x454f203260a74C0A8B5c0a78fbA5B4e8B31dCC63;\\r\\n    address payable internal LOTTO = 0x1EF0Bab01329a6CE39e92eA6B88828430B1Cd91f;\\r\\n    address payable internal DONATOR = 0x723e82Eb1A1b419Fb36e9bD65E50A979cd13d341;\\r\\n    address payable internal KEVIN = 0x3487b398546C9b757921df6dE78EC308203f5830;\\r\\n    address payable internal AMIRIS = 0x406D1fC98D231aD69807Cd41d4D6F8273401354f;\\r\\n    //minters\\r\\n    address[] public minterAddresses;// future contracts to enable minting of HXY relative to HEX 1000:1\\r\\n\\r\\n    mapping(address =\\u003e bool) admins;\\r\\n    mapping(address =\\u003e bool) minters;\\r\\n    mapping (address =\\u003e Frozen) public frozen;\\r\\n\\r\\n    struct Frozen{\\r\\n        uint freezeStartTimestamp;\\r\\n        uint freezeLength;\\r\\n        uint daysPast;\\r\\n    }\\r\\n    \\r\\n    modifier onlyMultisig(){\\r\\n        require(msg.sender == MULTISIG, \\\"not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmins(){\\r\\n        require(admins[msg.sender], \\\"not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinters(){\\r\\n        require(minters[msg.sender], \\\"not a minter\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        admins[FOUNDER] = true;\\r\\n        admins[KYLE] = true;\\r\\n        admins[MARCO] = true;\\r\\n        admins[SWIFT] = true;\\r\\n        admins[MICHAEL] = true;\\r\\n        admins[msg.sender] = true;\\r\\n        //mint founder tokens\\r\\n        mintFounderTokens(_maxSupply.mul(20).div(100));//20% of max supply\\r\\n        //create uni exchange\\r\\n        uniETHHXY = uniFactoryInterface.createExchange(address(this));\\r\\n        uniHXYInterface = UniswapExchangeInterface(uniETHHXY);\\r\\n    }\\r\\n\\r\\n    //fallback for eth sent to contract - auto distribute as donation\\r\\n    receive() external payable{\\r\\n        donate();\\r\\n    }\\r\\n\\r\\n    function _initialLiquidity()\\r\\n        onlyAdmins\\r\\n        payable\\r\\n        public\\r\\n    {\\r\\n        require(msg.value \\u003e= 0.001 ether, \\\"eth value too low\\\");\\r\\n        //add liquidity\\r\\n        uint heartsForEth = uniHEXInterface.getEthToTokenInputPrice(msg.value);//price of eth value in hex\\r\\n        uint hxy = heartsForEth / mintRatio;\\r\\n        _mint(address(this), hxy);//mint tokens to this contract\\r\\n        _approve(address(this), uniETHHXY, hxy);//approve uni exchange contract\\r\\n        uniHXYInterface.addLiquidity{value:msg.value}(0, hxy, (now + 15 minutes)); //send tokens and eth to uni as liquidity*/\\r\\n    }\\r\\n    \\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply unless mintBLock is true\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        uint256 amt = amount;\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        if(!mintBlock){\\r\\n            if(_totalSupply \\u003c _maxSupply){\\r\\n                if(_totalSupply.add(amt) \\u003e _maxSupply){\\r\\n                    amt = _maxSupply.sub(_totalSupply);\\r\\n                    _totalSupply = _maxSupply;\\r\\n                    mintBlock = true;\\r\\n                }\\r\\n                else{\\r\\n                    _totalSupply = _totalSupply.add(amt);\\r\\n                }\\r\\n                _balances[account] = _balances[account].add(amt);\\r\\n                emit Transfer(address(0), account, amt);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    //mint HXY to founders (only ever called in constructor)\\r\\n    function mintFounderTokens(uint tokens)\\r\\n        internal\\r\\n        returns(bool)\\r\\n    {\\r\\n        require(tokens \\u003c= _maxSupply.mul(20).div(100), \\\"founder tokens cannot be over 20%\\\");\\r\\n        address minter = FOUNDER;\\r\\n\\r\\n        _mint(minter, tokens/2);//mint HXY\\r\\n        _mint(address(this), tokens/2);//mint HXY to be locked for 5 years, 10% unlocked every 6 months\\r\\n        lock(tokens/2);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function lock(uint tokens)\\r\\n        internal\\r\\n    {\\r\\n        lockStartTimestamp = now;\\r\\n        lockedTokens = tokens;\\r\\n    }\\r\\n\\r\\n    function unlock()\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        uint sixMonths = lockDayLength/10;\\r\\n        require(unlockLvl \\u003c 10, \\\"token unlock complete\\\");\\r\\n        require(lockStartTimestamp.add(sixMonths.mul(daySeconds)) \\u003c= now, \\\"tokens cannot be unlocked yet\\\");//must be at least over 6 months\\r\\n        uint value = lockedTokens/10;\\r\\n        if(lockStartTimestamp.add((sixMonths).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 0){\\r\\n            transfer(FOUNDER, value);\\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 2).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 1){\\r\\n            transfer(FOUNDER, value);\\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 3).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 2){\\r\\n            transfer(FOUNDER, value);\\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 4).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 3){\\r\\n            transfer(FOUNDER, value); \\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 5).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 4){\\r\\n            transfer(FOUNDER, value); \\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 6).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 5){\\r\\n            transfer(FOUNDER, value); \\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 7).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 6){\\r\\n            transfer(FOUNDER, value); \\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 8).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 7)\\r\\n        {\\r\\n            transfer(FOUNDER, value);\\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 9).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 8){\\r\\n            transfer(FOUNDER, value);\\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else if(lockStartTimestamp.add((sixMonths * 10).mul(daySeconds)) \\u003c= now \\u0026\\u0026 unlockLvl == 9){\\r\\n            transfer(FOUNDER, value);\\r\\n            unlockLvl++;\\r\\n        }\\r\\n        else{\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////\\r\\n    /////////////////PUBLIC FACING - HXY CONTROL//////////\\r\\n    //////////////////////////////////////////////////////\\r\\n\\r\\n    //freeze HXY tokens to contract - resets freeze time , if re-freezing before minFreezeDayLength any profit from already frozen tokens is lost, incentivizing freezing larger amounts for longer.\\r\\n    function FreezeTokens(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(tokenBalance() \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(isFreezeFinished()){\\r\\n            UnfreezeTokens(tokenFrozenBalances[msg.sender]);//unfreezes all currently froze tokens + profit\\r\\n        }\\r\\n        //update balances\\r\\n        tokenFrozenBalances[msg.sender] = tokenFrozenBalances[msg.sender].add(amt);\\r\\n        totalFrozen = totalFrozen.add(amt);\\r\\n        frozen[msg.sender].freezeStartTimestamp = now;\\r\\n        frozen[msg.sender].freezeLength = minFreezeDayLength;\\r\\n        _transfer(msg.sender, address(this), amt);//make transfer\\r\\n        emit TokenFreeze(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n    //unfreeze HXY tokens from contract\\r\\n    function UnfreezeTokens(uint amt)\\r\\n        public\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(tokenFrozenBalances[msg.sender] \\u003e= amt,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough locked funds\\r\\n        require(isFreezeFinished(), \\\"tokens cannot be unlocked yet. min 7 day freeze\\\");\\r\\n        frozen[msg.sender].freezeStartTimestamp = 0;\\r\\n        tokenFrozenBalances[msg.sender] = tokenFrozenBalances[msg.sender].sub(amt);//update balances\\r\\n        totalFrozen = totalFrozen.sub(amt);\\r\\n        _transfer(address(this), msg.sender, amt);//make transfer\\r\\n        _mint(msg.sender, amt.div(mintRatio) * frozen[msg.sender].freezeLength + daysPastFreezeLength());//mint HXY - amt unfrozen / 1000 * minFreezeDayLength + days past\\r\\n        emit TokenUnfreeze(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n    //returns amount of days frozen past min freeze length of 7 days\\r\\n    function daysPastFreezeLength()\\r\\n        internal\\r\\n        returns(uint)\\r\\n    {\\r\\n        frozen[msg.sender].daysPast = now.sub(frozen[msg.sender].freezeStartTimestamp).div(daySeconds);\\r\\n        if(frozen[msg.sender].daysPast \\u003e frozen[msg.sender].freezeLength){\\r\\n            return frozen[msg.sender].daysPast - frozen[msg.sender].freezeLength;// returns 0 if under 1 day passed\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcFreezingRewards()\\r\\n        internal\\r\\n        returns(uint)\\r\\n    {\\r\\n        return (tokenFrozenBalances[msg.sender].div(mintRatio) * frozen[msg.sender].freezeLength + daysPastFreezeLength());\\r\\n    }\\r\\n\\r\\n    //transforms HEX to HXY @ 1000:1\\r\\n    function transformHEX(uint hearts, address ref)//Approval needed\\r\\n        public\\r\\n    {\\r\\n        require(roomActive, \\\"transform room not active\\\");\\r\\n        require(hexInterface.transferFrom(msg.sender, address(this), hearts), \\\"Transfer failed\\\");//send hex from user to contract\\r\\n        //transform\\r\\n        uint HXY = hearts / mintRatio;//HXY tokens to mint\\r\\n        if(ref != address(0))//ref\\r\\n        {\\r\\n            require(roundCap \\u003e= roundTransformed.add(HXY.add(HXY.div(10))), \\\"round supply cap reached\\\");\\r\\n            require(roundCap \\u003c _maxSupply.sub(totalSupply()), \\\"round cap exeeds remaining maxSupply, reduce roundCap\\\");\\r\\n            roundTransformed += HXY.add(HXY.div(10));\\r\\n            totalHXYTransformed += HXY.add(HXY.div(10));\\r\\n            totalHeartsTransformed += hearts;\\r\\n            _mint(ref, HXY.div(10));\\r\\n        }\\r\\n        else{//no ref\\r\\n            require(roundCap \\u003e= roundTransformed.add(HXY), \\\"round supply cap reached\\\");\\r\\n            require(roundCap \\u003c _maxSupply.sub(totalSupply()), \\\"round cap exeeds remaining maxSupply, reduce roundCap\\\");\\r\\n            roundTransformed += HXY;\\r\\n            totalHXYTransformed += HXY;\\r\\n            totalHeartsTransformed += hearts;\\r\\n        }\\r\\n        _mint(msg.sender, HXY);//mint HXY - 0.1% of total heart value @ 1 HXY for 1000 HEX\\r\\n        //update distributable funds\\r\\n        uint liquidityReserve = hearts.div(100);\\r\\n        hexInterface.transfer(FOUNDER, liquidityReserve);\\r\\n        distributable += hearts.sub(liquidityReserve);\\r\\n        emit Transform(hearts, HXY, msg.sender);\\r\\n    }\\r\\n    \\r\\n    //mint HXY to address ( for use in external contracts within the eco-system)\\r\\n    function mintHXY(uint hearts, address receiver)\\r\\n        public\\r\\n        onlyMinters\\r\\n        returns(bool)\\r\\n    {\\r\\n        uint amt = hearts.div(mintRatio);\\r\\n        address minter = receiver;\\r\\n        _mint(minter, amt);//mint HXY - 0.1% of total heart value @ 1 HXY for 1000 HEX\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////\\r\\n    ////////ADMIN ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //allows addition of contract addresses that can call this contracts mint function.\\r\\n    function addMinter(address minter)\\r\\n        public\\r\\n        onlyMultisig\\r\\n        returns (bool)\\r\\n    {        \\r\\n        minters[minter] = true;\\r\\n        minterAddresses.push(minter);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //toggle transform room on/off. specify percantage of maxSupply available to transform\\r\\n    function toggleRoundActive(uint percentSupplyCap)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        require(percentSupplyCap \\u003c (100 - (_totalSupply.mul(100).div(_maxSupply))), \\\"percentage supplied to high\\\");\\r\\n        if(!roomActive){\\r\\n            roomActive = true;\\r\\n            roundCap = _maxSupply.mul(percentSupplyCap).div(100);\\r\\n            roundTransformed = 0;\\r\\n        }\\r\\n        else{\\r\\n            roomActive = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////\\r\\n    ////////VIEW ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //total HXY frozen in contract\\r\\n    function totalFrozenTokenBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return totalFrozen;\\r\\n    }\\r\\n\\r\\n    //HXY balance of caller\\r\\n    function tokenBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function isFreezeFinished()\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(frozen[msg.sender].freezeStartTimestamp == 0){\\r\\n            return false;\\r\\n        }\\r\\n        else{\\r\\n           return frozen[msg.sender].freezeStartTimestamp.add((frozen[msg.sender].freezeLength).mul(daySeconds)) \\u003c= now;               \\r\\n        }\\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function distributeTransformedHex () public {\\r\\n        //get balance    \\r\\n        require(distributable \\u003e 99, \\\"balance too low to distribute\\\");\\r\\n        //distribute\\r\\n        uint256 percent = distributable.div(100);\\r\\n        uint teamPercent = percent.mul(15);\\r\\n        hexInterface.transfer(LOUIS, teamPercent.div(6));\\r\\n        hexInterface.transfer(AMIRIS, teamPercent.div(6));\\r\\n        hexInterface.transfer(MARK, teamPercent.div(6));\\r\\n        hexInterface.transfer(KEVIN, teamPercent.div(6));\\r\\n        hexInterface.transfer(DONATOR, teamPercent.div(6));\\r\\n        hexInterface.transfer(JARED, teamPercent.div(6));\\r\\n        hexInterface.transfer(LOTTO, percent.mul(5));\\r\\n        hexInterface.transfer(KYLE, percent.mul(15));\\r\\n        hexInterface.transfer(MARCO, percent.mul(20));\\r\\n        hexInterface.transfer(SWIFT, percent.mul(15)); \\r\\n        hexInterface.transfer(MICHAEL,  percent.mul(30));\\r\\n        distributable = 0;\\r\\n    }\\r\\n    \\r\\n    function donate() public payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        uint256 balance = msg.value;\\r\\n        //distribute\\r\\n        uint256 percent = balance.div(100);\\r\\n        uint teamPercent = percent.mul(15);\\r\\n        LOUIS.transfer(teamPercent.div(6));\\r\\n        AMIRIS.transfer(teamPercent.div(6));\\r\\n        MARK.transfer(teamPercent.div(6));\\r\\n        KEVIN.transfer(teamPercent.div(6));\\r\\n        DONATOR.transfer(teamPercent.div(6));\\r\\n        JARED.transfer(teamPercent.div(6));\\r\\n        LOTTO.transfer(percent.mul(5));\\r\\n        KYLE.transfer(percent.mul(15));\\r\\n        MARCO.transfer(percent.mul(20));\\r\\n        SWIFT.transfer(percent.mul(15)); \\r\\n        MICHAEL.transfer(percent.mul(30));\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"HXYAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transformer\",\"type\":\"address\"}],\"name\":\"Transform\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"FreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"UnfreezeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeTransformedHex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"freezeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysPast\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreezeFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFreezeDayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hearts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintHXY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minterAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeTillUnfreeze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentSupplyCap\",\"type\":\"uint256\"}],\"name\":\"toggleRoundActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozenTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHXYTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHeartsTransformed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hearts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"transformHEX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniETHHXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HEXMONEY","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"ipfs://a219a7c1577eec5b5c06b7a36a0aae9b1f8d9c69f02cddb3ab07f44820b46539"}]}