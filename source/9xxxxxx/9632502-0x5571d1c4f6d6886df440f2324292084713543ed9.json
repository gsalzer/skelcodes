{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract AutoRedDotDistrict is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* ********** */\r\n    /* DATA TYPES */\r\n    /* ********** */\r\n\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    /* ******* */\r\n    /* STORAGE */\r\n    /* ******* */\r\n\r\n    // Anyone can call the createAuction function to receive a small reward when\r\n    // any of the whitelisted kitties are available to sire.\r\n    uint256 public auctionCreationReward = 10000000000000000; // 0.01 ETH\r\n\r\n    // Users can only call createAuction for kitties that are whitelisted by\r\n    // the owner.\r\n    mapping (uint256 => bool) public kittyIsWhitelisted;\r\n    uint256 public numberOfWhitelistedKitties;\r\n\r\n    // The owner can set startingPrice, endingPrice, and auctionDuration for\r\n    // siring auctions.\r\n    mapping (uint256 => uint256) public startingSiringPriceForKitty;\r\n    uint256 public globalEndingSiringPrice = 0;\r\n    uint256 public globalAuctionDuration = 1296000; // 15 Days (in seconds)\r\n\r\n    /* ********* */\r\n    /* MODIFIERS */\r\n    /* ********* */\r\n\r\n    /* ********* */\r\n    /* CONSTANTS */\r\n    /* ********* */\r\n\r\n    address public kittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n    address public kittySiresAddress = 0xC7af99Fe5513eB6710e6D5f44F9989dA40F27F26;\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    // Anyone can call this function to claim the auctionCreationReward when\r\n    // any of the red dot district kitties are rested and ready to sire.\r\n    // The auctionCreationReward funds come from the previous successful sire\r\n    // auctions, so the owner does not have to keep refilling this contract.\r\n    // This function is still callable even if the contract does not have enough\r\n    // for the auctionCreationReward, the caller will simply not be rewarded.\r\n    function createAuction(uint256 _kittyId) external {\r\n        require(kittyIsWhitelisted[_kittyId] == true, 'kitty is not whitelisted');\r\n\r\n        KittyCore(kittyCoreAddress).createSiringAuction(\r\n            _kittyId,\r\n            startingSiringPriceForKitty[_kittyId],\r\n            globalEndingSiringPrice,\r\n            globalAuctionDuration\r\n        );\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        if(contractBalance >= auctionCreationReward){\r\n            msg.sender.transfer(auctionCreationReward);\r\n        }\r\n    }\r\n\r\n    function ownerChangeStartingSiringPrice(uint256 _kittyId, uint256 _newStartingSiringPrice) external onlyOwner {\r\n        startingSiringPriceForKitty[_kittyId] = _newStartingSiringPrice;\r\n    }\r\n\r\n    function ownerChangeGlobalEndingSiringPrice(uint256 _newGlobalEndingSiringPrice) external onlyOwner {\r\n        globalEndingSiringPrice = _newGlobalEndingSiringPrice;\r\n    }\r\n\r\n    function ownerChangeGlobalAuctionDuration(uint256 _newGlobalAuctionDuration) external onlyOwner {\r\n        globalAuctionDuration = _newGlobalAuctionDuration;\r\n    }\r\n\r\n    function ownerChangeAuctionCreationReward(uint256 _newAuctionCreationReward) external onlyOwner {\r\n        auctionCreationReward = _newAuctionCreationReward;\r\n    }\r\n\r\n    function ownerCancelSiringAuction(uint256 _kittyId) external onlyOwner {\r\n        KittySires(kittySiresAddress).cancelAuction(_kittyId);\r\n    }\r\n\r\n    function ownerWithdrawKitty(address _destination, uint256 _kittyId) external onlyOwner {\r\n        KittyCore(kittyCoreAddress).transfer(_destination, _kittyId);\r\n    }\r\n\r\n    function ownerWhitelistKitty(uint256 _kittyId, bool _whitelist) external onlyOwner {\r\n        kittyIsWhitelisted[_kittyId] = _whitelist;\r\n        if(_whitelist){\r\n            numberOfWhitelistedKitties = numberOfWhitelistedKitties.add(1);\r\n        } else {\r\n            numberOfWhitelistedKitties = numberOfWhitelistedKitties.sub(1);\r\n        }\r\n    }\r\n\r\n    // This is the main withdrawal function that the owner can call to claim\r\n    // earnings. It leaves numberOfWhitelistedKitties * auctionCreationReward\r\n    // in the contract to incentivize future callers of the createAuction\r\n    // function.\r\n    function ownerWithdrawAllEarnings() external onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        uint256 fundsToLeaveToIncentivizeFutureCallers = auctionCreationReward.mul(numberOfWhitelistedKitties);\r\n        if(contractBalance > fundsToLeaveToIncentivizeFutureCallers){\r\n            uint256 earnings = contractBalance.sub(fundsToLeaveToIncentivizeFutureCallers);\r\n            msg.sender.transfer(earnings);\r\n        }\r\n    }\r\n\r\n    // This is an emergency function that the owner can call to retrieve all\r\n    // ether, including the ether that would normally be left in the contract to\r\n    // incentivize future callers of the createAuction function.\r\n    function emergencyWithdraw() external onlyOwner {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    constructor() public {\r\n        // Initialize starting prices for the six EN04 generation 0 kitties\r\n        startingSiringPriceForKitty[848437] = 200000000000000000; // 0.2 ETH\r\n        startingSiringPriceForKitty[848439] = 200000000000000000; // 0.2 ETH\r\n        startingSiringPriceForKitty[848440] = 200000000000000000; // 0.2 ETH\r\n        startingSiringPriceForKitty[848441] = 200000000000000000; // 0.2 ETH\r\n        startingSiringPriceForKitty[848442] = 200000000000000000; // 0.2 ETH\r\n        startingSiringPriceForKitty[848582] = 200000000000000000; // 0.2 ETH\r\n\r\n        // Whitelist the six EN04 generation 0 kitties\r\n        kittyIsWhitelisted[848437] = true;\r\n        kittyIsWhitelisted[848439] = true;\r\n        kittyIsWhitelisted[848440] = true;\r\n        kittyIsWhitelisted[848441] = true;\r\n        kittyIsWhitelisted[848442] = true;\r\n        kittyIsWhitelisted[848582] = true;\r\n        numberOfWhitelistedKitties = 6;\r\n\r\n        // Transfer ownership to Dapper Labs original Red Dot District EOA\r\n        // account on mainnet, they can change ownership to whatever address\r\n        // they wish after that.\r\n        transferOwnership(0xBb1e390b77Ff99f2765e78EF1A7d069c29406bee);\r\n    }\r\n\r\n    function() external payable {}\r\n}\r\n\r\ncontract KittyCore {\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function createSiringAuction(uint256 _kittyId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration) external;\r\n}\r\n\r\ncontract KittySires {\r\n    function cancelAuction(uint256 _tokenId) external;\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionCreationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalEndingSiringPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittyCoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kittyIsWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittySiresAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfWhitelistedKitties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"ownerCancelSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAuctionCreationReward\",\"type\":\"uint256\"}],\"name\":\"ownerChangeAuctionCreationReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGlobalAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"ownerChangeGlobalAuctionDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newGlobalEndingSiringPrice\",\"type\":\"uint256\"}],\"name\":\"ownerChangeGlobalEndingSiringPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newStartingSiringPrice\",\"type\":\"uint256\"}],\"name\":\"ownerChangeStartingSiringPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"ownerWhitelistKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdrawAllEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawKitty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startingSiringPriceForKitty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AutoRedDotDistrict","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://521357e909fca99f63531e152161d4fe60eb080f20cde545ed604fafaa05dced"}]}