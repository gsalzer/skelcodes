{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\ncontract IERC721 {\r\n    // ERC20 compatible functions\r\n    function name() public view returns (string memory _name);\r\n    function symbol() public view returns (string memory _symbol);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n    function approve(address to, uint256 tokenId) public;\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n\r\n/**\r\n    @title Emyto ERC721 token escrow\r\n    @author Victor Fage <victorfage@gmail.com>\r\n*/\r\ncontract EmytoERC721Escrow {\r\n\r\n    // Events\r\n\r\n    event CreateEscrow(\r\n        bytes32 _escrowId,\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        IERC721 _token,\r\n        uint256 _tokenId,\r\n        uint256 _salt\r\n    );\r\n\r\n    event SignedCreateEscrow(bytes32 _escrowId, bytes _agentSignature);\r\n\r\n    event CancelSignature(bytes _agentSignature);\r\n\r\n    event Deposit(bytes32 _escrowId);\r\n\r\n    event Withdraw(\r\n        bytes32 _escrowId,\r\n        address _sender,\r\n        address _to\r\n    );\r\n\r\n    event Cancel(bytes32 _escrowId);\r\n\r\n    struct Escrow {\r\n        address agent;\r\n        address depositant;\r\n        address retreader;\r\n        IERC721 token;\r\n        uint256 tokenId;\r\n    }\r\n\r\n    mapping (bytes32 => Escrow) public escrows;\r\n    mapping (address => mapping (bytes => bool)) public canceledSignatures;\r\n\r\n    // View functions\r\n\r\n    /**\r\n        @notice Calculate the escrow id\r\n\r\n        @dev The id of the escrow its generate with keccak256 function using the parameters of the function\r\n\r\n        @param _agent The agent address\r\n        @param _depositant The depositant address\r\n        @param _retreader The retreader address\r\n        @param _token The ERC721 token address\r\n        @param _tokenId The ERC721 token id\r\n        @param _salt An entropy value, used to generate the id\r\n\r\n        @return The id of the escrow\r\n    */\r\n    function calculateId(\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        IERC721 _token,\r\n        uint256 _tokenId,\r\n        uint256 _salt\r\n    ) public view returns(bytes32) {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                address(this),\r\n                _agent,\r\n                _depositant,\r\n                _retreader,\r\n                _token,\r\n                _tokenId,\r\n                _salt\r\n            )\r\n        );\r\n    }\r\n\r\n    // External functions\r\n\r\n    /**\r\n        @notice Create an ERC721 escrow\r\n\r\n        @dev The id of the escrow its generate with keccak256 function,\r\n            using the address of this contract, the sender(agent), the _depositant,\r\n            the _retreader, the _token, the _tokenId and the salt number\r\n\r\n            The agent will be the sender of the transaction\r\n\r\n        @param _depositant The depositant address\r\n        @param _retreader The retreader address\r\n        @param _token The ERC721 token address\r\n        @param _tokenId The ERC721 token id\r\n        @param _salt An entropy value, used to generate the id\r\n\r\n        @return The id of the escrow\r\n    */\r\n    function createEscrow(\r\n        address _depositant,\r\n        address _retreader,\r\n        IERC721 _token,\r\n        uint256 _tokenId,\r\n        uint256 _salt\r\n    ) external returns(bytes32 escrowId) {\r\n        escrowId = _createEscrow(\r\n            msg.sender,\r\n            _depositant,\r\n            _retreader,\r\n            _token,\r\n            _tokenId,\r\n            _salt\r\n        );\r\n    }\r\n\r\n    /**\r\n        @notice Create an escrow, using the signature provided by the agent\r\n\r\n        @dev The signature can will be cancel with cancelSignature function\r\n\r\n        @param _agent The agent address\r\n        @param _depositant The depositant address\r\n        @param _retreader The retrea    der address\r\n        @param _token The ERC721 token address\r\n        @param _tokenId The ERC721 token id\r\n        @param _salt An entropy value, used to generate the id\r\n        @param _agentSignature The signature provided by the agent\r\n\r\n        @return The id of the escrow\r\n    */\r\n    function signedCreateEscrow(\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        IERC721 _token,\r\n        uint256 _tokenId,\r\n        uint256 _salt,\r\n        bytes calldata _agentSignature\r\n    ) external returns(bytes32 escrowId) {\r\n        escrowId = _createEscrow(\r\n            _agent,\r\n            _depositant,\r\n            _retreader,\r\n            _token,\r\n            _tokenId,\r\n            _salt\r\n        );\r\n\r\n        require(!canceledSignatures[_agent][_agentSignature], \"signedCreateEscrow: The signature was canceled\");\r\n\r\n        require(\r\n            _agent == _ecrecovery(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", escrowId)), _agentSignature),\r\n            \"signedCreateEscrow: Invalid agent signature\"\r\n        );\r\n\r\n        emit SignedCreateEscrow(escrowId, _agentSignature);\r\n    }\r\n\r\n    /**\r\n        @notice Cancel a create escrow signature\r\n\r\n        @param _agentSignature The signature provided by the agent\r\n    */\r\n    function cancelSignature(bytes calldata _agentSignature) external {\r\n        canceledSignatures[msg.sender][_agentSignature] = true;\r\n\r\n        emit CancelSignature(_agentSignature);\r\n    }\r\n\r\n    /**\r\n        @notice Deposit an erc721 token in escrow\r\n\r\n        @dev The depositant of the escrow should be the sender, previous need the approve of the ERC721 token\r\n\r\n        @param _escrowId The id of the escrow\r\n    */\r\n    function deposit(bytes32 _escrowId) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        require(msg.sender == escrow.depositant, \"deposit: The sender should be the depositant\");\r\n\r\n        // Transfer the erc721 token\r\n        escrow.token.transferFrom(msg.sender, address(this), escrow.tokenId);\r\n\r\n        emit Deposit(_escrowId);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw an erc721 token from an escrow and send it to the retreader address\r\n\r\n        @dev The sender should be the depositant or the agent of the escrow\r\n\r\n        @param _escrowId The id of the escrow\r\n    */\r\n    function withdrawToRetreader(bytes32 _escrowId) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        _withdraw(_escrowId, escrow.depositant, escrow.retreader);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw an erc721 token from an escrow and send it to the depositant address\r\n\r\n        @dev The sender should be the retreader or the agent of the escrow\r\n\r\n        @param _escrowId The id of the escrow\r\n    */\r\n    function withdrawToDepositant(bytes32 _escrowId) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        _withdraw(_escrowId, escrow.retreader, escrow.depositant);\r\n    }\r\n\r\n    /**\r\n        @notice Cancel an escrow and send the erc721 token to the depositant address\r\n\r\n        @dev The sender should be the agent of the escrow\r\n            The escrow will deleted\r\n\r\n        @param _escrowId The id of the escrow\r\n    */\r\n    function cancel(bytes32 _escrowId) external {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        require(msg.sender == escrow.agent, \"cancel: The sender should be the agent\");\r\n\r\n        address depositant = escrow.depositant;\r\n        IERC721 token = escrow.token;\r\n        uint256 tokenId = escrow.tokenId;\r\n\r\n        // Delete escrow\r\n        delete escrows[_escrowId];\r\n\r\n        // Send the ERC721 token to the depositant\r\n        token.safeTransferFrom(address(this), depositant, tokenId);\r\n\r\n        emit Cancel(_escrowId);\r\n    }\r\n\r\n    // Internal functions\r\n\r\n    function _createEscrow(\r\n        address _agent,\r\n        address _depositant,\r\n        address _retreader,\r\n        IERC721 _token,\r\n        uint256 _tokenId,\r\n        uint256 _salt\r\n    ) internal returns(bytes32 escrowId) {\r\n        // Calculate the escrow id\r\n        escrowId = calculateId(\r\n            _agent,\r\n            _depositant,\r\n            _retreader,\r\n            _token,\r\n            _tokenId,\r\n            _salt\r\n        );\r\n\r\n        // Check if the escrow was created\r\n        require(escrows[escrowId].agent == address(0), \"createEscrow: The escrow exists\");\r\n\r\n        // Add escrow to the escrows array\r\n        escrows[escrowId] = Escrow({\r\n            agent: _agent,\r\n            depositant: _depositant,\r\n            retreader: _retreader,\r\n            token: _token,\r\n            tokenId: _tokenId\r\n        });\r\n\r\n        emit CreateEscrow(escrowId, _agent, _depositant, _retreader, _token, _tokenId, _salt);\r\n    }\r\n\r\n    /**\r\n        @notice Withdraw an erc721 token from an escrow and send it to _to address\r\n\r\n        @dev The sender should be the _approved or the agent of the escrow\r\n\r\n        @param _escrowId The id of the escrow\r\n        @param _approved The address of approved\r\n        @param _to The address of gone the tokens\r\n    */\r\n    function _withdraw(\r\n        bytes32 _escrowId,\r\n        address _approved,\r\n        address _to\r\n    ) internal {\r\n        Escrow storage escrow = escrows[_escrowId];\r\n        require(msg.sender == _approved || msg.sender == escrow.agent, \"_withdraw: The sender should be the _approved or the agent\");\r\n\r\n        escrow.token.safeTransferFrom(address(this), _to, escrow.tokenId);\r\n\r\n        emit Withdraw(_escrowId, msg.sender, _to);\r\n    }\r\n\r\n    function _ecrecovery(bytes32 _hash, bytes memory _sig) internal pure returns (address) {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            r := mload(add(_sig, 32))\r\n            s := mload(add(_sig, 64))\r\n            v := and(mload(add(_sig, 65)), 255)\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        return ecrecover(_hash, v, r, s);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"CancelSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"CreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"SignedCreateEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"calculateId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"cancelSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canceledSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"createEscrow\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"retreader\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_retreader\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_agentSignature\",\"type\":\"bytes\"}],\"name\":\"signedCreateEscrow\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"withdrawToDepositant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_escrowId\",\"type\":\"bytes32\"}],\"name\":\"withdrawToRetreader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EmytoERC721Escrow","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://42d6fe92da27824336d9260d99fc11e5d9cbbbd413e029c07b3cce475e3d4f40"}]}