{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract DNKWallet{\r\n    \r\n// @               @               @               @               @               @\r\n//   @           @   @           @   @           @   @           @   @           @\r\n//   # @       @ #   # @       @ #   # @       @ #   # @       @ #   # @       @ #\r\n//   #   @   @   #   #   @   @   #   #   @   @   #   #   @   @   #   #   @   @   #\r\n//   #   # @ #   #   #   # @ #   #   #   # @ #   #   #   # @ #   #   #   # @ #   #\r\n//   #   @   @   #   #   @   @   #   #   @   @   #   #   @   @   #   #   @   @   #\r\n//   # @       @ #   # @       @ #   # @       @ #   # @       @ #   # @       @ #\r\n//   @           @   @           @   @           @   @           @   @           @\r\n// @               @               @               @               @               @\r\n\r\n\r\n    \r\n    address private             owner;\r\n    mapping(bytes32=>uint256)   proof;\r\n    \r\n    \r\n    modifier min{\r\n        require(msg.value>=1000000000000000);_;\r\n    }\r\n    \r\n    \r\n \r\n    function toHexDigit(uint8 d) pure internal returns (byte) {\r\n      if (0 <= d && d <= 9) {\r\n         return byte(uint8(byte('0')) + d);\r\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\r\n            return byte(uint8(byte('a')) + d - 10);\r\n        }\r\n        revert();\r\n    }\r\n    \r\n\r\n    function toHexString(uint a) private pure returns (string memory) {\r\n     uint count = 0;\r\n        uint b = a;\r\n        while (b != 0) {\r\n             count++;\r\n             b /= 16;\r\n        }\r\n        bytes memory res = new bytes(count);\r\n            for (uint i=0; i<count; ++i) {\r\n             b = a % 16;\r\n            res[count - i - 1] = toHexDigit(uint8(b));\r\n            a /= 16;\r\n             }\r\n        return string(res);\r\n    }\r\n    \r\n    function fee(uint256 _num,uint8 _p)private pure returns(uint256){\r\n        return (_num/100)*_p;\r\n    }\r\n\r\n\r\n   function parent(bytes32 _proof)external payable min {\r\n       if(proof[_proof]>0){\r\n           revert();\r\n       }else{\r\n           proof[_proof]=msg.value;\r\n       }\r\n    }\r\n    \r\n    \r\n    function children(bytes32 _proof)external payable min{\r\n        if(proof[_proof]>1){\r\n            proof[_proof]+=msg.value;\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function DNK(uint256 _proof,address _to)external{\r\n        uint256 childrenDNK =   uint256(msg.sender)/10000000000000000000000000000000000000;\r\n        uint256 parentDNK   =   _proof+childrenDNK;\r\n        string memory dnk   =   toHexString(parentDNK);\r\n        if(proof[sha256(abi.encodePacked((dnk)))]>2){\r\n            address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((dnk)))] - \r\n            fee(proof[sha256(abi.encodePacked((dnk)))],10));\r\n            address(uint160(owner)).transfer(fee(proof[sha256(abi.encodePacked((dnk)))],10));\r\n            proof[sha256(abi.encodePacked((dnk)))]=1;\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n    constructor ()public{\r\n        owner=msg.sender;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32\"}],\"name\":\"children\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proof\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"DNK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32\"}],\"name\":\"parent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"DNKWallet","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"Unlicense","SwarmSource":"bzzr://62c9303f9dd0a3f6f9c41fba5f7eb68586205db34dab6d9096b2bed76bb2d371"}]}