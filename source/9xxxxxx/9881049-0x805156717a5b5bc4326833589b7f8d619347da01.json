{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @dev Beware that \"send\" may fail if the receiver is a contract.\r\ncontract MultiSend is Ownable {\r\n  using SafeMath for uint;\r\n\r\n  event Send(address _addr, uint _amount);\r\n  event Fail(address _addr, uint _amount);\r\n\r\n  // send _amount to each address\r\n  function multiSend(address[] _addrs, uint _amount) external payable {\r\n    require(_amount > 0);\r\n\r\n    uint _totalToSend = _amount.mul(_addrs.length);\r\n    require(msg.value >= _totalToSend);\r\n\r\n    // try sending to multiple addresses\r\n    uint _totalSent = 0;\r\n    for (uint256 i = 0; i < _addrs.length; i++) {\r\n      require(_addrs[i] != address(0));\r\n      if (_addrs[i].send(_amount)) {\r\n        _totalSent = _totalSent.add(_amount);\r\n        // emit Send(_addrs[i], _amount);\r\n      } else {\r\n        emit Fail(_addrs[i], _amount);\r\n      }\r\n    }\r\n\r\n    // refund unsent ether\r\n    if (msg.value > _totalSent) {\r\n      msg.sender.transfer(msg.value.sub(_totalSent));\r\n      // emit Send(msg.sender, msg.value.sub(_totalSent));\r\n    }\r\n  }\r\n\r\n  // split paid ether to addresses\r\n  function splitSend(address[] _addrs) external payable {\r\n    require(msg.value > 0);\r\n\r\n    // try sending to multiple addresses\r\n    uint _amount = msg.value.div(_addrs.length);\r\n    uint _totalSent = 0;\r\n    for (uint256 i = 0; i < _addrs.length; i++) {\r\n      require(_addrs[i] != address(0));\r\n      if (_addrs[i].send(_amount)) {\r\n        _totalSent = _totalSent.add(_amount);\r\n        // emit Send(_addrs[i], _amount);\r\n      } else {\r\n        emit Fail(_addrs[i], _amount);\r\n      }\r\n    }\r\n\r\n    // refund unsent ether\r\n    if (_totalSent != _amount.mul(_addrs.length)) {\r\n      msg.sender.transfer(msg.value.sub(_totalSent));\r\n      // emit Send(msg.sender, msg.value.sub(_totalSent));\r\n    }\r\n  }\r\n\r\n  function ownerWithdraw() public onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"splitSend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multiSend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Fail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MultiSend","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://45b78e35377499162f5d0ca2d1d603554a871d143cf1e37f2bdfe94baf5994f1"}]}