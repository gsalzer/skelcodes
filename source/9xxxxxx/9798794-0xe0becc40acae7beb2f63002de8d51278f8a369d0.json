{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n      owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n  }\r\n\r\n}\r\ncontract StandardToken {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address _owner, address _spender) public view returns (uint256);\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ETFloft is Ownable{\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) public reward_payable;\r\n  mapping (address => uint256) public reward_payable_ETF;\r\n\r\n  address public servant;\r\n  address public ETFaddress;\r\n  address public eco_fund;\r\n  address public collector;\r\n\r\n  function setAddress(address _etf,address _servant, address _ecofund, address _collector) public onlyOwner{\r\n    servant = _servant;\r\n    ETFaddress = _etf;\r\n    eco_fund = _ecofund;\r\n    collector = _collector;\r\n  }\r\n\r\n\r\n   function getReward() public{\r\n    msg.sender.transfer(reward_payable[msg.sender]);\r\n    delete reward_payable[msg.sender];\r\n  }\r\n   function getRewardETF() public{\r\n      StandardToken ETFcoin = StandardToken(ETFaddress);\r\n      ETFcoin.transfer(msg.sender, reward_payable_ETF[msg.sender]);\r\n      delete reward_payable_ETF[msg.sender];\r\n    }\r\n\r\n\r\n  struct loft{\r\n    uint32 number;\r\n    address owner;\r\n  }\r\n  loft[] public lofts;\r\n  function inResults(uint32 n, uint32 result) public pure returns(uint){\r\n       uint32 r;\r\n    if (result != 0){\r\n          r = n & result;\r\n    }\r\n    else{\r\n         r = n;\r\n    }\r\n   uint a;\r\n    for(uint i;i<32;i++){\r\n      if( (r & (uint32(1)<< i)  >0 )  ){\r\n        a += 1;\r\n      }\r\n    }\r\n    return a;\r\n  }\r\n  uint256 public round;\r\n  event newLoft(uint32 n, address indexed owner, uint256 indexed r);\r\n  function buyLoft(uint256[5] numbers) public{\r\n    require(tx.origin ==msg.sender);\r\n    StandardToken ETFcoin = StandardToken(ETFaddress);\r\n    require(ETFcoin.allowance(msg.sender, this) >= 100*10**18);\r\n    require(ETFcoin.transferFrom(msg.sender, this, 100*10**18));\r\n    uint32 n;\r\n    for(uint i;i<5;i++){\r\n      n+= (uint32(1) << (numbers[i]-1));\r\n    }\r\n    require(inResults(n,0) == 5);\r\n    lofts.push(loft(n, msg.sender));\r\n    newLoft(n, msg.sender, round);\r\n  }\r\n  function test() public{\r\n    balance += 100 *10**18;\r\n  }\r\n  uint256 public balance;\r\n\r\n  event LoftResult(uint32 n, uint256 round);\r\n  function openLoft(uint256 seed) public{\r\n    require(msg.sender == servant);\r\n    uint32 n;\r\n    uint32 j;\r\n    uint i;\r\n    if(seed == 0){\r\n      for(i=0;i<5;i++){\r\n        j = uint32(1) << (uint256(sha256(now))%32);\r\n        while(inResults(n+j, 0)!= (i+1)){\r\n          j = uint32(1) << (uint256(sha256(now))%32);\r\n        }\r\n        n+=j;\r\n     }\r\n    }\r\n    else{\r\n      n = uint32(seed);\r\n    }\r\n    address[] winner1;\r\n    address[] winner2;\r\n    address[] winner3;\r\n    address[] winner4;\r\n    address[] winner5;\r\n\r\n    uint256 total;\r\n    uint256 pay;\r\n    uint a;\r\n    StandardToken ETFcoin = StandardToken(ETFaddress);\r\n    LoftResult(n, round);\r\n    round +=1;\r\n    for(i=0;i<lofts.length;i++){\r\n      a = inResults(lofts[i].number, n);\r\n      if (a==1){\r\n        winner5.push(lofts[i].owner);\r\n      }\r\n      else if  (a==2){\r\n        winner4.push(lofts[i].owner);\r\n      }\r\n      else if  (a==3){\r\n        winner3.push(lofts[i].owner);\r\n      }\r\n      else if  (a==4){\r\n        winner2.push(lofts[i].owner);\r\n      }\r\n      else if  (a==5){\r\n        winner1.push(lofts[i].owner);\r\n      }\r\n      else{\r\n        1;\r\n      }\r\n    }\r\n    delete lofts;\r\n\r\n\r\n    total = balance.mul(50).div(100).div(2);\r\n    for(i=0;i<winner1.length; i++){\r\n      reward_payable[winner1[i]] += ( total.div(winner1.length) );\r\n      pay += ( total.div(winner1.length) );\r\n      //winner[0][i].send( total.div(winner[0].length) -1);\r\n    }\r\n    total = balance.mul(30).div(100).div(2);\r\n    for( i=0;i<winner2.length; i++){\r\n      reward_payable[winner2[i]] += ( total.div(winner2.length) );\r\n      pay += ( total.div(winner2.length) );\r\n      //winner[1][i].send( total.div(winner[1].length) -1);\r\n    }\r\n    total = balance.mul(20).div(100).div(2);\r\n    for( i=0;i<winner3.length; i++){\r\n      reward_payable[winner3[i]] += ( total.div(winner3.length) );\r\n      pay += ( total.div(winner3.length) );\r\n      //winner[2][i].send( total.div(winner[2].length) -1);\r\n    }\r\n    for( i=0;i<winner4.length; i++){\r\n      //reward_payable_ETF[winner4[i]] += 500 * 10 **18;\r\n      //ETFcoin.transfer(winner[3][i], 100 * 10 **18);\r\n    }\r\n    for( i=0;i<winner5.length; i++){\r\n      //reward_payable_ETF[winner5[i]] += 200 * 10 **18;\r\n      //ETFcoin.transfer(winner[4][i], 100 * 10 **18);\r\n    }\r\n    balance -= pay;\r\n  }\r\n\r\n    address[] public winner1;\r\n    address[] public winner2;\r\n    address[] public winner3;\r\n    address[] public winner4;\r\n    address[] public winner5;\r\n\r\n uint256 public fee = 10;\r\n\r\nfunction openLoft2(uint256 seed) public {\r\n    require(msg.sender == servant);\r\n    uint32 n;\r\n    uint32 j;\r\n    uint i;\r\n    if(seed == 0){\r\n      for(i=0;i<5;i++){\r\n        j = uint32(1) << (uint256(sha256(now))%32);\r\n        while(inResults(n+j, 0)!= (i+1)){\r\n          j = uint32(1) << (uint256(sha256(now))%32);\r\n        }\r\n        n+=j;\r\n     }\r\n    }\r\n    else{\r\n      n = uint32(seed);\r\n    }\r\n\r\n\r\n    uint256 total;\r\n    uint256 pay;\r\n    uint256 fees;\r\n    uint a;\r\n    //StandardToken ETFcoin = StandardToken(ETFaddress);\r\n    LoftResult(n, round);\r\n    round +=1;\r\n    for(i=0;i<lofts.length;i++){\r\n      a = inResults(lofts[i].number, n);\r\n      if (a==1){\r\n        winner5.push(lofts[i].owner);\r\n      }\r\n      else if  (a==2){\r\n        winner4.push(lofts[i].owner);\r\n      }\r\n      else if  (a==3){\r\n        winner3.push(lofts[i].owner);\r\n      }\r\n      else if  (a==4){\r\n        winner2.push(lofts[i].owner);\r\n      }\r\n      else if  (a==5){\r\n        winner1.push(lofts[i].owner);\r\n      }\r\n      else{\r\n        1;\r\n      }\r\n    }\r\n    delete lofts;\r\n    total = balance.mul(50).div(100).div(2);\r\n    for(i=0;i<winner1.length; i++){\r\n      reward_payable[winner1[i]] += ( total.div(winner1.length) * 90 / 100);\r\n      pay += ( total.div(winner1.length) * 90 / 100);\r\n      fees +=  ( total.div(winner1.length) * 10 / 100);\r\n      //winner[0][i].send( total.div(winner[0].length) -1);\r\n    }\r\n    total = balance.mul(30).div(100).div(2);\r\n    for( i=0;i<winner2.length; i++){\r\n      reward_payable[winner2[i]] += ( total.div(winner2.length) * 90 / 100);\r\n      pay += ( total.div(winner2.length) * 90 / 100);\r\n      fees +=  ( total.div(winner2.length) * 10 / 100);\r\n      //winner[1][i].send( total.div(winner[1].length) -1);\r\n    }\r\n    total = balance.mul(20).div(100).div(2);\r\n    for( i=0;i<winner3.length; i++){\r\n      reward_payable[winner3[i]] += ( total.div(winner3.length) * 90 / 100);\r\n      pay += ( total.div(winner3.length) * 90 / 100);\r\n      fees +=  ( total.div(winner3.length) * 10 / 100);\r\n      //winner[2][i].send( total.div(winner[2].length) -1);\r\n    }\r\n    for( i=0;i<winner4.length; i++){\r\n      reward_payable_ETF[winner4[i]] += 500 * 10 **18;\r\n      //ETFcoin.transfer(winner[3][i], 100 * 10 **18);\r\n    }\r\n    for( i=0;i<winner5.length; i++){\r\n      reward_payable_ETF[winner5[i]] += 200 * 10 **18;\r\n      //ETFcoin.transfer(winner[4][i], 100 * 10 **18);\r\n    }\r\n    balance -= pay;\r\n    delete winner1;\r\n    delete winner2;\r\n\r\ndelete winner3;\r\ndelete winner4;\r\ndelete winner5;\r\ncollector.send(fees);\r\n\r\n  }\r\n  function () payable public {\r\n    balance += msg.value;\r\n    if (balance >= 100000*10**18){\r\n        uint256 _amount;\r\n      _amount = (balance - 100000*10**18) * 3 / 10;\r\n      eco_fund.send(_amount);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_payable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"numbers\",\"type\":\"uint256[5]\"}],\"name\":\"buyLoft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"openLoft2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETFaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eco_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"servant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lofts\",\"outputs\":[{\"name\":\"number\",\"type\":\"uint32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etf\",\"type\":\"address\"},{\"name\":\"_servant\",\"type\":\"address\"},{\"name\":\"_ecofund\",\"type\":\"address\"},{\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_payable_ETF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"n\",\"type\":\"uint32\"},{\"name\":\"result\",\"type\":\"uint32\"}],\"name\":\"inResults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"openLoft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRewardETF\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"n\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"newLoft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"n\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"LoftResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ETFloft","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://c75d3b9154573e756783c1999fc960ab996b2e0e5396b3e3259ccb5838249289"}]}