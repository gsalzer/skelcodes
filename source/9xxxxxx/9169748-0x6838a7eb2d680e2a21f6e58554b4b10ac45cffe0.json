{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/*\r\nVERSION DATE: 05/08/2019\r\n*/\r\n\r\ncontract Owned \r\n{\r\n\taddress public owner;\r\n\r\n\tmapping(address => bool) public admins;\r\n\t\r\n    constructor() public \r\n\t{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n        owner = newOwner;\r\n    }\r\n\t\r\n    function addAdmin(address addr) public \r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\trequire(admins[addr]==false);\r\n\t\tif(addr!=address(0)) admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) public\r\n\t{\r\n\t\trequire(msg.sender == owner);\r\n\t\trequire(admins[addr]);\r\n\t\tdelete admins[addr];\r\n    }\r\n\t\r\n\tmodifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\t\r\n\tmodifier onlyAdmin {\r\n        require(msg.sender == owner || admins[msg.sender]);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Functional\r\n{\r\n\tfunction uint2str(uint i) internal pure returns (string memory)\r\n\t{\r\n\t\tif (i == 0) return \"0\";\r\n\t\tuint j = i;\r\n\t\tuint len;\r\n\t\twhile (j != 0){\r\n\t\t\tlen++;\r\n\t\t\tj /= 10;\r\n\t\t}\r\n\t\tbytes memory bstr = new bytes(len);\r\n\t\tuint k = len - 1;\r\n\t\twhile (i != 0){\r\n\t\t\tbstr[k--] = byte( uint8(48 + i % 10) );\r\n\t\t\ti /= 10;\r\n\t\t}\r\n\t\treturn string(bstr);\r\n\t}\r\n\t\r\n\tfunction strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory)\r\n\t{\r\n\t\tbytes memory _ba = bytes(_a);\r\n\t\tbytes memory _bb = bytes(_b);\r\n\t\tbytes memory _bc = bytes(_c);\r\n\t\tstring memory abc;\r\n\t\tuint k = 0;\r\n\t\tuint i;\r\n\t\tbytes memory babc;\r\n\t\tif (_ba.length==0)\r\n\t\t{\r\n\t\t\tabc = new string(_bc.length);\r\n\t\t\tbabc = bytes(abc);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tabc = new string(_ba.length + _bb.length+ _bc.length);\r\n\t\t\tbabc = bytes(abc);\r\n\t\t\tfor (i = 0; i < _ba.length; i++) babc[k++] = _ba[i];\r\n\t\t\tfor (i = 0; i < _bb.length; i++) babc[k++] = _bb[i];\r\n\t\t}\r\n        for (i = 0; i < _bc.length; i++) babc[k++] = _bc[i];\r\n\t\treturn string(babc);\r\n\t}\r\n\t\r\n\tfunction timenow() public view returns(uint32) { return uint32(block.timestamp); }\r\n}\r\n\r\ncontract ERC721\r\n{\r\n\tfunction implementsERC721() public pure returns (bool);\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance);\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address owner);\r\n\tfunction approve(address _to, uint256 _tokenId) public;\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\tfunction transfer(address _to, uint256 _tokenId) public;\r\n \r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n}\r\n\r\ncontract VirtualToken is Owned\r\n{\r\n\tuint256 public totalMint;\r\n\taddress public artist;\r\n\tmapping(address => uint) unused;\r\n\r\n\tstruct MarkSellOut\r\n\t{\r\n\t\tuint price;\r\n\t\tuint count;\r\n\t}\r\n\tmapping(address => MarkSellOut) sellout;\r\n\t\r\n\tevent SendVirtTokens(address indexed from, address indexed to, uint count);\r\n\tevent MarkTokensToSell(address indexed owner, uint count, uint price);\r\n\tevent DeleteMark(address indexed owner);\r\n\tevent BuyVirtTokens(address indexed form, address indexed who, uint count);\r\n\t\r\n\tfunction mintTokens(uint count, address _artist, uint shareArtist) internal\r\n\t{\r\n\t\trequire(totalMint==0);\r\n\t\ttotalMint = count;\r\n\t\t\r\n\t\tif (_artist!=address(0))\r\n\t\t{\r\n\t\t\tunused[_artist] = count * shareArtist / 100;\r\n\t\t\tunused[address(this)] = count - unused[_artist];\r\n\t\t\tartist = _artist;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tunused[address(this)] = count;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction unusedOf(address tokenOwner) public view returns (uint balance)\r\n\t{\r\n\t\taddress addr = address(this);\r\n\t\tif (tokenOwner!=address(0)) addr = tokenOwner;\r\n        return unused[addr];\r\n    }\r\n\t\r\n\tfunction sendVirtTokens(address to, uint count) public \r\n\t{\r\n\t\trequire(count>0);\r\n\t\trequire(unused[msg.sender]>=count);\r\n        unused[msg.sender] = unused[msg.sender] - count;\r\n\t\tunused[to] = unused[to] + count;\r\n        emit SendVirtTokens(msg.sender, to, count);\r\n    }\r\n\t\r\n\tfunction markTokensToSell(uint count, uint price) public\r\n\t{\r\n\t\trequire(count>0);\r\n\t\trequire(price>0);\r\n\t\trequire(unused[msg.sender]>=count);\r\n\t\trequire(sellout[msg.sender].count==0);\r\n\t\t\r\n\t\tsellout[msg.sender].count = count;\r\n\t\tsellout[msg.sender].price = price;\r\n\t\t\r\n\t\temit MarkTokensToSell(msg.sender, count, price);\r\n\t}\r\n\t\r\n\tfunction deleteMark() public\r\n\t{\r\n\t\trequire(sellout[msg.sender].count>0);\r\n\t\tsellout[msg.sender].count = 0;\r\n\t\tsellout[msg.sender].price = 0;\r\n\t\t\r\n\t\temit DeleteMark(msg.sender);\r\n\t}\r\n\t\r\n\tfunction getInfoMarkTokens(address addr) public view returns(uint countMark, uint countAll, uint price)\r\n\t{\r\n\t\tcountMark = sellout[addr].count;\r\n\t\tcountAll = unused[addr];\r\n\t\tprice = sellout[addr].price ;\r\n\t}\r\n\r\n\tfunction buyVirtTokens(address whom, uint countToBuy) public payable\r\n\t{\r\n\t\tuint count = sellout[whom].count;\r\n\t\tuint price = sellout[whom].price ;\r\n\r\n\t\trequire(whom!=msg.sender);\r\n\t\trequire(count>0);\r\n\t\trequire(countToBuy>0);\r\n\t\t\r\n\t\trequire(count>=countToBuy);\r\n\t\trequire(unused[whom]>=countToBuy);\r\n\r\n\t\trequire(msg.value == countToBuy * price);\r\n\r\n\t\tunused[whom] = unused[whom] - countToBuy;\t\t\r\n        unused[msg.sender] = unused[msg.sender] + countToBuy;\r\n\r\n\t\tsellout[whom].count = sellout[whom].count - countToBuy;\r\n\r\n\t\twhom.transfer(msg.value);\r\n\r\n        emit BuyVirtTokens(whom, msg.sender, countToBuy);\r\n\t}\r\n}\r\n\r\ncontract ExpandedToken is ERC721, VirtualToken, Functional\r\n{\r\n\tevent SetName(string _name, string _symbol);\r\n\r\n\tuint256 public totalSupply;\r\n\t\r\n\tstring public name = \"SuperFan\";\r\n\tstring public symbol = \"SFT\";\r\n\tfunction setName(string memory _name, string memory _symbol) public onlyOwner \r\n\t{\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\temit SetName(name,symbol);\r\n\t}\r\n\t\t\r\n\tstring public defaultMetadataURI = \"\";\r\n\tfunction setDefaultMetadataURI(string memory _defaultUri) public onlyOwner \r\n\t{\r\n\t\tdefaultMetadataURI = _defaultUri;\r\n\t}\r\n\t\r\n\tstruct Token\r\n\t{\r\n\t\tuint32 time;\r\n\t\tuint256\tparams;\r\n\t}\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\t\r\n\tmapping (uint256 => Token) tokens;\r\n\tmapping (uint256 => address) public tokenIndexToOwner;\r\n\tmapping (address => uint256) ownershipTokenCount; \r\n\tmapping (uint256 => address) public tokenIndexToApproved;\r\n\t\r\n\tfunction getListTokens(address addr, uint min, uint max) public view returns (string memory res)\r\n\t{\r\n\t\tres = \"\";\r\n\t\tif (max>totalSupply || max==0) max = totalSupply;\r\n\t\tfor(uint id=min;id<=max;id++)\r\n\t\t{\r\n\t\t\tif (tokenIndexToOwner[id] == addr) res = strConcat( res, \",\", uint2str(id) );\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction implementsERC721() public pure returns (bool)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 count) \r\n\t{\r\n\t\treturn ownershipTokenCount[_owner];\r\n\t}\r\n\t\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address owner)\r\n\t{\r\n\t\towner = tokenIndexToOwner[_tokenId];\r\n\t\trequire(owner != address(0));\r\n\t}\r\n\t\r\n\tfunction _approve(uint256 _tokenId, address _approved) internal \r\n\t{\r\n\t\ttokenIndexToApproved[_tokenId] = _approved;\r\n\t}\r\n\t\r\n\tfunction _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool)\r\n\t{\r\n\t\treturn tokenIndexToApproved[_tokenId] == _claimant;\r\n\t}\r\n\t\r\n\tfunction approve( address _to, uint256 _tokenId ) public\r\n\t{\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\t\t_approve(_tokenId, _to);\r\n\t\temit Approval(msg.sender, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction transferFrom( address _from, address _to, uint256 _tokenId ) public\r\n\t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_approvedFor(msg.sender, _tokenId));\r\n\t\trequire(_owns(_from, _tokenId));\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction _owns(address _claimant, uint256 _tokenId) internal view returns (bool)\r\n\t{\r\n\t\treturn tokenIndexToOwner[_tokenId] == _claimant;\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal \r\n\t{\r\n\t\townershipTokenCount[_to]++;\r\n\t\ttokenIndexToOwner[_tokenId] = _to;\r\n\r\n\t\tif (_from != address(0)) \r\n\t\t{\r\n\t\t\trequire( ownershipTokenCount[_from] > 0 );\r\n\t\t\townershipTokenCount[_from]--;\r\n\t\t\tdelete tokenIndexToApproved[_tokenId];\r\n\t\t\tdelete tokenAuction[_tokenId];\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction transfer(address _to, uint256 _tokenId) public\r\n\t{\r\n\t\trequire(_to != address(0));\r\n\t\trequire(_owns(msg.sender, _tokenId));\r\n\t\t_transfer(msg.sender, _to, _tokenId);\r\n\t}\r\n\t\r\n\tfunction transfers(address _to, uint256[] _tokens) public\r\n    {\r\n\t\trequire(_to != address(0));\r\n        for(uint i = 0; i < _tokens.length; i++)\r\n        {\r\n\t\t\trequire(_owns(msg.sender, _tokens[i]));\r\n\t\t\t_transfer(msg.sender, _to, _tokens[i]);\r\n        }\r\n    }\r\n\t\r\n\tfunction tokenMetadata(uint256 _tokenId) public view returns (string memory infoUrl)\r\n\t{\r\n\t\tif(tokens[_tokenId].time!=0) infoUrl = strConcat( defaultMetadataURI, \"\", uint2str(_tokenId) );\r\n\t}\r\n\r\n\tstruct Auction\r\n\t{\r\n        address seller;\r\n        uint startingPrice;\r\n        uint endingPrice;\r\n        uint32 startedAt;\r\n\t\tuint32 period;\r\n\t\tuint32 blocks;\r\n    }\r\n\tmapping (uint256 => Auction) tokenAuction;\r\n\t\r\n\tevent CreateAuction(uint256 tokenId, uint32 startedAt, uint256 startingPrice, uint256 endingPrice, uint32 period, uint32 blocks);\r\n\tevent CancelAuction(uint tokenId);\r\n\tevent CompleteAuction(uint tokenId, uint idSrv);\r\n\t\r\n\tuint256 public FEECONTRACT = 10;\r\n\tuint256 public feeValue;\r\n\t\r\n\tfunction createAuction( uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint32 period, uint32 blocks ) public\r\n    {\r\n        require(_owns(msg.sender, tokenId));\r\n\t\trequire(tokenAuction[tokenId].startedAt==0);\r\n\t\trequire(period >= 1 minutes && period <= 30 days);\r\n\t\trequire(blocks>=1 && blocks <=10);\r\n\t\trequire(startingPrice > 0);\r\n\t\trequire(endingPrice > 0);\r\n\t\t\r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            startingPrice,\r\n            endingPrice,\r\n            timenow(),\r\n\t\t\tperiod,\r\n\t\t\tblocks\r\n        );\r\n\t\t\r\n\t\ttokenAuction[tokenId] = auction;\r\n\t\t\r\n        emit CreateAuction(tokenId, timenow(), startingPrice, endingPrice, period, blocks);\r\n    }\r\n\r\n\tfunction cancelAuction(uint256 tokenId) public\r\n\t{\r\n        require(_owns(msg.sender, tokenId));\r\n\t\trequire(tokenAuction[tokenId].startedAt!=0);\r\n\r\n\t\tdelete tokenAuction[tokenId];\r\n\r\n        emit CancelAuction(tokenId);\r\n    }\r\n\r\n\tfunction getAuction(uint256 tokenId) public view returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint32 startedAt,\r\n\t\tuint32 period,\r\n\t\tuint32 blocks,\r\n\t\tuint curPrice\r\n    ){\r\n        Auction storage auction = tokenAuction[tokenId];\r\n        if(tokenAuction[tokenId].startedAt!=0)\r\n\t\t{\r\n\t\t\tseller = auction.seller;\r\n\t\t\tstartingPrice = auction.startingPrice;\r\n\t\t\tendingPrice = auction.endingPrice;\r\n\t\t\tstartedAt = auction.startedAt;\r\n\t\t\tperiod = auction.period;\r\n\t\t\tblocks = auction.blocks;\r\n\t\t\tcurPrice = getCurrentPrice(tokenId);\r\n\t\t}\r\n    }\r\n\r\n\tfunction getCurrentPrice(uint256 tokenId) public view returns (uint)\r\n    {\r\n\t\tAuction storage auction = tokenAuction[tokenId];\r\n\r\n\t\tif(tokenAuction[tokenId].startedAt==0) return 0;\r\n\t\tif(timenow()>=auction.startedAt + auction.period) return auction.endingPrice;\r\n\t\t\r\n\t\tint changePriceOfStage = (int(auction.endingPrice) - int(auction.startingPrice)) / auction.blocks;\r\n\t\tuint32 periodOfStage = auction.period / auction.blocks;\r\n\t\tuint32 curStage = ( timenow() - auction.startedAt ) / periodOfStage;\r\n\t\tuint price = uint(int(auction.startingPrice) + changePriceOfStage * curStage);\r\n\t\t\t\t\r\n\t\treturn price;\r\n\t}\r\n\t\r\n\tfunction bid(uint256 tokenId, uint idSrv) public payable\r\n\t{\r\n\t\tAuction storage auction = tokenAuction[tokenId];\r\n\t\t\r\n\t\trequire(auction.startedAt!=0);\r\n\t\t\r\n\t\tuint256 price = getCurrentPrice(tokenId);\r\n        require(msg.value == price);\r\n\t\t\r\n\t\taddress seller = auction.seller;\r\n\t\trequire(msg.sender != seller);\r\n\r\n\t\t_transfer(seller, msg.sender, tokenId);\r\n\t\t\r\n        uint256 curFee = price * FEECONTRACT / 100;\r\n        uint256 sendValue = price - curFee;\r\n\t\tfeeValue = feeValue + curFee;\r\n\r\n        seller.transfer(sendValue);\r\n\r\n\t\temit CompleteAuction(tokenId, idSrv);\r\n\t}\r\n\t\r\n}\r\n\r\ncontract SuperFan is ExpandedToken\r\n{\r\n\tbool public paused = false;\r\n\r\n\tmapping (uint64 => bool) public nonces;\r\n\t\r\n\tevent CreateToken(address indexed to, uint256 indexed tokenId, uint256 indexed srvId);\r\n\t\r\n\tconstructor(\r\n\t\tstring memory name, \r\n\t\tstring memory symbol, \r\n\t\tuint count, \r\n\t\tstring memory defaultUri, \r\n\t\taddress artist, \r\n\t\taddress admin, \r\n\t\tuint feeContract, \r\n\t\tuint shareArtist) public \r\n\t{\r\n\t\trequire(feeContract>=1 && feeContract<=50);\r\n\t\trequire(shareArtist>=1 && shareArtist<=50);\r\n\t\t\r\n\t\tsetName(name, symbol);\t\t\r\n\t\tmintTokens(count, artist, shareArtist);\r\n\t\tsetDefaultMetadataURI(defaultUri);\r\n\t\taddAdmin(admin);\r\n\t\tFEECONTRACT = feeContract;\r\n\t}\r\n\t\r\n\tevent LogUpdateToken(address user, uint256 tokenId, uint256 params);\r\n\tevent SetPaused(bool _paused);\r\n\t\r\n\tfunction getTokenInfo(uint256 tokenId) public view returns (\r\n\t\tuint32 time,\r\n\t\tuint params,\r\n\t\taddress owner\r\n\t){\r\n\t\tif(tokens[tokenId].time!=0)\r\n\t\t{\r\n\t\t\ttime = tokens[tokenId].time;\r\n\t\t\tparams = tokens[tokenId].params;\r\n\t\t\towner = ownerOf(tokenId);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction setPaused(bool _paused) public onlyOwner\r\n\t{\r\n\t\trequire(paused != _paused);\r\n\t\tpaused = _paused;\r\n\t\t\r\n\t\temit SetPaused(_paused);\r\n\t}\r\n\t\r\n\tfunction createToken(address whom, uint idSrv) internal\r\n\t{\r\n\t\trequire(paused == false);\r\n\t\t\r\n\t\tToken memory _token = Token({\r\n\t\t\ttime : timenow(),\r\n\t\t\tparams : 0\r\n\t\t});\r\n\t\r\n\t\tuint idToken = ++totalSupply;\r\n\t\ttokens[idToken] = _token;\r\n\t\t\r\n\t\t_transfer(address(0), whom, idToken);\r\n\t\t\r\n\t\tif (idSrv!=0) emit CreateToken(whom, idToken, idSrv);\r\n\t}\r\n\t\r\n\tfunction getTokensTo(uint count, address addr) public\r\n\t{\r\n\t\trequire(unused[msg.sender]>=count);\r\n\t\tunused[msg.sender] = unused[msg.sender] - count;\r\n\t\t\r\n\t\tfor(uint i=0;i<count;i++)\r\n\t\t{\r\n\t\t\tcreateToken(addr, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction giveOut(address[] addrs, uint[] idSrv) public onlyAdmin\r\n\t{\r\n\t\trequire(addrs.length>0);\r\n\t\tuint count = addrs.length;\r\n\t\trequire(unused[address(this)]>=count);\r\n\t\trequire(addrs.length == idSrv.length);\r\n\r\n\t\tunused[address(this)] = unused[address(this)] - count;\r\n\t\t\r\n\t\tfor(uint i = 0; i < count; i++) \r\n\t\t{\r\n\t\t\tcreateToken(addrs[i], idSrv[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setUserControl(uint256 tokenId, uint64 nonce, uint64 userId, bytes32 r, bytes32 s, uint8 v) public\r\n\t{\r\n\t\tbytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\t\t\r\n\t\tbytes32 hash = keccak256( abi.encodePacked(address(this), msg.sender, nonce, userId, tokenId) );\r\n        address signer = ecrecover(keccak256( abi.encodePacked(prefix,hash)), v, r, s);\r\n\t\t\r\n        require(paused == false);\r\n\t\trequire(ownerOf(tokenId) == userId);\r\n\t\trequire(admins[signer]);\r\n\t\trequire(nonces[nonce] == false);\r\n\t\tnonces[nonce] = true;\r\n\r\n\t\t_transfer(userId, msg.sender, tokenId);\r\n\t}\r\n\r\n\tfunction setServerControl(uint256 tokenId, uint64 nonce, uint64 userId, bytes32 r, bytes32 s, uint8 v) public\r\n\t{\r\n\t\tbytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n\t\t\r\n\t\tbytes32 hash = keccak256( abi.encodePacked(address(this), msg.sender, nonce, userId, tokenId) );\r\n        address signer = ecrecover(keccak256( abi.encodePacked(prefix,hash)), v, r, s);\r\n\t\t\r\n        require(paused == false);\r\n\t\trequire(ownerOf(tokenId) == msg.sender);\r\n\t\trequire(admins[signer]);\r\n\t\trequire(nonces[nonce] == false);\r\n\t\tnonces[nonce] = true;\r\n\t\t\r\n\t\t_transfer(msg.sender, userId, tokenId);\r\n\t}\r\n\t\r\n\tfunction updateToken(uint tokenId, uint params) public\r\n\t{\r\n\t\trequire(tokens[tokenId].time!=0);\r\n\t\trequire(ownerOf(tokenId) == msg.sender);\r\n\t\trequire(tokens[tokenId].params != params);\r\n\t\t\r\n\t\ttokens[tokenId].params = params;\r\n\t\t\r\n\t\temit LogUpdateToken(msg.sender, tokenId, params);\r\n\t}\r\n\t\r\n\tfunction () onlyOwner payable public {}\r\n\t\r\n\tfunction withdrawFee() onlyOwner public\r\n\t{\r\n\t\trequire( feeValue > 0 );\r\n\r\n\t\tuint256 tmpFeeValue = feeValue;\r\n\t\tfeeValue = 0;\r\n\t\t\r\n\t\towner.transfer(tmpFeeValue);\r\n\t}\r\n\t\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint64\"},{\"name\":\"userId\",\"type\":\"uint64\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"setServerControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"transfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTokensTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint64\"},{\"name\":\"userId\",\"type\":\"uint64\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"setUserControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timenow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"idSrv\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"name\":\"startedAt\",\"type\":\"uint32\"},{\"name\":\"period\",\"type\":\"uint32\"},{\"name\":\"blocks\",\"type\":\"uint32\"},{\"name\":\"curPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultMetadataURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint32\"},{\"name\":\"params\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"markTokensToSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_defaultUri\",\"type\":\"string\"}],\"name\":\"setDefaultMetadataURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint32\"},{\"name\":\"blocks\",\"type\":\"uint32\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whom\",\"type\":\"address\"},{\"name\":\"countToBuy\",\"type\":\"uint256\"}],\"name\":\"buyVirtTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"unusedOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getListTokens\",\"outputs\":[{\"name\":\"res\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"idSrv\",\"type\":\"uint256[]\"}],\"name\":\"giveOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"params\",\"type\":\"uint256\"}],\"name\":\"updateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInfoMarkTokens\",\"outputs\":[{\"name\":\"countMark\",\"type\":\"uint256\"},{\"name\":\"countAll\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"sendVirtTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEECONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteMark\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"defaultUri\",\"type\":\"string\"},{\"name\":\"artist\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"feeContract\",\"type\":\"uint256\"},{\"name\":\"shareArtist\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"srvId\",\"type\":\"uint256\"}],\"name\":\"CreateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"params\",\"type\":\"uint256\"}],\"name\":\"LogUpdateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"SetPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"SetName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startedAt\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"blocks\",\"type\":\"uint32\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"idSrv\",\"type\":\"uint256\"}],\"name\":\"CompleteAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"SendVirtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarkTokensToSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeleteMark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"form\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"BuyVirtTokens\",\"type\":\"event\"}]","ContractName":"SuperFan","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000180000000000000000000000000e1dadfde22c684e8c89f28df55a04cd12b4bfca7000000000000000000000000e1dadfde22c684e8c89f28df55a04cd12b4bfca7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000011546573742050656c6c657220546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035450540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e68747470733a2f2f66616e61706c792e636f6d2f746f6b656e2f7470742f0000","Library":"","LicenseType":"None","SwarmSource":"bzzr://5b5c39d3f70d378e38443ce605014cc590be60808b1f011bb4e5ba42273a75cf"}]}