{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/** ----------------------------------------------------------------------------\r\n * 'SOX Token' token contract\r\n *\r\n * Symbol : SOX\r\n * Name : Super OX Token\r\n * Website : https://www.superoxchain.com/\r\n * Total supply: 1000000000\r\n * Decimals : 18\r\n *\r\n * (c) superoxchain.com, 2018-04\r\n * ----------------------------------------------------------------------------\r\n **/ \r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n * See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n */\r\n \r\n/**\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     *\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n \r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n\r\n   /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n   function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n   }\r\n   \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, _newOwner);\r\n    _owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n* See\r\nhttps://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/lifecycle/Pausable.sol\r\n*/\r\ncontract Pausable is Ownable {\r\nevent Pause();\r\nevent Unpause();\r\nbool public paused = false;\r\n/**\r\n* @dev Modifier to make a function callable only when the contract is not paused.\r\n*/\r\nmodifier whenNotPaused() {\r\nrequire(!paused);\r\n_;\r\n}\r\n/**\r\n* @dev Modifier to make a function callable only when the contract is paused.\r\n*/\r\nmodifier whenPaused() {\r\nrequire(paused);\r\n_;\r\n}\r\n/**\r\n * @dev called by the owner to pause, triggers stopped state\r\n*/\r\nfunction pauseContract() onlyOwner whenNotPaused public {\r\npaused = true;\r\nemit Pause();\r\n}\r\n/**\r\n* @dev called by the owner to unpause, returns to normal state\r\n*/\r\nfunction unpauseContract() onlyOwner whenPaused public {\r\npaused = false;\r\nemit Unpause();\r\n}\r\n}\r\n\r\n/**\r\n * @title Controlled 擁有者控制及管理合約\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Controlled is Pausable {\r\n  using Roles for Roles.Role;\r\n  // 黑名單資料集合\r\n  Roles.Role internal lockedList;\r\n  // 管理者群組名單資料集合\r\n  Roles.Role internal adminGroupList;\r\n  \r\n  // 呼叫insertToExclude(address)合約擁有者位址插入管理者群組名單\r\n  constructor() internal {\r\n    Roles.add(adminGroupList, msg.sender);\r\n  }\r\n  \r\n  // 缺省黑名單狀態值  true:使用黑名單 false:不使用黑名單\r\n  bool internal _lockedListFlag = false;\r\n  \r\n  // 獲取黑名單狀態值  true:黑名單開啟狀態 false:黑名單關閉狀態\r\n  function lockedListFlag() public view inAdminGroupList returns (bool) {\r\n    return _lockedListFlag;\r\n  }\r\n  \r\n   // 黑名單狀態值設定  true:使用黑名單 false:不使用黑名單\r\n  function setLockedListFlag(bool _enable) public inAdminGroupList returns (bool success) {\r\n    _lockedListFlag = _enable;\r\n    return true;\r\n  }\r\n   \r\n  // 寫入資料到黑名單map\r\n  function insertToLockedList(address _addr)  public inAdminGroupList  returns (bool success) {\r\n    Roles.add(lockedList, _addr);\r\n    success = true;\r\n  }\r\n  \r\n  function removeFromLockedList(address _addr)  public inAdminGroupList returns (bool success) {\r\n    Roles.remove(lockedList, _addr);\r\n    success = true;\r\n  }\r\n  \r\n  function hasInLockedList(address _addr)  public inAdminGroupList view returns (bool) {\r\n   return Roles.has(lockedList, _addr);\r\n  }\r\n  \r\n // 寫入資料到adminGroupList名單map\r\n  function insertToAdminList(address _addr)  public inAdminGroupList  returns (bool success) {\r\n    Roles.add(adminGroupList, _addr);\r\n    success = true;\r\n  }\r\n  \r\n  function removeFromAdminList(address _addr)  public inAdminGroupList  returns (bool success) {\r\n    Roles.remove(adminGroupList, _addr);\r\n    success = true;\r\n  }\r\n  \r\n  function hasInAdminList(address _addr)  public inAdminGroupList view returns (bool) {\r\n      return Roles.has(adminGroupList, _addr);\r\n  }\r\n    \r\n  modifier inAdminGroupList() {\r\n    require(Roles.has(adminGroupList, msg.sender), \"you are not Admin Group Member!\");\r\n    _;\r\n  }\r\n  modifier notInLockedList() {\r\n        if(_lockedListFlag) {\r\n        require(!Roles.has(lockedList, msg.sender), \"you are locked!\");\r\n        }\r\n    _;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic is Controlled {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n * See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public whenNotPaused notInLockedList returns (bool) {\r\n    if (_lockedListFlag) { \r\n     require(!Roles.has(lockedList, _to));\r\n    }  \r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n    require(_to != 0x0); // Prevent transfer to 0x0 address.\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n* See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\r\n*/\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* https://github.com/ethereum/EIPs/issues/20\r\n* Based on code by FirstBlood:https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n* See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol\r\n*/\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    notInLockedList\r\n    returns (bool)\r\n  {\r\n    if (_lockedListFlag) { \r\n    require(!Roles.has(lockedList, _from));\r\n    require(!Roles.has(lockedList, _to));\r\n    }\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n    require(_to != 0x0); // Prevent transfer to 0x0 address.\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public whenNotPaused notInLockedList returns (bool) {\r\n    require(_spender != 0x0); // Prevent transfer to 0x0 address. \r\n    if (_lockedListFlag) { \r\n    require(!Roles.has(lockedList, _spender));\r\n    }\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    if (_lockedListFlag) { \r\n     require(!Roles.has(lockedList, _owner));\r\n     require(!Roles.has(lockedList, _spender));\r\n    }  \r\n   \r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    notInLockedList\r\n    returns (bool)\r\n  {\r\n    require(_spender != 0x0); // Prevent transfer to 0x0 address. \r\n    if (_lockedListFlag) { \r\n     require(!Roles.has(lockedList, _spender));\r\n    }\r\n   \r\n    allowed[msg.sender][_spender] = (\r\n    allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    notInLockedList\r\n    returns (bool)\r\n  {\r\n    require(_spender != 0x0); // Prevent transfer to 0x0 address. \r\n    if (_lockedListFlag) { \r\n     require(!Roles.has(lockedList, _spender));\r\n    }\r\n  \r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {     \r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n* @title Super OX token\r\n* @dev StandardToken modified with transfers.\r\n**/\r\n\r\ncontract TokenSOX is StandardToken {\r\n  string public name = \"Super OX\";\r\n  string public symbol = \"SOX\";\r\n  uint8 public decimals = 18;\r\n  \r\n  // total supply: 10 * 10^8 * 10^18\r\n  uint256 internal INITIAL_SUPPLY = (1000000000)*(10**uint256(decimals));\r\n \r\n  //缺省銷毀狀態 true:合約可銷毀代幣 false:合約不可銷毀代幣\r\n  bool public burningFinishedFlag = true;\r\n  event Burn(address indexed burner, uint256 value);\r\n  event BurnFinished(address indexed caller, bool burningFinishedFlag);\r\n  event BurnStarted(address indexed caller, bool burningFinishedFlag);\r\n  \r\n  /**\r\n  * Token Constructor\r\n  *\r\n  */\r\n  constructor() public{\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    \r\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n  }\r\n  \r\n  //檢查合約是否銷毀代幣的狀態 true:合約可銷毀代幣 false:合約不可銷毀代幣\r\n  modifier canBurn() {\r\n    require(!burningFinishedFlag);\r\n    _;\r\n  }\r\n  \r\n  //銷毀合約代幣\r\n  function burnFromOwner(uint256 _value) public onlyOwner canBurn returns (bool success) {\r\n    _burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n \r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_who != 0x0);  \r\n    require(_value > 0,\"Value is greater than 0\");\r\n    require(_value <= balances[_who]);\r\n    require(totalSupply_.sub(_value) >= 0,\"totalSupply Value is greater than or equal to 0\" ) ;\r\n  \r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n  \r\n   /**\r\n   * @dev Function to stop burning tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function setBurningFinishedFlag(bool toggleBurning) public onlyOwner returns (bool) {\r\n    burningFinishedFlag = toggleBurning;\r\n    if (toggleBurning) {\r\n      emit BurnFinished(msg.sender, burningFinishedFlag);\r\n    }\r\n    else {\r\n      emit BurnStarted(msg.sender, burningFinishedFlag);  \r\n    }\r\n    return true;\r\n  }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedListFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasInAdminList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasInLockedList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setLockedListFlag\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"insertToLockedList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromAdminList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromLockedList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFromOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"insertToAdminList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toggleBurning\",\"type\":\"bool\"}],\"name\":\"setBurningFinishedFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burningFinishedFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burningFinishedFlag\",\"type\":\"bool\"}],\"name\":\"BurnFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burningFinishedFlag\",\"type\":\"bool\"}],\"name\":\"BurnStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenSOX","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"None","SwarmSource":"bzzr://5e5f1889deb5b105b93c805b431173a7a92234be7b478d68b7e664ea9263dece"}]}